
/module/data/BUILD/GAP8_V2/GCC_RISCV/test:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc 000003e0  00000004  1b000004  00001004  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .stack        00001038  1b0003e8  1b0003e8  000013e8  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .vectors      000000a0  1c000000  1c000000  00003000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000fcf8  1c0000a0  1c0000a0  000030a0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .init_array   00000050  1c00fd98  1c00fd98  00012d98  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  1c00fde8  1c00fde8  00012de8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .init         00000000  1c00fdf4  1c00fdf4  00014044  2**0  CONTENTS, ALLOC, LOAD, CODE
  7 .fini         00000000  1c00fdf4  1c00fdf4  00014044  2**0  CONTENTS, ALLOC, LOAD, CODE
  8 .preinit_array 00000000  1c00fdf4  1c00fdf4  00014044  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .boot         00000000  1c00fdf4  1c00fdf4  00014044  2**0  CONTENTS
 10 .got          00000000  1c00fdf4  1c00fdf4  00014044  2**0  CONTENTS, ALLOC, LOAD, DATA
 11 .shbss        00000000  1c00fdf4  1c00fdf4  00014044  2**0  CONTENTS
 12 .gnu.offload_funcs 00000000  1c00fdf4  1c00fdf4  00014044  2**0  CONTENTS
 13 .gnu.offload_vars 00000000  1c00fdf4  1c00fdf4  00014044  2**0  CONTENTS
 14 .rodata       000007c8  1c00fdf8  1c00fdf8  00012df8  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .data         000003a0  1c0105c0  1c0105c0  000135c0  2**2  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          000003a8  1c010960  1c010960  00013960  2**2  ALLOC
 17 .data_tiny_l1 00000018  00000004  1c010d08  00014004  2**2  CONTENTS, ALLOC, LOAD, DATA
 18 .l1cluster_g  00000028  1000001c  1c010d20  0001401c  2**2  CONTENTS, ALLOC, LOAD, DATA
 19 .bss_l1       00000000  10000044  10000044  00014044  2**0  CONTENTS
 20 .debug_frame  0000c8e8  00000000  00000000  00014044  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   000e108c  00000000  00000000  0002092c  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 000105ee  00000000  00000000  001019b8  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0006d38f  00000000  00000000  00111fa6  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 00002168  00000000  00000000  0017f338  2**3  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 0000a958  00000000  00000000  001814a0  2**3  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   0003a56f  00000000  00000000  0018bdf8  2**0  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    00010359  00000000  00000000  001c6367  2**0  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000001a  00000000  00000000  001d66c0  2**0  CONTENTS, READONLY
 29 .Pulp_Chip.Info 0000004e  00000000  00000000  001d66da  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1b0003e8 l    d  .stack	00000000 .stack
1c000000 l    d  .vectors	00000000 .vectors
1c0000a0 l    d  .text	00000000 .text
1c00fd98 l    d  .init_array	00000000 .init_array
1c00fde8 l    d  .fini_array	00000000 .fini_array
1c00fdf4 l    d  .init	00000000 .init
1c00fdf4 l    d  .fini	00000000 .fini
1c00fdf4 l    d  .preinit_array	00000000 .preinit_array
1c00fdf4 l    d  .boot	00000000 .boot
1c00fdf4 l    d  .got	00000000 .got
1c00fdf4 l    d  .shbss	00000000 .shbss
1c00fdf4 l    d  .gnu.offload_funcs	00000000 .gnu.offload_funcs
1c00fdf4 l    d  .gnu.offload_vars	00000000 .gnu.offload_vars
1c00fdf8 l    d  .rodata	00000000 .rodata
1c0105c0 l    d  .data	00000000 .data
1c010960 l    d  .bss	00000000 .bss
00000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
1000001c l    d  .l1cluster_g	00000000 .l1cluster_g
10000044 l    d  .bss_l1	00000000 .bss_l1
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .Pulp_Chip.Info	00000000 .Pulp_Chip.Info
00000000 l    df *ABS*	00000000 bridge.c
1c00b910 l     F .text	0000001c __rt_event_enqueue
1c00b92c l     F .text	00000020 __rt_bridge_check_bridge_req.part.5
1c00b94c l     F .text	00000046 __rt_bridge_wait
00000004 l     O .data_tiny_fc	00000004 __rt_bridge_flash_handle
00000008 l     O .data_tiny_fc	00000004 __rt_bridge_flash_type
0000000c l     O .data_tiny_fc	00000004 __rt_bridge_flash_itf
00000010 l     O .data_tiny_fc	00000004 __rt_bridge_flash_cs
00000014 l     O .data_tiny_fc	00000004 __rt_bridge_eeprom_handle
00000000 l    df *ABS*	00000000 events.c
00000000 l    df *ABS*	00000000 periph-v2.c
00000000 l    df *ABS*	00000000 hyperram-v1.c
1c00cef0 l     F .text	00000014 l2_memcpy
1c00cf04 l     F .text	00000024 rt_event_enqueue
1c00cf28 l     F .text	00000032 pi_task_wait_on.isra.4
1c00d21a l     F .text	0000004a __pi_hyper_copy_exec
1c00d37e l     F .text	00000296 __pi_hyper_copy_misaligned
1c00d264 l     F .text	00000056 __pi_hyper_copy
1c00d32c l     F .text	00000052 exec_pending_task
1c00d614 l     F .text	0000009e __pi_hyper_copy_2d
1c00d6f0 l     F .text	0000002e __rt_hyper_init
1c010a48 l     O .bss	00000080 __pi_hyper_temp_buffer
1c010448 l     O .rodata	00000034 __hyper_pad
1c010c7c l     O .bss	00000004 __pi_hyper_cluster_reqs_first
1c010c80 l     O .bss	00000004 __rt_hyper_open_count
00000000 l    df *ABS*	00000000 udma-v2.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 conf.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 utils.c
1c00b730 l     F .text	0000007c __rt_fc_cluster_lock_req
1b000bf0 l     O .stack	00000018 cbsys_first
00000000 l    df *ABS*	00000000 himax.c
00000000 l    df *ABS*	00000000 io.c
1c00e57a l     F .text	0000000e __rt_io_end_of_flush
1c00e588 l     F .text	00000050 __rt_io_uart_wait_req
1c00e5d8 l     F .text	00000042 __rt_do_putc_host
1c00e61a l     F .text	0000005a __rt_io_start
1c00e674 l     F .text	00000020 rt_event_execute.isra.4.constprop.12
1c00e694 l     F .text	00000070 __rt_io_lock
1c00e704 l     F .text	00000034 __rt_putc_host_cluster_req
1c00e738 l     F .text	00000070 __rt_io_unlock
1c00e7a8 l     F .text	000000da __rt_io_uart_flush.constprop.11
1c00e882 l     F .text	00000092 __rt_io_uart_wait_pending
1c00e914 l     F .text	00000028 __rt_io_stop
1c00ea80 l     F .text	000000ac tfp_putc.isra.9
1c010bd8 l     O .bss	00000080 __rt_io_event
1b000c0c l     O .stack	00000010 __rt_io_fc_lock
1c0108e0 l     O .data	00000080 __rt_putc_host_buffer
1c010c90 l     O .bss	00000004 __rt_io_event_current
1c010c94 l     O .bss	00000004 __rt_io_pending_flush
1c010c98 l     O .bss	00000004 __rt_putc_host_buffer_index
1c010c9c l     O .bss	00000004 _rt_io_uart
00000000 l    df *ABS*	00000000 crt0.o
1c000094 l       .vectors	00000000 __rt_no_irq_handler
00000000 l    df *ABS*	00000000 sched.o
1c00018a l       .text	00000000 __rt_handle_special_event
1c000184 l       .text	00000000 __rt_no_first
1c000186 l       .text	00000000 __rt_common
1c000188 l       .text	00000000 enqueue_end
1c0001ea l       .text	00000000 __rt_remote_enqueue_event_loop_cluster
1c000226 l       .text	00000000 __rt_remote_enqueue_event_loop_cluster_continue
1c000210 l       .text	00000000 __rt_cluster_pool_update_end
1c0001f8 l       .text	00000000 __rt_cluster_pool_update_loop
1c000200 l       .text	00000000 __rt_cluster_pool_update_loop_end
1c000208 l       .text	00000000 __rt_cluster_pool_update_no_current
1c000244 l       .text	00000000 __rt_remote_enqueue_event_loop_next_cluster
00000000 l    df *ABS*	00000000 vectors.o
1c0002be l       .text	00000000 __rt_call_c_function
00000000 l    df *ABS*	00000000 udma-v2.o
1c0003ae l       .text	00000000 __rt_udma_no_copy
1c000376 l       .text	00000000 repeat_transfer
1c0003c6 l       .text	00000000 handle_special_end
1c000322 l       .text	00000000 resume_after_special_end
1c000360 l       .text	00000000 checkTask
1c000336 l       .text	00000000 __rt_udma_call_enqueue_callback_resume
1c00035c l       .text	00000000 transfer_resume
1c000354 l       .text	00000000 hyper
1c000354 l       .text	00000000 fc_tcdm
1c000354 l       .text	00000000 dual
1c000376 l       .text	00000000 dmaCmd
1c00039e l       .text	00000000 not_last
1c00040e l       .text	00000000 i2c_step1
1c00042a l       .text	00000000 i2c_step2
1c0003d0 l       .text	00000000 spim_step3
1c0003ec l       .text	00000000 spim_step2
00000000 l    df *ABS*	00000000 soc_event_eu.o
1c00047e l       .text	00000000 __rt_fc_socevents_not_hyper_rx
1c000484 l       .text	00000000 __rt_fc_socevents_not_hyper_tx
1c00049e l       .text	00000000 __rt_soc_evt_no_udma_channel
1c00050c l       .text	00000000 rtc_event_handler
1c0004ca l       .text	00000000 __rt_soc_evt_pwm
1c0004de l       .text	00000000 __rt_soc_evt_store
1c0004f2 l       .text	00000000 socevents_set
00000000 l    df *ABS*	00000000 udma-v2_asm.o
1c000542 l       .text	00000000 __rt_udma_handle_pending
00000000 l    df *ABS*	00000000 hyperram-v1_asm.o
1c000594 l       .text	00000000 __rt_hyper_handle_copy_end
1c00054e l       .text	00000000 __rt_hyper_repeat_copy
1c000580 l       .text	00000000 __rt_hyper_repeat_copy_not_last
1c0005a6 l       .text	00000000 __rt_hyper_handle_emu_task
1c0005c0 l       .text	00000000 __rt_hyper_handle_pending_tasks
1c000622 l       .text	00000000 __rt_hyper_repeat_copy_not_last2
00000000 l    df *ABS*	00000000 gpio.o
1c000686 l       .text	00000000 __rt_gpio_handler_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixunsdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 model.c
1c0017d6 l     F .text	000000d8 cluster
1c010960 l     O .bss	0000000c camera
1c0107c0 l     O .data	00000001 value
00000000 l    df *ABS*	00000000 modelKernels.c
1c01096c l     O .bss	0000001c HyperFlash
1c010988 l     O .bss	0000000c HyperRam
00000000 l    df *ABS*	00000000 CNN_Activation_SQ8.c
1c006802 l     F .text	0000012e KerReductIO_Compact_SQ8_1
00000000 l    df *ABS*	00000000 CNN_Bias_Linear_SQ8.c
00000000 l    df *ABS*	00000000 CNN_Conv_SQ8.c
1c006dda l     F .text	0000001a LastDefinedOutput
1c006df4 l     F .text	00000120 KerConv3x3Stride1_Body_2Out_SQ8
1c006f14 l     F .text	00000138 KerConv2x3from3x3Stride1_V_2Out_SQ8
1c00704c l     F .text	0000009a KerConv3x2from3x3Stride1_H_2Out_SQ8
1c0070e6 l     F .text	000000fe KerConv3x3BorderStride1_2Out_SQ8
1c0071e4 l     F .text	000000cc KerConv3x3Stride1_Body_SQ8
1c0072b0 l     F .text	000000c8 KerConv2x3from3x3Stride1_V_SQ8
1c007378 l     F .text	00000056 KerConv3x2from3x3Stride1_H_SQ8
1c0073ce l     F .text	000000f0 KerConv3x3BorderStride1_SQ8
1c0074be l     F .text	000000d4 KerConv3x3Stride2_Body_SQ8
1c007592 l     F .text	000000d2 KerConv2x3from3x3Stride2_V_SQ8
1c007664 l     F .text	0000005c KerConv3x2from3x3Stride2_H_SQ8
1c0076c0 l     F .text	000000f8 KerConv3x3BorderStride2_SQ8
00000000 l    df *ABS*	00000000 CNN_Pooling_SQ8.c
1c007b98 l     F .text	0000001a LastDefinedOutput
1c007bb2 l     F .text	000003c8 KerMaxPool2x2Stride2_SQ8
1c007f7a l     F .text	0000028e KerAvgPool2x2Stride2_SQ8
1c008208 l     F .text	0000007c Ker_ActivationScale1_SQ8
1c008284 l     F .text	00000220 Ker_Activation_SQ8
1c0084a4 l     F .text	000000d8 KerParPoolActivation
00000000 l    df *ABS*	00000000 CNN_SoftMax_SQ8.c
10000020 l     O .l1cluster_g	00000020 Reduct.15734
1c010178 l     O .rodata	00000012 ExpCoeffLUT
1c01018c l     O .rodata	00000018 FractionExpLUT
1c0101a4 l     O .rodata	00000018 IntegerExpLUT
00000000 l    df *ABS*	00000000 norm_transpose.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 fs.c
1c008a4c l     F .text	00000032 pi_task_wait_on.isra.3
00000000 l    df *ABS*	00000000 read_fs.c
1c008b32 l     F .text	00000008 pi_flash_read_async
1c008b3a l     F .text	0000003e __pi_read_fs_write
1c008b78 l     F .text	00000010 __pi_read_fs_seek
1c008b88 l     F .text	00000040 __pi_read_fs_direct_read_async
1c008bc8 l     F .text	00000018 __pi_read_fs_copy_async
1c008be0 l     F .text	00000018 __pi_read_fs_copy_2d_async
1c008bf8 l     F .text	00000024 rt_event_enqueue
1c008c1c l     F .text	00000038 __pi_fs_free
1c008c54 l     F .text	00000004 __pi_read_fs_unmount
1c008c58 l     F .text	00000126 __pi_read_fs_open
1c008d7e l     F .text	00000126 __pi_fs_mount_step
1c008ea4 l     F .text	0000004e __pi_read_fs_close
1c008ef2 l     F .text	00000098 __pi_read_fs_mount
1c008f8a l     F .text	00000072 __pi_fs_read_cached
1c0090dc l     F .text	00000092 __pi_read_fs_try_read
1c00916e l     F .text	00000040 __pi_read_fs_read_async
00000000 l    df *ABS*	00000000 host_fs.c
1c0091ae l     F .text	0000000c __pi_host_fs_mount
1c0091ba l     F .text	00000002 __pi_host_fs_unmount
1c0091bc l     F .text	00000024 rt_event_enqueue
1c0091e0 l     F .text	00000006 __pi_host_fs_seek
1c0091e6 l     F .text	0000007e __pi_host_fs_copy_2d_async
1c009264 l     F .text	00000028 __pi_host_fs_write_async
1c00928c l     F .text	00000024 __pi_host_fs_read_async
1c0092b0 l     F .text	00000042 __pi_host_fs_copy_async
1c0092f2 l     F .text	00000002 __pi_host_fs_direct_read_async
1c0092f4 l     F .text	0000001c __pi_host_fs_close
1c009310 l     F .text	0000005c __pi_host_fs_open
1c010994 l     O .bss	00000088 bsp_fs_data
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 himax.c
1c0093ba l     F .text	00000020 __himax_reg_write
1c0093da l     F .text	0000003c __himax_init_regs
1c009416 l     F .text	0000002a __himax_set_qqvga
1c0094be l     F .text	00000022 __himax_standby
1c0094e0 l     F .text	00000024 __himax_close
1c009504 l     F .text	00000070 __himax_reset
1c0097a0 l     F .text	000000a6 __himax_control
1c010610 l     O .data	0000001c himax_api
1c0101dc l     O .rodata	0000011c __himax_reg_init
00000000 l    df *ABS*	00000000 hyperflash.c
1c009874 l     F .text	0000001c __rt_event_enqueue
1c009890 l     F .text	0000000e hyperflash_ioctl
1c00989e l     F .text	00000040 hyperflash_stall_task
1c0098de l     F .text	00000088 hyperflash_read_2d_async
1c009b58 l     F .text	00000102 hyperflash_handle_pending_task
1c009966 l     F .text	00000018 hyperflash_copy_2d_async
1c00997e l     F .text	0000000e hyperflash_set_reg_exec
1c00998c l     F .text	000000b0 hyperflash_erase_sector_async
1c00a180 l     F .text	00000052 hyperflash_check_erase
1c009a3c l     F .text	000000a6 hyperflash_erase_chip_async
1c009ae2 l     F .text	00000076 hyperflash_read_async
1c009dc0 l     F .text	0000005c hyperflash_program_async
1c009cb8 l     F .text	00000056 hyperflash_reg_set_async
1c009c5a l     F .text	0000005e hyperflash_reg_get_async
1c009d0e l     F .text	000000b2 hyperflash_program_resume
1c00a1d2 l     F .text	00000052 hyperflash_check_program
1c009e1c l     F .text	0000001a hyperflash_copy_async
1c009e36 l     F .text	0000001e hyperflash_close
1c009e54 l     F .text	00000090 hyperflash_open
1c009ee4 l     F .text	00000032 pi_task_wait_on.isra.3
1c009f16 l     F .text	0000002a hyperflash_copy_2d
1c009f40 l     F .text	00000022 hyperflash_erase_sector
1c009f62 l     F .text	00000022 hyperflash_erase_chip
1c009f84 l     F .text	00000022 hyperflash_read
1c009fa6 l     F .text	00000024 hyperflash_reg_get
1c009fca l     F .text	00000024 hyperflash_reg_set
1c009fee l     F .text	00000024 hyperflash_program
1c00a012 l     F .text	0000002e hyperflash_copy
1c00a040 l     F .text	000000aa hyperflash_erase_resume
1c00a0ea l     F .text	00000044 hyperflash_erase_async
1c00a12e l     F .text	00000022 hyperflash_erase
1c00a150 l     F .text	00000030 hyperflash_get_status_reg
1c01062c l     O .data	00000054 hyperflash_api
00000000 l    df *ABS*	00000000 hyperram.c
1c00a276 l     F .text	00000012 hyperram_copy_2d_async
1c00a288 l     F .text	00000010 hyperram_copy_async
1c00a298 l     F .text	00000022 hyperram_close
1c00a2ba l     F .text	0000009a hyperram_open
1c010680 l     O .data	00000018 hyperram_api
00000000 l    df *ABS*	00000000 ram.c
1c00a36e l     F .text	00000070 __pi_ram_cluster_req
1c00a3de l     F .text	0000001e __pi_ram_cluster_req_done
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 flash_partition.c
00000000 l    df *ABS*	00000000 md5.c
1c00a85e l     F .text	000008d6 body
00000000 l    df *ABS*	00000000 semihost.c
1c00b33a l     F .text	0000000e __internal_semihost
00000000 l    df *ABS*	00000000 ai_deck.c
1c00b3de l     F .text	0000003c __bsp_init_pads
1c010c70 l     O .bss	00000004 __bsp_init_pads_done
00000000 l    df *ABS*	00000000 init.c
1c00b486 l     F .text	00000026 cluster_start
1c00fd9c l     O .init_array	00000004 ctor_list
1c00fdec l     O .fini_array	00000004 dtor_list
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 alloc.c
00000000 l    df *ABS*	00000000 time.c
1c00bf7a l     F .text	00000018 __rt_time_poweroff
1c00bf92 l     F .text	00000018 __rt_time_poweron
1c010c74 l     O .bss	00000004 timer_count
00000000 l    df *ABS*	00000000 time_irq.c
00000000 l    df *ABS*	00000000 freq.c
00000000 l    df *ABS*	00000000 pmu_driver.c
1c00c43a l     F .text	0000002c SetFllMultDivFactors
1c00c466 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c0107c8 l     O .data	00000007 SystemStateToSCUFastSeq
1c0107e0 l     O .data	00000003 ToHWDCDC_Pos
1c0107f0 l     O .data	00000004 RetPMUStateToPMUState
00000000 l    df *ABS*	00000000 cluster.c
1c00c886 l     F .text	00000062 __rt_init_cluster_data
1c00c8e8 l     F .text	00000064 __rt_cluster_init
1c00c94c l     F .text	0000012a __rt_cluster_mount_step
00000000 l    df *ABS*	00000000 pulpos_emu.c
1c00cc32 l     F .text	0000003c __rt_cluster_pulpos_emu_init
1c010a1c l     O .bss	0000002c __rt_pulpos_emu_global_cluster_task
1c010c78 l     O .bss	00000004 __rt_fc_cluster_device
00000000 l    df *ABS*	00000000 cluster_call.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 cpi-v1.c
1c00d810 l     F .text	00000014 __rt_cpi_init
1c010ac8 l     O .bss	00000020 __rt_cpi
00000000 l    df *ABS*	00000000 i2c-v2.c
1c00d824 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00d84a l     F .text	00000032 pi_task_wait_on.isra.3
1c00db80 l     F .text	00000050 __rt_i2c_init
1c0107f4 l     O .data	00000088 __rt_i2c
00000000 l    df *ABS*	00000000 uart.c
1c00dbd0 l     F .text	000000c8 __pi_uart_flow_control_enable
1c00dc98 l     F .text	0000004a __rt_uart_setup
1c00dce2 l     F .text	00000022 __rt_uart_setfreq_after
1c00dd04 l     F .text	00000090 __pi_uart_copy_enqueue_exec_flow_control
1c00dd94 l     F .text	0000002e __pi_uart_copy_enqueue_exec.isra.14
1c00ddc2 l     F .text	00000084 __pi_uart_copy_enqueue
1c00de46 l     F .text	00000042 __rt_uart_wait_tx_done.isra.17
1c00de88 l     F .text	0000002c __rt_uart_setfreq_before
1c00deb4 l     F .text	00000032 pi_task_wait_on.isra.20
1c01087c l     O .data	00000044 __rt_uart
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 pwm-v1.c
1c00e2f0 l     F .text	00000028 __pos_pwm_init
1c010ae8 l     O .bss	00000058 __pos_pwm
00000000 l    df *ABS*	00000000 gpio-v2.c
1c010b40 l     O .bss	00000098 __rt_gpio
00000000 l    df *ABS*	00000000 i2s-v1.c
1c00e45c l     F .text	00000034 __rt_i2s_resume
1c00e490 l     F .text	0000002a __rt_i2s_setfreq_after
1c00e4ba l     F .text	0000002c __rt_i2s_setfreq_before
1c010c84 l     O .bss	00000004 __rt_i2s_first
00000000 l    df *ABS*	00000000 i2c-v2.c
1c0108c0 l     O .data	00000020 __rt_i2c
00000000 l    df *ABS*	00000000 spim-v2.c
1c010c88 l     O .bss	00000008 __rt_spim_open_count
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 prf.c
1c00ecee l     F .text	00000092 _to_x
1c00ed80 l     F .text	00000020 _rlrshift
1c00eda0 l     F .text	00000044 _ldiv5
1c00ede4 l     F .text	00000034 _get_digit
00000000 l    df *ABS*	00000000 uart.c
1c00f8f4 l     F .text	00000024 __rt_uart_setup.isra.5
1c00f918 l     F .text	00000022 __rt_uart_setfreq_after
1c00f93a l     F .text	00000042 __rt_uart_wait_tx_done.isra.6
1c00f97c l     F .text	0000002c __rt_uart_setfreq_before
1c00f9a8 l     F .text	00000042 __rt_uart_cluster_req
1c00f9ea l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c010c58 l     O .bss	00000010 __rt_uart
00000000 l    df *ABS*	00000000 pe-eu-v3.o
1c00fca6 l       .text	00000000 __rt_slave_start
1c00fbfc l       .text	00000000 __rt_master_event
1c00fc10 l       .text	00000000 __rt_master_loop
1c00fc00 l       .text	00000000 __rt_push_event_to_fc_retry
1c00fc98 l       .text	00000000 __rt_push_event_to_fc_wait
1c00fc8a l       .text	00000000 __rt_master_sleep
1c00fc18 l       .text	00000000 __rt_master_loop_update_next
1c00fc6c l       .text	00000000 __rt_no_stack_check
1c00fc78 l       .text	00000000 __rt_master_no_slave_barrier
1c00fc88 l       .text	00000000 __rt_master_loop_no_slave
1c00fcc4 l       .text	00000000 __rt_fork_return
1c00fcc8 l       .text	00000000 __rt_wait_for_dispatch
1c00fcde l       .text	00000000 __rt_other_entry
1c00fcd8 l       .text	00000000 __rt_fork_entry
1c00fd06 l       .text	00000000 __rt_no_stack_check_end
1c00fd78 l       .text	00000000 __rt_dma_2d_done
1c00fd36 l       .text	00000000 __rt_dma_2d_redo
1c00fd3e l       .text	00000000 __rt_dma_2d_not_last
1c00fd60 l       .text	00000000 __rt_dma_2d_exit
00000000 l    df *ABS*	00000000 libgcc2.c
1c00d2ba g     F .text	00000016 pi_hyper_read_async
1c00eba2 g     F .text	00000006 putchar
1c00e1f8 g     F .text	00000018 __rt_udma_channel_init
1c009458 g     F .text	0000005c __himax_reg_get
1c00c048 g     F .text	00000004 pi_time_wait_us
1c008a3e g     F .text	0000000c pi_flash_open
00000000 g       *ABS*	00000000 __rt_debug_init_config_trace
00000350 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_stride
1c00bf5c g     F .text	0000000e pi_l2_malloc
1c00b8a2 g     F .text	00000038 __rt_fc_cluster_lock
1c00c5fc g     F .text	000000a4 InitOneFll
1c00bf6a g     F .text	00000010 pi_l2_free
00000000 g       *ABS*	00000000 __RT_DEBUG_CONFIG
1c010cdc g     O .bss	00000004 __rt_cluster_tasks
1c00ba74 g     F .text	00000022 __rt_bridge_send_notif
1c006b2c g     F .text	00000140 KerParLinearLayer_SQ8
1c00bbe6 g     F .text	00000076 rt_event_alloc
00000338 g     O .data_tiny_fc	00000001 __rt_hyper_pending_emu_do_memcpy
1c00d6b2 g     F .text	00000018 pi_hyper_read_2d_async
1c00b3a2 g     F .text	0000001e semihost_write
1c00bcbc g     F .text	00000064 __rt_event_execute
1c00b6de g     F .text	00000052 __rt_irq_init
1c00bda4 g     F .text	00000048 rt_user_alloc
00000310 g     O .data_tiny_fc	00000004 __rt_hyper_pending_hyper_addr
1c00ca7c g     F .text	000000d8 pi_cluster_open
1c00ecc2 g     F .text	0000002c printf
1c00e21c g     F .text	0000000e pi_pwm_conf_init
ffffffff g       *ABS*	00000000 pulp__L2
1c00bee4 g     F .text	00000072 __rt_allocs_init
1c010cc0 g     O .bss	00000004 __rt_alloc_l1
1c00ca76 g     F .text	00000006 pi_cluster_conf_init
ffffffff g       *ABS*	00000000 pulp__PE
1c00d122 g     F .text	000000a0 pi_hyper_close
1c00d728 g     F .text	0000006a pi_cpi_open
1c00b640 g     F .text	0000004c rt_irq_set_handler
1c0107a0 g     O .data	00000002 rec_digit
00000314 g     O .data_tiny_fc	00000004 __rt_hyper_pending_addr
1c008a90 g     F .text	0000002c pi_fs_mount
00000308 g     O .data_tiny_fc	00000004 __rt_hyper_udma_handle
1c00c76a g     F .text	00000044 InitFlls
00000018 g     O .data_tiny_fc	00000004 __rt_first_free
1c00a5e8 g     F .text	0000000a pi_partition_get_flash_offset
1c00b41a g     F .text	00000018 bsp_hyperram_conf_init
00000001 g       *ABS*	00000000 __ACTIVE_FC
1c00be68 g     F .text	0000002e rt_free
1c00a5f4 g     F .text	00000004 pi_partition_table_load
00000400 g       *ABS*	00000000 __rt_cl_slave_stack_size
1c00c3fc g     F .text	0000003e __rt_freq_init
1c00b4ac g     F .text	00000168 __rt_init
00000001 g       *ABS*	00000000 __FC
1c00c86a g     F .text	00000012 __rt_fll_init
1c0094b4 g     F .text	0000000a __himax_capture_async
1c0107bc g     O .data	00000004 model_L2_Memory
1b001420 g       .stack	00000000 __fc_tcdm_end
1c00e142 g     F .text	00000058 rt_extern_alloc_init
1c00bb72 g     F .text	00000034 __rt_bridge_init
1c0000ac g       .text	00000000 __rt_i2c_step1
00000018 g     O .data_tiny_l1	00000004 __rt_cluster_nb_active_pe
1c002f2c g     F .text	00000bd2 S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu
0000032c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_hyper_addr
1c002394 g     F .text	00000b98 S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu
1c00e544 g     F .text	00000012 __rt_i2c_init
1c0018ae g     F .text	0000058a test_model
1c00fd98 g       .text	00000000 _etext
0000030c g     O .data_tiny_fc	00000004 __rt_hyper_pending_base
1c0105c0 g       .data	00000000 sdata
1c00b384 g     F .text	0000001e semihost_read
1c00da54 g     F .text	00000118 pi_i2c_open
00000001 g       *ABS*	00000000 __rt_nb_cluster
1c00b44c g     F .text	00000010 bsp_hyperflash_open
1c00a224 g     F .text	00000028 pi_hyperflash_conf_init
1c00a4a4 g     F .text	00000052 extern_alloc_init
000003e0 g     O .data_tiny_fc	00000004 __rtc_handler
1c00be38 g     F .text	00000030 rt_alloc
1c00f8ce g     F .text	00000026 __rt_uart_cluster_req_done
1c00b614 g     F .text	00000028 __rt_deinit
1b000c08 g     O .stack	00000001 camera_isAwaked
1c000166 g       .text	00000000 __rt_event_enqueue
1c0000ee g       .text	00000000 __rt_i2c_handle_rx_copy
1c00c024 g     F .text	00000024 rt_time_wait_us
1c00e996 g     F .text	00000036 memcpy
1c000670 g       .text	00000000 __rt_gpio_handler
1c00029e g       .text	00000000 __rt_illegal_instr
1c00beba g     F .text	0000002a __rt_alloc_init_l1_for_fc
1c00d6ca g     F .text	0000001a pi_hyper_write_2d_async
1c00857c g     F .text	0000018e KerParPool2x2Stride2_ReLU_SQ8
1c00177e g     F .text	00000058 .hidden __floatsidf
1c008b02 g     F .text	00000026 pi_fs_write
1c00e136 g     F .text	0000000c __rt_padframe_init
1c00fdf4 g       .fini_array	00000000 __DTOR_END__
0000020c g       *ABS*	00000000 __cluster_text_size
1c000548 g       .text	00000000 __rt_hyper_handle_copy
1c00b476 g     F .text	00000010 bsp_himax_open
1c00eb2c g     F .text	0000002c puts
1c00d87c g     F .text	000000d4 pi_i2c_write_async
1c0106c8  w    O .data	00000018 __rt_padframe_profiles
00000330 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_addr
00000344 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks_last
1c00bc76 g     F .text	00000022 rt_event_get_blocking
1c010960 g       .bss	00000000 _bss_start
1c010960 g       .data	00000000 edata
1c00be96 g     F .text	00000024 __rt_alloc_init_l1
1c0107ac  w    O .data	00000004 __rt_iodev_uart_baudrate
1c00172c g     F .text	00000052 .hidden __fixunsdfsi
1c0001cc g       .text	00000000 __rt_remote_enqueue_event
1c0107c4 g     O .data	00000004 buff
1c0107d0 g     O .data	00000010 PMUState
1c00a44a g     F .text	0000005a pi_cl_ram_copy_2d
1c0105c0 g       .data	00000000 _sdata
1c00bd7c g     F .text	00000008 pi_cl_send_task_to_fc
1c00a24c g     F .text	0000001e hyperram_alloc
10000044 g       .l1cluster_g	00000000 __l1_end
1c0005e0 g       .text	00000000 __rt_hyper_handle_burst
1c00e1a4 g     F .text	00000054 __rt_udma_copy_enqueue
1c00c1ca g     F .text	00000134 rt_periph_copy
1c00ea44 g     F .text	0000003c __rt_putc_uart
1b0003e8 g     O .stack	00000800 __rt_fc_stack
1c00a4f6 g     F .text	00000008 extern_alloc_deinit
00000010 g     O .data_tiny_l1	00000004 __rt_dma_last_pending
1c00d974 g     F .text	000000bc pi_i2c_read_async
1c000194 g       .text	00000000 __rt_bridge_enqueue_event
1c00ee18 g     F .text	00000ab6 _prf
1c006930 g     F .text	0000009a KerParReduct_CC_SQ8
1c000cf4 g     F .text	000005fe .hidden __adddf3
10000044 g       .l1cluster_g	00000000 _libgomp_start
1c0009c6 g     F .text	0000032e .hidden __umoddi3
1c00c0d8 g     F .text	000000f2 __rt_timer_handler
1c00d7da g     F .text	00000036 pi_cpi_capture_async
1c010cc4 g     O .bss	00000004 __rt_alloc_l2
1c0065b0 g     F .text	00000252 modelCNN
1c00da30 g     F .text	00000024 pi_i2c_read
1b001420 g       .stack	00000000 stack
1c00068a g     F .text	0000033c .hidden __udivdi3
1c009574 g     F .text	0000015a __himax_open
1c00a408 g     F .text	00000042 pi_cl_ram_copy
1c00ec46 g     F .text	0000000a abort
1c008ac4 g     F .text	00000008 pi_fs_open
1c00bc5c g     F .text	0000001a rt_event_get
1c010cd0 g     O .bss	00000008 __rt_freq_domains
00000040 g       *ABS*	00000000 _l1_preload_size
1c000164 g       .text	00000000 _init
1c00e054 g     F .text	0000001a pi_uart_write_async
1c00df62 g     F .text	000000f2 pi_uart_open
1c000520 g       .text	00000000 __rt_udma_handle_copy
1c00a55c g     F .text	0000008c extern_free
1c010d08 g       .bss	00000000 _bss_end
1c00a7f2 g     F .text	0000006c flash_partition_find_first
1c0106a8  w    O .data	00000010 __rt_padframe_hyper
1c00e22a g     F .text	00000092 pi_pwm_open
1c00ba56 g     F .text	0000001e __rt_bridge_set_available
1c00fd08 g       .text	00000000 __rt_dma_2d
1c00fb8c g       .text	00000000 __rt_pe_start
1c010ccc g     O .bss	00000004 first_delayed
000003dc g     O .data_tiny_fc	00000004 __rt_rtc_init_done
00000008 g       *ABS*	00000000 __NB_ACTIVE_PE
1c0069ca g     F .text	000000ae KerParReductIO_CC_SQ8
1c00ce54 g     F .text	0000004a pi_cluster_send_task_to_cl
1c00c6a0 g     F .text	000000ca __rt_pmu_cluster_power_up
1b000c20 g       .stack	00000000 stack_start
00000004 g     O .data_tiny_l1	0000000c __rt_cluster_pool
00010000 g       *ABS*	00000000 __L1Cl
1c0079fc g     F .text	0000019c KerParConv3x3Stride2_SQ8
1c00fa20 g     F .text	0000008e __rt_uart_open
1c00d30a g     F .text	00000022 pi_hyper_write
1c005130 g     F .text	000005a0 S6_Linear_2x64
1c00df48 g     F .text	0000001a pi_uart_conf_init
1c00b81a g     F .text	00000022 __rt_utils_init
1c00cd5a g     F .text	000000fa pi_cluster_send_task_to_cl_async
1c008ffc g     F .text	000000e0 __pi_fs_read
1c010698  w    O .data	00000010 __rt_padframe_default
1c00eb58 g     F .text	0000001a fputc_locked
1c00d950 g     F .text	00000024 pi_i2c_write
1c0089e8 g     F .text	00000056 CNN_NormBW_offset_fps
1c009378 g     F .text	00000040 pi_camera_capture
1c00faae g     F .text	0000004e rt_uart_close
1c0000c2 g       .text	00000000 __rt_i2c_step2
1c00cfc2 g     F .text	00000160 pi_hyper_open
1c00bdec g     F .text	0000004c rt_user_free
1c008ad4 g     F .text	00000026 pi_fs_read
1c00fd98 g       .init_array	00000000 __CTOR_LIST__
1c00c2fe g     F .text	00000056 __rt_periph_wait_event
1c00c3b2 g     F .text	0000004a rt_freq_set_and_get
1c00a354 g     F .text	0000001a pi_hyperram_conf_init
1c00b348 g     F .text	00000008 semihost_write0
1c00b68c  w    F .text	00000002 illegal_insn_handler_c
0000033c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_task
1c00cb86 g     F .text	00000070 __rt_cluster_push_fc_event
1c010c68 g     O .bss	00000004 model_L3_Flash
00000320 g     O .data_tiny_fc	00000004 __rt_hyper_end_task
1c00fb8c g       .text	00000000 __cluster_text_start
1c0056d0 g     F .text	00000290 S7_SoftMax
1c00d2f2 g     F .text	00000018 pi_hyper_write_async
1c000080 g       .vectors	00000000 _start
1c00d2d0 g     F .text	00000022 pi_hyper_read
1c00bd84 g     F .text	00000020 rt_user_alloc_init
1c010ca0 g     O .bss	0000001c AT_GraphPerf
1c010cbc g     O .bss	00000004 model_L3_Memory
00000000 g       *ABS*	00000000 __rt_config
1c00b134 g     F .text	00000032 MD5_Init
00000334 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size
1c0000a0 g       .text	00000000 __rt_i2c_handle_tx_copy
1c00e950 g     F .text	00000020 strncmp
1c010d08 g       .bss	00000000 _l1_preload_start_inL2
1c00b83c g     F .text	00000032 __rt_fc_lock
10000044 g       .l1cluster_g	00000000 __l1_heap_start
1c0093b8 g     F .text	00000002 __camera_conf_init
1c00bbce g     F .text	00000018 __rt_wait_event_prepare_blocking
1c00b992 g     F .text	00000078 __rt_bridge_handle_notif
1c0004b6 g       .text	00000000 __rt_soc_evt_no_udma
10000040 g     O .l1cluster_g	00000004 __rt_cluster_fc_task_lock
1c00e3d6 g     F .text	00000050 pi_gpio_mask_configure
00000340 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks
1c00bc98 g     F .text	00000024 rt_event_push
1c00ba96 g     F .text	00000022 __rt_bridge_clear_notif
1c00a6ca g     F .text	00000104 flash_partition_table_load
00000014 g     O .data_tiny_l1	00000004 __rt_dma_first_pending
1c0106e0 g     O .data	000000c0 __hal_debug_struct
1c008a7e g     F .text	00000012 pi_fs_conf_init
1c00e210 g     F .text	0000000c __rt_udma_channel_reg_data
1c00b202 g     F .text	00000138 MD5_Final
1c00c04c g     F .text	0000008c __rt_time_init
1c00cf86 g     F .text	0000002c __pi_hyper_pin_reset_settings
00080000 g       *ABS*	00000000 __L2
00000008 g       *ABS*	00000000 __rt_nb_pe
1c0000f8 g       .text	00000000 _entry
1c00a5f8 g     F .text	0000005e pi_partition_find_first
1c00bd20 g     F .text	0000002c __rt_wait_event
1c0012f2 g     F .text	0000043a .hidden __muldf3
1c00c7ae g     F .text	000000bc __rt_pmu_init
1c006c6c g     F .text	0000016e KerParLinearLayerFullFeatB32_SQ8
1c00b442 g     F .text	0000000a bsp_hyperflash_conf_init
1c008acc g     F .text	00000008 pi_fs_read_async
1c00e2bc g     F .text	00000034 pi_pwm_ioctl
1c00b68e g     F .text	00000050 __rt_handle_illegal_instr
1c00e09c g     F .text	00000072 __pi_uart_init
1c00e986 g     F .text	00000010 memset
1c00d1c2 g     F .text	00000058 __pi_hyper_copy_aligned
1c001e38 g     F .text	0000001a main
00000354 g     O .data_tiny_fc	00000050 __rt_udma_channels
1c00c87c g     F .text	00000002 __rt_fll_deinit
1c0004fc g       .text	00000000 udma_event_handler_end
1c010cc8 g     O .bss	00000004 __rt_alloc_fc_tcdm
1c00e53a g     F .text	0000000a __rt_himax_init
1c0107b4 g     O .data	00000004 ResOut
1c00b8da g     F .text	00000036 __rt_fc_cluster_unlock
00000318 g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat
1c00ec50 g     F .text	00000072 __rt_io_init
1c0106b8  w    O .data	00000010 __rt_padframe_hyper_gpio
00000000 g       *ABS*	00000000 __FETCH_ALL
1c00b432 g     F .text	00000010 bsp_hyperram_open
1c005960 g     F .text	00000c50 modelCNN_Construct
1c008a4a g     F .text	00000002 __flash_conf_init
1c0107b0  w    O .data	00000004 __rt_platform
1c00fde8 g       .init_array	00000000 __CTOR_END__
1c00e39e g     F .text	00000038 pi_gpio_pin_read
1c0105c0 g     O .data	00000028 __pi_read_fs_api
1c00cf5a g     F .text	0000002c __pi_hyper_pin_settings
1c00e93c g     F .text	00000014 strcmp
1000001c g     O .l1cluster_g	00000004 model_L1_Memory
1c00b3d6 g     F .text	00000008 semihost_exit
1c00fde8 g       .fini_array	00000000 __DTOR_LIST__
1c00bba6 g     F .text	00000028 __rt_event_init
000002e0 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback_arg
1c0000e0 g       .text	00000000 __rt_i2c_step3
1c000636 g       .text	00000000 pwm_event_handler
00000348 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size_2d
1c00eba8 g     F .text	00000028 _prf_locked
00000000 g       *ABS*	00000000 __USE_UART
1c00d6e4 g     F .text	00000008 __rt_hyper_resume_emu_task
1c00c51c g     F .text	000000e0 SetFllFrequency
1c0077b8 g     F .text	00000244 KerParConv3x3Stride1_SQ8
1c00c87e g     F .text	00000002 __rt_flls_constructor
1c00bfaa g     F .text	0000007a rt_event_push_delayed
1c0096ce g     F .text	000000d2 __himax_reopen
1c000164 g       .text	00000000 _fini
1c00a4fe g     F .text	0000005e extern_alloc
1c00b45c g     F .text	0000001a bsp_himax_conf_init
1c00bd4c g     F .text	0000001a rt_event_wait
1c000090 g       .vectors	00000000 __rt_debug_struct_ptr
1c00fe34 g     O .rodata	00000100 .hidden __clz_tab
00000328 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_channel
1c00065a g       .text	00000000 __pi_uart_handle_copy_asm
1c00fce4 g       .text	00000000 __rt_set_slave_stack
1c00bd7a g     F .text	00000002 pi_task_push_delayed_us
1c00bf56 g     F .text	00000006 pi_cl_l1_malloc
1c0107a4  w    O .data	00000004 __rt_fc_stack_size
1c00a656 g     F .text	00000074 flash_partition_table_verify
1c00044c g       .text	00000000 __rt_fc_socevents_handler
000002b8 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback
000003a8 g     O .data_tiny_fc	00000034 dev_rtc
1c008afa g     F .text	00000008 pi_fs_write_async
1c0105e8 g     O .data	00000028 __pi_host_fs_api
1c00eb72 g     F .text	00000030 fputc
1c00e19a g     F .text	0000000a rt_extern_alloc_deinit
1c00ced2 g     F .text	0000001e pi_pad_init
1c008b28 g     F .text	0000000a pi_fs_copy_async
1c001e52 g     F .text	00000542 S1_Op_input_1_formatter
1c000258 g       .text	00000000 __rt_call_external_c_function
1c00b86e g     F .text	00000034 __rt_fc_unlock
1c00a3fc g     F .text	0000000c pi_ram_open
00000004 g       .data_tiny_l1	00000000 _l1_preload_start
1c00e318 g     F .text	00000086 __pi_gpio_handler
000002b0 g     O .data_tiny_fc	00000008 __rt_socevents_status
1c00bab8 g     F .text	00000042 __rt_bridge_printf_flush
1c00cfb2 g     F .text	00000010 pi_hyper_conf_init
1c0107a8  w    O .data	00000004 __rt_iodev
0000001c g     O .data_tiny_fc	00000014 __rt_sched
1c000000 g       .vectors	00000000 __irq_vector_base
1c010960 g       .data	00000000 _edata
1c003afe g     F .text	00000c72 S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu
00000000 g       *ABS*	00000000 __ZERO
1c00c354 g     F .text	0000005e __rt_periph_init
1c00a5f2 g     F .text	00000002 pi_partition_table_free
1c00e568 g     F .text	00000012 __rt_spim_init
1c00ba0a g     F .text	0000004c __rt_bridge_check_connection
1c00cc6e g     F .text	00000090 rt_cluster_call
00000800 g       *ABS*	00000000 __rt_stack_size
1c00dee6 g     F .text	00000062 __pi_uart_handle_copy
1c00b63c g     F .text	00000004 pi_open_from_conf
ffffffff g       *ABS*	00000000 pulp__FC
1c00e4e6 g     F .text	00000054 __rt_i2s_init
00000003 g       *ABS*	00000000 __rt_debug_init_config
1c00a7ce g     F .text	00000024 flash_partition_table_free
1c010ce0 g     O .bss	00000028 __rt_fc_cluster_data
1c00ebd0 g     F .text	00000076 exit
1c00e06e g     F .text	0000002e pi_uart_write
1c009440 g     F .text	00000018 __himax_reg_set
1c00bd66 g     F .text	00000014 __rt_event_sched_init
0000034c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_length
1c00030c g       .text	00000000 udma_event_handler
1c00cb54 g     F .text	00000032 pi_cluster_close
1c00d6ec g     F .text	00000004 __rt_hyper_resume_copy
1c00db6c g     F .text	00000014 pi_i2c_conf_init
000003a4 g     O .data_tiny_fc	00000004 pwmEventsStatus
1c008abc g     F .text	00000008 pi_fs_unmount
1c00b3c0 g     F .text	00000016 semihost_seek
1c00b7ea g     F .text	00000030 __rt_cbsys_exec
0000ffbc g       .l1cluster_g	00000000 __l1_heap_size
1c0107b8 g     O .data	00000004 Img_In
1c00c48c g     F .text	00000090 __rt_pmu_cluster_power_down
0000031c g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat_size
1b000be8 g     O .stack	00000004 __rt_debug_config_trace
1c006a78 g     F .text	000000b4 KerParSetBiasB32_SQ8
1c010c6c  w    O .bss	00000004 __rt_iodev_uart_channel
1c0000a0 g       .text	00000000 _stext
1c0107e4 g     O .data	00000004 PMURetentionState
ffffffff g       *ABS*	00000000 pulp__L1CL
1c00e970 g     F .text	00000016 strlen
1c00e10e g     F .text	00000028 rt_padframe_set
1c00b37c g     F .text	00000008 semihost_close
1c00ce9e g     F .text	00000034 pi_pad_set_function
1c010cd8 g     O .bss	00000004 __rt_wakeup_use_fast
1c009846 g     F .text	0000002e pi_himax_conf_init
00000400 g       *ABS*	00000000 __rt_cl_master_stack_size
1c00e9cc g     F .text	0000001a strchr
1c00bafa g     F .text	00000078 __rt_bridge_req_shutdown
1c00fa10 g     F .text	00000010 rt_uart_conf_init
1c00e426 g     F .text	00000036 pi_gpio_pin_configure
1c00fd98 g       .text	00000000 __cluster_text_end
1c00fb30 g     F .text	0000005c __rt_uart_init
1c00d792 g     F .text	00000048 pi_cpi_close
1c010d48 g       *ABS*	00000000 __l2_end
1c00ccfe g     F .text	0000005c rt_cluster_mount
1c00e556 g     F .text	00000012 __rt_rtc_init
1c00fafc g     F .text	00000034 rt_uart_cluster_write
1c00936c g     F .text	0000000c pi_camera_open
1c00a26a g     F .text	0000000c hyperram_free
1c000098 g       .vectors	00000000 __rt_semihosting_call
1c00b166 g     F .text	0000009c MD5_Update
1b000bec g     O .stack	00000004 __rt_debug_config
1c004770 g     F .text	000009c0 S5_Linear_64x13x18x128
1c00c880 g     F .text	00000006 __rt_fll_set_freq
1c00b7ac g     F .text	0000003e __rt_cbsys_add
1c00cbf6 g     F .text	0000003c __rt_cluster_new
1c00e9e6 g     F .text	0000005e __rt_putc_debug_bridge
1c00870a g     F .text	000002de KerParSoftMax_SQ8
1c00fd98 g       .text	00000000 _endtext
00000324 g     O .data_tiny_fc	00000004 __rt_hyper_current_task
1c00b350 g     F .text	0000002c semihost_open
ffffffff g       *ABS*	00000000 pulp__L1FC
1c00d71e g     F .text	0000000a pi_cpi_conf_init
1c0107e8 g     O .data	00000008 FllsFrequency
00000030 g     O .data_tiny_fc	00000280 periph_channels



Disassembly of section .vectors:

1c000000 <__irq_vector_base>:


#ifdef ARCHI_CORE_HAS_1_10
  j __rt_illegal_instr
#else
  j __rt_no_irq_handler
1c000000:	0940006f          	j	1c000094 <__rt_no_irq_handler>
#endif

  j __rt_no_irq_handler
1c000004:	0900006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000008:	08c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00000c:	0880006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000010:	0840006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000014:	0800006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000018:	07c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00001c:	0780006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000020:	0740006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000024:	0700006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000028:	06c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00002c:	0680006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000030:	0640006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000034:	0600006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000038:	05c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00003c:	0580006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000040:	0540006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000044:	0500006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000048:	04c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00004c:	0480006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000050:	0440006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000054:	0400006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000058:	03c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00005c:	0380006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000060:	0340006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000064:	0300006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000068:	02c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00006c:	0280006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000070:	0240006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000074:	0200006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000078:	01c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00007c:	0180006f          	j	1c000094 <__rt_no_irq_handler>

1c000080 <_start>:


  .org 0x80
  .global _start
_start:
  jal x0, _entry
1c000080:	0780006f          	j	1c0000f8 <_entry>


#ifndef __RT_MODE_BARE

  jal x0, __rt_illegal_instr
1c000084:	21a0006f          	j	1c00029e <__rt_illegal_instr>
	...

1c000090 <__rt_debug_struct_ptr>:
1c000090:	06e0                	addi	s0,sp,844
1c000092:	1c01                	addi	s8,s8,-32

1c000094 <__rt_no_irq_handler>:
  .word __hal_debug_struct

#endif

__rt_no_irq_handler:
  j __rt_no_irq_handler
1c000094:	0000006f          	j	1c000094 <__rt_no_irq_handler>

1c000098 <__rt_semihosting_call>:

#endif

  .global __rt_semihosting_call
__rt_semihosting_call:
  ebreak
1c000098:	00100073          	ebreak
  jr          ra
1c00009c:	00008067          	ret

Disassembly of section .text:

1c0000a0 <__rt_i2c_handle_tx_copy>:

  // x9: channel, x10: event, x8,x11,x12:temp
  .global __rt_i2c_handle_tx_copy
__rt_i2c_handle_tx_copy:

  slli   x8, x10, 2
1c0000a0:	00251413          	slli	s0,a0,0x2
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c0000a4:	35442403          	lw	s0,852(s0)

  lw  	x11, PI_I2C_T_PENDING_STEP(x8)
1c0000a8:	4c0c                	lw	a1,24(s0)
  jr    x11
1c0000aa:	8582                	jr	a1

1c0000ac <__rt_i2c_step1>:

  .global __rt_i2c_step1
__rt_i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x12, PI_I2C_T_PENDING_BASE(x8)
1c0000ac:	4450                	lw	a2,12(s0)
  lw          x10, PI_I2C_T_PENDING_DATA(x8)
1c0000ae:	4808                	lw	a0,16(s0)
  lw          x11, PI_I2C_T_PENDING_LENGTH(x8)
1c0000b0:	484c                	lw	a1,20(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0000b2:	c208                	sw	a0,0(a2)
  sw          x11, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0000b4:	c24c                	sw	a1,4(a2)
  lw          x11, PI_I2C_T_PENDING_NEXT_STEP(x8)
1c0000b6:	4c4c                	lw	a1,28(s0)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0000b8:	4541                	li	a0,16
  sw          x11, PI_I2C_T_PENDING_STEP(x8)
1c0000ba:	cc0c                	sw	a1,24(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0000bc:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0000be:	43e0006f          	j	1c0004fc <udma_event_handler_end>

1c0000c2 <__rt_i2c_step2>:

  .global __rt_i2c_step2
__rt_i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  la          x10, __rt_i2c_step3
1c0000c2:	00000517          	auipc	a0,0x0
1c0000c6:	01e50513          	addi	a0,a0,30 # 1c0000e0 <__rt_i2c_step3>
  sw          x10, PI_I2C_T_PENDING_STEP(x8)
1c0000ca:	cc08                	sw	a0,24(s0)
  
  lw          x12, PI_I2C_T_PENDING_BASE(x8)
1c0000cc:	4450                	lw	a2,12(s0)
  addi        x10, x8, PI_I2C_T_UDMA_STOP_CMD
1c0000ce:	02040513          	addi	a0,s0,32
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0000d2:	c208                	sw	a0,0(a2)
  li          x10, 1
1c0000d4:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0000d6:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0000d8:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0000da:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0000dc:	4200006f          	j	1c0004fc <udma_event_handler_end>

1c0000e0 <__rt_i2c_step3>:

  .global __rt_i2c_step3
__rt_i2c_step3:
  lw        x11, PI_I2C_T_PENDING_COPY(x8)
1c0000e0:	400c                	lw	a1,0(s0)
  sw        x0, PI_I2C_T_PENDING_COPY(x8)
1c0000e2:	00042023          	sw	zero,0(s0)
  //beqz      x11, __rt_hyper_handle_emu_task
  jal       x9, __rt_event_enqueue
1c0000e6:	080004ef          	jal	s1,1c000166 <__rt_event_enqueue>

  j           udma_event_handler_end
1c0000ea:	4120006f          	j	1c0004fc <udma_event_handler_end>

1c0000ee <__rt_i2c_handle_rx_copy>:

  // x9: channel, x10: event, x8,x11,x12:temp
  .global __rt_i2c_handle_rx_copy
__rt_i2c_handle_rx_copy:

  slli   x8, x10, 2
1c0000ee:	00251413          	slli	s0,a0,0x2
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c0000f2:	35442403          	lw	s0,852(s0)

  j      __rt_i2c_step3
1c0000f6:	b7ed                	j	1c0000e0 <__rt_i2c_step3>

1c0000f8 <_entry>:
  csrw    0x7A1, x0
1c0000f8:	7a101073          	csrw	pcmr,zero
  csrr    a0, 0xF14
1c0000fc:	f1402573          	csrr	a0,mhartid
  andi    a1, a0, 0x1f
1c000100:	01f57593          	andi	a1,a0,31
  srli    a0, a0, 5
1c000104:	8115                	srli	a0,a0,0x5
  li      a2, ARCHI_FC_CID
1c000106:	02000613          	li	a2,32
  bne     a0, a2, __rt_pe_start
1c00010a:	00c50463          	beq	a0,a2,1c000112 <_entry+0x1a>
1c00010e:	27f0f06f          	j	1c00fb8c <__cluster_text_start>
  la      t0, _bss_start
1c000112:	00011297          	auipc	t0,0x11
1c000116:	84e28293          	addi	t0,t0,-1970 # 1c010960 <_edata>
  la      t1, _bss_end
1c00011a:	00011317          	auipc	t1,0x11
1c00011e:	bee30313          	addi	t1,t1,-1042 # 1c010d08 <_bss_end>
  sw      zero,0(t0)
1c000122:	0002a023          	sw	zero,0(t0)
  addi    t0, t0, 4
1c000126:	0291                	addi	t0,t0,4
  bltu    t0, t1, 1b
1c000128:	fe62ede3          	bltu	t0,t1,1c000122 <_entry+0x2a>
  la   a0, __rt_fc_stack_size
1c00012c:	00010517          	auipc	a0,0x10
1c000130:	67850513          	addi	a0,a0,1656 # 1c0107a4 <__rt_fc_stack_size>
  lw   a0, 0(a0)
1c000134:	4108                	lw	a0,0(a0)
  la   x2, __rt_fc_stack
1c000136:	ff000117          	auipc	sp,0xff000
1c00013a:	2b210113          	addi	sp,sp,690 # 1b0003e8 <__rt_fc_stack>
  add  x2, x2, a0
1c00013e:	912a                	add	sp,sp,a0
  jal  x1, __rt_init
1c000140:	36c0b0ef          	jal	ra,1c00b4ac <__rt_init>
  addi  a0, x0, 0
1c000144:	00000513          	li	a0,0
  addi  a1, x0, 0
1c000148:	00000593          	li	a1,0
  la    t2, main
1c00014c:	00002397          	auipc	t2,0x2
1c000150:	cec38393          	addi	t2,t2,-788 # 1c001e38 <main>
  jalr  x1, t2
1c000154:	000380e7          	jalr	t2
  mv    s0, a0
1c000158:	842a                	mv	s0,a0
  jal  x1, __rt_deinit
1c00015a:	4ba0b0ef          	jal	ra,1c00b614 <__rt_deinit>
  mv   a0, s0
1c00015e:	8522                	mv	a0,s0
  jal  x1, exit
1c000160:	2710e0ef          	jal	ra,1c00ebd0 <exit>

1c000164 <_fini>:
  ret
1c000164:	8082                	ret

1c000166 <__rt_event_enqueue>:
  //   x10/a0: temporary register
  //   x11/a1: the event
  //   x12/a2: temporary register

  // First check if it is a normal event
  andi    x10, x11, 0x3
1c000166:	0035f513          	andi	a0,a1,3
  bne     x10, x0, __rt_handle_special_event
1c00016a:	02051063          	bnez	a0,1c00018a <__rt_handle_special_event>

  // Enqueue normal event
  la      x10, __rt_sched
1c00016e:	e4000517          	auipc	a0,0xe4000
1c000172:	eae50513          	addi	a0,a0,-338 # 1c <__rt_sched>
  sw      x0, RT_EVENT_T_NEXT(x11)
1c000176:	0005a023          	sw	zero,0(a1)
  lw      x12, RT_SCHED_T_FIRST(x10)
1c00017a:	4110                	lw	a2,0(a0)
  beqz    x12, __rt_no_first
1c00017c:	c601                	beqz	a2,1c000184 <__rt_no_first>
  lw      x12, RT_SCHED_T_LAST(x10)
1c00017e:	4150                	lw	a2,4(a0)
  sw      x11, RT_EVENT_T_NEXT(x12)
1c000180:	c20c                	sw	a1,0(a2)
  j       __rt_common
1c000182:	a011                	j	1c000186 <__rt_common>

1c000184 <__rt_no_first>:

__rt_no_first:
  sw      x11, RT_SCHED_T_FIRST(x10)
1c000184:	c10c                	sw	a1,0(a0)

1c000186 <__rt_common>:

__rt_common:
  sw      x11, RT_SCHED_T_LAST(x10)
1c000186:	c14c                	sw	a1,4(a0)

1c000188 <enqueue_end>:

enqueue_end:
  jr          x9
1c000188:	8482                	jr	s1

1c00018a <__rt_handle_special_event>:

__rt_handle_special_event:
  li      x10, ~0x3
1c00018a:	5571                	li	a0,-4
  and     x11, x11, x10
1c00018c:	8de9                	and	a1,a1,a0
  lw      x12, PI_CALLBACK_T_ENTRY(x11)
1c00018e:	41d0                	lw	a2,4(a1)
  lw      x10, PI_CALLBACK_T_ARG(x11)
1c000190:	4588                	lw	a0,8(a1)
  j       __rt_call_external_c_function
1c000192:	a0d9                	j	1c000258 <__rt_call_external_c_function>

1c000194 <__rt_bridge_enqueue_event>:
    // to enqueue an event to the FC scheduler.

    .global __rt_bridge_enqueue_event
__rt_bridge_enqueue_event:

    sw  x8, -4(sp)
1c000194:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000198:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00019c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c0001a0:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c0001a4:	fec12623          	sw	a2,-20(sp)

    // Everything is done from C code
    la      x12, __rt_bridge_handle_notif
1c0001a8:	0000b617          	auipc	a2,0xb
1c0001ac:	7ea60613          	addi	a2,a2,2026 # 1c00b992 <__rt_bridge_handle_notif>
    jal     x9, __rt_call_external_c_function
1c0001b0:	0a8004ef          	jal	s1,1c000258 <__rt_call_external_c_function>

    lw  x8, -4(sp)
1c0001b4:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c0001b8:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c0001bc:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c0001c0:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c0001c4:	fec12603          	lw	a2,-20(sp)

    mret
1c0001c8:	30200073          	mret

1c0001cc <__rt_remote_enqueue_event>:
    // The FC must get it and push it to the scheduler

    .global __rt_remote_enqueue_event
__rt_remote_enqueue_event:

    sw  x8, -4(sp)
1c0001cc:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c0001d0:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c0001d4:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c0001d8:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c0001dc:	fec12623          	sw	a2,-20(sp)

#ifndef ARCHI_NB_CLUSTER
    li   x8, 1
1c0001e0:	4405                	li	s0,1
#else
    li   x8, ARCHI_NB_CLUSTER
#endif
    la   x9, __rt_fc_cluster_data
1c0001e2:	00011497          	auipc	s1,0x11
1c0001e6:	afe48493          	addi	s1,s1,-1282 # 1c010ce0 <__rt_fc_cluster_data>

1c0001ea <__rt_remote_enqueue_event_loop_cluster>:

    // Loop over the clusters to see if there is an event to push
__rt_remote_enqueue_event_loop_cluster:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001ea:	40cc                	lw	a1,4(s1)
    beq  a1, x0, __rt_remote_enqueue_event_loop_cluster_continue
1c0001ec:	02058d63          	beqz	a1,1c000226 <__rt_remote_enqueue_event_loop_cluster_continue>

    // Everytime a task is finished, first check if we can update the queue head
    // as it is not updated by cluster side to avoid race conditions.
    // At least this task won t be there anymore after we update, and maybe even
    // more tasks, which is not an issue, as we compare against the head.
    lw   a1, RT_FC_CLUSTER_DATA_T_CLUSTER_POOL(x9)
1c0001f0:	48cc                	lw	a1,20(s1)
    lw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001f2:	41c8                	lw	a0,4(a1)

    beq  a0, x0, __rt_cluster_pool_update_end
1c0001f4:	00050e63          	beqz	a0,1c000210 <__rt_cluster_pool_update_end>

1c0001f8 <__rt_cluster_pool_update_loop>:

__rt_cluster_pool_update_loop:
    lw    a2, RT_CLUSTER_TASK_PENDING(a0)
1c0001f8:	5150                	lw	a2,36(a0)
    bnez  a2, __rt_cluster_pool_update_loop_end
1c0001fa:	e219                	bnez	a2,1c000200 <__rt_cluster_pool_update_loop_end>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001fc:	5108                	lw	a0,32(a0)
    bnez a0, __rt_cluster_pool_update_loop
1c0001fe:	fd6d                	bnez	a0,1c0001f8 <__rt_cluster_pool_update_loop>

1c000200 <__rt_cluster_pool_update_loop_end>:


__rt_cluster_pool_update_loop_end:
    
    beqz a0, __rt_cluster_pool_update_no_current
1c000200:	c501                	beqz	a0,1c000208 <__rt_cluster_pool_update_no_current>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c000202:	5108                	lw	a0,32(a0)
    sw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c000204:	c1c8                	sw	a0,4(a1)

    j    __rt_cluster_pool_update_end
1c000206:	a029                	j	1c000210 <__rt_cluster_pool_update_end>

1c000208 <__rt_cluster_pool_update_no_current>:

__rt_cluster_pool_update_no_current:

    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c000208:	0005a223          	sw	zero,4(a1)
    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_LAST_FC(a1)
1c00020c:	0005a423          	sw	zero,8(a1)

1c000210 <__rt_cluster_pool_update_end>:




__rt_cluster_pool_update_end:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000210:	40cc                	lw	a1,4(s1)

    lw   a2, RT_FC_CLUSTER_DATA_T_TRIG_ADDR(x9)
1c000212:	4890                	lw	a2,16(s1)
    sw   x0, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000214:	0004a223          	sw	zero,4(s1)

    sw   x0, 0(a2)
1c000218:	00062023          	sw	zero,0(a2)

    la   x9, __rt_remote_enqueue_event_loop_cluster_continue
1c00021c:	00000497          	auipc	s1,0x0
1c000220:	00a48493          	addi	s1,s1,10 # 1c000226 <__rt_remote_enqueue_event_loop_cluster_continue>
    j    __rt_event_enqueue
1c000224:	b789                	j	1c000166 <__rt_event_enqueue>

1c000226 <__rt_remote_enqueue_event_loop_cluster_continue>:

__rt_remote_enqueue_event_loop_cluster_continue:
    addi x8, x8, -1
1c000226:	147d                	addi	s0,s0,-1
    bgt  x8, x0, __rt_remote_enqueue_event_loop_next_cluster
1c000228:	00804e63          	bgtz	s0,1c000244 <__rt_remote_enqueue_event_loop_next_cluster>



    lw  x8, -4(sp)
1c00022c:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c000230:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c000234:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c000238:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00023c:	fec12603          	lw	a2,-20(sp)

    mret
1c000240:	30200073          	mret

1c000244 <__rt_remote_enqueue_event_loop_next_cluster>:

__rt_remote_enqueue_event_loop_next_cluster:
    la   x9, __rt_fc_cluster_data
1c000244:	00011497          	auipc	s1,0x11
1c000248:	a9c48493          	addi	s1,s1,-1380 # 1c010ce0 <__rt_fc_cluster_data>
    li   a1, RT_FC_CLUSTER_DATA_T_SIZEOF
1c00024c:	02800593          	li	a1,40
    mul  a1, x8, a1
1c000250:	02b405b3          	mul	a1,s0,a1
    add  x9, x9, a1
1c000254:	94ae                	add	s1,s1,a1
    j __rt_remote_enqueue_event_loop_cluster
1c000256:	bf51                	j	1c0001ea <__rt_remote_enqueue_event_loop_cluster>

1c000258 <__rt_call_external_c_function>:
#endif

  .global __rt_call_external_c_function
__rt_call_external_c_function:

    add  sp, sp, -128
1c000258:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c00025a:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c00025c:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c00025e:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c000260:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c000262:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c000264:	ca1e                	sw	t2,20(sp)
    sw   a3, 0x24(sp)
1c000266:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c000268:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c00026a:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c00026c:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c00026e:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000270:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c000272:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c000274:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c000276:	c6fe                	sw	t6,76(sp)

    jalr ra, a2
1c000278:	000600e7          	jalr	a2

    lw   ra, 0x00(sp)
1c00027c:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c00027e:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000280:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c000282:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c000284:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c000286:	43d2                	lw	t2,20(sp)
    lw   a3, 0x24(sp)
1c000288:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c00028a:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c00028c:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c00028e:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c000290:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c000292:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c000294:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c000296:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000298:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c00029a:	6109                	addi	sp,sp,128

    jr   x9
1c00029c:	8482                	jr	s1

1c00029e <__rt_illegal_instr>:

  .section .text
  
    .global __rt_illegal_instr
__rt_illegal_instr:
    sw   ra, -4(sp)
1c00029e:	fe112e23          	sw	ra,-4(sp)
    sw   a0, -8(sp)
1c0002a2:	fea12c23          	sw	a0,-8(sp)
    la   a0, __rt_handle_illegal_instr
1c0002a6:	0000b517          	auipc	a0,0xb
1c0002aa:	3e850513          	addi	a0,a0,1000 # 1c00b68e <__rt_handle_illegal_instr>
    jal  ra, __rt_call_c_function
1c0002ae:	010000ef          	jal	ra,1c0002be <__rt_call_c_function>
    lw   ra, -4(sp)
1c0002b2:	ffc12083          	lw	ra,-4(sp)
    lw   a0, -8(sp)
1c0002b6:	ff812503          	lw	a0,-8(sp)
#if PULP_CORE == CORE_RISCV_V4
    mret
1c0002ba:	30200073          	mret

1c0002be <__rt_call_c_function>:
#endif


__rt_call_c_function:

    add  sp, sp, -128
1c0002be:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c0002c0:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c0002c2:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c0002c4:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c0002c6:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c0002c8:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c0002ca:	ca1e                	sw	t2,20(sp)
    sw   a1, 0x1C(sp)
1c0002cc:	ce2e                	sw	a1,28(sp)
    sw   a2, 0x20(sp)
1c0002ce:	d032                	sw	a2,32(sp)
    sw   a3, 0x24(sp)
1c0002d0:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c0002d2:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c0002d4:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c0002d6:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c0002d8:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c0002da:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c0002dc:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c0002de:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c0002e0:	c6fe                	sw	t6,76(sp)

    jalr ra, a0
1c0002e2:	000500e7          	jalr	a0

    lw   ra, 0x00(sp)
1c0002e6:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c0002e8:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c0002ea:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c0002ec:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c0002ee:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c0002f0:	43d2                	lw	t2,20(sp)
    lw   a1, 0x1C(sp)
1c0002f2:	45f2                	lw	a1,28(sp)
    lw   a2, 0x20(sp)
1c0002f4:	5602                	lw	a2,32(sp)
    lw   a3, 0x24(sp)
1c0002f6:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c0002f8:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c0002fa:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c0002fc:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c0002fe:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c000300:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c000302:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c000304:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000306:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c000308:	6109                	addi	sp,sp,128

    jr   ra
1c00030a:	8082                	ret

1c00030c <udma_event_handler>:

  .global udma_event_handler
udma_event_handler:

  // Dequeue the transfer which have just finished and mark it as done
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00030c:	4080                	lw	s0,0(s1)
  lw   x11, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)   // This is used later on, just put here to fill the slot
1c00030e:	448c                	lw	a1,8(s1)
  beq  x8, x0, __rt_udma_no_copy                       // Special case where there is no copy, just register the event in the bitfield
1c000310:	08040f63          	beqz	s0,1c0003ae <__rt_udma_no_copy>
  lw   x12, RT_PERIPH_COPY_T_REPEAT(x8)
1c000314:	4c50                	lw	a2,28(s0)
  lw   x10, RT_PERIPH_COPY_T_NEXT(x8)
1c000316:	4848                	lw	a0,20(s0)
  bne  x12, x0, repeat_transfer
1c000318:	04061f63          	bnez	a2,1c000376 <dmaCmd>
  sw   x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00031c:	c088                	sw	a0,0(s1)
  
  // Handle any special end-of-transfer control
  lw       x10, RT_PERIPH_COPY_T_CTRL(x8)
1c00031e:	4448                	lw	a0,12(s0)
  bnez     x10, handle_special_end
1c000320:	e15d                	bnez	a0,1c0003c6 <handle_special_end>

1c000322 <resume_after_special_end>:
resume_after_special_end:


  // Now check if there are some transfers enqueued in the SW FIFO to be enqueued to the UDMA
  beq x11, x0, checkTask
1c000322:	02058f63          	beqz	a1,1c000360 <checkTask>

  // x9 contains the pointer to the channel and x11 the first copy

  // Update the FIFO pointers and just copy from node to UDMA
  lw  x12, RT_PERIPH_COPY_T_ENQUEUE_CALLBACK(x11)
1c000326:	4990                	lw	a2,16(a1)
  lw  x10, RT_PERIPH_COPY_T_NEXT(x11)
1c000328:	49c8                	lw	a0,20(a1)
  beqz x12, __rt_udma_call_enqueue_callback_resume
1c00032a:	c611                	beqz	a2,1c000336 <__rt_udma_call_enqueue_callback_resume>

  la  x9, __rt_udma_call_enqueue_callback_resume
1c00032c:	00000497          	auipc	s1,0x0
1c000330:	00a48493          	addi	s1,s1,10 # 1c000336 <__rt_udma_call_enqueue_callback_resume>
  jr  x12
1c000334:	8602                	jr	a2

1c000336 <__rt_udma_call_enqueue_callback_resume>:

__rt_udma_call_enqueue_callback_resume:
  lw  x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000336:	44d0                	lw	a2,12(s1)
  sw  x10, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)
1c000338:	c488                	sw	a0,8(s1)
  lw  x10, RT_PERIPH_COPY_T_ADDR(x11)
1c00033a:	4188                	lw	a0,0(a1)
  lw  x9, RT_PERIPH_COPY_T_SIZE(x11)
1c00033c:	41c4                	lw	s1,4(a1)
  sw  x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c00033e:	c208                	sw	a0,0(a2)
  sw  x9, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c000340:	c244                	sw	s1,4(a2)

  lw  x9, RT_PERIPH_COPY_T_CTRL(x11)
1c000342:	45c4                	lw	s1,12(a1)
  andi x9, x9, (1<<RT_PERIPH_COPY_CTRL_TYPE_WIDTH)-1
1c000344:	88bd                	andi	s1,s1,15
  li  x10, RT_PERIPH_COPY_SPECIAL_ENQUEUE_THRESHOLD
1c000346:	4515                	li	a0,5
  blt x9, x10, transfer_resume
1c000348:	00a4ca63          	blt	s1,a0,1c00035c <transfer_resume>
  li          x10, RT_PERIPH_COPY_HYPER
  beq         x9, x10, hyper
  li          x10, RT_PERIPH_COPY_FC_TCDM
  beq         x9, x10, fc_tcdm
#else
  p.beqimm      x9, RT_PERIPH_COPY_HYPER, hyper
1c00034c:	0064a463          	p.beqimm	s1,6,1c000354 <dual>
  p.beqimm      x9, RT_PERIPH_COPY_FC_TCDM, fc_tcdm
1c000350:	0074a263          	p.beqimm	s1,7,1c000354 <dual>

1c000354 <dual>:
#ifdef RV_ISA_RV32
  li    x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and   x9, x12, x10
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
#else
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
1c000354:	51c8                	lw	a0,36(a1)
  p.bclr  x9, x12, 0, UDMA_CHANNEL_SIZE_LOG2
1c000356:	c04634b3          	p.bclr	s1,a2,0,4
#endif
  sw    x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c00035a:	d088                	sw	a0,32(s1)

1c00035c <transfer_resume>:
#endif

transfer_resume:
  lw  x10, RT_PERIPH_COPY_T_CFG(x11)
1c00035c:	4588                	lw	a0,8(a1)
  sw  x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00035e:	c608                	sw	a0,8(a2)

1c000360 <checkTask>:

checkTask:

  // Check if we have a DMA transfer from L2 to L1   
  //lw          x10, RT_PERIPH_COPY_T_DMACMD(x8)           // Not null if we must transfer
  lw          x11, RT_PERIPH_COPY_T_EVENT(x8)             // Read this in advance to fill the slot, it is used later on in case there is no DMA command
1c000360:	4c0c                	lw	a1,24(s0)

  //bne         x10, zero, dmaCmd
  la          x9, udma_event_handler_end
1c000362:	00000497          	auipc	s1,0x0
1c000366:	19a48493          	addi	s1,s1,410 # 1c0004fc <udma_event_handler_end>
  bne         x11, zero, __rt_event_enqueue
1c00036a:	00058463          	beqz	a1,1c000372 <checkTask+0x12>
1c00036e:	df9ff06f          	j	1c000166 <__rt_event_enqueue>

  // Loop again in case there are still events in the FIFO
  j udma_event_handler_end
1c000372:	18a0006f          	j	1c0004fc <udma_event_handler_end>

1c000376 <dmaCmd>:
//   x12 : number of bytes to repeat
repeat_transfer:

#ifdef ARCHI_UDMA_HAS_HYPER

  lw      x11, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000376:	44cc                	lw	a1,12(s1)
#ifdef RV_ISA_RV32
  li      x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and     x9, x11, x10
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
#else
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000378:	5048                	lw	a0,36(s0)
  p.bclr  x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c00037a:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add     x10, x10, x12
1c00037e:	9532                	add	a0,a0,a2
  sw      x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000380:	d088                	sw	a0,32(s1)
  sw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000382:	d048                	sw	a0,36(s0)

  lw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c000384:	4008                	lw	a0,0(s0)
  lw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c000386:	5004                	lw	s1,32(s0)
  add     x10, x10, x12
1c000388:	9532                	add	a0,a0,a2
  sub     x9, x9, x12
1c00038a:	8c91                	sub	s1,s1,a2
  blt     x12, x9, not_last
1c00038c:	00964963          	blt	a2,s1,1c00039e <not_last>
  mv      x12, x9
1c000390:	8626                	mv	a2,s1
  sw      x0, RT_PERIPH_COPY_T_REPEAT(x8)
1c000392:	00042e23          	sw	zero,28(s0)
  beq     x12, x0, udma_event_handler_end
1c000396:	00061463          	bnez	a2,1c00039e <not_last>
1c00039a:	1620006f          	j	1c0004fc <udma_event_handler_end>

1c00039e <not_last>:

not_last:
  sw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00039e:	c008                	sw	a0,0(s0)
  sw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c0003a0:	d004                	sw	s1,32(s0)
  sw      x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c0003a2:	c188                	sw	a0,0(a1)
  sw      x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c0003a4:	c1d0                	sw	a2,4(a1)

  li      x10, UDMA_CHANNEL_CFG_EN
1c0003a6:	4541                	li	a0,16
  sw      x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c0003a8:	c588                	sw	a0,8(a1)

#endif

  j           udma_event_handler_end
1c0003aa:	1520006f          	j	1c0004fc <udma_event_handler_end>

1c0003ae <__rt_udma_no_copy>:




__rt_udma_no_copy:
  la      x9, __rt_socevents_status
1c0003ae:	e4000497          	auipc	s1,0xe4000
1c0003b2:	f0248493          	addi	s1,s1,-254 # 2b0 <__rt_socevents_status>
  lw      x8, 0(x9)
1c0003b6:	4080                	lw	s0,0(s1)
  li      x11, 1
1c0003b8:	4585                	li	a1,1
  sll     x10, x11, x10
1c0003ba:	00a59533          	sll	a0,a1,a0
  or      x8, x8, x10
1c0003be:	8c49                	or	s0,s0,a0
  sw      x8, 0(x9)
1c0003c0:	c080                	sw	s0,0(s1)
  j udma_event_handler_end
1c0003c2:	13a0006f          	j	1c0004fc <udma_event_handler_end>

1c0003c6 <handle_special_end>:
  li          x12, RT_PERIPH_COPY_I2C_STEP1
  beq         x10, x12, i2c_step1
  li          x12, RT_PERIPH_COPY_I2C_STEP2
  beq         x10, x12, i2c_step2
#else
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP1, i2c_step1  
1c0003c6:	04352463          	p.beqimm	a0,3,1c00040e <i2c_step1>
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP2, i2c_step2
1c0003ca:	06452063          	p.beqimm	a0,4,1c00042a <i2c_step2>
#endif

  j           resume_after_special_end
1c0003ce:	bf91                	j	1c000322 <resume_after_special_end>

1c0003d0 <spim_step3>:


spim_step3:
  // The current copy was enqueued to configure spi, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c0003d0:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0003d2:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d4:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003d6:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d8:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003da:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL2(x8)
1c0003dc:	5448                	lw	a0,44(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003de:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c0003e0:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003e2:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c0003e4:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003e6:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003e8:	1140006f          	j	1c0004fc <udma_event_handler_end>

1c0003ec <spim_step2>:

spim_step2:
  // Now that the user data has been pushed, we must push an EOT command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c0003ec:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003f0:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003f2:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003f4:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c0003f6:	4060                	lw	s0,68(s0)
  li          x12, SPI_CMD_EOT(0)
1c0003f8:	90000637          	lui	a2,0x90000
  sw          x12, 0(x8)
1c0003fc:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003fe:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c000400:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 4
1c000402:	4511                	li	a0,4
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c000404:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c000406:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000408:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c00040a:	0f20006f          	j	1c0004fc <udma_event_handler_end>

1c00040e <i2c_step1>:
 */

i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c00040e:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c000410:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000412:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c000414:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000416:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000418:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00041a:	4008                	lw	a0,0(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c00041c:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c00041e:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c000420:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c000422:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000424:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000426:	0d60006f          	j	1c0004fc <udma_event_handler_end>

1c00042a <i2c_step2>:

i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c00042a:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00042e:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c000430:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000432:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c000434:	4060                	lw	s0,68(s0)
  li          x12, I2C_CMD_STOP
1c000436:	02000613          	li	a2,32
  sw          x12, 0(x8)
1c00043a:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00043c:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c00043e:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 1
1c000440:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c000442:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c000444:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000446:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000448:	0b40006f          	j	1c0004fc <udma_event_handler_end>

1c00044c <__rt_fc_socevents_handler>:

  .global __rt_fc_socevents_handler
  .extern pwm_event_handler
__rt_fc_socevents_handler:
// The stack is first adjusted to have stack-based load/store compressed
  add sp, sp, -128
1c00044c:	7119                	addi	sp,sp,-128
  sw  x8, 0(sp)
1c00044e:	c022                	sw	s0,0(sp)
  sw  x9, 4(sp)
1c000450:	c226                	sw	s1,4(sp)
  sw  x10, 8(sp)
1c000452:	c42a                	sw	a0,8(sp)
  sw  x11, 12(sp)
1c000454:	c62e                	sw	a1,12(sp)
  sw  x12, 16(sp)
1c000456:	c832                	sw	a2,16(sp)


  // Pop one element from the FIFO
  li  x8, ARCHI_EU_ADDR + EU_SOC_EVENTS_AREA_OFFSET + EU_SOC_EVENTS_CURRENT_EVENT
1c000458:	00201437          	lui	s0,0x201
1c00045c:	f0040413          	addi	s0,s0,-256 # 200f00 <__L2+0x180f00>
  lw  x8, 0(x8)
1c000460:	4000                	lw	s0,0(s0)

  // Now that we popped the element, we can clear the soc event FIFO event as the FIFO is generating
  // an event as soon as the FIFO is not empty
  li  x9, 1<<PULP_SOC_EVENTS_EVENT
1c000462:	080004b7          	lui	s1,0x8000
  li  x10, ARCHI_EU_DEMUX_ADDR + EU_CORE_BUFFER_CLEAR
1c000466:	00204537          	lui	a0,0x204
1c00046a:	02850513          	addi	a0,a0,40 # 204028 <__L2+0x184028>
  sw  x9, 0(x10)
1c00046e:	c104                	sw	s1,0(a0)
  // Due to a HW bug in the core on Gap, we have to load this value early
#ifdef CONFIG_NO_FC_TINY
  la    x12, __rt_hyper_udma_handle
  lw    x12, 0(x12)
#else
  lw    x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000470:	30802603          	lw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif
#endif

  // Extract ID part
  p.extractu x10, x8, EU_SOC_EVENTS_EVENT_MASK_BITS-1, EU_SOC_EVENTS_EVENT_MASK_OFFSET
1c000474:	ce041533          	p.extractu	a0,s0,7,0

#ifdef ARCHI_UDMA_HAS_HYPER
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0)), __rt_fc_socevents_not_hyper_rx
1c000478:	00653363          	p.bneimm	a0,6,1c00047e <__rt_fc_socevents_not_hyper_rx>
  jr x12
1c00047c:	8602                	jr	a2

1c00047e <__rt_fc_socevents_not_hyper_rx>:

__rt_fc_socevents_not_hyper_rx:
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0))+1, __rt_fc_socevents_not_hyper_tx
1c00047e:	00753363          	p.bneimm	a0,7,1c000484 <__rt_fc_socevents_not_hyper_tx>
  jr x12
1c000482:	8602                	jr	a2

1c000484 <__rt_fc_socevents_not_hyper_tx>:
#endif

__rt_fc_socevents_not_hyper_tx:

  // UDMA CHANNEL EVENTS
  li x9, ARCHI_SOC_EVENT_UDMA_NB_EVT
1c000484:	44cd                	li	s1,19
  bge x10, x9, __rt_soc_evt_no_udma_channel
1c000486:	00955c63          	ble	s1,a0,1c00049e <__rt_soc_evt_no_udma_channel>
  andi   x8, x10, 1
  srli   x10, x10, 1
  or     x10, x10, x8
#endif

  la     x8, periph_channels
1c00048a:	e4000417          	auipc	s0,0xe4000
1c00048e:	ba640413          	addi	s0,s0,-1114 # 30 <periph_channels>
  slli   x9, x10, RT_PERIPH_CHANNEL_T_SIZEOF_LOG2
1c000492:	00551493          	slli	s1,a0,0x5
  add    x9, x9, x8
1c000496:	94a2                	add	s1,s1,s0

  lw   x11, RT_PERIPH_CHANNEL_T_CALLBACK(x9)
1c000498:	4ccc                	lw	a1,28(s1)
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00049a:	4080                	lw	s0,0(s1)

  jr   x11
1c00049c:	8582                	jr	a1

1c00049e <__rt_soc_evt_no_udma_channel>:


__rt_soc_evt_no_udma_channel:

  li x9, ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT + ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT
1c00049e:	44f9                	li	s1,30
  bge x10, x9, __rt_soc_evt_no_udma
1c0004a0:	00955b63          	ble	s1,a0,1c0004b6 <__rt_soc_evt_no_udma>

  addi x8, x10, -ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT
1c0004a4:	fec50413          	addi	s0,a0,-20
  slli x11, x8, 2
1c0004a8:	00241593          	slli	a1,s0,0x2
  la   x12, __rt_udma_extra_callback
  p.lw x12, x12(x11)
  la   x9, __rt_udma_extra_callback_arg
  p.lw x11, x9(x11)
#else
  lw   x12, %tiny(__rt_udma_extra_callback)(x11)
1c0004ac:	2b85a603          	lw	a2,696(a1)
  lw   x11, %tiny(__rt_udma_extra_callback_arg)(x11)
1c0004b0:	2e05a583          	lw	a1,736(a1)
#endif

  jr   x12
1c0004b4:	8602                	jr	a2

1c0004b6 <__rt_soc_evt_no_udma>:

  .global __rt_soc_evt_no_udma
__rt_soc_evt_no_udma:
#ifdef RT_CONFIG_GPIO_ENABLED
  // GPIO EVENT
  li      x9, ARCHI_SOC_EVENT_GPIO
1c0004b6:	02a00493          	li	s1,42
  beq     x10, x9, __rt_gpio_handler
1c0004ba:	00951463          	bne	a0,s1,1c0004c2 <__rt_soc_evt_no_udma+0xc>
1c0004be:	1b20006f          	j	1c000670 <__rt_gpio_handler>
#endif

  li      x9, ARCHI_SOC_EVENT_RTC_IRQ
1c0004c2:	02c00493          	li	s1,44
  beq     x9, x10, rtc_event_handler
1c0004c6:	04a48363          	beq	s1,a0,1c00050c <rtc_event_handler>

1c0004ca <__rt_soc_evt_pwm>:


// pwm event handler
//x9 : nb of event that will be used by handler
__rt_soc_evt_pwm:
  li x11, ARCHI_SOC_EVENT_ADV_TIMER_NB_EVT-1 // 3
1c0004ca:	458d                	li	a1,3
  addi x9, x11, ARCHI_SOC_EVENT_ADV_TIMER_FIRST_EVT //3+38=41
1c0004cc:	02658493          	addi	s1,a1,38
  sub x9, x9, x10 // 41 - 56
1c0004d0:	8c89                	sub	s1,s1,a0
  bgt x9, x11, __rt_soc_evt_store // if > 3 not for pwm
1c0004d2:	0095c663          	blt	a1,s1,1c0004de <__rt_soc_evt_store>
  blt x9, x0,  __rt_soc_evt_store // if > 3 not for pwm
1c0004d6:	0004c463          	bltz	s1,1c0004de <__rt_soc_evt_store>
  j pwm_event_handler
1c0004da:	15c0006f          	j	1c000636 <pwm_event_handler>

1c0004de <__rt_soc_evt_store>:


__rt_soc_evt_store:
  // If the event is not handled, store it in the soc event status mask
  la      x9, __rt_socevents_status
1c0004de:	e4000497          	auipc	s1,0xe4000
1c0004e2:	dd248493          	addi	s1,s1,-558 # 2b0 <__rt_socevents_status>
  li      x11, 32
1c0004e6:	02000593          	li	a1,32
  blt     x10, x11, socevents_set
1c0004ea:	00b54463          	blt	a0,a1,1c0004f2 <socevents_set>
  addi    x9, x9, 4
1c0004ee:	0491                	addi	s1,s1,4
  addi    x10, x10, -32
1c0004f0:	1501                	addi	a0,a0,-32

1c0004f2 <socevents_set>:

socevents_set:
  lw      x11, 0(x9)
1c0004f2:	408c                	lw	a1,0(s1)
  p.bsetr x12, x11, x10
1c0004f4:	80a5c633          	p.bsetr	a2,a1,a0
  sw      x12, 0(x9)
1c0004f8:	c090                	sw	a2,0(s1)
  j       udma_event_handler_end
1c0004fa:	a009                	j	1c0004fc <udma_event_handler_end>

1c0004fc <udma_event_handler_end>:

  .global udma_event_handler_end
udma_event_handler_end:
  lw  x8, 0(sp)
1c0004fc:	4402                	lw	s0,0(sp)
  lw  x9, 4(sp)
1c0004fe:	4492                	lw	s1,4(sp)
  lw  x10, 8(sp)
1c000500:	4522                	lw	a0,8(sp)
  lw  x11, 12(sp)
1c000502:	45b2                	lw	a1,12(sp)
  lw  x12, 16(sp)
1c000504:	4642                	lw	a2,16(sp)
  add sp, sp, 128
1c000506:	6109                	addi	sp,sp,128
  mret
1c000508:	30200073          	mret

1c00050c <rtc_event_handler>:


rtc_event_handler:
  lw    x11, __rtc_handler
1c00050c:	e4000597          	auipc	a1,0xe4000
1c000510:	ed45a583          	lw	a1,-300(a1) # 3e0 <__rtc_handler>
  la    x9, udma_event_handler_end
1c000514:	00000497          	auipc	s1,0x0
1c000518:	fe848493          	addi	s1,s1,-24 # 1c0004fc <udma_event_handler_end>
  j   __rt_event_enqueue
1c00051c:	c4bff06f          	j	1c000166 <__rt_event_enqueue>

1c000520 <__rt_udma_handle_copy>:

  // x9: channel, x10: event, x8,x11,x12:temp
  .global __rt_udma_handle_copy
__rt_udma_handle_copy:

  slli   x8, x10, 2
1c000520:	00251413          	slli	s0,a0,0x2
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c000524:	35442403          	lw	s0,852(s0)

  // First update all the queues
  lw     x12, RT_UDMA_CHANNEL_T_PENDINGS_1(x8)
1c000528:	4050                	lw	a2,4(s0)
  lw     x11, RT_UDMA_CHANNEL_T_PENDINGS_0(x8)
1c00052a:	400c                	lw	a1,0(s0)
  lw     x9, RT_UDMA_CHANNEL_T_PENDINGS_FIRST(x8)
1c00052c:	4404                	lw	s1,8(s0)
  sw     x12, RT_UDMA_CHANNEL_T_PENDINGS_0(x8)
1c00052e:	c010                	sw	a2,0(s0)


  bnez   x9, __rt_udma_handle_pending
1c000530:	e889                	bnez	s1,1c000542 <__rt_udma_handle_pending>

  sw     x0, RT_UDMA_CHANNEL_T_PENDINGS_1(x8)
1c000532:	00042223          	sw	zero,4(s0)
  la     x9, udma_event_handler_end
1c000536:	00000497          	auipc	s1,0x0
1c00053a:	fc648493          	addi	s1,s1,-58 # 1c0004fc <udma_event_handler_end>
  j      __rt_event_enqueue
1c00053e:	c29ff06f          	j	1c000166 <__rt_event_enqueue>

1c000542 <__rt_udma_handle_pending>:




__rt_udma_handle_pending:
  sw     x9, RT_UDMA_CHANNEL_T_PENDINGS_1(x8)
1c000542:	c044                	sw	s1,4(s0)
  lw     x11, PI_TASK_T_NEXT(x9)
1c000544:	4ccc                	lw	a1,28(s1)
  sw     x11, RT_UDMA_CHANNEL_T_PENDINGS_FIRST(x8)
1c000546:	c40c                	sw	a1,8(s0)

1c000548 <__rt_hyper_handle_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  lw    x12, 0(x8)
#else
  lw    x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c000548:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beqz      x12, __rt_hyper_handle_copy_end
1c00054c:	c621                	beqz	a2,1c000594 <__rt_hyper_handle_copy_end>

1c00054e <__rt_hyper_repeat_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c00054e:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000552:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c000556:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c00055a:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c00055c:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c00055e:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000562:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000566:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c00056a:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c00056c:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last
1c00056e:	00964963          	blt	a2,s1,1c000580 <__rt_hyper_repeat_copy_not_last>
  mv        x12, x9
1c000572:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000574:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c000578:	00061463          	bnez	a2,1c000580 <__rt_hyper_repeat_copy_not_last>
1c00057c:	f81ff06f          	j	1c0004fc <udma_event_handler_end>

1c000580 <__rt_hyper_repeat_copy_not_last>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000580:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000584:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c000588:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00058a:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00058c:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c00058e:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000590:	f6dff06f          	j	1c0004fc <udma_event_handler_end>

1c000594 <__rt_hyper_handle_copy_end>:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_end_task
  lw        x11, 0(x8)
  sw        x0, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_end_task)(x0)
1c000594:	32002583          	lw	a1,800(zero) # 320 <__rt_hyper_end_task>
  sw        x0, %tiny(__rt_hyper_end_task)(x0)
1c000598:	32002023          	sw	zero,800(zero) # 320 <__rt_hyper_end_task>
#endif
  beqz      x11, __rt_hyper_handle_emu_task
1c00059c:	c589                	beqz	a1,1c0005a6 <__rt_hyper_handle_emu_task>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_current_task
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_current_task)(x0)
1c00059e:	32002223          	sw	zero,804(zero) # 324 <__rt_hyper_current_task>
#endif
  jal       x9, __rt_event_enqueue
1c0005a2:	bc5ff4ef          	jal	s1,1c000166 <__rt_event_enqueue>

1c0005a6 <__rt_hyper_handle_emu_task>:
__rt_hyper_handle_emu_task:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_emu_task
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_emu_task)(x0)
1c0005a6:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
#endif
  beqz      x10, __rt_hyper_handle_pending_tasks
1c0005aa:	c919                	beqz	a0,1c0005c0 <__rt_hyper_handle_pending_tasks>

  la      x12, __rt_hyper_resume_emu_task
1c0005ac:	0000d617          	auipc	a2,0xd
1c0005b0:	13860613          	addi	a2,a2,312 # 1c00d6e4 <__rt_hyper_resume_emu_task>
  la        x9, udma_event_handler_end
1c0005b4:	00000497          	auipc	s1,0x0
1c0005b8:	f4848493          	addi	s1,s1,-184 # 1c0004fc <udma_event_handler_end>
  j         __rt_call_external_c_function
1c0005bc:	c9dff06f          	j	1c000258 <__rt_call_external_c_function>

1c0005c0 <__rt_hyper_handle_pending_tasks>:
__rt_hyper_handle_pending_tasks:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_tasks
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_tasks)(x0)
1c0005c0:	34002503          	lw	a0,832(zero) # 340 <__rt_hyper_pending_tasks>
#endif
  beqz      x10, udma_event_handler_end
1c0005c4:	00051463          	bnez	a0,1c0005cc <__rt_hyper_handle_pending_tasks+0xc>
1c0005c8:	f35ff06f          	j	1c0004fc <udma_event_handler_end>

  la      x12, __rt_hyper_resume_copy
1c0005cc:	0000d617          	auipc	a2,0xd
1c0005d0:	12060613          	addi	a2,a2,288 # 1c00d6ec <__rt_hyper_resume_copy>
  la        x9, udma_event_handler_end
1c0005d4:	00000497          	auipc	s1,0x0
1c0005d8:	f2848493          	addi	s1,s1,-216 # 1c0004fc <udma_event_handler_end>
  j         __rt_call_external_c_function
1c0005dc:	c7dff06f          	j	1c000258 <__rt_call_external_c_function>

1c0005e0 <__rt_hyper_handle_burst>:
  la        x8, __rt_hyper_pending_repeat
  lw        x12, 0(x8)
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c0005e0:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>

  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c0005e4:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0005e8:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c0005ec:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c0005f0:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c0005f2:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0005f4:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0005f8:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0005fc:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c000600:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c000602:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last2
1c000604:	00964f63          	blt	a2,s1,1c000622 <__rt_hyper_repeat_copy_not_last2>

  la        x12, __rt_hyper_handle_copy
1c000608:	00000617          	auipc	a2,0x0
1c00060c:	f4060613          	addi	a2,a2,-192 # 1c000548 <__rt_hyper_handle_copy>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_udma_handle
  sw        x12, 0(x8)
#else
  sw        x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000610:	30c02423          	sw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif

  mv        x12, x9
1c000614:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000616:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c00061a:	00061463          	bnez	a2,1c000622 <__rt_hyper_repeat_copy_not_last2>
1c00061e:	edfff06f          	j	1c0004fc <udma_event_handler_end>

1c000622 <__rt_hyper_repeat_copy_not_last2>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000622:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000626:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c00062a:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00062c:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00062e:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c000630:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000632:	ecbff06f          	j	1c0004fc <udma_event_handler_end>

1c000636 <pwm_event_handler>:
#include "archi/eu/eu_v3.h"

  .global pwm_event_handler
  .extern pwmEventsStatus
pwm_event_handler:
  la   x10, pwmEventsStatus
1c000636:	e4000517          	auipc	a0,0xe4000
1c00063a:	d6e50513          	addi	a0,a0,-658 # 3a4 <pwmEventsStatus>
  addi  x11, x0, 1
1c00063e:	00100593          	li	a1,1
  lw   x8, 0(x10)
1c000642:	4100                	lw	s0,0(a0)
  p.insertr x8, x11, x9
1c000644:	8095a433          	p.insertr	s0,a1,s1
  sw   x8, 0(x10)
1c000648:	c100                	sw	s0,0(a0)

  // continue with sw event raising
  li   x9, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (PLP_RT_NOTIF_EVENT << 2)
1c00064a:	002044b7          	lui	s1,0x204
1c00064e:	10c48493          	addi	s1,s1,268 # 20410c <__L2+0x18410c>
  li   x10, -1
1c000652:	557d                	li	a0,-1
  sw   x10, 0(x9)
1c000654:	c088                	sw	a0,0(s1)

  j udma_event_handler_end
1c000656:	ea7ff06f          	j	1c0004fc <udma_event_handler_end>

1c00065a <__pi_uart_handle_copy_asm>:
  .extern __pi_uart_handle_copy
  .global __pi_uart_handle_copy_asm
__pi_uart_handle_copy_asm:

//  mv        x11, x10
  mv        x11, x8
1c00065a:	85a2                	mv	a1,s0
  la        x12, __pi_uart_handle_copy
1c00065c:	0000e617          	auipc	a2,0xe
1c000660:	88a60613          	addi	a2,a2,-1910 # 1c00dee6 <__pi_uart_handle_copy>
  la        x9, udma_event_handler_end
1c000664:	00000497          	auipc	s1,0x0
1c000668:	e9848493          	addi	s1,s1,-360 # 1c0004fc <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00066c:	bedff06f          	j	1c000258 <__rt_call_external_c_function>

1c000670 <__rt_gpio_handler>:
  bnez     x8, __rt_gpio_ff1_loop
#endif

#else
  .extern __pi_gpio_handler
  mv        x11, x8
1c000670:	85a2                	mv	a1,s0
  la        x12, __pi_gpio_handler
1c000672:	0000e617          	auipc	a2,0xe
1c000676:	ca660613          	addi	a2,a2,-858 # 1c00e318 <__pi_gpio_handler>
  la        x9, __rt_gpio_handler_end
1c00067a:	00000497          	auipc	s1,0x0
1c00067e:	00c48493          	addi	s1,s1,12 # 1c000686 <__rt_gpio_handler_end>
  j         __rt_call_external_c_function
1c000682:	bd7ff06f          	j	1c000258 <__rt_call_external_c_function>

1c000686 <__rt_gpio_handler_end>:

  mret

#else

  j udma_event_handler_end
1c000686:	e77ff06f          	j	1c0004fc <udma_event_handler_end>

1c00068a <__udivdi3>:
1c00068a:	87b2                	mv	a5,a2
1c00068c:	8736                	mv	a4,a3
1c00068e:	88aa                	mv	a7,a0
1c000690:	882e                	mv	a6,a1
1c000692:	1e069d63          	bnez	a3,1c00088c <__udivdi3+0x202>
1c000696:	1c010337          	lui	t1,0x1c010
1c00069a:	e3430313          	addi	t1,t1,-460 # 1c00fe34 <__clz_tab>
1c00069e:	0ac5fd63          	bleu	a2,a1,1c000758 <__udivdi3+0xce>
1c0006a2:	6741                	lui	a4,0x10
1c0006a4:	0ae67363          	bleu	a4,a2,1c00074a <__udivdi3+0xc0>
1c0006a8:	0ff00693          	li	a3,255
1c0006ac:	00c6b6b3          	sltu	a3,a3,a2
1c0006b0:	068e                	slli	a3,a3,0x3
1c0006b2:	00d65733          	srl	a4,a2,a3
1c0006b6:	933a                	add	t1,t1,a4
1c0006b8:	00034703          	lbu	a4,0(t1)
1c0006bc:	02000313          	li	t1,32
1c0006c0:	96ba                	add	a3,a3,a4
1c0006c2:	40d30333          	sub	t1,t1,a3
1c0006c6:	00030c63          	beqz	t1,1c0006de <__udivdi3+0x54>
1c0006ca:	00659733          	sll	a4,a1,t1
1c0006ce:	00d556b3          	srl	a3,a0,a3
1c0006d2:	006617b3          	sll	a5,a2,t1
1c0006d6:	00e6e833          	or	a6,a3,a4
1c0006da:	006518b3          	sll	a7,a0,t1
1c0006de:	0107d513          	srli	a0,a5,0x10
1c0006e2:	02a85733          	divu	a4,a6,a0
1c0006e6:	1007d5b3          	p.exthz	a1,a5
1c0006ea:	0108d693          	srli	a3,a7,0x10
1c0006ee:	02a87633          	remu	a2,a6,a0
1c0006f2:	02e58833          	mul	a6,a1,a4
1c0006f6:	0642                	slli	a2,a2,0x10
1c0006f8:	8ed1                	or	a3,a3,a2
1c0006fa:	863a                	mv	a2,a4
1c0006fc:	0106fc63          	bleu	a6,a3,1c000714 <__udivdi3+0x8a>
1c000700:	96be                	add	a3,a3,a5
1c000702:	fff70613          	addi	a2,a4,-1 # ffff <__l1_heap_size+0x43>
1c000706:	00f6e763          	bltu	a3,a5,1c000714 <__udivdi3+0x8a>
1c00070a:	0106f563          	bleu	a6,a3,1c000714 <__udivdi3+0x8a>
1c00070e:	ffe70613          	addi	a2,a4,-2
1c000712:	96be                	add	a3,a3,a5
1c000714:	410686b3          	sub	a3,a3,a6
1c000718:	02a6f833          	remu	a6,a3,a0
1c00071c:	02a6d6b3          	divu	a3,a3,a0
1c000720:	df0828b3          	p.insert	a7,a6,15,16
1c000724:	02d58733          	mul	a4,a1,a3
1c000728:	8536                	mv	a0,a3
1c00072a:	00e8fb63          	bleu	a4,a7,1c000740 <__udivdi3+0xb6>
1c00072e:	98be                	add	a7,a7,a5
1c000730:	fff68513          	addi	a0,a3,-1
1c000734:	00f8e663          	bltu	a7,a5,1c000740 <__udivdi3+0xb6>
1c000738:	00e8f463          	bleu	a4,a7,1c000740 <__udivdi3+0xb6>
1c00073c:	ffe68513          	addi	a0,a3,-2
1c000740:	01061793          	slli	a5,a2,0x10
1c000744:	8fc9                	or	a5,a5,a0
1c000746:	4801                	li	a6,0
1c000748:	a06d                	j	1c0007f2 <__udivdi3+0x168>
1c00074a:	01000737          	lui	a4,0x1000
1c00074e:	46c1                	li	a3,16
1c000750:	f6e661e3          	bltu	a2,a4,1c0006b2 <__udivdi3+0x28>
1c000754:	46e1                	li	a3,24
1c000756:	bfb1                	j	1c0006b2 <__udivdi3+0x28>
1c000758:	e601                	bnez	a2,1c000760 <__udivdi3+0xd6>
1c00075a:	4685                	li	a3,1
1c00075c:	02c6d7b3          	divu	a5,a3,a2
1c000760:	66c1                	lui	a3,0x10
1c000762:	08d7fb63          	bleu	a3,a5,1c0007f8 <__udivdi3+0x16e>
1c000766:	0ff00693          	li	a3,255
1c00076a:	00f6f363          	bleu	a5,a3,1c000770 <__udivdi3+0xe6>
1c00076e:	4721                	li	a4,8
1c000770:	00e7d6b3          	srl	a3,a5,a4
1c000774:	9336                	add	t1,t1,a3
1c000776:	00034683          	lbu	a3,0(t1)
1c00077a:	02000613          	li	a2,32
1c00077e:	96ba                	add	a3,a3,a4
1c000780:	8e15                	sub	a2,a2,a3
1c000782:	e251                	bnez	a2,1c000806 <__udivdi3+0x17c>
1c000784:	40f58733          	sub	a4,a1,a5
1c000788:	4805                	li	a6,1
1c00078a:	0107d513          	srli	a0,a5,0x10
1c00078e:	1007d5b3          	p.exthz	a1,a5
1c000792:	0108d693          	srli	a3,a7,0x10
1c000796:	02a77633          	remu	a2,a4,a0
1c00079a:	02a75733          	divu	a4,a4,a0
1c00079e:	0642                	slli	a2,a2,0x10
1c0007a0:	8ed1                	or	a3,a3,a2
1c0007a2:	02e58333          	mul	t1,a1,a4
1c0007a6:	863a                	mv	a2,a4
1c0007a8:	0066fc63          	bleu	t1,a3,1c0007c0 <__udivdi3+0x136>
1c0007ac:	96be                	add	a3,a3,a5
1c0007ae:	fff70613          	addi	a2,a4,-1 # ffffff <__L2+0xf7ffff>
1c0007b2:	00f6e763          	bltu	a3,a5,1c0007c0 <__udivdi3+0x136>
1c0007b6:	0066f563          	bleu	t1,a3,1c0007c0 <__udivdi3+0x136>
1c0007ba:	ffe70613          	addi	a2,a4,-2
1c0007be:	96be                	add	a3,a3,a5
1c0007c0:	406686b3          	sub	a3,a3,t1
1c0007c4:	02a6f333          	remu	t1,a3,a0
1c0007c8:	02a6d6b3          	divu	a3,a3,a0
1c0007cc:	df0328b3          	p.insert	a7,t1,15,16
1c0007d0:	02d58733          	mul	a4,a1,a3
1c0007d4:	8536                	mv	a0,a3
1c0007d6:	00e8fb63          	bleu	a4,a7,1c0007ec <__udivdi3+0x162>
1c0007da:	98be                	add	a7,a7,a5
1c0007dc:	fff68513          	addi	a0,a3,-1 # ffff <__l1_heap_size+0x43>
1c0007e0:	00f8e663          	bltu	a7,a5,1c0007ec <__udivdi3+0x162>
1c0007e4:	00e8f463          	bleu	a4,a7,1c0007ec <__udivdi3+0x162>
1c0007e8:	ffe68513          	addi	a0,a3,-2
1c0007ec:	01061793          	slli	a5,a2,0x10
1c0007f0:	8fc9                	or	a5,a5,a0
1c0007f2:	853e                	mv	a0,a5
1c0007f4:	85c2                	mv	a1,a6
1c0007f6:	8082                	ret
1c0007f8:	010006b7          	lui	a3,0x1000
1c0007fc:	4741                	li	a4,16
1c0007fe:	f6d7e9e3          	bltu	a5,a3,1c000770 <__udivdi3+0xe6>
1c000802:	4761                	li	a4,24
1c000804:	b7b5                	j	1c000770 <__udivdi3+0xe6>
1c000806:	00c797b3          	sll	a5,a5,a2
1c00080a:	00d5d333          	srl	t1,a1,a3
1c00080e:	0107de13          	srli	t3,a5,0x10
1c000812:	00c59733          	sll	a4,a1,a2
1c000816:	00c518b3          	sll	a7,a0,a2
1c00081a:	00d555b3          	srl	a1,a0,a3
1c00081e:	03c35533          	divu	a0,t1,t3
1c000822:	8dd9                	or	a1,a1,a4
1c000824:	1007d733          	p.exthz	a4,a5
1c000828:	0105d693          	srli	a3,a1,0x10
1c00082c:	03c37633          	remu	a2,t1,t3
1c000830:	882a                	mv	a6,a0
1c000832:	02a70333          	mul	t1,a4,a0
1c000836:	0642                	slli	a2,a2,0x10
1c000838:	8ed1                	or	a3,a3,a2
1c00083a:	0066fc63          	bleu	t1,a3,1c000852 <__udivdi3+0x1c8>
1c00083e:	96be                	add	a3,a3,a5
1c000840:	fff50813          	addi	a6,a0,-1
1c000844:	00f6e763          	bltu	a3,a5,1c000852 <__udivdi3+0x1c8>
1c000848:	0066f563          	bleu	t1,a3,1c000852 <__udivdi3+0x1c8>
1c00084c:	ffe50813          	addi	a6,a0,-2
1c000850:	96be                	add	a3,a3,a5
1c000852:	406686b3          	sub	a3,a3,t1
1c000856:	03c6f633          	remu	a2,a3,t3
1c00085a:	03c6d6b3          	divu	a3,a3,t3
1c00085e:	df0625b3          	p.insert	a1,a2,15,16
1c000862:	02d70733          	mul	a4,a4,a3
1c000866:	8636                	mv	a2,a3
1c000868:	00e5fc63          	bleu	a4,a1,1c000880 <__udivdi3+0x1f6>
1c00086c:	95be                	add	a1,a1,a5
1c00086e:	fff68613          	addi	a2,a3,-1 # ffffff <__L2+0xf7ffff>
1c000872:	00f5e763          	bltu	a1,a5,1c000880 <__udivdi3+0x1f6>
1c000876:	00e5f563          	bleu	a4,a1,1c000880 <__udivdi3+0x1f6>
1c00087a:	ffe68613          	addi	a2,a3,-2
1c00087e:	95be                	add	a1,a1,a5
1c000880:	0842                	slli	a6,a6,0x10
1c000882:	40e58733          	sub	a4,a1,a4
1c000886:	00c86833          	or	a6,a6,a2
1c00088a:	b701                	j	1c00078a <__udivdi3+0x100>
1c00088c:	12d5ea63          	bltu	a1,a3,1c0009c0 <__udivdi3+0x336>
1c000890:	67c1                	lui	a5,0x10
1c000892:	02f6fd63          	bleu	a5,a3,1c0008cc <__udivdi3+0x242>
1c000896:	0ff00793          	li	a5,255
1c00089a:	00d7b8b3          	sltu	a7,a5,a3
1c00089e:	088e                	slli	a7,a7,0x3
1c0008a0:	1c010737          	lui	a4,0x1c010
1c0008a4:	0116d7b3          	srl	a5,a3,a7
1c0008a8:	e3470713          	addi	a4,a4,-460 # 1c00fe34 <__clz_tab>
1c0008ac:	97ba                	add	a5,a5,a4
1c0008ae:	0007c783          	lbu	a5,0(a5) # 10000 <__L1Cl>
1c0008b2:	02000813          	li	a6,32
1c0008b6:	97c6                	add	a5,a5,a7
1c0008b8:	40f80833          	sub	a6,a6,a5
1c0008bc:	00081f63          	bnez	a6,1c0008da <__udivdi3+0x250>
1c0008c0:	4785                	li	a5,1
1c0008c2:	f2b6e8e3          	bltu	a3,a1,1c0007f2 <__udivdi3+0x168>
1c0008c6:	04a637b3          	p.sletu	a5,a2,a0
1c0008ca:	b725                	j	1c0007f2 <__udivdi3+0x168>
1c0008cc:	010007b7          	lui	a5,0x1000
1c0008d0:	48c1                	li	a7,16
1c0008d2:	fcf6e7e3          	bltu	a3,a5,1c0008a0 <__udivdi3+0x216>
1c0008d6:	48e1                	li	a7,24
1c0008d8:	b7e1                	j	1c0008a0 <__udivdi3+0x216>
1c0008da:	00f658b3          	srl	a7,a2,a5
1c0008de:	010696b3          	sll	a3,a3,a6
1c0008e2:	00d8e6b3          	or	a3,a7,a3
1c0008e6:	00f5d333          	srl	t1,a1,a5
1c0008ea:	0106de13          	srli	t3,a3,0x10
1c0008ee:	00f55733          	srl	a4,a0,a5
1c0008f2:	03c377b3          	remu	a5,t1,t3
1c0008f6:	1006d8b3          	p.exthz	a7,a3
1c0008fa:	010595b3          	sll	a1,a1,a6
1c0008fe:	8f4d                	or	a4,a4,a1
1c000900:	01075593          	srli	a1,a4,0x10
1c000904:	01061633          	sll	a2,a2,a6
1c000908:	03c35333          	divu	t1,t1,t3
1c00090c:	07c2                	slli	a5,a5,0x10
1c00090e:	8ddd                	or	a1,a1,a5
1c000910:	02688eb3          	mul	t4,a7,t1
1c000914:	879a                	mv	a5,t1
1c000916:	01d5fc63          	bleu	t4,a1,1c00092e <__udivdi3+0x2a4>
1c00091a:	95b6                	add	a1,a1,a3
1c00091c:	fff30793          	addi	a5,t1,-1
1c000920:	00d5e763          	bltu	a1,a3,1c00092e <__udivdi3+0x2a4>
1c000924:	01d5f563          	bleu	t4,a1,1c00092e <__udivdi3+0x2a4>
1c000928:	ffe30793          	addi	a5,t1,-2
1c00092c:	95b6                	add	a1,a1,a3
1c00092e:	41d585b3          	sub	a1,a1,t4
1c000932:	03c5f333          	remu	t1,a1,t3
1c000936:	03c5d5b3          	divu	a1,a1,t3
1c00093a:	df032733          	p.insert	a4,t1,15,16
1c00093e:	02b888b3          	mul	a7,a7,a1
1c000942:	832e                	mv	t1,a1
1c000944:	01177c63          	bleu	a7,a4,1c00095c <__udivdi3+0x2d2>
1c000948:	9736                	add	a4,a4,a3
1c00094a:	fff58313          	addi	t1,a1,-1
1c00094e:	00d76763          	bltu	a4,a3,1c00095c <__udivdi3+0x2d2>
1c000952:	01177563          	bleu	a7,a4,1c00095c <__udivdi3+0x2d2>
1c000956:	ffe58313          	addi	t1,a1,-2
1c00095a:	9736                	add	a4,a4,a3
1c00095c:	07c2                	slli	a5,a5,0x10
1c00095e:	6e41                	lui	t3,0x10
1c000960:	0067e7b3          	or	a5,a5,t1
1c000964:	fffe0593          	addi	a1,t3,-1 # ffff <__l1_heap_size+0x43>
1c000968:	00b7f6b3          	and	a3,a5,a1
1c00096c:	41170733          	sub	a4,a4,a7
1c000970:	8df1                	and	a1,a1,a2
1c000972:	0107d893          	srli	a7,a5,0x10
1c000976:	02b68333          	mul	t1,a3,a1
1c00097a:	8241                	srli	a2,a2,0x10
1c00097c:	02b885b3          	mul	a1,a7,a1
1c000980:	8eae                	mv	t4,a1
1c000982:	42c68eb3          	p.mac	t4,a3,a2
1c000986:	01035693          	srli	a3,t1,0x10
1c00098a:	96f6                	add	a3,a3,t4
1c00098c:	02c888b3          	mul	a7,a7,a2
1c000990:	00b6f363          	bleu	a1,a3,1c000996 <__udivdi3+0x30c>
1c000994:	98f2                	add	a7,a7,t3
1c000996:	0106d613          	srli	a2,a3,0x10
1c00099a:	98b2                	add	a7,a7,a2
1c00099c:	03176063          	bltu	a4,a7,1c0009bc <__udivdi3+0x332>
1c0009a0:	db1713e3          	bne	a4,a7,1c000746 <__udivdi3+0xbc>
1c0009a4:	6741                	lui	a4,0x10
1c0009a6:	177d                	addi	a4,a4,-1
1c0009a8:	8ef9                	and	a3,a3,a4
1c0009aa:	06c2                	slli	a3,a3,0x10
1c0009ac:	00e37333          	and	t1,t1,a4
1c0009b0:	01051533          	sll	a0,a0,a6
1c0009b4:	969a                	add	a3,a3,t1
1c0009b6:	4801                	li	a6,0
1c0009b8:	e2d57de3          	bleu	a3,a0,1c0007f2 <__udivdi3+0x168>
1c0009bc:	17fd                	addi	a5,a5,-1
1c0009be:	b361                	j	1c000746 <__udivdi3+0xbc>
1c0009c0:	4801                	li	a6,0
1c0009c2:	4781                	li	a5,0
1c0009c4:	b53d                	j	1c0007f2 <__udivdi3+0x168>

1c0009c6 <__umoddi3>:
1c0009c6:	88b2                	mv	a7,a2
1c0009c8:	8736                	mv	a4,a3
1c0009ca:	87aa                	mv	a5,a0
1c0009cc:	882e                	mv	a6,a1
1c0009ce:	1a069963          	bnez	a3,1c000b80 <__umoddi3+0x1ba>
1c0009d2:	1c0106b7          	lui	a3,0x1c010
1c0009d6:	e3468693          	addi	a3,a3,-460 # 1c00fe34 <__clz_tab>
1c0009da:	0ac5f463          	bleu	a2,a1,1c000a82 <__umoddi3+0xbc>
1c0009de:	6341                	lui	t1,0x10
1c0009e0:	08667a63          	bleu	t1,a2,1c000a74 <__umoddi3+0xae>
1c0009e4:	0ff00313          	li	t1,255
1c0009e8:	00c37363          	bleu	a2,t1,1c0009ee <__umoddi3+0x28>
1c0009ec:	4721                	li	a4,8
1c0009ee:	00e65333          	srl	t1,a2,a4
1c0009f2:	969a                	add	a3,a3,t1
1c0009f4:	0006c683          	lbu	a3,0(a3)
1c0009f8:	02000313          	li	t1,32
1c0009fc:	9736                	add	a4,a4,a3
1c0009fe:	40e30333          	sub	t1,t1,a4
1c000a02:	00030c63          	beqz	t1,1c000a1a <__umoddi3+0x54>
1c000a06:	006595b3          	sll	a1,a1,t1
1c000a0a:	00e55733          	srl	a4,a0,a4
1c000a0e:	006618b3          	sll	a7,a2,t1
1c000a12:	00b76833          	or	a6,a4,a1
1c000a16:	006517b3          	sll	a5,a0,t1
1c000a1a:	0108d613          	srli	a2,a7,0x10
1c000a1e:	02c87733          	remu	a4,a6,a2
1c000a22:	1008d533          	p.exthz	a0,a7
1c000a26:	0107d693          	srli	a3,a5,0x10
1c000a2a:	02c85833          	divu	a6,a6,a2
1c000a2e:	0742                	slli	a4,a4,0x10
1c000a30:	8ed9                	or	a3,a3,a4
1c000a32:	03050833          	mul	a6,a0,a6
1c000a36:	0106f863          	bleu	a6,a3,1c000a46 <__umoddi3+0x80>
1c000a3a:	96c6                	add	a3,a3,a7
1c000a3c:	0116e563          	bltu	a3,a7,1c000a46 <__umoddi3+0x80>
1c000a40:	0106f363          	bleu	a6,a3,1c000a46 <__umoddi3+0x80>
1c000a44:	96c6                	add	a3,a3,a7
1c000a46:	410686b3          	sub	a3,a3,a6
1c000a4a:	02c6f733          	remu	a4,a3,a2
1c000a4e:	02c6d6b3          	divu	a3,a3,a2
1c000a52:	df0727b3          	p.insert	a5,a4,15,16
1c000a56:	02d506b3          	mul	a3,a0,a3
1c000a5a:	00d7f863          	bleu	a3,a5,1c000a6a <__umoddi3+0xa4>
1c000a5e:	97c6                	add	a5,a5,a7
1c000a60:	0117e563          	bltu	a5,a7,1c000a6a <__umoddi3+0xa4>
1c000a64:	00d7f363          	bleu	a3,a5,1c000a6a <__umoddi3+0xa4>
1c000a68:	97c6                	add	a5,a5,a7
1c000a6a:	8f95                	sub	a5,a5,a3
1c000a6c:	0067d533          	srl	a0,a5,t1
1c000a70:	4581                	li	a1,0
1c000a72:	8082                	ret
1c000a74:	01000337          	lui	t1,0x1000
1c000a78:	4741                	li	a4,16
1c000a7a:	f6666ae3          	bltu	a2,t1,1c0009ee <__umoddi3+0x28>
1c000a7e:	4761                	li	a4,24
1c000a80:	b7bd                	j	1c0009ee <__umoddi3+0x28>
1c000a82:	e601                	bnez	a2,1c000a8a <__umoddi3+0xc4>
1c000a84:	4605                	li	a2,1
1c000a86:	031658b3          	divu	a7,a2,a7
1c000a8a:	6641                	lui	a2,0x10
1c000a8c:	06c8ff63          	bleu	a2,a7,1c000b0a <__umoddi3+0x144>
1c000a90:	0ff00613          	li	a2,255
1c000a94:	01167363          	bleu	a7,a2,1c000a9a <__umoddi3+0xd4>
1c000a98:	4721                	li	a4,8
1c000a9a:	00e8d633          	srl	a2,a7,a4
1c000a9e:	96b2                	add	a3,a3,a2
1c000aa0:	0006c603          	lbu	a2,0(a3)
1c000aa4:	02000313          	li	t1,32
1c000aa8:	963a                	add	a2,a2,a4
1c000aaa:	40c30333          	sub	t1,t1,a2
1c000aae:	06031563          	bnez	t1,1c000b18 <__umoddi3+0x152>
1c000ab2:	411585b3          	sub	a1,a1,a7
1c000ab6:	0108d713          	srli	a4,a7,0x10
1c000aba:	1008d533          	p.exthz	a0,a7
1c000abe:	0107d613          	srli	a2,a5,0x10
1c000ac2:	02e5f6b3          	remu	a3,a1,a4
1c000ac6:	02e5d5b3          	divu	a1,a1,a4
1c000aca:	06c2                	slli	a3,a3,0x10
1c000acc:	8ed1                	or	a3,a3,a2
1c000ace:	02b505b3          	mul	a1,a0,a1
1c000ad2:	00b6f863          	bleu	a1,a3,1c000ae2 <__umoddi3+0x11c>
1c000ad6:	96c6                	add	a3,a3,a7
1c000ad8:	0116e563          	bltu	a3,a7,1c000ae2 <__umoddi3+0x11c>
1c000adc:	00b6f363          	bleu	a1,a3,1c000ae2 <__umoddi3+0x11c>
1c000ae0:	96c6                	add	a3,a3,a7
1c000ae2:	40b685b3          	sub	a1,a3,a1
1c000ae6:	02e5f6b3          	remu	a3,a1,a4
1c000aea:	02e5d5b3          	divu	a1,a1,a4
1c000aee:	df06a7b3          	p.insert	a5,a3,15,16
1c000af2:	02b505b3          	mul	a1,a0,a1
1c000af6:	00b7f863          	bleu	a1,a5,1c000b06 <__umoddi3+0x140>
1c000afa:	97c6                	add	a5,a5,a7
1c000afc:	0117e563          	bltu	a5,a7,1c000b06 <__umoddi3+0x140>
1c000b00:	00b7f363          	bleu	a1,a5,1c000b06 <__umoddi3+0x140>
1c000b04:	97c6                	add	a5,a5,a7
1c000b06:	8f8d                	sub	a5,a5,a1
1c000b08:	b795                	j	1c000a6c <__umoddi3+0xa6>
1c000b0a:	01000637          	lui	a2,0x1000
1c000b0e:	4741                	li	a4,16
1c000b10:	f8c8e5e3          	bltu	a7,a2,1c000a9a <__umoddi3+0xd4>
1c000b14:	4761                	li	a4,24
1c000b16:	b751                	j	1c000a9a <__umoddi3+0xd4>
1c000b18:	006898b3          	sll	a7,a7,t1
1c000b1c:	00c5d733          	srl	a4,a1,a2
1c000b20:	006517b3          	sll	a5,a0,t1
1c000b24:	00c55633          	srl	a2,a0,a2
1c000b28:	006595b3          	sll	a1,a1,t1
1c000b2c:	0108d513          	srli	a0,a7,0x10
1c000b30:	8dd1                	or	a1,a1,a2
1c000b32:	02a77633          	remu	a2,a4,a0
1c000b36:	1008d833          	p.exthz	a6,a7
1c000b3a:	0105d693          	srli	a3,a1,0x10
1c000b3e:	02a75733          	divu	a4,a4,a0
1c000b42:	0642                	slli	a2,a2,0x10
1c000b44:	8ed1                	or	a3,a3,a2
1c000b46:	02e80733          	mul	a4,a6,a4
1c000b4a:	00e6f863          	bleu	a4,a3,1c000b5a <__umoddi3+0x194>
1c000b4e:	96c6                	add	a3,a3,a7
1c000b50:	0116e563          	bltu	a3,a7,1c000b5a <__umoddi3+0x194>
1c000b54:	00e6f363          	bleu	a4,a3,1c000b5a <__umoddi3+0x194>
1c000b58:	96c6                	add	a3,a3,a7
1c000b5a:	8e99                	sub	a3,a3,a4
1c000b5c:	02a6f733          	remu	a4,a3,a0
1c000b60:	02a6d6b3          	divu	a3,a3,a0
1c000b64:	df0725b3          	p.insert	a1,a4,15,16
1c000b68:	02d806b3          	mul	a3,a6,a3
1c000b6c:	00d5f863          	bleu	a3,a1,1c000b7c <__umoddi3+0x1b6>
1c000b70:	95c6                	add	a1,a1,a7
1c000b72:	0115e563          	bltu	a1,a7,1c000b7c <__umoddi3+0x1b6>
1c000b76:	00d5f363          	bleu	a3,a1,1c000b7c <__umoddi3+0x1b6>
1c000b7a:	95c6                	add	a1,a1,a7
1c000b7c:	8d95                	sub	a1,a1,a3
1c000b7e:	bf25                	j	1c000ab6 <__umoddi3+0xf0>
1c000b80:	eed5e9e3          	bltu	a1,a3,1c000a72 <__umoddi3+0xac>
1c000b84:	6741                	lui	a4,0x10
1c000b86:	04e6f563          	bleu	a4,a3,1c000bd0 <__umoddi3+0x20a>
1c000b8a:	0ff00e93          	li	t4,255
1c000b8e:	00deb733          	sltu	a4,t4,a3
1c000b92:	070e                	slli	a4,a4,0x3
1c000b94:	1c010337          	lui	t1,0x1c010
1c000b98:	00e6d8b3          	srl	a7,a3,a4
1c000b9c:	e3430313          	addi	t1,t1,-460 # 1c00fe34 <__clz_tab>
1c000ba0:	989a                	add	a7,a7,t1
1c000ba2:	0008ce83          	lbu	t4,0(a7)
1c000ba6:	02000e13          	li	t3,32
1c000baa:	9eba                	add	t4,t4,a4
1c000bac:	41de0e33          	sub	t3,t3,t4
1c000bb0:	020e1763          	bnez	t3,1c000bde <__umoddi3+0x218>
1c000bb4:	00b6e463          	bltu	a3,a1,1c000bbc <__umoddi3+0x1f6>
1c000bb8:	00c56963          	bltu	a0,a2,1c000bca <__umoddi3+0x204>
1c000bbc:	40c507b3          	sub	a5,a0,a2
1c000bc0:	8d95                	sub	a1,a1,a3
1c000bc2:	00f53533          	sltu	a0,a0,a5
1c000bc6:	40a58833          	sub	a6,a1,a0
1c000bca:	853e                	mv	a0,a5
1c000bcc:	85c2                	mv	a1,a6
1c000bce:	b555                	j	1c000a72 <__umoddi3+0xac>
1c000bd0:	010008b7          	lui	a7,0x1000
1c000bd4:	4741                	li	a4,16
1c000bd6:	fb16efe3          	bltu	a3,a7,1c000b94 <__umoddi3+0x1ce>
1c000bda:	4761                	li	a4,24
1c000bdc:	bf65                	j	1c000b94 <__umoddi3+0x1ce>
1c000bde:	01d65733          	srl	a4,a2,t4
1c000be2:	01c696b3          	sll	a3,a3,t3
1c000be6:	8ed9                	or	a3,a3,a4
1c000be8:	01d5d7b3          	srl	a5,a1,t4
1c000bec:	0106d813          	srli	a6,a3,0x10
1c000bf0:	0307f333          	remu	t1,a5,a6
1c000bf4:	1006d733          	p.exthz	a4,a3
1c000bf8:	01d558b3          	srl	a7,a0,t4
1c000bfc:	01c595b3          	sll	a1,a1,t3
1c000c00:	00b8e5b3          	or	a1,a7,a1
1c000c04:	0105d893          	srli	a7,a1,0x10
1c000c08:	01c61633          	sll	a2,a2,t3
1c000c0c:	01c51533          	sll	a0,a0,t3
1c000c10:	0307d7b3          	divu	a5,a5,a6
1c000c14:	0342                	slli	t1,t1,0x10
1c000c16:	011368b3          	or	a7,t1,a7
1c000c1a:	02f70f33          	mul	t5,a4,a5
1c000c1e:	833e                	mv	t1,a5
1c000c20:	01e8fc63          	bleu	t5,a7,1c000c38 <__umoddi3+0x272>
1c000c24:	98b6                	add	a7,a7,a3
1c000c26:	fff78313          	addi	t1,a5,-1 # ffffff <__L2+0xf7ffff>
1c000c2a:	00d8e763          	bltu	a7,a3,1c000c38 <__umoddi3+0x272>
1c000c2e:	01e8f563          	bleu	t5,a7,1c000c38 <__umoddi3+0x272>
1c000c32:	ffe78313          	addi	t1,a5,-2
1c000c36:	98b6                	add	a7,a7,a3
1c000c38:	41e888b3          	sub	a7,a7,t5
1c000c3c:	0308f7b3          	remu	a5,a7,a6
1c000c40:	0308d8b3          	divu	a7,a7,a6
1c000c44:	df07a5b3          	p.insert	a1,a5,15,16
1c000c48:	03170733          	mul	a4,a4,a7
1c000c4c:	87c6                	mv	a5,a7
1c000c4e:	00e5fc63          	bleu	a4,a1,1c000c66 <__umoddi3+0x2a0>
1c000c52:	95b6                	add	a1,a1,a3
1c000c54:	fff88793          	addi	a5,a7,-1 # ffffff <__L2+0xf7ffff>
1c000c58:	00d5e763          	bltu	a1,a3,1c000c66 <__umoddi3+0x2a0>
1c000c5c:	00e5f563          	bleu	a4,a1,1c000c66 <__umoddi3+0x2a0>
1c000c60:	ffe88793          	addi	a5,a7,-2
1c000c64:	95b6                	add	a1,a1,a3
1c000c66:	0342                	slli	t1,t1,0x10
1c000c68:	6f41                	lui	t5,0x10
1c000c6a:	00f36333          	or	t1,t1,a5
1c000c6e:	ffff0793          	addi	a5,t5,-1 # ffff <__l1_heap_size+0x43>
1c000c72:	00f37833          	and	a6,t1,a5
1c000c76:	01035313          	srli	t1,t1,0x10
1c000c7a:	8ff1                	and	a5,a5,a2
1c000c7c:	02f808b3          	mul	a7,a6,a5
1c000c80:	8d99                	sub	a1,a1,a4
1c000c82:	01065713          	srli	a4,a2,0x10
1c000c86:	02f307b3          	mul	a5,t1,a5
1c000c8a:	8fbe                	mv	t6,a5
1c000c8c:	42e80fb3          	p.mac	t6,a6,a4
1c000c90:	0108d813          	srli	a6,a7,0x10
1c000c94:	987e                	add	a6,a6,t6
1c000c96:	02e30333          	mul	t1,t1,a4
1c000c9a:	00f87363          	bleu	a5,a6,1c000ca0 <__umoddi3+0x2da>
1c000c9e:	937a                	add	t1,t1,t5
1c000ca0:	01085713          	srli	a4,a6,0x10
1c000ca4:	933a                	add	t1,t1,a4
1c000ca6:	6741                	lui	a4,0x10
1c000ca8:	177d                	addi	a4,a4,-1
1c000caa:	00e87833          	and	a6,a6,a4
1c000cae:	0842                	slli	a6,a6,0x10
1c000cb0:	00e8f733          	and	a4,a7,a4
1c000cb4:	9742                	add	a4,a4,a6
1c000cb6:	0065e663          	bltu	a1,t1,1c000cc2 <__umoddi3+0x2fc>
1c000cba:	00659d63          	bne	a1,t1,1c000cd4 <__umoddi3+0x30e>
1c000cbe:	00e57b63          	bleu	a4,a0,1c000cd4 <__umoddi3+0x30e>
1c000cc2:	40c70633          	sub	a2,a4,a2
1c000cc6:	00c73733          	sltu	a4,a4,a2
1c000cca:	40d30333          	sub	t1,t1,a3
1c000cce:	40e30333          	sub	t1,t1,a4
1c000cd2:	8732                	mv	a4,a2
1c000cd4:	40e50733          	sub	a4,a0,a4
1c000cd8:	00e53533          	sltu	a0,a0,a4
1c000cdc:	406585b3          	sub	a1,a1,t1
1c000ce0:	8d89                	sub	a1,a1,a0
1c000ce2:	01d597b3          	sll	a5,a1,t4
1c000ce6:	01c75733          	srl	a4,a4,t3
1c000cea:	00e7e533          	or	a0,a5,a4
1c000cee:	01c5d5b3          	srl	a1,a1,t3
1c000cf2:	b341                	j	1c000a72 <__umoddi3+0xac>

1c000cf4 <__adddf3>:
1c000cf4:	e6059733          	p.extractu	a4,a1,19,0
1c000cf8:	070e                	slli	a4,a4,0x3
1c000cfa:	01d55793          	srli	a5,a0,0x1d
1c000cfe:	e6069833          	p.extractu	a6,a3,19,0
1c000d02:	d5459e33          	p.extractu	t3,a1,10,20
1c000d06:	080e                	slli	a6,a6,0x3
1c000d08:	01d65893          	srli	a7,a2,0x1d
1c000d0c:	8fd9                	or	a5,a5,a4
1c000d0e:	81fd                	srli	a1,a1,0x1f
1c000d10:	d5469733          	p.extractu	a4,a3,10,20
1c000d14:	82fd                	srli	a3,a3,0x1f
1c000d16:	0108eeb3          	or	t4,a7,a6
1c000d1a:	050e                	slli	a0,a0,0x3
1c000d1c:	060e                	slli	a2,a2,0x3
1c000d1e:	40ee0833          	sub	a6,t3,a4
1c000d22:	2ad59563          	bne	a1,a3,1c000fcc <__adddf3+0x2d8>
1c000d26:	15005463          	blez	a6,1c000e6e <__adddf3+0x17a>
1c000d2a:	e369                	bnez	a4,1c000dec <__adddf3+0xf8>
1c000d2c:	00cee733          	or	a4,t4,a2
1c000d30:	e325                	bnez	a4,1c000d90 <__adddf3+0x9c>
1c000d32:	7ff00693          	li	a3,2047
1c000d36:	8742                	mv	a4,a6
1c000d38:	22d81d63          	bne	a6,a3,1c000f72 <__adddf3+0x27e>
1c000d3c:	00a7e6b3          	or	a3,a5,a0
1c000d40:	22069963          	bnez	a3,1c000f72 <__adddf3+0x27e>
1c000d44:	4781                	li	a5,0
1c000d46:	4501                	li	a0,0
1c000d48:	00879693          	slli	a3,a5,0x8
1c000d4c:	0006d963          	bgez	a3,1c000d5e <__adddf3+0x6a>
1c000d50:	0705                	addi	a4,a4,1
1c000d52:	7ff00693          	li	a3,2047
1c000d56:	58d70b63          	beq	a4,a3,1c0012ec <__adddf3+0x5f8>
1c000d5a:	c177b7b3          	p.bclr	a5,a5,0,23
1c000d5e:	01d79693          	slli	a3,a5,0x1d
1c000d62:	810d                	srli	a0,a0,0x3
1c000d64:	8d55                	or	a0,a0,a3
1c000d66:	7ff00693          	li	a3,2047
1c000d6a:	838d                	srli	a5,a5,0x3
1c000d6c:	00d71963          	bne	a4,a3,1c000d7e <__adddf3+0x8a>
1c000d70:	8d5d                	or	a0,a0,a5
1c000d72:	4781                	li	a5,0
1c000d74:	c509                	beqz	a0,1c000d7e <__adddf3+0x8a>
1c000d76:	000807b7          	lui	a5,0x80
1c000d7a:	4501                	li	a0,0
1c000d7c:	4581                	li	a1,0
1c000d7e:	4681                	li	a3,0
1c000d80:	e607a6b3          	p.insert	a3,a5,19,0
1c000d84:	d54726b3          	p.insert	a3,a4,10,20
1c000d88:	c1f5a6b3          	p.insert	a3,a1,0,31
1c000d8c:	85b6                	mv	a1,a3
1c000d8e:	8082                	ret
1c000d90:	fff80893          	addi	a7,a6,-1
1c000d94:	04089163          	bnez	a7,1c000dd6 <__adddf3+0xe2>
1c000d98:	962a                	add	a2,a2,a0
1c000d9a:	00a63533          	sltu	a0,a2,a0
1c000d9e:	01d78833          	add	a6,a5,t4
1c000da2:	00a807b3          	add	a5,a6,a0
1c000da6:	4705                	li	a4,1
1c000da8:	8532                	mv	a0,a2
1c000daa:	00879893          	slli	a7,a5,0x8
1c000dae:	1c08d263          	bgez	a7,1c000f72 <__adddf3+0x27e>
1c000db2:	0705                	addi	a4,a4,1
1c000db4:	7ff00693          	li	a3,2047
1c000db8:	f8d706e3          	beq	a4,a3,1c000d44 <__adddf3+0x50>
1c000dbc:	c177b633          	p.bclr	a2,a5,0,23
1c000dc0:	00155693          	srli	a3,a0,0x1
1c000dc4:	fc153533          	p.bclr	a0,a0,30,1
1c000dc8:	01f61793          	slli	a5,a2,0x1f
1c000dcc:	8d55                	or	a0,a0,a3
1c000dce:	8d5d                	or	a0,a0,a5
1c000dd0:	00165793          	srli	a5,a2,0x1
1c000dd4:	aa79                	j	1c000f72 <__adddf3+0x27e>
1c000dd6:	7ff00713          	li	a4,2047
1c000dda:	02e81063          	bne	a6,a4,1c000dfa <__adddf3+0x106>
1c000dde:	00a7e733          	or	a4,a5,a0
1c000de2:	4e070563          	beqz	a4,1c0012cc <__adddf3+0x5d8>
1c000de6:	7ff00713          	li	a4,2047
1c000dea:	a261                	j	1c000f72 <__adddf3+0x27e>
1c000dec:	7ff00713          	li	a4,2047
1c000df0:	feee07e3          	beq	t3,a4,1c000dde <__adddf3+0xea>
1c000df4:	c17eceb3          	p.bset	t4,t4,0,23
1c000df8:	88c2                	mv	a7,a6
1c000dfa:	03800713          	li	a4,56
1c000dfe:	07174363          	blt	a4,a7,1c000e64 <__adddf3+0x170>
1c000e02:	477d                	li	a4,31
1c000e04:	03174c63          	blt	a4,a7,1c000e3c <__adddf3+0x148>
1c000e08:	02000713          	li	a4,32
1c000e0c:	41170733          	sub	a4,a4,a7
1c000e10:	011656b3          	srl	a3,a2,a7
1c000e14:	00ee9833          	sll	a6,t4,a4
1c000e18:	00e61633          	sll	a2,a2,a4
1c000e1c:	00d86833          	or	a6,a6,a3
1c000e20:	00c03633          	snez	a2,a2
1c000e24:	00c86833          	or	a6,a6,a2
1c000e28:	011ed8b3          	srl	a7,t4,a7
1c000e2c:	982a                	add	a6,a6,a0
1c000e2e:	98be                	add	a7,a7,a5
1c000e30:	00a837b3          	sltu	a5,a6,a0
1c000e34:	97c6                	add	a5,a5,a7
1c000e36:	8542                	mv	a0,a6
1c000e38:	8772                	mv	a4,t3
1c000e3a:	bf85                	j	1c000daa <__adddf3+0xb6>
1c000e3c:	02000713          	li	a4,32
1c000e40:	011ed833          	srl	a6,t4,a7
1c000e44:	4681                	li	a3,0
1c000e46:	00e88863          	beq	a7,a4,1c000e56 <__adddf3+0x162>
1c000e4a:	04000693          	li	a3,64
1c000e4e:	411688b3          	sub	a7,a3,a7
1c000e52:	011e96b3          	sll	a3,t4,a7
1c000e56:	8e55                	or	a2,a2,a3
1c000e58:	00c03633          	snez	a2,a2
1c000e5c:	00c86833          	or	a6,a6,a2
1c000e60:	4881                	li	a7,0
1c000e62:	b7e9                	j	1c000e2c <__adddf3+0x138>
1c000e64:	00cee833          	or	a6,t4,a2
1c000e68:	01003833          	snez	a6,a6
1c000e6c:	bfd5                	j	1c000e60 <__adddf3+0x16c>
1c000e6e:	0c080263          	beqz	a6,1c000f32 <__adddf3+0x23e>
1c000e72:	060e1f63          	bnez	t3,1c000ef0 <__adddf3+0x1fc>
1c000e76:	00a7e6b3          	or	a3,a5,a0
1c000e7a:	ee89                	bnez	a3,1c000e94 <__adddf3+0x1a0>
1c000e7c:	7ff00793          	li	a5,2047
1c000e80:	00f71763          	bne	a4,a5,1c000e8e <__adddf3+0x19a>
1c000e84:	00cee533          	or	a0,t4,a2
1c000e88:	4781                	li	a5,0
1c000e8a:	ea050fe3          	beqz	a0,1c000d48 <__adddf3+0x54>
1c000e8e:	87f6                	mv	a5,t4
1c000e90:	8532                	mv	a0,a2
1c000e92:	a0c5                	j	1c000f72 <__adddf3+0x27e>
1c000e94:	01f83a63          	p.bneimm	a6,-1,1c000ea8 <__adddf3+0x1b4>
1c000e98:	9532                	add	a0,a0,a2
1c000e9a:	01d78833          	add	a6,a5,t4
1c000e9e:	00c53633          	sltu	a2,a0,a2
1c000ea2:	00c807b3          	add	a5,a6,a2
1c000ea6:	b711                	j	1c000daa <__adddf3+0xb6>
1c000ea8:	7ff00693          	li	a3,2047
1c000eac:	fff84813          	not	a6,a6
1c000eb0:	fcd70ae3          	beq	a4,a3,1c000e84 <__adddf3+0x190>
1c000eb4:	03800693          	li	a3,56
1c000eb8:	0706c963          	blt	a3,a6,1c000f2a <__adddf3+0x236>
1c000ebc:	46fd                	li	a3,31
1c000ebe:	0506c263          	blt	a3,a6,1c000f02 <__adddf3+0x20e>
1c000ec2:	02000893          	li	a7,32
1c000ec6:	410888b3          	sub	a7,a7,a6
1c000eca:	01055333          	srl	t1,a0,a6
1c000ece:	011796b3          	sll	a3,a5,a7
1c000ed2:	01151533          	sll	a0,a0,a7
1c000ed6:	0066e6b3          	or	a3,a3,t1
1c000eda:	00a03533          	snez	a0,a0
1c000ede:	8d55                	or	a0,a0,a3
1c000ee0:	0107d833          	srl	a6,a5,a6
1c000ee4:	9532                	add	a0,a0,a2
1c000ee6:	9876                	add	a6,a6,t4
1c000ee8:	00c537b3          	sltu	a5,a0,a2
1c000eec:	97c2                	add	a5,a5,a6
1c000eee:	bd75                	j	1c000daa <__adddf3+0xb6>
1c000ef0:	7ff00693          	li	a3,2047
1c000ef4:	f8d708e3          	beq	a4,a3,1c000e84 <__adddf3+0x190>
1c000ef8:	41000833          	neg	a6,a6
1c000efc:	c177c7b3          	p.bset	a5,a5,0,23
1c000f00:	bf55                	j	1c000eb4 <__adddf3+0x1c0>
1c000f02:	02000313          	li	t1,32
1c000f06:	0107d6b3          	srl	a3,a5,a6
1c000f0a:	4881                	li	a7,0
1c000f0c:	00680863          	beq	a6,t1,1c000f1c <__adddf3+0x228>
1c000f10:	04000893          	li	a7,64
1c000f14:	41088833          	sub	a6,a7,a6
1c000f18:	010798b3          	sll	a7,a5,a6
1c000f1c:	00a8e533          	or	a0,a7,a0
1c000f20:	00a03533          	snez	a0,a0
1c000f24:	8d55                	or	a0,a0,a3
1c000f26:	4801                	li	a6,0
1c000f28:	bf75                	j	1c000ee4 <__adddf3+0x1f0>
1c000f2a:	8d5d                	or	a0,a0,a5
1c000f2c:	00a03533          	snez	a0,a0
1c000f30:	bfdd                	j	1c000f26 <__adddf3+0x232>
1c000f32:	001e0713          	addi	a4,t3,1
1c000f36:	e8b73833          	p.bclr	a6,a4,20,11
1c000f3a:	4685                	li	a3,1
1c000f3c:	0706c763          	blt	a3,a6,1c000faa <__adddf3+0x2b6>
1c000f40:	00a7e733          	or	a4,a5,a0
1c000f44:	040e1663          	bnez	t3,1c000f90 <__adddf3+0x29c>
1c000f48:	36070c63          	beqz	a4,1c0012c0 <__adddf3+0x5cc>
1c000f4c:	00cee6b3          	or	a3,t4,a2
1c000f50:	4701                	li	a4,0
1c000f52:	c285                	beqz	a3,1c000f72 <__adddf3+0x27e>
1c000f54:	962a                	add	a2,a2,a0
1c000f56:	00a63533          	sltu	a0,a2,a0
1c000f5a:	01d78833          	add	a6,a5,t4
1c000f5e:	00a807b3          	add	a5,a6,a0
1c000f62:	00879693          	slli	a3,a5,0x8
1c000f66:	8532                	mv	a0,a2
1c000f68:	0006d563          	bgez	a3,1c000f72 <__adddf3+0x27e>
1c000f6c:	c177b7b3          	p.bclr	a5,a5,0,23
1c000f70:	4705                	li	a4,1
1c000f72:	f83536b3          	p.bclr	a3,a0,28,3
1c000f76:	dc0689e3          	beqz	a3,1c000d48 <__adddf3+0x54>
1c000f7a:	f64536b3          	p.bclr	a3,a0,27,4
1c000f7e:	dc46a5e3          	p.beqimm	a3,4,1c000d48 <__adddf3+0x54>
1c000f82:	00450693          	addi	a3,a0,4
1c000f86:	00a6b533          	sltu	a0,a3,a0
1c000f8a:	97aa                	add	a5,a5,a0
1c000f8c:	8536                	mv	a0,a3
1c000f8e:	bb6d                	j	1c000d48 <__adddf3+0x54>
1c000f90:	32070b63          	beqz	a4,1c0012c6 <__adddf3+0x5d2>
1c000f94:	00cee833          	or	a6,t4,a2
1c000f98:	e40807e3          	beqz	a6,1c000de6 <__adddf3+0xf2>
1c000f9c:	004007b7          	lui	a5,0x400
1c000fa0:	4501                	li	a0,0
1c000fa2:	7ff00713          	li	a4,2047
1c000fa6:	4581                	li	a1,0
1c000fa8:	b345                	j	1c000d48 <__adddf3+0x54>
1c000faa:	7ff00693          	li	a3,2047
1c000fae:	d8d70be3          	beq	a4,a3,1c000d44 <__adddf3+0x50>
1c000fb2:	962a                	add	a2,a2,a0
1c000fb4:	01d78833          	add	a6,a5,t4
1c000fb8:	00a637b3          	sltu	a5,a2,a0
1c000fbc:	983e                	add	a6,a6,a5
1c000fbe:	01f81513          	slli	a0,a6,0x1f
1c000fc2:	8205                	srli	a2,a2,0x1
1c000fc4:	8d51                	or	a0,a0,a2
1c000fc6:	00185793          	srli	a5,a6,0x1
1c000fca:	b765                	j	1c000f72 <__adddf3+0x27e>
1c000fcc:	0d005563          	blez	a6,1c001096 <__adddf3+0x3a2>
1c000fd0:	e351                	bnez	a4,1c001054 <__adddf3+0x360>
1c000fd2:	00cee733          	or	a4,t4,a2
1c000fd6:	d4070ee3          	beqz	a4,1c000d32 <__adddf3+0x3e>
1c000fda:	fff80693          	addi	a3,a6,-1
1c000fde:	e685                	bnez	a3,1c001006 <__adddf3+0x312>
1c000fe0:	40c50633          	sub	a2,a0,a2
1c000fe4:	00c53533          	sltu	a0,a0,a2
1c000fe8:	41d78833          	sub	a6,a5,t4
1c000fec:	40a807b3          	sub	a5,a6,a0
1c000ff0:	4705                	li	a4,1
1c000ff2:	8532                	mv	a0,a2
1c000ff4:	00879893          	slli	a7,a5,0x8
1c000ff8:	f608dde3          	bgez	a7,1c000f72 <__adddf3+0x27e>
1c000ffc:	d177b333          	p.bclr	t1,a5,8,23
1c001000:	8f2a                	mv	t5,a0
1c001002:	8e3a                	mv	t3,a4
1c001004:	a411                	j	1c001208 <__adddf3+0x514>
1c001006:	7ff00713          	li	a4,2047
1c00100a:	dce80ae3          	beq	a6,a4,1c000dde <__adddf3+0xea>
1c00100e:	03800713          	li	a4,56
1c001012:	06d74d63          	blt	a4,a3,1c00108c <__adddf3+0x398>
1c001016:	477d                	li	a4,31
1c001018:	04d74663          	blt	a4,a3,1c001064 <__adddf3+0x370>
1c00101c:	02000713          	li	a4,32
1c001020:	8f15                	sub	a4,a4,a3
1c001022:	00d658b3          	srl	a7,a2,a3
1c001026:	00ee9833          	sll	a6,t4,a4
1c00102a:	00e61633          	sll	a2,a2,a4
1c00102e:	01186833          	or	a6,a6,a7
1c001032:	00c03633          	snez	a2,a2
1c001036:	00c86833          	or	a6,a6,a2
1c00103a:	00ded6b3          	srl	a3,t4,a3
1c00103e:	41050833          	sub	a6,a0,a6
1c001042:	40d786b3          	sub	a3,a5,a3
1c001046:	010537b3          	sltu	a5,a0,a6
1c00104a:	40f687b3          	sub	a5,a3,a5
1c00104e:	8542                	mv	a0,a6
1c001050:	8772                	mv	a4,t3
1c001052:	b74d                	j	1c000ff4 <__adddf3+0x300>
1c001054:	7ff00713          	li	a4,2047
1c001058:	d8ee03e3          	beq	t3,a4,1c000dde <__adddf3+0xea>
1c00105c:	c17eceb3          	p.bset	t4,t4,0,23
1c001060:	86c2                	mv	a3,a6
1c001062:	b775                	j	1c00100e <__adddf3+0x31a>
1c001064:	02000893          	li	a7,32
1c001068:	00ded833          	srl	a6,t4,a3
1c00106c:	4701                	li	a4,0
1c00106e:	01168863          	beq	a3,a7,1c00107e <__adddf3+0x38a>
1c001072:	04000713          	li	a4,64
1c001076:	40d706b3          	sub	a3,a4,a3
1c00107a:	00de9733          	sll	a4,t4,a3
1c00107e:	8e59                	or	a2,a2,a4
1c001080:	00c03633          	snez	a2,a2
1c001084:	00c86833          	or	a6,a6,a2
1c001088:	4681                	li	a3,0
1c00108a:	bf55                	j	1c00103e <__adddf3+0x34a>
1c00108c:	00cee833          	or	a6,t4,a2
1c001090:	01003833          	snez	a6,a6
1c001094:	bfd5                	j	1c001088 <__adddf3+0x394>
1c001096:	0c080663          	beqz	a6,1c001162 <__adddf3+0x46e>
1c00109a:	080e1363          	bnez	t3,1c001120 <__adddf3+0x42c>
1c00109e:	00a7e5b3          	or	a1,a5,a0
1c0010a2:	ed81                	bnez	a1,1c0010ba <__adddf3+0x3c6>
1c0010a4:	7ff00793          	li	a5,2047
1c0010a8:	00f71663          	bne	a4,a5,1c0010b4 <__adddf3+0x3c0>
1c0010ac:	00cee533          	or	a0,t4,a2
1c0010b0:	22050363          	beqz	a0,1c0012d6 <__adddf3+0x5e2>
1c0010b4:	87f6                	mv	a5,t4
1c0010b6:	8532                	mv	a0,a2
1c0010b8:	a8c9                	j	1c00118a <__adddf3+0x496>
1c0010ba:	01f83c63          	p.bneimm	a6,-1,1c0010d2 <__adddf3+0x3de>
1c0010be:	40a60533          	sub	a0,a2,a0
1c0010c2:	40fe8833          	sub	a6,t4,a5
1c0010c6:	00a63633          	sltu	a2,a2,a0
1c0010ca:	40c807b3          	sub	a5,a6,a2
1c0010ce:	85b6                	mv	a1,a3
1c0010d0:	b715                	j	1c000ff4 <__adddf3+0x300>
1c0010d2:	7ff00593          	li	a1,2047
1c0010d6:	fff84813          	not	a6,a6
1c0010da:	fcb709e3          	beq	a4,a1,1c0010ac <__adddf3+0x3b8>
1c0010de:	03800593          	li	a1,56
1c0010e2:	0705cc63          	blt	a1,a6,1c00115a <__adddf3+0x466>
1c0010e6:	45fd                	li	a1,31
1c0010e8:	0505c563          	blt	a1,a6,1c001132 <__adddf3+0x43e>
1c0010ec:	02000893          	li	a7,32
1c0010f0:	410888b3          	sub	a7,a7,a6
1c0010f4:	01055333          	srl	t1,a0,a6
1c0010f8:	011795b3          	sll	a1,a5,a7
1c0010fc:	01151533          	sll	a0,a0,a7
1c001100:	0065e5b3          	or	a1,a1,t1
1c001104:	00a03533          	snez	a0,a0
1c001108:	8d4d                	or	a0,a0,a1
1c00110a:	0107d833          	srl	a6,a5,a6
1c00110e:	40a60533          	sub	a0,a2,a0
1c001112:	410e8833          	sub	a6,t4,a6
1c001116:	00a637b3          	sltu	a5,a2,a0
1c00111a:	40f807b3          	sub	a5,a6,a5
1c00111e:	bf45                	j	1c0010ce <__adddf3+0x3da>
1c001120:	7ff00593          	li	a1,2047
1c001124:	f8b704e3          	beq	a4,a1,1c0010ac <__adddf3+0x3b8>
1c001128:	41000833          	neg	a6,a6
1c00112c:	c177c7b3          	p.bset	a5,a5,0,23
1c001130:	b77d                	j	1c0010de <__adddf3+0x3ea>
1c001132:	02000313          	li	t1,32
1c001136:	0107d5b3          	srl	a1,a5,a6
1c00113a:	4881                	li	a7,0
1c00113c:	00680863          	beq	a6,t1,1c00114c <__adddf3+0x458>
1c001140:	04000893          	li	a7,64
1c001144:	41088833          	sub	a6,a7,a6
1c001148:	010798b3          	sll	a7,a5,a6
1c00114c:	00a8e533          	or	a0,a7,a0
1c001150:	00a03533          	snez	a0,a0
1c001154:	8d4d                	or	a0,a0,a1
1c001156:	4801                	li	a6,0
1c001158:	bf5d                	j	1c00110e <__adddf3+0x41a>
1c00115a:	8d5d                	or	a0,a0,a5
1c00115c:	00a03533          	snez	a0,a0
1c001160:	bfdd                	j	1c001156 <__adddf3+0x462>
1c001162:	001e0713          	addi	a4,t3,1
1c001166:	e8b73733          	p.bclr	a4,a4,20,11
1c00116a:	4805                	li	a6,1
1c00116c:	06e84963          	blt	a6,a4,1c0011de <__adddf3+0x4ea>
1c001170:	00a7e833          	or	a6,a5,a0
1c001174:	00cee733          	or	a4,t4,a2
1c001178:	040e1863          	bnez	t3,1c0011c8 <__adddf3+0x4d4>
1c00117c:	00081963          	bnez	a6,1c00118e <__adddf3+0x49a>
1c001180:	14070e63          	beqz	a4,1c0012dc <__adddf3+0x5e8>
1c001184:	87f6                	mv	a5,t4
1c001186:	8532                	mv	a0,a2
1c001188:	4701                	li	a4,0
1c00118a:	85b6                	mv	a1,a3
1c00118c:	b3dd                	j	1c000f72 <__adddf3+0x27e>
1c00118e:	cb1d                	beqz	a4,1c0011c4 <__adddf3+0x4d0>
1c001190:	40c50833          	sub	a6,a0,a2
1c001194:	010538b3          	sltu	a7,a0,a6
1c001198:	41d78733          	sub	a4,a5,t4
1c00119c:	41170733          	sub	a4,a4,a7
1c0011a0:	00871893          	slli	a7,a4,0x8
1c0011a4:	0008db63          	bgez	a7,1c0011ba <__adddf3+0x4c6>
1c0011a8:	40a60533          	sub	a0,a2,a0
1c0011ac:	40fe8833          	sub	a6,t4,a5
1c0011b0:	00a63633          	sltu	a2,a2,a0
1c0011b4:	40c807b3          	sub	a5,a6,a2
1c0011b8:	bfc1                	j	1c001188 <__adddf3+0x494>
1c0011ba:	00e86533          	or	a0,a6,a4
1c0011be:	c94d                	beqz	a0,1c001270 <__adddf3+0x57c>
1c0011c0:	87ba                	mv	a5,a4
1c0011c2:	8542                	mv	a0,a6
1c0011c4:	4701                	li	a4,0
1c0011c6:	b375                	j	1c000f72 <__adddf3+0x27e>
1c0011c8:	00081863          	bnez	a6,1c0011d8 <__adddf3+0x4e4>
1c0011cc:	10070c63          	beqz	a4,1c0012e4 <__adddf3+0x5f0>
1c0011d0:	87f6                	mv	a5,t4
1c0011d2:	8532                	mv	a0,a2
1c0011d4:	85b6                	mv	a1,a3
1c0011d6:	b901                	j	1c000de6 <__adddf3+0xf2>
1c0011d8:	c00707e3          	beqz	a4,1c000de6 <__adddf3+0xf2>
1c0011dc:	b3c1                	j	1c000f9c <__adddf3+0x2a8>
1c0011de:	40c50f33          	sub	t5,a0,a2
1c0011e2:	41d78333          	sub	t1,a5,t4
1c0011e6:	01e53833          	sltu	a6,a0,t5
1c0011ea:	41030333          	sub	t1,t1,a6
1c0011ee:	00831713          	slli	a4,t1,0x8
1c0011f2:	06075c63          	bgez	a4,1c00126a <__adddf3+0x576>
1c0011f6:	40a60f33          	sub	t5,a2,a0
1c0011fa:	40fe8833          	sub	a6,t4,a5
1c0011fe:	01e637b3          	sltu	a5,a2,t5
1c001202:	40f80333          	sub	t1,a6,a5
1c001206:	85b6                	mv	a1,a3
1c001208:	06030663          	beqz	t1,1c001274 <__adddf3+0x580>
1c00120c:	100316b3          	p.fl1	a3,t1
1c001210:	47fd                	li	a5,31
1c001212:	40d786b3          	sub	a3,a5,a3
1c001216:	ff868713          	addi	a4,a3,-8
1c00121a:	47fd                	li	a5,31
1c00121c:	06e7c463          	blt	a5,a4,1c001284 <__adddf3+0x590>
1c001220:	02000793          	li	a5,32
1c001224:	8f99                	sub	a5,a5,a4
1c001226:	00e31333          	sll	t1,t1,a4
1c00122a:	00ff57b3          	srl	a5,t5,a5
1c00122e:	0067e7b3          	or	a5,a5,t1
1c001232:	00ef1533          	sll	a0,t5,a4
1c001236:	09c74063          	blt	a4,t3,1c0012b6 <__adddf3+0x5c2>
1c00123a:	41c70733          	sub	a4,a4,t3
1c00123e:	00170613          	addi	a2,a4,1 # 10001 <__L1Cl+0x1>
1c001242:	46fd                	li	a3,31
1c001244:	04c6c663          	blt	a3,a2,1c001290 <__adddf3+0x59c>
1c001248:	02000713          	li	a4,32
1c00124c:	8f11                	sub	a4,a4,a2
1c00124e:	00e796b3          	sll	a3,a5,a4
1c001252:	00c55833          	srl	a6,a0,a2
1c001256:	00e51533          	sll	a0,a0,a4
1c00125a:	0106e6b3          	or	a3,a3,a6
1c00125e:	00a03533          	snez	a0,a0
1c001262:	8d55                	or	a0,a0,a3
1c001264:	00c7d7b3          	srl	a5,a5,a2
1c001268:	bfb1                	j	1c0011c4 <__adddf3+0x4d0>
1c00126a:	006f6533          	or	a0,t5,t1
1c00126e:	fd49                	bnez	a0,1c001208 <__adddf3+0x514>
1c001270:	4781                	li	a5,0
1c001272:	a0bd                	j	1c0012e0 <__adddf3+0x5ec>
1c001274:	100f16b3          	p.fl1	a3,t5
1c001278:	47fd                	li	a5,31
1c00127a:	40d786b3          	sub	a3,a5,a3
1c00127e:	02068693          	addi	a3,a3,32
1c001282:	bf51                	j	1c001216 <__adddf3+0x522>
1c001284:	fd868793          	addi	a5,a3,-40
1c001288:	00ff17b3          	sll	a5,t5,a5
1c00128c:	4501                	li	a0,0
1c00128e:	b765                	j	1c001236 <__adddf3+0x542>
1c001290:	1705                	addi	a4,a4,-31
1c001292:	02000813          	li	a6,32
1c001296:	00e7d733          	srl	a4,a5,a4
1c00129a:	4681                	li	a3,0
1c00129c:	01060763          	beq	a2,a6,1c0012aa <__adddf3+0x5b6>
1c0012a0:	04000693          	li	a3,64
1c0012a4:	8e91                	sub	a3,a3,a2
1c0012a6:	00d796b3          	sll	a3,a5,a3
1c0012aa:	8d55                	or	a0,a0,a3
1c0012ac:	00a03533          	snez	a0,a0
1c0012b0:	8d59                	or	a0,a0,a4
1c0012b2:	4781                	li	a5,0
1c0012b4:	bf01                	j	1c0011c4 <__adddf3+0x4d0>
1c0012b6:	40ee0733          	sub	a4,t3,a4
1c0012ba:	c177b7b3          	p.bclr	a5,a5,0,23
1c0012be:	b955                	j	1c000f72 <__adddf3+0x27e>
1c0012c0:	87f6                	mv	a5,t4
1c0012c2:	8532                	mv	a0,a2
1c0012c4:	b701                	j	1c0011c4 <__adddf3+0x4d0>
1c0012c6:	87f6                	mv	a5,t4
1c0012c8:	8532                	mv	a0,a2
1c0012ca:	be31                	j	1c000de6 <__adddf3+0xf2>
1c0012cc:	4781                	li	a5,0
1c0012ce:	4501                	li	a0,0
1c0012d0:	7ff00713          	li	a4,2047
1c0012d4:	bc95                	j	1c000d48 <__adddf3+0x54>
1c0012d6:	4781                	li	a5,0
1c0012d8:	85b6                	mv	a1,a3
1c0012da:	b4bd                	j	1c000d48 <__adddf3+0x54>
1c0012dc:	4781                	li	a5,0
1c0012de:	4501                	li	a0,0
1c0012e0:	4701                	li	a4,0
1c0012e2:	b1d1                	j	1c000fa6 <__adddf3+0x2b2>
1c0012e4:	4501                	li	a0,0
1c0012e6:	004007b7          	lui	a5,0x400
1c0012ea:	b965                	j	1c000fa2 <__adddf3+0x2ae>
1c0012ec:	4781                	li	a5,0
1c0012ee:	4501                	li	a0,0
1c0012f0:	b4bd                	j	1c000d5e <__adddf3+0x6a>

1c0012f2 <__muldf3>:
1c0012f2:	1101                	addi	sp,sp,-32
1c0012f4:	d5459333          	p.extractu	t1,a1,10,20
1c0012f8:	ce22                	sw	s0,28(sp)
1c0012fa:	cc26                	sw	s1,24(sp)
1c0012fc:	ca4a                	sw	s2,20(sp)
1c0012fe:	c84e                	sw	s3,16(sp)
1c001300:	c652                	sw	s4,12(sp)
1c001302:	e60597b3          	p.extractu	a5,a1,19,0
1c001306:	81fd                	srli	a1,a1,0x1f
1c001308:	06030e63          	beqz	t1,1c001384 <__muldf3+0x92>
1c00130c:	7ff00713          	li	a4,2047
1c001310:	0ce30963          	beq	t1,a4,1c0013e2 <__muldf3+0xf0>
1c001314:	078e                	slli	a5,a5,0x3
1c001316:	c177c7b3          	p.bset	a5,a5,0,23
1c00131a:	01d55813          	srli	a6,a0,0x1d
1c00131e:	00f86833          	or	a6,a6,a5
1c001322:	00351e93          	slli	t4,a0,0x3
1c001326:	c0130313          	addi	t1,t1,-1023
1c00132a:	4f01                	li	t5,0
1c00132c:	d54698b3          	p.extractu	a7,a3,10,20
1c001330:	e6069533          	p.extractu	a0,a3,19,0
1c001334:	8732                	mv	a4,a2
1c001336:	82fd                	srli	a3,a3,0x1f
1c001338:	0c088863          	beqz	a7,1c001408 <__muldf3+0x116>
1c00133c:	7ff00793          	li	a5,2047
1c001340:	12f88163          	beq	a7,a5,1c001462 <__muldf3+0x170>
1c001344:	050e                	slli	a0,a0,0x3
1c001346:	01d65793          	srli	a5,a2,0x1d
1c00134a:	c1754533          	p.bset	a0,a0,0,23
1c00134e:	00361713          	slli	a4,a2,0x3
1c001352:	8fc9                	or	a5,a5,a0
1c001354:	c0188613          	addi	a2,a7,-1023
1c001358:	4e01                	li	t3,0
1c00135a:	9332                	add	t1,t1,a2
1c00135c:	002f1613          	slli	a2,t5,0x2
1c001360:	01c66633          	or	a2,a2,t3
1c001364:	167d                	addi	a2,a2,-1
1c001366:	4fb9                	li	t6,14
1c001368:	00d5c533          	xor	a0,a1,a3
1c00136c:	00130893          	addi	a7,t1,1
1c001370:	10cfea63          	bltu	t6,a2,1c001484 <__muldf3+0x192>
1c001374:	1c010337          	lui	t1,0x1c010
1c001378:	060a                	slli	a2,a2,0x2
1c00137a:	df830313          	addi	t1,t1,-520 # 1c00fdf8 <__DTOR_END__+0x4>
1c00137e:	20c37603          	p.lw	a2,a2(t1)
1c001382:	8602                	jr	a2
1c001384:	00a7e833          	or	a6,a5,a0
1c001388:	06080763          	beqz	a6,1c0013f6 <__muldf3+0x104>
1c00138c:	cf8d                	beqz	a5,1c0013c6 <__muldf3+0xd4>
1c00138e:	10079733          	p.fl1	a4,a5
1c001392:	487d                	li	a6,31
1c001394:	40e80733          	sub	a4,a6,a4
1c001398:	ff570893          	addi	a7,a4,-11
1c00139c:	4871                	li	a6,28
1c00139e:	03184c63          	blt	a6,a7,1c0013d6 <__muldf3+0xe4>
1c0013a2:	4875                	li	a6,29
1c0013a4:	ff870e93          	addi	t4,a4,-8
1c0013a8:	41180833          	sub	a6,a6,a7
1c0013ac:	01d797b3          	sll	a5,a5,t4
1c0013b0:	01055833          	srl	a6,a0,a6
1c0013b4:	00f86833          	or	a6,a6,a5
1c0013b8:	01d51eb3          	sll	t4,a0,t4
1c0013bc:	c0d00313          	li	t1,-1011
1c0013c0:	40e30333          	sub	t1,t1,a4
1c0013c4:	b79d                	j	1c00132a <__muldf3+0x38>
1c0013c6:	477d                	li	a4,31
1c0013c8:	10051333          	p.fl1	t1,a0
1c0013cc:	40670333          	sub	t1,a4,t1
1c0013d0:	02030713          	addi	a4,t1,32
1c0013d4:	b7d1                	j	1c001398 <__muldf3+0xa6>
1c0013d6:	fd870813          	addi	a6,a4,-40
1c0013da:	01051833          	sll	a6,a0,a6
1c0013de:	4e81                	li	t4,0
1c0013e0:	bff1                	j	1c0013bc <__muldf3+0xca>
1c0013e2:	00a7e833          	or	a6,a5,a0
1c0013e6:	00080c63          	beqz	a6,1c0013fe <__muldf3+0x10c>
1c0013ea:	8eaa                	mv	t4,a0
1c0013ec:	883e                	mv	a6,a5
1c0013ee:	7ff00313          	li	t1,2047
1c0013f2:	4f0d                	li	t5,3
1c0013f4:	bf25                	j	1c00132c <__muldf3+0x3a>
1c0013f6:	4e81                	li	t4,0
1c0013f8:	4301                	li	t1,0
1c0013fa:	4f05                	li	t5,1
1c0013fc:	bf05                	j	1c00132c <__muldf3+0x3a>
1c0013fe:	4e81                	li	t4,0
1c001400:	7ff00313          	li	t1,2047
1c001404:	4f09                	li	t5,2
1c001406:	b71d                	j	1c00132c <__muldf3+0x3a>
1c001408:	00c567b3          	or	a5,a0,a2
1c00140c:	c3bd                	beqz	a5,1c001472 <__muldf3+0x180>
1c00140e:	cd05                	beqz	a0,1c001446 <__muldf3+0x154>
1c001410:	100518b3          	p.fl1	a7,a0
1c001414:	47fd                	li	a5,31
1c001416:	411788b3          	sub	a7,a5,a7
1c00141a:	ff588e13          	addi	t3,a7,-11
1c00141e:	47f1                	li	a5,28
1c001420:	03c7cb63          	blt	a5,t3,1c001456 <__muldf3+0x164>
1c001424:	47f5                	li	a5,29
1c001426:	ff888713          	addi	a4,a7,-8
1c00142a:	41c787b3          	sub	a5,a5,t3
1c00142e:	00e51533          	sll	a0,a0,a4
1c001432:	00f657b3          	srl	a5,a2,a5
1c001436:	8fc9                	or	a5,a5,a0
1c001438:	00e61733          	sll	a4,a2,a4
1c00143c:	c0d00613          	li	a2,-1011
1c001440:	41160633          	sub	a2,a2,a7
1c001444:	bf11                	j	1c001358 <__muldf3+0x66>
1c001446:	100618b3          	p.fl1	a7,a2
1c00144a:	47fd                	li	a5,31
1c00144c:	411788b3          	sub	a7,a5,a7
1c001450:	02088893          	addi	a7,a7,32
1c001454:	b7d9                	j	1c00141a <__muldf3+0x128>
1c001456:	fd888793          	addi	a5,a7,-40
1c00145a:	00f617b3          	sll	a5,a2,a5
1c00145e:	4701                	li	a4,0
1c001460:	bff1                	j	1c00143c <__muldf3+0x14a>
1c001462:	00c567b3          	or	a5,a0,a2
1c001466:	cb91                	beqz	a5,1c00147a <__muldf3+0x188>
1c001468:	87aa                	mv	a5,a0
1c00146a:	7ff00613          	li	a2,2047
1c00146e:	4e0d                	li	t3,3
1c001470:	b5ed                	j	1c00135a <__muldf3+0x68>
1c001472:	4701                	li	a4,0
1c001474:	4601                	li	a2,0
1c001476:	4e05                	li	t3,1
1c001478:	b5cd                	j	1c00135a <__muldf3+0x68>
1c00147a:	4701                	li	a4,0
1c00147c:	7ff00613          	li	a2,2047
1c001480:	4e09                	li	t3,2
1c001482:	bde1                	j	1c00135a <__muldf3+0x68>
1c001484:	6e41                	lui	t3,0x10
1c001486:	fffe0293          	addi	t0,t3,-1 # ffff <__l1_heap_size+0x43>
1c00148a:	010ed693          	srli	a3,t4,0x10
1c00148e:	01075913          	srli	s2,a4,0x10
1c001492:	00577733          	and	a4,a4,t0
1c001496:	02e68fb3          	mul	t6,a3,a4
1c00149a:	005ef633          	and	a2,t4,t0
1c00149e:	02e60f33          	mul	t5,a2,a4
1c0014a2:	8efe                	mv	t4,t6
1c0014a4:	42c90eb3          	p.mac	t4,s2,a2
1c0014a8:	010f5593          	srli	a1,t5,0x10
1c0014ac:	95f6                	add	a1,a1,t4
1c0014ae:	032684b3          	mul	s1,a3,s2
1c0014b2:	01f5f363          	bleu	t6,a1,1c0014b8 <__muldf3+0x1c6>
1c0014b6:	94f2                	add	s1,s1,t3
1c0014b8:	0105de13          	srli	t3,a1,0x10
1c0014bc:	0055f5b3          	and	a1,a1,t0
1c0014c0:	005f7f33          	and	t5,t5,t0
1c0014c4:	05c2                	slli	a1,a1,0x10
1c0014c6:	0057f2b3          	and	t0,a5,t0
1c0014ca:	01e58eb3          	add	t4,a1,t5
1c0014ce:	0107d393          	srli	t2,a5,0x10
1c0014d2:	02568f33          	mul	t5,a3,t0
1c0014d6:	85fa                	mv	a1,t5
1c0014d8:	02c287b3          	mul	a5,t0,a2
1c0014dc:	42c385b3          	p.mac	a1,t2,a2
1c0014e0:	862e                	mv	a2,a1
1c0014e2:	0107d593          	srli	a1,a5,0x10
1c0014e6:	95b2                	add	a1,a1,a2
1c0014e8:	027686b3          	mul	a3,a3,t2
1c0014ec:	01e5f463          	bleu	t5,a1,1c0014f4 <__muldf3+0x202>
1c0014f0:	6641                	lui	a2,0x10
1c0014f2:	96b2                	add	a3,a3,a2
1c0014f4:	6441                	lui	s0,0x10
1c0014f6:	fff40f93          	addi	t6,s0,-1 # ffff <__l1_heap_size+0x43>
1c0014fa:	0105d613          	srli	a2,a1,0x10
1c0014fe:	01085f13          	srli	t5,a6,0x10
1c001502:	01f5f5b3          	and	a1,a1,t6
1c001506:	9636                	add	a2,a2,a3
1c001508:	01f7f6b3          	and	a3,a5,t6
1c00150c:	01f87fb3          	and	t6,a6,t6
1c001510:	02ef89b3          	mul	s3,t6,a4
1c001514:	05c2                	slli	a1,a1,0x10
1c001516:	96ae                	add	a3,a3,a1
1c001518:	00de0a33          	add	s4,t3,a3
1c00151c:	02ef0733          	mul	a4,t5,a4
1c001520:	0109de13          	srli	t3,s3,0x10
1c001524:	883a                	mv	a6,a4
1c001526:	43f90833          	p.mac	a6,s2,t6
1c00152a:	9e42                	add	t3,t3,a6
1c00152c:	03e907b3          	mul	a5,s2,t5
1c001530:	00ee7363          	bleu	a4,t3,1c001536 <__muldf3+0x244>
1c001534:	97a2                	add	a5,a5,s0
1c001536:	010e5413          	srli	s0,t3,0x10
1c00153a:	6741                	lui	a4,0x10
1c00153c:	943e                	add	s0,s0,a5
1c00153e:	fff70793          	addi	a5,a4,-1 # ffff <__l1_heap_size+0x43>
1c001542:	00fe7833          	and	a6,t3,a5
1c001546:	00f9f9b3          	and	s3,s3,a5
1c00154a:	0842                	slli	a6,a6,0x10
1c00154c:	025f8933          	mul	s2,t6,t0
1c001550:	984e                	add	a6,a6,s3
1c001552:	025f02b3          	mul	t0,t5,t0
1c001556:	8796                	mv	a5,t0
1c001558:	43f387b3          	p.mac	a5,t2,t6
1c00155c:	03e38f33          	mul	t5,t2,t5
1c001560:	01095393          	srli	t2,s2,0x10
1c001564:	93be                	add	t2,t2,a5
1c001566:	0053f363          	bleu	t0,t2,1c00156c <__muldf3+0x27a>
1c00156a:	9f3a                	add	t5,t5,a4
1c00156c:	01448e33          	add	t3,s1,s4
1c001570:	00de3733          	sltu	a4,t3,a3
1c001574:	66c1                	lui	a3,0x10
1c001576:	16fd                	addi	a3,a3,-1
1c001578:	00d3f5b3          	and	a1,t2,a3
1c00157c:	05c2                	slli	a1,a1,0x10
1c00157e:	00d976b3          	and	a3,s2,a3
1c001582:	95b6                	add	a1,a1,a3
1c001584:	00c586b3          	add	a3,a1,a2
1c001588:	00e687b3          	add	a5,a3,a4
1c00158c:	00c6b6b3          	sltu	a3,a3,a2
1c001590:	8636                	mv	a2,a3
1c001592:	00e7b6b3          	sltu	a3,a5,a4
1c001596:	9e42                	add	t3,t3,a6
1c001598:	8ed1                	or	a3,a3,a2
1c00159a:	008785b3          	add	a1,a5,s0
1c00159e:	010e3833          	sltu	a6,t3,a6
1c0015a2:	0103d793          	srli	a5,t2,0x10
1c0015a6:	0ff6f693          	andi	a3,a3,255
1c0015aa:	01058fb3          	add	t6,a1,a6
1c0015ae:	96be                	add	a3,a3,a5
1c0015b0:	0085b7b3          	sltu	a5,a1,s0
1c0015b4:	85be                	mv	a1,a5
1c0015b6:	010fb7b3          	sltu	a5,t6,a6
1c0015ba:	8fcd                	or	a5,a5,a1
1c0015bc:	0ff7f793          	andi	a5,a5,255
1c0015c0:	97b6                	add	a5,a5,a3
1c0015c2:	97fa                	add	a5,a5,t5
1c0015c4:	017fd713          	srli	a4,t6,0x17
1c0015c8:	07a6                	slli	a5,a5,0x9
1c0015ca:	8fd9                	or	a5,a5,a4
1c0015cc:	009e1713          	slli	a4,t3,0x9
1c0015d0:	01d76733          	or	a4,a4,t4
1c0015d4:	00e03733          	snez	a4,a4
1c0015d8:	017e5e13          	srli	t3,t3,0x17
1c0015dc:	01c76733          	or	a4,a4,t3
1c0015e0:	0fa6                	slli	t6,t6,0x9
1c0015e2:	00779693          	slli	a3,a5,0x7
1c0015e6:	01f76733          	or	a4,a4,t6
1c0015ea:	0806dd63          	bgez	a3,1c001684 <__muldf3+0x392>
1c0015ee:	00175693          	srli	a3,a4,0x1
1c0015f2:	fc173733          	p.bclr	a4,a4,30,1
1c0015f6:	8f55                	or	a4,a4,a3
1c0015f8:	01f79693          	slli	a3,a5,0x1f
1c0015fc:	8f55                	or	a4,a4,a3
1c0015fe:	8385                	srli	a5,a5,0x1
1c001600:	3ff88613          	addi	a2,a7,1023
1c001604:	08c05263          	blez	a2,1c001688 <__muldf3+0x396>
1c001608:	f83736b3          	p.bclr	a3,a4,28,3
1c00160c:	ca99                	beqz	a3,1c001622 <__muldf3+0x330>
1c00160e:	f64736b3          	p.bclr	a3,a4,27,4
1c001612:	0046a863          	p.beqimm	a3,4,1c001622 <__muldf3+0x330>
1c001616:	00470693          	addi	a3,a4,4
1c00161a:	00e6b733          	sltu	a4,a3,a4
1c00161e:	97ba                	add	a5,a5,a4
1c001620:	8736                	mv	a4,a3
1c001622:	00779593          	slli	a1,a5,0x7
1c001626:	0005d663          	bgez	a1,1c001632 <__muldf3+0x340>
1c00162a:	c187b7b3          	p.bclr	a5,a5,0,24
1c00162e:	40088613          	addi	a2,a7,1024
1c001632:	7fe00693          	li	a3,2046
1c001636:	0ec6c263          	blt	a3,a2,1c00171a <__muldf3+0x428>
1c00163a:	00375693          	srli	a3,a4,0x3
1c00163e:	01d79713          	slli	a4,a5,0x1d
1c001642:	8f55                	or	a4,a4,a3
1c001644:	838d                	srli	a5,a5,0x3
1c001646:	4681                	li	a3,0
1c001648:	4472                	lw	s0,28(sp)
1c00164a:	e607a6b3          	p.insert	a3,a5,19,0
1c00164e:	d54626b3          	p.insert	a3,a2,10,20
1c001652:	c1f526b3          	p.insert	a3,a0,0,31
1c001656:	44e2                	lw	s1,24(sp)
1c001658:	4952                	lw	s2,20(sp)
1c00165a:	49c2                	lw	s3,16(sp)
1c00165c:	4a32                	lw	s4,12(sp)
1c00165e:	853a                	mv	a0,a4
1c001660:	85b6                	mv	a1,a3
1c001662:	6105                	addi	sp,sp,32
1c001664:	8082                	ret
1c001666:	852e                	mv	a0,a1
1c001668:	87c2                	mv	a5,a6
1c00166a:	8776                	mv	a4,t4
1c00166c:	8e7a                	mv	t3,t5
1c00166e:	0a2e2663          	p.beqimm	t3,2,1c00171a <__muldf3+0x428>
1c001672:	083e2d63          	p.beqimm	t3,3,1c00170c <__muldf3+0x41a>
1c001676:	f81e35e3          	p.bneimm	t3,1,1c001600 <__muldf3+0x30e>
1c00167a:	4781                	li	a5,0
1c00167c:	4701                	li	a4,0
1c00167e:	a095                	j	1c0016e2 <__muldf3+0x3f0>
1c001680:	8536                	mv	a0,a3
1c001682:	b7f5                	j	1c00166e <__muldf3+0x37c>
1c001684:	889a                	mv	a7,t1
1c001686:	bfad                	j	1c001600 <__muldf3+0x30e>
1c001688:	4585                	li	a1,1
1c00168a:	8d91                	sub	a1,a1,a2
1c00168c:	03800693          	li	a3,56
1c001690:	feb6c5e3          	blt	a3,a1,1c00167a <__muldf3+0x388>
1c001694:	46fd                	li	a3,31
1c001696:	04b6c863          	blt	a3,a1,1c0016e6 <__muldf3+0x3f4>
1c00169a:	41e88893          	addi	a7,a7,1054
1c00169e:	011796b3          	sll	a3,a5,a7
1c0016a2:	00b75633          	srl	a2,a4,a1
1c0016a6:	01171733          	sll	a4,a4,a7
1c0016aa:	8ed1                	or	a3,a3,a2
1c0016ac:	00e03733          	snez	a4,a4
1c0016b0:	8f55                	or	a4,a4,a3
1c0016b2:	00b7d7b3          	srl	a5,a5,a1
1c0016b6:	f83736b3          	p.bclr	a3,a4,28,3
1c0016ba:	ca99                	beqz	a3,1c0016d0 <__muldf3+0x3de>
1c0016bc:	f64736b3          	p.bclr	a3,a4,27,4
1c0016c0:	0046a863          	p.beqimm	a3,4,1c0016d0 <__muldf3+0x3de>
1c0016c4:	00470693          	addi	a3,a4,4
1c0016c8:	00e6b733          	sltu	a4,a3,a4
1c0016cc:	97ba                	add	a5,a5,a4
1c0016ce:	8736                	mv	a4,a3
1c0016d0:	00879693          	slli	a3,a5,0x8
1c0016d4:	0406c863          	bltz	a3,1c001724 <__muldf3+0x432>
1c0016d8:	01d79693          	slli	a3,a5,0x1d
1c0016dc:	830d                	srli	a4,a4,0x3
1c0016de:	8f55                	or	a4,a4,a3
1c0016e0:	838d                	srli	a5,a5,0x3
1c0016e2:	4601                	li	a2,0
1c0016e4:	b78d                	j	1c001646 <__muldf3+0x354>
1c0016e6:	5685                	li	a3,-31
1c0016e8:	8e91                	sub	a3,a3,a2
1c0016ea:	02000813          	li	a6,32
1c0016ee:	00d7d6b3          	srl	a3,a5,a3
1c0016f2:	4601                	li	a2,0
1c0016f4:	01058663          	beq	a1,a6,1c001700 <__muldf3+0x40e>
1c0016f8:	43e88893          	addi	a7,a7,1086
1c0016fc:	01179633          	sll	a2,a5,a7
1c001700:	8f51                	or	a4,a4,a2
1c001702:	00e03733          	snez	a4,a4
1c001706:	8f55                	or	a4,a4,a3
1c001708:	4781                	li	a5,0
1c00170a:	b775                	j	1c0016b6 <__muldf3+0x3c4>
1c00170c:	000807b7          	lui	a5,0x80
1c001710:	4701                	li	a4,0
1c001712:	7ff00613          	li	a2,2047
1c001716:	4501                	li	a0,0
1c001718:	b73d                	j	1c001646 <__muldf3+0x354>
1c00171a:	4781                	li	a5,0
1c00171c:	4701                	li	a4,0
1c00171e:	7ff00613          	li	a2,2047
1c001722:	b715                	j	1c001646 <__muldf3+0x354>
1c001724:	4781                	li	a5,0
1c001726:	4701                	li	a4,0
1c001728:	4605                	li	a2,1
1c00172a:	bf31                	j	1c001646 <__muldf3+0x354>

1c00172c <__fixunsdfsi>:
1c00172c:	d5459733          	p.extractu	a4,a1,10,20
1c001730:	3fe00693          	li	a3,1022
1c001734:	862a                	mv	a2,a0
1c001736:	e60597b3          	p.extractu	a5,a1,19,0
1c00173a:	4501                	li	a0,0
1c00173c:	81fd                	srli	a1,a1,0x1f
1c00173e:	02e6df63          	ble	a4,a3,1c00177c <__fixunsdfsi+0x50>
1c001742:	e591                	bnez	a1,1c00174e <__fixunsdfsi+0x22>
1c001744:	41e00693          	li	a3,1054
1c001748:	557d                	li	a0,-1
1c00174a:	00e6d363          	ble	a4,a3,1c001750 <__fixunsdfsi+0x24>
1c00174e:	8082                	ret
1c001750:	43300693          	li	a3,1075
1c001754:	8e99                	sub	a3,a3,a4
1c001756:	45fd                	li	a1,31
1c001758:	c147c7b3          	p.bset	a5,a5,0,20
1c00175c:	00d5ca63          	blt	a1,a3,1c001770 <__fixunsdfsi+0x44>
1c001760:	bed70713          	addi	a4,a4,-1043
1c001764:	00e797b3          	sll	a5,a5,a4
1c001768:	00d65533          	srl	a0,a2,a3
1c00176c:	8d5d                	or	a0,a0,a5
1c00176e:	8082                	ret
1c001770:	41300513          	li	a0,1043
1c001774:	8d19                	sub	a0,a0,a4
1c001776:	00a7d533          	srl	a0,a5,a0
1c00177a:	8082                	ret
1c00177c:	8082                	ret

1c00177e <__floatsidf>:
1c00177e:	c539                	beqz	a0,1c0017cc <__floatsidf+0x4e>
1c001780:	01f55613          	srli	a2,a0,0x1f
1c001784:	00055463          	bgez	a0,1c00178c <__floatsidf+0xe>
1c001788:	40a00533          	neg	a0,a0
1c00178c:	477d                	li	a4,31
1c00178e:	100517b3          	p.fl1	a5,a0
1c001792:	40f707b3          	sub	a5,a4,a5
1c001796:	41e00693          	li	a3,1054
1c00179a:	4729                	li	a4,10
1c00179c:	8e9d                	sub	a3,a3,a5
1c00179e:	02f74263          	blt	a4,a5,1c0017c2 <__floatsidf+0x44>
1c0017a2:	472d                	li	a4,11
1c0017a4:	8f1d                	sub	a4,a4,a5
1c0017a6:	07d5                	addi	a5,a5,21
1c0017a8:	00e55733          	srl	a4,a0,a4
1c0017ac:	00f51533          	sll	a0,a0,a5
1c0017b0:	4781                	li	a5,0
1c0017b2:	e60727b3          	p.insert	a5,a4,19,0
1c0017b6:	d546a7b3          	p.insert	a5,a3,10,20
1c0017ba:	c1f627b3          	p.insert	a5,a2,0,31
1c0017be:	85be                	mv	a1,a5
1c0017c0:	8082                	ret
1c0017c2:	17d5                	addi	a5,a5,-11
1c0017c4:	00f51733          	sll	a4,a0,a5
1c0017c8:	4501                	li	a0,0
1c0017ca:	b7dd                	j	1c0017b0 <__floatsidf+0x32>
1c0017cc:	4701                	li	a4,0
1c0017ce:	4501                	li	a0,0
1c0017d0:	4681                	li	a3,0
1c0017d2:	4601                	li	a2,0
1c0017d4:	bff1                	j	1c0017b0 <__floatsidf+0x32>

1c0017d6 <cluster>:
                

            }
        }
    }
}
1c0017d6:	1141                	addi	sp,sp,-16
1c0017d8:	c606                	sw	ra,12(sp)
1c0017da:	c422                	sw	s0,8(sp)
1c0017dc:	c226                	sw	s1,4(sp)
1c0017de:	1c010437          	lui	s0,0x1c010
1c0017e2:	7b440413          	addi	s0,s0,1972 # 1c0107b4 <ResOut>
1c0017e6:	400c                	lw	a1,0(s0)
1c0017e8:	4048                	lw	a0,4(s0)
1c0017ea:	5c7040ef          	jal	ra,1c0065b0 <modelCNN>
1c0017ee:	1c0107b7          	lui	a5,0x1c010
1c0017f2:	7a079023          	sh	zero,1952(a5) # 1c0107a0 <rec_digit>
1c0017f6:	401c                	lw	a5,0(s0)
1c0017f8:	00079483          	lh	s1,0(a5)
1c0017fc:	8626                	mv	a2,s1
1c0017fe:	4581                	li	a1,0
1c001800:	1c010537          	lui	a0,0x1c010
1c001804:	f3450513          	addi	a0,a0,-204 # 1c00ff34 <__clz_tab+0x100>
1c001808:	4ba0d0ef          	jal	ra,1c00ecc2 <printf>
1c00180c:	401c                	lw	a5,0(s0)
1c00180e:	00079703          	lh	a4,0(a5)
1c001812:	00e4d763          	ble	a4,s1,1c001820 <cluster+0x4a>
1c001816:	1c0106b7          	lui	a3,0x1c010
1c00181a:	7a069023          	sh	zero,1952(a3) # 1c0107a0 <rec_digit>
1c00181e:	84ba                	mv	s1,a4
1c001820:	00279603          	lh	a2,2(a5)
1c001824:	4585                	li	a1,1
1c001826:	1c010537          	lui	a0,0x1c010
1c00182a:	f3450513          	addi	a0,a0,-204 # 1c00ff34 <__clz_tab+0x100>
1c00182e:	4940d0ef          	jal	ra,1c00ecc2 <printf>
1c001832:	1c0107b7          	lui	a5,0x1c010
1c001836:	7b47a783          	lw	a5,1972(a5) # 1c0107b4 <ResOut>
1c00183a:	00279783          	lh	a5,2(a5)
1c00183e:	00f4d763          	ble	a5,s1,1c00184c <cluster+0x76>
1c001842:	1c0107b7          	lui	a5,0x1c010
1c001846:	4705                	li	a4,1
1c001848:	7ae79023          	sh	a4,1952(a5) # 1c0107a0 <rec_digit>
1c00184c:	4529                	li	a0,10
1c00184e:	3540d0ef          	jal	ra,1c00eba2 <putchar>
1c001852:	1c0107b7          	lui	a5,0x1c010
1c001856:	7a079783          	lh	a5,1952(a5) # 1c0107a0 <rec_digit>
1c00185a:	cf85                	beqz	a5,1c001892 <cluster+0xbc>
1c00185c:	1c0107b7          	lui	a5,0x1c010
1c001860:	7a079783          	lh	a5,1952(a5) # 1c0107a0 <rec_digit>
1c001864:	0217ae63          	p.beqimm	a5,1,1c0018a0 <cluster+0xca>
1c001868:	1c0107b7          	lui	a5,0x1c010
1c00186c:	7a079583          	lh	a1,1952(a5) # 1c0107a0 <rec_digit>
1c001870:	00158713          	addi	a4,a1,1
1c001874:	1c0107b7          	lui	a5,0x1c010
1c001878:	7ce78023          	sb	a4,1984(a5) # 1c0107c0 <value>
1c00187c:	1c010537          	lui	a0,0x1c010
1c001880:	f6c50513          	addi	a0,a0,-148 # 1c00ff6c <__clz_tab+0x138>
1c001884:	43e0d0ef          	jal	ra,1c00ecc2 <printf>
1c001888:	40b2                	lw	ra,12(sp)
1c00188a:	4422                	lw	s0,8(sp)
1c00188c:	4492                	lw	s1,4(sp)
1c00188e:	0141                	addi	sp,sp,16
1c001890:	8082                	ret
1c001892:	1c010537          	lui	a0,0x1c010
1c001896:	f4450513          	addi	a0,a0,-188 # 1c00ff44 <__clz_tab+0x110>
1c00189a:	2920d0ef          	jal	ra,1c00eb2c <puts>
1c00189e:	bf7d                	j	1c00185c <cluster+0x86>
1c0018a0:	1c010537          	lui	a0,0x1c010
1c0018a4:	f5850513          	addi	a0,a0,-168 # 1c00ff58 <__clz_tab+0x124>
1c0018a8:	2840d0ef          	jal	ra,1c00eb2c <puts>
1c0018ac:	bf75                	j	1c001868 <cluster+0x92>

1c0018ae <test_model>:
    return 0;
}


int test_model(void)
{
1c0018ae:	716d                	addi	sp,sp,-272
1c0018b0:	10112623          	sw	ra,268(sp)
1c0018b4:	10812423          	sw	s0,264(sp)
1c0018b8:	10912223          	sw	s1,260(sp)
1c0018bc:	11212023          	sw	s2,256(sp)
1c0018c0:	dfce                	sw	s3,252(sp)
1c0018c2:	ddd2                	sw	s4,248(sp)
1c0018c4:	dbd6                	sw	s5,244(sp)
1c0018c6:	d9da                	sw	s6,240(sp)
1c0018c8:	d7de                	sw	s7,236(sp)
1c0018ca:	d5e2                	sw	s8,232(sp)
1c0018cc:	d3e6                	sw	s9,228(sp)
1c0018ce:	d1ea                	sw	s10,224(sp)
1c0018d0:	cfee                	sw	s11,220(sp)
    printf("Entering main controller\n");
1c0018d2:	1c010537          	lui	a0,0x1c010
1c0018d6:	fac50513          	addi	a0,a0,-84 # 1c00ffac <__clz_tab+0x178>
1c0018da:	2520d0ef          	jal	ra,1c00eb2c <puts>
    printf("Reading image\n");
1c0018de:	1c010537          	lui	a0,0x1c010
1c0018e2:	fc850513          	addi	a0,a0,-56 # 1c00ffc8 <__clz_tab+0x194>
1c0018e6:	2460d0ef          	jal	ra,1c00eb2c <puts>
    //Reading Image from Bridge
    /*------------------- Allocate Image Buffer ------------------------*/
    printf("Going to alloc the image buffer!\n");
1c0018ea:	1c010537          	lui	a0,0x1c010
1c0018ee:	fd850513          	addi	a0,a0,-40 # 1c00ffd8 <__clz_tab+0x1a4>
1c0018f2:	23a0d0ef          	jal	ra,1c00eb2c <puts>
    // Img_In 保存图像数据，为其分配图片字节数的资源
    Img_In = (unsigned char *) AT_L2_ALLOC(0, AT_INPUT_SIZE_BYTES);
1c0018f6:	64cd                	lui	s1,0x13
1c0018f8:	4d048513          	addi	a0,s1,1232 # 134d0 <__L1Cl+0x34d0>
1c0018fc:	6600a0ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c001900:	1c010437          	lui	s0,0x1c010
1c001904:	7b440413          	addi	s0,s0,1972 # 1c0107b4 <ResOut>
1c001908:	c048                	sw	a0,4(s0)
    printf("%d\n",AT_INPUT_SIZE_BYTES);
1c00190a:	4d048593          	addi	a1,s1,1232
1c00190e:	1c010537          	lui	a0,0x1c010
1c001912:	f7850513          	addi	a0,a0,-136 # 1c00ff78 <__clz_tab+0x144>
1c001916:	3ac0d0ef          	jal	ra,1c00ecc2 <printf>
    //class_num (short int *) AT_L2_ALLOC(0,sizeof(short int));
    if(Img_In==NULL) {
1c00191a:	405c                	lw	a5,4(s0)
1c00191c:	eb91                	bnez	a5,1c001930 <test_model+0x82>
      printf("Image buffer alloc Error!\n");
1c00191e:	1c010537          	lui	a0,0x1c010
1c001922:	ffc50513          	addi	a0,a0,-4 # 1c00fffc <__clz_tab+0x1c8>
1c001926:	2060d0ef          	jal	ra,1c00eb2c <puts>
      pmsis_exit(-1);
1c00192a:	557d                	li	a0,-1
1c00192c:	2a40d0ef          	jal	ra,1c00ebd0 <exit>
    printf("Opening Himax camera\n");
1c001930:	1c010537          	lui	a0,0x1c010
1c001934:	01850513          	addi	a0,a0,24 # 1c010018 <__clz_tab+0x1e4>
1c001938:	1f40d0ef          	jal	ra,1c00eb2c <puts>
    pi_himax_conf_init(&cam_conf);
1c00193c:	0088                	addi	a0,sp,64
1c00193e:	709070ef          	jal	ra,1c009846 <pi_himax_conf_init>
    cam_conf.format = PI_CAMERA_QVGA;
1c001942:	4785                	li	a5,1
1c001944:	cabe                	sw	a5,84(sp)
    pi_open_from_conf(device, &cam_conf);
1c001946:	1c011437          	lui	s0,0x1c011
1c00194a:	008c                	addi	a1,sp,64
1c00194c:	96040513          	addi	a0,s0,-1696 # 1c010960 <_edata>
1c001950:	4ed090ef          	jal	ra,1c00b63c <pi_open_from_conf>
    if (pi_camera_open(device))
1c001954:	96040513          	addi	a0,s0,-1696
1c001958:	215070ef          	jal	ra,1c00936c <pi_camera_open>
1c00195c:	e12d                	bnez	a0,1c0019be <test_model+0x110>
};

static inline int32_t pi_camera_control(struct pi_device *device, pi_camera_cmd_e cmd, void *arg)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  return api->control(device, cmd, arg);
1c00195e:	96040493          	addi	s1,s0,-1696
1c001962:	409c                	lw	a5,0(s1)
1c001964:	479c                	lw	a5,8(a5)
1c001966:	4601                	li	a2,0
1c001968:	4589                	li	a1,2
1c00196a:	96040513          	addi	a0,s0,-1696
1c00196e:	9782                	jalr	a5
    uint8_t set_value = 3;
1c001970:	478d                	li	a5,3
1c001972:	02f10f23          	sb	a5,62(sp)
}

static inline int32_t pi_camera_reg_set(struct pi_device *device, uint32_t addr, uint8_t *value)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  return api->reg_set(device, addr, value);
1c001976:	409c                	lw	a5,0(s1)
1c001978:	4bdc                	lw	a5,20(a5)
1c00197a:	03e10613          	addi	a2,sp,62
1c00197e:	10100593          	li	a1,257
1c001982:	96040513          	addi	a0,s0,-1696
1c001986:	9782                	jalr	a5
    pi_time_wait_us(1000000);
1c001988:	000f4537          	lui	a0,0xf4
1c00198c:	24050513          	addi	a0,a0,576 # f4240 <__L2+0x74240>
1c001990:	6b80a0ef          	jal	ra,1c00c048 <pi_time_wait_us>
}

static inline int32_t pi_camera_reg_get(struct pi_device *device, uint32_t addr, uint8_t *value)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  return api->reg_get(device, addr, value);
1c001994:	409c                	lw	a5,0(s1)
1c001996:	4b9c                	lw	a5,16(a5)
1c001998:	03f10613          	addi	a2,sp,63
1c00199c:	10100593          	li	a1,257
1c0019a0:	96040513          	addi	a0,s0,-1696
1c0019a4:	9782                	jalr	a5
    if (set_value!=reg_value)
1c0019a6:	03e14703          	lbu	a4,62(sp)
1c0019aa:	03f14783          	lbu	a5,63(sp)
1c0019ae:	02f70163          	beq	a4,a5,1c0019d0 <test_model+0x122>
        printf("Failed to rotate camera image\n");
1c0019b2:	1c010537          	lui	a0,0x1c010
1c0019b6:	03050513          	addi	a0,a0,48 # 1c010030 <__clz_tab+0x1fc>
1c0019ba:	1720d0ef          	jal	ra,1c00eb2c <puts>
    } 
    // 打开摄像头
    if (open_camera(&camera))
    {
        printf("Failed to open camera\n");
1c0019be:	1c010537          	lui	a0,0x1c010
1c0019c2:	14050513          	addi	a0,a0,320 # 1c010140 <__clz_tab+0x30c>
1c0019c6:	1660d0ef          	jal	ra,1c00eb2c <puts>
        pmsis_exit(-1);
1c0019ca:	557d                	li	a0,-1
1c0019cc:	2040d0ef          	jal	ra,1c00ebd0 <exit>
  return api->control(device, cmd, arg);
1c0019d0:	1c011437          	lui	s0,0x1c011
1c0019d4:	96040493          	addi	s1,s0,-1696 # 1c010960 <_edata>
1c0019d8:	409c                	lw	a5,0(s1)
1c0019da:	479c                	lw	a5,8(a5)
1c0019dc:	4601                	li	a2,0
1c0019de:	458d                	li	a1,3
1c0019e0:	96040513          	addi	a0,s0,-1696
1c0019e4:	9782                	jalr	a5
1c0019e6:	409c                	lw	a5,0(s1)
1c0019e8:	479c                	lw	a5,8(a5)
1c0019ea:	4601                	li	a2,0
1c0019ec:	459d                	li	a1,7
1c0019ee:	96040513          	addi	a0,s0,-1696
1c0019f2:	9782                	jalr	a5
    }
    
    // 调试QVGA模式
    uint8_t set_value = 0;
    uint8_t reg_value = 0;
1c0019f4:	0c010723          	sb	zero,206(sp)

    #ifdef QVGA_MODE
    set_value=1;
1c0019f8:	4785                	li	a5,1
1c0019fa:	0cf107a3          	sb	a5,207(sp)
  return api->reg_set(device, addr, value);
1c0019fe:	409c                	lw	a5,0(s1)
1c001a00:	4bdc                	lw	a5,20(a5)
1c001a02:	0cf10613          	addi	a2,sp,207
1c001a06:	690d                	lui	s2,0x3
1c001a08:	01090593          	addi	a1,s2,16 # 3010 <__rt_stack_size+0x2810>
1c001a0c:	96040513          	addi	a0,s0,-1696
1c001a10:	9782                	jalr	a5
  return api->reg_get(device, addr, value);
1c001a12:	409c                	lw	a5,0(s1)
1c001a14:	4b9c                	lw	a5,16(a5)
1c001a16:	0ce10613          	addi	a2,sp,206
1c001a1a:	01090593          	addi	a1,s2,16
1c001a1e:	96040513          	addi	a0,s0,-1696
1c001a22:	9782                	jalr	a5
    pi_camera_reg_set(&camera, QVGA_WIN_EN, &set_value);
    pi_camera_reg_get(&camera, QVGA_WIN_EN, &reg_value);
    printf("qvga window enabled %d\n",reg_value);
1c001a24:	0ce14583          	lbu	a1,206(sp)
1c001a28:	1c010537          	lui	a0,0x1c010
1c001a2c:	05050513          	addi	a0,a0,80 # 1c010050 <__clz_tab+0x21c>
1c001a30:	2920d0ef          	jal	ra,1c00ecc2 <printf>
    #endif
    
    // 测试同步拍摄
    set_value=0;                                                                                                                                          
1c001a34:	0c0107a3          	sb	zero,207(sp)
  return api->reg_set(device, addr, value);
1c001a38:	409c                	lw	a5,0(s1)
1c001a3a:	4bdc                	lw	a5,20(a5)
1c001a3c:	0cf10613          	addi	a2,sp,207
1c001a40:	6905                	lui	s2,0x1
1c001a42:	01290593          	addi	a1,s2,18 # 1012 <__rt_stack_size+0x812>
1c001a46:	96040513          	addi	a0,s0,-1696
1c001a4a:	9782                	jalr	a5
  return api->reg_get(device, addr, value);
1c001a4c:	409c                	lw	a5,0(s1)
1c001a4e:	4b9c                	lw	a5,16(a5)
1c001a50:	0ce10613          	addi	a2,sp,206
1c001a54:	01290593          	addi	a1,s2,18
1c001a58:	96040513          	addi	a0,s0,-1696
1c001a5c:	9782                	jalr	a5
    pi_camera_reg_set(&camera, VSYNC_HSYNC_PIXEL_SHIFT_EN, &set_value);
    pi_camera_reg_get(&camera, VSYNC_HSYNC_PIXEL_SHIFT_EN, &reg_value);
    printf("vsync hsync pixel shift enabled %d\n",reg_value);
1c001a5e:	0ce14583          	lbu	a1,206(sp)
1c001a62:	1c010537          	lui	a0,0x1c010
1c001a66:	06850513          	addi	a0,a0,104 # 1c010068 <__clz_tab+0x234>
1c001a6a:	2580d0ef          	jal	ra,1c00ecc2 <printf>
    
    // 分配拍摄缓存
    buff = (unsigned char *) AT_L2_ALLOC(0, BUFF_SIZE);
1c001a6e:	654d                	lui	a0,0x13
1c001a70:	4d050513          	addi	a0,a0,1232 # 134d0 <__L1Cl+0x34d0>
1c001a74:	4e80a0ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c001a78:	1c0107b7          	lui	a5,0x1c010
1c001a7c:	7ca7a223          	sw	a0,1988(a5) # 1c0107c4 <buff>
    if (buff == NULL){ return -1;}
1c001a80:	38050863          	beqz	a0,1c001e10 <test_model+0x562>
    
    // 配置uart
    struct pi_uart_conf conf;
    struct pi_device device;
    pi_uart_conf_init(&conf);
1c001a84:	0188                	addi	a0,sp,192
1c001a86:	4c20c0ef          	jal	ra,1c00df48 <pi_uart_conf_init>
    conf.baudrate_bps =115200;
1c001a8a:	67f1                	lui	a5,0x1c
1c001a8c:	20078793          	addi	a5,a5,512 # 1c200 <__L1Cl+0xc200>
1c001a90:	c1be                	sw	a5,192(sp)
    pi_open_from_conf(&device, &conf);
1c001a92:	018c                	addi	a1,sp,192
1c001a94:	1948                	addi	a0,sp,180
1c001a96:	3a7090ef          	jal	ra,1c00b63c <pi_open_from_conf>
    printf("[UART] Open\n");
1c001a9a:	1c010537          	lui	a0,0x1c010
1c001a9e:	08c50513          	addi	a0,a0,140 # 1c01008c <__clz_tab+0x258>
1c001aa2:	08a0d0ef          	jal	ra,1c00eb2c <puts>
    if (pi_uart_open(&device))
1c001aa6:	1948                	addi	a0,sp,180
1c001aa8:	4ba0c0ef          	jal	ra,1c00df62 <pi_uart_open>
1c001aac:	c911                	beqz	a0,1c001ac0 <test_model+0x212>
    {
    	printf("[UART] open failed !\n");
1c001aae:	1c010537          	lui	a0,0x1c010
1c001ab2:	09850513          	addi	a0,a0,152 # 1c010098 <__clz_tab+0x264>
1c001ab6:	0760d0ef          	jal	ra,1c00eb2c <puts>
    	pmsis_exit(-1);
1c001aba:	557d                	li	a0,-1
1c001abc:	1140d0ef          	jal	ra,1c00ebd0 <exit>
    }

    pi_uart_open(&device);
1c001ac0:	1948                	addi	a0,sp,180
1c001ac2:	4a00c0ef          	jal	ra,1c00df62 <pi_uart_open>
    
    // 配置和打开cluster
    struct pi_device cluster_dev;
    struct pi_cluster_conf cl_conf;
    cl_conf.id = 0;
1c001ac6:	cb02                	sw	zero,148(sp)
    pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c001ac8:	090c                	addi	a1,sp,144
1c001aca:	1128                	addi	a0,sp,168
1c001acc:	371090ef          	jal	ra,1c00b63c <pi_open_from_conf>
    if (pi_cluster_open(&cluster_dev))
1c001ad0:	1128                	addi	a0,sp,168
1c001ad2:	7ab0a0ef          	jal	ra,1c00ca7c <pi_cluster_open>
1c001ad6:	c911                	beqz	a0,1c001aea <test_model+0x23c>
    {
        printf("Cluster open failed !\n");
1c001ad8:	1c010537          	lui	a0,0x1c010
1c001adc:	0b050513          	addi	a0,a0,176 # 1c0100b0 <__clz_tab+0x27c>
1c001ae0:	04c0d0ef          	jal	ra,1c00eb2c <puts>
        pmsis_exit(-4);
1c001ae4:	5571                	li	a0,-4
1c001ae6:	0ea0d0ef          	jal	ra,1c00ebd0 <exit>
    }

    // 为识别结果分配空间
    ResOut = (short int *) AT_L2_ALLOC(0, CLASS_NUM * sizeof(short int));
1c001aea:	4511                	li	a0,4
1c001aec:	4700a0ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c001af0:	1c0107b7          	lui	a5,0x1c010
1c001af4:	7aa7aa23          	sw	a0,1972(a5) # 1c0107b4 <ResOut>
    if (ResOut == NULL)
1c001af8:	e919                	bnez	a0,1c001b0e <test_model+0x260>
    {
        printf("Failed to allocate Memory for Result (%d bytes)\n", CLASS_NUM *sizeof(short int));
1c001afa:	4591                	li	a1,4
1c001afc:	1c010537          	lui	a0,0x1c010
1c001b00:	0c850513          	addi	a0,a0,200 # 1c0100c8 <__clz_tab+0x294>
1c001b04:	1be0d0ef          	jal	ra,1c00ecc2 <printf>
        pmsis_exit(-3);
1c001b08:	5575                	li	a0,-3
1c001b0a:	0c60d0ef          	jal	ra,1c00ebd0 <exit>
    }

    

    printf("Constructor\n");
1c001b0e:	1c010537          	lui	a0,0x1c010
1c001b12:	0fc50513          	addi	a0,a0,252 # 1c0100fc <__clz_tab+0x2c8>
1c001b16:	0160d0ef          	jal	ra,1c00eb2c <puts>
    // IMPORTANT - MUST BE CALLED AFTER THE CLUSTER IS SWITCHED ON!!!!
    // 构造CNN
    if (modelCNN_Construct())
1c001b1a:	647030ef          	jal	ra,1c005960 <modelCNN_Construct>
1c001b1e:	d62a                	sw	a0,44(sp)
1c001b20:	c911                	beqz	a0,1c001b34 <test_model+0x286>
    {
        printf("Graph constructor exited with an error\n");
1c001b22:	1c010537          	lui	a0,0x1c010
1c001b26:	10850513          	addi	a0,a0,264 # 1c010108 <__clz_tab+0x2d4>
1c001b2a:	0020d0ef          	jal	ra,1c00eb2c <puts>
        pmsis_exit(-5);
1c001b2e:	556d                	li	a0,-5
1c001b30:	0a00d0ef          	jal	ra,1c00ebd0 <exit>
    }

																												
    printf("Call cluster\n");
1c001b34:	1c010537          	lui	a0,0x1c010
1c001b38:	13050513          	addi	a0,a0,304 # 1c010130 <__clz_tab+0x2fc>
1c001b3c:	7f10c0ef          	jal	ra,1c00eb2c <puts>
    struct pi_cluster_task task = {0};
1c001b40:	d482                	sw	zero,104(sp)
1c001b42:	d682                	sw	zero,108(sp)
1c001b44:	dc82                	sw	zero,120(sp)
1c001b46:	de82                	sw	zero,124(sp)
1c001b48:	c102                	sw	zero,128(sp)
1c001b4a:	c302                	sw	zero,132(sp)
1c001b4c:	c502                	sw	zero,136(sp)
1c001b4e:	c702                	sw	zero,140(sp)
    task.entry = cluster;
1c001b50:	1c0017b7          	lui	a5,0x1c001
1c001b54:	7d678793          	addi	a5,a5,2006 # 1c0017d6 <cluster>
1c001b58:	d2be                	sw	a5,100(sp)
    task.arg = NULL;
    task.stack_size = (unsigned int) STACK_SIZE;
1c001b5a:	6785                	lui	a5,0x1
1c001b5c:	fbc78793          	addi	a5,a5,-68 # fbc <__rt_stack_size+0x7bc>
1c001b60:	d8be                	sw	a5,112(sp)
    task.slave_stack_size = (unsigned int) SLAVE_STACK_SIZE;
1c001b62:	40000793          	li	a5,1024
1c001b66:	dabe                	sw	a5,116(sp)
            if (x == 0 || y == 0 || x == width-1 || y == height-1)
1c001b68:	14300a93          	li	s5,323
                    output[idx] = 0.33*red + 0.33*green + 0.33*blue;
1c001b6c:	1c0107b7          	lui	a5,0x1c010
1c001b70:	f8078a13          	addi	s4,a5,-128 # 1c00ff80 <__clz_tab+0x14c>
1c001b74:	8c52                	mv	s8,s4
1c001b76:	ac11                	j	1c001d8a <test_model+0x4dc>
                    output[idx] = 0;
1c001b78:	00048023          	sb	zero,0(s1)
        for (int x = 0; x < width ; x++)
1c001b7c:	0405                	addi	s0,s0,1
1c001b7e:	0485                	addi	s1,s1,1
1c001b80:	0a05                	addi	s4,s4,1
1c001b82:	1b940063          	beq	s0,s9,1c001d22 <test_model+0x474>
            if (x == 0 || y == 0 || x == width-1 || y == height-1)
1c001b86:	d86d                	beqz	s0,1c001b78 <test_model+0x2ca>
1c001b88:	fe0b08e3          	beqz	s6,1c001b78 <test_model+0x2ca>
1c001b8c:	ff5406e3          	beq	s0,s5,1c001b78 <test_model+0x2ca>
1c001b90:	0f300613          	li	a2,243
1c001b94:	fecb02e3          	beq	s6,a2,1c001b78 <test_model+0x2ca>
                if ((x + x_shift) % 2 == 0 && (y + y_shift) % 2 == 0) //R
1c001b98:	86a2                	mv	a3,s0
1c001b9a:	fc143633          	p.bclr	a2,s0,30,1
1c001b9e:	016467b3          	or	a5,s0,s6
1c001ba2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001ba6:	cbb5                	beqz	a5,1c001c1a <test_model+0x36c>
                else if ((x + x_shift) % 2 == 1 && (y + y_shift) % 2 == 0) //G2
1c001ba8:	01f45713          	srli	a4,s0,0x1f
1c001bac:	00e407b3          	add	a5,s0,a4
1c001bb0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001bb4:	8f99                	sub	a5,a5,a4
1c001bb6:	0a17ad63          	p.beqimm	a5,1,1c001c70 <test_model+0x3c2>
                else if ((x + x_shift) % 2 == 0 && (y + y_shift) % 2 == 1) //G1
1c001bba:	24060463          	beqz	a2,1c001e02 <test_model+0x554>
                    green = 0;
1c001bbe:	4901                	li	s2,0
                    blue = 0;
1c001bc0:	4b81                	li	s7,0
                    red = 0;
1c001bc2:	4501                	li	a0,0
                    output[idx] = 0.33*red + 0.33*green + 0.33*blue;
1c001bc4:	3e6d                	jal	1c00177e <__floatsidf>
1c001bc6:	000c2603          	lw	a2,0(s8)
1c001bca:	004c2683          	lw	a3,4(s8)
1c001bce:	f24ff0ef          	jal	ra,1c0012f2 <__muldf3>
1c001bd2:	c42a                	sw	a0,8(sp)
1c001bd4:	c62e                	sw	a1,12(sp)
1c001bd6:	854a                	mv	a0,s2
1c001bd8:	365d                	jal	1c00177e <__floatsidf>
1c001bda:	000c2603          	lw	a2,0(s8)
1c001bde:	004c2683          	lw	a3,4(s8)
1c001be2:	f10ff0ef          	jal	ra,1c0012f2 <__muldf3>
1c001be6:	862a                	mv	a2,a0
1c001be8:	86ae                	mv	a3,a1
1c001bea:	4522                	lw	a0,8(sp)
1c001bec:	45b2                	lw	a1,12(sp)
1c001bee:	906ff0ef          	jal	ra,1c000cf4 <__adddf3>
1c001bf2:	c42a                	sw	a0,8(sp)
1c001bf4:	c62e                	sw	a1,12(sp)
1c001bf6:	855e                	mv	a0,s7
1c001bf8:	3659                	jal	1c00177e <__floatsidf>
1c001bfa:	000c2603          	lw	a2,0(s8)
1c001bfe:	004c2683          	lw	a3,4(s8)
1c001c02:	ef0ff0ef          	jal	ra,1c0012f2 <__muldf3>
1c001c06:	862a                	mv	a2,a0
1c001c08:	86ae                	mv	a3,a1
1c001c0a:	4522                	lw	a0,8(sp)
1c001c0c:	45b2                	lw	a1,12(sp)
1c001c0e:	8e6ff0ef          	jal	ra,1c000cf4 <__adddf3>
1c001c12:	3e29                	jal	1c00172c <__fixunsdfsi>
1c001c14:	00a48023          	sb	a0,0(s1)
1c001c18:	b795                	j	1c001b7c <test_model+0x2ce>
                    red = input[idx];
1c001c1a:	001a4503          	lbu	a0,1(s4)
1c001c1e:	46e2                	lw	a3,24(sp)
1c001c20:	40da07b3          	sub	a5,s4,a3
                    blue = (input[idxr[0]] + input[idxr[2]] + input[idxr[4]] + input[idxr[6]]) / 4;
1c001c24:	4672                	lw	a2,28(sp)
1c001c26:	00c78733          	add	a4,a5,a2
1c001c2a:	00074b83          	lbu	s7,0(a4)
1c001c2e:	5682                	lw	a3,32(sp)
1c001c30:	97b6                	add	a5,a5,a3
1c001c32:	0007c783          	lbu	a5,0(a5)
1c001c36:	9bbe                	add	s7,s7,a5
1c001c38:	008d0733          	add	a4,s10,s0
1c001c3c:	00174783          	lbu	a5,1(a4)
1c001c40:	9bbe                	add	s7,s7,a5
1c001c42:	008d87b3          	add	a5,s11,s0
1c001c46:	0017c683          	lbu	a3,1(a5)
1c001c4a:	84dbabdb          	p.addun	s7,s7,a3,2
1c001c4e:	0ffbfb93          	andi	s7,s7,255
                    green = (input[idxr[1]] + input[idxr[3]] + input[idxr[5]] + input[idxr[7]]) / 4;
1c001c52:	000a4903          	lbu	s2,0(s4)
1c001c56:	00074703          	lbu	a4,0(a4)
1c001c5a:	993a                	add	s2,s2,a4
1c001c5c:	002a4703          	lbu	a4,2(s4)
1c001c60:	993a                	add	s2,s2,a4
1c001c62:	0007c783          	lbu	a5,0(a5)
1c001c66:	84f9295b          	p.addun	s2,s2,a5,2
1c001c6a:	0ff97913          	andi	s2,s2,255
1c001c6e:	bf99                	j	1c001bc4 <test_model+0x316>
                else if ((x + x_shift) % 2 == 1 && (y + y_shift) % 2 == 0) //G2
1c001c70:	5712                	lw	a4,36(sp)
1c001c72:	18071663          	bnez	a4,1c001dfe <test_model+0x550>
                    red = (input[idxr[1]] + input[idxr[5]]) / 2;
1c001c76:	000a4783          	lbu	a5,0(s4)
1c001c7a:	002a4503          	lbu	a0,2(s4)
1c001c7e:	82a7a55b          	p.addun	a0,a5,a0,1
                    blue = (input[idxr[3]] + input[idxr[7]]) / 2;
1c001c82:	008d07b3          	add	a5,s10,s0
1c001c86:	0007cb83          	lbu	s7,0(a5)
1c001c8a:	008d86b3          	add	a3,s11,s0
1c001c8e:	0006c783          	lbu	a5,0(a3)
1c001c92:	82fbabdb          	p.addun	s7,s7,a5,1
                    green = input[idx];
1c001c96:	001a4903          	lbu	s2,1(s4)
1c001c9a:	b72d                	j	1c001bc4 <test_model+0x316>
                    red = (input[idxr[3]] + input[idxr[7]]) / 2;
1c001c9c:	00dd07b3          	add	a5,s10,a3
1c001ca0:	0007c783          	lbu	a5,0(a5)
1c001ca4:	96ee                	add	a3,a3,s11
1c001ca6:	0006c503          	lbu	a0,0(a3)
1c001caa:	82a7a55b          	p.addun	a0,a5,a0,1
                    blue = (input[idxr[1]] + input[idxr[5]]) / 2;
1c001cae:	000a4b83          	lbu	s7,0(s4)
1c001cb2:	002a4783          	lbu	a5,2(s4)
1c001cb6:	82fbabdb          	p.addun	s7,s7,a5,1
                    green = input[idx];
1c001cba:	001a4903          	lbu	s2,1(s4)
1c001cbe:	b719                	j	1c001bc4 <test_model+0x316>
                else if ((x + x_shift) % 2 == 1 && (y + y_shift) % 2 == 1) //B
1c001cc0:	4652                	lw	a2,20(sp)
1c001cc2:	04163c63          	p.bneimm	a2,1,1c001d1a <test_model+0x46c>
1c001cc6:	4762                	lw	a4,24(sp)
1c001cc8:	40ea07b3          	sub	a5,s4,a4
                    red = (input[idxr[0]] + input[idxr[2]] + input[idxr[4]] + input[idxr[6]]) / 4;
1c001ccc:	4672                	lw	a2,28(sp)
1c001cce:	00c78733          	add	a4,a5,a2
1c001cd2:	00074503          	lbu	a0,0(a4)
1c001cd6:	5702                	lw	a4,32(sp)
1c001cd8:	97ba                	add	a5,a5,a4
1c001cda:	0007c783          	lbu	a5,0(a5)
1c001cde:	953e                	add	a0,a0,a5
1c001ce0:	00dd07b3          	add	a5,s10,a3
1c001ce4:	0017c703          	lbu	a4,1(a5)
1c001ce8:	953a                	add	a0,a0,a4
1c001cea:	96ee                	add	a3,a3,s11
1c001cec:	0016c703          	lbu	a4,1(a3)
1c001cf0:	84e5255b          	p.addun	a0,a0,a4,2
1c001cf4:	0ff57513          	andi	a0,a0,255
                    blue = input[idx];
1c001cf8:	001a4b83          	lbu	s7,1(s4)
                    green = (input[idxr[1]] + input[idxr[3]] + input[idxr[5]] + input[idxr[7]]) / 4;
1c001cfc:	000a4903          	lbu	s2,0(s4)
1c001d00:	0007c783          	lbu	a5,0(a5)
1c001d04:	993e                	add	s2,s2,a5
1c001d06:	002a4783          	lbu	a5,2(s4)
1c001d0a:	993e                	add	s2,s2,a5
1c001d0c:	0006c783          	lbu	a5,0(a3)
1c001d10:	84f9295b          	p.addun	s2,s2,a5,2
1c001d14:	0ff97913          	andi	s2,s2,255
1c001d18:	b575                	j	1c001bc4 <test_model+0x316>
                    green = 0;
1c001d1a:	4901                	li	s2,0
                    blue = 0;
1c001d1c:	4b81                	li	s7,0
                    red = 0;
1c001d1e:	4501                	li	a0,0
1c001d20:	b555                	j	1c001bc4 <test_model+0x316>
    for (int y = 0; y < height ; y++)
1c001d22:	0b05                	addi	s6,s6,1
1c001d24:	144d0d13          	addi	s10,s10,324
1c001d28:	144d8913          	addi	s2,s11,324
1c001d2c:	14498993          	addi	s3,s3,324
1c001d30:	0f400793          	li	a5,244
1c001d34:	02fb0f63          	beq	s6,a5,1c001d72 <test_model+0x4c4>
                else if ((x + x_shift) % 2 == 1 && (y + y_shift) % 2 == 1) //B
1c001d38:	01fb5713          	srli	a4,s6,0x1f
1c001d3c:	00eb07b3          	add	a5,s6,a4
1c001d40:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001d44:	8f99                	sub	a5,a5,a4
1c001d46:	ca3e                	sw	a5,20(sp)
1c001d48:	ebbd0a13          	addi	s4,s10,-325
1c001d4c:	84ce                	mv	s1,s3
        for (int x = 0; x < width ; x++)
1c001d4e:	5432                	lw	s0,44(sp)
                if ((x + x_shift) % 2 == 0 && (y + y_shift) % 2 == 0) //R
1c001d50:	fc1b3633          	p.bclr	a2,s6,30,1
1c001d54:	d232                	sw	a2,36(sp)
1c001d56:	56a2                	lw	a3,40(sp)
1c001d58:	40d986b3          	sub	a3,s3,a3
1c001d5c:	cc36                	sw	a3,24(sp)
                    red = (input[idxr[0]] + input[idxr[2]] + input[idxr[4]] + input[idxr[6]]) / 4;
1c001d5e:	4742                	lw	a4,16(sp)
1c001d60:	40e90733          	sub	a4,s2,a4
1c001d64:	ce3a                	sw	a4,28(sp)
1c001d66:	47c2                	lw	a5,16(sp)
1c001d68:	40fd07b3          	sub	a5,s10,a5
1c001d6c:	d03e                	sw	a5,32(sp)
1c001d6e:	8dca                	mv	s11,s2
1c001d70:	bd19                	j	1c001b86 <test_model+0x2d8>
            pi_camera_capture(&camera, buff, BUFF_SIZE);
            pi_camera_control(&camera, PI_CAMERA_CMD_STOP, 0);
            //转换彩色图片
        demosaicking(buff, Img_In, AT_INPUT_WIDTH, AT_INPUT_HEIGHT, 1);
            // cluster执行任务
            pi_cluster_send_task_to_cl(&cluster_dev, &task);
1c001d72:	10cc                	addi	a1,sp,100
1c001d74:	1128                	addi	a0,sp,168
1c001d76:	0de0b0ef          	jal	ra,1c00ce54 <pi_cluster_send_task_to_cl>
    	    // 写入uart
            pi_uart_write(&device, &value, 1);
1c001d7a:	4605                	li	a2,1
1c001d7c:	1c0105b7          	lui	a1,0x1c010
1c001d80:	7c058593          	addi	a1,a1,1984 # 1c0107c0 <value>
1c001d84:	1948                	addi	a0,sp,180
1c001d86:	2e80c0ef          	jal	ra,1c00e06e <pi_uart_write>
  return api->control(device, cmd, arg);
1c001d8a:	1c011637          	lui	a2,0x1c011
1c001d8e:	96060413          	addi	s0,a2,-1696 # 1c010960 <_edata>
1c001d92:	401c                	lw	a5,0(s0)
1c001d94:	479c                	lw	a5,8(a5)
1c001d96:	4601                	li	a2,0
1c001d98:	4589                	li	a1,2
1c001d9a:	1c0116b7          	lui	a3,0x1c011
1c001d9e:	96068513          	addi	a0,a3,-1696 # 1c010960 <_edata>
1c001da2:	9782                	jalr	a5
            pi_camera_capture(&camera, buff, BUFF_SIZE);
1c001da4:	664d                	lui	a2,0x13
1c001da6:	4d060613          	addi	a2,a2,1232 # 134d0 <__L1Cl+0x34d0>
1c001daa:	1c010737          	lui	a4,0x1c010
1c001dae:	7c070713          	addi	a4,a4,1984 # 1c0107c0 <value>
1c001db2:	434c                	lw	a1,4(a4)
1c001db4:	1c0117b7          	lui	a5,0x1c011
1c001db8:	96078513          	addi	a0,a5,-1696 # 1c010960 <_edata>
1c001dbc:	5bc070ef          	jal	ra,1c009378 <pi_camera_capture>
1c001dc0:	401c                	lw	a5,0(s0)
1c001dc2:	479c                	lw	a5,8(a5)
1c001dc4:	4601                	li	a2,0
1c001dc6:	458d                	li	a1,3
1c001dc8:	1c0116b7          	lui	a3,0x1c011
1c001dcc:	96068513          	addi	a0,a3,-1696 # 1c010960 <_edata>
1c001dd0:	9782                	jalr	a5
        demosaicking(buff, Img_In, AT_INPUT_WIDTH, AT_INPUT_HEIGHT, 1);
1c001dd2:	1c010737          	lui	a4,0x1c010
1c001dd6:	7c070713          	addi	a4,a4,1984 # 1c0107c0 <value>
1c001dda:	4358                	lw	a4,4(a4)
1c001ddc:	c83a                	sw	a4,16(sp)
1c001dde:	14470d13          	addi	s10,a4,324
1c001de2:	ebc70b93          	addi	s7,a4,-324
1c001de6:	1c0107b7          	lui	a5,0x1c010
1c001dea:	7b478793          	addi	a5,a5,1972 # 1c0107b4 <ResOut>
1c001dee:	43dc                	lw	a5,4(a5)
1c001df0:	d43e                	sw	a5,40(sp)
1c001df2:	89be                	mv	s3,a5
    for (int y = 0; y < height ; y++)
1c001df4:	5b32                	lw	s6,44(sp)
        for (int x = 0; x < width ; x++)
1c001df6:	14400c93          	li	s9,324
1c001dfa:	895e                	mv	s2,s7
1c001dfc:	bf35                	j	1c001d38 <test_model+0x48a>
                else if ((x + x_shift) % 2 == 0 && (y + y_shift) % 2 == 1) //G1
1c001dfe:	ec0611e3          	bnez	a2,1c001cc0 <test_model+0x412>
1c001e02:	47d2                	lw	a5,20(sp)
1c001e04:	e817ace3          	p.beqimm	a5,1,1c001c9c <test_model+0x3ee>
                    green = 0;
1c001e08:	4901                	li	s2,0
                    blue = 0;
1c001e0a:	4b81                	li	s7,0
                    red = 0;
1c001e0c:	4501                	li	a0,0
1c001e0e:	bb5d                	j	1c001bc4 <test_model+0x316>
    
    printf("Ended\n");

    pmsis_exit(0);
    return 0;
}
1c001e10:	557d                	li	a0,-1
1c001e12:	10c12083          	lw	ra,268(sp)
1c001e16:	10812403          	lw	s0,264(sp)
1c001e1a:	10412483          	lw	s1,260(sp)
1c001e1e:	10012903          	lw	s2,256(sp)
1c001e22:	59fe                	lw	s3,252(sp)
1c001e24:	5a6e                	lw	s4,248(sp)
1c001e26:	5ade                	lw	s5,244(sp)
1c001e28:	5b4e                	lw	s6,240(sp)
1c001e2a:	5bbe                	lw	s7,236(sp)
1c001e2c:	5c2e                	lw	s8,232(sp)
1c001e2e:	5c9e                	lw	s9,228(sp)
1c001e30:	5d0e                	lw	s10,224(sp)
1c001e32:	4dfe                	lw	s11,220(sp)
1c001e34:	6151                	addi	sp,sp,272
1c001e36:	8082                	ret

1c001e38 <main>:

int main()
{
1c001e38:	1141                	addi	sp,sp,-16
1c001e3a:	c606                	sw	ra,12(sp)
    printf("\n\n\t *** NNTOOL model Example ***\n\n");
1c001e3c:	1c010537          	lui	a0,0x1c010
1c001e40:	f8850513          	addi	a0,a0,-120 # 1c00ff88 <__clz_tab+0x154>
1c001e44:	4e90c0ef          	jal	ra,1c00eb2c <puts>
{
}

static inline int pmsis_kickoff(void *arg)
{
  ((void (*)())arg)();
1c001e48:	349d                	jal	1c0018ae <test_model>
    return pmsis_kickoff((void *) test_model);
}
1c001e4a:	557d                	li	a0,-1
1c001e4c:	40b2                	lw	ra,12(sp)
1c001e4e:	0141                	addi	sp,sp,16
1c001e50:	8082                	ret

1c001e52 <S1_Op_input_1_formatter>:
	AT_L2_FREE(0, model_L2_Memory, 177502);
	AT_L1_FREE(0, model_L1_Memory, 48748);
	AT_HYPERRAM_CLOSE(&HyperRam);
	AT_HYPERFLASH_FS_CLOSE(&HyperFlash);
	return 0;
}
1c001e52:	714d                	addi	sp,sp,-336
1c001e54:	14112623          	sw	ra,332(sp)
1c001e58:	14812423          	sw	s0,328(sp)
1c001e5c:	14912223          	sw	s1,324(sp)
1c001e60:	15212023          	sw	s2,320(sp)
1c001e64:	13312e23          	sw	s3,316(sp)
1c001e68:	13412c23          	sw	s4,312(sp)
1c001e6c:	13512a23          	sw	s5,308(sp)
1c001e70:	13612823          	sw	s6,304(sp)
1c001e74:	13712623          	sw	s7,300(sp)
1c001e78:	13812423          	sw	s8,296(sp)
1c001e7c:	13912223          	sw	s9,292(sp)
1c001e80:	13a12023          	sw	s10,288(sp)
1c001e84:	11b12e23          	sw	s11,284(sp)
1c001e88:	cc2e                	sw	a1,24(sp)
1c001e8a:	14400793          	li	a5,324
1c001e8e:	d43e                	sw	a5,40(sp)
1c001e90:	ce2a                	sw	a0,28(sp)
1c001e92:	100007b7          	lui	a5,0x10000
1c001e96:	01c7a603          	lw	a2,28(a5) # 1000001c <model_L1_Memory>
1c001e9a:	300476f3          	csrrci	a3,mstatus,8
1c001e9e:	00204737          	lui	a4,0x204
1c001ea2:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c001ea6:	698d                	lui	s3,0x3
1c001ea8:	ed498993          	addi	s3,s3,-300 # 2ed4 <__rt_stack_size+0x26d4>
1c001eac:	000307b7          	lui	a5,0x30
1c001eb0:	de09a7b3          	p.insert	a5,s3,15,0
1c001eb4:	c137c7b3          	p.bset	a5,a5,0,19
1c001eb8:	c157c7b3          	p.bset	a5,a5,0,21
1c001ebc:	002045b7          	lui	a1,0x204
1c001ec0:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c001ec4:	002047b7          	lui	a5,0x204
1c001ec8:	40c7a023          	sw	a2,1024(a5) # 204400 <__L2+0x184400>
1c001ecc:	40a7a023          	sw	a0,1024(a5)
1c001ed0:	d9ba                	sw	a4,240(sp)
1c001ed2:	10012023          	sw	zero,256(sp)
1c001ed6:	30069073          	csrw	mstatus,a3
1c001eda:	4a81                	li	s5,0
1c001edc:	c602                	sw	zero,12(sp)
1c001ede:	4b81                	li	s7,0
1c001ee0:	4901                	li	s2,0
1c001ee2:	8a4e                	mv	s4,s3
1c001ee4:	00204437          	lui	s0,0x204
1c001ee8:	10000cb7          	lui	s9,0x10000
1c001eec:	20040d13          	addi	s10,s0,512 # 204200 <__L2+0x184200>
1c001ef0:	1c010db7          	lui	s11,0x1c010
1c001ef4:	6795                	lui	a5,0x5
1c001ef6:	0b878793          	addi	a5,a5,184 # 50b8 <__rt_stack_size+0x48b8>
1c001efa:	c83e                	sw	a5,16(sp)
1c001efc:	ac7d                	j	1c0021ba <S1_Op_input_1_formatter+0x368>
1c001efe:	c45e                	sw	s7,8(sp)
1c001f00:	4b01                	li	s6,0
1c001f02:	a4e1                	j	1c0021ca <S1_Op_input_1_formatter+0x378>
1c001f04:	6b09                	lui	s6,0x2
1c001f06:	bd8b0b13          	addi	s6,s6,-1064 # 1bd8 <__rt_stack_size+0x13d8>
1c001f0a:	a4c1                	j	1c0021ca <S1_Op_input_1_formatter+0x378>
1c001f0c:	300476f3          	csrrci	a3,mstatus,8
1c001f10:	40442783          	lw	a5,1028(s0)
1c001f14:	574e                	lw	a4,240(sp)
1c001f16:	40e7d7b3          	sra	a5,a5,a4
1c001f1a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001f1e:	c78d                	beqz	a5,1c001f48 <S1_Op_input_1_formatter+0xf6>
1c001f20:	10000613          	li	a2,256
1c001f24:	30069073          	csrw	mstatus,a3
1c001f28:	00c42423          	sw	a2,8(s0)
1c001f2c:	03c46783          	p.elw	a5,60(s0)
1c001f30:	00c42223          	sw	a2,4(s0)
1c001f34:	300476f3          	csrrci	a3,mstatus,8
1c001f38:	40442783          	lw	a5,1028(s0)
1c001f3c:	574e                	lw	a4,240(sp)
1c001f3e:	40e7d7b3          	sra	a5,a5,a4
1c001f42:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001f46:	fff9                	bnez	a5,1c001f24 <S1_Op_input_1_formatter+0xd2>
1c001f48:	4785                	li	a5,1
1c001f4a:	00e79733          	sll	a4,a5,a4
1c001f4e:	40e42223          	sw	a4,1028(s0)
1c001f52:	30069073          	csrw	mstatus,a3
1c001f56:	080b1f63          	bnez	s6,1c001ff4 <S1_Op_input_1_formatter+0x1a2>
1c001f5a:	01cca783          	lw	a5,28(s9) # 1000001c <model_L1_Memory>
1c001f5e:	01f95713          	srli	a4,s2,0x1f
1c001f62:	00e904b3          	add	s1,s2,a4
1c001f66:	fc14b4b3          	p.bclr	s1,s1,30,1
1c001f6a:	8c99                	sub	s1,s1,a4
1c001f6c:	034484b3          	mul	s1,s1,s4
1c001f70:	00978733          	add	a4,a5,s1
1c001f74:	d03a                	sw	a4,32(sp)
1c001f76:	6819                	lui	a6,0x6
1c001f78:	da880813          	addi	a6,a6,-600 # 5da8 <__rt_stack_size+0x55a8>
1c001f7c:	01048c33          	add	s8,s1,a6
1c001f80:	97e2                	add	a5,a5,s8
1c001f82:	d23e                	sw	a5,36(sp)
1c001f84:	12692c63          	p.beqimm	s2,6,1c0020bc <S1_Op_input_1_formatter+0x26a>
1c001f88:	02500793          	li	a5,37
1c001f8c:	d63e                	sw	a5,44(sp)
1c001f8e:	0ff00793          	li	a5,255
1c001f92:	08f42223          	sw	a5,132(s0)
1c001f96:	00fd2023          	sw	a5,0(s10)
1c001f9a:	00204537          	lui	a0,0x204
1c001f9e:	20050513          	addi	a0,a0,512 # 204200 <__L2+0x184200>
1c001fa2:	00f52623          	sw	a5,12(a0)
1c001fa6:	1c009737          	lui	a4,0x1c009
1c001faa:	9e870713          	addi	a4,a4,-1560 # 1c0089e8 <CNN_NormBW_offset_fps>
1c001fae:	08e42023          	sw	a4,128(s0)
1c001fb2:	1008                	addi	a0,sp,32
1c001fb4:	08a42023          	sw	a0,128(s0)
1c001fb8:	231060ef          	jal	ra,1c0089e8 <CNN_NormBW_offset_fps>
1c001fbc:	01cd6783          	p.elw	a5,28(s10)
1c001fc0:	100a9063          	bnez	s5,1c0020c0 <S1_Op_input_1_formatter+0x26e>
1c001fc4:	4732                	lw	a4,12(sp)
1c001fc6:	18070f63          	beqz	a4,1c002164 <S1_Op_input_1_formatter+0x312>
1c001fca:	0cc14783          	lbu	a5,204(sp)
1c001fce:	0ff7f793          	andi	a5,a5,255
1c001fd2:	18079963          	bnez	a5,1c002164 <S1_Op_input_1_formatter+0x312>
1c001fd6:	4709                	li	a4,2
1c001fd8:	00e42423          	sw	a4,8(s0)
1c001fdc:	03c46783          	p.elw	a5,60(s0)
1c001fe0:	00e42223          	sw	a4,4(s0)
1c001fe4:	0cc14783          	lbu	a5,204(sp)
1c001fe8:	0ff7f793          	andi	a5,a5,255
1c001fec:	d7f5                	beqz	a5,1c001fd8 <S1_Op_input_1_formatter+0x186>
1c001fee:	160a8b63          	beqz	s5,1c002164 <S1_Op_input_1_formatter+0x312>
1c001ff2:	aa35                	j	1c00212e <S1_Op_input_1_formatter+0x2dc>
1c001ff4:	4772                	lw	a4,28(sp)
1c001ff6:	47a2                	lw	a5,8(sp)
1c001ff8:	00f706b3          	add	a3,a4,a5
1c001ffc:	00190793          	addi	a5,s2,1
1c002000:	01f7d713          	srli	a4,a5,0x1f
1c002004:	97ba                	add	a5,a5,a4
1c002006:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00200a:	8f99                	sub	a5,a5,a4
1c00200c:	01cca703          	lw	a4,28(s9)
1c002010:	43478733          	p.mac	a4,a5,s4
1c002014:	30047673          	csrrci	a2,mstatus,8
1c002018:	020b4863          	bltz	s6,1c002048 <S1_Op_input_1_formatter+0x1f6>
1c00201c:	40042583          	lw	a1,1024(s0)
1c002020:	000307b7          	lui	a5,0x30
1c002024:	de0b27b3          	p.insert	a5,s6,15,0
1c002028:	c137c7b3          	p.bset	a5,a5,0,19
1c00202c:	c157c7b3          	p.bset	a5,a5,0,21
1c002030:	40f42023          	sw	a5,1024(s0)
1c002034:	40e42023          	sw	a4,1024(s0)
1c002038:	40d42023          	sw	a3,1024(s0)
1c00203c:	d9ae                	sw	a1,240(sp)
1c00203e:	10012023          	sw	zero,256(sp)
1c002042:	30061073          	csrw	mstatus,a2
1c002046:	bf11                	j	1c001f5a <S1_Op_input_1_formatter+0x108>
1c002048:	67a1                	lui	a5,0x8
1c00204a:	003305b7          	lui	a1,0x330
1c00204e:	dbae                	sw	a1,244(sp)
1c002050:	10e12223          	sw	a4,260(sp)
1c002054:	10d12423          	sw	a3,264(sp)
1c002058:	ddda                	sw	s6,248(sp)
1c00205a:	dfbe                	sw	a5,252(sp)
1c00205c:	10f12023          	sw	a5,256(sp)
1c002060:	57fd                	li	a5,-1
1c002062:	d9be                	sw	a5,240(sp)
1c002064:	10012623          	sw	zero,268(sp)
1c002068:	01402783          	lw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00206c:	cb89                	beqz	a5,1c00207e <S1_Op_input_1_formatter+0x22c>
1c00206e:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002072:	1998                	addi	a4,sp,240
1c002074:	cfd8                	sw	a4,28(a5)
1c002076:	199c                	addi	a5,sp,240
1c002078:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00207c:	b7d9                	j	1c002042 <S1_Op_input_1_formatter+0x1f0>
1c00207e:	65a1                	lui	a1,0x8
1c002080:	04bb57b3          	p.minu	a5,s6,a1
1c002084:	00f70533          	add	a0,a4,a5
1c002088:	10a12223          	sw	a0,260(sp)
1c00208c:	95b6                	add	a1,a1,a3
1c00208e:	10b12423          	sw	a1,264(sp)
1c002092:	40fb07b3          	sub	a5,s6,a5
1c002096:	ddbe                	sw	a5,248(sp)
1c002098:	40042783          	lw	a5,1024(s0)
1c00209c:	d9be                	sw	a5,240(sp)
1c00209e:	003387b7          	lui	a5,0x338
1c0020a2:	40f42023          	sw	a5,1024(s0)
1c0020a6:	40e42023          	sw	a4,1024(s0)
1c0020aa:	40d42023          	sw	a3,1024(s0)
1c0020ae:	10012783          	lw	a5,256(sp)
1c0020b2:	d3f1                	beqz	a5,1c002076 <S1_Op_input_1_formatter+0x224>
1c0020b4:	199c                	addi	a5,sp,240
1c0020b6:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0020ba:	bf75                	j	1c002076 <S1_Op_input_1_formatter+0x224>
1c0020bc:	47d9                	li	a5,22
1c0020be:	b5f9                	j	1c001f8c <S1_Op_input_1_formatter+0x13a>
1c0020c0:	578e                	lw	a5,224(sp)
1c0020c2:	cf91                	beqz	a5,1c0020de <S1_Op_input_1_formatter+0x28c>
1c0020c4:	572e                	lw	a4,232(sp)
1c0020c6:	02000793          	li	a5,32
1c0020ca:	cf39                	beqz	a4,1c002128 <S1_Op_input_1_formatter+0x2d6>
1c0020cc:	00f42423          	sw	a5,8(s0)
1c0020d0:	03c46703          	p.elw	a4,60(s0)
1c0020d4:	00f42223          	sw	a5,4(s0)
1c0020d8:	572e                	lw	a4,232(sp)
1c0020da:	fb6d                	bnez	a4,1c0020cc <S1_Op_input_1_formatter+0x27a>
1c0020dc:	a0b1                	j	1c002128 <S1_Op_input_1_formatter+0x2d6>
1c0020de:	300476f3          	csrrci	a3,mstatus,8
1c0020e2:	40442783          	lw	a5,1028(s0)
1c0020e6:	474e                	lw	a4,208(sp)
1c0020e8:	40e7d7b3          	sra	a5,a5,a4
1c0020ec:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0020f0:	c78d                	beqz	a5,1c00211a <S1_Op_input_1_formatter+0x2c8>
1c0020f2:	10000613          	li	a2,256
1c0020f6:	30069073          	csrw	mstatus,a3
1c0020fa:	00c42423          	sw	a2,8(s0)
1c0020fe:	03c46783          	p.elw	a5,60(s0)
1c002102:	00c42223          	sw	a2,4(s0)
1c002106:	300476f3          	csrrci	a3,mstatus,8
1c00210a:	40442783          	lw	a5,1028(s0)
1c00210e:	474e                	lw	a4,208(sp)
1c002110:	40e7d7b3          	sra	a5,a5,a4
1c002114:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002118:	fff9                	bnez	a5,1c0020f6 <S1_Op_input_1_formatter+0x2a4>
1c00211a:	4785                	li	a5,1
1c00211c:	00e79733          	sll	a4,a5,a4
1c002120:	40e42223          	sw	a4,1028(s0)
1c002124:	30069073          	csrw	mstatus,a3
1c002128:	47b2                	lw	a5,12(sp)
1c00212a:	24079e63          	bnez	a5,1c002386 <S1_Op_input_1_formatter+0x534>
1c00212e:	fff90793          	addi	a5,s2,-1
1c002132:	01f7d713          	srli	a4,a5,0x1f
1c002136:	97ba                	add	a5,a5,a4
1c002138:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00213c:	8f99                	sub	a5,a5,a4
1c00213e:	4642                	lw	a2,16(sp)
1c002140:	43478633          	p.mac	a2,a5,s4
1c002144:	7bcda583          	lw	a1,1980(s11) # 1c0107bc <model_L2_Memory>
1c002148:	181c                	addi	a5,sp,48
1c00214a:	4701                	li	a4,0
1c00214c:	86d6                	mv	a3,s5
1c00214e:	962e                	add	a2,a2,a1
1c002150:	4862                	lw	a6,24(sp)
1c002152:	4552                	lw	a0,20(sp)
1c002154:	00a805b3          	add	a1,a6,a0
1c002158:	1c011537          	lui	a0,0x1c011
1c00215c:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c002160:	2a8080ef          	jal	ra,1c00a408 <pi_cl_ram_copy>
1c002164:	7bcda783          	lw	a5,1980(s11)
1c002168:	94be                	add	s1,s1,a5
1c00216a:	47c2                	lw	a5,16(sp)
1c00216c:	00f48733          	add	a4,s1,a5
1c002170:	01cca783          	lw	a5,28(s9)
1c002174:	9c3e                	add	s8,s8,a5
1c002176:	300476f3          	csrrci	a3,mstatus,8
1c00217a:	01099813          	slli	a6,s3,0x10
1c00217e:	06084a63          	bltz	a6,1c0021f2 <S1_Op_input_1_formatter+0x3a0>
1c002182:	40042603          	lw	a2,1024(s0)
1c002186:	000207b7          	lui	a5,0x20
1c00218a:	de09a7b3          	p.insert	a5,s3,15,0
1c00218e:	c137c7b3          	p.bset	a5,a5,0,19
1c002192:	c157c7b3          	p.bset	a5,a5,0,21
1c002196:	40f42023          	sw	a5,1024(s0)
1c00219a:	41842023          	sw	s8,1024(s0)
1c00219e:	40e42023          	sw	a4,1024(s0)
1c0021a2:	c9b2                	sw	a2,208(sp)
1c0021a4:	d182                	sw	zero,224(sp)
1c0021a6:	30069073          	csrw	mstatus,a3
1c0021aa:	0905                	addi	s2,s2,1
1c0021ac:	ca5e                	sw	s7,20(sp)
1c0021ae:	c656                	sw	s5,12(sp)
1c0021b0:	0a792763          	p.beqimm	s2,7,1c00225e <S1_Op_input_1_formatter+0x40c>
1c0021b4:	8ace                	mv	s5,s3
1c0021b6:	89da                	mv	s3,s6
1c0021b8:	4ba2                	lw	s7,8(sp)
1c0021ba:	d46922e3          	p.beqimm	s2,6,1c001efe <S1_Op_input_1_formatter+0xac>
1c0021be:	014b8533          	add	a0,s7,s4
1c0021c2:	c42a                	sw	a0,8(sp)
1c0021c4:	d45920e3          	p.beqimm	s2,5,1c001f04 <S1_Op_input_1_formatter+0xb2>
1c0021c8:	8b52                	mv	s6,s4
1c0021ca:	10012783          	lw	a5,256(sp)
1c0021ce:	d2078fe3          	beqz	a5,1c001f0c <S1_Op_input_1_formatter+0xba>
1c0021d2:	10812703          	lw	a4,264(sp)
1c0021d6:	02000793          	li	a5,32
1c0021da:	d6070ee3          	beqz	a4,1c001f56 <S1_Op_input_1_formatter+0x104>
1c0021de:	00f42423          	sw	a5,8(s0)
1c0021e2:	03c46703          	p.elw	a4,60(s0)
1c0021e6:	00f42223          	sw	a5,4(s0)
1c0021ea:	10812703          	lw	a4,264(sp)
1c0021ee:	fb65                	bnez	a4,1c0021de <S1_Op_input_1_formatter+0x38c>
1c0021f0:	b39d                	j	1c001f56 <S1_Op_input_1_formatter+0x104>
1c0021f2:	67a1                	lui	a5,0x8
1c0021f4:	00320637          	lui	a2,0x320
1c0021f8:	cbb2                	sw	a2,212(sp)
1c0021fa:	d3e2                	sw	s8,228(sp)
1c0021fc:	d5ba                	sw	a4,232(sp)
1c0021fe:	cdce                	sw	s3,216(sp)
1c002200:	cfbe                	sw	a5,220(sp)
1c002202:	d1be                	sw	a5,224(sp)
1c002204:	57fd                	li	a5,-1
1c002206:	c9be                	sw	a5,208(sp)
1c002208:	d782                	sw	zero,236(sp)
1c00220a:	01402783          	lw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00220e:	cb89                	beqz	a5,1c002220 <S1_Op_input_1_formatter+0x3ce>
1c002210:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002214:	0998                	addi	a4,sp,208
1c002216:	cfd8                	sw	a4,28(a5)
1c002218:	099c                	addi	a5,sp,208
1c00221a:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00221e:	b761                	j	1c0021a6 <S1_Op_input_1_formatter+0x354>
1c002220:	67a1                	lui	a5,0x8
1c002222:	04f9d7b3          	p.minu	a5,s3,a5
1c002226:	00fc0633          	add	a2,s8,a5
1c00222a:	d3b2                	sw	a2,228(sp)
1c00222c:	6635                	lui	a2,0xd
1c00222e:	0b860613          	addi	a2,a2,184 # d0b8 <__rt_stack_size+0xc8b8>
1c002232:	94b2                	add	s1,s1,a2
1c002234:	d5a6                	sw	s1,232(sp)
1c002236:	40f987b3          	sub	a5,s3,a5
1c00223a:	cdbe                	sw	a5,216(sp)
1c00223c:	40042783          	lw	a5,1024(s0)
1c002240:	c9be                	sw	a5,208(sp)
1c002242:	003287b7          	lui	a5,0x328
1c002246:	40f42023          	sw	a5,1024(s0)
1c00224a:	41842023          	sw	s8,1024(s0)
1c00224e:	40e42023          	sw	a4,1024(s0)
1c002252:	578e                	lw	a5,224(sp)
1c002254:	d3f1                	beqz	a5,1c002218 <S1_Op_input_1_formatter+0x3c6>
1c002256:	099c                	addi	a5,sp,208
1c002258:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00225c:	bf75                	j	1c002218 <S1_Op_input_1_formatter+0x3c6>
1c00225e:	578e                	lw	a5,224(sp)
1c002260:	c385                	beqz	a5,1c002280 <S1_Op_input_1_formatter+0x42e>
1c002262:	56ae                	lw	a3,232(sp)
1c002264:	02000713          	li	a4,32
1c002268:	002047b7          	lui	a5,0x204
1c00226c:	c6ad                	beqz	a3,1c0022d6 <S1_Op_input_1_formatter+0x484>
1c00226e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c002272:	03c7e683          	p.elw	a3,60(a5)
1c002276:	00e7a223          	sw	a4,4(a5)
1c00227a:	56ae                	lw	a3,232(sp)
1c00227c:	faed                	bnez	a3,1c00226e <S1_Op_input_1_formatter+0x41c>
1c00227e:	a8a1                	j	1c0022d6 <S1_Op_input_1_formatter+0x484>
1c002280:	30047673          	csrrci	a2,mstatus,8
1c002284:	002047b7          	lui	a5,0x204
1c002288:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00228c:	46ce                	lw	a3,208(sp)
1c00228e:	40d7d7b3          	sra	a5,a5,a3
1c002292:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002296:	c79d                	beqz	a5,1c0022c4 <S1_Op_input_1_formatter+0x472>
1c002298:	10000593          	li	a1,256
1c00229c:	00204737          	lui	a4,0x204
1c0022a0:	30061073          	csrw	mstatus,a2
1c0022a4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c0022a8:	03c76783          	p.elw	a5,60(a4)
1c0022ac:	00b72223          	sw	a1,4(a4)
1c0022b0:	30047673          	csrrci	a2,mstatus,8
1c0022b4:	40472783          	lw	a5,1028(a4)
1c0022b8:	46ce                	lw	a3,208(sp)
1c0022ba:	40d7d7b3          	sra	a5,a5,a3
1c0022be:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0022c2:	fff9                	bnez	a5,1c0022a0 <S1_Op_input_1_formatter+0x44e>
1c0022c4:	4785                	li	a5,1
1c0022c6:	00d796b3          	sll	a3,a5,a3
1c0022ca:	002047b7          	lui	a5,0x204
1c0022ce:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0022d2:	30061073          	csrw	mstatus,a2
1c0022d6:	020a8563          	beqz	s5,1c002300 <S1_Op_input_1_formatter+0x4ae>
1c0022da:	0cc14783          	lbu	a5,204(sp)
1c0022de:	0ff7f793          	andi	a5,a5,255
1c0022e2:	ef99                	bnez	a5,1c002300 <S1_Op_input_1_formatter+0x4ae>
1c0022e4:	4689                	li	a3,2
1c0022e6:	00204737          	lui	a4,0x204
1c0022ea:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c0022ee:	03c76783          	p.elw	a5,60(a4)
1c0022f2:	00d72223          	sw	a3,4(a4)
1c0022f6:	0cc14783          	lbu	a5,204(sp)
1c0022fa:	0ff7f793          	andi	a5,a5,255
1c0022fe:	d7f5                	beqz	a5,1c0022ea <S1_Op_input_1_formatter+0x498>
1c002300:	1c0107b7          	lui	a5,0x1c010
1c002304:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c002308:	181c                	addi	a5,sp,48
1c00230a:	4701                	li	a4,0
1c00230c:	86ce                	mv	a3,s3
1c00230e:	6615                	lui	a2,0x5
1c002310:	0b860613          	addi	a2,a2,184 # 50b8 <__rt_stack_size+0x48b8>
1c002314:	962e                	add	a2,a2,a1
1c002316:	4562                	lw	a0,24(sp)
1c002318:	017505b3          	add	a1,a0,s7
1c00231c:	1c011537          	lui	a0,0x1c011
1c002320:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c002324:	0e4080ef          	jal	ra,1c00a408 <pi_cl_ram_copy>
1c002328:	0cc14783          	lbu	a5,204(sp)
1c00232c:	0ff7f793          	andi	a5,a5,255
1c002330:	ef99                	bnez	a5,1c00234e <S1_Op_input_1_formatter+0x4fc>
1c002332:	4689                	li	a3,2
1c002334:	00204737          	lui	a4,0x204
1c002338:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00233c:	03c76783          	p.elw	a5,60(a4)
1c002340:	00d72223          	sw	a3,4(a4)
1c002344:	0cc14783          	lbu	a5,204(sp)
1c002348:	0ff7f793          	andi	a5,a5,255
1c00234c:	d7f5                	beqz	a5,1c002338 <S1_Op_input_1_formatter+0x4e6>
1c00234e:	14c12083          	lw	ra,332(sp)
1c002352:	14812403          	lw	s0,328(sp)
1c002356:	14412483          	lw	s1,324(sp)
1c00235a:	14012903          	lw	s2,320(sp)
1c00235e:	13c12983          	lw	s3,316(sp)
1c002362:	13812a03          	lw	s4,312(sp)
1c002366:	13412a83          	lw	s5,308(sp)
1c00236a:	13012b03          	lw	s6,304(sp)
1c00236e:	12c12b83          	lw	s7,300(sp)
1c002372:	12812c03          	lw	s8,296(sp)
1c002376:	12412c83          	lw	s9,292(sp)
1c00237a:	12012d03          	lw	s10,288(sp)
1c00237e:	11c12d83          	lw	s11,284(sp)
1c002382:	6171                	addi	sp,sp,336
1c002384:	8082                	ret
1c002386:	0cc14783          	lbu	a5,204(sp)
1c00238a:	0ff7f793          	andi	a5,a5,255
1c00238e:	c40784e3          	beqz	a5,1c001fd6 <S1_Op_input_1_formatter+0x184>
1c002392:	bb71                	j	1c00212e <S1_Op_input_1_formatter+0x2dc>

1c002394 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu>:
1c002394:	d7010113          	addi	sp,sp,-656
1c002398:	28112623          	sw	ra,652(sp)
1c00239c:	28812423          	sw	s0,648(sp)
1c0023a0:	28912223          	sw	s1,644(sp)
1c0023a4:	29212023          	sw	s2,640(sp)
1c0023a8:	27312e23          	sw	s3,636(sp)
1c0023ac:	27412c23          	sw	s4,632(sp)
1c0023b0:	27512a23          	sw	s5,628(sp)
1c0023b4:	27612823          	sw	s6,624(sp)
1c0023b8:	27712623          	sw	s7,620(sp)
1c0023bc:	27812423          	sw	s8,616(sp)
1c0023c0:	27912223          	sw	s9,612(sp)
1c0023c4:	27a12023          	sw	s10,608(sp)
1c0023c8:	25b12e23          	sw	s11,604(sp)
1c0023cc:	842a                	mv	s0,a0
1c0023ce:	d036                	sw	a3,32(sp)
1c0023d0:	84c2                	mv	s1,a6
1c0023d2:	100006b7          	lui	a3,0x10000
1c0023d6:	01c6a803          	lw	a6,28(a3) # 1000001c <model_L1_Memory>
1c0023da:	6689                	lui	a3,0x2
1c0023dc:	e1868693          	addi	a3,a3,-488 # 1e18 <__rt_stack_size+0x1618>
1c0023e0:	96c2                	add	a3,a3,a6
1c0023e2:	df36                	sw	a3,188(sp)
1c0023e4:	0a000313          	li	t1,160
1c0023e8:	0c611023          	sh	t1,192(sp)
1c0023ec:	4889                	li	a7,2
1c0023ee:	0d111123          	sh	a7,194(sp)
1c0023f2:	14400513          	li	a0,324
1c0023f6:	08a11823          	sh	a0,144(sp)
1c0023fa:	14100513          	li	a0,321
1c0023fe:	08a11923          	sh	a0,146(sp)
1c002402:	4515                	li	a0,5
1c002404:	08a11a23          	sh	a0,148(sp)
1c002408:	08a11b23          	sh	a0,150(sp)
1c00240c:	4e05                	li	t3,1
1c00240e:	09c11c23          	sh	t3,152(sp)
1c002412:	09c11e23          	sh	t3,156(sp)
1c002416:	d536                	sw	a3,168(sp)
1c002418:	00007557          	pv.add.sci.b	a0,zero,0
1c00241c:	d72a                	sw	a0,172(sp)
1c00241e:	d8b6                	sw	a3,112(sp)
1c002420:	dab6                	sw	a3,116(sp)
1c002422:	06611d23          	sh	t1,122(sp)
1c002426:	07111e23          	sh	a7,124(sp)
1c00242a:	6525                	lui	a0,0x9
1c00242c:	61850513          	addi	a0,a0,1560 # 9618 <__rt_stack_size+0x8e18>
1c002430:	9542                	add	a0,a0,a6
1c002432:	c52a                	sw	a0,136(sp)
1c002434:	c4b6                	sw	a3,72(sp)
1c002436:	04611923          	sh	t1,82(sp)
1c00243a:	04611a23          	sh	t1,84(sp)
1c00243e:	05111b23          	sh	a7,86(sp)
1c002442:	05111c23          	sh	a7,88(sp)
1c002446:	000076d7          	pv.add.sci.b	a3,zero,0
1c00244a:	d4b6                	sw	a3,104(sp)
1c00244c:	05c10d23          	sb	t3,90(sp)
1c002450:	060102a3          	sb	zero,101(sp)
1c002454:	d6aa                	sw	a0,108(sp)
1c002456:	300478f3          	csrrci	a7,mstatus,8
1c00245a:	00204537          	lui	a0,0x204
1c00245e:	40052503          	lw	a0,1024(a0) # 204400 <__L2+0x184400>
1c002462:	000b06b7          	lui	a3,0xb0
1c002466:	08068693          	addi	a3,a3,128 # b0080 <__L2+0x30080>
1c00246a:	c156c6b3          	p.bset	a3,a3,0,21
1c00246e:	00204337          	lui	t1,0x204
1c002472:	40d32023          	sw	a3,1024(t1) # 204400 <__L2+0x184400>
1c002476:	6685                	lui	a3,0x1
1c002478:	ca868693          	addi	a3,a3,-856 # ca8 <__rt_stack_size+0x4a8>
1c00247c:	9836                	add	a6,a6,a3
1c00247e:	002046b7          	lui	a3,0x204
1c002482:	4106a023          	sw	a6,1024(a3) # 204400 <__L2+0x184400>
1c002486:	40c6a023          	sw	a2,1024(a3)
1c00248a:	22a12823          	sw	a0,560(sp)
1c00248e:	24012023          	sw	zero,576(sp)
1c002492:	30089073          	csrw	mstatus,a7
1c002496:	24012683          	lw	a3,576(sp)
1c00249a:	c295                	beqz	a3,1c0024be <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x12a>
1c00249c:	24812503          	lw	a0,584(sp)
1c0024a0:	02000613          	li	a2,32
1c0024a4:	002046b7          	lui	a3,0x204
1c0024a8:	c925                	beqz	a0,1c002518 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x184>
1c0024aa:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
1c0024ae:	03c6e503          	p.elw	a0,60(a3)
1c0024b2:	00c6a223          	sw	a2,4(a3)
1c0024b6:	24812503          	lw	a0,584(sp)
1c0024ba:	f965                	bnez	a0,1c0024aa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x116>
1c0024bc:	a8b1                	j	1c002518 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x184>
1c0024be:	30047873          	csrrci	a6,mstatus,8
1c0024c2:	002046b7          	lui	a3,0x204
1c0024c6:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c0024ca:	23012503          	lw	a0,560(sp)
1c0024ce:	40a6d6b3          	sra	a3,a3,a0
1c0024d2:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0024d6:	ca85                	beqz	a3,1c002506 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x172>
1c0024d8:	10000893          	li	a7,256
1c0024dc:	00204637          	lui	a2,0x204
1c0024e0:	30081073          	csrw	mstatus,a6
1c0024e4:	01162423          	sw	a7,8(a2) # 204008 <__L2+0x184008>
1c0024e8:	03c66683          	p.elw	a3,60(a2)
1c0024ec:	01162223          	sw	a7,4(a2)
1c0024f0:	30047873          	csrrci	a6,mstatus,8
1c0024f4:	40462683          	lw	a3,1028(a2)
1c0024f8:	23012503          	lw	a0,560(sp)
1c0024fc:	40a6d6b3          	sra	a3,a3,a0
1c002500:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002504:	fef1                	bnez	a3,1c0024e0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x14c>
1c002506:	4685                	li	a3,1
1c002508:	00a69533          	sll	a0,a3,a0
1c00250c:	002046b7          	lui	a3,0x204
1c002510:	40a6a223          	sw	a0,1028(a3) # 204404 <__L2+0x184404>
1c002514:	30081073          	csrw	mstatus,a6
1c002518:	100006b7          	lui	a3,0x10000
1c00251c:	01c6a503          	lw	a0,28(a3) # 1000001c <model_L1_Memory>
1c002520:	6685                	lui	a3,0x1
1c002522:	d2868693          	addi	a3,a3,-728 # d28 <__rt_stack_size+0x528>
1c002526:	9536                	add	a0,a0,a3
1c002528:	30047873          	csrrci	a6,mstatus,8
1c00252c:	00204637          	lui	a2,0x204
1c002530:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
1c002534:	000b06b7          	lui	a3,0xb0
1c002538:	02068693          	addi	a3,a3,32 # b0020 <__L2+0x30020>
1c00253c:	c156c6b3          	p.bset	a3,a3,0,21
1c002540:	002048b7          	lui	a7,0x204
1c002544:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
1c002548:	002046b7          	lui	a3,0x204
1c00254c:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
1c002550:	40e6a023          	sw	a4,1024(a3)
1c002554:	20c12823          	sw	a2,528(sp)
1c002558:	22012023          	sw	zero,544(sp)
1c00255c:	30081073          	csrw	mstatus,a6
1c002560:	22012703          	lw	a4,544(sp)
1c002564:	c315                	beqz	a4,1c002588 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x1f4>
1c002566:	22812603          	lw	a2,552(sp)
1c00256a:	02000693          	li	a3,32
1c00256e:	00204737          	lui	a4,0x204
1c002572:	ca25                	beqz	a2,1c0025e2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x24e>
1c002574:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c002578:	03c76603          	p.elw	a2,60(a4)
1c00257c:	00d72223          	sw	a3,4(a4)
1c002580:	22812603          	lw	a2,552(sp)
1c002584:	fa65                	bnez	a2,1c002574 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x1e0>
1c002586:	a8b1                	j	1c0025e2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x24e>
1c002588:	30047573          	csrrci	a0,mstatus,8
1c00258c:	00204737          	lui	a4,0x204
1c002590:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c002594:	21012603          	lw	a2,528(sp)
1c002598:	40c75733          	sra	a4,a4,a2
1c00259c:	fc173733          	p.bclr	a4,a4,30,1
1c0025a0:	cb05                	beqz	a4,1c0025d0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x23c>
1c0025a2:	10000813          	li	a6,256
1c0025a6:	002046b7          	lui	a3,0x204
1c0025aa:	30051073          	csrw	mstatus,a0
1c0025ae:	0106a423          	sw	a6,8(a3) # 204008 <__L2+0x184008>
1c0025b2:	03c6e703          	p.elw	a4,60(a3)
1c0025b6:	0106a223          	sw	a6,4(a3)
1c0025ba:	30047573          	csrrci	a0,mstatus,8
1c0025be:	4046a703          	lw	a4,1028(a3)
1c0025c2:	21012603          	lw	a2,528(sp)
1c0025c6:	40c75733          	sra	a4,a4,a2
1c0025ca:	fc173733          	p.bclr	a4,a4,30,1
1c0025ce:	ff71                	bnez	a4,1c0025aa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x216>
1c0025d0:	4705                	li	a4,1
1c0025d2:	00c71633          	sll	a2,a4,a2
1c0025d6:	00204737          	lui	a4,0x204
1c0025da:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
1c0025de:	30051073          	csrw	mstatus,a0
1c0025e2:	10000737          	lui	a4,0x10000
1c0025e6:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c0025ea:	6705                	lui	a4,0x1
1c0025ec:	d4870713          	addi	a4,a4,-696 # d48 <__rt_stack_size+0x548>
1c0025f0:	963a                	add	a2,a2,a4
1c0025f2:	30047573          	csrrci	a0,mstatus,8
1c0025f6:	002046b7          	lui	a3,0x204
1c0025fa:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c0025fe:	000b0737          	lui	a4,0xb0
1c002602:	02070713          	addi	a4,a4,32 # b0020 <__L2+0x30020>
1c002606:	c1574733          	p.bset	a4,a4,0,21
1c00260a:	00204837          	lui	a6,0x204
1c00260e:	40e82023          	sw	a4,1024(a6) # 204400 <__L2+0x184400>
1c002612:	00204737          	lui	a4,0x204
1c002616:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
1c00261a:	40f72023          	sw	a5,1024(a4)
1c00261e:	1ed12823          	sw	a3,496(sp)
1c002622:	20012023          	sw	zero,512(sp)
1c002626:	30051073          	csrw	mstatus,a0
1c00262a:	20012783          	lw	a5,512(sp)
1c00262e:	c395                	beqz	a5,1c002652 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2be>
1c002630:	20812683          	lw	a3,520(sp)
1c002634:	02000713          	li	a4,32
1c002638:	002047b7          	lui	a5,0x204
1c00263c:	caa5                	beqz	a3,1c0026ac <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x318>
1c00263e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c002642:	03c7e683          	p.elw	a3,60(a5)
1c002646:	00e7a223          	sw	a4,4(a5)
1c00264a:	20812683          	lw	a3,520(sp)
1c00264e:	fae5                	bnez	a3,1c00263e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2aa>
1c002650:	a8b1                	j	1c0026ac <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x318>
1c002652:	30047673          	csrrci	a2,mstatus,8
1c002656:	002047b7          	lui	a5,0x204
1c00265a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00265e:	1f012683          	lw	a3,496(sp)
1c002662:	40d7d7b3          	sra	a5,a5,a3
1c002666:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00266a:	cb85                	beqz	a5,1c00269a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x306>
1c00266c:	10000513          	li	a0,256
1c002670:	00204737          	lui	a4,0x204
1c002674:	30061073          	csrw	mstatus,a2
1c002678:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
1c00267c:	03c76783          	p.elw	a5,60(a4)
1c002680:	00a72223          	sw	a0,4(a4)
1c002684:	30047673          	csrrci	a2,mstatus,8
1c002688:	40472783          	lw	a5,1028(a4)
1c00268c:	1f012683          	lw	a3,496(sp)
1c002690:	40d7d7b3          	sra	a5,a5,a3
1c002694:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002698:	fff1                	bnez	a5,1c002674 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2e0>
1c00269a:	4785                	li	a5,1
1c00269c:	00d796b3          	sll	a3,a5,a3
1c0026a0:	002047b7          	lui	a5,0x204
1c0026a4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0026a8:	30061073          	csrw	mstatus,a2
1c0026ac:	de2e                	sw	a1,60(sp)
1c0026ae:	100007b7          	lui	a5,0x10000
1c0026b2:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c0026b6:	6785                	lui	a5,0x1
1c0026b8:	d6878793          	addi	a5,a5,-664 # d68 <__rt_stack_size+0x568>
1c0026bc:	96be                	add	a3,a3,a5
1c0026be:	30047673          	csrrci	a2,mstatus,8
1c0026c2:	00204737          	lui	a4,0x204
1c0026c6:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c0026ca:	000b07b7          	lui	a5,0xb0
1c0026ce:	0d878793          	addi	a5,a5,216 # b00d8 <__L2+0x300d8>
1c0026d2:	c157c7b3          	p.bset	a5,a5,0,21
1c0026d6:	00204537          	lui	a0,0x204
1c0026da:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
1c0026de:	002047b7          	lui	a5,0x204
1c0026e2:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
1c0026e6:	40b7a023          	sw	a1,1024(a5)
1c0026ea:	1ce12823          	sw	a4,464(sp)
1c0026ee:	1e012023          	sw	zero,480(sp)
1c0026f2:	30061073          	csrw	mstatus,a2
1c0026f6:	d422                	sw	s0,40(sp)
1c0026f8:	1c0107b7          	lui	a5,0x1c010
1c0026fc:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c002700:	099c                	addi	a5,sp,208
1c002702:	4705                	li	a4,1
1c002704:	65400693          	li	a3,1620
1c002708:	0002b637          	lui	a2,0x2b
1c00270c:	8b860613          	addi	a2,a2,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c002710:	962e                	add	a2,a2,a1
1c002712:	85a2                	mv	a1,s0
1c002714:	1c011537          	lui	a0,0x1c011
1c002718:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c00271c:	4ed070ef          	jal	ra,1c00a408 <pi_cl_ram_copy>
1c002720:	16c14783          	lbu	a5,364(sp)
1c002724:	0ff7f793          	andi	a5,a5,255
1c002728:	ef99                	bnez	a5,1c002746 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x3b2>
1c00272a:	4689                	li	a3,2
1c00272c:	00204737          	lui	a4,0x204
1c002730:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c002734:	03c76783          	p.elw	a5,60(a4)
1c002738:	00d72223          	sw	a3,4(a4)
1c00273c:	16c14783          	lbu	a5,364(sp)
1c002740:	0ff7f793          	andi	a5,a5,255
1c002744:	d7f5                	beqz	a5,1c002730 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x39c>
1c002746:	1c0109b7          	lui	s3,0x1c010
1c00274a:	7bc98993          	addi	s3,s3,1980 # 1c0107bc <model_L2_Memory>
1c00274e:	0009a583          	lw	a1,0(s3)
1c002752:	0002b937          	lui	s2,0x2b
1c002756:	f0c90613          	addi	a2,s2,-244 # 2af0c <__L1Cl+0x1af0c>
1c00275a:	099c                	addi	a5,sp,208
1c00275c:	4705                	li	a4,1
1c00275e:	65400693          	li	a3,1620
1c002762:	962e                	add	a2,a2,a1
1c002764:	51040593          	addi	a1,s0,1296
1c002768:	1c011537          	lui	a0,0x1c011
1c00276c:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c002770:	499070ef          	jal	ra,1c00a408 <pi_cl_ram_copy>
1c002774:	0009a783          	lw	a5,0(s3)
1c002778:	8b890913          	addi	s2,s2,-1864
1c00277c:	993e                	add	s2,s2,a5
1c00277e:	10000637          	lui	a2,0x10000
1c002782:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c002786:	00062803          	lw	a6,0(a2)
1c00278a:	300475f3          	csrrci	a1,mstatus,8
1c00278e:	002046b7          	lui	a3,0x204
1c002792:	4006a503          	lw	a0,1024(a3) # 204400 <__L2+0x184400>
1c002796:	000307b7          	lui	a5,0x30
1c00279a:	6547e713          	ori	a4,a5,1620
1c00279e:	c1374733          	p.bset	a4,a4,0,19
1c0027a2:	c1574733          	p.bset	a4,a4,0,21
1c0027a6:	002048b7          	lui	a7,0x204
1c0027aa:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
1c0027ae:	00204737          	lui	a4,0x204
1c0027b2:	41072023          	sw	a6,1024(a4) # 204400 <__L2+0x184400>
1c0027b6:	41272023          	sw	s2,1024(a4)
1c0027ba:	1aa12823          	sw	a0,432(sp)
1c0027be:	1c012023          	sw	zero,448(sp)
1c0027c2:	30059073          	csrw	mstatus,a1
1c0027c6:	4218                	lw	a4,0(a2)
1c0027c8:	6625                	lui	a2,0x9
1c0027ca:	61860613          	addi	a2,a2,1560 # 9618 <__rt_stack_size+0x8e18>
1c0027ce:	9732                	add	a4,a4,a2
1c0027d0:	30047673          	csrrci	a2,mstatus,8
1c0027d4:	4006a683          	lw	a3,1024(a3)
1c0027d8:	0097e793          	ori	a5,a5,9
1c0027dc:	c137c7b3          	p.bset	a5,a5,0,19
1c0027e0:	c157c7b3          	p.bset	a5,a5,0,21
1c0027e4:	002045b7          	lui	a1,0x204
1c0027e8:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c0027ec:	002047b7          	lui	a5,0x204
1c0027f0:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c0027f4:	4097a023          	sw	s1,1024(a5)
1c0027f8:	18d12823          	sw	a3,400(sp)
1c0027fc:	1a012023          	sw	zero,416(sp)
1c002800:	30061073          	csrw	mstatus,a2
1c002804:	1a012783          	lw	a5,416(sp)
1c002808:	c395                	beqz	a5,1c00282c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x498>
1c00280a:	1a812683          	lw	a3,424(sp)
1c00280e:	02000713          	li	a4,32
1c002812:	002047b7          	lui	a5,0x204
1c002816:	caa5                	beqz	a3,1c002886 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4f2>
1c002818:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00281c:	03c7e683          	p.elw	a3,60(a5)
1c002820:	00e7a223          	sw	a4,4(a5)
1c002824:	1a812683          	lw	a3,424(sp)
1c002828:	fae5                	bnez	a3,1c002818 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x484>
1c00282a:	a8b1                	j	1c002886 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4f2>
1c00282c:	30047673          	csrrci	a2,mstatus,8
1c002830:	002047b7          	lui	a5,0x204
1c002834:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c002838:	19012683          	lw	a3,400(sp)
1c00283c:	40d7d7b3          	sra	a5,a5,a3
1c002840:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002844:	cb85                	beqz	a5,1c002874 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4e0>
1c002846:	10000593          	li	a1,256
1c00284a:	00204737          	lui	a4,0x204
1c00284e:	30061073          	csrw	mstatus,a2
1c002852:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c002856:	03c76783          	p.elw	a5,60(a4)
1c00285a:	00b72223          	sw	a1,4(a4)
1c00285e:	30047673          	csrrci	a2,mstatus,8
1c002862:	40472783          	lw	a5,1028(a4)
1c002866:	19012683          	lw	a3,400(sp)
1c00286a:	40d7d7b3          	sra	a5,a5,a3
1c00286e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002872:	fff1                	bnez	a5,1c00284e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4ba>
1c002874:	4785                	li	a5,1
1c002876:	00d796b3          	sll	a3,a5,a3
1c00287a:	002047b7          	lui	a5,0x204
1c00287e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c002882:	30061073          	csrw	mstatus,a2
1c002886:	6785                	lui	a5,0x1
1c002888:	d2878793          	addi	a5,a5,-728 # d28 <__rt_stack_size+0x528>
1c00288c:	c83e                	sw	a5,16(sp)
1c00288e:	65400713          	li	a4,1620
1c002892:	c03a                	sw	a4,0(sp)
1c002894:	51000793          	li	a5,1296
1c002898:	c43e                	sw	a5,8(sp)
1c00289a:	d802                	sw	zero,48(sp)
1c00289c:	78000613          	li	a2,1920
1c0028a0:	c202                	sw	zero,4(sp)
1c0028a2:	4a81                	li	s5,0
1c0028a4:	4b01                	li	s6,0
1c0028a6:	4c81                	li	s9,0
1c0028a8:	d602                	sw	zero,44(sp)
1c0028aa:	00204bb7          	lui	s7,0x204
1c0028ae:	10000c37          	lui	s8,0x10000
1c0028b2:	6805                	lui	a6,0x1
1c0028b4:	d6880813          	addi	a6,a6,-664 # d68 <__rt_stack_size+0x568>
1c0028b8:	dc42                	sw	a6,56(sp)
1c0028ba:	200b8d93          	addi	s11,s7,512 # 204200 <__L2+0x184200>
1c0028be:	8d6e                	mv	s10,s11
1c0028c0:	a38d                	j	1c002e22 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa8e>
1c0028c2:	4501                	li	a0,0
1c0028c4:	ab85                	j	1c002e34 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xaa0>
1c0028c6:	300476f3          	csrrci	a3,mstatus,8
1c0028ca:	404ba783          	lw	a5,1028(s7)
1c0028ce:	1d012703          	lw	a4,464(sp)
1c0028d2:	40e7d7b3          	sra	a5,a5,a4
1c0028d6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0028da:	c795                	beqz	a5,1c002906 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x572>
1c0028dc:	10000593          	li	a1,256
1c0028e0:	30069073          	csrw	mstatus,a3
1c0028e4:	00bba423          	sw	a1,8(s7)
1c0028e8:	03cbe783          	p.elw	a5,60(s7)
1c0028ec:	00bba223          	sw	a1,4(s7)
1c0028f0:	300476f3          	csrrci	a3,mstatus,8
1c0028f4:	404ba783          	lw	a5,1028(s7)
1c0028f8:	1d012703          	lw	a4,464(sp)
1c0028fc:	40e7d7b3          	sra	a5,a5,a4
1c002900:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002904:	fff1                	bnez	a5,1c0028e0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x54c>
1c002906:	4785                	li	a5,1
1c002908:	00e79733          	sll	a4,a5,a4
1c00290c:	40eba223          	sw	a4,1028(s7)
1c002910:	30069073          	csrw	mstatus,a3
1c002914:	e135                	bnez	a0,1c002978 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x5e4>
1c002916:	49e1                	li	s3,24
1c002918:	56b2                	lw	a3,44(sp)
1c00291a:	0a16a963          	p.beqimm	a3,1,1c0029cc <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x638>
1c00291e:	1009d9b3          	p.exthz	s3,s3
1c002922:	3ffff7b7          	lui	a5,0x3ffff
1c002926:	60278793          	addi	a5,a5,1538 # 3ffff602 <__l2_end+0x23fee8ba>
1c00292a:	4742                	lw	a4,16(sp)
1c00292c:	97ba                	add	a5,a5,a4
1c00292e:	078a                	slli	a5,a5,0x2
1c002930:	ca3e                	sw	a5,20(sp)
1c002932:	57b2                	lw	a5,44(sp)
1c002934:	01f7d713          	srli	a4,a5,0x1f
1c002938:	97ba                	add	a5,a5,a4
1c00293a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00293e:	8f99                	sub	a5,a5,a4
1c002940:	0d800713          	li	a4,216
1c002944:	5862                	lw	a6,56(sp)
1c002946:	42e78833          	p.mac	a6,a5,a4
1c00294a:	cc42                	sw	a6,24(sp)
1c00294c:	4542                	lw	a0,16(sp)
1c00294e:	02050513          	addi	a0,a0,32
1c002952:	ce2a                	sw	a0,28(sp)
1c002954:	4761                	li	a4,24
1c002956:	55b2                	lw	a1,44(sp)
1c002958:	0615ac63          	p.beqimm	a1,1,1c0029d0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x63c>
1c00295c:	00271793          	slli	a5,a4,0x2
1c002960:	97ba                	add	a5,a5,a4
1c002962:	0792                	slli	a5,a5,0x4
1c002964:	da3e                	sw	a5,52(sp)
1c002966:	d23e                	sw	a5,36(sp)
1c002968:	4402                	lw	s0,0(sp)
1c00296a:	4692                	lw	a3,4(sp)
1c00296c:	c636                	sw	a3,12(sp)
1c00296e:	c232                	sw	a2,4(sp)
1c002970:	4901                	li	s2,0
1c002972:	0ff00493          	li	s1,255
1c002976:	a4a5                	j	1c002bde <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x84a>
1c002978:	56f2                	lw	a3,60(sp)
1c00297a:	57c2                	lw	a5,48(sp)
1c00297c:	00f68733          	add	a4,a3,a5
1c002980:	5832                	lw	a6,44(sp)
1c002982:	00180793          	addi	a5,a6,1
1c002986:	01f7d693          	srli	a3,a5,0x1f
1c00298a:	97b6                	add	a5,a5,a3
1c00298c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002990:	8f95                	sub	a5,a5,a3
1c002992:	0d800693          	li	a3,216
1c002996:	55e2                	lw	a1,56(sp)
1c002998:	42d785b3          	p.mac	a1,a5,a3
1c00299c:	01cc2783          	lw	a5,28(s8) # 1000001c <model_L1_Memory>
1c0029a0:	97ae                	add	a5,a5,a1
1c0029a2:	300476f3          	csrrci	a3,mstatus,8
1c0029a6:	400ba583          	lw	a1,1024(s7)
1c0029aa:	002b0837          	lui	a6,0x2b0
1c0029ae:	01056533          	or	a0,a0,a6
1c0029b2:	40aba023          	sw	a0,1024(s7)
1c0029b6:	40fba023          	sw	a5,1024(s7)
1c0029ba:	40eba023          	sw	a4,1024(s7)
1c0029be:	1cb12823          	sw	a1,464(sp)
1c0029c2:	1e012023          	sw	zero,480(sp)
1c0029c6:	30069073          	csrw	mstatus,a3
1c0029ca:	b7b1                	j	1c002916 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x582>
1c0029cc:	49a1                	li	s3,8
1c0029ce:	bf81                	j	1c00291e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x58a>
1c0029d0:	4721                	li	a4,8
1c0029d2:	b769                	j	1c00295c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x5c8>
1c0029d4:	5632                	lw	a2,44(sp)
1c0029d6:	54162163          	p.beqimm	a2,1,1c002f18 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb84>
1c0029da:	77b5                	lui	a5,0xfffed
1c0029dc:	55078793          	addi	a5,a5,1360 # fffed550 <pulp__FC+0xfffed551>
1c0029e0:	46a2                	lw	a3,8(sp)
1c0029e2:	96be                	add	a3,a3,a5
1c0029e4:	c436                	sw	a3,8(sp)
1c0029e6:	ac89                	j	1c002c38 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8a4>
1c0029e8:	5732                	lw	a4,44(sp)
1c0029ea:	52172763          	p.beqimm	a4,1,1c002f18 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb84>
1c0029ee:	47a2                	lw	a5,8(sp)
1c0029f0:	51078793          	addi	a5,a5,1296
1c0029f4:	c43e                	sw	a5,8(sp)
1c0029f6:	a489                	j	1c002c38 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8a4>
1c0029f8:	c002                	sw	zero,0(sp)
1c0029fa:	ac81                	j	1c002c4a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8b6>
1c0029fc:	01fb5713          	srli	a4,s6,0x1f
1c002a00:	00eb07b3          	add	a5,s6,a4
1c002a04:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002a08:	8f99                	sub	a5,a5,a4
1c002a0a:	65400713          	li	a4,1620
1c002a0e:	0002b637          	lui	a2,0x2b
1c002a12:	8b860613          	addi	a2,a2,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c002a16:	42e78633          	p.mac	a2,a5,a4
1c002a1a:	1c0107b7          	lui	a5,0x1c010
1c002a1e:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c002a22:	099c                	addi	a5,sp,208
1c002a24:	4705                	li	a4,1
1c002a26:	4682                	lw	a3,0(sp)
1c002a28:	962e                	add	a2,a2,a1
1c002a2a:	5522                	lw	a0,40(sp)
1c002a2c:	4822                	lw	a6,8(sp)
1c002a2e:	010505b3          	add	a1,a0,a6
1c002a32:	1c011537          	lui	a0,0x1c011
1c002a36:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c002a3a:	1cf070ef          	jal	ra,1c00a408 <pi_cl_ram_copy>
1c002a3e:	a42d                	j	1c002c68 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8d4>
1c002a40:	300476f3          	csrrci	a3,mstatus,8
1c002a44:	404ba783          	lw	a5,1028(s7)
1c002a48:	1b012703          	lw	a4,432(sp)
1c002a4c:	40e7d7b3          	sra	a5,a5,a4
1c002a50:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002a54:	c795                	beqz	a5,1c002a80 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6ec>
1c002a56:	10000613          	li	a2,256
1c002a5a:	30069073          	csrw	mstatus,a3
1c002a5e:	00cba423          	sw	a2,8(s7)
1c002a62:	03cbe783          	p.elw	a5,60(s7)
1c002a66:	00cba223          	sw	a2,4(s7)
1c002a6a:	300476f3          	csrrci	a3,mstatus,8
1c002a6e:	404ba783          	lw	a5,1028(s7)
1c002a72:	1b012703          	lw	a4,432(sp)
1c002a76:	40e7d7b3          	sra	a5,a5,a4
1c002a7a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002a7e:	fff1                	bnez	a5,1c002a5a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6c6>
1c002a80:	4785                	li	a5,1
1c002a82:	00e79733          	sll	a4,a5,a4
1c002a86:	40eba223          	sw	a4,1028(s7)
1c002a8a:	30069073          	csrw	mstatus,a3
1c002a8e:	20041163          	bnez	s0,1c002c90 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8fc>
1c002a92:	01cc0a13          	addi	s4,s8,28
1c002a96:	000a2703          	lw	a4,0(s4)
1c002a9a:	01fb5693          	srli	a3,s6,0x1f
1c002a9e:	00db07b3          	add	a5,s6,a3
1c002aa2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002aa6:	8f95                	sub	a5,a5,a3
1c002aa8:	65400693          	li	a3,1620
1c002aac:	85ba                	mv	a1,a4
1c002aae:	42d785b3          	p.mac	a1,a5,a3
1c002ab2:	c72e                	sw	a1,140(sp)
1c002ab4:	09311d23          	sh	s3,154(sp)
1c002ab8:	4662                	lw	a2,24(sp)
1c002aba:	9732                	add	a4,a4,a2
1c002abc:	d13a                	sw	a4,160(sp)
1c002abe:	089ba223          	sw	s1,132(s7)
1c002ac2:	009da023          	sw	s1,0(s11)
1c002ac6:	009d2623          	sw	s1,12(s10)
1c002aca:	1c0086b7          	lui	a3,0x1c008
1c002ace:	9fc68693          	addi	a3,a3,-1540 # 1c0079fc <KerParConv3x3Stride2_SQ8>
1c002ad2:	08dba023          	sw	a3,128(s7)
1c002ad6:	0168                	addi	a0,sp,140
1c002ad8:	08aba023          	sw	a0,128(s7)
1c002adc:	721040ef          	jal	ra,1c0079fc <KerParConv3x3Stride2_SQ8>
1c002ae0:	01cde783          	p.elw	a5,28(s11)
1c002ae4:	0b05                	addi	s6,s6,1
1c002ae6:	07311c23          	sh	s3,120(sp)
1c002aea:	000a2783          	lw	a5,0(s4)
1c002aee:	4842                	lw	a6,16(sp)
1c002af0:	01078733          	add	a4,a5,a6
1c002af4:	c13a                	sw	a4,128(sp)
1c002af6:	4572                	lw	a0,28(sp)
1c002af8:	97aa                	add	a5,a5,a0
1c002afa:	c33e                	sw	a5,132(sp)
1c002afc:	089ba223          	sw	s1,132(s7)
1c002b00:	009d2023          	sw	s1,0(s10)
1c002b04:	009d2623          	sw	s1,12(s10)
1c002b08:	1c0075b7          	lui	a1,0x1c007
1c002b0c:	9ca58593          	addi	a1,a1,-1590 # 1c0069ca <KerParReductIO_CC_SQ8>
1c002b10:	08bba023          	sw	a1,128(s7)
1c002b14:	1888                	addi	a0,sp,112
1c002b16:	08aba023          	sw	a0,128(s7)
1c002b1a:	6b1030ef          	jal	ra,1c0069ca <KerParReductIO_CC_SQ8>
1c002b1e:	01cde783          	p.elw	a5,28(s11)
1c002b22:	05311823          	sh	s3,80(sp)
1c002b26:	01fcd413          	srli	s0,s9,0x1f
1c002b2a:	008c87b3          	add	a5,s9,s0
1c002b2e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002b32:	8f81                	sub	a5,a5,s0
1c002b34:	00479413          	slli	s0,a5,0x4
1c002b38:	8c1d                	sub	s0,s0,a5
1c002b3a:	041e                	slli	s0,s0,0x7
1c002b3c:	6605                	lui	a2,0x1
1c002b3e:	f1860793          	addi	a5,a2,-232 # f18 <__rt_stack_size+0x718>
1c002b42:	943e                	add	s0,s0,a5
1c002b44:	000a2783          	lw	a5,0(s4)
1c002b48:	97a2                	add	a5,a5,s0
1c002b4a:	c6be                	sw	a5,76(sp)
1c002b4c:	089ba223          	sw	s1,132(s7)
1c002b50:	009d2023          	sw	s1,0(s10)
1c002b54:	009d2623          	sw	s1,12(s10)
1c002b58:	1c0087b7          	lui	a5,0x1c008
1c002b5c:	57c78793          	addi	a5,a5,1404 # 1c00857c <KerParPool2x2Stride2_ReLU_SQ8>
1c002b60:	08fba023          	sw	a5,128(s7)
1c002b64:	00a8                	addi	a0,sp,72
1c002b66:	08aba023          	sw	a0,128(s7)
1c002b6a:	213050ef          	jal	ra,1c00857c <KerParPool2x2Stride2_ReLU_SQ8>
1c002b6e:	01cde783          	p.elw	a5,28(s11)
1c002b72:	46b2                	lw	a3,12(sp)
1c002b74:	20069863          	bnez	a3,1c002d84 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9f0>
1c002b78:	01cc2783          	lw	a5,28(s8)
1c002b7c:	943e                	add	s0,s0,a5
1c002b7e:	30047773          	csrrci	a4,mstatus,8
1c002b82:	400ba683          	lw	a3,1024(s7)
1c002b86:	4812                	lw	a6,4(sp)
1c002b88:	100857b3          	p.exthz	a5,a6
1c002b8c:	c517c7b3          	p.bset	a5,a5,2,17
1c002b90:	c157c7b3          	p.bset	a5,a5,0,21
1c002b94:	40fba023          	sw	a5,1024(s7)
1c002b98:	408ba023          	sw	s0,1024(s7)
1c002b9c:	5502                	lw	a0,32(sp)
1c002b9e:	015507b3          	add	a5,a0,s5
1c002ba2:	40fba023          	sw	a5,1024(s7)
1c002ba6:	12c007b7          	lui	a5,0x12c00
1c002baa:	05078793          	addi	a5,a5,80 # 12c00050 <__l1_end+0x2c0000c>
1c002bae:	40fba023          	sw	a5,1024(s7)
1c002bb2:	16d12823          	sw	a3,368(sp)
1c002bb6:	18012023          	sw	zero,384(sp)
1c002bba:	30071073          	csrw	mstatus,a4
1c002bbe:	03b00793          	li	a5,59
1c002bc2:	22f90e63          	beq	s2,a5,1c002dfe <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa6a>
1c002bc6:	050a8a93          	addi	s5,s5,80
1c002bca:	0905                	addi	s2,s2,1
1c002bcc:	0c85                	addi	s9,s9,1
1c002bce:	c642                	sw	a6,12(sp)
1c002bd0:	4402                	lw	s0,0(sp)
1c002bd2:	03c00793          	li	a5,60
1c002bd6:	22f90263          	beq	s2,a5,1c002dfa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa66>
1c002bda:	5712                	lw	a4,36(sp)
1c002bdc:	c23a                	sw	a4,4(sp)
1c002bde:	0d311223          	sh	s3,196(sp)
1c002be2:	01cc2783          	lw	a5,28(s8)
1c002be6:	4852                	lw	a6,20(sp)
1c002be8:	01078733          	add	a4,a5,a6
1c002bec:	c5ba                	sw	a4,200(sp)
1c002bee:	6725                	lui	a4,0x9
1c002bf0:	97ba                	add	a5,a5,a4
1c002bf2:	61d7c783          	lbu	a5,1565(a5)
1c002bf6:	0cf10623          	sb	a5,204(sp)
1c002bfa:	089ba223          	sw	s1,132(s7)
1c002bfe:	009da023          	sw	s1,0(s11)
1c002c02:	009d2623          	sw	s1,12(s10)
1c002c06:	1c007537          	lui	a0,0x1c007
1c002c0a:	a7850513          	addi	a0,a0,-1416 # 1c006a78 <KerParSetBiasB32_SQ8>
1c002c0e:	08aba023          	sw	a0,128(s7)
1c002c12:	1968                	addi	a0,sp,188
1c002c14:	08aba023          	sw	a0,128(s7)
1c002c18:	661030ef          	jal	ra,1c006a78 <KerParSetBiasB32_SQ8>
1c002c1c:	01cde783          	p.elw	a5,28(s11)
1c002c20:	03b00793          	li	a5,59
1c002c24:	dcf902e3          	beq	s2,a5,1c0029e8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x654>
1c002c28:	03a00793          	li	a5,58
1c002c2c:	daf904e3          	beq	s2,a5,1c0029d4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x640>
1c002c30:	45a2                	lw	a1,8(sp)
1c002c32:	51058593          	addi	a1,a1,1296
1c002c36:	c42e                	sw	a1,8(sp)
1c002c38:	16c14783          	lbu	a5,364(sp)
1c002c3c:	0ff7f793          	andi	a5,a5,255
1c002c40:	65400813          	li	a6,1620
1c002c44:	c042                	sw	a6,0(sp)
1c002c46:	da079be3          	bnez	a5,1c0029fc <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x668>
1c002c4a:	4709                	li	a4,2
1c002c4c:	00eba423          	sw	a4,8(s7)
1c002c50:	03cbe783          	p.elw	a5,60(s7)
1c002c54:	00eba223          	sw	a4,4(s7)
1c002c58:	16c14783          	lbu	a5,364(sp)
1c002c5c:	0ff7f793          	andi	a5,a5,255
1c002c60:	d7f5                	beqz	a5,1c002c4c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8b8>
1c002c62:	4802                	lw	a6,0(sp)
1c002c64:	d8081ce3          	bnez	a6,1c0029fc <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x668>
1c002c68:	1c012783          	lw	a5,448(sp)
1c002c6c:	dc078ae3          	beqz	a5,1c002a40 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6ac>
1c002c70:	1c812703          	lw	a4,456(sp)
1c002c74:	02000793          	li	a5,32
1c002c78:	e0070be3          	beqz	a4,1c002a8e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fa>
1c002c7c:	00fba423          	sw	a5,8(s7)
1c002c80:	03cbe703          	p.elw	a4,60(s7)
1c002c84:	00fba223          	sw	a5,4(s7)
1c002c88:	1c812703          	lw	a4,456(sp)
1c002c8c:	fb65                	bnez	a4,1c002c7c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8e8>
1c002c8e:	b501                	j	1c002a8e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fa>
1c002c90:	001b0793          	addi	a5,s6,1
1c002c94:	01f7d713          	srli	a4,a5,0x1f
1c002c98:	97ba                	add	a5,a5,a4
1c002c9a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002c9e:	8f99                	sub	a5,a5,a4
1c002ca0:	65400713          	li	a4,1620
1c002ca4:	02e787b3          	mul	a5,a5,a4
1c002ca8:	1c010737          	lui	a4,0x1c010
1c002cac:	7bc72683          	lw	a3,1980(a4) # 1c0107bc <model_L2_Memory>
1c002cb0:	96be                	add	a3,a3,a5
1c002cb2:	0002b737          	lui	a4,0x2b
1c002cb6:	8b870713          	addi	a4,a4,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c002cba:	9736                	add	a4,a4,a3
1c002cbc:	01cc2603          	lw	a2,28(s8)
1c002cc0:	97b2                	add	a5,a5,a2
1c002cc2:	30047673          	csrrci	a2,mstatus,8
1c002cc6:	01041513          	slli	a0,s0,0x10
1c002cca:	02054963          	bltz	a0,1c002cfc <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x968>
1c002cce:	400ba583          	lw	a1,1024(s7)
1c002cd2:	000306b7          	lui	a3,0x30
1c002cd6:	de0426b3          	p.insert	a3,s0,15,0
1c002cda:	c136c6b3          	p.bset	a3,a3,0,19
1c002cde:	c156c6b3          	p.bset	a3,a3,0,21
1c002ce2:	40dba023          	sw	a3,1024(s7)
1c002ce6:	40fba023          	sw	a5,1024(s7)
1c002cea:	40eba023          	sw	a4,1024(s7)
1c002cee:	1ab12823          	sw	a1,432(sp)
1c002cf2:	1c012023          	sw	zero,448(sp)
1c002cf6:	30061073          	csrw	mstatus,a2
1c002cfa:	bb61                	j	1c002a92 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fe>
1c002cfc:	65a1                	lui	a1,0x8
1c002cfe:	00330537          	lui	a0,0x330
1c002d02:	1aa12a23          	sw	a0,436(sp)
1c002d06:	1cf12223          	sw	a5,452(sp)
1c002d0a:	1ce12423          	sw	a4,456(sp)
1c002d0e:	1a812c23          	sw	s0,440(sp)
1c002d12:	1ab12e23          	sw	a1,444(sp)
1c002d16:	1cb12023          	sw	a1,448(sp)
1c002d1a:	55fd                	li	a1,-1
1c002d1c:	1ab12823          	sw	a1,432(sp)
1c002d20:	1c012623          	sw	zero,460(sp)
1c002d24:	01402583          	lw	a1,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002d28:	c989                	beqz	a1,1c002d3a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9a6>
1c002d2a:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002d2e:	1b18                	addi	a4,sp,432
1c002d30:	cfd8                	sw	a4,28(a5)
1c002d32:	1b1c                	addi	a5,sp,432
1c002d34:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002d38:	bf7d                	j	1c002cf6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x962>
1c002d3a:	65a1                	lui	a1,0x8
1c002d3c:	04b455b3          	p.minu	a1,s0,a1
1c002d40:	00b78533          	add	a0,a5,a1
1c002d44:	1ca12223          	sw	a0,452(sp)
1c002d48:	00033537          	lui	a0,0x33
1c002d4c:	8b850513          	addi	a0,a0,-1864 # 328b8 <__L1Cl+0x228b8>
1c002d50:	96aa                	add	a3,a3,a0
1c002d52:	1cd12423          	sw	a3,456(sp)
1c002d56:	40b405b3          	sub	a1,s0,a1
1c002d5a:	1ab12c23          	sw	a1,440(sp)
1c002d5e:	400ba683          	lw	a3,1024(s7)
1c002d62:	1ad12823          	sw	a3,432(sp)
1c002d66:	003386b7          	lui	a3,0x338
1c002d6a:	40dba023          	sw	a3,1024(s7)
1c002d6e:	40fba023          	sw	a5,1024(s7)
1c002d72:	40eba023          	sw	a4,1024(s7)
1c002d76:	1c012783          	lw	a5,448(sp)
1c002d7a:	dfc5                	beqz	a5,1c002d32 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x99e>
1c002d7c:	1b1c                	addi	a5,sp,432
1c002d7e:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002d82:	bf45                	j	1c002d32 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x99e>
1c002d84:	18012783          	lw	a5,384(sp)
1c002d88:	c38d                	beqz	a5,1c002daa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa16>
1c002d8a:	18812703          	lw	a4,392(sp)
1c002d8e:	02000793          	li	a5,32
1c002d92:	de0703e3          	beqz	a4,1c002b78 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e4>
1c002d96:	00fba423          	sw	a5,8(s7)
1c002d9a:	03cbe703          	p.elw	a4,60(s7)
1c002d9e:	00fba223          	sw	a5,4(s7)
1c002da2:	18812703          	lw	a4,392(sp)
1c002da6:	fb65                	bnez	a4,1c002d96 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa02>
1c002da8:	bbc1                	j	1c002b78 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e4>
1c002daa:	300476f3          	csrrci	a3,mstatus,8
1c002dae:	404ba783          	lw	a5,1028(s7)
1c002db2:	17012703          	lw	a4,368(sp)
1c002db6:	40e7d7b3          	sra	a5,a5,a4
1c002dba:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002dbe:	c795                	beqz	a5,1c002dea <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa56>
1c002dc0:	10000613          	li	a2,256
1c002dc4:	30069073          	csrw	mstatus,a3
1c002dc8:	00cba423          	sw	a2,8(s7)
1c002dcc:	03cbe783          	p.elw	a5,60(s7)
1c002dd0:	00cba223          	sw	a2,4(s7)
1c002dd4:	300476f3          	csrrci	a3,mstatus,8
1c002dd8:	404ba783          	lw	a5,1028(s7)
1c002ddc:	17012703          	lw	a4,368(sp)
1c002de0:	40e7d7b3          	sra	a5,a5,a4
1c002de4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002de8:	fff1                	bnez	a5,1c002dc4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa30>
1c002dea:	4785                	li	a5,1
1c002dec:	00e79733          	sll	a4,a5,a4
1c002df0:	40eba223          	sw	a4,1028(s7)
1c002df4:	30069073          	csrw	mstatus,a3
1c002df8:	b341                	j	1c002b78 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e4>
1c002dfa:	5652                	lw	a2,52(sp)
1c002dfc:	a819                	j	1c002e12 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa7e>
1c002dfe:	55b2                	lw	a1,44(sp)
1c002e00:	1215a463          	p.beqimm	a1,1,1c002f28 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb94>
1c002e04:	67ed                	lui	a5,0x1b
1c002e06:	f9078793          	addi	a5,a5,-112 # 1af90 <__L1Cl+0xaf90>
1c002e0a:	9abe                	add	s5,s5,a5
1c002e0c:	28000613          	li	a2,640
1c002e10:	0c85                	addi	s9,s9,1
1c002e12:	56b2                	lw	a3,44(sp)
1c002e14:	0685                	addi	a3,a3,1
1c002e16:	d636                	sw	a3,44(sp)
1c002e18:	4742                	lw	a4,16(sp)
1c002e1a:	0761                	addi	a4,a4,24
1c002e1c:	c83a                	sw	a4,16(sp)
1c002e1e:	0226af63          	p.beqimm	a3,2,1c002e5c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xac8>
1c002e22:	5532                	lw	a0,44(sp)
1c002e24:	a8152fe3          	p.beqimm	a0,1,1c0028c2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x52e>
1c002e28:	55c2                	lw	a1,48(sp)
1c002e2a:	0d858593          	addi	a1,a1,216 # 80d8 <__rt_stack_size+0x78d8>
1c002e2e:	d82e                	sw	a1,48(sp)
1c002e30:	04800513          	li	a0,72
1c002e34:	1e012783          	lw	a5,480(sp)
1c002e38:	a80787e3          	beqz	a5,1c0028c6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x532>
1c002e3c:	1e812703          	lw	a4,488(sp)
1c002e40:	02000793          	li	a5,32
1c002e44:	ac0708e3          	beqz	a4,1c002914 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x580>
1c002e48:	00fba423          	sw	a5,8(s7)
1c002e4c:	03cbe703          	p.elw	a4,60(s7)
1c002e50:	00fba223          	sw	a5,4(s7)
1c002e54:	1e812703          	lw	a4,488(sp)
1c002e58:	fb65                	bnez	a4,1c002e48 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xab4>
1c002e5a:	bc6d                	j	1c002914 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x580>
1c002e5c:	18012783          	lw	a5,384(sp)
1c002e60:	c395                	beqz	a5,1c002e84 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xaf0>
1c002e62:	18812683          	lw	a3,392(sp)
1c002e66:	02000713          	li	a4,32
1c002e6a:	002047b7          	lui	a5,0x204
1c002e6e:	caa5                	beqz	a3,1c002ede <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb4a>
1c002e70:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c002e74:	03c7e683          	p.elw	a3,60(a5)
1c002e78:	00e7a223          	sw	a4,4(a5)
1c002e7c:	18812683          	lw	a3,392(sp)
1c002e80:	fae5                	bnez	a3,1c002e70 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xadc>
1c002e82:	a8b1                	j	1c002ede <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb4a>
1c002e84:	30047673          	csrrci	a2,mstatus,8
1c002e88:	002047b7          	lui	a5,0x204
1c002e8c:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c002e90:	17012683          	lw	a3,368(sp)
1c002e94:	40d7d7b3          	sra	a5,a5,a3
1c002e98:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002e9c:	cb85                	beqz	a5,1c002ecc <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb38>
1c002e9e:	10000593          	li	a1,256
1c002ea2:	00204737          	lui	a4,0x204
1c002ea6:	30061073          	csrw	mstatus,a2
1c002eaa:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c002eae:	03c76783          	p.elw	a5,60(a4)
1c002eb2:	00b72223          	sw	a1,4(a4)
1c002eb6:	30047673          	csrrci	a2,mstatus,8
1c002eba:	40472783          	lw	a5,1028(a4)
1c002ebe:	17012683          	lw	a3,368(sp)
1c002ec2:	40d7d7b3          	sra	a5,a5,a3
1c002ec6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002eca:	fff1                	bnez	a5,1c002ea6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb12>
1c002ecc:	4785                	li	a5,1
1c002ece:	00d796b3          	sll	a3,a5,a3
1c002ed2:	002047b7          	lui	a5,0x204
1c002ed6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c002eda:	30061073          	csrw	mstatus,a2
1c002ede:	28c12083          	lw	ra,652(sp)
1c002ee2:	28812403          	lw	s0,648(sp)
1c002ee6:	28412483          	lw	s1,644(sp)
1c002eea:	28012903          	lw	s2,640(sp)
1c002eee:	27c12983          	lw	s3,636(sp)
1c002ef2:	27812a03          	lw	s4,632(sp)
1c002ef6:	27412a83          	lw	s5,628(sp)
1c002efa:	27012b03          	lw	s6,624(sp)
1c002efe:	26c12b83          	lw	s7,620(sp)
1c002f02:	26812c03          	lw	s8,616(sp)
1c002f06:	26412c83          	lw	s9,612(sp)
1c002f0a:	26012d03          	lw	s10,608(sp)
1c002f0e:	25c12d83          	lw	s11,604(sp)
1c002f12:	29010113          	addi	sp,sp,656
1c002f16:	8082                	ret
1c002f18:	16c14783          	lbu	a5,364(sp)
1c002f1c:	0ff7f793          	andi	a5,a5,255
1c002f20:	ac078ce3          	beqz	a5,1c0029f8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x664>
1c002f24:	c002                	sw	zero,0(sp)
1c002f26:	b389                	j	1c002c68 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8d4>
1c002f28:	4601                	li	a2,0
1c002f2a:	b5dd                	j	1c002e10 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa7c>

1c002f2c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu>:
1c002f2c:	d6010113          	addi	sp,sp,-672
1c002f30:	28112e23          	sw	ra,668(sp)
1c002f34:	28812c23          	sw	s0,664(sp)
1c002f38:	28912a23          	sw	s1,660(sp)
1c002f3c:	29212823          	sw	s2,656(sp)
1c002f40:	29312623          	sw	s3,652(sp)
1c002f44:	29412423          	sw	s4,648(sp)
1c002f48:	29512223          	sw	s5,644(sp)
1c002f4c:	29612023          	sw	s6,640(sp)
1c002f50:	27712e23          	sw	s7,636(sp)
1c002f54:	27812c23          	sw	s8,632(sp)
1c002f58:	27912a23          	sw	s9,628(sp)
1c002f5c:	27a12823          	sw	s10,624(sp)
1c002f60:	27b12623          	sw	s11,620(sp)
1c002f64:	dc36                	sw	a3,56(sp)
1c002f66:	100006b7          	lui	a3,0x10000
1c002f6a:	01c6a303          	lw	t1,28(a3) # 1000001c <model_L1_Memory>
1c002f6e:	6699                	lui	a3,0x6
1c002f70:	74068693          	addi	a3,a3,1856 # 6740 <__rt_stack_size+0x5f40>
1c002f74:	969a                	add	a3,a3,t1
1c002f76:	c7b6                	sw	a3,204(sp)
1c002f78:	04e00f13          	li	t5,78
1c002f7c:	0de11823          	sh	t5,208(sp)
1c002f80:	4e89                	li	t4,2
1c002f82:	0dd11923          	sh	t4,210(sp)
1c002f86:	02000e13          	li	t3,32
1c002f8a:	0dc11a23          	sh	t3,212(sp)
1c002f8e:	05000893          	li	a7,80
1c002f92:	0b111023          	sh	a7,160(sp)
1c002f96:	0b111123          	sh	a7,162(sp)
1c002f9a:	4891                	li	a7,4
1c002f9c:	0b111223          	sh	a7,164(sp)
1c002fa0:	0b111323          	sh	a7,166(sp)
1c002fa4:	48a1                	li	a7,8
1c002fa6:	0b111423          	sh	a7,168(sp)
1c002faa:	0bc11523          	sh	t3,170(sp)
1c002fae:	0bc11623          	sh	t3,172(sp)
1c002fb2:	dd36                	sw	a3,184(sp)
1c002fb4:	000078d7          	pv.add.sci.b	a7,zero,0
1c002fb8:	df46                	sw	a7,188(sp)
1c002fba:	c136                	sw	a3,128(sp)
1c002fbc:	c336                	sw	a3,132(sp)
1c002fbe:	09c11423          	sh	t3,136(sp)
1c002fc2:	09e11523          	sh	t5,138(sp)
1c002fc6:	09d11623          	sh	t4,140(sp)
1c002fca:	68ad                	lui	a7,0xb
1c002fcc:	54088893          	addi	a7,a7,1344 # b540 <__rt_stack_size+0xad40>
1c002fd0:	989a                	add	a7,a7,t1
1c002fd2:	cd46                	sw	a7,152(sp)
1c002fd4:	ccb6                	sw	a3,88(sp)
1c002fd6:	07e11123          	sh	t5,98(sp)
1c002fda:	07e11223          	sh	t5,100(sp)
1c002fde:	07d11323          	sh	t4,102(sp)
1c002fe2:	07d11423          	sh	t4,104(sp)
1c002fe6:	07c11023          	sh	t3,96(sp)
1c002fea:	00007f57          	pv.add.sci.b	t5,zero,0
1c002fee:	dcfa                	sw	t5,120(sp)
1c002ff0:	4685                	li	a3,1
1c002ff2:	06d10523          	sb	a3,106(sp)
1c002ff6:	06010aa3          	sb	zero,117(sp)
1c002ffa:	dec6                	sw	a7,124(sp)
1c002ffc:	30047e73          	csrrci	t3,mstatus,8
1c003000:	002048b7          	lui	a7,0x204
1c003004:	4008a883          	lw	a7,1024(a7) # 204400 <__L2+0x184400>
1c003008:	000b06b7          	lui	a3,0xb0
1c00300c:	10068693          	addi	a3,a3,256 # b0100 <__L2+0x30100>
1c003010:	c156c6b3          	p.bset	a3,a3,0,21
1c003014:	00204eb7          	lui	t4,0x204
1c003018:	40dea023          	sw	a3,1024(t4) # 204400 <__L2+0x184400>
1c00301c:	6685                	lui	a3,0x1
1c00301e:	40068693          	addi	a3,a3,1024 # 1400 <__rt_stack_size+0xc00>
1c003022:	9336                	add	t1,t1,a3
1c003024:	002046b7          	lui	a3,0x204
1c003028:	4066a023          	sw	t1,1024(a3) # 204400 <__L2+0x184400>
1c00302c:	40c6a023          	sw	a2,1024(a3)
1c003030:	25112023          	sw	a7,576(sp)
1c003034:	24012823          	sw	zero,592(sp)
1c003038:	300e1073          	csrw	mstatus,t3
1c00303c:	25012683          	lw	a3,592(sp)
1c003040:	c685                	beqz	a3,1c003068 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x13c>
1c003042:	25812883          	lw	a7,600(sp)
1c003046:	02000613          	li	a2,32
1c00304a:	002046b7          	lui	a3,0x204
1c00304e:	06088a63          	beqz	a7,1c0030c2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x196>
1c003052:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
1c003056:	03c6e883          	p.elw	a7,60(a3)
1c00305a:	00c6a223          	sw	a2,4(a3)
1c00305e:	25812883          	lw	a7,600(sp)
1c003062:	fe0898e3          	bnez	a7,1c003052 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x126>
1c003066:	a8b1                	j	1c0030c2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x196>
1c003068:	30047373          	csrrci	t1,mstatus,8
1c00306c:	002046b7          	lui	a3,0x204
1c003070:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c003074:	24012883          	lw	a7,576(sp)
1c003078:	4116d6b3          	sra	a3,a3,a7
1c00307c:	fc16b6b3          	p.bclr	a3,a3,30,1
1c003080:	ca85                	beqz	a3,1c0030b0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x184>
1c003082:	10000e13          	li	t3,256
1c003086:	00204637          	lui	a2,0x204
1c00308a:	30031073          	csrw	mstatus,t1
1c00308e:	01c62423          	sw	t3,8(a2) # 204008 <__L2+0x184008>
1c003092:	03c66683          	p.elw	a3,60(a2)
1c003096:	01c62223          	sw	t3,4(a2)
1c00309a:	30047373          	csrrci	t1,mstatus,8
1c00309e:	40462683          	lw	a3,1028(a2)
1c0030a2:	24012883          	lw	a7,576(sp)
1c0030a6:	4116d6b3          	sra	a3,a3,a7
1c0030aa:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0030ae:	fef1                	bnez	a3,1c00308a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x15e>
1c0030b0:	4685                	li	a3,1
1c0030b2:	011698b3          	sll	a7,a3,a7
1c0030b6:	002046b7          	lui	a3,0x204
1c0030ba:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
1c0030be:	30031073          	csrw	mstatus,t1
1c0030c2:	100006b7          	lui	a3,0x10000
1c0030c6:	01c6a883          	lw	a7,28(a3) # 1000001c <model_L1_Memory>
1c0030ca:	6685                	lui	a3,0x1
1c0030cc:	50068693          	addi	a3,a3,1280 # 1500 <__rt_stack_size+0xd00>
1c0030d0:	98b6                	add	a7,a7,a3
1c0030d2:	30047373          	csrrci	t1,mstatus,8
1c0030d6:	00204637          	lui	a2,0x204
1c0030da:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
1c0030de:	000b06b7          	lui	a3,0xb0
1c0030e2:	04068693          	addi	a3,a3,64 # b0040 <__L2+0x30040>
1c0030e6:	c156c6b3          	p.bset	a3,a3,0,21
1c0030ea:	00204e37          	lui	t3,0x204
1c0030ee:	40de2023          	sw	a3,1024(t3) # 204400 <__L2+0x184400>
1c0030f2:	002046b7          	lui	a3,0x204
1c0030f6:	4116a023          	sw	a7,1024(a3) # 204400 <__L2+0x184400>
1c0030fa:	40e6a023          	sw	a4,1024(a3)
1c0030fe:	22c12023          	sw	a2,544(sp)
1c003102:	22012823          	sw	zero,560(sp)
1c003106:	30031073          	csrw	mstatus,t1
1c00310a:	23012703          	lw	a4,560(sp)
1c00310e:	c315                	beqz	a4,1c003132 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x206>
1c003110:	23812603          	lw	a2,568(sp)
1c003114:	02000693          	li	a3,32
1c003118:	00204737          	lui	a4,0x204
1c00311c:	ca25                	beqz	a2,1c00318c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x260>
1c00311e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003122:	03c76603          	p.elw	a2,60(a4)
1c003126:	00d72223          	sw	a3,4(a4)
1c00312a:	23812603          	lw	a2,568(sp)
1c00312e:	fa65                	bnez	a2,1c00311e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x1f2>
1c003130:	a8b1                	j	1c00318c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x260>
1c003132:	300478f3          	csrrci	a7,mstatus,8
1c003136:	00204737          	lui	a4,0x204
1c00313a:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c00313e:	22012603          	lw	a2,544(sp)
1c003142:	40c75733          	sra	a4,a4,a2
1c003146:	fc173733          	p.bclr	a4,a4,30,1
1c00314a:	cb05                	beqz	a4,1c00317a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x24e>
1c00314c:	10000313          	li	t1,256
1c003150:	002046b7          	lui	a3,0x204
1c003154:	30089073          	csrw	mstatus,a7
1c003158:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
1c00315c:	03c6e703          	p.elw	a4,60(a3)
1c003160:	0066a223          	sw	t1,4(a3)
1c003164:	300478f3          	csrrci	a7,mstatus,8
1c003168:	4046a703          	lw	a4,1028(a3)
1c00316c:	22012603          	lw	a2,544(sp)
1c003170:	40c75733          	sra	a4,a4,a2
1c003174:	fc173733          	p.bclr	a4,a4,30,1
1c003178:	ff71                	bnez	a4,1c003154 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x228>
1c00317a:	4705                	li	a4,1
1c00317c:	00c71633          	sll	a2,a4,a2
1c003180:	00204737          	lui	a4,0x204
1c003184:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
1c003188:	30089073          	csrw	mstatus,a7
1c00318c:	10000737          	lui	a4,0x10000
1c003190:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c003194:	6705                	lui	a4,0x1
1c003196:	54070713          	addi	a4,a4,1344 # 1540 <__rt_stack_size+0xd40>
1c00319a:	963a                	add	a2,a2,a4
1c00319c:	300478f3          	csrrci	a7,mstatus,8
1c0031a0:	002046b7          	lui	a3,0x204
1c0031a4:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c0031a8:	000b0737          	lui	a4,0xb0
1c0031ac:	04070713          	addi	a4,a4,64 # b0040 <__L2+0x30040>
1c0031b0:	c1574733          	p.bset	a4,a4,0,21
1c0031b4:	00204337          	lui	t1,0x204
1c0031b8:	40e32023          	sw	a4,1024(t1) # 204400 <__L2+0x184400>
1c0031bc:	00204737          	lui	a4,0x204
1c0031c0:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
1c0031c4:	40f72023          	sw	a5,1024(a4)
1c0031c8:	20d12023          	sw	a3,512(sp)
1c0031cc:	20012823          	sw	zero,528(sp)
1c0031d0:	30089073          	csrw	mstatus,a7
1c0031d4:	21012783          	lw	a5,528(sp)
1c0031d8:	c395                	beqz	a5,1c0031fc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2d0>
1c0031da:	21812683          	lw	a3,536(sp)
1c0031de:	02000713          	li	a4,32
1c0031e2:	002047b7          	lui	a5,0x204
1c0031e6:	caa5                	beqz	a3,1c003256 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x32a>
1c0031e8:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0031ec:	03c7e683          	p.elw	a3,60(a5)
1c0031f0:	00e7a223          	sw	a4,4(a5)
1c0031f4:	21812683          	lw	a3,536(sp)
1c0031f8:	fae5                	bnez	a3,1c0031e8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2bc>
1c0031fa:	a8b1                	j	1c003256 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x32a>
1c0031fc:	30047673          	csrrci	a2,mstatus,8
1c003200:	002047b7          	lui	a5,0x204
1c003204:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003208:	20012683          	lw	a3,512(sp)
1c00320c:	40d7d7b3          	sra	a5,a5,a3
1c003210:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003214:	cb85                	beqz	a5,1c003244 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x318>
1c003216:	10000893          	li	a7,256
1c00321a:	00204737          	lui	a4,0x204
1c00321e:	30061073          	csrw	mstatus,a2
1c003222:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
1c003226:	03c76783          	p.elw	a5,60(a4)
1c00322a:	01172223          	sw	a7,4(a4)
1c00322e:	30047673          	csrrci	a2,mstatus,8
1c003232:	40472783          	lw	a5,1028(a4)
1c003236:	20012683          	lw	a3,512(sp)
1c00323a:	40d7d7b3          	sra	a5,a5,a3
1c00323e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003242:	fff1                	bnez	a5,1c00321e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2f2>
1c003244:	4785                	li	a5,1
1c003246:	00d796b3          	sll	a3,a5,a3
1c00324a:	002047b7          	lui	a5,0x204
1c00324e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c003252:	30061073          	csrw	mstatus,a2
1c003256:	c6ae                	sw	a1,76(sp)
1c003258:	10000637          	lui	a2,0x10000
1c00325c:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c003260:	00062303          	lw	t1,0(a2)
1c003264:	6885                	lui	a7,0x1
1c003266:	58088793          	addi	a5,a7,1408 # 1580 <__rt_stack_size+0xd80>
1c00326a:	933e                	add	t1,t1,a5
1c00326c:	30047e73          	csrrci	t3,mstatus,8
1c003270:	002046b7          	lui	a3,0x204
1c003274:	4006ae83          	lw	t4,1024(a3) # 204400 <__L2+0x184400>
1c003278:	000307b7          	lui	a5,0x30
1c00327c:	6709                	lui	a4,0x2
1c00327e:	40070713          	addi	a4,a4,1024 # 2400 <__rt_stack_size+0x1c00>
1c003282:	8f3e                	mv	t5,a5
1c003284:	de072f33          	p.insert	t5,a4,15,0
1c003288:	c13f4733          	p.bset	a4,t5,0,19
1c00328c:	c1574733          	p.bset	a4,a4,0,21
1c003290:	00204f37          	lui	t5,0x204
1c003294:	40ef2023          	sw	a4,1024(t5) # 204400 <__L2+0x184400>
1c003298:	00204737          	lui	a4,0x204
1c00329c:	40672023          	sw	t1,1024(a4) # 204400 <__L2+0x184400>
1c0032a0:	40b72023          	sw	a1,1024(a4)
1c0032a4:	1fd12023          	sw	t4,480(sp)
1c0032a8:	1e012823          	sw	zero,496(sp)
1c0032ac:	300e1073          	csrw	mstatus,t3
1c0032b0:	ca2a                	sw	a0,20(sp)
1c0032b2:	00062e03          	lw	t3,0(a2)
1c0032b6:	300475f3          	csrrci	a1,mstatus,8
1c0032ba:	4006a303          	lw	t1,1024(a3)
1c0032be:	a0088893          	addi	a7,a7,-1536
1c0032c2:	00070737          	lui	a4,0x70
1c0032c6:	de08a733          	p.insert	a4,a7,15,0
1c0032ca:	c1374733          	p.bset	a4,a4,0,19
1c0032ce:	c1574733          	p.bset	a4,a4,0,21
1c0032d2:	002048b7          	lui	a7,0x204
1c0032d6:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
1c0032da:	00204737          	lui	a4,0x204
1c0032de:	41c72023          	sw	t3,1024(a4) # 204400 <__L2+0x184400>
1c0032e2:	40a72023          	sw	a0,1024(a4)
1c0032e6:	12c00737          	lui	a4,0x12c00
1c0032ea:	14070713          	addi	a4,a4,320 # 12c00140 <__l1_end+0x2c000fc>
1c0032ee:	00204537          	lui	a0,0x204
1c0032f2:	40e52023          	sw	a4,1024(a0) # 204400 <__L2+0x184400>
1c0032f6:	1c612023          	sw	t1,448(sp)
1c0032fa:	1c012823          	sw	zero,464(sp)
1c0032fe:	30059073          	csrw	mstatus,a1
1c003302:	4218                	lw	a4,0(a2)
1c003304:	662d                	lui	a2,0xb
1c003306:	54060613          	addi	a2,a2,1344 # b540 <__rt_stack_size+0xad40>
1c00330a:	9732                	add	a4,a4,a2
1c00330c:	30047673          	csrrci	a2,mstatus,8
1c003310:	4006a683          	lw	a3,1024(a3)
1c003314:	0097e793          	ori	a5,a5,9
1c003318:	c137c7b3          	p.bset	a5,a5,0,19
1c00331c:	c157c7b3          	p.bset	a5,a5,0,21
1c003320:	002045b7          	lui	a1,0x204
1c003324:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c003328:	002047b7          	lui	a5,0x204
1c00332c:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c003330:	4107a023          	sw	a6,1024(a5)
1c003334:	1ad12023          	sw	a3,416(sp)
1c003338:	1a012823          	sw	zero,432(sp)
1c00333c:	30061073          	csrw	mstatus,a2
1c003340:	1b012783          	lw	a5,432(sp)
1c003344:	c395                	beqz	a5,1c003368 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x43c>
1c003346:	1b812683          	lw	a3,440(sp)
1c00334a:	02000713          	li	a4,32
1c00334e:	002047b7          	lui	a5,0x204
1c003352:	caa5                	beqz	a3,1c0033c2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x496>
1c003354:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c003358:	03c7e683          	p.elw	a3,60(a5)
1c00335c:	00e7a223          	sw	a4,4(a5)
1c003360:	1b812683          	lw	a3,440(sp)
1c003364:	fae5                	bnez	a3,1c003354 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x428>
1c003366:	a8b1                	j	1c0033c2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x496>
1c003368:	30047673          	csrrci	a2,mstatus,8
1c00336c:	002047b7          	lui	a5,0x204
1c003370:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003374:	1a012683          	lw	a3,416(sp)
1c003378:	40d7d7b3          	sra	a5,a5,a3
1c00337c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003380:	cb85                	beqz	a5,1c0033b0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x484>
1c003382:	10000593          	li	a1,256
1c003386:	00204737          	lui	a4,0x204
1c00338a:	30061073          	csrw	mstatus,a2
1c00338e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c003392:	03c76783          	p.elw	a5,60(a4)
1c003396:	00b72223          	sw	a1,4(a4)
1c00339a:	30047673          	csrrci	a2,mstatus,8
1c00339e:	40472783          	lw	a5,1028(a4)
1c0033a2:	1a012683          	lw	a3,416(sp)
1c0033a6:	40d7d7b3          	sra	a5,a5,a3
1c0033aa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0033ae:	fff1                	bnez	a5,1c00338a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x45e>
1c0033b0:	4785                	li	a5,1
1c0033b2:	00d796b3          	sll	a3,a5,a3
1c0033b6:	002047b7          	lui	a5,0x204
1c0033ba:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0033be:	30061073          	csrw	mstatus,a2
1c0033c2:	4c01                	li	s8,0
1c0033c4:	c082                	sw	zero,64(sp)
1c0033c6:	4e000613          	li	a2,1248
1c0033ca:	c202                	sw	zero,4(sp)
1c0033cc:	c402                	sw	zero,8(sp)
1c0033ce:	4781                	li	a5,0
1c0033d0:	4c81                	li	s9,0
1c0033d2:	4d01                	li	s10,0
1c0033d4:	de02                	sw	zero,60(sp)
1c0033d6:	00204db7          	lui	s11,0x204
1c0033da:	10000ab7          	lui	s5,0x10000
1c0033de:	6305                	lui	t1,0x1
1c0033e0:	58030313          	addi	t1,t1,1408 # 1580 <__rt_stack_size+0xd80>
1c0033e4:	c49a                	sw	t1,72(sp)
1c0033e6:	200d8b93          	addi	s7,s11,512 # 204200 <__L2+0x184200>
1c0033ea:	8b5e                	mv	s6,s7
1c0033ec:	ab89                	j	1c00393e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa12>
1c0033ee:	4681                	li	a3,0
1c0033f0:	a385                	j	1c003950 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa24>
1c0033f2:	30047573          	csrrci	a0,mstatus,8
1c0033f6:	404da703          	lw	a4,1028(s11)
1c0033fa:	1e012583          	lw	a1,480(sp)
1c0033fe:	40b75733          	sra	a4,a4,a1
1c003402:	fc173733          	p.bclr	a4,a4,30,1
1c003406:	c715                	beqz	a4,1c003432 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x506>
1c003408:	10000813          	li	a6,256
1c00340c:	30051073          	csrw	mstatus,a0
1c003410:	010da423          	sw	a6,8(s11)
1c003414:	03cde703          	p.elw	a4,60(s11)
1c003418:	010da223          	sw	a6,4(s11)
1c00341c:	30047573          	csrrci	a0,mstatus,8
1c003420:	404da703          	lw	a4,1028(s11)
1c003424:	1e012583          	lw	a1,480(sp)
1c003428:	40b75733          	sra	a4,a4,a1
1c00342c:	fc173733          	p.bclr	a4,a4,30,1
1c003430:	ff71                	bnez	a4,1c00340c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4e0>
1c003432:	4705                	li	a4,1
1c003434:	00b715b3          	sll	a1,a4,a1
1c003438:	40bda223          	sw	a1,1028(s11)
1c00343c:	30051073          	csrw	mstatus,a0
1c003440:	e2ad                	bnez	a3,1c0034a2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x576>
1c003442:	5572                	lw	a0,60(sp)
1c003444:	02850713          	addi	a4,a0,40
1c003448:	071e                	slli	a4,a4,0x7
1c00344a:	d23a                	sw	a4,36(sp)
1c00344c:	01f55693          	srli	a3,a0,0x1f
1c003450:	00d50733          	add	a4,a0,a3
1c003454:	fc173733          	p.bclr	a4,a4,30,1
1c003458:	8f15                	sub	a4,a4,a3
1c00345a:	00371693          	slli	a3,a4,0x3
1c00345e:	9736                	add	a4,a4,a3
1c003460:	072a                	slli	a4,a4,0xa
1c003462:	45a6                	lw	a1,72(sp)
1c003464:	972e                	add	a4,a4,a1
1c003466:	d43a                	sw	a4,40(sp)
1c003468:	0a850713          	addi	a4,a0,168
1c00346c:	0716                	slli	a4,a4,0x5
1c00346e:	ce3a                	sw	a4,28(sp)
1c003470:	04070693          	addi	a3,a4,64
1c003474:	d636                	sw	a3,44(sp)
1c003476:	c2ea                	sw	s10,68(sp)
1c003478:	01dd0713          	addi	a4,s10,29
1c00347c:	d83a                	sw	a4,48(sp)
1c00347e:	01cd0893          	addi	a7,s10,28
1c003482:	d046                	sw	a7,32(sp)
1c003484:	4f22                	lw	t5,8(sp)
1c003486:	c87a                	sw	t5,16(sp)
1c003488:	4312                	lw	t1,4(sp)
1c00348a:	c41a                	sw	t1,8(sp)
1c00348c:	c232                	sw	a2,4(sp)
1c00348e:	4532                	lw	a0,12(sp)
1c003490:	cc2a                	sw	a0,24(sp)
1c003492:	c63e                	sw	a5,12(sp)
1c003494:	0ff00493          	li	s1,255
1c003498:	1c0077b7          	lui	a5,0x1c007
1c00349c:	7b878a13          	addi	s4,a5,1976 # 1c0077b8 <KerParConv3x3Stride1_SQ8>
1c0034a0:	a4d9                	j	1c003766 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x83a>
1c0034a2:	4736                	lw	a4,76(sp)
1c0034a4:	4886                	lw	a7,64(sp)
1c0034a6:	01170533          	add	a0,a4,a7
1c0034aa:	5f72                	lw	t5,60(sp)
1c0034ac:	001f0713          	addi	a4,t5,1
1c0034b0:	01f75593          	srli	a1,a4,0x1f
1c0034b4:	972e                	add	a4,a4,a1
1c0034b6:	fc173733          	p.bclr	a4,a4,30,1
1c0034ba:	8f0d                	sub	a4,a4,a1
1c0034bc:	00371593          	slli	a1,a4,0x3
1c0034c0:	972e                	add	a4,a4,a1
1c0034c2:	072a                	slli	a4,a4,0xa
1c0034c4:	4326                	lw	t1,72(sp)
1c0034c6:	971a                	add	a4,a4,t1
1c0034c8:	01caa583          	lw	a1,28(s5) # 1000001c <model_L1_Memory>
1c0034cc:	972e                	add	a4,a4,a1
1c0034ce:	300475f3          	csrrci	a1,mstatus,8
1c0034d2:	400da803          	lw	a6,1024(s11)
1c0034d6:	002b08b7          	lui	a7,0x2b0
1c0034da:	0116e6b3          	or	a3,a3,a7
1c0034de:	40dda023          	sw	a3,1024(s11)
1c0034e2:	40eda023          	sw	a4,1024(s11)
1c0034e6:	40ada023          	sw	a0,1024(s11)
1c0034ea:	1f012023          	sw	a6,480(sp)
1c0034ee:	1e012823          	sw	zero,496(sp)
1c0034f2:	30059073          	csrw	mstatus,a1
1c0034f6:	b7b1                	j	1c003442 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x516>
1c0034f8:	fe4d0793          	addi	a5,s10,-28
1c0034fc:	4896                	lw	a7,68(sp)
1c0034fe:	01178a63          	beq	a5,a7,1c003512 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5e6>
1c003502:	7791                	lui	a5,0xfffe4
1c003504:	ea078793          	addi	a5,a5,-352 # fffe3ea0 <pulp__FC+0xfffe3ea1>
1c003508:	9c3e                	add	s8,s8,a5
1c00350a:	6f05                	lui	t5,0x1
1c00350c:	a00f0813          	addi	a6,t5,-1536 # a00 <__rt_stack_size+0x200>
1c003510:	a0f1                	j	1c0035dc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
1c003512:	5372                	lw	t1,60(sp)
1c003514:	00132863          	p.beqimm	t1,1,1c003524 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5f8>
1c003518:	55d2                	lw	a1,52(sp)
1c00351a:	9c2e                	add	s8,s8,a1
1c00351c:	6605                	lui	a2,0x1
1c00351e:	a0060813          	addi	a6,a2,-1536 # a00 <__rt_stack_size+0x200>
1c003522:	a86d                	j	1c0035dc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
1c003524:	4801                	li	a6,0
1c003526:	a85d                	j	1c0035dc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
1c003528:	30047673          	csrrci	a2,mstatus,8
1c00352c:	404da783          	lw	a5,1028(s11)
1c003530:	1c012683          	lw	a3,448(sp)
1c003534:	40d7d7b3          	sra	a5,a5,a3
1c003538:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00353c:	c795                	beqz	a5,1c003568 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x63c>
1c00353e:	10000593          	li	a1,256
1c003542:	30061073          	csrw	mstatus,a2
1c003546:	00bda423          	sw	a1,8(s11)
1c00354a:	03cde783          	p.elw	a5,60(s11)
1c00354e:	00bda223          	sw	a1,4(s11)
1c003552:	30047673          	csrrci	a2,mstatus,8
1c003556:	404da783          	lw	a5,1028(s11)
1c00355a:	1c012683          	lw	a3,448(sp)
1c00355e:	40d7d7b3          	sra	a5,a5,a3
1c003562:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003566:	fff1                	bnez	a5,1c003542 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x616>
1c003568:	4785                	li	a5,1
1c00356a:	00d796b3          	sll	a3,a5,a3
1c00356e:	40dda223          	sw	a3,1028(s11)
1c003572:	30061073          	csrw	mstatus,a2
1c003576:	08081563          	bnez	a6,1c003600 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6d4>
1c00357a:	01caa683          	lw	a3,28(s5)
1c00357e:	01f75613          	srli	a2,a4,0x1f
1c003582:	00c707b3          	add	a5,a4,a2
1c003586:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00358a:	8f91                	sub	a5,a5,a2
1c00358c:	00279713          	slli	a4,a5,0x2
1c003590:	97ba                	add	a5,a5,a4
1c003592:	07a6                	slli	a5,a5,0x9
1c003594:	97b6                	add	a5,a5,a3
1c003596:	cf3e                	sw	a5,156(sp)
1c003598:	96ca                	add	a3,a3,s2
1c00359a:	d936                	sw	a3,176(sp)
1c00359c:	089da223          	sw	s1,132(s11)
1c0035a0:	009ba023          	sw	s1,0(s7)
1c0035a4:	009b2623          	sw	s1,12(s6)
1c0035a8:	094da023          	sw	s4,128(s11)
1c0035ac:	0968                	addi	a0,sp,156
1c0035ae:	08ada023          	sw	a0,128(s11)
1c0035b2:	206040ef          	jal	ra,1c0077b8 <KerParConv3x3Stride1_SQ8>
1c0035b6:	01cbe783          	p.elw	a5,28(s7)
1c0035ba:	0405                	addi	s0,s0,1
1c0035bc:	04890913          	addi	s2,s2,72
1c0035c0:	08442c63          	p.beqimm	s0,4,1c003658 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x72c>
1c0035c4:	8522                	mv	a0,s0
1c0035c6:	01940733          	add	a4,s0,s9
1c0035ca:	f23427e3          	p.beqimm	s0,3,1c0034f8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5cc>
1c0035ce:	67a5                	lui	a5,0x9
1c0035d0:	60078793          	addi	a5,a5,1536 # 9600 <__rt_stack_size+0x8e00>
1c0035d4:	9c3e                	add	s8,s8,a5
1c0035d6:	6785                	lui	a5,0x1
1c0035d8:	a0078813          	addi	a6,a5,-1536 # a00 <__rt_stack_size+0x200>
1c0035dc:	1d012783          	lw	a5,464(sp)
1c0035e0:	d7a1                	beqz	a5,1c003528 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5fc>
1c0035e2:	1d812683          	lw	a3,472(sp)
1c0035e6:	02000793          	li	a5,32
1c0035ea:	d6d1                	beqz	a3,1c003576 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64a>
1c0035ec:	00fda423          	sw	a5,8(s11)
1c0035f0:	03cde683          	p.elw	a3,60(s11)
1c0035f4:	00fda223          	sw	a5,4(s11)
1c0035f8:	1d812683          	lw	a3,472(sp)
1c0035fc:	fae5                	bnez	a3,1c0035ec <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6c0>
1c0035fe:	bfa5                	j	1c003576 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64a>
1c003600:	954e                	add	a0,a0,s3
1c003602:	01f55693          	srli	a3,a0,0x1f
1c003606:	9536                	add	a0,a0,a3
1c003608:	fc1537b3          	p.bclr	a5,a0,30,1
1c00360c:	8f95                	sub	a5,a5,a3
1c00360e:	00279693          	slli	a3,a5,0x2
1c003612:	97b6                	add	a5,a5,a3
1c003614:	07a6                	slli	a5,a5,0x9
1c003616:	01caa683          	lw	a3,28(s5)
1c00361a:	97b6                	add	a5,a5,a3
1c00361c:	300476f3          	csrrci	a3,mstatus,8
1c003620:	400da603          	lw	a2,1024(s11)
1c003624:	c7084833          	p.bset	a6,a6,3,16
1c003628:	c1584833          	p.bset	a6,a6,0,21
1c00362c:	410da023          	sw	a6,1024(s11)
1c003630:	40fda023          	sw	a5,1024(s11)
1c003634:	48d2                	lw	a7,20(sp)
1c003636:	018887b3          	add	a5,a7,s8
1c00363a:	40fda023          	sw	a5,1024(s11)
1c00363e:	12c007b7          	lui	a5,0x12c00
1c003642:	14078793          	addi	a5,a5,320 # 12c00140 <__l1_end+0x2c000fc>
1c003646:	40fda023          	sw	a5,1024(s11)
1c00364a:	1cc12023          	sw	a2,448(sp)
1c00364e:	1c012823          	sw	zero,464(sp)
1c003652:	30069073          	csrw	mstatus,a3
1c003656:	b715                	j	1c00357a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64e>
1c003658:	0c91                	addi	s9,s9,4
1c00365a:	01ca8993          	addi	s3,s5,28
1c00365e:	0009a783          	lw	a5,0(s3)
1c003662:	4f72                	lw	t5,28(sp)
1c003664:	01e78733          	add	a4,a5,t5
1c003668:	c93a                	sw	a4,144(sp)
1c00366a:	5332                	lw	t1,44(sp)
1c00366c:	979a                	add	a5,a5,t1
1c00366e:	cb3e                	sw	a5,148(sp)
1c003670:	089da223          	sw	s1,132(s11)
1c003674:	009ba023          	sw	s1,0(s7)
1c003678:	009b2623          	sw	s1,12(s6)
1c00367c:	1c0077b7          	lui	a5,0x1c007
1c003680:	9ca78793          	addi	a5,a5,-1590 # 1c0069ca <KerParReductIO_CC_SQ8>
1c003684:	08fda023          	sw	a5,128(s11)
1c003688:	0108                	addi	a0,sp,128
1c00368a:	08ada023          	sw	a0,128(s11)
1c00368e:	33c030ef          	jal	ra,1c0069ca <KerParReductIO_CC_SQ8>
1c003692:	01cbe783          	p.elw	a5,28(s7)
1c003696:	01fd5793          	srli	a5,s10,0x1f
1c00369a:	00fd0433          	add	s0,s10,a5
1c00369e:	fc143433          	p.bclr	s0,s0,30,1
1c0036a2:	8c1d                	sub	s0,s0,a5
1c0036a4:	4e000793          	li	a5,1248
1c0036a8:	02f40433          	mul	s0,s0,a5
1c0036ac:	6919                	lui	s2,0x6
1c0036ae:	d8090913          	addi	s2,s2,-640 # 5d80 <__rt_stack_size+0x5580>
1c0036b2:	9922                	add	s2,s2,s0
1c0036b4:	0009a783          	lw	a5,0(s3)
1c0036b8:	97ca                	add	a5,a5,s2
1c0036ba:	cebe                	sw	a5,92(sp)
1c0036bc:	089da223          	sw	s1,132(s11)
1c0036c0:	009b2023          	sw	s1,0(s6)
1c0036c4:	009b2623          	sw	s1,12(s6)
1c0036c8:	1c0087b7          	lui	a5,0x1c008
1c0036cc:	57c78793          	addi	a5,a5,1404 # 1c00857c <KerParPool2x2Stride2_ReLU_SQ8>
1c0036d0:	08fda023          	sw	a5,128(s11)
1c0036d4:	08a8                	addi	a0,sp,88
1c0036d6:	08ada023          	sw	a0,128(s11)
1c0036da:	6a3040ef          	jal	ra,1c00857c <KerParPool2x2Stride2_ReLU_SQ8>
1c0036de:	01cbe783          	p.elw	a5,28(s7)
1c0036e2:	4522                	lw	a0,8(sp)
1c0036e4:	e969                	bnez	a0,1c0037b6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x88a>
1c0036e6:	45c2                	lw	a1,16(sp)
1c0036e8:	40059463          	bnez	a1,1c003af0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xbc4>
1c0036ec:	1c0107b7          	lui	a5,0x1c010
1c0036f0:	7bc7a783          	lw	a5,1980(a5) # 1c0107bc <model_L2_Memory>
1c0036f4:	943e                	add	s0,s0,a5
1c0036f6:	0002b7b7          	lui	a5,0x2b
1c0036fa:	8b878793          	addi	a5,a5,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c0036fe:	97a2                	add	a5,a5,s0
1c003700:	01caa703          	lw	a4,28(s5)
1c003704:	993a                	add	s2,s2,a4
1c003706:	300476f3          	csrrci	a3,mstatus,8
1c00370a:	4512                	lw	a0,4(sp)
1c00370c:	01051593          	slli	a1,a0,0x10
1c003710:	1805ca63          	bltz	a1,1c0038a4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x978>
1c003714:	400da603          	lw	a2,1024(s11)
1c003718:	00020737          	lui	a4,0x20
1c00371c:	de052733          	p.insert	a4,a0,15,0
1c003720:	c1374733          	p.bset	a4,a4,0,19
1c003724:	c1574733          	p.bset	a4,a4,0,21
1c003728:	40eda023          	sw	a4,1024(s11)
1c00372c:	412da023          	sw	s2,1024(s11)
1c003730:	40fda023          	sw	a5,1024(s11)
1c003734:	18c12023          	sw	a2,384(sp)
1c003738:	18012823          	sw	zero,400(sp)
1c00373c:	30069073          	csrw	mstatus,a3
1c003740:	5f02                	lw	t5,32(sp)
1c003742:	23af0b63          	beq	t5,s10,1c003978 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa4c>
1c003746:	4332                	lw	t1,12(sp)
1c003748:	02730793          	addi	a5,t1,39
1c00374c:	0d05                	addi	s10,s10,1
1c00374e:	cc1a                	sw	t1,24(sp)
1c003750:	4522                	lw	a0,8(sp)
1c003752:	c82a                	sw	a0,16(sp)
1c003754:	55c2                	lw	a1,48(sp)
1c003756:	1da58d63          	beq	a1,s10,1c003930 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa04>
1c00375a:	4592                	lw	a1,4(sp)
1c00375c:	c42e                	sw	a1,8(sp)
1c00375e:	4e000613          	li	a2,1248
1c003762:	c232                	sw	a2,4(sp)
1c003764:	c63e                	sw	a5,12(sp)
1c003766:	01caa783          	lw	a5,28(s5)
1c00376a:	5692                	lw	a3,36(sp)
1c00376c:	00d78733          	add	a4,a5,a3
1c003770:	cdba                	sw	a4,216(sp)
1c003772:	672d                	lui	a4,0xb
1c003774:	97ba                	add	a5,a5,a4
1c003776:	5457c783          	lbu	a5,1349(a5)
1c00377a:	0cf10e23          	sb	a5,220(sp)
1c00377e:	089da223          	sw	s1,132(s11)
1c003782:	009ba023          	sw	s1,0(s7)
1c003786:	009b2623          	sw	s1,12(s6)
1c00378a:	1c007737          	lui	a4,0x1c007
1c00378e:	a7870713          	addi	a4,a4,-1416 # 1c006a78 <KerParSetBiasB32_SQ8>
1c003792:	08eda023          	sw	a4,128(s11)
1c003796:	01e8                	addi	a0,sp,204
1c003798:	08ada023          	sw	a0,128(s11)
1c00379c:	2dc030ef          	jal	ra,1c006a78 <KerParSetBiasB32_SQ8>
1c0037a0:	01cbe783          	p.elw	a5,28(s7)
1c0037a4:	5922                	lw	s2,40(sp)
1c0037a6:	4401                	li	s0,0
1c0037a8:	778d                	lui	a5,0xfffe3
1c0037aa:	c8078793          	addi	a5,a5,-896 # fffe2c80 <pulp__FC+0xfffe2c81>
1c0037ae:	da3e                	sw	a5,52(sp)
1c0037b0:	001c8993          	addi	s3,s9,1
1c0037b4:	bd01                	j	1c0035c4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x698>
1c0037b6:	19012783          	lw	a5,400(sp)
1c0037ba:	c385                	beqz	a5,1c0037da <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8ae>
1c0037bc:	19812703          	lw	a4,408(sp)
1c0037c0:	02000793          	li	a5,32
1c0037c4:	c335                	beqz	a4,1c003828 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8fc>
1c0037c6:	00fda423          	sw	a5,8(s11)
1c0037ca:	03cde703          	p.elw	a4,60(s11)
1c0037ce:	00fda223          	sw	a5,4(s11)
1c0037d2:	19812703          	lw	a4,408(sp)
1c0037d6:	fb65                	bnez	a4,1c0037c6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x89a>
1c0037d8:	a881                	j	1c003828 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8fc>
1c0037da:	300476f3          	csrrci	a3,mstatus,8
1c0037de:	404da783          	lw	a5,1028(s11)
1c0037e2:	18012703          	lw	a4,384(sp)
1c0037e6:	40e7d7b3          	sra	a5,a5,a4
1c0037ea:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0037ee:	c795                	beqz	a5,1c00381a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8ee>
1c0037f0:	10000613          	li	a2,256
1c0037f4:	30069073          	csrw	mstatus,a3
1c0037f8:	00cda423          	sw	a2,8(s11)
1c0037fc:	03cde783          	p.elw	a5,60(s11)
1c003800:	00cda223          	sw	a2,4(s11)
1c003804:	300476f3          	csrrci	a3,mstatus,8
1c003808:	404da783          	lw	a5,1028(s11)
1c00380c:	18012703          	lw	a4,384(sp)
1c003810:	40e7d7b3          	sra	a5,a5,a4
1c003814:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003818:	fff1                	bnez	a5,1c0037f4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8c8>
1c00381a:	4785                	li	a5,1
1c00381c:	00e79733          	sll	a4,a5,a4
1c003820:	40eda223          	sw	a4,1028(s11)
1c003824:	30069073          	csrw	mstatus,a3
1c003828:	4542                	lw	a0,16(sp)
1c00382a:	c50d                	beqz	a0,1c003854 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x928>
1c00382c:	17c14783          	lbu	a5,380(sp)
1c003830:	0ff7f793          	andi	a5,a5,255
1c003834:	e385                	bnez	a5,1c003854 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x928>
1c003836:	4709                	li	a4,2
1c003838:	00eda423          	sw	a4,8(s11)
1c00383c:	03cde783          	p.elw	a5,60(s11)
1c003840:	00eda223          	sw	a4,4(s11)
1c003844:	17c14783          	lbu	a5,380(sp)
1c003848:	0ff7f793          	andi	a5,a5,255
1c00384c:	d7f5                	beqz	a5,1c003838 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x90c>
1c00384e:	45a2                	lw	a1,8(sp)
1c003850:	e8058ee3          	beqz	a1,1c0036ec <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c003854:	fffd0793          	addi	a5,s10,-1
1c003858:	01f7d713          	srli	a4,a5,0x1f
1c00385c:	97ba                	add	a5,a5,a4
1c00385e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003862:	8f99                	sub	a5,a5,a4
1c003864:	4e000713          	li	a4,1248
1c003868:	0002b637          	lui	a2,0x2b
1c00386c:	8b860613          	addi	a2,a2,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c003870:	42e78633          	p.mac	a2,a5,a4
1c003874:	1c0107b7          	lui	a5,0x1c010
1c003878:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c00387c:	0e010893          	addi	a7,sp,224
1c003880:	4801                	li	a6,0
1c003882:	02700793          	li	a5,39
1c003886:	46b00713          	li	a4,1131
1c00388a:	46a2                	lw	a3,8(sp)
1c00388c:	962e                	add	a2,a2,a1
1c00388e:	5f62                	lw	t5,56(sp)
1c003890:	4362                	lw	t1,24(sp)
1c003892:	006f05b3          	add	a1,t5,t1
1c003896:	1c011537          	lui	a0,0x1c011
1c00389a:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c00389e:	3ad060ef          	jal	ra,1c00a44a <pi_cl_ram_copy_2d>
1c0038a2:	b5a9                	j	1c0036ec <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c0038a4:	6721                	lui	a4,0x8
1c0038a6:	00320637          	lui	a2,0x320
1c0038aa:	18c12223          	sw	a2,388(sp)
1c0038ae:	19212a23          	sw	s2,404(sp)
1c0038b2:	18f12c23          	sw	a5,408(sp)
1c0038b6:	4612                	lw	a2,4(sp)
1c0038b8:	18c12423          	sw	a2,392(sp)
1c0038bc:	18e12623          	sw	a4,396(sp)
1c0038c0:	18e12823          	sw	a4,400(sp)
1c0038c4:	577d                	li	a4,-1
1c0038c6:	18e12023          	sw	a4,384(sp)
1c0038ca:	18012e23          	sw	zero,412(sp)
1c0038ce:	01402703          	lw	a4,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0038d2:	cb09                	beqz	a4,1c0038e4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b8>
1c0038d4:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0038d8:	0318                	addi	a4,sp,384
1c0038da:	cfd8                	sw	a4,28(a5)
1c0038dc:	031c                	addi	a5,sp,384
1c0038de:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0038e2:	bda9                	j	1c00373c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x810>
1c0038e4:	6721                	lui	a4,0x8
1c0038e6:	4892                	lw	a7,4(sp)
1c0038e8:	04e8d733          	p.minu	a4,a7,a4
1c0038ec:	00e90633          	add	a2,s2,a4
1c0038f0:	18c12a23          	sw	a2,404(sp)
1c0038f4:	00033637          	lui	a2,0x33
1c0038f8:	8b860613          	addi	a2,a2,-1864 # 328b8 <__L1Cl+0x228b8>
1c0038fc:	9432                	add	s0,s0,a2
1c0038fe:	18812c23          	sw	s0,408(sp)
1c003902:	40e88733          	sub	a4,a7,a4
1c003906:	18e12423          	sw	a4,392(sp)
1c00390a:	400da703          	lw	a4,1024(s11)
1c00390e:	18e12023          	sw	a4,384(sp)
1c003912:	00328737          	lui	a4,0x328
1c003916:	40eda023          	sw	a4,1024(s11)
1c00391a:	412da023          	sw	s2,1024(s11)
1c00391e:	40fda023          	sw	a5,1024(s11)
1c003922:	19012783          	lw	a5,400(sp)
1c003926:	dbdd                	beqz	a5,1c0038dc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b0>
1c003928:	031c                	addi	a5,sp,384
1c00392a:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00392e:	b77d                	j	1c0038dc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b0>
1c003930:	4e000613          	li	a2,1248
1c003934:	5772                	lw	a4,60(sp)
1c003936:	0705                	addi	a4,a4,1
1c003938:	de3a                	sw	a4,60(sp)
1c00393a:	04272b63          	p.beqimm	a4,2,1c003990 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa64>
1c00393e:	5572                	lw	a0,60(sp)
1c003940:	aa1527e3          	p.beqimm	a0,1,1c0033ee <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4c2>
1c003944:	6689                	lui	a3,0x2
1c003946:	40068693          	addi	a3,a3,1024 # 2400 <__rt_stack_size+0x1c00>
1c00394a:	4586                	lw	a1,64(sp)
1c00394c:	95b6                	add	a1,a1,a3
1c00394e:	c0ae                	sw	a1,64(sp)
1c003950:	1f012703          	lw	a4,496(sp)
1c003954:	a8070fe3          	beqz	a4,1c0033f2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4c6>
1c003958:	1f812583          	lw	a1,504(sp)
1c00395c:	02000713          	li	a4,32
1c003960:	ae0580e3          	beqz	a1,1c003440 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x514>
1c003964:	00eda423          	sw	a4,8(s11)
1c003968:	03cde583          	p.elw	a1,60(s11)
1c00396c:	00eda223          	sw	a4,4(s11)
1c003970:	1f812583          	lw	a1,504(sp)
1c003974:	f9e5                	bnez	a1,1c003964 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa38>
1c003976:	b4e9                	j	1c003440 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x514>
1c003978:	5672                	lw	a2,60(sp)
1c00397a:	16162863          	p.beqimm	a2,1,1c003aea <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xbbe>
1c00397e:	67a5                	lui	a5,0x9
1c003980:	91c78793          	addi	a5,a5,-1764 # 891c <__rt_stack_size+0x811c>
1c003984:	46b2                	lw	a3,12(sp)
1c003986:	97b6                	add	a5,a5,a3
1c003988:	4e000613          	li	a2,1248
1c00398c:	0d05                	addi	s10,s10,1
1c00398e:	b75d                	j	1c003934 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa08>
1c003990:	19012783          	lw	a5,400(sp)
1c003994:	c395                	beqz	a5,1c0039b8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa8c>
1c003996:	19812683          	lw	a3,408(sp)
1c00399a:	02000713          	li	a4,32
1c00399e:	002047b7          	lui	a5,0x204
1c0039a2:	caa5                	beqz	a3,1c003a12 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xae6>
1c0039a4:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0039a8:	03c7e683          	p.elw	a3,60(a5)
1c0039ac:	00e7a223          	sw	a4,4(a5)
1c0039b0:	19812683          	lw	a3,408(sp)
1c0039b4:	fae5                	bnez	a3,1c0039a4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa78>
1c0039b6:	a8b1                	j	1c003a12 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xae6>
1c0039b8:	30047673          	csrrci	a2,mstatus,8
1c0039bc:	002047b7          	lui	a5,0x204
1c0039c0:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0039c4:	18012683          	lw	a3,384(sp)
1c0039c8:	40d7d7b3          	sra	a5,a5,a3
1c0039cc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0039d0:	cb85                	beqz	a5,1c003a00 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xad4>
1c0039d2:	10000593          	li	a1,256
1c0039d6:	00204737          	lui	a4,0x204
1c0039da:	30061073          	csrw	mstatus,a2
1c0039de:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c0039e2:	03c76783          	p.elw	a5,60(a4)
1c0039e6:	00b72223          	sw	a1,4(a4)
1c0039ea:	30047673          	csrrci	a2,mstatus,8
1c0039ee:	40472783          	lw	a5,1028(a4)
1c0039f2:	18012683          	lw	a3,384(sp)
1c0039f6:	40d7d7b3          	sra	a5,a5,a3
1c0039fa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0039fe:	fff1                	bnez	a5,1c0039da <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xaae>
1c003a00:	4785                	li	a5,1
1c003a02:	00d796b3          	sll	a3,a5,a3
1c003a06:	002047b7          	lui	a5,0x204
1c003a0a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c003a0e:	30061073          	csrw	mstatus,a2
1c003a12:	47a2                	lw	a5,8(sp)
1c003a14:	c785                	beqz	a5,1c003a3c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb10>
1c003a16:	17c14783          	lbu	a5,380(sp)
1c003a1a:	0ff7f793          	andi	a5,a5,255
1c003a1e:	ef99                	bnez	a5,1c003a3c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb10>
1c003a20:	4689                	li	a3,2
1c003a22:	00204737          	lui	a4,0x204
1c003a26:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003a2a:	03c76783          	p.elw	a5,60(a4)
1c003a2e:	00d72223          	sw	a3,4(a4)
1c003a32:	17c14783          	lbu	a5,380(sp)
1c003a36:	0ff7f793          	andi	a5,a5,255
1c003a3a:	d7f5                	beqz	a5,1c003a26 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xafa>
1c003a3c:	fffd0793          	addi	a5,s10,-1
1c003a40:	01f7d713          	srli	a4,a5,0x1f
1c003a44:	97ba                	add	a5,a5,a4
1c003a46:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003a4a:	8f99                	sub	a5,a5,a4
1c003a4c:	4e000713          	li	a4,1248
1c003a50:	0002b637          	lui	a2,0x2b
1c003a54:	8b860613          	addi	a2,a2,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c003a58:	42e78633          	p.mac	a2,a5,a4
1c003a5c:	1c0107b7          	lui	a5,0x1c010
1c003a60:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c003a64:	0e010893          	addi	a7,sp,224
1c003a68:	4801                	li	a6,0
1c003a6a:	02700793          	li	a5,39
1c003a6e:	46b00713          	li	a4,1131
1c003a72:	4692                	lw	a3,4(sp)
1c003a74:	962e                	add	a2,a2,a1
1c003a76:	5f62                	lw	t5,56(sp)
1c003a78:	4332                	lw	t1,12(sp)
1c003a7a:	006f05b3          	add	a1,t5,t1
1c003a7e:	1c011537          	lui	a0,0x1c011
1c003a82:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c003a86:	1c5060ef          	jal	ra,1c00a44a <pi_cl_ram_copy_2d>
1c003a8a:	17c14783          	lbu	a5,380(sp)
1c003a8e:	0ff7f793          	andi	a5,a5,255
1c003a92:	ef99                	bnez	a5,1c003ab0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb84>
1c003a94:	4689                	li	a3,2
1c003a96:	00204737          	lui	a4,0x204
1c003a9a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003a9e:	03c76783          	p.elw	a5,60(a4)
1c003aa2:	00d72223          	sw	a3,4(a4)
1c003aa6:	17c14783          	lbu	a5,380(sp)
1c003aaa:	0ff7f793          	andi	a5,a5,255
1c003aae:	d7f5                	beqz	a5,1c003a9a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb6e>
1c003ab0:	29c12083          	lw	ra,668(sp)
1c003ab4:	29812403          	lw	s0,664(sp)
1c003ab8:	29412483          	lw	s1,660(sp)
1c003abc:	29012903          	lw	s2,656(sp)
1c003ac0:	28c12983          	lw	s3,652(sp)
1c003ac4:	28812a03          	lw	s4,648(sp)
1c003ac8:	28412a83          	lw	s5,644(sp)
1c003acc:	28012b03          	lw	s6,640(sp)
1c003ad0:	27c12b83          	lw	s7,636(sp)
1c003ad4:	27812c03          	lw	s8,632(sp)
1c003ad8:	27412c83          	lw	s9,628(sp)
1c003adc:	27012d03          	lw	s10,624(sp)
1c003ae0:	26c12d83          	lw	s11,620(sp)
1c003ae4:	2a010113          	addi	sp,sp,672
1c003ae8:	8082                	ret
1c003aea:	47b2                	lw	a5,12(sp)
1c003aec:	4601                	li	a2,0
1c003aee:	bd79                	j	1c00398c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa60>
1c003af0:	17c14783          	lbu	a5,380(sp)
1c003af4:	0ff7f793          	andi	a5,a5,255
1c003af8:	be079ae3          	bnez	a5,1c0036ec <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c003afc:	bb2d                	j	1c003836 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x90a>

1c003afe <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu>:
1c003afe:	d6010113          	addi	sp,sp,-672
1c003b02:	28112e23          	sw	ra,668(sp)
1c003b06:	28812c23          	sw	s0,664(sp)
1c003b0a:	28912a23          	sw	s1,660(sp)
1c003b0e:	29212823          	sw	s2,656(sp)
1c003b12:	29312623          	sw	s3,652(sp)
1c003b16:	29412423          	sw	s4,648(sp)
1c003b1a:	29512223          	sw	s5,644(sp)
1c003b1e:	29612023          	sw	s6,640(sp)
1c003b22:	27712e23          	sw	s7,636(sp)
1c003b26:	27812c23          	sw	s8,632(sp)
1c003b2a:	27912a23          	sw	s9,628(sp)
1c003b2e:	27a12823          	sw	s10,624(sp)
1c003b32:	27b12623          	sw	s11,620(sp)
1c003b36:	84aa                	mv	s1,a0
1c003b38:	c6b6                	sw	a3,76(sp)
1c003b3a:	8442                	mv	s0,a6
1c003b3c:	100006b7          	lui	a3,0x10000
1c003b40:	01c6a803          	lw	a6,28(a3) # 1000001c <model_L1_Memory>
1c003b44:	668d                	lui	a3,0x3
1c003b46:	a3068693          	addi	a3,a3,-1488 # 2a30 <__rt_stack_size+0x2230>
1c003b4a:	96c2                	add	a3,a3,a6
1c003b4c:	c7b6                	sw	a3,204(sp)
1c003b4e:	02400313          	li	t1,36
1c003b52:	0c611823          	sh	t1,208(sp)
1c003b56:	02000893          	li	a7,32
1c003b5a:	0d111a23          	sh	a7,212(sp)
1c003b5e:	02700513          	li	a0,39
1c003b62:	0aa11023          	sh	a0,160(sp)
1c003b66:	02600513          	li	a0,38
1c003b6a:	0aa11123          	sh	a0,162(sp)
1c003b6e:	4511                	li	a0,4
1c003b70:	0aa11423          	sh	a0,168(sp)
1c003b74:	0b111523          	sh	a7,170(sp)
1c003b78:	0aa11623          	sh	a0,172(sp)
1c003b7c:	dd36                	sw	a3,184(sp)
1c003b7e:	00007557          	pv.add.sci.b	a0,zero,0
1c003b82:	df2a                	sw	a0,188(sp)
1c003b84:	c136                	sw	a3,128(sp)
1c003b86:	c336                	sw	a3,132(sp)
1c003b88:	09111423          	sh	a7,136(sp)
1c003b8c:	08611523          	sh	t1,138(sp)
1c003b90:	6531                	lui	a0,0xc
1c003b92:	a3050513          	addi	a0,a0,-1488 # ba30 <__rt_stack_size+0xb230>
1c003b96:	9542                	add	a0,a0,a6
1c003b98:	cd2a                	sw	a0,152(sp)
1c003b9a:	ccb6                	sw	a3,88(sp)
1c003b9c:	06611123          	sh	t1,98(sp)
1c003ba0:	06611223          	sh	t1,100(sp)
1c003ba4:	07111023          	sh	a7,96(sp)
1c003ba8:	000076d7          	pv.add.sci.b	a3,zero,0
1c003bac:	dcb6                	sw	a3,120(sp)
1c003bae:	4685                	li	a3,1
1c003bb0:	06d10523          	sb	a3,106(sp)
1c003bb4:	06010aa3          	sb	zero,117(sp)
1c003bb8:	deaa                	sw	a0,124(sp)
1c003bba:	300478f3          	csrrci	a7,mstatus,8
1c003bbe:	00204537          	lui	a0,0x204
1c003bc2:	40052503          	lw	a0,1024(a0) # 204400 <__L2+0x184400>
1c003bc6:	000b06b7          	lui	a3,0xb0
1c003bca:	20068693          	addi	a3,a3,512 # b0200 <__L2+0x30200>
1c003bce:	c156c6b3          	p.bset	a3,a3,0,21
1c003bd2:	00204337          	lui	t1,0x204
1c003bd6:	40d32023          	sw	a3,1024(t1) # 204400 <__L2+0x184400>
1c003bda:	6685                	lui	a3,0x1
1c003bdc:	c3068693          	addi	a3,a3,-976 # c30 <__rt_stack_size+0x430>
1c003be0:	9836                	add	a6,a6,a3
1c003be2:	002046b7          	lui	a3,0x204
1c003be6:	4106a023          	sw	a6,1024(a3) # 204400 <__L2+0x184400>
1c003bea:	40c6a023          	sw	a2,1024(a3)
1c003bee:	24a12023          	sw	a0,576(sp)
1c003bf2:	24012823          	sw	zero,592(sp)
1c003bf6:	30089073          	csrw	mstatus,a7
1c003bfa:	25012683          	lw	a3,592(sp)
1c003bfe:	c295                	beqz	a3,1c003c22 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x124>
1c003c00:	25812503          	lw	a0,600(sp)
1c003c04:	02000613          	li	a2,32
1c003c08:	002046b7          	lui	a3,0x204
1c003c0c:	c925                	beqz	a0,1c003c7c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x17e>
1c003c0e:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
1c003c12:	03c6e503          	p.elw	a0,60(a3)
1c003c16:	00c6a223          	sw	a2,4(a3)
1c003c1a:	25812503          	lw	a0,600(sp)
1c003c1e:	f965                	bnez	a0,1c003c0e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x110>
1c003c20:	a8b1                	j	1c003c7c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x17e>
1c003c22:	30047873          	csrrci	a6,mstatus,8
1c003c26:	002046b7          	lui	a3,0x204
1c003c2a:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c003c2e:	24012603          	lw	a2,576(sp)
1c003c32:	40c6d6b3          	sra	a3,a3,a2
1c003c36:	fc16b6b3          	p.bclr	a3,a3,30,1
1c003c3a:	ca85                	beqz	a3,1c003c6a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x16c>
1c003c3c:	10000893          	li	a7,256
1c003c40:	00204537          	lui	a0,0x204
1c003c44:	30081073          	csrw	mstatus,a6
1c003c48:	01152423          	sw	a7,8(a0) # 204008 <__L2+0x184008>
1c003c4c:	03c56683          	p.elw	a3,60(a0)
1c003c50:	01152223          	sw	a7,4(a0)
1c003c54:	30047873          	csrrci	a6,mstatus,8
1c003c58:	40452683          	lw	a3,1028(a0)
1c003c5c:	24012603          	lw	a2,576(sp)
1c003c60:	40c6d6b3          	sra	a3,a3,a2
1c003c64:	fc16b6b3          	p.bclr	a3,a3,30,1
1c003c68:	fef1                	bnez	a3,1c003c44 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x146>
1c003c6a:	4685                	li	a3,1
1c003c6c:	00c69633          	sll	a2,a3,a2
1c003c70:	002046b7          	lui	a3,0x204
1c003c74:	40c6a223          	sw	a2,1028(a3) # 204404 <__L2+0x184404>
1c003c78:	30081073          	csrw	mstatus,a6
1c003c7c:	100006b7          	lui	a3,0x10000
1c003c80:	01c6a503          	lw	a0,28(a3) # 1000001c <model_L1_Memory>
1c003c84:	6685                	lui	a3,0x1
1c003c86:	e3068693          	addi	a3,a3,-464 # e30 <__rt_stack_size+0x630>
1c003c8a:	9536                	add	a0,a0,a3
1c003c8c:	30047873          	csrrci	a6,mstatus,8
1c003c90:	00204637          	lui	a2,0x204
1c003c94:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
1c003c98:	000b06b7          	lui	a3,0xb0
1c003c9c:	08068693          	addi	a3,a3,128 # b0080 <__L2+0x30080>
1c003ca0:	c156c6b3          	p.bset	a3,a3,0,21
1c003ca4:	002048b7          	lui	a7,0x204
1c003ca8:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
1c003cac:	002046b7          	lui	a3,0x204
1c003cb0:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
1c003cb4:	40e6a023          	sw	a4,1024(a3)
1c003cb8:	22c12023          	sw	a2,544(sp)
1c003cbc:	22012823          	sw	zero,560(sp)
1c003cc0:	30081073          	csrw	mstatus,a6
1c003cc4:	23012703          	lw	a4,560(sp)
1c003cc8:	c315                	beqz	a4,1c003cec <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x1ee>
1c003cca:	23812603          	lw	a2,568(sp)
1c003cce:	02000693          	li	a3,32
1c003cd2:	00204737          	lui	a4,0x204
1c003cd6:	ca25                	beqz	a2,1c003d46 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x248>
1c003cd8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003cdc:	03c76603          	p.elw	a2,60(a4)
1c003ce0:	00d72223          	sw	a3,4(a4)
1c003ce4:	23812603          	lw	a2,568(sp)
1c003ce8:	fa65                	bnez	a2,1c003cd8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x1da>
1c003cea:	a8b1                	j	1c003d46 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x248>
1c003cec:	30047573          	csrrci	a0,mstatus,8
1c003cf0:	00204737          	lui	a4,0x204
1c003cf4:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c003cf8:	22012683          	lw	a3,544(sp)
1c003cfc:	40d75733          	sra	a4,a4,a3
1c003d00:	fc173733          	p.bclr	a4,a4,30,1
1c003d04:	cb05                	beqz	a4,1c003d34 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x236>
1c003d06:	10000813          	li	a6,256
1c003d0a:	00204637          	lui	a2,0x204
1c003d0e:	30051073          	csrw	mstatus,a0
1c003d12:	01062423          	sw	a6,8(a2) # 204008 <__L2+0x184008>
1c003d16:	03c66703          	p.elw	a4,60(a2)
1c003d1a:	01062223          	sw	a6,4(a2)
1c003d1e:	30047573          	csrrci	a0,mstatus,8
1c003d22:	40462703          	lw	a4,1028(a2)
1c003d26:	22012683          	lw	a3,544(sp)
1c003d2a:	40d75733          	sra	a4,a4,a3
1c003d2e:	fc173733          	p.bclr	a4,a4,30,1
1c003d32:	ff71                	bnez	a4,1c003d0e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x210>
1c003d34:	4705                	li	a4,1
1c003d36:	00d716b3          	sll	a3,a4,a3
1c003d3a:	00204737          	lui	a4,0x204
1c003d3e:	40d72223          	sw	a3,1028(a4) # 204404 <__L2+0x184404>
1c003d42:	30051073          	csrw	mstatus,a0
1c003d46:	10000737          	lui	a4,0x10000
1c003d4a:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c003d4e:	6705                	lui	a4,0x1
1c003d50:	eb070713          	addi	a4,a4,-336 # eb0 <__rt_stack_size+0x6b0>
1c003d54:	963a                	add	a2,a2,a4
1c003d56:	30047573          	csrrci	a0,mstatus,8
1c003d5a:	002046b7          	lui	a3,0x204
1c003d5e:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c003d62:	000b0737          	lui	a4,0xb0
1c003d66:	08070713          	addi	a4,a4,128 # b0080 <__L2+0x30080>
1c003d6a:	c1574733          	p.bset	a4,a4,0,21
1c003d6e:	00204837          	lui	a6,0x204
1c003d72:	40e82023          	sw	a4,1024(a6) # 204400 <__L2+0x184400>
1c003d76:	00204737          	lui	a4,0x204
1c003d7a:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
1c003d7e:	40f72023          	sw	a5,1024(a4)
1c003d82:	20d12023          	sw	a3,512(sp)
1c003d86:	20012823          	sw	zero,528(sp)
1c003d8a:	30051073          	csrw	mstatus,a0
1c003d8e:	21012783          	lw	a5,528(sp)
1c003d92:	c395                	beqz	a5,1c003db6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x2b8>
1c003d94:	21812683          	lw	a3,536(sp)
1c003d98:	02000713          	li	a4,32
1c003d9c:	002047b7          	lui	a5,0x204
1c003da0:	caa5                	beqz	a3,1c003e10 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x312>
1c003da2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c003da6:	03c7e683          	p.elw	a3,60(a5)
1c003daa:	00e7a223          	sw	a4,4(a5)
1c003dae:	21812683          	lw	a3,536(sp)
1c003db2:	fae5                	bnez	a3,1c003da2 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x2a4>
1c003db4:	a8b1                	j	1c003e10 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x312>
1c003db6:	30047673          	csrrci	a2,mstatus,8
1c003dba:	002047b7          	lui	a5,0x204
1c003dbe:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003dc2:	20012703          	lw	a4,512(sp)
1c003dc6:	40e7d7b3          	sra	a5,a5,a4
1c003dca:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003dce:	cb85                	beqz	a5,1c003dfe <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x300>
1c003dd0:	10000513          	li	a0,256
1c003dd4:	002046b7          	lui	a3,0x204
1c003dd8:	30061073          	csrw	mstatus,a2
1c003ddc:	00a6a423          	sw	a0,8(a3) # 204008 <__L2+0x184008>
1c003de0:	03c6e783          	p.elw	a5,60(a3)
1c003de4:	00a6a223          	sw	a0,4(a3)
1c003de8:	30047673          	csrrci	a2,mstatus,8
1c003dec:	4046a783          	lw	a5,1028(a3)
1c003df0:	20012703          	lw	a4,512(sp)
1c003df4:	40e7d7b3          	sra	a5,a5,a4
1c003df8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003dfc:	fff1                	bnez	a5,1c003dd8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x2da>
1c003dfe:	4785                	li	a5,1
1c003e00:	00e79733          	sll	a4,a5,a4
1c003e04:	002047b7          	lui	a5,0x204
1c003e08:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
1c003e0c:	30061073          	csrw	mstatus,a2
1c003e10:	c82e                	sw	a1,16(sp)
1c003e12:	100007b7          	lui	a5,0x10000
1c003e16:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c003e1a:	6785                	lui	a5,0x1
1c003e1c:	f3078793          	addi	a5,a5,-208 # f30 <__rt_stack_size+0x730>
1c003e20:	96be                	add	a3,a3,a5
1c003e22:	30047673          	csrrci	a2,mstatus,8
1c003e26:	00204737          	lui	a4,0x204
1c003e2a:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c003e2e:	000b07b7          	lui	a5,0xb0
1c003e32:	48078793          	addi	a5,a5,1152 # b0480 <__L2+0x30480>
1c003e36:	c157c7b3          	p.bset	a5,a5,0,21
1c003e3a:	00204537          	lui	a0,0x204
1c003e3e:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
1c003e42:	002047b7          	lui	a5,0x204
1c003e46:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
1c003e4a:	40b7a023          	sw	a1,1024(a5)
1c003e4e:	1ee12023          	sw	a4,480(sp)
1c003e52:	1e012823          	sw	zero,496(sp)
1c003e56:	30061073          	csrw	mstatus,a2
1c003e5a:	ca26                	sw	s1,20(sp)
1c003e5c:	1c0107b7          	lui	a5,0x1c010
1c003e60:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c003e64:	0e010893          	addi	a7,sp,224
1c003e68:	4805                	li	a6,1
1c003e6a:	18600793          	li	a5,390
1c003e6e:	46b00713          	li	a4,1131
1c003e72:	61800693          	li	a3,1560
1c003e76:	6631                	lui	a2,0xc
1c003e78:	5b860613          	addi	a2,a2,1464 # c5b8 <__rt_stack_size+0xbdb8>
1c003e7c:	962e                	add	a2,a2,a1
1c003e7e:	85a6                	mv	a1,s1
1c003e80:	1c011537          	lui	a0,0x1c011
1c003e84:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c003e88:	5c2060ef          	jal	ra,1c00a44a <pi_cl_ram_copy_2d>
1c003e8c:	17c14783          	lbu	a5,380(sp)
1c003e90:	0ff7f793          	andi	a5,a5,255
1c003e94:	ef99                	bnez	a5,1c003eb2 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x3b4>
1c003e96:	4689                	li	a3,2
1c003e98:	00204737          	lui	a4,0x204
1c003e9c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003ea0:	03c76783          	p.elw	a5,60(a4)
1c003ea4:	00d72223          	sw	a3,4(a4)
1c003ea8:	17c14783          	lbu	a5,380(sp)
1c003eac:	0ff7f793          	andi	a5,a5,255
1c003eb0:	d7f5                	beqz	a5,1c003e9c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x39e>
1c003eb2:	1c010937          	lui	s2,0x1c010
1c003eb6:	7bc90913          	addi	s2,s2,1980 # 1c0107bc <model_L2_Memory>
1c003eba:	00092583          	lw	a1,0(s2)
1c003ebe:	0e010893          	addi	a7,sp,224
1c003ec2:	4805                	li	a6,1
1c003ec4:	18600793          	li	a5,390
1c003ec8:	46b00713          	li	a4,1131
1c003ecc:	61800693          	li	a3,1560
1c003ed0:	6635                	lui	a2,0xd
1c003ed2:	bd060613          	addi	a2,a2,-1072 # cbd0 <__rt_stack_size+0xc3d0>
1c003ed6:	962e                	add	a2,a2,a1
1c003ed8:	6585                	lui	a1,0x1
1c003eda:	1ac58593          	addi	a1,a1,428 # 11ac <__rt_stack_size+0x9ac>
1c003ede:	95a6                	add	a1,a1,s1
1c003ee0:	1c011537          	lui	a0,0x1c011
1c003ee4:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c003ee8:	562060ef          	jal	ra,1c00a44a <pi_cl_ram_copy_2d>
1c003eec:	00092503          	lw	a0,0(s2)
1c003ef0:	6631                	lui	a2,0xc
1c003ef2:	5b860793          	addi	a5,a2,1464 # c5b8 <__rt_stack_size+0xbdb8>
1c003ef6:	953e                	add	a0,a0,a5
1c003ef8:	100005b7          	lui	a1,0x10000
1c003efc:	01c58593          	addi	a1,a1,28 # 1000001c <model_L1_Memory>
1c003f00:	0005a303          	lw	t1,0(a1)
1c003f04:	30047873          	csrrci	a6,mstatus,8
1c003f08:	002046b7          	lui	a3,0x204
1c003f0c:	4006a883          	lw	a7,1024(a3) # 204400 <__L2+0x184400>
1c003f10:	000307b7          	lui	a5,0x30
1c003f14:	6187e713          	ori	a4,a5,1560
1c003f18:	c1374733          	p.bset	a4,a4,0,19
1c003f1c:	c1574733          	p.bset	a4,a4,0,21
1c003f20:	00204e37          	lui	t3,0x204
1c003f24:	40ee2023          	sw	a4,1024(t3) # 204400 <__L2+0x184400>
1c003f28:	00204737          	lui	a4,0x204
1c003f2c:	40672023          	sw	t1,1024(a4) # 204400 <__L2+0x184400>
1c003f30:	40a72023          	sw	a0,1024(a4)
1c003f34:	1d112023          	sw	a7,448(sp)
1c003f38:	1c012823          	sw	zero,464(sp)
1c003f3c:	30081073          	csrw	mstatus,a6
1c003f40:	4198                	lw	a4,0(a1)
1c003f42:	a3060613          	addi	a2,a2,-1488
1c003f46:	963a                	add	a2,a2,a4
1c003f48:	30047773          	csrrci	a4,mstatus,8
1c003f4c:	4006a683          	lw	a3,1024(a3)
1c003f50:	0097e793          	ori	a5,a5,9
1c003f54:	c137c7b3          	p.bset	a5,a5,0,19
1c003f58:	c157c7b3          	p.bset	a5,a5,0,21
1c003f5c:	002045b7          	lui	a1,0x204
1c003f60:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c003f64:	002047b7          	lui	a5,0x204
1c003f68:	40c7a023          	sw	a2,1024(a5) # 204400 <__L2+0x184400>
1c003f6c:	4087a023          	sw	s0,1024(a5)
1c003f70:	1ad12023          	sw	a3,416(sp)
1c003f74:	1a012823          	sw	zero,432(sp)
1c003f78:	30071073          	csrw	mstatus,a4
1c003f7c:	1b012783          	lw	a5,432(sp)
1c003f80:	c395                	beqz	a5,1c003fa4 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x4a6>
1c003f82:	1b812683          	lw	a3,440(sp)
1c003f86:	02000713          	li	a4,32
1c003f8a:	002047b7          	lui	a5,0x204
1c003f8e:	caa5                	beqz	a3,1c003ffe <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x500>
1c003f90:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c003f94:	03c7e683          	p.elw	a3,60(a5)
1c003f98:	00e7a223          	sw	a4,4(a5)
1c003f9c:	1b812683          	lw	a3,440(sp)
1c003fa0:	fae5                	bnez	a3,1c003f90 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x492>
1c003fa2:	a8b1                	j	1c003ffe <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x500>
1c003fa4:	30047673          	csrrci	a2,mstatus,8
1c003fa8:	002047b7          	lui	a5,0x204
1c003fac:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003fb0:	1a012703          	lw	a4,416(sp)
1c003fb4:	40e7d7b3          	sra	a5,a5,a4
1c003fb8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003fbc:	cb85                	beqz	a5,1c003fec <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x4ee>
1c003fbe:	10000593          	li	a1,256
1c003fc2:	002046b7          	lui	a3,0x204
1c003fc6:	30061073          	csrw	mstatus,a2
1c003fca:	00b6a423          	sw	a1,8(a3) # 204008 <__L2+0x184008>
1c003fce:	03c6e783          	p.elw	a5,60(a3)
1c003fd2:	00b6a223          	sw	a1,4(a3)
1c003fd6:	30047673          	csrrci	a2,mstatus,8
1c003fda:	4046a783          	lw	a5,1028(a3)
1c003fde:	1a012703          	lw	a4,416(sp)
1c003fe2:	40e7d7b3          	sra	a5,a5,a4
1c003fe6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003fea:	fff1                	bnez	a5,1c003fc6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x4c8>
1c003fec:	4785                	li	a5,1
1c003fee:	00e79733          	sll	a4,a5,a4
1c003ff2:	002047b7          	lui	a5,0x204
1c003ff6:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
1c003ffa:	30061073          	csrw	mstatus,a2
1c003ffe:	61800c93          	li	s9,1560
1c004002:	6785                	lui	a5,0x1
1c004004:	1ac78d93          	addi	s11,a5,428 # 11ac <__rt_stack_size+0x9ac>
1c004008:	4b81                	li	s7,0
1c00400a:	04800713          	li	a4,72
1c00400e:	d63a                	sw	a4,44(sp)
1c004010:	90078793          	addi	a5,a5,-1792
1c004014:	d802                	sw	zero,48(sp)
1c004016:	d002                	sw	zero,32(sp)
1c004018:	d202                	sw	zero,36(sp)
1c00401a:	ce02                	sw	zero,28(sp)
1c00401c:	da02                	sw	zero,52(sp)
1c00401e:	10000c37          	lui	s8,0x10000
1c004022:	00204d37          	lui	s10,0x204
1c004026:	200d0b13          	addi	s6,s10,512 # 204200 <__L2+0x184200>
1c00402a:	8a5e                	mv	s4,s7
1c00402c:	8bee                	mv	s7,s11
1c00402e:	8de6                	mv	s11,s9
1c004030:	ad09                	j	1c004642 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb44>
1c004032:	4609                	li	a2,2
1c004034:	cc32                	sw	a2,24(sp)
1c004036:	a1fd                	j	1c004524 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa26>
1c004038:	09c00793          	li	a5,156
1c00403c:	a399                	j	1c004582 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa84>
1c00403e:	09c00793          	li	a5,156
1c004042:	ab81                	j	1c004592 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa94>
1c004044:	4911                	li	s2,4
1c004046:	aba9                	j	1c0045a0 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xaa2>
1c004048:	45b2                	lw	a1,12(sp)
1c00404a:	0235a063          	p.beqimm	a1,3,1c00406a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x56c>
1c00404e:	77f1                	lui	a5,0xffffc
1c004050:	c8078793          	addi	a5,a5,-896 # ffffbc80 <pulp__FC+0xffffbc81>
1c004054:	9a3e                	add	s4,s4,a5
1c004056:	6605                	lui	a2,0x1
1c004058:	1ac60793          	addi	a5,a2,428 # 11ac <__rt_stack_size+0x9ac>
1c00405c:	9bbe                	add	s7,s7,a5
1c00405e:	4696                	lw	a3,68(sp)
1c004060:	c036                	sw	a3,0(sp)
1c004062:	4aa6                	lw	s5,72(sp)
1c004064:	48000593          	li	a1,1152
1c004068:	acbd                	j	1c0042e6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
1c00406a:	5752                	lw	a4,52(sp)
1c00406c:	04372c63          	p.beqimm	a4,3,1c0040c4 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5c6>
1c004070:	480a0a13          	addi	s4,s4,1152
1c004074:	6505                	lui	a0,0x1
1c004076:	1ac50793          	addi	a5,a0,428 # 11ac <__rt_stack_size+0x9ac>
1c00407a:	9bbe                	add	s7,s7,a5
1c00407c:	48000593          	li	a1,1152
1c004080:	18600613          	li	a2,390
1c004084:	c032                	sw	a2,0(sp)
1c004086:	61800a93          	li	s5,1560
1c00408a:	acb1                	j	1c0042e6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
1c00408c:	47b2                	lw	a5,12(sp)
1c00408e:	0037ac63          	p.beqimm	a5,3,1c0040a6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5a8>
1c004092:	77c1                	lui	a5,0xffff0
1c004094:	82478793          	addi	a5,a5,-2012 # fffef824 <pulp__FC+0xfffef825>
1c004098:	9bbe                	add	s7,s7,a5
1c00409a:	4516                	lw	a0,68(sp)
1c00409c:	c02a                	sw	a0,0(sp)
1c00409e:	4aa6                	lw	s5,72(sp)
1c0040a0:	48000593          	li	a1,1152
1c0040a4:	a489                	j	1c0042e6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
1c0040a6:	55d2                	lw	a1,52(sp)
1c0040a8:	0235a163          	p.beqimm	a1,3,1c0040ca <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5cc>
1c0040ac:	77bd                	lui	a5,0xfffef
1c0040ae:	34478793          	addi	a5,a5,836 # fffef344 <pulp__FC+0xfffef345>
1c0040b2:	9bbe                	add	s7,s7,a5
1c0040b4:	48000593          	li	a1,1152
1c0040b8:	18600613          	li	a2,390
1c0040bc:	c032                	sw	a2,0(sp)
1c0040be:	61800a93          	li	s5,1560
1c0040c2:	a415                	j	1c0042e6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
1c0040c4:	4581                	li	a1,0
1c0040c6:	4a81                	li	s5,0
1c0040c8:	ac39                	j	1c0042e6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
1c0040ca:	48000593          	li	a1,1152
1c0040ce:	4a81                	li	s5,0
1c0040d0:	ac19                	j	1c0042e6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
1c0040d2:	300476f3          	csrrci	a3,mstatus,8
1c0040d6:	404d2783          	lw	a5,1028(s10)
1c0040da:	1e012703          	lw	a4,480(sp)
1c0040de:	40e7d7b3          	sra	a5,a5,a4
1c0040e2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0040e6:	c795                	beqz	a5,1c004112 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x614>
1c0040e8:	10000613          	li	a2,256
1c0040ec:	30069073          	csrw	mstatus,a3
1c0040f0:	00cd2423          	sw	a2,8(s10)
1c0040f4:	03cd6783          	p.elw	a5,60(s10)
1c0040f8:	00cd2223          	sw	a2,4(s10)
1c0040fc:	300476f3          	csrrci	a3,mstatus,8
1c004100:	404d2783          	lw	a5,1028(s10)
1c004104:	1e012703          	lw	a4,480(sp)
1c004108:	40e7d7b3          	sra	a5,a5,a4
1c00410c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004110:	fff1                	bnez	a5,1c0040ec <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5ee>
1c004112:	4785                	li	a5,1
1c004114:	00e79733          	sll	a4,a5,a4
1c004118:	40ed2223          	sw	a4,1028(s10)
1c00411c:	30069073          	csrw	mstatus,a3
1c004120:	e5b9                	bnez	a1,1c00416e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x670>
1c004122:	17c14783          	lbu	a5,380(sp)
1c004126:	0ff7f793          	andi	a5,a5,255
1c00412a:	ef89                	bnez	a5,1c004144 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x646>
1c00412c:	4709                	li	a4,2
1c00412e:	00ed2423          	sw	a4,8(s10)
1c004132:	03cd6783          	p.elw	a5,60(s10)
1c004136:	00ed2223          	sw	a4,4(s10)
1c00413a:	17c14783          	lbu	a5,380(sp)
1c00413e:	0ff7f793          	andi	a5,a5,255
1c004142:	d7f5                	beqz	a5,1c00412e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x630>
1c004144:	060a9d63          	bnez	s5,1c0041be <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x6c0>
1c004148:	1d012783          	lw	a5,464(sp)
1c00414c:	cfcd                	beqz	a5,1c004206 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x708>
1c00414e:	1d812703          	lw	a4,472(sp)
1c004152:	02000793          	li	a5,32
1c004156:	0e070f63          	beqz	a4,1c004254 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x756>
1c00415a:	00fd2423          	sw	a5,8(s10)
1c00415e:	03cd6703          	p.elw	a4,60(s10)
1c004162:	00fd2223          	sw	a5,4(s10)
1c004166:	1d812703          	lw	a4,472(sp)
1c00416a:	fb65                	bnez	a4,1c00415a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x65c>
1c00416c:	a0e5                	j	1c004254 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x756>
1c00416e:	46c2                	lw	a3,16(sp)
1c004170:	01468633          	add	a2,a3,s4
1c004174:	00140713          	addi	a4,s0,1
1c004178:	01f75693          	srli	a3,a4,0x1f
1c00417c:	00d707b3          	add	a5,a4,a3
1c004180:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004184:	8f95                	sub	a5,a5,a3
1c004186:	00379713          	slli	a4,a5,0x3
1c00418a:	97ba                	add	a5,a5,a4
1c00418c:	079e                	slli	a5,a5,0x7
1c00418e:	97ce                	add	a5,a5,s3
1c004190:	01cc2703          	lw	a4,28(s8) # 1000001c <model_L1_Memory>
1c004194:	973e                	add	a4,a4,a5
1c004196:	300476f3          	csrrci	a3,mstatus,8
1c00419a:	400d2503          	lw	a0,1024(s10)
1c00419e:	002b07b7          	lui	a5,0x2b0
1c0041a2:	8ddd                	or	a1,a1,a5
1c0041a4:	40bd2023          	sw	a1,1024(s10)
1c0041a8:	40ed2023          	sw	a4,1024(s10)
1c0041ac:	40cd2023          	sw	a2,1024(s10)
1c0041b0:	1ea12023          	sw	a0,480(sp)
1c0041b4:	1e012823          	sw	zero,496(sp)
1c0041b8:	30069073          	csrw	mstatus,a3
1c0041bc:	b79d                	j	1c004122 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x624>
1c0041be:	01f45713          	srli	a4,s0,0x1f
1c0041c2:	00e407b3          	add	a5,s0,a4
1c0041c6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0041ca:	8f99                	sub	a5,a5,a4
1c0041cc:	61800713          	li	a4,1560
1c0041d0:	6631                	lui	a2,0xc
1c0041d2:	5b860613          	addi	a2,a2,1464 # c5b8 <__rt_stack_size+0xbdb8>
1c0041d6:	42e78633          	p.mac	a2,a5,a4
1c0041da:	1c010737          	lui	a4,0x1c010
1c0041de:	7bc72583          	lw	a1,1980(a4) # 1c0107bc <model_L2_Memory>
1c0041e2:	0e010893          	addi	a7,sp,224
1c0041e6:	4805                	li	a6,1
1c0041e8:	4782                	lw	a5,0(sp)
1c0041ea:	46b00713          	li	a4,1131
1c0041ee:	86d6                	mv	a3,s5
1c0041f0:	962e                	add	a2,a2,a1
1c0041f2:	4552                	lw	a0,20(sp)
1c0041f4:	017505b3          	add	a1,a0,s7
1c0041f8:	1c011537          	lui	a0,0x1c011
1c0041fc:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c004200:	24a060ef          	jal	ra,1c00a44a <pi_cl_ram_copy_2d>
1c004204:	b791                	j	1c004148 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x64a>
1c004206:	300476f3          	csrrci	a3,mstatus,8
1c00420a:	404d2783          	lw	a5,1028(s10)
1c00420e:	1c012703          	lw	a4,448(sp)
1c004212:	40e7d7b3          	sra	a5,a5,a4
1c004216:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00421a:	c795                	beqz	a5,1c004246 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x748>
1c00421c:	10000613          	li	a2,256
1c004220:	30069073          	csrw	mstatus,a3
1c004224:	00cd2423          	sw	a2,8(s10)
1c004228:	03cd6783          	p.elw	a5,60(s10)
1c00422c:	00cd2223          	sw	a2,4(s10)
1c004230:	300476f3          	csrrci	a3,mstatus,8
1c004234:	404d2783          	lw	a5,1028(s10)
1c004238:	1c012703          	lw	a4,448(sp)
1c00423c:	40e7d7b3          	sra	a5,a5,a4
1c004240:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004244:	fff1                	bnez	a5,1c004220 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x722>
1c004246:	4785                	li	a5,1
1c004248:	00e79733          	sll	a4,a5,a4
1c00424c:	40ed2223          	sw	a4,1028(s10)
1c004250:	30069073          	csrw	mstatus,a3
1c004254:	0a0d9d63          	bnez	s11,1c00430e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x810>
1c004258:	01cc2683          	lw	a3,28(s8)
1c00425c:	01f45713          	srli	a4,s0,0x1f
1c004260:	00e407b3          	add	a5,s0,a4
1c004264:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004268:	40e78733          	sub	a4,a5,a4
1c00426c:	61800793          	li	a5,1560
1c004270:	85b6                	mv	a1,a3
1c004272:	42f705b3          	p.mac	a1,a4,a5
1c004276:	cf2e                	sw	a1,156(sp)
1c004278:	0b211223          	sh	s2,164(sp)
1c00427c:	0b211323          	sh	s2,166(sp)
1c004280:	00371793          	slli	a5,a4,0x3
1c004284:	97ba                	add	a5,a5,a4
1c004286:	079e                	slli	a5,a5,0x7
1c004288:	97ce                	add	a5,a5,s3
1c00428a:	97b6                	add	a5,a5,a3
1c00428c:	d93e                	sw	a5,176(sp)
1c00428e:	099d2223          	sw	s9,132(s10)
1c004292:	019b2023          	sw	s9,0(s6)
1c004296:	00204637          	lui	a2,0x204
1c00429a:	20060613          	addi	a2,a2,512 # 204200 <__L2+0x184200>
1c00429e:	01962623          	sw	s9,12(a2)
1c0042a2:	1c0076b7          	lui	a3,0x1c007
1c0042a6:	7b868693          	addi	a3,a3,1976 # 1c0077b8 <KerParConv3x3Stride1_SQ8>
1c0042aa:	08dd2023          	sw	a3,128(s10)
1c0042ae:	0968                	addi	a0,sp,156
1c0042b0:	08ad2023          	sw	a0,128(s10)
1c0042b4:	504030ef          	jal	ra,1c0077b8 <KerParConv3x3Stride1_SQ8>
1c0042b8:	01cb6783          	p.elw	a5,28(s6)
1c0042bc:	0485                	addi	s1,s1,1
1c0042be:	0405                	addi	s0,s0,1
1c0042c0:	8dd6                	mv	s11,s5
1c0042c2:	47c1                	li	a5,16
1c0042c4:	12f48a63          	beq	s1,a5,1c0043f8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x8fa>
1c0042c8:	d8f4a0e3          	p.beqimm	s1,15,1c004048 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x54a>
1c0042cc:	480a0a13          	addi	s4,s4,1152
1c0042d0:	dae4aee3          	p.beqimm	s1,14,1c00408c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x58e>
1c0042d4:	6685                	lui	a3,0x1
1c0042d6:	1ac68793          	addi	a5,a3,428 # 11ac <__rt_stack_size+0x9ac>
1c0042da:	9bbe                	add	s7,s7,a5
1c0042dc:	4712                	lw	a4,4(sp)
1c0042de:	c03a                	sw	a4,0(sp)
1c0042e0:	4aa2                	lw	s5,8(sp)
1c0042e2:	48000593          	li	a1,1152
1c0042e6:	1f012783          	lw	a5,496(sp)
1c0042ea:	de0784e3          	beqz	a5,1c0040d2 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5d4>
1c0042ee:	1f812703          	lw	a4,504(sp)
1c0042f2:	02000793          	li	a5,32
1c0042f6:	e20705e3          	beqz	a4,1c004120 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x622>
1c0042fa:	00fd2423          	sw	a5,8(s10)
1c0042fe:	03cd6703          	p.elw	a4,60(s10)
1c004302:	00fd2223          	sw	a5,4(s10)
1c004306:	1f812703          	lw	a4,504(sp)
1c00430a:	fb65                	bnez	a4,1c0042fa <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7fc>
1c00430c:	bd11                	j	1c004120 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x622>
1c00430e:	00140793          	addi	a5,s0,1
1c004312:	01f7d713          	srli	a4,a5,0x1f
1c004316:	97ba                	add	a5,a5,a4
1c004318:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00431c:	8f99                	sub	a5,a5,a4
1c00431e:	61800713          	li	a4,1560
1c004322:	02e787b3          	mul	a5,a5,a4
1c004326:	1c0105b7          	lui	a1,0x1c010
1c00432a:	7bc5a683          	lw	a3,1980(a1) # 1c0107bc <model_L2_Memory>
1c00432e:	96be                	add	a3,a3,a5
1c004330:	6731                	lui	a4,0xc
1c004332:	5b870713          	addi	a4,a4,1464 # c5b8 <__rt_stack_size+0xbdb8>
1c004336:	9736                	add	a4,a4,a3
1c004338:	01cc2603          	lw	a2,28(s8)
1c00433c:	97b2                	add	a5,a5,a2
1c00433e:	300475f3          	csrrci	a1,mstatus,8
1c004342:	100dd633          	p.exthz	a2,s11
1c004346:	010d9513          	slli	a0,s11,0x10
1c00434a:	02054463          	bltz	a0,1c004372 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x874>
1c00434e:	400d2503          	lw	a0,1024(s10)
1c004352:	002b06b7          	lui	a3,0x2b0
1c004356:	8ed1                	or	a3,a3,a2
1c004358:	40dd2023          	sw	a3,1024(s10)
1c00435c:	40fd2023          	sw	a5,1024(s10)
1c004360:	40ed2023          	sw	a4,1024(s10)
1c004364:	1ca12023          	sw	a0,448(sp)
1c004368:	1c012823          	sw	zero,464(sp)
1c00436c:	30059073          	csrw	mstatus,a1
1c004370:	b5e5                	j	1c004258 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x75a>
1c004372:	6521                	lui	a0,0x8
1c004374:	00330837          	lui	a6,0x330
1c004378:	1d012223          	sw	a6,452(sp)
1c00437c:	1cf12a23          	sw	a5,468(sp)
1c004380:	1ce12c23          	sw	a4,472(sp)
1c004384:	1cc12423          	sw	a2,456(sp)
1c004388:	1ca12623          	sw	a0,460(sp)
1c00438c:	1ca12823          	sw	a0,464(sp)
1c004390:	557d                	li	a0,-1
1c004392:	1ca12023          	sw	a0,448(sp)
1c004396:	1c012e23          	sw	zero,476(sp)
1c00439a:	01402503          	lw	a0,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00439e:	c909                	beqz	a0,1c0043b0 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x8b2>
1c0043a0:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0043a4:	0398                	addi	a4,sp,448
1c0043a6:	cfd8                	sw	a4,28(a5)
1c0043a8:	039c                	addi	a5,sp,448
1c0043aa:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0043ae:	bf7d                	j	1c00436c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x86e>
1c0043b0:	6521                	lui	a0,0x8
1c0043b2:	04a65533          	p.minu	a0,a2,a0
1c0043b6:	00a78833          	add	a6,a5,a0
1c0043ba:	1d012a23          	sw	a6,468(sp)
1c0043be:	6851                	lui	a6,0x14
1c0043c0:	5b880813          	addi	a6,a6,1464 # 145b8 <__L1Cl+0x45b8>
1c0043c4:	96c2                	add	a3,a3,a6
1c0043c6:	1cd12c23          	sw	a3,472(sp)
1c0043ca:	40a606b3          	sub	a3,a2,a0
1c0043ce:	1cd12423          	sw	a3,456(sp)
1c0043d2:	400d2683          	lw	a3,1024(s10)
1c0043d6:	1cd12023          	sw	a3,448(sp)
1c0043da:	003386b7          	lui	a3,0x338
1c0043de:	40dd2023          	sw	a3,1024(s10)
1c0043e2:	40fd2023          	sw	a5,1024(s10)
1c0043e6:	40ed2023          	sw	a4,1024(s10)
1c0043ea:	1d012783          	lw	a5,464(sp)
1c0043ee:	dfcd                	beqz	a5,1c0043a8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x8aa>
1c0043f0:	039c                	addi	a5,sp,448
1c0043f2:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0043f6:	bf4d                	j	1c0043a8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x8aa>
1c0043f8:	5712                	lw	a4,36(sp)
1c0043fa:	0741                	addi	a4,a4,16
1c0043fc:	d23a                	sw	a4,36(sp)
1c0043fe:	47e2                	lw	a5,24(sp)
1c004400:	08f11623          	sh	a5,140(sp)
1c004404:	01cc0413          	addi	s0,s8,28
1c004408:	401c                	lw	a5,0(s0)
1c00440a:	4506                	lw	a0,64(sp)
1c00440c:	00a78733          	add	a4,a5,a0
1c004410:	c93a                	sw	a4,144(sp)
1c004412:	55f2                	lw	a1,60(sp)
1c004414:	97ae                	add	a5,a5,a1
1c004416:	cb3e                	sw	a5,148(sp)
1c004418:	099d2223          	sw	s9,132(s10)
1c00441c:	019b2023          	sw	s9,0(s6)
1c004420:	00204637          	lui	a2,0x204
1c004424:	20060613          	addi	a2,a2,512 # 204200 <__L2+0x184200>
1c004428:	01962623          	sw	s9,12(a2)
1c00442c:	1c0077b7          	lui	a5,0x1c007
1c004430:	9ca78793          	addi	a5,a5,-1590 # 1c0069ca <KerParReductIO_CC_SQ8>
1c004434:	08fd2023          	sw	a5,128(s10)
1c004438:	0108                	addi	a0,sp,128
1c00443a:	08ad2023          	sw	a0,128(s10)
1c00443e:	58c020ef          	jal	ra,1c0069ca <KerParReductIO_CC_SQ8>
1c004442:	01cb6783          	p.elw	a5,28(s6)
1c004446:	46e2                	lw	a3,24(sp)
1c004448:	06d11323          	sh	a3,102(sp)
1c00444c:	06d11423          	sh	a3,104(sp)
1c004450:	47f2                	lw	a5,28(sp)
1c004452:	01f7d713          	srli	a4,a5,0x1f
1c004456:	97ba                	add	a5,a5,a4
1c004458:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00445c:	8f99                	sub	a5,a5,a4
1c00445e:	00379493          	slli	s1,a5,0x3
1c004462:	94be                	add	s1,s1,a5
1c004464:	04a2                	slli	s1,s1,0x8
1c004466:	6789                	lui	a5,0x2
1c004468:	83078793          	addi	a5,a5,-2000 # 1830 <__rt_stack_size+0x1030>
1c00446c:	94be                	add	s1,s1,a5
1c00446e:	401c                	lw	a5,0(s0)
1c004470:	97a6                	add	a5,a5,s1
1c004472:	cebe                	sw	a5,92(sp)
1c004474:	099d2223          	sw	s9,132(s10)
1c004478:	00204537          	lui	a0,0x204
1c00447c:	20050513          	addi	a0,a0,512 # 204200 <__L2+0x184200>
1c004480:	01952023          	sw	s9,0(a0)
1c004484:	01952623          	sw	s9,12(a0)
1c004488:	1c0087b7          	lui	a5,0x1c008
1c00448c:	57c78793          	addi	a5,a5,1404 # 1c00857c <KerParPool2x2Stride2_ReLU_SQ8>
1c004490:	08fd2023          	sw	a5,128(s10)
1c004494:	08a8                	addi	a0,sp,88
1c004496:	08ad2023          	sw	a0,128(s10)
1c00449a:	0e2040ef          	jal	ra,1c00857c <KerParPool2x2Stride2_ReLU_SQ8>
1c00449e:	01cb6783          	p.elw	a5,28(s6)
1c0044a2:	55c2                	lw	a1,48(sp)
1c0044a4:	10059663          	bnez	a1,1c0045b0 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xab2>
1c0044a8:	01cc2783          	lw	a5,28(s8)
1c0044ac:	94be                	add	s1,s1,a5
1c0044ae:	30047773          	csrrci	a4,mstatus,8
1c0044b2:	400d2683          	lw	a3,1024(s10)
1c0044b6:	5622                	lw	a2,40(sp)
1c0044b8:	100657b3          	p.exthz	a5,a2
1c0044bc:	c517c7b3          	p.bset	a5,a5,2,17
1c0044c0:	c157c7b3          	p.bset	a5,a5,0,21
1c0044c4:	40fd2023          	sw	a5,1024(s10)
1c0044c8:	409d2023          	sw	s1,1024(s10)
1c0044cc:	4536                	lw	a0,76(sp)
1c0044ce:	5582                	lw	a1,32(sp)
1c0044d0:	00b507b3          	add	a5,a0,a1
1c0044d4:	40fd2023          	sw	a5,1024(s10)
1c0044d8:	00ea07b7          	lui	a5,0xea0
1c0044dc:	5632                	lw	a2,44(sp)
1c0044de:	8fd1                	or	a5,a5,a2
1c0044e0:	40fd2023          	sw	a5,1024(s10)
1c0044e4:	18d12023          	sw	a3,384(sp)
1c0044e8:	18012823          	sw	zero,400(sp)
1c0044ec:	30071073          	csrw	mstatus,a4
1c0044f0:	46b2                	lw	a3,12(sp)
1c0044f2:	1836a163          	p.beqimm	a3,3,1c004674 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb76>
1c0044f6:	04858593          	addi	a1,a1,72
1c0044fa:	d02e                	sw	a1,32(sp)
1c0044fc:	2426af63          	p.beqimm	a3,2,1c00475a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc5c>
1c004500:	0685                	addi	a3,a3,1
1c004502:	c636                	sw	a3,12(sp)
1c004504:	4772                	lw	a4,28(sp)
1c004506:	0705                	addi	a4,a4,1
1c004508:	ce3a                	sw	a4,28(sp)
1c00450a:	1046ae63          	p.beqimm	a3,4,1c004626 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb28>
1c00450e:	04800793          	li	a5,72
1c004512:	d63e                	sw	a5,44(sp)
1c004514:	6785                	lui	a5,0x1
1c004516:	90078793          	addi	a5,a5,-1792 # 900 <__rt_stack_size+0x100>
1c00451a:	4532                	lw	a0,12(sp)
1c00451c:	b0352be3          	p.beqimm	a0,3,1c004032 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x534>
1c004520:	45a1                	li	a1,8
1c004522:	cc2e                	sw	a1,24(sp)
1c004524:	56a2                	lw	a3,40(sp)
1c004526:	d836                	sw	a3,48(sp)
1c004528:	d43e                	sw	a5,40(sp)
1c00452a:	8dd6                	mv	s11,s5
1c00452c:	4762                	lw	a4,24(sp)
1c00452e:	0ce11923          	sh	a4,210(sp)
1c004532:	01cc2783          	lw	a5,28(s8)
1c004536:	5562                	lw	a0,56(sp)
1c004538:	00a78733          	add	a4,a5,a0
1c00453c:	cdba                	sw	a4,216(sp)
1c00453e:	6731                	lui	a4,0xc
1c004540:	97ba                	add	a5,a5,a4
1c004542:	a357c783          	lbu	a5,-1483(a5)
1c004546:	0cf10e23          	sb	a5,220(sp)
1c00454a:	099d2223          	sw	s9,132(s10)
1c00454e:	019b2023          	sw	s9,0(s6)
1c004552:	002045b7          	lui	a1,0x204
1c004556:	20058593          	addi	a1,a1,512 # 204200 <__L2+0x184200>
1c00455a:	0195a623          	sw	s9,12(a1)
1c00455e:	1c007637          	lui	a2,0x1c007
1c004562:	a7860613          	addi	a2,a2,-1416 # 1c006a78 <KerParSetBiasB32_SQ8>
1c004566:	08cd2023          	sw	a2,128(s10)
1c00456a:	01e8                	addi	a0,sp,204
1c00456c:	08ad2023          	sw	a0,128(s10)
1c004570:	508020ef          	jal	ra,1c006a78 <KerParSetBiasB32_SQ8>
1c004574:	01cb6783          	p.elw	a5,28(s6)
1c004578:	18600793          	li	a5,390
1c00457c:	46b2                	lw	a3,12(sp)
1c00457e:	aa26ade3          	p.beqimm	a3,2,1c004038 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x53a>
1c004582:	c2be                	sw	a5,68(sp)
1c004584:	078a                	slli	a5,a5,0x2
1c004586:	c4be                	sw	a5,72(sp)
1c004588:	18600793          	li	a5,390
1c00458c:	4732                	lw	a4,12(sp)
1c00458e:	aa3728e3          	p.beqimm	a4,3,1c00403e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x540>
1c004592:	c23e                	sw	a5,4(sp)
1c004594:	078a                	slli	a5,a5,0x2
1c004596:	c43e                	sw	a5,8(sp)
1c004598:	4929                	li	s2,10
1c00459a:	47b2                	lw	a5,12(sp)
1c00459c:	aa37a4e3          	p.beqimm	a5,3,1c004044 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x546>
1c0045a0:	10095933          	p.exthz	s2,s2
1c0045a4:	5412                	lw	s0,36(sp)
1c0045a6:	4481                	li	s1,0
1c0045a8:	6505                	lui	a0,0x1
1c0045aa:	f3050993          	addi	s3,a0,-208 # f30 <__rt_stack_size+0x730>
1c0045ae:	bb29                	j	1c0042c8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7ca>
1c0045b0:	19012783          	lw	a5,400(sp)
1c0045b4:	c38d                	beqz	a5,1c0045d6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xad8>
1c0045b6:	19812703          	lw	a4,408(sp)
1c0045ba:	02000793          	li	a5,32
1c0045be:	ee0705e3          	beqz	a4,1c0044a8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x9aa>
1c0045c2:	00fd2423          	sw	a5,8(s10)
1c0045c6:	03cd6703          	p.elw	a4,60(s10)
1c0045ca:	00fd2223          	sw	a5,4(s10)
1c0045ce:	19812703          	lw	a4,408(sp)
1c0045d2:	fb65                	bnez	a4,1c0045c2 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xac4>
1c0045d4:	bdd1                	j	1c0044a8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x9aa>
1c0045d6:	300476f3          	csrrci	a3,mstatus,8
1c0045da:	404d2783          	lw	a5,1028(s10)
1c0045de:	18012703          	lw	a4,384(sp)
1c0045e2:	40e7d7b3          	sra	a5,a5,a4
1c0045e6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0045ea:	c795                	beqz	a5,1c004616 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb18>
1c0045ec:	10000613          	li	a2,256
1c0045f0:	30069073          	csrw	mstatus,a3
1c0045f4:	00cd2423          	sw	a2,8(s10)
1c0045f8:	03cd6783          	p.elw	a5,60(s10)
1c0045fc:	00cd2223          	sw	a2,4(s10)
1c004600:	300476f3          	csrrci	a3,mstatus,8
1c004604:	404d2783          	lw	a5,1028(s10)
1c004608:	18012703          	lw	a4,384(sp)
1c00460c:	40e7d7b3          	sra	a5,a5,a4
1c004610:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004614:	fff1                	bnez	a5,1c0045f0 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xaf2>
1c004616:	4785                	li	a5,1
1c004618:	00e79733          	sll	a4,a5,a4
1c00461c:	40ed2223          	sw	a4,1028(s10)
1c004620:	30069073          	csrw	mstatus,a3
1c004624:	b551                	j	1c0044a8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x9aa>
1c004626:	04800793          	li	a5,72
1c00462a:	d63e                	sw	a5,44(sp)
1c00462c:	6785                	lui	a5,0x1
1c00462e:	90078793          	addi	a5,a5,-1792 # 900 <__rt_stack_size+0x100>
1c004632:	56d2                	lw	a3,52(sp)
1c004634:	0685                	addi	a3,a3,1
1c004636:	da36                	sw	a3,52(sp)
1c004638:	5722                	lw	a4,40(sp)
1c00463a:	d83a                	sw	a4,48(sp)
1c00463c:	8dd6                	mv	s11,s5
1c00463e:	0446ae63          	p.beqimm	a3,4,1c00469a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb9c>
1c004642:	5552                	lw	a0,52(sp)
1c004644:	00751693          	slli	a3,a0,0x7
1c004648:	6705                	lui	a4,0x1
1c00464a:	c3070613          	addi	a2,a4,-976 # c30 <__rt_stack_size+0x430>
1c00464e:	9636                	add	a2,a2,a3
1c004650:	dc32                	sw	a2,56(sp)
1c004652:	00551693          	slli	a3,a0,0x5
1c004656:	e3070613          	addi	a2,a4,-464
1c00465a:	9636                	add	a2,a2,a3
1c00465c:	c0b2                	sw	a2,64(sp)
1c00465e:	eb070713          	addi	a4,a4,-336
1c004662:	9736                	add	a4,a4,a3
1c004664:	de3a                	sw	a4,60(sp)
1c004666:	d43e                	sw	a5,40(sp)
1c004668:	c602                	sw	zero,12(sp)
1c00466a:	45a1                	li	a1,8
1c00466c:	cc2e                	sw	a1,24(sp)
1c00466e:	0ff00c93          	li	s9,255
1c004672:	bd6d                	j	1c00452c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa2e>
1c004674:	5552                	lw	a0,52(sp)
1c004676:	0e352063          	p.beqimm	a0,3,1c004756 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc58>
1c00467a:	6789                	lui	a5,0x2
1c00467c:	c6878793          	addi	a5,a5,-920 # 1c68 <__rt_stack_size+0x1468>
1c004680:	5582                	lw	a1,32(sp)
1c004682:	95be                	add	a1,a1,a5
1c004684:	d02e                	sw	a1,32(sp)
1c004686:	04800613          	li	a2,72
1c00468a:	d632                	sw	a2,44(sp)
1c00468c:	6785                	lui	a5,0x1
1c00468e:	90078793          	addi	a5,a5,-1792 # 900 <__rt_stack_size+0x100>
1c004692:	4672                	lw	a2,28(sp)
1c004694:	0605                	addi	a2,a2,1
1c004696:	ce32                	sw	a2,28(sp)
1c004698:	bf69                	j	1c004632 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb34>
1c00469a:	19012783          	lw	a5,400(sp)
1c00469e:	c395                	beqz	a5,1c0046c2 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xbc4>
1c0046a0:	19812683          	lw	a3,408(sp)
1c0046a4:	02000713          	li	a4,32
1c0046a8:	002047b7          	lui	a5,0x204
1c0046ac:	caa5                	beqz	a3,1c00471c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc1e>
1c0046ae:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0046b2:	03c7e683          	p.elw	a3,60(a5)
1c0046b6:	00e7a223          	sw	a4,4(a5)
1c0046ba:	19812683          	lw	a3,408(sp)
1c0046be:	fae5                	bnez	a3,1c0046ae <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xbb0>
1c0046c0:	a8b1                	j	1c00471c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc1e>
1c0046c2:	30047673          	csrrci	a2,mstatus,8
1c0046c6:	002047b7          	lui	a5,0x204
1c0046ca:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0046ce:	18012703          	lw	a4,384(sp)
1c0046d2:	40e7d7b3          	sra	a5,a5,a4
1c0046d6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0046da:	cb85                	beqz	a5,1c00470a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc0c>
1c0046dc:	10000593          	li	a1,256
1c0046e0:	002046b7          	lui	a3,0x204
1c0046e4:	30061073          	csrw	mstatus,a2
1c0046e8:	00b6a423          	sw	a1,8(a3) # 204008 <__L2+0x184008>
1c0046ec:	03c6e783          	p.elw	a5,60(a3)
1c0046f0:	00b6a223          	sw	a1,4(a3)
1c0046f4:	30047673          	csrrci	a2,mstatus,8
1c0046f8:	4046a783          	lw	a5,1028(a3)
1c0046fc:	18012703          	lw	a4,384(sp)
1c004700:	40e7d7b3          	sra	a5,a5,a4
1c004704:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004708:	fff1                	bnez	a5,1c0046e4 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xbe6>
1c00470a:	4785                	li	a5,1
1c00470c:	00e79733          	sll	a4,a5,a4
1c004710:	002047b7          	lui	a5,0x204
1c004714:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
1c004718:	30061073          	csrw	mstatus,a2
1c00471c:	29c12083          	lw	ra,668(sp)
1c004720:	29812403          	lw	s0,664(sp)
1c004724:	29412483          	lw	s1,660(sp)
1c004728:	29012903          	lw	s2,656(sp)
1c00472c:	28c12983          	lw	s3,652(sp)
1c004730:	28812a03          	lw	s4,648(sp)
1c004734:	28412a83          	lw	s5,644(sp)
1c004738:	28012b03          	lw	s6,640(sp)
1c00473c:	27c12b83          	lw	s7,636(sp)
1c004740:	27812c03          	lw	s8,632(sp)
1c004744:	27412c83          	lw	s9,628(sp)
1c004748:	27012d03          	lw	s10,624(sp)
1c00474c:	26c12d83          	lw	s11,620(sp)
1c004750:	2a010113          	addi	sp,sp,672
1c004754:	8082                	ret
1c004756:	4781                	li	a5,0
1c004758:	bf2d                	j	1c004692 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb94>
1c00475a:	46b2                	lw	a3,12(sp)
1c00475c:	0685                	addi	a3,a3,1
1c00475e:	c636                	sw	a3,12(sp)
1c004760:	4772                	lw	a4,28(sp)
1c004762:	0705                	addi	a4,a4,1
1c004764:	ce3a                	sw	a4,28(sp)
1c004766:	47c9                	li	a5,18
1c004768:	d63e                	sw	a5,44(sp)
1c00476a:	24000793          	li	a5,576
1c00476e:	b375                	j	1c00451a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa1c>

1c004770 <S5_Linear_64x13x18x128>:
1c004770:	dd010113          	addi	sp,sp,-560
1c004774:	22112623          	sw	ra,556(sp)
1c004778:	22812423          	sw	s0,552(sp)
1c00477c:	22912223          	sw	s1,548(sp)
1c004780:	23212023          	sw	s2,544(sp)
1c004784:	21312e23          	sw	s3,540(sp)
1c004788:	21412c23          	sw	s4,536(sp)
1c00478c:	21512a23          	sw	s5,532(sp)
1c004790:	21612823          	sw	s6,528(sp)
1c004794:	21712623          	sw	s7,524(sp)
1c004798:	21812423          	sw	s8,520(sp)
1c00479c:	21912223          	sw	s9,516(sp)
1c0047a0:	21a12023          	sw	s10,512(sp)
1c0047a4:	1fb12e23          	sw	s11,508(sp)
1c0047a8:	8a2e                	mv	s4,a1
1c0047aa:	89b2                	mv	s3,a2
1c0047ac:	c636                	sw	a3,12(sp)
1c0047ae:	893a                	mv	s2,a4
1c0047b0:	84be                	mv	s1,a5
1c0047b2:	8442                	mv	s0,a6
1c0047b4:	100007b7          	lui	a5,0x10000
1c0047b8:	01c7a803          	lw	a6,28(a5) # 1000001c <model_L1_Memory>
1c0047bc:	67b1                	lui	a5,0xc
1c0047be:	be078713          	addi	a4,a5,-1056 # bbe0 <__rt_stack_size+0xb3e0>
1c0047c2:	9742                	add	a4,a4,a6
1c0047c4:	ceba                	sw	a4,92(sp)
1c0047c6:	4605                	li	a2,1
1c0047c8:	06c11023          	sh	a2,96(sp)
1c0047cc:	06c11123          	sh	a2,98(sp)
1c0047d0:	04000893          	li	a7,64
1c0047d4:	07111223          	sh	a7,100(sp)
1c0047d8:	c2ba                	sw	a4,68(sp)
1c0047da:	05111623          	sh	a7,76(sp)
1c0047de:	e6078693          	addi	a3,a5,-416
1c0047e2:	96c2                	add	a3,a3,a6
1c0047e4:	ccb6                	sw	a3,88(sp)
1c0047e6:	ce3a                	sw	a4,28(sp)
1c0047e8:	03111223          	sh	a7,36(sp)
1c0047ec:	02c11323          	sh	a2,38(sp)
1c0047f0:	02c11423          	sh	a2,40(sp)
1c0047f4:	da36                	sw	a3,52(sp)
1c0047f6:	c42a                	sw	a0,8(sp)
1c0047f8:	30047673          	csrrci	a2,mstatus,8
1c0047fc:	002046b7          	lui	a3,0x204
1c004800:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c004804:	000b0737          	lui	a4,0xb0
1c004808:	16e70713          	addi	a4,a4,366 # b016e <__L2+0x3016e>
1c00480c:	c1574733          	p.bset	a4,a4,0,21
1c004810:	002048b7          	lui	a7,0x204
1c004814:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
1c004818:	00204737          	lui	a4,0x204
1c00481c:	41072023          	sw	a6,1024(a4) # 204400 <__L2+0x184400>
1c004820:	40a72023          	sw	a0,1024(a4)
1c004824:	1cd12823          	sw	a3,464(sp)
1c004828:	1e012023          	sw	zero,480(sp)
1c00482c:	30061073          	csrw	mstatus,a2
1c004830:	8dae                	mv	s11,a1
1c004832:	1c010737          	lui	a4,0x1c010
1c004836:	7bc72503          	lw	a0,1980(a4) # 1c0107bc <model_L2_Memory>
1c00483a:	5f878613          	addi	a2,a5,1528
1c00483e:	189c                	addi	a5,sp,112
1c004840:	4705                	li	a4,1
1c004842:	6699                	lui	a3,0x6
1c004844:	b8068693          	addi	a3,a3,-1152 # 5b80 <__rt_stack_size+0x5380>
1c004848:	962a                	add	a2,a2,a0
1c00484a:	1c011537          	lui	a0,0x1c011
1c00484e:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c004852:	3b7050ef          	jal	ra,1c00a408 <pi_cl_ram_copy>
1c004856:	10c14783          	lbu	a5,268(sp)
1c00485a:	0ff7f793          	andi	a5,a5,255
1c00485e:	ef99                	bnez	a5,1c00487c <S5_Linear_64x13x18x128+0x10c>
1c004860:	4689                	li	a3,2
1c004862:	00204737          	lui	a4,0x204
1c004866:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00486a:	03c76783          	p.elw	a5,60(a4)
1c00486e:	00d72223          	sw	a3,4(a4)
1c004872:	10c14783          	lbu	a5,268(sp)
1c004876:	0ff7f793          	andi	a5,a5,255
1c00487a:	d7f5                	beqz	a5,1c004866 <S5_Linear_64x13x18x128+0xf6>
1c00487c:	1c010b37          	lui	s6,0x1c010
1c004880:	7bcb0b13          	addi	s6,s6,1980 # 1c0107bc <model_L2_Memory>
1c004884:	000b2583          	lw	a1,0(s6)
1c004888:	6a99                	lui	s5,0x6
1c00488a:	b80a8a93          	addi	s5,s5,-1152 # 5b80 <__rt_stack_size+0x5380>
1c00488e:	189c                	addi	a5,sp,112
1c004890:	4705                	li	a4,1
1c004892:	86d6                	mv	a3,s5
1c004894:	6649                	lui	a2,0x12
1c004896:	17860613          	addi	a2,a2,376 # 12178 <__L1Cl+0x2178>
1c00489a:	962e                	add	a2,a2,a1
1c00489c:	015a05b3          	add	a1,s4,s5
1c0048a0:	1c011537          	lui	a0,0x1c011
1c0048a4:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c0048a8:	361050ef          	jal	ra,1c00a408 <pi_cl_ram_copy>
1c0048ac:	000b2503          	lw	a0,0(s6)
1c0048b0:	6631                	lui	a2,0xc
1c0048b2:	5f860793          	addi	a5,a2,1528 # c5f8 <__rt_stack_size+0xbdf8>
1c0048b6:	953e                	add	a0,a0,a5
1c0048b8:	100005b7          	lui	a1,0x10000
1c0048bc:	01c58593          	addi	a1,a1,28 # 1000001c <model_L1_Memory>
1c0048c0:	0005a803          	lw	a6,0(a1)
1c0048c4:	2e080813          	addi	a6,a6,736
1c0048c8:	300478f3          	csrrci	a7,mstatus,8
1c0048cc:	002046b7          	lui	a3,0x204
1c0048d0:	4006a303          	lw	t1,1024(a3) # 204400 <__L2+0x184400>
1c0048d4:	000307b7          	lui	a5,0x30
1c0048d8:	873e                	mv	a4,a5
1c0048da:	de0aa733          	p.insert	a4,s5,15,0
1c0048de:	c1374733          	p.bset	a4,a4,0,19
1c0048e2:	c1574733          	p.bset	a4,a4,0,21
1c0048e6:	00204e37          	lui	t3,0x204
1c0048ea:	40ee2023          	sw	a4,1024(t3) # 204400 <__L2+0x184400>
1c0048ee:	00204737          	lui	a4,0x204
1c0048f2:	41072023          	sw	a6,1024(a4) # 204400 <__L2+0x184400>
1c0048f6:	40a72023          	sw	a0,1024(a4)
1c0048fa:	1a612823          	sw	t1,432(sp)
1c0048fe:	1c012023          	sw	zero,448(sp)
1c004902:	30089073          	csrw	mstatus,a7
1c004906:	4188                	lw	a0,0(a1)
1c004908:	9e060713          	addi	a4,a2,-1568
1c00490c:	953a                	add	a0,a0,a4
1c00490e:	30047873          	csrrci	a6,mstatus,8
1c004912:	4006a883          	lw	a7,1024(a3)
1c004916:	c087c733          	p.bset	a4,a5,0,8
1c00491a:	c1374733          	p.bset	a4,a4,0,19
1c00491e:	c1574733          	p.bset	a4,a4,0,21
1c004922:	00204337          	lui	t1,0x204
1c004926:	40e32023          	sw	a4,1024(t1) # 204400 <__L2+0x184400>
1c00492a:	00204737          	lui	a4,0x204
1c00492e:	40a72023          	sw	a0,1024(a4) # 204400 <__L2+0x184400>
1c004932:	41372023          	sw	s3,1024(a4)
1c004936:	19112823          	sw	a7,400(sp)
1c00493a:	1a012023          	sw	zero,416(sp)
1c00493e:	30081073          	csrw	mstatus,a6
1c004942:	4188                	lw	a0,0(a1)
1c004944:	d6060713          	addi	a4,a2,-672
1c004948:	953a                	add	a0,a0,a4
1c00494a:	30047873          	csrrci	a6,mstatus,8
1c00494e:	4006a883          	lw	a7,1024(a3)
1c004952:	c067c733          	p.bset	a4,a5,0,6
1c004956:	c1374733          	p.bset	a4,a4,0,19
1c00495a:	c1574733          	p.bset	a4,a4,0,21
1c00495e:	40e32023          	sw	a4,1024(t1)
1c004962:	40a32023          	sw	a0,1024(t1)
1c004966:	00204537          	lui	a0,0x204
1c00496a:	41252023          	sw	s2,1024(a0) # 204400 <__L2+0x184400>
1c00496e:	17112823          	sw	a7,368(sp)
1c004972:	18012023          	sw	zero,384(sp)
1c004976:	30081073          	csrw	mstatus,a6
1c00497a:	4188                	lw	a0,0(a1)
1c00497c:	de060813          	addi	a6,a2,-544
1c004980:	9542                	add	a0,a0,a6
1c004982:	30047873          	csrrci	a6,mstatus,8
1c004986:	4006a883          	lw	a7,1024(a3)
1c00498a:	40e32023          	sw	a4,1024(t1)
1c00498e:	00204737          	lui	a4,0x204
1c004992:	40a72023          	sw	a0,1024(a4) # 204400 <__L2+0x184400>
1c004996:	40972023          	sw	s1,1024(a4)
1c00499a:	15112823          	sw	a7,336(sp)
1c00499e:	16012023          	sw	zero,352(sp)
1c0049a2:	30081073          	csrw	mstatus,a6
1c0049a6:	4198                	lw	a4,0(a1)
1c0049a8:	e6060613          	addi	a2,a2,-416
1c0049ac:	963a                	add	a2,a2,a4
1c0049ae:	30047773          	csrrci	a4,mstatus,8
1c0049b2:	4006a683          	lw	a3,1024(a3)
1c0049b6:	0097e793          	ori	a5,a5,9
1c0049ba:	c137c7b3          	p.bset	a5,a5,0,19
1c0049be:	c157c7b3          	p.bset	a5,a5,0,21
1c0049c2:	002045b7          	lui	a1,0x204
1c0049c6:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c0049ca:	002047b7          	lui	a5,0x204
1c0049ce:	40c7a023          	sw	a2,1024(a5) # 204400 <__L2+0x184400>
1c0049d2:	4087a023          	sw	s0,1024(a5)
1c0049d6:	12d12823          	sw	a3,304(sp)
1c0049da:	14012023          	sw	zero,320(sp)
1c0049de:	30071073          	csrw	mstatus,a4
1c0049e2:	14012783          	lw	a5,320(sp)
1c0049e6:	c395                	beqz	a5,1c004a0a <S5_Linear_64x13x18x128+0x29a>
1c0049e8:	14812683          	lw	a3,328(sp)
1c0049ec:	02000713          	li	a4,32
1c0049f0:	002047b7          	lui	a5,0x204
1c0049f4:	caa5                	beqz	a3,1c004a64 <S5_Linear_64x13x18x128+0x2f4>
1c0049f6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0049fa:	03c7e683          	p.elw	a3,60(a5)
1c0049fe:	00e7a223          	sw	a4,4(a5)
1c004a02:	14812683          	lw	a3,328(sp)
1c004a06:	fae5                	bnez	a3,1c0049f6 <S5_Linear_64x13x18x128+0x286>
1c004a08:	a8b1                	j	1c004a64 <S5_Linear_64x13x18x128+0x2f4>
1c004a0a:	30047673          	csrrci	a2,mstatus,8
1c004a0e:	002047b7          	lui	a5,0x204
1c004a12:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004a16:	13012683          	lw	a3,304(sp)
1c004a1a:	40d7d7b3          	sra	a5,a5,a3
1c004a1e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004a22:	cb85                	beqz	a5,1c004a52 <S5_Linear_64x13x18x128+0x2e2>
1c004a24:	10000593          	li	a1,256
1c004a28:	00204737          	lui	a4,0x204
1c004a2c:	30061073          	csrw	mstatus,a2
1c004a30:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004a34:	03c76783          	p.elw	a5,60(a4)
1c004a38:	00b72223          	sw	a1,4(a4)
1c004a3c:	30047673          	csrrci	a2,mstatus,8
1c004a40:	40472783          	lw	a5,1028(a4)
1c004a44:	13012683          	lw	a3,304(sp)
1c004a48:	40d7d7b3          	sra	a5,a5,a3
1c004a4c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004a50:	fff1                	bnez	a5,1c004a2c <S5_Linear_64x13x18x128+0x2bc>
1c004a52:	4785                	li	a5,1
1c004a54:	00d796b3          	sll	a3,a5,a3
1c004a58:	002047b7          	lui	a5,0x204
1c004a5c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c004a60:	30061073          	csrw	mstatus,a2
1c004a64:	1a012783          	lw	a5,416(sp)
1c004a68:	c395                	beqz	a5,1c004a8c <S5_Linear_64x13x18x128+0x31c>
1c004a6a:	1a812683          	lw	a3,424(sp)
1c004a6e:	02000713          	li	a4,32
1c004a72:	002047b7          	lui	a5,0x204
1c004a76:	caa5                	beqz	a3,1c004ae6 <S5_Linear_64x13x18x128+0x376>
1c004a78:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c004a7c:	03c7e683          	p.elw	a3,60(a5)
1c004a80:	00e7a223          	sw	a4,4(a5)
1c004a84:	1a812683          	lw	a3,424(sp)
1c004a88:	fae5                	bnez	a3,1c004a78 <S5_Linear_64x13x18x128+0x308>
1c004a8a:	a8b1                	j	1c004ae6 <S5_Linear_64x13x18x128+0x376>
1c004a8c:	30047673          	csrrci	a2,mstatus,8
1c004a90:	002047b7          	lui	a5,0x204
1c004a94:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004a98:	19012683          	lw	a3,400(sp)
1c004a9c:	40d7d7b3          	sra	a5,a5,a3
1c004aa0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004aa4:	cb85                	beqz	a5,1c004ad4 <S5_Linear_64x13x18x128+0x364>
1c004aa6:	10000593          	li	a1,256
1c004aaa:	00204737          	lui	a4,0x204
1c004aae:	30061073          	csrw	mstatus,a2
1c004ab2:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004ab6:	03c76783          	p.elw	a5,60(a4)
1c004aba:	00b72223          	sw	a1,4(a4)
1c004abe:	30047673          	csrrci	a2,mstatus,8
1c004ac2:	40472783          	lw	a5,1028(a4)
1c004ac6:	19012683          	lw	a3,400(sp)
1c004aca:	40d7d7b3          	sra	a5,a5,a3
1c004ace:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004ad2:	fff1                	bnez	a5,1c004aae <S5_Linear_64x13x18x128+0x33e>
1c004ad4:	4785                	li	a5,1
1c004ad6:	00d796b3          	sll	a3,a5,a3
1c004ada:	002047b7          	lui	a5,0x204
1c004ade:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c004ae2:	30061073          	csrw	mstatus,a2
1c004ae6:	18012783          	lw	a5,384(sp)
1c004aea:	c395                	beqz	a5,1c004b0e <S5_Linear_64x13x18x128+0x39e>
1c004aec:	18812683          	lw	a3,392(sp)
1c004af0:	02000713          	li	a4,32
1c004af4:	002047b7          	lui	a5,0x204
1c004af8:	caa5                	beqz	a3,1c004b68 <S5_Linear_64x13x18x128+0x3f8>
1c004afa:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c004afe:	03c7e683          	p.elw	a3,60(a5)
1c004b02:	00e7a223          	sw	a4,4(a5)
1c004b06:	18812683          	lw	a3,392(sp)
1c004b0a:	fae5                	bnez	a3,1c004afa <S5_Linear_64x13x18x128+0x38a>
1c004b0c:	a8b1                	j	1c004b68 <S5_Linear_64x13x18x128+0x3f8>
1c004b0e:	30047673          	csrrci	a2,mstatus,8
1c004b12:	002047b7          	lui	a5,0x204
1c004b16:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004b1a:	17012683          	lw	a3,368(sp)
1c004b1e:	40d7d7b3          	sra	a5,a5,a3
1c004b22:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004b26:	cb85                	beqz	a5,1c004b56 <S5_Linear_64x13x18x128+0x3e6>
1c004b28:	10000593          	li	a1,256
1c004b2c:	00204737          	lui	a4,0x204
1c004b30:	30061073          	csrw	mstatus,a2
1c004b34:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004b38:	03c76783          	p.elw	a5,60(a4)
1c004b3c:	00b72223          	sw	a1,4(a4)
1c004b40:	30047673          	csrrci	a2,mstatus,8
1c004b44:	40472783          	lw	a5,1028(a4)
1c004b48:	17012683          	lw	a3,368(sp)
1c004b4c:	40d7d7b3          	sra	a5,a5,a3
1c004b50:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004b54:	fff1                	bnez	a5,1c004b30 <S5_Linear_64x13x18x128+0x3c0>
1c004b56:	4785                	li	a5,1
1c004b58:	00d796b3          	sll	a3,a5,a3
1c004b5c:	002047b7          	lui	a5,0x204
1c004b60:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c004b64:	30061073          	csrw	mstatus,a2
1c004b68:	16012783          	lw	a5,352(sp)
1c004b6c:	c395                	beqz	a5,1c004b90 <S5_Linear_64x13x18x128+0x420>
1c004b6e:	16812683          	lw	a3,360(sp)
1c004b72:	02000713          	li	a4,32
1c004b76:	002047b7          	lui	a5,0x204
1c004b7a:	caa5                	beqz	a3,1c004bea <S5_Linear_64x13x18x128+0x47a>
1c004b7c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c004b80:	03c7e683          	p.elw	a3,60(a5)
1c004b84:	00e7a223          	sw	a4,4(a5)
1c004b88:	16812683          	lw	a3,360(sp)
1c004b8c:	fae5                	bnez	a3,1c004b7c <S5_Linear_64x13x18x128+0x40c>
1c004b8e:	a8b1                	j	1c004bea <S5_Linear_64x13x18x128+0x47a>
1c004b90:	30047673          	csrrci	a2,mstatus,8
1c004b94:	002047b7          	lui	a5,0x204
1c004b98:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004b9c:	15012683          	lw	a3,336(sp)
1c004ba0:	40d7d7b3          	sra	a5,a5,a3
1c004ba4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004ba8:	cb85                	beqz	a5,1c004bd8 <S5_Linear_64x13x18x128+0x468>
1c004baa:	10000593          	li	a1,256
1c004bae:	00204737          	lui	a4,0x204
1c004bb2:	30061073          	csrw	mstatus,a2
1c004bb6:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004bba:	03c76783          	p.elw	a5,60(a4)
1c004bbe:	00b72223          	sw	a1,4(a4)
1c004bc2:	30047673          	csrrci	a2,mstatus,8
1c004bc6:	40472783          	lw	a5,1028(a4)
1c004bca:	15012683          	lw	a3,336(sp)
1c004bce:	40d7d7b3          	sra	a5,a5,a3
1c004bd2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004bd6:	fff1                	bnez	a5,1c004bb2 <S5_Linear_64x13x18x128+0x442>
1c004bd8:	4785                	li	a5,1
1c004bda:	00d796b3          	sll	a3,a5,a3
1c004bde:	002047b7          	lui	a5,0x204
1c004be2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c004be6:	30061073          	csrw	mstatus,a2
1c004bea:	100007b7          	lui	a5,0x10000
1c004bee:	01c7a783          	lw	a5,28(a5) # 1000001c <model_L1_Memory>
1c004bf2:	66b1                	lui	a3,0xc
1c004bf4:	9e068713          	addi	a4,a3,-1568 # b9e0 <__rt_stack_size+0xb1e0>
1c004bf8:	973e                	add	a4,a4,a5
1c004bfa:	d4ba                	sw	a4,104(sp)
1c004bfc:	97b6                	add	a5,a5,a3
1c004bfe:	e657c783          	lbu	a5,-411(a5)
1c004c02:	06f10623          	sb	a5,108(sp)
1c004c06:	00204437          	lui	s0,0x204
1c004c0a:	0ff00793          	li	a5,255
1c004c0e:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
1c004c12:	20040413          	addi	s0,s0,512
1c004c16:	00f42023          	sw	a5,0(s0)
1c004c1a:	00f42623          	sw	a5,12(s0)
1c004c1e:	1c0077b7          	lui	a5,0x1c007
1c004c22:	a7878793          	addi	a5,a5,-1416 # 1c006a78 <KerParSetBiasB32_SQ8>
1c004c26:	00204737          	lui	a4,0x204
1c004c2a:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c004c2e:	08e8                	addi	a0,sp,92
1c004c30:	002047b7          	lui	a5,0x204
1c004c34:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c004c38:	641010ef          	jal	ra,1c006a78 <KerParSetBiasB32_SQ8>
1c004c3c:	01c46783          	p.elw	a5,28(s0)
1c004c40:	6999                	lui	s3,0x6
1c004c42:	b8098993          	addi	s3,s3,-1152 # 5b80 <__rt_stack_size+0x5380>
1c004c46:	8b4e                	mv	s6,s3
1c004c48:	4a81                	li	s5,0
1c004c4a:	4481                	li	s1,0
1c004c4c:	8a4e                	mv	s4,s3
1c004c4e:	00204437          	lui	s0,0x204
1c004c52:	10000c37          	lui	s8,0x10000
1c004c56:	20040b93          	addi	s7,s0,512 # 204200 <__L2+0x184200>
1c004c5a:	8d5e                	mv	s10,s7
1c004c5c:	1c007cb7          	lui	s9,0x1c007
1c004c60:	b2cc8c93          	addi	s9,s9,-1236 # 1c006b2c <KerParLinearLayer_SQ8>
1c004c64:	aacd                	j	1c004e56 <S5_Linear_64x13x18x128+0x6e6>
1c004c66:	13200913          	li	s2,306
1c004c6a:	a439                	j	1c004e78 <S5_Linear_64x13x18x128+0x708>
1c004c6c:	4581                	li	a1,0
1c004c6e:	4901                	li	s2,0
1c004c70:	a439                	j	1c004e7e <S5_Linear_64x13x18x128+0x70e>
1c004c72:	13200593          	li	a1,306
1c004c76:	4901                	li	s2,0
1c004c78:	a419                	j	1c004e7e <S5_Linear_64x13x18x128+0x70e>
1c004c7a:	300476f3          	csrrci	a3,mstatus,8
1c004c7e:	40442783          	lw	a5,1028(s0)
1c004c82:	1d012703          	lw	a4,464(sp)
1c004c86:	40e7d7b3          	sra	a5,a5,a4
1c004c8a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004c8e:	c795                	beqz	a5,1c004cba <S5_Linear_64x13x18x128+0x54a>
1c004c90:	10000613          	li	a2,256
1c004c94:	30069073          	csrw	mstatus,a3
1c004c98:	00c42423          	sw	a2,8(s0)
1c004c9c:	03c46783          	p.elw	a5,60(s0)
1c004ca0:	00c42223          	sw	a2,4(s0)
1c004ca4:	300476f3          	csrrci	a3,mstatus,8
1c004ca8:	40442783          	lw	a5,1028(s0)
1c004cac:	1d012703          	lw	a4,464(sp)
1c004cb0:	40e7d7b3          	sra	a5,a5,a4
1c004cb4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004cb8:	fff1                	bnez	a5,1c004c94 <S5_Linear_64x13x18x128+0x524>
1c004cba:	4785                	li	a5,1
1c004cbc:	00e79733          	sll	a4,a5,a4
1c004cc0:	40e42223          	sw	a4,1028(s0)
1c004cc4:	30069073          	csrw	mstatus,a3
1c004cc8:	e5b1                	bnez	a1,1c004d14 <S5_Linear_64x13x18x128+0x5a4>
1c004cca:	10c14783          	lbu	a5,268(sp)
1c004cce:	0ff7f793          	andi	a5,a5,255
1c004cd2:	ef89                	bnez	a5,1c004cec <S5_Linear_64x13x18x128+0x57c>
1c004cd4:	4709                	li	a4,2
1c004cd6:	00e42423          	sw	a4,8(s0)
1c004cda:	03c46783          	p.elw	a5,60(s0)
1c004cde:	00e42223          	sw	a4,4(s0)
1c004ce2:	10c14783          	lbu	a5,268(sp)
1c004ce6:	0ff7f793          	andi	a5,a5,255
1c004cea:	d7f5                	beqz	a5,1c004cd6 <S5_Linear_64x13x18x128+0x566>
1c004cec:	06091a63          	bnez	s2,1c004d60 <S5_Linear_64x13x18x128+0x5f0>
1c004cf0:	1c012783          	lw	a5,448(sp)
1c004cf4:	c3dd                	beqz	a5,1c004d9a <S5_Linear_64x13x18x128+0x62a>
1c004cf6:	1c812703          	lw	a4,456(sp)
1c004cfa:	02000793          	li	a5,32
1c004cfe:	c76d                	beqz	a4,1c004de8 <S5_Linear_64x13x18x128+0x678>
1c004d00:	00f42423          	sw	a5,8(s0)
1c004d04:	03c46703          	p.elw	a4,60(s0)
1c004d08:	00f42223          	sw	a5,4(s0)
1c004d0c:	1c812703          	lw	a4,456(sp)
1c004d10:	fb65                	bnez	a4,1c004d00 <S5_Linear_64x13x18x128+0x590>
1c004d12:	a8d9                	j	1c004de8 <S5_Linear_64x13x18x128+0x678>
1c004d14:	4522                	lw	a0,8(sp)
1c004d16:	01550733          	add	a4,a0,s5
1c004d1a:	00148793          	addi	a5,s1,1
1c004d1e:	01f7d693          	srli	a3,a5,0x1f
1c004d22:	97b6                	add	a5,a5,a3
1c004d24:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004d28:	8f95                	sub	a5,a5,a3
1c004d2a:	01cc2683          	lw	a3,28(s8) # 1000001c <model_L1_Memory>
1c004d2e:	17000613          	li	a2,368
1c004d32:	42c786b3          	p.mac	a3,a5,a2
1c004d36:	87b6                	mv	a5,a3
1c004d38:	300476f3          	csrrci	a3,mstatus,8
1c004d3c:	40042603          	lw	a2,1024(s0)
1c004d40:	002b0537          	lui	a0,0x2b0
1c004d44:	8dc9                	or	a1,a1,a0
1c004d46:	40b42023          	sw	a1,1024(s0)
1c004d4a:	40f42023          	sw	a5,1024(s0)
1c004d4e:	40e42023          	sw	a4,1024(s0)
1c004d52:	1cc12823          	sw	a2,464(sp)
1c004d56:	1e012023          	sw	zero,480(sp)
1c004d5a:	30069073          	csrw	mstatus,a3
1c004d5e:	b7b5                	j	1c004cca <S5_Linear_64x13x18x128+0x55a>
1c004d60:	01f4d713          	srli	a4,s1,0x1f
1c004d64:	00e487b3          	add	a5,s1,a4
1c004d68:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004d6c:	8f99                	sub	a5,a5,a4
1c004d6e:	6631                	lui	a2,0xc
1c004d70:	5f860613          	addi	a2,a2,1528 # c5f8 <__rt_stack_size+0xbdf8>
1c004d74:	43478633          	p.mac	a2,a5,s4
1c004d78:	1c0107b7          	lui	a5,0x1c010
1c004d7c:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c004d80:	189c                	addi	a5,sp,112
1c004d82:	4705                	li	a4,1
1c004d84:	86ca                	mv	a3,s2
1c004d86:	962e                	add	a2,a2,a1
1c004d88:	016d85b3          	add	a1,s11,s6
1c004d8c:	1c011537          	lui	a0,0x1c011
1c004d90:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c004d94:	674050ef          	jal	ra,1c00a408 <pi_cl_ram_copy>
1c004d98:	bfa1                	j	1c004cf0 <S5_Linear_64x13x18x128+0x580>
1c004d9a:	300476f3          	csrrci	a3,mstatus,8
1c004d9e:	40442783          	lw	a5,1028(s0)
1c004da2:	1b012703          	lw	a4,432(sp)
1c004da6:	40e7d7b3          	sra	a5,a5,a4
1c004daa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004dae:	c795                	beqz	a5,1c004dda <S5_Linear_64x13x18x128+0x66a>
1c004db0:	10000613          	li	a2,256
1c004db4:	30069073          	csrw	mstatus,a3
1c004db8:	00c42423          	sw	a2,8(s0)
1c004dbc:	03c46783          	p.elw	a5,60(s0)
1c004dc0:	00c42223          	sw	a2,4(s0)
1c004dc4:	300476f3          	csrrci	a3,mstatus,8
1c004dc8:	40442783          	lw	a5,1028(s0)
1c004dcc:	1b012703          	lw	a4,432(sp)
1c004dd0:	40e7d7b3          	sra	a5,a5,a4
1c004dd4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004dd8:	fff1                	bnez	a5,1c004db4 <S5_Linear_64x13x18x128+0x644>
1c004dda:	4785                	li	a5,1
1c004ddc:	00e79733          	sll	a4,a5,a4
1c004de0:	40e42223          	sw	a4,1028(s0)
1c004de4:	30069073          	csrw	mstatus,a3
1c004de8:	0a099f63          	bnez	s3,1c004ea6 <S5_Linear_64x13x18x128+0x736>
1c004dec:	01cc2783          	lw	a5,28(s8)
1c004df0:	01f4d693          	srli	a3,s1,0x1f
1c004df4:	00d48733          	add	a4,s1,a3
1c004df8:	fc173733          	p.bclr	a4,a4,30,1
1c004dfc:	8f15                	sub	a4,a4,a3
1c004dfe:	17000693          	li	a3,368
1c004e02:	863e                	mv	a2,a5
1c004e04:	42d70633          	p.mac	a2,a4,a3
1c004e08:	dc32                	sw	a2,56(sp)
1c004e0a:	434707b3          	p.mac	a5,a4,s4
1c004e0e:	2e078793          	addi	a5,a5,736
1c004e12:	de3e                	sw	a5,60(sp)
1c004e14:	05100793          	li	a5,81
1c004e18:	20f48663          	beq	s1,a5,1c005024 <S5_Linear_64x13x18x128+0x8b4>
1c004e1c:	16e00793          	li	a5,366
1c004e20:	04f11423          	sh	a5,72(sp)
1c004e24:	04f11523          	sh	a5,74(sp)
1c004e28:	0ff00793          	li	a5,255
1c004e2c:	08f42223          	sw	a5,132(s0)
1c004e30:	00fba023          	sw	a5,0(s7)
1c004e34:	00fd2623          	sw	a5,12(s10)
1c004e38:	09942023          	sw	s9,128(s0)
1c004e3c:	1828                	addi	a0,sp,56
1c004e3e:	08a42023          	sw	a0,128(s0)
1c004e42:	4eb010ef          	jal	ra,1c006b2c <KerParLinearLayer_SQ8>
1c004e46:	01cbe783          	p.elw	a5,28(s7)
1c004e4a:	0485                	addi	s1,s1,1
1c004e4c:	89ca                	mv	s3,s2
1c004e4e:	05200793          	li	a5,82
1c004e52:	20f48c63          	beq	s1,a5,1c00506a <S5_Linear_64x13x18x128+0x8fa>
1c004e56:	05100793          	li	a5,81
1c004e5a:	e0f489e3          	beq	s1,a5,1c004c6c <S5_Linear_64x13x18x128+0x4fc>
1c004e5e:	16ea8a93          	addi	s5,s5,366
1c004e62:	05000793          	li	a5,80
1c004e66:	e0f486e3          	beq	s1,a5,1c004c72 <S5_Linear_64x13x18x128+0x502>
1c004e6a:	9b52                	add	s6,s6,s4
1c004e6c:	04f00793          	li	a5,79
1c004e70:	16e00913          	li	s2,366
1c004e74:	def489e3          	beq	s1,a5,1c004c66 <S5_Linear_64x13x18x128+0x4f6>
1c004e78:	091a                	slli	s2,s2,0x6
1c004e7a:	16e00593          	li	a1,366
1c004e7e:	1e012783          	lw	a5,480(sp)
1c004e82:	de078ce3          	beqz	a5,1c004c7a <S5_Linear_64x13x18x128+0x50a>
1c004e86:	1e812703          	lw	a4,488(sp)
1c004e8a:	02000793          	li	a5,32
1c004e8e:	e2070de3          	beqz	a4,1c004cc8 <S5_Linear_64x13x18x128+0x558>
1c004e92:	00f42423          	sw	a5,8(s0)
1c004e96:	03c46703          	p.elw	a4,60(s0)
1c004e9a:	00f42223          	sw	a5,4(s0)
1c004e9e:	1e812703          	lw	a4,488(sp)
1c004ea2:	fb65                	bnez	a4,1c004e92 <S5_Linear_64x13x18x128+0x722>
1c004ea4:	b515                	j	1c004cc8 <S5_Linear_64x13x18x128+0x558>
1c004ea6:	00148793          	addi	a5,s1,1
1c004eaa:	01f7d713          	srli	a4,a5,0x1f
1c004eae:	97ba                	add	a5,a5,a4
1c004eb0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004eb4:	8f99                	sub	a5,a5,a4
1c004eb6:	034787b3          	mul	a5,a5,s4
1c004eba:	1c010737          	lui	a4,0x1c010
1c004ebe:	7bc72683          	lw	a3,1980(a4) # 1c0107bc <model_L2_Memory>
1c004ec2:	96be                	add	a3,a3,a5
1c004ec4:	6731                	lui	a4,0xc
1c004ec6:	5f870713          	addi	a4,a4,1528 # c5f8 <__rt_stack_size+0xbdf8>
1c004eca:	9736                	add	a4,a4,a3
1c004ecc:	2e078793          	addi	a5,a5,736
1c004ed0:	01cc2603          	lw	a2,28(s8)
1c004ed4:	97b2                	add	a5,a5,a2
1c004ed6:	300475f3          	csrrci	a1,mstatus,8
1c004eda:	1009d633          	p.exthz	a2,s3
1c004ede:	01099513          	slli	a0,s3,0x10
1c004ee2:	02054463          	bltz	a0,1c004f0a <S5_Linear_64x13x18x128+0x79a>
1c004ee6:	40042503          	lw	a0,1024(s0)
1c004eea:	002b06b7          	lui	a3,0x2b0
1c004eee:	8ed1                	or	a3,a3,a2
1c004ef0:	40d42023          	sw	a3,1024(s0)
1c004ef4:	40f42023          	sw	a5,1024(s0)
1c004ef8:	40e42023          	sw	a4,1024(s0)
1c004efc:	1aa12823          	sw	a0,432(sp)
1c004f00:	1c012023          	sw	zero,448(sp)
1c004f04:	30059073          	csrw	mstatus,a1
1c004f08:	b5d5                	j	1c004dec <S5_Linear_64x13x18x128+0x67c>
1c004f0a:	6521                	lui	a0,0x8
1c004f0c:	00330837          	lui	a6,0x330
1c004f10:	1b012a23          	sw	a6,436(sp)
1c004f14:	1cf12223          	sw	a5,452(sp)
1c004f18:	1ce12423          	sw	a4,456(sp)
1c004f1c:	1ac12c23          	sw	a2,440(sp)
1c004f20:	1aa12e23          	sw	a0,444(sp)
1c004f24:	1ca12023          	sw	a0,448(sp)
1c004f28:	557d                	li	a0,-1
1c004f2a:	1aa12823          	sw	a0,432(sp)
1c004f2e:	1c012623          	sw	zero,460(sp)
1c004f32:	01402503          	lw	a0,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c004f36:	c909                	beqz	a0,1c004f48 <S5_Linear_64x13x18x128+0x7d8>
1c004f38:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c004f3c:	1b18                	addi	a4,sp,432
1c004f3e:	cfd8                	sw	a4,28(a5)
1c004f40:	1b1c                	addi	a5,sp,432
1c004f42:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c004f46:	bf7d                	j	1c004f04 <S5_Linear_64x13x18x128+0x794>
1c004f48:	6521                	lui	a0,0x8
1c004f4a:	04a65533          	p.minu	a0,a2,a0
1c004f4e:	00a78833          	add	a6,a5,a0
1c004f52:	1d012223          	sw	a6,452(sp)
1c004f56:	6851                	lui	a6,0x14
1c004f58:	5f880813          	addi	a6,a6,1528 # 145f8 <__L1Cl+0x45f8>
1c004f5c:	96c2                	add	a3,a3,a6
1c004f5e:	1cd12423          	sw	a3,456(sp)
1c004f62:	40a606b3          	sub	a3,a2,a0
1c004f66:	1ad12c23          	sw	a3,440(sp)
1c004f6a:	40042683          	lw	a3,1024(s0)
1c004f6e:	1ad12823          	sw	a3,432(sp)
1c004f72:	003386b7          	lui	a3,0x338
1c004f76:	40d42023          	sw	a3,1024(s0)
1c004f7a:	40f42023          	sw	a5,1024(s0)
1c004f7e:	40e42023          	sw	a4,1024(s0)
1c004f82:	1c012783          	lw	a5,448(sp)
1c004f86:	dfcd                	beqz	a5,1c004f40 <S5_Linear_64x13x18x128+0x7d0>
1c004f88:	1b1c                	addi	a5,sp,432
1c004f8a:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c004f8e:	bf4d                	j	1c004f40 <S5_Linear_64x13x18x128+0x7d0>
1c004f90:	30047673          	csrrci	a2,mstatus,8
1c004f94:	002047b7          	lui	a5,0x204
1c004f98:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004f9c:	11012683          	lw	a3,272(sp)
1c004fa0:	40d7d7b3          	sra	a5,a5,a3
1c004fa4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004fa8:	cb85                	beqz	a5,1c004fd8 <S5_Linear_64x13x18x128+0x868>
1c004faa:	10000593          	li	a1,256
1c004fae:	00204737          	lui	a4,0x204
1c004fb2:	30061073          	csrw	mstatus,a2
1c004fb6:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004fba:	03c76783          	p.elw	a5,60(a4)
1c004fbe:	00b72223          	sw	a1,4(a4)
1c004fc2:	30047673          	csrrci	a2,mstatus,8
1c004fc6:	40472783          	lw	a5,1028(a4)
1c004fca:	11012683          	lw	a3,272(sp)
1c004fce:	40d7d7b3          	sra	a5,a5,a3
1c004fd2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004fd6:	fff1                	bnez	a5,1c004fb2 <S5_Linear_64x13x18x128+0x842>
1c004fd8:	4785                	li	a5,1
1c004fda:	00d796b3          	sll	a3,a5,a3
1c004fde:	002047b7          	lui	a5,0x204
1c004fe2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c004fe6:	30061073          	csrw	mstatus,a2
1c004fea:	22c12083          	lw	ra,556(sp)
1c004fee:	22812403          	lw	s0,552(sp)
1c004ff2:	22412483          	lw	s1,548(sp)
1c004ff6:	22012903          	lw	s2,544(sp)
1c004ffa:	21c12983          	lw	s3,540(sp)
1c004ffe:	21812a03          	lw	s4,536(sp)
1c005002:	21412a83          	lw	s5,532(sp)
1c005006:	21012b03          	lw	s6,528(sp)
1c00500a:	20c12b83          	lw	s7,524(sp)
1c00500e:	20812c03          	lw	s8,520(sp)
1c005012:	20412c83          	lw	s9,516(sp)
1c005016:	20012d03          	lw	s10,512(sp)
1c00501a:	1fc12d83          	lw	s11,508(sp)
1c00501e:	23010113          	addi	sp,sp,560
1c005022:	8082                	ret
1c005024:	13200793          	li	a5,306
1c005028:	04f11423          	sh	a5,72(sp)
1c00502c:	04f11523          	sh	a5,74(sp)
1c005030:	00204437          	lui	s0,0x204
1c005034:	0ff00793          	li	a5,255
1c005038:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
1c00503c:	20040413          	addi	s0,s0,512
1c005040:	00f42023          	sw	a5,0(s0)
1c005044:	00f42623          	sw	a5,12(s0)
1c005048:	1c0077b7          	lui	a5,0x1c007
1c00504c:	b2c78793          	addi	a5,a5,-1236 # 1c006b2c <KerParLinearLayer_SQ8>
1c005050:	00204737          	lui	a4,0x204
1c005054:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c005058:	1828                	addi	a0,sp,56
1c00505a:	002047b7          	lui	a5,0x204
1c00505e:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c005062:	2cb010ef          	jal	ra,1c006b2c <KerParLinearLayer_SQ8>
1c005066:	01c46783          	p.elw	a5,28(s0)
1c00506a:	100004b7          	lui	s1,0x10000
1c00506e:	01c48493          	addi	s1,s1,28 # 1000001c <model_L1_Memory>
1c005072:	409c                	lw	a5,0(s1)
1c005074:	6731                	lui	a4,0xc
1c005076:	ce070993          	addi	s3,a4,-800 # bce0 <__rt_stack_size+0xb4e0>
1c00507a:	013786b3          	add	a3,a5,s3
1c00507e:	d036                	sw	a3,32(sp)
1c005080:	d6070693          	addi	a3,a4,-672
1c005084:	96be                	add	a3,a3,a5
1c005086:	d636                	sw	a3,44(sp)
1c005088:	de070713          	addi	a4,a4,-544
1c00508c:	97ba                	add	a5,a5,a4
1c00508e:	d83e                	sw	a5,48(sp)
1c005090:	00204437          	lui	s0,0x204
1c005094:	0ff00793          	li	a5,255
1c005098:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
1c00509c:	20040913          	addi	s2,s0,512
1c0050a0:	00f92023          	sw	a5,0(s2)
1c0050a4:	00f92623          	sw	a5,12(s2)
1c0050a8:	1c0077b7          	lui	a5,0x1c007
1c0050ac:	93078793          	addi	a5,a5,-1744 # 1c006930 <KerParReduct_CC_SQ8>
1c0050b0:	00204737          	lui	a4,0x204
1c0050b4:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c0050b8:	0868                	addi	a0,sp,28
1c0050ba:	002047b7          	lui	a5,0x204
1c0050be:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c0050c2:	06f010ef          	jal	ra,1c006930 <KerParReduct_CC_SQ8>
1c0050c6:	01c96783          	p.elw	a5,28(s2)
1c0050ca:	4098                	lw	a4,0(s1)
1c0050cc:	974e                	add	a4,a4,s3
1c0050ce:	300476f3          	csrrci	a3,mstatus,8
1c0050d2:	40042403          	lw	s0,1024(s0)
1c0050d6:	000a07b7          	lui	a5,0xa0
1c0050da:	04078793          	addi	a5,a5,64 # a0040 <__L2+0x20040>
1c0050de:	c157c7b3          	p.bset	a5,a5,0,21
1c0050e2:	00204637          	lui	a2,0x204
1c0050e6:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
1c0050ea:	002047b7          	lui	a5,0x204
1c0050ee:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c0050f2:	4732                	lw	a4,12(sp)
1c0050f4:	40e7a023          	sw	a4,1024(a5)
1c0050f8:	10812823          	sw	s0,272(sp)
1c0050fc:	12012023          	sw	zero,288(sp)
1c005100:	30069073          	csrw	mstatus,a3
1c005104:	12012783          	lw	a5,288(sp)
1c005108:	e80784e3          	beqz	a5,1c004f90 <S5_Linear_64x13x18x128+0x820>
1c00510c:	12812683          	lw	a3,296(sp)
1c005110:	02000713          	li	a4,32
1c005114:	002047b7          	lui	a5,0x204
1c005118:	ec0689e3          	beqz	a3,1c004fea <S5_Linear_64x13x18x128+0x87a>
1c00511c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c005120:	03c7e683          	p.elw	a3,60(a5)
1c005124:	00e7a223          	sw	a4,4(a5)
1c005128:	12812683          	lw	a3,296(sp)
1c00512c:	fae5                	bnez	a3,1c00511c <S5_Linear_64x13x18x128+0x9ac>
1c00512e:	bd75                	j	1c004fea <S5_Linear_64x13x18x128+0x87a>

1c005130 <S6_Linear_2x64>:
1c005130:	712d                	addi	sp,sp,-288
1c005132:	10112e23          	sw	ra,284(sp)
1c005136:	10812c23          	sw	s0,280(sp)
1c00513a:	10912a23          	sw	s1,276(sp)
1c00513e:	11212823          	sw	s2,272(sp)
1c005142:	8436                	mv	s0,a3
1c005144:	100006b7          	lui	a3,0x10000
1c005148:	01c6a683          	lw	a3,28(a3) # 1000001c <model_L1_Memory>
1c00514c:	c636                	sw	a3,12(sp)
1c00514e:	04068893          	addi	a7,a3,64
1c005152:	c846                	sw	a7,16(sp)
1c005154:	0c068893          	addi	a7,a3,192
1c005158:	ca46                	sw	a7,20(sp)
1c00515a:	0c868893          	addi	a7,a3,200
1c00515e:	cc46                	sw	a7,24(sp)
1c005160:	04000893          	li	a7,64
1c005164:	01111e23          	sh	a7,28(sp)
1c005168:	01111f23          	sh	a7,30(sp)
1c00516c:	4889                	li	a7,2
1c00516e:	03111023          	sh	a7,32(sp)
1c005172:	0cc68893          	addi	a7,a3,204
1c005176:	d246                	sw	a7,36(sp)
1c005178:	0d068893          	addi	a7,a3,208
1c00517c:	d446                	sw	a7,40(sp)
1c00517e:	0d468893          	addi	a7,a3,212
1c005182:	d646                	sw	a7,44(sp)
1c005184:	30047e73          	csrrci	t3,mstatus,8
1c005188:	00204337          	lui	t1,0x204
1c00518c:	40032303          	lw	t1,1024(t1) # 204400 <__L2+0x184400>
1c005190:	000b08b7          	lui	a7,0xb0
1c005194:	04088893          	addi	a7,a7,64 # b0040 <__L2+0x30040>
1c005198:	c158c8b3          	p.bset	a7,a7,0,21
1c00519c:	00204eb7          	lui	t4,0x204
1c0051a0:	411ea023          	sw	a7,1024(t4) # 204400 <__L2+0x184400>
1c0051a4:	002048b7          	lui	a7,0x204
1c0051a8:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
1c0051ac:	002046b7          	lui	a3,0x204
1c0051b0:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
1c0051b4:	d99a                	sw	t1,240(sp)
1c0051b6:	10012023          	sw	zero,256(sp)
1c0051ba:	300e1073          	csrw	mstatus,t3
1c0051be:	10012683          	lw	a3,256(sp)
1c0051c2:	c685                	beqz	a3,1c0051ea <S6_Linear_2x64+0xba>
1c0051c4:	10812883          	lw	a7,264(sp)
1c0051c8:	02000513          	li	a0,32
1c0051cc:	002046b7          	lui	a3,0x204
1c0051d0:	06088863          	beqz	a7,1c005240 <S6_Linear_2x64+0x110>
1c0051d4:	00a6a423          	sw	a0,8(a3) # 204008 <__L2+0x184008>
1c0051d8:	03c6e883          	p.elw	a7,60(a3)
1c0051dc:	00a6a223          	sw	a0,4(a3)
1c0051e0:	10812883          	lw	a7,264(sp)
1c0051e4:	fe0898e3          	bnez	a7,1c0051d4 <S6_Linear_2x64+0xa4>
1c0051e8:	a8a1                	j	1c005240 <S6_Linear_2x64+0x110>
1c0051ea:	30047373          	csrrci	t1,mstatus,8
1c0051ee:	002046b7          	lui	a3,0x204
1c0051f2:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c0051f6:	58ce                	lw	a7,240(sp)
1c0051f8:	4116d6b3          	sra	a3,a3,a7
1c0051fc:	fc16b6b3          	p.bclr	a3,a3,30,1
1c005200:	c69d                	beqz	a3,1c00522e <S6_Linear_2x64+0xfe>
1c005202:	10000e13          	li	t3,256
1c005206:	00204537          	lui	a0,0x204
1c00520a:	30031073          	csrw	mstatus,t1
1c00520e:	01c52423          	sw	t3,8(a0) # 204008 <__L2+0x184008>
1c005212:	03c56683          	p.elw	a3,60(a0)
1c005216:	01c52223          	sw	t3,4(a0)
1c00521a:	30047373          	csrrci	t1,mstatus,8
1c00521e:	40452683          	lw	a3,1028(a0)
1c005222:	58ce                	lw	a7,240(sp)
1c005224:	4116d6b3          	sra	a3,a3,a7
1c005228:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00522c:	fef9                	bnez	a3,1c00520a <S6_Linear_2x64+0xda>
1c00522e:	4685                	li	a3,1
1c005230:	011698b3          	sll	a7,a3,a7
1c005234:	002046b7          	lui	a3,0x204
1c005238:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
1c00523c:	30031073          	csrw	mstatus,t1
1c005240:	100006b7          	lui	a3,0x10000
1c005244:	01c6a883          	lw	a7,28(a3) # 1000001c <model_L1_Memory>
1c005248:	04088893          	addi	a7,a7,64
1c00524c:	30047373          	csrrci	t1,mstatus,8
1c005250:	00204537          	lui	a0,0x204
1c005254:	40052503          	lw	a0,1024(a0) # 204400 <__L2+0x184400>
1c005258:	000b06b7          	lui	a3,0xb0
1c00525c:	08068693          	addi	a3,a3,128 # b0080 <__L2+0x30080>
1c005260:	c156c6b3          	p.bset	a3,a3,0,21
1c005264:	00204e37          	lui	t3,0x204
1c005268:	40de2023          	sw	a3,1024(t3) # 204400 <__L2+0x184400>
1c00526c:	002046b7          	lui	a3,0x204
1c005270:	4116a023          	sw	a7,1024(a3) # 204400 <__L2+0x184400>
1c005274:	40b6a023          	sw	a1,1024(a3)
1c005278:	c9aa                	sw	a0,208(sp)
1c00527a:	d182                	sw	zero,224(sp)
1c00527c:	30031073          	csrw	mstatus,t1
1c005280:	568e                	lw	a3,224(sp)
1c005282:	c285                	beqz	a3,1c0052a2 <S6_Linear_2x64+0x172>
1c005284:	552e                	lw	a0,232(sp)
1c005286:	02000593          	li	a1,32
1c00528a:	002046b7          	lui	a3,0x204
1c00528e:	c52d                	beqz	a0,1c0052f8 <S6_Linear_2x64+0x1c8>
1c005290:	00b6a423          	sw	a1,8(a3) # 204008 <__L2+0x184008>
1c005294:	03c6e503          	p.elw	a0,60(a3)
1c005298:	00b6a223          	sw	a1,4(a3)
1c00529c:	552e                	lw	a0,232(sp)
1c00529e:	f96d                	bnez	a0,1c005290 <S6_Linear_2x64+0x160>
1c0052a0:	a8a1                	j	1c0052f8 <S6_Linear_2x64+0x1c8>
1c0052a2:	300478f3          	csrrci	a7,mstatus,8
1c0052a6:	002046b7          	lui	a3,0x204
1c0052aa:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c0052ae:	454e                	lw	a0,208(sp)
1c0052b0:	40a6d6b3          	sra	a3,a3,a0
1c0052b4:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0052b8:	c69d                	beqz	a3,1c0052e6 <S6_Linear_2x64+0x1b6>
1c0052ba:	10000313          	li	t1,256
1c0052be:	002045b7          	lui	a1,0x204
1c0052c2:	30089073          	csrw	mstatus,a7
1c0052c6:	0065a423          	sw	t1,8(a1) # 204008 <__L2+0x184008>
1c0052ca:	03c5e683          	p.elw	a3,60(a1)
1c0052ce:	0065a223          	sw	t1,4(a1)
1c0052d2:	300478f3          	csrrci	a7,mstatus,8
1c0052d6:	4045a683          	lw	a3,1028(a1)
1c0052da:	454e                	lw	a0,208(sp)
1c0052dc:	40a6d6b3          	sra	a3,a3,a0
1c0052e0:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0052e4:	fef9                	bnez	a3,1c0052c2 <S6_Linear_2x64+0x192>
1c0052e6:	4685                	li	a3,1
1c0052e8:	00a69533          	sll	a0,a3,a0
1c0052ec:	002046b7          	lui	a3,0x204
1c0052f0:	40a6a223          	sw	a0,1028(a3) # 204404 <__L2+0x184404>
1c0052f4:	30089073          	csrw	mstatus,a7
1c0052f8:	100006b7          	lui	a3,0x10000
1c0052fc:	01c6a503          	lw	a0,28(a3) # 1000001c <model_L1_Memory>
1c005300:	0c050513          	addi	a0,a0,192
1c005304:	300478f3          	csrrci	a7,mstatus,8
1c005308:	002045b7          	lui	a1,0x204
1c00530c:	4005a583          	lw	a1,1024(a1) # 204400 <__L2+0x184400>
1c005310:	000b06b7          	lui	a3,0xb0
1c005314:	06a1                	addi	a3,a3,8
1c005316:	c156c6b3          	p.bset	a3,a3,0,21
1c00531a:	00204337          	lui	t1,0x204
1c00531e:	40d32023          	sw	a3,1024(t1) # 204400 <__L2+0x184400>
1c005322:	002046b7          	lui	a3,0x204
1c005326:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
1c00532a:	40c6a023          	sw	a2,1024(a3)
1c00532e:	d92e                	sw	a1,176(sp)
1c005330:	c182                	sw	zero,192(sp)
1c005332:	30089073          	csrw	mstatus,a7
1c005336:	468e                	lw	a3,192(sp)
1c005338:	c285                	beqz	a3,1c005358 <S6_Linear_2x64+0x228>
1c00533a:	45ae                	lw	a1,200(sp)
1c00533c:	02000613          	li	a2,32
1c005340:	002046b7          	lui	a3,0x204
1c005344:	c5ad                	beqz	a1,1c0053ae <S6_Linear_2x64+0x27e>
1c005346:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
1c00534a:	03c6e583          	p.elw	a1,60(a3)
1c00534e:	00c6a223          	sw	a2,4(a3)
1c005352:	45ae                	lw	a1,200(sp)
1c005354:	f9ed                	bnez	a1,1c005346 <S6_Linear_2x64+0x216>
1c005356:	a8a1                	j	1c0053ae <S6_Linear_2x64+0x27e>
1c005358:	30047573          	csrrci	a0,mstatus,8
1c00535c:	002046b7          	lui	a3,0x204
1c005360:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c005364:	55ca                	lw	a1,176(sp)
1c005366:	40b6d6b3          	sra	a3,a3,a1
1c00536a:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00536e:	c69d                	beqz	a3,1c00539c <S6_Linear_2x64+0x26c>
1c005370:	10000893          	li	a7,256
1c005374:	00204637          	lui	a2,0x204
1c005378:	30051073          	csrw	mstatus,a0
1c00537c:	01162423          	sw	a7,8(a2) # 204008 <__L2+0x184008>
1c005380:	03c66683          	p.elw	a3,60(a2)
1c005384:	01162223          	sw	a7,4(a2)
1c005388:	30047573          	csrrci	a0,mstatus,8
1c00538c:	40462683          	lw	a3,1028(a2)
1c005390:	55ca                	lw	a1,176(sp)
1c005392:	40b6d6b3          	sra	a3,a3,a1
1c005396:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00539a:	fef9                	bnez	a3,1c005378 <S6_Linear_2x64+0x248>
1c00539c:	4685                	li	a3,1
1c00539e:	00b695b3          	sll	a1,a3,a1
1c0053a2:	002046b7          	lui	a3,0x204
1c0053a6:	40b6a223          	sw	a1,1028(a3) # 204404 <__L2+0x184404>
1c0053aa:	30051073          	csrw	mstatus,a0
1c0053ae:	100006b7          	lui	a3,0x10000
1c0053b2:	01c6a583          	lw	a1,28(a3) # 1000001c <model_L1_Memory>
1c0053b6:	0cc58593          	addi	a1,a1,204
1c0053ba:	30047573          	csrrci	a0,mstatus,8
1c0053be:	00204637          	lui	a2,0x204
1c0053c2:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
1c0053c6:	000b06b7          	lui	a3,0xb0
1c0053ca:	0689                	addi	a3,a3,2
1c0053cc:	c156c6b3          	p.bset	a3,a3,0,21
1c0053d0:	002048b7          	lui	a7,0x204
1c0053d4:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
1c0053d8:	002046b7          	lui	a3,0x204
1c0053dc:	40b6a023          	sw	a1,1024(a3) # 204400 <__L2+0x184400>
1c0053e0:	40e6a023          	sw	a4,1024(a3)
1c0053e4:	c932                	sw	a2,144(sp)
1c0053e6:	d102                	sw	zero,160(sp)
1c0053e8:	30051073          	csrw	mstatus,a0
1c0053ec:	570a                	lw	a4,160(sp)
1c0053ee:	c305                	beqz	a4,1c00540e <S6_Linear_2x64+0x2de>
1c0053f0:	562a                	lw	a2,168(sp)
1c0053f2:	02000693          	li	a3,32
1c0053f6:	00204737          	lui	a4,0x204
1c0053fa:	c62d                	beqz	a2,1c005464 <S6_Linear_2x64+0x334>
1c0053fc:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c005400:	03c76603          	p.elw	a2,60(a4)
1c005404:	00d72223          	sw	a3,4(a4)
1c005408:	562a                	lw	a2,168(sp)
1c00540a:	fa6d                	bnez	a2,1c0053fc <S6_Linear_2x64+0x2cc>
1c00540c:	a8a1                	j	1c005464 <S6_Linear_2x64+0x334>
1c00540e:	300475f3          	csrrci	a1,mstatus,8
1c005412:	00204737          	lui	a4,0x204
1c005416:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c00541a:	464a                	lw	a2,144(sp)
1c00541c:	40c75733          	sra	a4,a4,a2
1c005420:	fc173733          	p.bclr	a4,a4,30,1
1c005424:	c71d                	beqz	a4,1c005452 <S6_Linear_2x64+0x322>
1c005426:	10000513          	li	a0,256
1c00542a:	002046b7          	lui	a3,0x204
1c00542e:	30059073          	csrw	mstatus,a1
1c005432:	00a6a423          	sw	a0,8(a3) # 204008 <__L2+0x184008>
1c005436:	03c6e703          	p.elw	a4,60(a3)
1c00543a:	00a6a223          	sw	a0,4(a3)
1c00543e:	300475f3          	csrrci	a1,mstatus,8
1c005442:	4046a703          	lw	a4,1028(a3)
1c005446:	464a                	lw	a2,144(sp)
1c005448:	40c75733          	sra	a4,a4,a2
1c00544c:	fc173733          	p.bclr	a4,a4,30,1
1c005450:	ff79                	bnez	a4,1c00542e <S6_Linear_2x64+0x2fe>
1c005452:	4705                	li	a4,1
1c005454:	00c71633          	sll	a2,a4,a2
1c005458:	00204737          	lui	a4,0x204
1c00545c:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
1c005460:	30059073          	csrw	mstatus,a1
1c005464:	10000737          	lui	a4,0x10000
1c005468:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c00546c:	0d060613          	addi	a2,a2,208
1c005470:	300475f3          	csrrci	a1,mstatus,8
1c005474:	002046b7          	lui	a3,0x204
1c005478:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c00547c:	000b0737          	lui	a4,0xb0
1c005480:	0709                	addi	a4,a4,2
1c005482:	c1574733          	p.bset	a4,a4,0,21
1c005486:	00204537          	lui	a0,0x204
1c00548a:	40e52023          	sw	a4,1024(a0) # 204400 <__L2+0x184400>
1c00548e:	00204737          	lui	a4,0x204
1c005492:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
1c005496:	40f72023          	sw	a5,1024(a4)
1c00549a:	d8b6                	sw	a3,112(sp)
1c00549c:	c102                	sw	zero,128(sp)
1c00549e:	30059073          	csrw	mstatus,a1
1c0054a2:	478a                	lw	a5,128(sp)
1c0054a4:	c385                	beqz	a5,1c0054c4 <S6_Linear_2x64+0x394>
1c0054a6:	46aa                	lw	a3,136(sp)
1c0054a8:	02000713          	li	a4,32
1c0054ac:	002047b7          	lui	a5,0x204
1c0054b0:	c6ad                	beqz	a3,1c00551a <S6_Linear_2x64+0x3ea>
1c0054b2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0054b6:	03c7e683          	p.elw	a3,60(a5)
1c0054ba:	00e7a223          	sw	a4,4(a5)
1c0054be:	46aa                	lw	a3,136(sp)
1c0054c0:	faed                	bnez	a3,1c0054b2 <S6_Linear_2x64+0x382>
1c0054c2:	a8a1                	j	1c00551a <S6_Linear_2x64+0x3ea>
1c0054c4:	30047673          	csrrci	a2,mstatus,8
1c0054c8:	002047b7          	lui	a5,0x204
1c0054cc:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0054d0:	56c6                	lw	a3,112(sp)
1c0054d2:	40d7d7b3          	sra	a5,a5,a3
1c0054d6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0054da:	c79d                	beqz	a5,1c005508 <S6_Linear_2x64+0x3d8>
1c0054dc:	10000593          	li	a1,256
1c0054e0:	00204737          	lui	a4,0x204
1c0054e4:	30061073          	csrw	mstatus,a2
1c0054e8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c0054ec:	03c76783          	p.elw	a5,60(a4)
1c0054f0:	00b72223          	sw	a1,4(a4)
1c0054f4:	30047673          	csrrci	a2,mstatus,8
1c0054f8:	40472783          	lw	a5,1028(a4)
1c0054fc:	56c6                	lw	a3,112(sp)
1c0054fe:	40d7d7b3          	sra	a5,a5,a3
1c005502:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005506:	fff9                	bnez	a5,1c0054e4 <S6_Linear_2x64+0x3b4>
1c005508:	4785                	li	a5,1
1c00550a:	00d796b3          	sll	a3,a5,a3
1c00550e:	002047b7          	lui	a5,0x204
1c005512:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c005516:	30061073          	csrw	mstatus,a2
1c00551a:	100007b7          	lui	a5,0x10000
1c00551e:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c005522:	0d468693          	addi	a3,a3,212
1c005526:	30047673          	csrrci	a2,mstatus,8
1c00552a:	00204737          	lui	a4,0x204
1c00552e:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c005532:	000b07b7          	lui	a5,0xb0
1c005536:	07a5                	addi	a5,a5,9
1c005538:	c157c7b3          	p.bset	a5,a5,0,21
1c00553c:	002045b7          	lui	a1,0x204
1c005540:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c005544:	002047b7          	lui	a5,0x204
1c005548:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
1c00554c:	4107a023          	sw	a6,1024(a5)
1c005550:	c8ba                	sw	a4,80(sp)
1c005552:	d082                	sw	zero,96(sp)
1c005554:	30061073          	csrw	mstatus,a2
1c005558:	5786                	lw	a5,96(sp)
1c00555a:	c385                	beqz	a5,1c00557a <S6_Linear_2x64+0x44a>
1c00555c:	56a6                	lw	a3,104(sp)
1c00555e:	02000713          	li	a4,32
1c005562:	002047b7          	lui	a5,0x204
1c005566:	c6ad                	beqz	a3,1c0055d0 <S6_Linear_2x64+0x4a0>
1c005568:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00556c:	03c7e683          	p.elw	a3,60(a5)
1c005570:	00e7a223          	sw	a4,4(a5)
1c005574:	56a6                	lw	a3,104(sp)
1c005576:	faed                	bnez	a3,1c005568 <S6_Linear_2x64+0x438>
1c005578:	a8a1                	j	1c0055d0 <S6_Linear_2x64+0x4a0>
1c00557a:	30047673          	csrrci	a2,mstatus,8
1c00557e:	002047b7          	lui	a5,0x204
1c005582:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c005586:	46c6                	lw	a3,80(sp)
1c005588:	40d7d7b3          	sra	a5,a5,a3
1c00558c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005590:	c79d                	beqz	a5,1c0055be <S6_Linear_2x64+0x48e>
1c005592:	10000593          	li	a1,256
1c005596:	00204737          	lui	a4,0x204
1c00559a:	30061073          	csrw	mstatus,a2
1c00559e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c0055a2:	03c76783          	p.elw	a5,60(a4)
1c0055a6:	00b72223          	sw	a1,4(a4)
1c0055aa:	30047673          	csrrci	a2,mstatus,8
1c0055ae:	40472783          	lw	a5,1028(a4)
1c0055b2:	46c6                	lw	a3,80(sp)
1c0055b4:	40d7d7b3          	sra	a5,a5,a3
1c0055b8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0055bc:	fff9                	bnez	a5,1c00559a <S6_Linear_2x64+0x46a>
1c0055be:	4785                	li	a5,1
1c0055c0:	00d796b3          	sll	a3,a5,a3
1c0055c4:	002047b7          	lui	a5,0x204
1c0055c8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0055cc:	30061073          	csrw	mstatus,a2
1c0055d0:	002044b7          	lui	s1,0x204
1c0055d4:	0ff00793          	li	a5,255
1c0055d8:	08f4a223          	sw	a5,132(s1) # 204084 <__L2+0x184084>
1c0055dc:	20048913          	addi	s2,s1,512
1c0055e0:	00f92023          	sw	a5,0(s2)
1c0055e4:	00f92623          	sw	a5,12(s2)
1c0055e8:	1c0077b7          	lui	a5,0x1c007
1c0055ec:	c6c78793          	addi	a5,a5,-916 # 1c006c6c <KerParLinearLayerFullFeatB32_SQ8>
1c0055f0:	00204737          	lui	a4,0x204
1c0055f4:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c0055f8:	0068                	addi	a0,sp,12
1c0055fa:	002047b7          	lui	a5,0x204
1c0055fe:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c005602:	66a010ef          	jal	ra,1c006c6c <KerParLinearLayerFullFeatB32_SQ8>
1c005606:	01c96783          	p.elw	a5,28(s2)
1c00560a:	100007b7          	lui	a5,0x10000
1c00560e:	01c7a703          	lw	a4,28(a5) # 1000001c <model_L1_Memory>
1c005612:	0c870713          	addi	a4,a4,200
1c005616:	300476f3          	csrrci	a3,mstatus,8
1c00561a:	4004a483          	lw	s1,1024(s1)
1c00561e:	000a07b7          	lui	a5,0xa0
1c005622:	0789                	addi	a5,a5,2
1c005624:	c157c7b3          	p.bset	a5,a5,0,21
1c005628:	00204637          	lui	a2,0x204
1c00562c:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
1c005630:	002047b7          	lui	a5,0x204
1c005634:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c005638:	4087a023          	sw	s0,1024(a5)
1c00563c:	d826                	sw	s1,48(sp)
1c00563e:	c082                	sw	zero,64(sp)
1c005640:	30069073          	csrw	mstatus,a3
1c005644:	4786                	lw	a5,64(sp)
1c005646:	c385                	beqz	a5,1c005666 <S6_Linear_2x64+0x536>
1c005648:	46a6                	lw	a3,72(sp)
1c00564a:	02000713          	li	a4,32
1c00564e:	002047b7          	lui	a5,0x204
1c005652:	c6ad                	beqz	a3,1c0056bc <S6_Linear_2x64+0x58c>
1c005654:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c005658:	03c7e683          	p.elw	a3,60(a5)
1c00565c:	00e7a223          	sw	a4,4(a5)
1c005660:	46a6                	lw	a3,72(sp)
1c005662:	faed                	bnez	a3,1c005654 <S6_Linear_2x64+0x524>
1c005664:	a8a1                	j	1c0056bc <S6_Linear_2x64+0x58c>
1c005666:	30047673          	csrrci	a2,mstatus,8
1c00566a:	002047b7          	lui	a5,0x204
1c00566e:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c005672:	56c2                	lw	a3,48(sp)
1c005674:	40d7d7b3          	sra	a5,a5,a3
1c005678:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00567c:	c79d                	beqz	a5,1c0056aa <S6_Linear_2x64+0x57a>
1c00567e:	10000593          	li	a1,256
1c005682:	00204737          	lui	a4,0x204
1c005686:	30061073          	csrw	mstatus,a2
1c00568a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c00568e:	03c76783          	p.elw	a5,60(a4)
1c005692:	00b72223          	sw	a1,4(a4)
1c005696:	30047673          	csrrci	a2,mstatus,8
1c00569a:	40472783          	lw	a5,1028(a4)
1c00569e:	56c2                	lw	a3,48(sp)
1c0056a0:	40d7d7b3          	sra	a5,a5,a3
1c0056a4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0056a8:	fff9                	bnez	a5,1c005686 <S6_Linear_2x64+0x556>
1c0056aa:	4785                	li	a5,1
1c0056ac:	00d796b3          	sll	a3,a5,a3
1c0056b0:	002047b7          	lui	a5,0x204
1c0056b4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0056b8:	30061073          	csrw	mstatus,a2
1c0056bc:	11c12083          	lw	ra,284(sp)
1c0056c0:	11812403          	lw	s0,280(sp)
1c0056c4:	11412483          	lw	s1,276(sp)
1c0056c8:	11012903          	lw	s2,272(sp)
1c0056cc:	6115                	addi	sp,sp,288
1c0056ce:	8082                	ret

1c0056d0 <S7_SoftMax>:
1c0056d0:	7175                	addi	sp,sp,-144
1c0056d2:	c706                	sw	ra,140(sp)
1c0056d4:	c522                	sw	s0,136(sp)
1c0056d6:	c326                	sw	s1,132(sp)
1c0056d8:	c14a                	sw	s2,128(sp)
1c0056da:	dece                	sw	s3,124(sp)
1c0056dc:	842e                	mv	s0,a1
1c0056de:	100007b7          	lui	a5,0x10000
1c0056e2:	01c7a703          	lw	a4,28(a5) # 1000001c <model_L1_Memory>
1c0056e6:	c03a                	sw	a4,0(sp)
1c0056e8:	4789                	li	a5,2
1c0056ea:	00f11223          	sh	a5,4(sp)
1c0056ee:	00470793          	addi	a5,a4,4
1c0056f2:	c43e                	sw	a5,8(sp)
1c0056f4:	00870793          	addi	a5,a4,8
1c0056f8:	c63e                	sw	a5,12(sp)
1c0056fa:	300475f3          	csrrci	a1,mstatus,8
1c0056fe:	002046b7          	lui	a3,0x204
1c005702:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c005706:	000b07b7          	lui	a5,0xb0
1c00570a:	0789                	addi	a5,a5,2
1c00570c:	c157c7b3          	p.bset	a5,a5,0,21
1c005710:	00204837          	lui	a6,0x204
1c005714:	40f82023          	sw	a5,1024(a6) # 204400 <__L2+0x184400>
1c005718:	002047b7          	lui	a5,0x204
1c00571c:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c005720:	40a7a023          	sw	a0,1024(a5)
1c005724:	c8b6                	sw	a3,80(sp)
1c005726:	d082                	sw	zero,96(sp)
1c005728:	30059073          	csrw	mstatus,a1
1c00572c:	5786                	lw	a5,96(sp)
1c00572e:	c385                	beqz	a5,1c00574e <S7_SoftMax+0x7e>
1c005730:	56a6                	lw	a3,104(sp)
1c005732:	02000713          	li	a4,32
1c005736:	002047b7          	lui	a5,0x204
1c00573a:	c6ad                	beqz	a3,1c0057a4 <S7_SoftMax+0xd4>
1c00573c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c005740:	03c7e683          	p.elw	a3,60(a5)
1c005744:	00e7a223          	sw	a4,4(a5)
1c005748:	56a6                	lw	a3,104(sp)
1c00574a:	faed                	bnez	a3,1c00573c <S7_SoftMax+0x6c>
1c00574c:	a8a1                	j	1c0057a4 <S7_SoftMax+0xd4>
1c00574e:	300475f3          	csrrci	a1,mstatus,8
1c005752:	002047b7          	lui	a5,0x204
1c005756:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00575a:	46c6                	lw	a3,80(sp)
1c00575c:	40d7d7b3          	sra	a5,a5,a3
1c005760:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005764:	c79d                	beqz	a5,1c005792 <S7_SoftMax+0xc2>
1c005766:	10000513          	li	a0,256
1c00576a:	00204737          	lui	a4,0x204
1c00576e:	30059073          	csrw	mstatus,a1
1c005772:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
1c005776:	03c76783          	p.elw	a5,60(a4)
1c00577a:	00a72223          	sw	a0,4(a4)
1c00577e:	300475f3          	csrrci	a1,mstatus,8
1c005782:	40472783          	lw	a5,1028(a4)
1c005786:	46c6                	lw	a3,80(sp)
1c005788:	40d7d7b3          	sra	a5,a5,a3
1c00578c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005790:	fff9                	bnez	a5,1c00576e <S7_SoftMax+0x9e>
1c005792:	4785                	li	a5,1
1c005794:	00d796b3          	sll	a3,a5,a3
1c005798:	002047b7          	lui	a5,0x204
1c00579c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0057a0:	30059073          	csrw	mstatus,a1
1c0057a4:	100007b7          	lui	a5,0x10000
1c0057a8:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c0057ac:	06a1                	addi	a3,a3,8
1c0057ae:	300475f3          	csrrci	a1,mstatus,8
1c0057b2:	00204737          	lui	a4,0x204
1c0057b6:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c0057ba:	000b07b7          	lui	a5,0xb0
1c0057be:	07a5                	addi	a5,a5,9
1c0057c0:	c157c7b3          	p.bset	a5,a5,0,21
1c0057c4:	00204537          	lui	a0,0x204
1c0057c8:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
1c0057cc:	002047b7          	lui	a5,0x204
1c0057d0:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
1c0057d4:	40c7a023          	sw	a2,1024(a5)
1c0057d8:	d83a                	sw	a4,48(sp)
1c0057da:	c082                	sw	zero,64(sp)
1c0057dc:	30059073          	csrw	mstatus,a1
1c0057e0:	4786                	lw	a5,64(sp)
1c0057e2:	c385                	beqz	a5,1c005802 <S7_SoftMax+0x132>
1c0057e4:	46a6                	lw	a3,72(sp)
1c0057e6:	02000713          	li	a4,32
1c0057ea:	002047b7          	lui	a5,0x204
1c0057ee:	c6ad                	beqz	a3,1c005858 <S7_SoftMax+0x188>
1c0057f0:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0057f4:	03c7e683          	p.elw	a3,60(a5)
1c0057f8:	00e7a223          	sw	a4,4(a5)
1c0057fc:	46a6                	lw	a3,72(sp)
1c0057fe:	faed                	bnez	a3,1c0057f0 <S7_SoftMax+0x120>
1c005800:	a8a1                	j	1c005858 <S7_SoftMax+0x188>
1c005802:	30047673          	csrrci	a2,mstatus,8
1c005806:	002047b7          	lui	a5,0x204
1c00580a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00580e:	56c2                	lw	a3,48(sp)
1c005810:	40d7d7b3          	sra	a5,a5,a3
1c005814:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005818:	c79d                	beqz	a5,1c005846 <S7_SoftMax+0x176>
1c00581a:	10000593          	li	a1,256
1c00581e:	00204737          	lui	a4,0x204
1c005822:	30061073          	csrw	mstatus,a2
1c005826:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c00582a:	03c76783          	p.elw	a5,60(a4)
1c00582e:	00b72223          	sw	a1,4(a4)
1c005832:	30047673          	csrrci	a2,mstatus,8
1c005836:	40472783          	lw	a5,1028(a4)
1c00583a:	56c2                	lw	a3,48(sp)
1c00583c:	40d7d7b3          	sra	a5,a5,a3
1c005840:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005844:	fff9                	bnez	a5,1c005822 <S7_SoftMax+0x152>
1c005846:	4785                	li	a5,1
1c005848:	00d796b3          	sll	a3,a5,a3
1c00584c:	002047b7          	lui	a5,0x204
1c005850:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c005854:	30061073          	csrw	mstatus,a2
1c005858:	10000937          	lui	s2,0x10000
1c00585c:	01c90913          	addi	s2,s2,28 # 1000001c <model_L1_Memory>
1c005860:	00092783          	lw	a5,0(s2)
1c005864:	0087c783          	lbu	a5,8(a5)
1c005868:	00f11323          	sh	a5,6(sp)
1c00586c:	002044b7          	lui	s1,0x204
1c005870:	0ff00793          	li	a5,255
1c005874:	08f4a223          	sw	a5,132(s1) # 204084 <__L2+0x184084>
1c005878:	20048993          	addi	s3,s1,512
1c00587c:	00f9a023          	sw	a5,0(s3)
1c005880:	00f9a623          	sw	a5,12(s3)
1c005884:	1c0087b7          	lui	a5,0x1c008
1c005888:	70a78793          	addi	a5,a5,1802 # 1c00870a <KerParSoftMax_SQ8>
1c00588c:	00204737          	lui	a4,0x204
1c005890:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c005894:	850a                	mv	a0,sp
1c005896:	002047b7          	lui	a5,0x204
1c00589a:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c00589e:	66d020ef          	jal	ra,1c00870a <KerParSoftMax_SQ8>
1c0058a2:	01c9e783          	p.elw	a5,28(s3)
1c0058a6:	00092703          	lw	a4,0(s2)
1c0058aa:	0711                	addi	a4,a4,4
1c0058ac:	300476f3          	csrrci	a3,mstatus,8
1c0058b0:	4004a483          	lw	s1,1024(s1)
1c0058b4:	000a07b7          	lui	a5,0xa0
1c0058b8:	0791                	addi	a5,a5,4
1c0058ba:	c157c7b3          	p.bset	a5,a5,0,21
1c0058be:	00204637          	lui	a2,0x204
1c0058c2:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
1c0058c6:	002047b7          	lui	a5,0x204
1c0058ca:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c0058ce:	4087a023          	sw	s0,1024(a5)
1c0058d2:	c826                	sw	s1,16(sp)
1c0058d4:	d002                	sw	zero,32(sp)
1c0058d6:	30069073          	csrw	mstatus,a3
1c0058da:	5782                	lw	a5,32(sp)
1c0058dc:	c385                	beqz	a5,1c0058fc <S7_SoftMax+0x22c>
1c0058de:	56a2                	lw	a3,40(sp)
1c0058e0:	02000713          	li	a4,32
1c0058e4:	002047b7          	lui	a5,0x204
1c0058e8:	c6ad                	beqz	a3,1c005952 <S7_SoftMax+0x282>
1c0058ea:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0058ee:	03c7e683          	p.elw	a3,60(a5)
1c0058f2:	00e7a223          	sw	a4,4(a5)
1c0058f6:	56a2                	lw	a3,40(sp)
1c0058f8:	faed                	bnez	a3,1c0058ea <S7_SoftMax+0x21a>
1c0058fa:	a8a1                	j	1c005952 <S7_SoftMax+0x282>
1c0058fc:	30047673          	csrrci	a2,mstatus,8
1c005900:	002047b7          	lui	a5,0x204
1c005904:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c005908:	46c2                	lw	a3,16(sp)
1c00590a:	40d7d7b3          	sra	a5,a5,a3
1c00590e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005912:	c79d                	beqz	a5,1c005940 <S7_SoftMax+0x270>
1c005914:	10000593          	li	a1,256
1c005918:	00204737          	lui	a4,0x204
1c00591c:	30061073          	csrw	mstatus,a2
1c005920:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c005924:	03c76783          	p.elw	a5,60(a4)
1c005928:	00b72223          	sw	a1,4(a4)
1c00592c:	30047673          	csrrci	a2,mstatus,8
1c005930:	40472783          	lw	a5,1028(a4)
1c005934:	46c2                	lw	a3,16(sp)
1c005936:	40d7d7b3          	sra	a5,a5,a3
1c00593a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00593e:	fff9                	bnez	a5,1c00591c <S7_SoftMax+0x24c>
1c005940:	4785                	li	a5,1
1c005942:	00d796b3          	sll	a3,a5,a3
1c005946:	002047b7          	lui	a5,0x204
1c00594a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c00594e:	30061073          	csrw	mstatus,a2
1c005952:	40ba                	lw	ra,140(sp)
1c005954:	442a                	lw	s0,136(sp)
1c005956:	449a                	lw	s1,132(sp)
1c005958:	490a                	lw	s2,128(sp)
1c00595a:	59f6                	lw	s3,124(sp)
1c00595c:	6149                	addi	sp,sp,144
1c00595e:	8082                	ret

1c005960 <modelCNN_Construct>:
1c005960:	7125                	addi	sp,sp,-416
1c005962:	18112e23          	sw	ra,412(sp)
1c005966:	18812c23          	sw	s0,408(sp)
1c00596a:	18912a23          	sw	s1,404(sp)
1c00596e:	19212823          	sw	s2,400(sp)
1c005972:	19312623          	sw	s3,396(sp)
1c005976:	19412423          	sw	s4,392(sp)
1c00597a:	19512223          	sw	s5,388(sp)
1c00597e:	19612023          	sw	s6,384(sp)
1c005982:	17712e23          	sw	s7,380(sp)
1c005986:	17812c23          	sw	s8,376(sp)
1c00598a:	17912a23          	sw	s9,372(sp)
1c00598e:	17a12823          	sw	s10,368(sp)
1c005992:	17b12623          	sw	s11,364(sp)
1c005996:	1868                	addi	a0,sp,60
1c005998:	1bd040ef          	jal	ra,1c00a354 <pi_hyperram_conf_init>
1c00599c:	1028                	addi	a0,sp,40
1c00599e:	0e0030ef          	jal	ra,1c008a7e <pi_fs_conf_init>
1c0059a2:	1c011437          	lui	s0,0x1c011
1c0059a6:	186c                	addi	a1,sp,60
1c0059a8:	98840513          	addi	a0,s0,-1656 # 1c010988 <HyperRam>
1c0059ac:	491050ef          	jal	ra,1c00b63c <pi_open_from_conf>
1c0059b0:	98840513          	addi	a0,s0,-1656
1c0059b4:	249040ef          	jal	ra,1c00a3fc <pi_ram_open>
1c0059b8:	4a85                	li	s5,1
1c0059ba:	cd15                	beqz	a0,1c0059f6 <modelCNN_Construct+0x96>
1c0059bc:	8556                	mv	a0,s5
1c0059be:	19c12083          	lw	ra,412(sp)
1c0059c2:	19812403          	lw	s0,408(sp)
1c0059c6:	19412483          	lw	s1,404(sp)
1c0059ca:	19012903          	lw	s2,400(sp)
1c0059ce:	18c12983          	lw	s3,396(sp)
1c0059d2:	18812a03          	lw	s4,392(sp)
1c0059d6:	18412a83          	lw	s5,388(sp)
1c0059da:	18012b03          	lw	s6,384(sp)
1c0059de:	17c12b83          	lw	s7,380(sp)
1c0059e2:	17812c03          	lw	s8,376(sp)
1c0059e6:	17412c83          	lw	s9,372(sp)
1c0059ea:	17012d03          	lw	s10,368(sp)
1c0059ee:	16c12d83          	lw	s11,364(sp)
1c0059f2:	611d                	addi	sp,sp,416
1c0059f4:	8082                	ret
1c0059f6:	0848                	addi	a0,sp,20
1c0059f8:	02d040ef          	jal	ra,1c00a224 <pi_hyperflash_conf_init>
1c0059fc:	1c011437          	lui	s0,0x1c011
1c005a00:	97840413          	addi	s0,s0,-1672 # 1c010978 <HyperFlash+0xc>
1c005a04:	084c                	addi	a1,sp,20
1c005a06:	8522                	mv	a0,s0
1c005a08:	435050ef          	jal	ra,1c00b63c <pi_open_from_conf>
1c005a0c:	8522                	mv	a0,s0
1c005a0e:	030030ef          	jal	ra,1c008a3e <pi_flash_open>
1c005a12:	e905                	bnez	a0,1c005a42 <modelCNN_Construct+0xe2>
1c005a14:	1c011437          	lui	s0,0x1c011
1c005a18:	96c40793          	addi	a5,s0,-1684 # 1c01096c <HyperFlash>
1c005a1c:	07b1                	addi	a5,a5,12
1c005a1e:	d63e                	sw	a5,44(sp)
1c005a20:	d402                	sw	zero,40(sp)
1c005a22:	102c                	addi	a1,sp,40
1c005a24:	96c40513          	addi	a0,s0,-1684
1c005a28:	415050ef          	jal	ra,1c00b63c <pi_open_from_conf>
1c005a2c:	96c40513          	addi	a0,s0,-1684
1c005a30:	060030ef          	jal	ra,1c008a90 <pi_fs_mount>
1c005a34:	c909                	beqz	a0,1c005a46 <modelCNN_Construct+0xe6>
1c005a36:	96c40513          	addi	a0,s0,-1684
1c005a3a:	455c                	lw	a5,12(a0)
1c005a3c:	43dc                	lw	a5,4(a5)
1c005a3e:	0531                	addi	a0,a0,12
1c005a40:	9782                	jalr	a5
1c005a42:	4a85                	li	s5,1
1c005a44:	bfa5                	j	1c0059bc <modelCNN_Construct+0x5c>
1c005a46:	1c011537          	lui	a0,0x1c011
1c005a4a:	96c50413          	addi	s0,a0,-1684 # 1c01096c <HyperFlash>
1c005a4e:	4601                	li	a2,0
1c005a50:	1c0105b7          	lui	a1,0x1c010
1c005a54:	15858593          	addi	a1,a1,344 # 1c010158 <__clz_tab+0x324>
1c005a58:	96c50513          	addi	a0,a0,-1684
1c005a5c:	068030ef          	jal	ra,1c008ac4 <pi_fs_open>
1c005a60:	cc08                	sw	a0,24(s0)
1c005a62:	c515                	beqz	a0,1c005a8e <modelCNN_Construct+0x12e>
1c005a64:	1c011537          	lui	a0,0x1c011
1c005a68:	98852783          	lw	a5,-1656(a0) # 1c010988 <HyperRam>
1c005a6c:	4b9c                	lw	a5,16(a5)
1c005a6e:	001f9637          	lui	a2,0x1f9
1c005a72:	4d060613          	addi	a2,a2,1232 # 1f94d0 <__L2+0x1794d0>
1c005a76:	084c                	addi	a1,sp,20
1c005a78:	98850513          	addi	a0,a0,-1656
1c005a7c:	9782                	jalr	a5
1c005a7e:	8a2a                	mv	s4,a0
1c005a80:	c11d                	beqz	a0,1c005aa6 <modelCNN_Construct+0x146>
1c005a82:	1c0117b7          	lui	a5,0x1c011
1c005a86:	ca07ae23          	sw	zero,-836(a5) # 1c010cbc <model_L3_Memory>
1c005a8a:	4a89                	li	s5,2
1c005a8c:	bf05                	j	1c0059bc <modelCNN_Construct+0x5c>
1c005a8e:	1c011537          	lui	a0,0x1c011
1c005a92:	96c50513          	addi	a0,a0,-1684 # 1c01096c <HyperFlash>
1c005a96:	026030ef          	jal	ra,1c008abc <pi_fs_unmount>
1c005a9a:	445c                	lw	a5,12(s0)
1c005a9c:	43dc                	lw	a5,4(a5)
1c005a9e:	00c40513          	addi	a0,s0,12
1c005aa2:	9782                	jalr	a5
1c005aa4:	bf79                	j	1c005a42 <modelCNN_Construct+0xe2>
1c005aa6:	47d2                	lw	a5,20(sp)
1c005aa8:	2e079de3          	bnez	a5,1c0065a2 <modelCNN_Construct+0xc42>
1c005aac:	1c011537          	lui	a0,0x1c011
1c005ab0:	98852783          	lw	a5,-1656(a0) # 1c010988 <HyperRam>
1c005ab4:	4b9c                	lw	a5,16(a5)
1c005ab6:	001f9637          	lui	a2,0x1f9
1c005aba:	4d060613          	addi	a2,a2,1232 # 1f94d0 <__L2+0x1794d0>
1c005abe:	084c                	addi	a1,sp,20
1c005ac0:	98850513          	addi	a0,a0,-1656
1c005ac4:	9782                	jalr	a5
1c005ac6:	fd55                	bnez	a0,1c005a82 <modelCNN_Construct+0x122>
1c005ac8:	47d2                	lw	a5,20(sp)
1c005aca:	1c011737          	lui	a4,0x1c011
1c005ace:	caf72e23          	sw	a5,-836(a4) # 1c010cbc <model_L3_Memory>
1c005ad2:	4a89                	li	s5,2
1c005ad4:	ee0784e3          	beqz	a5,1c0059bc <modelCNN_Construct+0x5c>
1c005ad8:	0002b537          	lui	a0,0x2b
1c005adc:	55e50513          	addi	a0,a0,1374 # 2b55e <__L1Cl+0x1b55e>
1c005ae0:	47c060ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c005ae4:	1c0107b7          	lui	a5,0x1c010
1c005ae8:	7aa7ae23          	sw	a0,1980(a5) # 1c0107bc <model_L2_Memory>
1c005aec:	4a8d                	li	s5,3
1c005aee:	ec0507e3          	beqz	a0,1c0059bc <modelCNN_Construct+0x5c>
1c005af2:	65b1                	lui	a1,0xc
1c005af4:	e6c58593          	addi	a1,a1,-404 # be6c <__rt_stack_size+0xb66c>
1c005af8:	4501                	li	a0,0
1c005afa:	45c060ef          	jal	ra,1c00bf56 <pi_cl_l1_malloc>
1c005afe:	100007b7          	lui	a5,0x10000
1c005b02:	00a7ae23          	sw	a0,28(a5) # 1000001c <model_L1_Memory>
1c005b06:	28050be3          	beqz	a0,1c00659c <modelCNN_Construct+0xc3c>
1c005b0a:	69c9                	lui	s3,0x12
1c005b0c:	1c011cb7          	lui	s9,0x1c011
1c005b10:	96cc8c93          	addi	s9,s9,-1684 # 1c01096c <HyperFlash>
1c005b14:	1c011db7          	lui	s11,0x1c011
1c005b18:	001d4c37          	lui	s8,0x1d4
1c005b1c:	1c010bb7          	lui	s7,0x1c010
1c005b20:	4405                	li	s0,1
1c005b22:	1c011d37          	lui	s10,0x1c011
1c005b26:	1c011b37          	lui	s6,0x1c011
1c005b2a:	40000513          	li	a0,1024
1c005b2e:	04a9cab3          	p.min	s5,s3,a0
1c005b32:	c652                	sw	s4,12(sp)
1c005b34:	c68da583          	lw	a1,-920(s11) # 1c010c68 <model_L3_Flash>
1c005b38:	95e2                	add	a1,a1,s8
1c005b3a:	dda2                	sw	s0,248(sp)
1c005b3c:	d382                	sw	zero,228(sp)
1c005b3e:	10812423          	sw	s0,264(sp)
1c005b42:	0e010a23          	sb	zero,244(sp)
1c005b46:	119c                	addi	a5,sp,224
1c005b48:	8722                	mv	a4,s0
1c005b4a:	86d6                	mv	a3,s5
1c005b4c:	7bcba603          	lw	a2,1980(s7) # 1c0107bc <model_L2_Memory>
1c005b50:	95d2                	add	a1,a1,s4
1c005b52:	018ca503          	lw	a0,24(s9)
1c005b56:	7d3020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005b5a:	0f410783          	lb	a5,244(sp)
1c005b5e:	ef89                	bnez	a5,1c005b78 <modelCNN_Construct+0x218>
1c005b60:	30047973          	csrrci	s2,mstatus,8
1c005b64:	85a2                	mv	a1,s0
1c005b66:	01c00513          	li	a0,28
1c005b6a:	152060ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005b6e:	30091073          	csrw	mstatus,s2
1c005b72:	0f410783          	lb	a5,244(sp)
1c005b76:	d7ed                	beqz	a5,1c005b60 <modelCNN_Construct+0x200>
1c005b78:	cbcd2583          	lw	a1,-836(s10) # 1c010cbc <model_L3_Memory>
1c005b7c:	95e2                	add	a1,a1,s8
1c005b7e:	dca2                	sw	s0,120(sp)
1c005b80:	d282                	sw	zero,100(sp)
1c005b82:	c522                	sw	s0,136(sp)
1c005b84:	06010a23          	sb	zero,116(sp)
1c005b88:	988b2783          	lw	a5,-1656(s6) # 1c010988 <HyperRam>
1c005b8c:	0087a803          	lw	a6,8(a5)
1c005b90:	109c                	addi	a5,sp,96
1c005b92:	4701                	li	a4,0
1c005b94:	86d6                	mv	a3,s5
1c005b96:	7bcba603          	lw	a2,1980(s7)
1c005b9a:	4532                	lw	a0,12(sp)
1c005b9c:	95aa                	add	a1,a1,a0
1c005b9e:	988b0513          	addi	a0,s6,-1656
1c005ba2:	9802                	jalr	a6
1c005ba4:	07410783          	lb	a5,116(sp)
1c005ba8:	ef89                	bnez	a5,1c005bc2 <modelCNN_Construct+0x262>
1c005baa:	30047973          	csrrci	s2,mstatus,8
1c005bae:	85a2                	mv	a1,s0
1c005bb0:	01c00513          	li	a0,28
1c005bb4:	108060ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005bb8:	30091073          	csrw	mstatus,s2
1c005bbc:	07410783          	lb	a5,116(sp)
1c005bc0:	d7ed                	beqz	a5,1c005baa <modelCNN_Construct+0x24a>
1c005bc2:	9a56                	add	s4,s4,s5
1c005bc4:	415989b3          	sub	s3,s3,s5
1c005bc8:	f60991e3          	bnez	s3,1c005b2a <modelCNN_Construct+0x1ca>
1c005bcc:	001d4ab7          	lui	s5,0x1d4
1c005bd0:	1c011c37          	lui	s8,0x1c011
1c005bd4:	96cc0c13          	addi	s8,s8,-1684 # 1c01096c <HyperFlash>
1c005bd8:	1c011d37          	lui	s10,0x1c011
1c005bdc:	1c010bb7          	lui	s7,0x1c010
1c005be0:	4405                	li	s0,1
1c005be2:	1c011cb7          	lui	s9,0x1c011
1c005be6:	1c011b37          	lui	s6,0x1c011
1c005bea:	40000793          	li	a5,1024
1c005bee:	04faca33          	p.min	s4,s5,a5
1c005bf2:	894e                	mv	s2,s3
1c005bf4:	c68d2583          	lw	a1,-920(s10) # 1c010c68 <model_L3_Flash>
1c005bf8:	dda2                	sw	s0,248(sp)
1c005bfa:	d382                	sw	zero,228(sp)
1c005bfc:	10812423          	sw	s0,264(sp)
1c005c00:	0e010a23          	sb	zero,244(sp)
1c005c04:	119c                	addi	a5,sp,224
1c005c06:	8722                	mv	a4,s0
1c005c08:	86d2                	mv	a3,s4
1c005c0a:	7bcba603          	lw	a2,1980(s7) # 1c0107bc <model_L2_Memory>
1c005c0e:	95ce                	add	a1,a1,s3
1c005c10:	018c2503          	lw	a0,24(s8)
1c005c14:	715020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005c18:	0f410783          	lb	a5,244(sp)
1c005c1c:	ef89                	bnez	a5,1c005c36 <modelCNN_Construct+0x2d6>
1c005c1e:	30047df3          	csrrci	s11,mstatus,8
1c005c22:	85a2                	mv	a1,s0
1c005c24:	01c00513          	li	a0,28
1c005c28:	094060ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005c2c:	300d9073          	csrw	mstatus,s11
1c005c30:	0f410783          	lb	a5,244(sp)
1c005c34:	d7ed                	beqz	a5,1c005c1e <modelCNN_Construct+0x2be>
1c005c36:	cbcca583          	lw	a1,-836(s9) # 1c010cbc <model_L3_Memory>
1c005c3a:	dca2                	sw	s0,120(sp)
1c005c3c:	d282                	sw	zero,100(sp)
1c005c3e:	c522                	sw	s0,136(sp)
1c005c40:	06010a23          	sb	zero,116(sp)
1c005c44:	988b2783          	lw	a5,-1656(s6) # 1c010988 <HyperRam>
1c005c48:	0087a803          	lw	a6,8(a5)
1c005c4c:	109c                	addi	a5,sp,96
1c005c4e:	4701                	li	a4,0
1c005c50:	86d2                	mv	a3,s4
1c005c52:	7bcba603          	lw	a2,1980(s7)
1c005c56:	95ca                	add	a1,a1,s2
1c005c58:	988b0513          	addi	a0,s6,-1656
1c005c5c:	9802                	jalr	a6
1c005c5e:	07410783          	lb	a5,116(sp)
1c005c62:	ef89                	bnez	a5,1c005c7c <modelCNN_Construct+0x31c>
1c005c64:	30047973          	csrrci	s2,mstatus,8
1c005c68:	85a2                	mv	a1,s0
1c005c6a:	01c00513          	li	a0,28
1c005c6e:	04e060ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005c72:	30091073          	csrw	mstatus,s2
1c005c76:	07410783          	lb	a5,116(sp)
1c005c7a:	d7ed                	beqz	a5,1c005c64 <modelCNN_Construct+0x304>
1c005c7c:	99d2                	add	s3,s3,s4
1c005c7e:	414a8ab3          	sub	s5,s5,s4
1c005c82:	f60a94e3          	bnez	s5,1c005bea <modelCNN_Construct+0x28a>
1c005c86:	1c0117b7          	lui	a5,0x1c011
1c005c8a:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005c8e:	1c0117b7          	lui	a5,0x1c011
1c005c92:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c005c96:	1c0107b7          	lui	a5,0x1c010
1c005c9a:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c005c9e:	4785                	li	a5,1
1c005ca0:	ddbe                	sw	a5,248(sp)
1c005ca2:	d382                	sw	zero,228(sp)
1c005ca4:	10f12423          	sw	a5,264(sp)
1c005ca8:	0e010a23          	sb	zero,244(sp)
1c005cac:	119c                	addi	a5,sp,224
1c005cae:	4705                	li	a4,1
1c005cb0:	46a5                	li	a3,9
1c005cb2:	6615                	lui	a2,0x5
1c005cb4:	06060613          	addi	a2,a2,96 # 5060 <__rt_stack_size+0x4860>
1c005cb8:	962e                	add	a2,a2,a1
1c005cba:	001eb5b7          	lui	a1,0x1eb
1c005cbe:	06058593          	addi	a1,a1,96 # 1eb060 <__L2+0x16b060>
1c005cc2:	95c2                	add	a1,a1,a6
1c005cc4:	665020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005cc8:	0f410783          	lb	a5,244(sp)
1c005ccc:	ef89                	bnez	a5,1c005ce6 <modelCNN_Construct+0x386>
1c005cce:	30047473          	csrrci	s0,mstatus,8
1c005cd2:	4585                	li	a1,1
1c005cd4:	01c00513          	li	a0,28
1c005cd8:	7e5050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005cdc:	30041073          	csrw	mstatus,s0
1c005ce0:	0f410783          	lb	a5,244(sp)
1c005ce4:	d7ed                	beqz	a5,1c005cce <modelCNN_Construct+0x36e>
1c005ce6:	1c0117b7          	lui	a5,0x1c011
1c005cea:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005cee:	1c0117b7          	lui	a5,0x1c011
1c005cf2:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c005cf6:	1c0107b7          	lui	a5,0x1c010
1c005cfa:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c005cfe:	4785                	li	a5,1
1c005d00:	ddbe                	sw	a5,248(sp)
1c005d02:	d382                	sw	zero,228(sp)
1c005d04:	10f12423          	sw	a5,264(sp)
1c005d08:	0e010a23          	sb	zero,244(sp)
1c005d0c:	119c                	addi	a5,sp,224
1c005d0e:	4705                	li	a4,1
1c005d10:	12000693          	li	a3,288
1c005d14:	6615                	lui	a2,0x5
1c005d16:	a0060613          	addi	a2,a2,-1536 # 4a00 <__rt_stack_size+0x4200>
1c005d1a:	962e                	add	a2,a2,a1
1c005d1c:	001eb5b7          	lui	a1,0x1eb
1c005d20:	a0058593          	addi	a1,a1,-1536 # 1eaa00 <__L2+0x16aa00>
1c005d24:	95c2                	add	a1,a1,a6
1c005d26:	603020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005d2a:	0f410783          	lb	a5,244(sp)
1c005d2e:	ef89                	bnez	a5,1c005d48 <modelCNN_Construct+0x3e8>
1c005d30:	30047473          	csrrci	s0,mstatus,8
1c005d34:	4585                	li	a1,1
1c005d36:	01c00513          	li	a0,28
1c005d3a:	783050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005d3e:	30041073          	csrw	mstatus,s0
1c005d42:	0f410783          	lb	a5,244(sp)
1c005d46:	d7ed                	beqz	a5,1c005d30 <modelCNN_Construct+0x3d0>
1c005d48:	1c0117b7          	lui	a5,0x1c011
1c005d4c:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005d50:	1c0117b7          	lui	a5,0x1c011
1c005d54:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c005d58:	1c0107b7          	lui	a5,0x1c010
1c005d5c:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c005d60:	4785                	li	a5,1
1c005d62:	ddbe                	sw	a5,248(sp)
1c005d64:	d382                	sw	zero,228(sp)
1c005d66:	10f12423          	sw	a5,264(sp)
1c005d6a:	0e010a23          	sb	zero,244(sp)
1c005d6e:	119c                	addi	a5,sp,224
1c005d70:	4705                	li	a4,1
1c005d72:	08000693          	li	a3,128
1c005d76:	6615                	lui	a2,0x5
1c005d78:	d2060613          	addi	a2,a2,-736 # 4d20 <__rt_stack_size+0x4520>
1c005d7c:	962e                	add	a2,a2,a1
1c005d7e:	001eb5b7          	lui	a1,0x1eb
1c005d82:	d2058593          	addi	a1,a1,-736 # 1ead20 <__L2+0x16ad20>
1c005d86:	95c2                	add	a1,a1,a6
1c005d88:	5a1020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005d8c:	0f410783          	lb	a5,244(sp)
1c005d90:	ef89                	bnez	a5,1c005daa <modelCNN_Construct+0x44a>
1c005d92:	30047473          	csrrci	s0,mstatus,8
1c005d96:	4585                	li	a1,1
1c005d98:	01c00513          	li	a0,28
1c005d9c:	721050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005da0:	30041073          	csrw	mstatus,s0
1c005da4:	0f410783          	lb	a5,244(sp)
1c005da8:	d7ed                	beqz	a5,1c005d92 <modelCNN_Construct+0x432>
1c005daa:	1c0117b7          	lui	a5,0x1c011
1c005dae:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005db2:	1c0117b7          	lui	a5,0x1c011
1c005db6:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c005dba:	1c0107b7          	lui	a5,0x1c010
1c005dbe:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c005dc2:	4785                	li	a5,1
1c005dc4:	ddbe                	sw	a5,248(sp)
1c005dc6:	d382                	sw	zero,228(sp)
1c005dc8:	10f12423          	sw	a5,264(sp)
1c005dcc:	0e010a23          	sb	zero,244(sp)
1c005dd0:	119c                	addi	a5,sp,224
1c005dd2:	4705                	li	a4,1
1c005dd4:	02000693          	li	a3,32
1c005dd8:	6615                	lui	a2,0x5
1c005dda:	02060613          	addi	a2,a2,32 # 5020 <__rt_stack_size+0x4820>
1c005dde:	962e                	add	a2,a2,a1
1c005de0:	001eb5b7          	lui	a1,0x1eb
1c005de4:	02058593          	addi	a1,a1,32 # 1eb020 <__L2+0x16b020>
1c005de8:	95c2                	add	a1,a1,a6
1c005dea:	53f020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005dee:	0f410783          	lb	a5,244(sp)
1c005df2:	ef89                	bnez	a5,1c005e0c <modelCNN_Construct+0x4ac>
1c005df4:	30047473          	csrrci	s0,mstatus,8
1c005df8:	4585                	li	a1,1
1c005dfa:	01c00513          	li	a0,28
1c005dfe:	6bf050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005e02:	30041073          	csrw	mstatus,s0
1c005e06:	0f410783          	lb	a5,244(sp)
1c005e0a:	d7ed                	beqz	a5,1c005df4 <modelCNN_Construct+0x494>
1c005e0c:	1c0117b7          	lui	a5,0x1c011
1c005e10:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005e14:	1c0117b7          	lui	a5,0x1c011
1c005e18:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c005e1c:	1c0107b7          	lui	a5,0x1c010
1c005e20:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c005e24:	4785                	li	a5,1
1c005e26:	ddbe                	sw	a5,248(sp)
1c005e28:	d382                	sw	zero,228(sp)
1c005e2a:	10f12423          	sw	a5,264(sp)
1c005e2e:	0e010a23          	sb	zero,244(sp)
1c005e32:	119c                	addi	a5,sp,224
1c005e34:	4705                	li	a4,1
1c005e36:	02000693          	li	a3,32
1c005e3a:	6615                	lui	a2,0x5
1c005e3c:	04060613          	addi	a2,a2,64 # 5040 <__rt_stack_size+0x4840>
1c005e40:	962e                	add	a2,a2,a1
1c005e42:	001eb5b7          	lui	a1,0x1eb
1c005e46:	04058593          	addi	a1,a1,64 # 1eb040 <__L2+0x16b040>
1c005e4a:	95c2                	add	a1,a1,a6
1c005e4c:	4dd020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005e50:	0f410783          	lb	a5,244(sp)
1c005e54:	ef89                	bnez	a5,1c005e6e <modelCNN_Construct+0x50e>
1c005e56:	30047473          	csrrci	s0,mstatus,8
1c005e5a:	4585                	li	a1,1
1c005e5c:	01c00513          	li	a0,28
1c005e60:	65d050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005e64:	30041073          	csrw	mstatus,s0
1c005e68:	0f410783          	lb	a5,244(sp)
1c005e6c:	d7ed                	beqz	a5,1c005e56 <modelCNN_Construct+0x4f6>
1c005e6e:	1c0117b7          	lui	a5,0x1c011
1c005e72:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005e76:	1c0117b7          	lui	a5,0x1c011
1c005e7a:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c005e7e:	1c0107b7          	lui	a5,0x1c010
1c005e82:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c005e86:	4785                	li	a5,1
1c005e88:	ddbe                	sw	a5,248(sp)
1c005e8a:	d382                	sw	zero,228(sp)
1c005e8c:	10f12423          	sw	a5,264(sp)
1c005e90:	0e010a23          	sb	zero,244(sp)
1c005e94:	119c                	addi	a5,sp,224
1c005e96:	4705                	li	a4,1
1c005e98:	46a5                	li	a3,9
1c005e9a:	6615                	lui	a2,0x5
1c005e9c:	06c60613          	addi	a2,a2,108 # 506c <__rt_stack_size+0x486c>
1c005ea0:	962e                	add	a2,a2,a1
1c005ea2:	001eb5b7          	lui	a1,0x1eb
1c005ea6:	06c58593          	addi	a1,a1,108 # 1eb06c <__L2+0x16b06c>
1c005eaa:	95c2                	add	a1,a1,a6
1c005eac:	47d020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005eb0:	0f410783          	lb	a5,244(sp)
1c005eb4:	ef89                	bnez	a5,1c005ece <modelCNN_Construct+0x56e>
1c005eb6:	30047473          	csrrci	s0,mstatus,8
1c005eba:	4585                	li	a1,1
1c005ebc:	01c00513          	li	a0,28
1c005ec0:	5fd050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005ec4:	30041073          	csrw	mstatus,s0
1c005ec8:	0f410783          	lb	a5,244(sp)
1c005ecc:	d7ed                	beqz	a5,1c005eb6 <modelCNN_Construct+0x556>
1c005ece:	1c0117b7          	lui	a5,0x1c011
1c005ed2:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005ed6:	1c0117b7          	lui	a5,0x1c011
1c005eda:	c687a583          	lw	a1,-920(a5) # 1c010c68 <model_L3_Flash>
1c005ede:	1c0107b7          	lui	a5,0x1c010
1c005ee2:	7bc7a603          	lw	a2,1980(a5) # 1c0107bc <model_L2_Memory>
1c005ee6:	4785                	li	a5,1
1c005ee8:	ddbe                	sw	a5,248(sp)
1c005eea:	d382                	sw	zero,228(sp)
1c005eec:	10f12423          	sw	a5,264(sp)
1c005ef0:	0e010a23          	sb	zero,244(sp)
1c005ef4:	119c                	addi	a5,sp,224
1c005ef6:	4705                	li	a4,1
1c005ef8:	6695                	lui	a3,0x5
1c005efa:	80068693          	addi	a3,a3,-2048 # 4800 <__rt_stack_size+0x4000>
1c005efe:	001e6837          	lui	a6,0x1e6
1c005f02:	95c2                	add	a1,a1,a6
1c005f04:	425020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005f08:	0f410783          	lb	a5,244(sp)
1c005f0c:	ef89                	bnez	a5,1c005f26 <modelCNN_Construct+0x5c6>
1c005f0e:	30047473          	csrrci	s0,mstatus,8
1c005f12:	4585                	li	a1,1
1c005f14:	01c00513          	li	a0,28
1c005f18:	5a5050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005f1c:	30041073          	csrw	mstatus,s0
1c005f20:	0f410783          	lb	a5,244(sp)
1c005f24:	d7ed                	beqz	a5,1c005f0e <modelCNN_Construct+0x5ae>
1c005f26:	1c0117b7          	lui	a5,0x1c011
1c005f2a:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005f2e:	1c0117b7          	lui	a5,0x1c011
1c005f32:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c005f36:	1c0107b7          	lui	a5,0x1c010
1c005f3a:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c005f3e:	4785                	li	a5,1
1c005f40:	ddbe                	sw	a5,248(sp)
1c005f42:	d382                	sw	zero,228(sp)
1c005f44:	10f12423          	sw	a5,264(sp)
1c005f48:	0e010a23          	sb	zero,244(sp)
1c005f4c:	119c                	addi	a5,sp,224
1c005f4e:	4705                	li	a4,1
1c005f50:	10000693          	li	a3,256
1c005f54:	6615                	lui	a2,0x5
1c005f56:	b2060613          	addi	a2,a2,-1248 # 4b20 <__rt_stack_size+0x4320>
1c005f5a:	962e                	add	a2,a2,a1
1c005f5c:	001eb5b7          	lui	a1,0x1eb
1c005f60:	b2058593          	addi	a1,a1,-1248 # 1eab20 <__L2+0x16ab20>
1c005f64:	95c2                	add	a1,a1,a6
1c005f66:	3c3020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005f6a:	0f410783          	lb	a5,244(sp)
1c005f6e:	ef89                	bnez	a5,1c005f88 <modelCNN_Construct+0x628>
1c005f70:	30047473          	csrrci	s0,mstatus,8
1c005f74:	4585                	li	a1,1
1c005f76:	01c00513          	li	a0,28
1c005f7a:	543050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005f7e:	30041073          	csrw	mstatus,s0
1c005f82:	0f410783          	lb	a5,244(sp)
1c005f86:	d7ed                	beqz	a5,1c005f70 <modelCNN_Construct+0x610>
1c005f88:	1c0117b7          	lui	a5,0x1c011
1c005f8c:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005f90:	1c0117b7          	lui	a5,0x1c011
1c005f94:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c005f98:	1c0107b7          	lui	a5,0x1c010
1c005f9c:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c005fa0:	4785                	li	a5,1
1c005fa2:	ddbe                	sw	a5,248(sp)
1c005fa4:	d382                	sw	zero,228(sp)
1c005fa6:	10f12423          	sw	a5,264(sp)
1c005faa:	0e010a23          	sb	zero,244(sp)
1c005fae:	119c                	addi	a5,sp,224
1c005fb0:	4705                	li	a4,1
1c005fb2:	04000693          	li	a3,64
1c005fb6:	6615                	lui	a2,0x5
1c005fb8:	f2060613          	addi	a2,a2,-224 # 4f20 <__rt_stack_size+0x4720>
1c005fbc:	962e                	add	a2,a2,a1
1c005fbe:	001eb5b7          	lui	a1,0x1eb
1c005fc2:	f2058593          	addi	a1,a1,-224 # 1eaf20 <__L2+0x16af20>
1c005fc6:	95c2                	add	a1,a1,a6
1c005fc8:	361020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c005fcc:	0f410783          	lb	a5,244(sp)
1c005fd0:	ef89                	bnez	a5,1c005fea <modelCNN_Construct+0x68a>
1c005fd2:	30047473          	csrrci	s0,mstatus,8
1c005fd6:	4585                	li	a1,1
1c005fd8:	01c00513          	li	a0,28
1c005fdc:	4e1050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c005fe0:	30041073          	csrw	mstatus,s0
1c005fe4:	0f410783          	lb	a5,244(sp)
1c005fe8:	d7ed                	beqz	a5,1c005fd2 <modelCNN_Construct+0x672>
1c005fea:	1c0117b7          	lui	a5,0x1c011
1c005fee:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c005ff2:	1c0117b7          	lui	a5,0x1c011
1c005ff6:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c005ffa:	1c0107b7          	lui	a5,0x1c010
1c005ffe:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c006002:	4785                	li	a5,1
1c006004:	ddbe                	sw	a5,248(sp)
1c006006:	d382                	sw	zero,228(sp)
1c006008:	10f12423          	sw	a5,264(sp)
1c00600c:	0e010a23          	sb	zero,244(sp)
1c006010:	119c                	addi	a5,sp,224
1c006012:	4705                	li	a4,1
1c006014:	04000693          	li	a3,64
1c006018:	6615                	lui	a2,0x5
1c00601a:	f6060613          	addi	a2,a2,-160 # 4f60 <__rt_stack_size+0x4760>
1c00601e:	962e                	add	a2,a2,a1
1c006020:	001eb5b7          	lui	a1,0x1eb
1c006024:	f6058593          	addi	a1,a1,-160 # 1eaf60 <__L2+0x16af60>
1c006028:	95c2                	add	a1,a1,a6
1c00602a:	2ff020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c00602e:	0f410783          	lb	a5,244(sp)
1c006032:	ef89                	bnez	a5,1c00604c <modelCNN_Construct+0x6ec>
1c006034:	30047473          	csrrci	s0,mstatus,8
1c006038:	4585                	li	a1,1
1c00603a:	01c00513          	li	a0,28
1c00603e:	47f050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c006042:	30041073          	csrw	mstatus,s0
1c006046:	0f410783          	lb	a5,244(sp)
1c00604a:	d7ed                	beqz	a5,1c006034 <modelCNN_Construct+0x6d4>
1c00604c:	1c0117b7          	lui	a5,0x1c011
1c006050:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c006054:	1c0117b7          	lui	a5,0x1c011
1c006058:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c00605c:	1c0107b7          	lui	a5,0x1c010
1c006060:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c006064:	4785                	li	a5,1
1c006066:	ddbe                	sw	a5,248(sp)
1c006068:	d382                	sw	zero,228(sp)
1c00606a:	10f12423          	sw	a5,264(sp)
1c00606e:	0e010a23          	sb	zero,244(sp)
1c006072:	119c                	addi	a5,sp,224
1c006074:	4705                	li	a4,1
1c006076:	46a5                	li	a3,9
1c006078:	6615                	lui	a2,0x5
1c00607a:	07860613          	addi	a2,a2,120 # 5078 <__rt_stack_size+0x4878>
1c00607e:	962e                	add	a2,a2,a1
1c006080:	001eb5b7          	lui	a1,0x1eb
1c006084:	07858593          	addi	a1,a1,120 # 1eb078 <__L2+0x16b078>
1c006088:	95c2                	add	a1,a1,a6
1c00608a:	29f020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c00608e:	0f410783          	lb	a5,244(sp)
1c006092:	ef89                	bnez	a5,1c0060ac <modelCNN_Construct+0x74c>
1c006094:	30047473          	csrrci	s0,mstatus,8
1c006098:	4585                	li	a1,1
1c00609a:	01c00513          	li	a0,28
1c00609e:	41f050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c0060a2:	30041073          	csrw	mstatus,s0
1c0060a6:	0f410783          	lb	a5,244(sp)
1c0060aa:	d7ed                	beqz	a5,1c006094 <modelCNN_Construct+0x734>
1c0060ac:	1c0117b7          	lui	a5,0x1c011
1c0060b0:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c0060b4:	1c0117b7          	lui	a5,0x1c011
1c0060b8:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c0060bc:	1c0107b7          	lui	a5,0x1c010
1c0060c0:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c0060c4:	4785                	li	a5,1
1c0060c6:	ddbe                	sw	a5,248(sp)
1c0060c8:	d382                	sw	zero,228(sp)
1c0060ca:	10f12423          	sw	a5,264(sp)
1c0060ce:	0e010a23          	sb	zero,244(sp)
1c0060d2:	119c                	addi	a5,sp,224
1c0060d4:	4705                	li	a4,1
1c0060d6:	20000693          	li	a3,512
1c0060da:	6615                	lui	a2,0x5
1c0060dc:	80060613          	addi	a2,a2,-2048 # 4800 <__rt_stack_size+0x4000>
1c0060e0:	962e                	add	a2,a2,a1
1c0060e2:	001eb5b7          	lui	a1,0x1eb
1c0060e6:	80058593          	addi	a1,a1,-2048 # 1ea800 <__L2+0x16a800>
1c0060ea:	95c2                	add	a1,a1,a6
1c0060ec:	23d020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c0060f0:	0f410783          	lb	a5,244(sp)
1c0060f4:	ef89                	bnez	a5,1c00610e <modelCNN_Construct+0x7ae>
1c0060f6:	30047473          	csrrci	s0,mstatus,8
1c0060fa:	4585                	li	a1,1
1c0060fc:	01c00513          	li	a0,28
1c006100:	3bd050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c006104:	30041073          	csrw	mstatus,s0
1c006108:	0f410783          	lb	a5,244(sp)
1c00610c:	d7ed                	beqz	a5,1c0060f6 <modelCNN_Construct+0x796>
1c00610e:	1c0117b7          	lui	a5,0x1c011
1c006112:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c006116:	1c0117b7          	lui	a5,0x1c011
1c00611a:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c00611e:	1c0107b7          	lui	a5,0x1c010
1c006122:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c006126:	4785                	li	a5,1
1c006128:	ddbe                	sw	a5,248(sp)
1c00612a:	d382                	sw	zero,228(sp)
1c00612c:	10f12423          	sw	a5,264(sp)
1c006130:	0e010a23          	sb	zero,244(sp)
1c006134:	119c                	addi	a5,sp,224
1c006136:	4705                	li	a4,1
1c006138:	08000693          	li	a3,128
1c00613c:	6615                	lui	a2,0x5
1c00613e:	da060613          	addi	a2,a2,-608 # 4da0 <__rt_stack_size+0x45a0>
1c006142:	962e                	add	a2,a2,a1
1c006144:	001eb5b7          	lui	a1,0x1eb
1c006148:	da058593          	addi	a1,a1,-608 # 1eada0 <__L2+0x16ada0>
1c00614c:	95c2                	add	a1,a1,a6
1c00614e:	1db020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c006152:	0f410783          	lb	a5,244(sp)
1c006156:	ef89                	bnez	a5,1c006170 <modelCNN_Construct+0x810>
1c006158:	30047473          	csrrci	s0,mstatus,8
1c00615c:	4585                	li	a1,1
1c00615e:	01c00513          	li	a0,28
1c006162:	35b050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c006166:	30041073          	csrw	mstatus,s0
1c00616a:	0f410783          	lb	a5,244(sp)
1c00616e:	d7ed                	beqz	a5,1c006158 <modelCNN_Construct+0x7f8>
1c006170:	1c0117b7          	lui	a5,0x1c011
1c006174:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c006178:	1c0117b7          	lui	a5,0x1c011
1c00617c:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c006180:	1c0107b7          	lui	a5,0x1c010
1c006184:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c006188:	4785                	li	a5,1
1c00618a:	ddbe                	sw	a5,248(sp)
1c00618c:	d382                	sw	zero,228(sp)
1c00618e:	10f12423          	sw	a5,264(sp)
1c006192:	0e010a23          	sb	zero,244(sp)
1c006196:	119c                	addi	a5,sp,224
1c006198:	4705                	li	a4,1
1c00619a:	08000693          	li	a3,128
1c00619e:	6615                	lui	a2,0x5
1c0061a0:	e2060613          	addi	a2,a2,-480 # 4e20 <__rt_stack_size+0x4620>
1c0061a4:	962e                	add	a2,a2,a1
1c0061a6:	001eb5b7          	lui	a1,0x1eb
1c0061aa:	e2058593          	addi	a1,a1,-480 # 1eae20 <__L2+0x16ae20>
1c0061ae:	95c2                	add	a1,a1,a6
1c0061b0:	179020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c0061b4:	0f410783          	lb	a5,244(sp)
1c0061b8:	ef89                	bnez	a5,1c0061d2 <modelCNN_Construct+0x872>
1c0061ba:	30047473          	csrrci	s0,mstatus,8
1c0061be:	4585                	li	a1,1
1c0061c0:	01c00513          	li	a0,28
1c0061c4:	2f9050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c0061c8:	30041073          	csrw	mstatus,s0
1c0061cc:	0f410783          	lb	a5,244(sp)
1c0061d0:	d7ed                	beqz	a5,1c0061ba <modelCNN_Construct+0x85a>
1c0061d2:	1c0117b7          	lui	a5,0x1c011
1c0061d6:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c0061da:	1c0117b7          	lui	a5,0x1c011
1c0061de:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c0061e2:	1c0107b7          	lui	a5,0x1c010
1c0061e6:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c0061ea:	4785                	li	a5,1
1c0061ec:	ddbe                	sw	a5,248(sp)
1c0061ee:	d382                	sw	zero,228(sp)
1c0061f0:	10f12423          	sw	a5,264(sp)
1c0061f4:	0e010a23          	sb	zero,244(sp)
1c0061f8:	119c                	addi	a5,sp,224
1c0061fa:	4705                	li	a4,1
1c0061fc:	46a5                	li	a3,9
1c0061fe:	6615                	lui	a2,0x5
1c006200:	08460613          	addi	a2,a2,132 # 5084 <__rt_stack_size+0x4884>
1c006204:	962e                	add	a2,a2,a1
1c006206:	001eb5b7          	lui	a1,0x1eb
1c00620a:	08458593          	addi	a1,a1,132 # 1eb084 <__L2+0x16b084>
1c00620e:	95c2                	add	a1,a1,a6
1c006210:	119020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c006214:	0f410783          	lb	a5,244(sp)
1c006218:	ef89                	bnez	a5,1c006232 <modelCNN_Construct+0x8d2>
1c00621a:	30047473          	csrrci	s0,mstatus,8
1c00621e:	4585                	li	a1,1
1c006220:	01c00513          	li	a0,28
1c006224:	299050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c006228:	30041073          	csrw	mstatus,s0
1c00622c:	0f410783          	lb	a5,244(sp)
1c006230:	d7ed                	beqz	a5,1c00621a <modelCNN_Construct+0x8ba>
1c006232:	1c0117b7          	lui	a5,0x1c011
1c006236:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c00623a:	1c0117b7          	lui	a5,0x1c011
1c00623e:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c006242:	1c0107b7          	lui	a5,0x1c010
1c006246:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c00624a:	4785                	li	a5,1
1c00624c:	ddbe                	sw	a5,248(sp)
1c00624e:	d382                	sw	zero,228(sp)
1c006250:	10f12423          	sw	a5,264(sp)
1c006254:	0e010a23          	sb	zero,244(sp)
1c006258:	119c                	addi	a5,sp,224
1c00625a:	4705                	li	a4,1
1c00625c:	10000693          	li	a3,256
1c006260:	6615                	lui	a2,0x5
1c006262:	c2060613          	addi	a2,a2,-992 # 4c20 <__rt_stack_size+0x4420>
1c006266:	962e                	add	a2,a2,a1
1c006268:	001eb5b7          	lui	a1,0x1eb
1c00626c:	c2058593          	addi	a1,a1,-992 # 1eac20 <__L2+0x16ac20>
1c006270:	95c2                	add	a1,a1,a6
1c006272:	0b7020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c006276:	0f410783          	lb	a5,244(sp)
1c00627a:	ef89                	bnez	a5,1c006294 <modelCNN_Construct+0x934>
1c00627c:	30047473          	csrrci	s0,mstatus,8
1c006280:	4585                	li	a1,1
1c006282:	01c00513          	li	a0,28
1c006286:	237050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00628a:	30041073          	csrw	mstatus,s0
1c00628e:	0f410783          	lb	a5,244(sp)
1c006292:	d7ed                	beqz	a5,1c00627c <modelCNN_Construct+0x91c>
1c006294:	1c0117b7          	lui	a5,0x1c011
1c006298:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c00629c:	1c0117b7          	lui	a5,0x1c011
1c0062a0:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c0062a4:	1c0107b7          	lui	a5,0x1c010
1c0062a8:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c0062ac:	4785                	li	a5,1
1c0062ae:	ddbe                	sw	a5,248(sp)
1c0062b0:	d382                	sw	zero,228(sp)
1c0062b2:	10f12423          	sw	a5,264(sp)
1c0062b6:	0e010a23          	sb	zero,244(sp)
1c0062ba:	119c                	addi	a5,sp,224
1c0062bc:	4705                	li	a4,1
1c0062be:	04000693          	li	a3,64
1c0062c2:	6615                	lui	a2,0x5
1c0062c4:	fa060613          	addi	a2,a2,-96 # 4fa0 <__rt_stack_size+0x47a0>
1c0062c8:	962e                	add	a2,a2,a1
1c0062ca:	001eb5b7          	lui	a1,0x1eb
1c0062ce:	fa058593          	addi	a1,a1,-96 # 1eafa0 <__L2+0x16afa0>
1c0062d2:	95c2                	add	a1,a1,a6
1c0062d4:	055020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c0062d8:	0f410783          	lb	a5,244(sp)
1c0062dc:	ef89                	bnez	a5,1c0062f6 <modelCNN_Construct+0x996>
1c0062de:	30047473          	csrrci	s0,mstatus,8
1c0062e2:	4585                	li	a1,1
1c0062e4:	01c00513          	li	a0,28
1c0062e8:	1d5050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c0062ec:	30041073          	csrw	mstatus,s0
1c0062f0:	0f410783          	lb	a5,244(sp)
1c0062f4:	d7ed                	beqz	a5,1c0062de <modelCNN_Construct+0x97e>
1c0062f6:	1c0117b7          	lui	a5,0x1c011
1c0062fa:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c0062fe:	1c0117b7          	lui	a5,0x1c011
1c006302:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c006306:	1c0107b7          	lui	a5,0x1c010
1c00630a:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c00630e:	4785                	li	a5,1
1c006310:	ddbe                	sw	a5,248(sp)
1c006312:	d382                	sw	zero,228(sp)
1c006314:	10f12423          	sw	a5,264(sp)
1c006318:	0e010a23          	sb	zero,244(sp)
1c00631c:	119c                	addi	a5,sp,224
1c00631e:	4705                	li	a4,1
1c006320:	04000693          	li	a3,64
1c006324:	6615                	lui	a2,0x5
1c006326:	1601                	addi	a2,a2,-32
1c006328:	962e                	add	a2,a2,a1
1c00632a:	001eb5b7          	lui	a1,0x1eb
1c00632e:	1581                	addi	a1,a1,-32
1c006330:	95c2                	add	a1,a1,a6
1c006332:	7f6020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c006336:	0f410783          	lb	a5,244(sp)
1c00633a:	ef89                	bnez	a5,1c006354 <modelCNN_Construct+0x9f4>
1c00633c:	30047473          	csrrci	s0,mstatus,8
1c006340:	4585                	li	a1,1
1c006342:	01c00513          	li	a0,28
1c006346:	177050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00634a:	30041073          	csrw	mstatus,s0
1c00634e:	0f410783          	lb	a5,244(sp)
1c006352:	d7ed                	beqz	a5,1c00633c <modelCNN_Construct+0x9dc>
1c006354:	1c0117b7          	lui	a5,0x1c011
1c006358:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c00635c:	1c0117b7          	lui	a5,0x1c011
1c006360:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c006364:	1c0107b7          	lui	a5,0x1c010
1c006368:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c00636c:	4785                	li	a5,1
1c00636e:	ddbe                	sw	a5,248(sp)
1c006370:	d382                	sw	zero,228(sp)
1c006372:	10f12423          	sw	a5,264(sp)
1c006376:	0e010a23          	sb	zero,244(sp)
1c00637a:	119c                	addi	a5,sp,224
1c00637c:	4705                	li	a4,1
1c00637e:	46a5                	li	a3,9
1c006380:	6615                	lui	a2,0x5
1c006382:	09060613          	addi	a2,a2,144 # 5090 <__rt_stack_size+0x4890>
1c006386:	962e                	add	a2,a2,a1
1c006388:	001eb5b7          	lui	a1,0x1eb
1c00638c:	09058593          	addi	a1,a1,144 # 1eb090 <__L2+0x16b090>
1c006390:	95c2                	add	a1,a1,a6
1c006392:	796020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c006396:	0f410783          	lb	a5,244(sp)
1c00639a:	ef89                	bnez	a5,1c0063b4 <modelCNN_Construct+0xa54>
1c00639c:	30047473          	csrrci	s0,mstatus,8
1c0063a0:	4585                	li	a1,1
1c0063a2:	01c00513          	li	a0,28
1c0063a6:	117050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c0063aa:	30041073          	csrw	mstatus,s0
1c0063ae:	0f410783          	lb	a5,244(sp)
1c0063b2:	d7ed                	beqz	a5,1c00639c <modelCNN_Construct+0xa3c>
1c0063b4:	1c0117b7          	lui	a5,0x1c011
1c0063b8:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c0063bc:	1c0117b7          	lui	a5,0x1c011
1c0063c0:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c0063c4:	1c0107b7          	lui	a5,0x1c010
1c0063c8:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c0063cc:	4785                	li	a5,1
1c0063ce:	ddbe                	sw	a5,248(sp)
1c0063d0:	d382                	sw	zero,228(sp)
1c0063d2:	10f12423          	sw	a5,264(sp)
1c0063d6:	0e010a23          	sb	zero,244(sp)
1c0063da:	119c                	addi	a5,sp,224
1c0063dc:	4705                	li	a4,1
1c0063de:	08000693          	li	a3,128
1c0063e2:	6615                	lui	a2,0x5
1c0063e4:	ea060613          	addi	a2,a2,-352 # 4ea0 <__rt_stack_size+0x46a0>
1c0063e8:	962e                	add	a2,a2,a1
1c0063ea:	001eb5b7          	lui	a1,0x1eb
1c0063ee:	ea058593          	addi	a1,a1,-352 # 1eaea0 <__L2+0x16aea0>
1c0063f2:	95c2                	add	a1,a1,a6
1c0063f4:	734020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c0063f8:	0f410783          	lb	a5,244(sp)
1c0063fc:	ef89                	bnez	a5,1c006416 <modelCNN_Construct+0xab6>
1c0063fe:	30047473          	csrrci	s0,mstatus,8
1c006402:	4585                	li	a1,1
1c006404:	01c00513          	li	a0,28
1c006408:	0b5050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00640c:	30041073          	csrw	mstatus,s0
1c006410:	0f410783          	lb	a5,244(sp)
1c006414:	d7ed                	beqz	a5,1c0063fe <modelCNN_Construct+0xa9e>
1c006416:	1c0117b7          	lui	a5,0x1c011
1c00641a:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c00641e:	1c0117b7          	lui	a5,0x1c011
1c006422:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c006426:	1c0107b7          	lui	a5,0x1c010
1c00642a:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c00642e:	4785                	li	a5,1
1c006430:	ddbe                	sw	a5,248(sp)
1c006432:	d382                	sw	zero,228(sp)
1c006434:	10f12423          	sw	a5,264(sp)
1c006438:	0e010a23          	sb	zero,244(sp)
1c00643c:	119c                	addi	a5,sp,224
1c00643e:	4705                	li	a4,1
1c006440:	46a1                	li	a3,8
1c006442:	6615                	lui	a2,0x5
1c006444:	0a860613          	addi	a2,a2,168 # 50a8 <__rt_stack_size+0x48a8>
1c006448:	962e                	add	a2,a2,a1
1c00644a:	001eb5b7          	lui	a1,0x1eb
1c00644e:	0a858593          	addi	a1,a1,168 # 1eb0a8 <__L2+0x16b0a8>
1c006452:	95c2                	add	a1,a1,a6
1c006454:	6d4020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c006458:	0f410783          	lb	a5,244(sp)
1c00645c:	ef89                	bnez	a5,1c006476 <modelCNN_Construct+0xb16>
1c00645e:	30047473          	csrrci	s0,mstatus,8
1c006462:	4585                	li	a1,1
1c006464:	01c00513          	li	a0,28
1c006468:	055050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00646c:	30041073          	csrw	mstatus,s0
1c006470:	0f410783          	lb	a5,244(sp)
1c006474:	d7ed                	beqz	a5,1c00645e <modelCNN_Construct+0xafe>
1c006476:	1c0117b7          	lui	a5,0x1c011
1c00647a:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c00647e:	1c0117b7          	lui	a5,0x1c011
1c006482:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c006486:	1c0107b7          	lui	a5,0x1c010
1c00648a:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c00648e:	4785                	li	a5,1
1c006490:	ddbe                	sw	a5,248(sp)
1c006492:	d382                	sw	zero,228(sp)
1c006494:	10f12423          	sw	a5,264(sp)
1c006498:	0e010a23          	sb	zero,244(sp)
1c00649c:	119c                	addi	a5,sp,224
1c00649e:	4705                	li	a4,1
1c0064a0:	4689                	li	a3,2
1c0064a2:	6615                	lui	a2,0x5
1c0064a4:	0b060613          	addi	a2,a2,176 # 50b0 <__rt_stack_size+0x48b0>
1c0064a8:	962e                	add	a2,a2,a1
1c0064aa:	001eb5b7          	lui	a1,0x1eb
1c0064ae:	0b058593          	addi	a1,a1,176 # 1eb0b0 <__L2+0x16b0b0>
1c0064b2:	95c2                	add	a1,a1,a6
1c0064b4:	674020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c0064b8:	0f410783          	lb	a5,244(sp)
1c0064bc:	ef89                	bnez	a5,1c0064d6 <modelCNN_Construct+0xb76>
1c0064be:	30047473          	csrrci	s0,mstatus,8
1c0064c2:	4585                	li	a1,1
1c0064c4:	01c00513          	li	a0,28
1c0064c8:	7f4050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c0064cc:	30041073          	csrw	mstatus,s0
1c0064d0:	0f410783          	lb	a5,244(sp)
1c0064d4:	d7ed                	beqz	a5,1c0064be <modelCNN_Construct+0xb5e>
1c0064d6:	1c0117b7          	lui	a5,0x1c011
1c0064da:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c0064de:	1c0117b7          	lui	a5,0x1c011
1c0064e2:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c0064e6:	1c0107b7          	lui	a5,0x1c010
1c0064ea:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c0064ee:	4785                	li	a5,1
1c0064f0:	ddbe                	sw	a5,248(sp)
1c0064f2:	d382                	sw	zero,228(sp)
1c0064f4:	10f12423          	sw	a5,264(sp)
1c0064f8:	0e010a23          	sb	zero,244(sp)
1c0064fc:	119c                	addi	a5,sp,224
1c0064fe:	4705                	li	a4,1
1c006500:	4689                	li	a3,2
1c006502:	6615                	lui	a2,0x5
1c006504:	0b460613          	addi	a2,a2,180 # 50b4 <__rt_stack_size+0x48b4>
1c006508:	962e                	add	a2,a2,a1
1c00650a:	001eb5b7          	lui	a1,0x1eb
1c00650e:	0b458593          	addi	a1,a1,180 # 1eb0b4 <__L2+0x16b0b4>
1c006512:	95c2                	add	a1,a1,a6
1c006514:	614020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c006518:	0f410783          	lb	a5,244(sp)
1c00651c:	ef89                	bnez	a5,1c006536 <modelCNN_Construct+0xbd6>
1c00651e:	30047473          	csrrci	s0,mstatus,8
1c006522:	4585                	li	a1,1
1c006524:	01c00513          	li	a0,28
1c006528:	794050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00652c:	30041073          	csrw	mstatus,s0
1c006530:	0f410783          	lb	a5,244(sp)
1c006534:	d7ed                	beqz	a5,1c00651e <modelCNN_Construct+0xbbe>
1c006536:	1c0117b7          	lui	a5,0x1c011
1c00653a:	9847a503          	lw	a0,-1660(a5) # 1c010984 <HyperFlash+0x18>
1c00653e:	1c0117b7          	lui	a5,0x1c011
1c006542:	c687a803          	lw	a6,-920(a5) # 1c010c68 <model_L3_Flash>
1c006546:	1c0107b7          	lui	a5,0x1c010
1c00654a:	7bc7a583          	lw	a1,1980(a5) # 1c0107bc <model_L2_Memory>
1c00654e:	4785                	li	a5,1
1c006550:	ddbe                	sw	a5,248(sp)
1c006552:	d382                	sw	zero,228(sp)
1c006554:	10f12423          	sw	a5,264(sp)
1c006558:	0e010a23          	sb	zero,244(sp)
1c00655c:	119c                	addi	a5,sp,224
1c00655e:	4705                	li	a4,1
1c006560:	46a5                	li	a3,9
1c006562:	6615                	lui	a2,0x5
1c006564:	09c60613          	addi	a2,a2,156 # 509c <__rt_stack_size+0x489c>
1c006568:	962e                	add	a2,a2,a1
1c00656a:	001eb5b7          	lui	a1,0x1eb
1c00656e:	09c58593          	addi	a1,a1,156 # 1eb09c <__L2+0x16b09c>
1c006572:	95c2                	add	a1,a1,a6
1c006574:	5b4020ef          	jal	ra,1c008b28 <pi_fs_copy_async>
1c006578:	0f410783          	lb	a5,244(sp)
1c00657c:	c4079063          	bnez	a5,1c0059bc <modelCNN_Construct+0x5c>
1c006580:	30047473          	csrrci	s0,mstatus,8
1c006584:	4585                	li	a1,1
1c006586:	01c00513          	li	a0,28
1c00658a:	732050ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00658e:	30041073          	csrw	mstatus,s0
1c006592:	0f410783          	lb	a5,244(sp)
1c006596:	d7ed                	beqz	a5,1c006580 <modelCNN_Construct+0xc20>
1c006598:	c24ff06f          	j	1c0059bc <modelCNN_Construct+0x5c>
1c00659c:	4a91                	li	s5,4
1c00659e:	c1eff06f          	j	1c0059bc <modelCNN_Construct+0x5c>
1c0065a2:	4752                	lw	a4,20(sp)
1c0065a4:	1c0117b7          	lui	a5,0x1c011
1c0065a8:	cae7ae23          	sw	a4,-836(a5) # 1c010cbc <model_L3_Memory>
1c0065ac:	d2cff06f          	j	1c005ad8 <modelCNN_Construct+0x178>

1c0065b0 <modelCNN>:
};
int modelCNN(
		unsigned char * __restrict__ Input_1,
		signed short * __restrict__ Output_1)

{
1c0065b0:	7155                	addi	sp,sp,-208
1c0065b2:	c786                	sw	ra,204(sp)
1c0065b4:	c5a2                	sw	s0,200(sp)
1c0065b6:	c3a6                	sw	s1,196(sp)
1c0065b8:	c1ca                	sw	s2,192(sp)
1c0065ba:	df4e                	sw	s3,188(sp)
1c0065bc:	dd52                	sw	s4,184(sp)
1c0065be:	db56                	sw	s5,180(sp)
1c0065c0:	d95a                	sw	s6,176(sp)
1c0065c2:	d75e                	sw	s7,172(sp)
1c0065c4:	89ae                	mv	s3,a1
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }

static inline uint32_t timer_cfg_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CFG_HI_OFFSET); }
static inline void timer_cfg_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_HI_OFFSET, value); }

static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c0065c6:	10200437          	lui	s0,0x10200
1c0065ca:	40040413          	addi	s0,s0,1024 # 10200400 <__l1_end+0x2003bc>
1c0065ce:	00842783          	lw	a5,8(s0)
	AT_HYPERRAM_CL_EVENT UchanHR0;
	AT_GraphPerf[0] = gap_cl_readhwtimer();
1c0065d2:	1c011937          	lui	s2,0x1c011
1c0065d6:	caf92023          	sw	a5,-864(s2) # 1c010ca0 <AT_GraphPerf>
	S1_Op_input_1_formatter(
		((unsigned char * __restrict__) Input_1), /* In */
		((signed char * __restrict__) (model_L3_Memory+1990656)) /* Out */
1c0065da:	1c011ab7          	lui	s5,0x1c011
1c0065de:	001e6b37          	lui	s6,0x1e6
1c0065e2:	cbcaa583          	lw	a1,-836(s5) # 1c010cbc <model_L3_Memory>
	S1_Op_input_1_formatter(
1c0065e6:	95da                	add	a1,a1,s6
1c0065e8:	86bfb0ef          	jal	ra,1c001e52 <S1_Op_input_1_formatter>
1c0065ec:	00842783          	lw	a5,8(s0)
	);
	AT_GraphPerf[0] = gap_cl_readhwtimer() - AT_GraphPerf[0];
1c0065f0:	ca092703          	lw	a4,-864(s2)
1c0065f4:	8f99                	sub	a5,a5,a4
1c0065f6:	caf92023          	sw	a5,-864(s2)
1c0065fa:	00842783          	lw	a5,8(s0)
	AT_GraphPerf[1] = gap_cl_readhwtimer();
1c0065fe:	ca090913          	addi	s2,s2,-864
1c006602:	00f92223          	sw	a5,4(s2)
	S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu(
1c006606:	1c010a37          	lui	s4,0x1c010
1c00660a:	7bca0a13          	addi	s4,s4,1980 # 1c0107bc <model_L2_Memory>
1c00660e:	000a2583          	lw	a1,0(s4)
		((signed char * __restrict__) (model_L2_Memory+18944)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+19744)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+20512)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20544)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20576)) /* Infos */
1c006612:	6495                	lui	s1,0x5
1c006614:	06048813          	addi	a6,s1,96 # 5060 <__rt_stack_size+0x4860>
		((signed char * __restrict__) (model_L2_Memory+20544)), /* ScaleN */
1c006618:	04048793          	addi	a5,s1,64
		((unsigned char * __restrict__) (model_L2_Memory+20512)), /* Scale */
1c00661c:	02048713          	addi	a4,s1,32
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
1c006620:	0b848b93          	addi	s7,s1,184
		((signed int * __restrict__) (model_L2_Memory+19744)), /* Bias */
1c006624:	d2048613          	addi	a2,s1,-736
		((signed char * __restrict__) (model_L2_Memory+18944)), /* Filter */
1c006628:	a0048893          	addi	a7,s1,-1536
		((signed char * __restrict__) (model_L3_Memory+1990656)), /* In */
1c00662c:	cbcaa503          	lw	a0,-836(s5)
	S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu(
1c006630:	982e                	add	a6,a6,a1
1c006632:	97ae                	add	a5,a5,a1
1c006634:	972e                	add	a4,a4,a1
1c006636:	017586b3          	add	a3,a1,s7
1c00663a:	962e                	add	a2,a2,a1
1c00663c:	95c6                	add	a1,a1,a7
1c00663e:	955a                	add	a0,a0,s6
1c006640:	d55fb0ef          	jal	ra,1c002394 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu>
1c006644:	00842783          	lw	a5,8(s0)
	);
	AT_GraphPerf[1] = gap_cl_readhwtimer() - AT_GraphPerf[1];
1c006648:	00492703          	lw	a4,4(s2)
1c00664c:	8f99                	sub	a5,a5,a4
1c00664e:	00f92223          	sw	a5,4(s2)
1c006652:	00842783          	lw	a5,8(s0)
	AT_GraphPerf[2] = gap_cl_readhwtimer();
1c006656:	00f92423          	sw	a5,8(s2)
	S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c00665a:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (model_L2_Memory+0)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+19232)), /* Bias */
		((signed char * __restrict__) (model_L3_Memory+1990656)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+20256)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20320)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20588)) /* Infos */
1c00665e:	06c48813          	addi	a6,s1,108
		((signed char * __restrict__) (model_L2_Memory+20320)), /* ScaleN */
1c006662:	f6048793          	addi	a5,s1,-160
		((unsigned char * __restrict__) (model_L2_Memory+20256)), /* Scale */
1c006666:	f2048713          	addi	a4,s1,-224
		((signed char * __restrict__) (model_L3_Memory+1990656)), /* Out */
1c00666a:	cbcaa683          	lw	a3,-836(s5)
		((signed int * __restrict__) (model_L2_Memory+19232)), /* Bias */
1c00666e:	b2048613          	addi	a2,s1,-1248
	S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c006672:	982a                	add	a6,a6,a0
1c006674:	97aa                	add	a5,a5,a0
1c006676:	972a                	add	a4,a4,a0
1c006678:	96da                	add	a3,a3,s6
1c00667a:	962a                	add	a2,a2,a0
1c00667c:	85aa                	mv	a1,a0
1c00667e:	955e                	add	a0,a0,s7
1c006680:	8adfc0ef          	jal	ra,1c002f2c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu>
1c006684:	00842403          	lw	s0,8(s0)
	);
	AT_GraphPerf[2] = gap_cl_readhwtimer() - AT_GraphPerf[2];
1c006688:	00892783          	lw	a5,8(s2)
1c00668c:	8c1d                	sub	s0,s0,a5
1c00668e:	00892423          	sw	s0,8(s2)
	/* Moving S4_Weights, size 73728 from HyperRam at 1916928 to (size 73728) L2 at 53736 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L3_Memory + 1916928), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory + 53736), 73728, 0, &UchanHR0);
1c006692:	000a2503          	lw	a0,0(s4)
1c006696:	cbcaa583          	lw	a1,-836(s5)
1c00669a:	878a                	mv	a5,sp
1c00669c:	4705                	li	a4,1
1c00669e:	66c9                	lui	a3,0x12
1c0066a0:	6635                	lui	a2,0xd
1c0066a2:	1e860613          	addi	a2,a2,488 # d1e8 <__rt_stack_size+0xc9e8>
1c0066a6:	962a                	add	a2,a2,a0
1c0066a8:	001d4537          	lui	a0,0x1d4
1c0066ac:	95aa                	add	a1,a1,a0
1c0066ae:	1c011537          	lui	a0,0x1c011
1c0066b2:	98850513          	addi	a0,a0,-1656 # 1c010988 <HyperRam>
1c0066b6:	553030ef          	jal	ra,1c00a408 <pi_cl_ram_copy>

#ifdef ARCHI_HAS_CLUSTER

static inline void cl_wait_task(unsigned char *done)
{
    while ((*(volatile char *)done) == 0)
1c0066ba:	09c14783          	lbu	a5,156(sp)
1c0066be:	0ff7f793          	andi	a5,a5,255
1c0066c2:	ef99                	bnez	a5,1c0066e0 <modelCNN+0x130>
  This is useful when the mask must be updated before waiting for a specific event without modifying the other events (this saves a few instructions)
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is set in the event mask.
  */
static inline void eu_evt_maskSet(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0066c4:	4689                	li	a3,2
1c0066c6:	00204737          	lui	a4,0x204
1c0066ca:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0066ce:	03c76783          	p.elw	a5,60(a4)
  This is the opposite of eu_evt_maskSet. For each bit at 1 in the new value, the corresponding bit is set to 0 in the event mask and the others remain the same.
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is cleared in the event mask.
  */
static inline void eu_evt_maskClr(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0066d2:	00d72223          	sw	a3,4(a4)
1c0066d6:	09c14783          	lbu	a5,156(sp)
1c0066da:	0ff7f793          	andi	a5,a5,255
1c0066de:	d7f5                	beqz	a5,1c0066ca <modelCNN+0x11a>
1c0066e0:	10200937          	lui	s2,0x10200
1c0066e4:	40090913          	addi	s2,s2,1024 # 10200400 <__l1_end+0x2003bc>
1c0066e8:	00892783          	lw	a5,8(s2)
	/* Waiting completion of transfer of S4_Weights using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	AT_GraphPerf[3] = gap_cl_readhwtimer();
1c0066ec:	1c0114b7          	lui	s1,0x1c011
1c0066f0:	ca048493          	addi	s1,s1,-864 # 1c010ca0 <AT_GraphPerf>
1c0066f4:	c4dc                	sw	a5,12(s1)
	S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu(
1c0066f6:	1c010ab7          	lui	s5,0x1c010
1c0066fa:	7bca8a93          	addi	s5,s5,1980 # 1c0107bc <model_L2_Memory>
1c0066fe:	000aa883          	lw	a7,0(s5)
		((signed char * __restrict__) (model_L2_Memory+53736)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+18432)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+19872)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20000)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20600)) /* Infos */
1c006702:	6415                	lui	s0,0x5
1c006704:	07840813          	addi	a6,s0,120 # 5078 <__rt_stack_size+0x4878>
		((signed char * __restrict__) (model_L2_Memory+20000)), /* ScaleN */
1c006708:	e2040793          	addi	a5,s0,-480
		((unsigned char * __restrict__) (model_L2_Memory+19872)), /* Scale */
1c00670c:	da040713          	addi	a4,s0,-608
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
1c006710:	0b840b13          	addi	s6,s0,184
		((signed int * __restrict__) (model_L2_Memory+18432)), /* Bias */
1c006714:	80040613          	addi	a2,s0,-2048
		((signed char * __restrict__) (model_L3_Memory+1990656)), /* In */
1c006718:	1c011bb7          	lui	s7,0x1c011
1c00671c:	cbcba503          	lw	a0,-836(s7) # 1c010cbc <model_L3_Memory>
	S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu(
1c006720:	9846                	add	a6,a6,a7
1c006722:	97c6                	add	a5,a5,a7
1c006724:	9746                	add	a4,a4,a7
1c006726:	016886b3          	add	a3,a7,s6
1c00672a:	9646                	add	a2,a2,a7
1c00672c:	65b5                	lui	a1,0xd
1c00672e:	1e858593          	addi	a1,a1,488 # d1e8 <__rt_stack_size+0xc9e8>
1c006732:	95c6                	add	a1,a1,a7
1c006734:	001e68b7          	lui	a7,0x1e6
1c006738:	9546                	add	a0,a0,a7
1c00673a:	bc4fd0ef          	jal	ra,1c003afe <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu>
1c00673e:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[3] = gap_cl_readhwtimer() - AT_GraphPerf[3];
1c006742:	44d8                	lw	a4,12(s1)
1c006744:	8f99                	sub	a5,a5,a4
1c006746:	c4dc                	sw	a5,12(s1)
1c006748:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[4] = gap_cl_readhwtimer();
1c00674c:	c89c                	sw	a5,16(s1)
	S5_Linear_64x13x18x128(
1c00674e:	000aa503          	lw	a0,0(s5)
		((signed char * __restrict__) (model_L3_Memory+0)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+19488)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+50616)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+20384)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20448)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20612)) /* Infos */
1c006752:	08440813          	addi	a6,s0,132
		((signed char * __restrict__) (model_L2_Memory+20448)), /* ScaleN */
1c006756:	fe040793          	addi	a5,s0,-32
		((unsigned char * __restrict__) (model_L2_Memory+20384)), /* Scale */
1c00675a:	fa040713          	addi	a4,s0,-96
		((signed char * __restrict__) (model_L2_Memory+50616)), /* Out */
1c00675e:	6a31                	lui	s4,0xc
1c006760:	5b8a0a13          	addi	s4,s4,1464 # c5b8 <__rt_stack_size+0xbdb8>
		((signed int * __restrict__) (model_L2_Memory+19488)), /* Bias */
1c006764:	c2040613          	addi	a2,s0,-992
	S5_Linear_64x13x18x128(
1c006768:	982a                	add	a6,a6,a0
1c00676a:	97aa                	add	a5,a5,a0
1c00676c:	972a                	add	a4,a4,a0
1c00676e:	014506b3          	add	a3,a0,s4
1c006772:	962a                	add	a2,a2,a0
1c006774:	cbcba583          	lw	a1,-836(s7)
1c006778:	955a                	add	a0,a0,s6
1c00677a:	ff7fd0ef          	jal	ra,1c004770 <S5_Linear_64x13x18x128>
1c00677e:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[4] = gap_cl_readhwtimer() - AT_GraphPerf[4];
1c006782:	4898                	lw	a4,16(s1)
1c006784:	8f99                	sub	a5,a5,a4
1c006786:	c89c                	sw	a5,16(s1)
1c006788:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[5] = gap_cl_readhwtimer();
1c00678c:	c8dc                	sw	a5,20(s1)
	S6_Linear_2x64(
1c00678e:	000aa503          	lw	a0,0(s5)
		((signed char * __restrict__) (model_L2_Memory+20128)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+20648)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+20656)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20660)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20624)) /* Infos */
1c006792:	09040813          	addi	a6,s0,144
		((signed char * __restrict__) (model_L2_Memory+20660)), /* ScaleN */
1c006796:	0b440793          	addi	a5,s0,180
		((unsigned char * __restrict__) (model_L2_Memory+20656)), /* Scale */
1c00679a:	0b040713          	addi	a4,s0,176
		((signed int * __restrict__) (model_L2_Memory+20648)), /* Bias */
1c00679e:	0a840613          	addi	a2,s0,168
		((signed char * __restrict__) (model_L2_Memory+20128)), /* Filter */
1c0067a2:	ea040593          	addi	a1,s0,-352
	S6_Linear_2x64(
1c0067a6:	982a                	add	a6,a6,a0
1c0067a8:	97aa                	add	a5,a5,a0
1c0067aa:	972a                	add	a4,a4,a0
1c0067ac:	016506b3          	add	a3,a0,s6
1c0067b0:	962a                	add	a2,a2,a0
1c0067b2:	95aa                	add	a1,a1,a0
1c0067b4:	9552                	add	a0,a0,s4
1c0067b6:	97bfe0ef          	jal	ra,1c005130 <S6_Linear_2x64>
1c0067ba:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[5] = gap_cl_readhwtimer() - AT_GraphPerf[5];
1c0067be:	48d8                	lw	a4,20(s1)
1c0067c0:	8f99                	sub	a5,a5,a4
1c0067c2:	c8dc                	sw	a5,20(s1)
1c0067c4:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[6] = gap_cl_readhwtimer();
1c0067c8:	cc9c                	sw	a5,24(s1)
	S7_SoftMax(
1c0067ca:	000aa503          	lw	a0,0(s5)
		((signed char * __restrict__) (model_L2_Memory+20664)), /* In */
		((signed short * __restrict__) Output_1), /* Out */
		((signed char * __restrict__) (model_L2_Memory+20636)) /* Infos */
1c0067ce:	09c40613          	addi	a2,s0,156
	S7_SoftMax(
1c0067d2:	962a                	add	a2,a2,a0
1c0067d4:	85ce                	mv	a1,s3
1c0067d6:	955a                	add	a0,a0,s6
1c0067d8:	ef9fe0ef          	jal	ra,1c0056d0 <S7_SoftMax>
1c0067dc:	00892903          	lw	s2,8(s2)
	);
	AT_GraphPerf[6] = gap_cl_readhwtimer() - AT_GraphPerf[6];
1c0067e0:	4c9c                	lw	a5,24(s1)
1c0067e2:	40f90933          	sub	s2,s2,a5
1c0067e6:	0124ac23          	sw	s2,24(s1)
	return 0;
}
1c0067ea:	4501                	li	a0,0
1c0067ec:	40be                	lw	ra,204(sp)
1c0067ee:	442e                	lw	s0,200(sp)
1c0067f0:	449e                	lw	s1,196(sp)
1c0067f2:	490e                	lw	s2,192(sp)
1c0067f4:	59fa                	lw	s3,188(sp)
1c0067f6:	5a6a                	lw	s4,184(sp)
1c0067f8:	5ada                	lw	s5,180(sp)
1c0067fa:	5b4a                	lw	s6,176(sp)
1c0067fc:	5bba                	lw	s7,172(sp)
1c0067fe:	6169                	addi	sp,sp,208
1c006800:	8082                	ret

1c006802 <KerReductIO_Compact_SQ8_1>:
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	for (int c=First; c<Last; c++) KerReduct_Activation_SQ8(In+Size*c, Out+Size*c, Size, Scale[c], ScaleN[c], ACT_LEAKYRELU, ActScale, ActScaleN, A0, B0, C0);
	gap_waitbarrier(0);
}
1c006802:	f1402773          	csrr	a4,mhartid
1c006806:	c8071733          	p.extractu	a4,a4,4,0
1c00680a:	f83637b3          	p.bclr	a5,a2,28,3
1c00680e:	00f037b3          	snez	a5,a5
1c006812:	00365813          	srli	a6,a2,0x3
1c006816:	97c2                	add	a5,a5,a6
1c006818:	02f70733          	mul	a4,a4,a5
1c00681c:	00f70f33          	add	t5,a4,a5
1c006820:	04cf4f33          	p.min	t5,t5,a2
1c006824:	40ef0f33          	sub	t5,t5,a4
1c006828:	10d65363          	ble	a3,a2,1c00692e <KerReductIO_Compact_SQ8_1+0x12c>
1c00682c:	7139                	addi	sp,sp,-64
1c00682e:	de22                	sw	s0,60(sp)
1c006830:	dc26                	sw	s1,56(sp)
1c006832:	da4a                	sw	s2,52(sp)
1c006834:	d84e                	sw	s3,48(sp)
1c006836:	d652                	sw	s4,44(sp)
1c006838:	d456                	sw	s5,40(sp)
1c00683a:	d25a                	sw	s6,36(sp)
1c00683c:	d05e                	sw	s7,32(sp)
1c00683e:	ce62                	sw	s8,28(sp)
1c006840:	cc66                	sw	s9,24(sp)
1c006842:	ca6a                	sw	s10,20(sp)
1c006844:	c86e                	sw	s11,16(sp)
1c006846:	8bb2                	mv	s7,a2
1c006848:	040f6f33          	p.max	t5,t5,zero
1c00684c:	00261b13          	slli	s6,a2,0x2
1c006850:	ffff0793          	addi	a5,t5,-1
1c006854:	97ba                	add	a5,a5,a4
1c006856:	00fb0833          	add	a6,s6,a5
1c00685a:	95c2                	add	a1,a1,a6
1c00685c:	97b2                	add	a5,a5,a2
1c00685e:	953e                	add	a0,a0,a5
1c006860:	c40f39b3          	p.bclr	s3,t5,2,0
1c006864:	41e989b3          	sub	s3,s3,t5
1c006868:	8fb2                	mv	t6,a2
1c00686a:	4285                	li	t0,1
1c00686c:	41e282b3          	sub	t0,t0,t5
1c006870:	40e283b3          	sub	t2,t0,a4
1c006874:	4d9d                	li	s11,7
1c006876:	4415                	li	s0,5
1c006878:	41e40433          	sub	s0,s0,t5
1c00687c:	0985                	addi	s3,s3,1
1c00687e:	004f7d13          	andi	s10,t5,4
1c006882:	c40f3ab3          	p.bclr	s5,t5,2,0
1c006886:	9aba                	add	s5,s5,a4
1c006888:	002f7c93          	andi	s9,t5,2
1c00688c:	c20f37b3          	p.bclr	a5,t5,1,0
1c006890:	97ba                	add	a5,a5,a4
1c006892:	c63e                	sw	a5,12(sp)
1c006894:	fc1f3c33          	p.bclr	s8,t5,30,1
1c006898:	00204a37          	lui	s4,0x204
1c00689c:	200a0a13          	addi	s4,s4,512 # 204200 <__L2+0x184200>
1c0068a0:	a801                	j	1c0068b0 <KerReductIO_Compact_SQ8_1+0xae>
1c0068a2:	01ca6783          	p.elw	a5,28(s4)
1c0068a6:	9fb2                	add	t6,t6,a2
1c0068a8:	95da                	add	a1,a1,s6
1c0068aa:	955e                	add	a0,a0,s7
1c0068ac:	06dfd363          	ble	a3,t6,1c006912 <KerReductIO_Compact_SQ8_1+0x110>
1c0068b0:	00b38933          	add	s2,t2,a1
1c0068b4:	00a384b3          	add	s1,t2,a0
1c0068b8:	03edf963          	bleu	t5,s11,1c0068ea <KerReductIO_Compact_SQ8_1+0xe8>
1c0068bc:	00a28333          	add	t1,t0,a0
1c0068c0:	00b408b3          	add	a7,s0,a1
1c0068c4:	00a40833          	add	a6,s0,a0
1c0068c8:	00b28733          	add	a4,t0,a1
1c0068cc:	405987b3          	sub	a5,s3,t0
1c0068d0:	17e1                	addi	a5,a5,-8
1c0068d2:	838d                	srli	a5,a5,0x3
1c0068d4:	0785                	addi	a5,a5,1
1c0068d6:	0087c0fb          	lp.setup	x1,a5,1c0068e6 <KerReductIO_Compact_SQ8_1+0xe4>
1c0068da:	0088ae0b          	p.lw	t3,8(a7!) # 1e6008 <__L2+0x166008>
1c0068de:	00872e8b          	p.lw	t4,8(a4!)
1c0068e2:	01d3242b          	p.sw	t4,8(t1!)
1c0068e6:	01c8242b          	p.sw	t3,8(a6!) # 1e6008 <__L2+0x166008>
1c0068ea:	000d0663          	beqz	s10,1c0068f6 <KerReductIO_Compact_SQ8_1+0xf4>
1c0068ee:	21597783          	p.lw	a5,s5(s2)
1c0068f2:	00f4eaa3          	p.sw	a5,s5(s1)
1c0068f6:	000c8763          	beqz	s9,1c006904 <KerReductIO_Compact_SQ8_1+0x102>
1c0068fa:	4732                	lw	a4,12(sp)
1c0068fc:	50e97783          	p.lhu	a5,a4(s2)
1c006900:	00f4d723          	p.sh	a5,a4(s1)
1c006904:	f80c0fe3          	beqz	s8,1c0068a2 <KerReductIO_Compact_SQ8_1+0xa0>
1c006908:	0005c783          	lbu	a5,0(a1)
1c00690c:	00f50023          	sb	a5,0(a0)
1c006910:	bf49                	j	1c0068a2 <KerReductIO_Compact_SQ8_1+0xa0>
1c006912:	5472                	lw	s0,60(sp)
1c006914:	54e2                	lw	s1,56(sp)
1c006916:	5952                	lw	s2,52(sp)
1c006918:	59c2                	lw	s3,48(sp)
1c00691a:	5a32                	lw	s4,44(sp)
1c00691c:	5aa2                	lw	s5,40(sp)
1c00691e:	5b12                	lw	s6,36(sp)
1c006920:	5b82                	lw	s7,32(sp)
1c006922:	4c72                	lw	s8,28(sp)
1c006924:	4ce2                	lw	s9,24(sp)
1c006926:	4d52                	lw	s10,20(sp)
1c006928:	4dc2                	lw	s11,16(sp)
1c00692a:	6121                	addi	sp,sp,64
1c00692c:	8082                	ret
1c00692e:	8082                	ret

1c006930 <KerParReduct_CC_SQ8>:
1c006930:	00855683          	lhu	a3,8(a0)
1c006934:	f1402773          	csrr	a4,mhartid
1c006938:	c8071733          	p.extractu	a4,a4,4,0
1c00693c:	f836b7b3          	p.bclr	a5,a3,28,3
1c006940:	00f037b3          	snez	a5,a5
1c006944:	0036d613          	srli	a2,a3,0x3
1c006948:	97b2                	add	a5,a5,a2
1c00694a:	02f70733          	mul	a4,a4,a5
1c00694e:	00f70833          	add	a6,a4,a5
1c006952:	04d84833          	p.min	a6,a6,a3
1c006956:	00052e03          	lw	t3,0(a0)
1c00695a:	01052e83          	lw	t4,16(a0)
1c00695e:	01452f03          	lw	t5,20(a0)
1c006962:	00452303          	lw	t1,4(a0)
1c006966:	00a55883          	lhu	a7,10(a0)
1c00696a:	00c55783          	lhu	a5,12(a0)
1c00696e:	02f888b3          	mul	a7,a7,a5
1c006972:	05077563          	bleu	a6,a4,1c0069bc <KerParReduct_CC_SQ8+0x8c>
1c006976:	9f3a                	add	t5,t5,a4
1c006978:	00289f93          	slli	t6,a7,0x2
1c00697c:	43f70e33          	p.mac	t3,a4,t6
1c006980:	43170333          	p.mac	t1,a4,a7
1c006984:	9eba                	add	t4,t4,a4
1c006986:	40e80833          	sub	a6,a6,a4
1c00698a:	0188407b          	lp.setup	x0,a6,1c0069ba <KerParReduct_CC_SQ8+0x8a>
1c00698e:	001ec50b          	p.lbu	a0,1(t4!)
1c006992:	001f468b          	p.lbu	a3,1(t5!)
1c006996:	02088163          	beqz	a7,1c0069b8 <KerParReduct_CC_SQ8+0x88>
1c00699a:	859a                	mv	a1,t1
1c00699c:	8672                	mv	a2,t3
1c00699e:	8746                	mv	a4,a7
1c0069a0:	00a740fb          	lp.setup	x1,a4,1c0069b4 <KerParReduct_CC_SQ8+0x84>
1c0069a4:	0046278b          	p.lw	a5,4(a2!)
1c0069a8:	02a787b3          	mul	a5,a5,a0
1c0069ac:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c0069b0:	148797b3          	p.clip	a5,a5,8
1c0069b4:	00f580ab          	p.sb	a5,1(a1!)
1c0069b8:	9e7e                	add	t3,t3,t6
1c0069ba:	9346                	add	t1,t1,a7
1c0069bc:	002047b7          	lui	a5,0x204
1c0069c0:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0069c4:	01c7e703          	p.elw	a4,28(a5)
1c0069c8:	8082                	ret

1c0069ca <KerParReductIO_CC_SQ8>:
*/
extern void DumpFeaturePlanes(char *Mess, int DataSize, void *Plane, unsigned int NPlanes, unsigned int W, unsigned int Wmax, unsigned int H, unsigned int Hmax);

void KerParReductIO_CC_SQ8(KerConvLinReduct_SQ8_T *Arg)

{
1c0069ca:	1141                	addi	sp,sp,-16
1c0069cc:	c606                	sw	ra,12(sp)
	unsigned int S = Arg->Feat;
1c0069ce:	00855703          	lhu	a4,8(a0)
	unsigned int Size = Arg->W*Arg->H;
1c0069d2:	00a55783          	lhu	a5,10(a0)
1c0069d6:	00c55603          	lhu	a2,12(a0)
1c0069da:	02c78633          	mul	a2,a5,a2
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0069de:	f14027f3          	csrr	a5,mhartid
1c0069e2:	c80797b3          	p.extractu	a5,a5,4,0
        Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0069e6:	f83732b3          	p.bclr	t0,a4,28,3
1c0069ea:	005032b3          	snez	t0,t0
1c0069ee:	00375693          	srli	a3,a4,0x3
1c0069f2:	92b6                	add	t0,t0,a3
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0069f4:	025787b3          	mul	a5,a5,t0
1c0069f8:	00578333          	add	t1,a5,t0
1c0069fc:	04e34333          	p.min	t1,t1,a4
	int * __restrict__ In = (int *__restrict__) Arg->In;
1c006a00:	00052083          	lw	ra,0(a0)
1c006a04:	00261393          	slli	t2,a2,0x2
	signed char *__restrict__ Out = (signed char *__restrict__)(In+First*Size);
1c006a08:	8e06                	mv	t3,ra
1c006a0a:	42f38e33          	p.mac	t3,t2,a5
	unsigned char * __restrict__ Scale = (unsigned char *__restrict__) Arg->Scale;
1c006a0e:	01052f03          	lw	t5,16(a0)
	unsigned char * __restrict__ ScaleN = (unsigned char *__restrict__) Arg->ScaleN;
1c006a12:	01452f83          	lw	t6,20(a0)
	signed char * __restrict__ Infos = (signed char *__restrict__) Arg->Infos;
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	S = Size*Max(0, Last-First);
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c006a16:	0267ff63          	bleu	t1,a5,1c006a54 <KerParReductIO_CC_SQ8+0x8a>
1c006a1a:	9fbe                	add	t6,t6,a5
1c006a1c:	8ef2                	mv	t4,t3
1c006a1e:	9f3e                	add	t5,t5,a5
1c006a20:	40f30333          	sub	t1,t1,a5
1c006a24:	0173407b          	lp.setup	x0,t1,1c006a52 <KerParReductIO_CC_SQ8+0x88>
1c006a28:	001f488b          	p.lbu	a7,1(t5!)
1c006a2c:	001fc68b          	p.lbu	a3,1(t6!)
        for (unsigned int i=0; i<N; i++) {
1c006a30:	c205                	beqz	a2,1c006a50 <KerParReductIO_CC_SQ8+0x86>
1c006a32:	8872                	mv	a6,t3
1c006a34:	85f6                	mv	a1,t4
1c006a36:	8732                	mv	a4,a2
1c006a38:	00a740fb          	lp.setup	x1,a4,1c006a4c <KerParReductIO_CC_SQ8+0x82>
                int Acc0 = gap_clip(AT_SCALE(In[i], Scale, ScaleN), 7);
1c006a3c:	0045a78b          	p.lw	a5,4(a1!)
1c006a40:	031787b3          	mul	a5,a5,a7
1c006a44:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c006a48:	148797b3          	p.clip	a5,a5,8
                Out[i] = Acc0;
1c006a4c:	00f800ab          	p.sb	a5,1(a6!)
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c006a50:	9e32                	add	t3,t3,a2
1c006a52:	9e9e                	add	t4,t4,t2
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006a54:	002047b7          	lui	a5,0x204
1c006a58:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006a5c:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	// KerReductIO_Compact_SQ8(In, S, CoreId, ChunkCell*Size);
	KerReductIO_Compact_SQ8_1((signed char *__restrict__)In, (signed char *__restrict__)In, Size*ChunkCell, Size * Arg->Feat);
1c006a60:	00855683          	lhu	a3,8(a0)
1c006a64:	02c686b3          	mul	a3,a3,a2
1c006a68:	02560633          	mul	a2,a2,t0
1c006a6c:	8586                	mv	a1,ra
1c006a6e:	8506                	mv	a0,ra
1c006a70:	3b49                	jal	1c006802 <KerReductIO_Compact_SQ8_1>
}
1c006a72:	40b2                	lw	ra,12(sp)
1c006a74:	0141                	addi	sp,sp,16
1c006a76:	8082                	ret

1c006a78 <KerParSetBiasB32_SQ8>:
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
		for (int j=4*(InDim/4); j<InDim; j++) Acc += In[j]*Weights[i*InDim+j];
		Out[i] = AT_CLIP_POS(AT_SCALE(Acc, Scale[i], ScaleN[i]), A0);
	}
	gap_waitbarrier(0);
}
1c006a78:	4118                	lw	a4,0(a0)
1c006a7a:	00455303          	lhu	t1,4(a0)
1c006a7e:	00655883          	lhu	a7,6(a0)
1c006a82:	00855603          	lhu	a2,8(a0)
1c006a86:	00c52803          	lw	a6,12(a0)
1c006a8a:	01054e03          	lbu	t3,16(a0)
1c006a8e:	f14026f3          	csrr	a3,mhartid
1c006a92:	c80696b3          	p.extractu	a3,a3,4,0
1c006a96:	f83637b3          	p.bclr	a5,a2,28,3
1c006a9a:	00f037b3          	snez	a5,a5
1c006a9e:	00365593          	srli	a1,a2,0x3
1c006aa2:	97ae                	add	a5,a5,a1
1c006aa4:	02f686b3          	mul	a3,a3,a5
1c006aa8:	97b6                	add	a5,a5,a3
1c006aaa:	04c7c7b3          	p.min	a5,a5,a2
1c006aae:	06f6f863          	bleu	a5,a3,1c006b1e <KerParSetBiasB32_SQ8+0xa6>
1c006ab2:	03130333          	mul	t1,t1,a7
1c006ab6:	00231f93          	slli	t6,t1,0x2
1c006aba:	00135313          	srli	t1,t1,0x1
1c006abe:	ffcf8893          	addi	a7,t6,-4
1c006ac2:	00269613          	slli	a2,a3,0x2
1c006ac6:	8546                	mv	a0,a7
1c006ac8:	42df8533          	p.mac	a0,t6,a3
1c006acc:	953a                	add	a0,a0,a4
1c006ace:	00279593          	slli	a1,a5,0x2
1c006ad2:	9832                	add	a6,a6,a2
1c006ad4:	00331f13          	slli	t5,t1,0x3
1c006ad8:	411f0f33          	sub	t5,t5,a7
1c006adc:	4e91                	li	t4,4
1c006ade:	411e8eb3          	sub	t4,t4,a7
1c006ae2:	8d91                	sub	a1,a1,a2
1c006ae4:	15f1                	addi	a1,a1,-4
1c006ae6:	8189                	srli	a1,a1,0x2
1c006ae8:	0585                	addi	a1,a1,1
1c006aea:	0195c07b          	lp.setup	x0,a1,1c006b1c <KerParSetBiasB32_SQ8+0xa4>
1c006aee:	0048270b          	p.lw	a4,4(a6!)
1c006af2:	01c71733          	sll	a4,a4,t3
1c006af6:	02030163          	beqz	t1,1c006b18 <KerParSetBiasB32_SQ8+0xa0>
1c006afa:	00ae8633          	add	a2,t4,a0
1c006afe:	411506b3          	sub	a3,a0,a7
1c006b02:	01e887b3          	add	a5,a7,t5
1c006b06:	17e1                	addi	a5,a5,-8
1c006b08:	838d                	srli	a5,a5,0x3
1c006b0a:	0785                	addi	a5,a5,1
1c006b0c:	0047c0fb          	lp.setup	x1,a5,1c006b14 <KerParSetBiasB32_SQ8+0x9c>
1c006b10:	00e6a42b          	p.sw	a4,8(a3!) # 12008 <__L1Cl+0x2008>
1c006b14:	00e6242b          	p.sw	a4,8(a2!)
1c006b18:	00e56fab          	p.sw	a4,t6(a0!)
1c006b1c:	0001                	nop
1c006b1e:	002047b7          	lui	a5,0x204
1c006b22:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006b26:	01c7e703          	p.elw	a4,28(a5)
1c006b2a:	8082                	ret

1c006b2c <KerParLinearLayer_SQ8>:
1c006b2c:	7179                	addi	sp,sp,-48
1c006b2e:	d622                	sw	s0,44(sp)
1c006b30:	d426                	sw	s1,40(sp)
1c006b32:	d24a                	sw	s2,36(sp)
1c006b34:	d04e                	sw	s3,32(sp)
1c006b36:	ce52                	sw	s4,28(sp)
1c006b38:	cc56                	sw	s5,24(sp)
1c006b3a:	ca5a                	sw	s6,20(sp)
1c006b3c:	c85e                	sw	s7,16(sp)
1c006b3e:	c662                	sw	s8,12(sp)
1c006b40:	c466                	sw	s9,8(sp)
1c006b42:	4104                	lw	s1,0(a0)
1c006b44:	01255603          	lhu	a2,18(a0)
1c006b48:	01055283          	lhu	t0,16(a0)
1c006b4c:	01455683          	lhu	a3,20(a0)
1c006b50:	00452a03          	lw	s4,4(a0)
1c006b54:	00c52903          	lw	s2,12(a0)
1c006b58:	f1402773          	csrr	a4,mhartid
1c006b5c:	c8071733          	p.extractu	a4,a4,4,0
1c006b60:	f836b7b3          	p.bclr	a5,a3,28,3
1c006b64:	00f037b3          	snez	a5,a5
1c006b68:	0036d593          	srli	a1,a3,0x3
1c006b6c:	97ae                	add	a5,a5,a1
1c006b6e:	02f70733          	mul	a4,a4,a5
1c006b72:	97ba                	add	a5,a5,a4
1c006b74:	04d7c7b3          	p.min	a5,a5,a3
1c006b78:	0cf77863          	bleu	a5,a4,1c006c48 <KerParLinearLayer_SQ8+0x11c>
1c006b7c:	8396                	mv	t2,t0
1c006b7e:	00271693          	slli	a3,a4,0x2
1c006b82:	8cb2                	mv	s9,a2
1c006b84:	8fd2                	mv	t6,s4
1c006b86:	42e60fb3          	p.mac	t6,a2,a4
1c006b8a:	00279f13          	slli	t5,a5,0x2
1c006b8e:	9936                	add	s2,s2,a3
1c006b90:	89a6                	mv	s3,s1
1c006b92:	c402bb33          	p.bclr	s6,t0,2,0
1c006b96:	9b26                	add	s6,s6,s1
1c006b98:	4c1d                	li	s8,7
1c006b9a:	0042fb93          	andi	s7,t0,4
1c006b9e:	c202bab3          	p.bclr	s5,t0,1,0
1c006ba2:	1af1                	addi	s5,s5,-4
1c006ba4:	c202b2b3          	p.bclr	t0,t0,1,0
1c006ba8:	40df0f33          	sub	t5,t5,a3
1c006bac:	1f71                	addi	t5,t5,-4
1c006bae:	002f5f13          	srli	t5,t5,0x2
1c006bb2:	0f05                	addi	t5,t5,1
1c006bb4:	a83d                	j	1c006bf2 <KerParLinearLayer_SQ8+0xc6>
1c006bb6:	0272f763          	bleu	t2,t0,1c006be4 <KerParLinearLayer_SQ8+0xb8>
1c006bba:	005486b3          	add	a3,s1,t0
1c006bbe:	9816                	add	a6,a6,t0
1c006bc0:	9852                	add	a6,a6,s4
1c006bc2:	40d98733          	sub	a4,s3,a3
1c006bc6:	971e                	add	a4,a4,t2
1c006bc8:	41348633          	sub	a2,s1,s3
1c006bcc:	9616                	add	a2,a2,t0
1c006bce:	0605                	addi	a2,a2,1
1c006bd0:	06c3ea63          	bltu	t2,a2,1c006c44 <KerParLinearLayer_SQ8+0x118>
1c006bd4:	006740fb          	lp.setup	x1,a4,1c006be0 <KerParLinearLayer_SQ8+0xb4>
1c006bd8:	0016858b          	p.lb	a1,1(a3!)
1c006bdc:	0018060b          	p.lb	a2,1(a6!)
1c006be0:	42c587b3          	p.mac	a5,a1,a2
1c006be4:	fef92e23          	sw	a5,-4(s2)
1c006be8:	9fe6                	add	t6,t6,s9
1c006bea:	1f7d                	addi	t5,t5,-1
1c006bec:	000f1363          	bnez	t5,1c006bf2 <KerParLinearLayer_SQ8+0xc6>
1c006bf0:	a8a1                	j	1c006c48 <KerParLinearLayer_SQ8+0x11c>
1c006bf2:	414f8833          	sub	a6,t6,s4
1c006bf6:	847e                	mv	s0,t6
1c006bf8:	0049278b          	p.lw	a5,4(s2!)
1c006bfc:	027c7b63          	bleu	t2,s8,1c006c32 <KerParLinearLayer_SQ8+0x106>
1c006c00:	00448e93          	addi	t4,s1,4
1c006c04:	004f8e13          	addi	t3,t6,4
1c006c08:	837e                	mv	t1,t6
1c006c0a:	88ce                	mv	a7,s3
1c006c0c:	413b0533          	sub	a0,s6,s3
1c006c10:	1561                	addi	a0,a0,-8
1c006c12:	810d                	srli	a0,a0,0x3
1c006c14:	0505                	addi	a0,a0,1
1c006c16:	00c540fb          	lp.setup	x1,a0,1c006c2e <KerParLinearLayer_SQ8+0x102>
1c006c1a:	008ea68b          	p.lw	a3,8(t4!)
1c006c1e:	008e270b          	p.lw	a4,8(t3!)
1c006c22:	0088a58b          	p.lw	a1,8(a7!)
1c006c26:	0083260b          	p.lw	a2,8(t1!)
1c006c2a:	b8c597d7          	pv.sdotsp.b	a5,a1,a2
1c006c2e:	b8e697d7          	pv.sdotsp.b	a5,a3,a4
1c006c32:	f80b82e3          	beqz	s7,1c006bb6 <KerParLinearLayer_SQ8+0x8a>
1c006c36:	2154f703          	p.lw	a4,s5(s1)
1c006c3a:	21547403          	p.lw	s0,s5(s0)
1c006c3e:	b88717d7          	pv.sdotsp.b	a5,a4,s0
1c006c42:	bf95                	j	1c006bb6 <KerParLinearLayer_SQ8+0x8a>
1c006c44:	4705                	li	a4,1
1c006c46:	b779                	j	1c006bd4 <KerParLinearLayer_SQ8+0xa8>
1c006c48:	002047b7          	lui	a5,0x204
1c006c4c:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006c50:	01c7e703          	p.elw	a4,28(a5)
1c006c54:	5432                	lw	s0,44(sp)
1c006c56:	54a2                	lw	s1,40(sp)
1c006c58:	5912                	lw	s2,36(sp)
1c006c5a:	5982                	lw	s3,32(sp)
1c006c5c:	4a72                	lw	s4,28(sp)
1c006c5e:	4ae2                	lw	s5,24(sp)
1c006c60:	4b52                	lw	s6,20(sp)
1c006c62:	4bc2                	lw	s7,16(sp)
1c006c64:	4c32                	lw	s8,12(sp)
1c006c66:	4ca2                	lw	s9,8(sp)
1c006c68:	6145                	addi	sp,sp,48
1c006c6a:	8082                	ret

1c006c6c <KerParLinearLayerFullFeatB32_SQ8>:

/* 32b Bias */
void KerParLinearLayerFullFeatB32_SQ8(KerLinear_SQ8_T *Arg)

{
1c006c6c:	7139                	addi	sp,sp,-64
1c006c6e:	de22                	sw	s0,60(sp)
1c006c70:	dc26                	sw	s1,56(sp)
1c006c72:	da4a                	sw	s2,52(sp)
1c006c74:	d84e                	sw	s3,48(sp)
1c006c76:	d652                	sw	s4,44(sp)
1c006c78:	d456                	sw	s5,40(sp)
1c006c7a:	d25a                	sw	s6,36(sp)
1c006c7c:	d05e                	sw	s7,32(sp)
1c006c7e:	ce62                	sw	s8,28(sp)
1c006c80:	cc66                	sw	s9,24(sp)
1c006c82:	ca6a                	sw	s10,20(sp)
1c006c84:	c86e                	sw	s11,16(sp)
	signed char * __restrict__ In = Arg->In;
1c006c86:	4100                	lw	s0,0(a0)
	unsigned int InDim = Arg->InDim, OutDim = Arg->OutDim;
1c006c88:	01055283          	lhu	t0,16(a0)
1c006c8c:	01455683          	lhu	a3,20(a0)
	const signed char * __restrict__ Weights = Arg->Weights;
1c006c90:	00452b03          	lw	s6,4(a0)
	const int * __restrict__ Bias = Arg->Bias;
1c006c94:	00852903          	lw	s2,8(a0)
	unsigned int NormBias = ((unsigned char *)Arg->Infos)[AT_INF_BIASN];
1c006c98:	511c                	lw	a5,32(a0)
1c006c9a:	0057cc83          	lbu	s9,5(a5)
	unsigned char *Scale = Arg->Scale;
1c006c9e:	01852a83          	lw	s5,24(a0)
	unsigned char *ScaleN = Arg->ScaleN;
1c006ca2:	01c52a03          	lw	s4,28(a0)
	signed char * __restrict__ Out = (signed char * __restrict__) Arg->Out;
1c006ca6:	00c52983          	lw	s3,12(a0)

	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c006caa:	f1402773          	csrr	a4,mhartid
1c006cae:	c8071733          	p.extractu	a4,a4,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c006cb2:	f836b7b3          	p.bclr	a5,a3,28,3
1c006cb6:	00f037b3          	snez	a5,a5
1c006cba:	0036d613          	srli	a2,a3,0x3
1c006cbe:	97b2                	add	a5,a5,a2
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c006cc0:	02f70733          	mul	a4,a4,a5
1c006cc4:	97ba                	add	a5,a5,a4
1c006cc6:	04d7c7b3          	p.min	a5,a5,a3
	v4s * __restrict__ VectIn = (v4s *) In;

	for (int i=First; i<Last; i++) {
1c006cca:	0ef77463          	bleu	a5,a4,1c006db2 <KerParLinearLayerFullFeatB32_SQ8+0x146>
1c006cce:	8f96                	mv	t6,t0
1c006cd0:	00271693          	slli	a3,a4,0x2
1c006cd4:	9aba                	add	s5,s5,a4
1c006cd6:	9a3a                	add	s4,s4,a4
1c006cd8:	99ba                	add	s3,s3,a4
1c006cda:	8f5a                	mv	t5,s6
1c006cdc:	42e28f33          	p.mac	t5,t0,a4
1c006ce0:	078a                	slli	a5,a5,0x2
1c006ce2:	9936                	add	s2,s2,a3
1c006ce4:	84a2                	mv	s1,s0
1c006ce6:	c402bc33          	p.bclr	s8,t0,2,0
1c006cea:	9c22                	add	s8,s8,s0
		v4s * __restrict__ W = (v4s *) (&Weights[i*InDim]);
		int Acc = AT_LSHIFT(Bias[i], NormBias);
		for (int j=0; j<(InDim/(4*2)); j++) {
1c006cec:	4d9d                	li	s11,7
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
			v4s C0=W[2*j], C1=W[2*j+1];
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
		}
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c006cee:	0042fd13          	andi	s10,t0,4
1c006cf2:	c202bbb3          	p.bclr	s7,t0,1,0
1c006cf6:	1bf1                	addi	s7,s7,-4
		for (int j=4*(InDim/4); j<InDim; j++) Acc += In[j]*Weights[i*InDim+j];
1c006cf8:	c202b2b3          	p.bclr	t0,t0,1,0
1c006cfc:	8f95                	sub	a5,a5,a3
1c006cfe:	17f1                	addi	a5,a5,-4
1c006d00:	8389                	srli	a5,a5,0x2
1c006d02:	0785                	addi	a5,a5,1
1c006d04:	c63e                	sw	a5,12(sp)
1c006d06:	a889                	j	1c006d58 <KerParLinearLayerFullFeatB32_SQ8+0xec>
1c006d08:	03f2f763          	bleu	t6,t0,1c006d36 <KerParLinearLayerFullFeatB32_SQ8+0xca>
1c006d0c:	005406b3          	add	a3,s0,t0
1c006d10:	9816                	add	a6,a6,t0
1c006d12:	985a                	add	a6,a6,s6
1c006d14:	40d48733          	sub	a4,s1,a3
1c006d18:	977e                	add	a4,a4,t6
1c006d1a:	40940633          	sub	a2,s0,s1
1c006d1e:	9616                	add	a2,a2,t0
1c006d20:	0605                	addi	a2,a2,1
1c006d22:	08cfe663          	bltu	t6,a2,1c006dae <KerParLinearLayerFullFeatB32_SQ8+0x142>
1c006d26:	006740fb          	lp.setup	x1,a4,1c006d32 <KerParLinearLayerFullFeatB32_SQ8+0xc6>
1c006d2a:	0016858b          	p.lb	a1,1(a3!)
1c006d2e:	0018060b          	p.lb	a2,1(a6!)
1c006d32:	42c587b3          	p.mac	a5,a1,a2
		Out[i] = gap_clip(AT_SCALE(Acc, Scale[i], ScaleN[i]), 7);
1c006d36:	001ac70b          	p.lbu	a4,1(s5!)
1c006d3a:	001a468b          	p.lbu	a3,1(s4!)
1c006d3e:	02f707b3          	mul	a5,a4,a5
1c006d42:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c006d46:	148797b3          	p.clip	a5,a5,8
1c006d4a:	00f980ab          	p.sb	a5,1(s3!) # 12001 <__L1Cl+0x2001>
1c006d4e:	9f7e                	add	t5,t5,t6
1c006d50:	47b2                	lw	a5,12(sp)
1c006d52:	17fd                	addi	a5,a5,-1
1c006d54:	c63e                	sw	a5,12(sp)
1c006d56:	cfb1                	beqz	a5,1c006db2 <KerParLinearLayerFullFeatB32_SQ8+0x146>
1c006d58:	416f0833          	sub	a6,t5,s6
		v4s * __restrict__ W = (v4s *) (&Weights[i*InDim]);
1c006d5c:	83fa                	mv	t2,t5
		int Acc = AT_LSHIFT(Bias[i], NormBias);
1c006d5e:	0049278b          	p.lw	a5,4(s2!)
1c006d62:	019797b3          	sll	a5,a5,s9
		for (int j=0; j<(InDim/(4*2)); j++) {
1c006d66:	03fdfb63          	bleu	t6,s11,1c006d9c <KerParLinearLayerFullFeatB32_SQ8+0x130>
1c006d6a:	00440e93          	addi	t4,s0,4
1c006d6e:	004f0e13          	addi	t3,t5,4
1c006d72:	837a                	mv	t1,t5
1c006d74:	88a6                	mv	a7,s1
1c006d76:	409c0533          	sub	a0,s8,s1
1c006d7a:	1561                	addi	a0,a0,-8
1c006d7c:	810d                	srli	a0,a0,0x3
1c006d7e:	0505                	addi	a0,a0,1
1c006d80:	00c540fb          	lp.setup	x1,a0,1c006d98 <KerParLinearLayerFullFeatB32_SQ8+0x12c>
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
1c006d84:	008ea68b          	p.lw	a3,8(t4!)
			v4s C0=W[2*j], C1=W[2*j+1];
1c006d88:	008e270b          	p.lw	a4,8(t3!)
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
1c006d8c:	0088a58b          	p.lw	a1,8(a7!)
1c006d90:	0083260b          	p.lw	a2,8(t1!)
1c006d94:	b8c597d7          	pv.sdotsp.b	a5,a1,a2
1c006d98:	b8e697d7          	pv.sdotsp.b	a5,a3,a4
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c006d9c:	f60d06e3          	beqz	s10,1c006d08 <KerParLinearLayerFullFeatB32_SQ8+0x9c>
1c006da0:	21747703          	p.lw	a4,s7(s0)
1c006da4:	2173f383          	p.lw	t2,s7(t2)
1c006da8:	b87717d7          	pv.sdotsp.b	a5,a4,t2
1c006dac:	bfb1                	j	1c006d08 <KerParLinearLayerFullFeatB32_SQ8+0x9c>
1c006dae:	4705                	li	a4,1
1c006db0:	bf9d                	j	1c006d26 <KerParLinearLayerFullFeatB32_SQ8+0xba>
1c006db2:	002047b7          	lui	a5,0x204
1c006db6:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006dba:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c006dbe:	5472                	lw	s0,60(sp)
1c006dc0:	54e2                	lw	s1,56(sp)
1c006dc2:	5952                	lw	s2,52(sp)
1c006dc4:	59c2                	lw	s3,48(sp)
1c006dc6:	5a32                	lw	s4,44(sp)
1c006dc8:	5aa2                	lw	s5,40(sp)
1c006dca:	5b12                	lw	s6,36(sp)
1c006dcc:	5b82                	lw	s7,32(sp)
1c006dce:	4c72                	lw	s8,28(sp)
1c006dd0:	4ce2                	lw	s9,24(sp)
1c006dd2:	4d52                	lw	s10,20(sp)
1c006dd4:	4dc2                	lw	s11,16(sp)
1c006dd6:	6121                	addi	sp,sp,64
1c006dd8:	8082                	ret

1c006dda <LastDefinedOutput>:
			int *out = Out+Wo*Ho*(of);
			KerConv1x3Stride1x2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv1x3BorderStride1xN_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, 2, PadIn, PadIn);
		}
	gap_waitbarrier(0);
}
1c006dda:	fff68793          	addi	a5,a3,-1
1c006dde:	953e                	add	a0,a0,a5
1c006de0:	9532                	add	a0,a0,a2
1c006de2:	0015d613          	srli	a2,a1,0x1
1c006de6:	8d11                	sub	a0,a0,a2
1c006de8:	15fd                	addi	a1,a1,-1
1c006dea:	8185                	srli	a1,a1,0x1
1c006dec:	8d0d                	sub	a0,a0,a1
1c006dee:	02d55533          	divu	a0,a0,a3
1c006df2:	8082                	ret

1c006df4 <KerConv3x3Stride1_Body_2Out_SQ8>:
1c006df4:	7179                	addi	sp,sp,-48
1c006df6:	d622                	sw	s0,44(sp)
1c006df8:	d426                	sw	s1,40(sp)
1c006dfa:	d24a                	sw	s2,36(sp)
1c006dfc:	d04e                	sw	s3,32(sp)
1c006dfe:	ce52                	sw	s4,28(sp)
1c006e00:	cc56                	sw	s5,24(sp)
1c006e02:	ca5a                	sw	s6,20(sp)
1c006e04:	c85e                	sw	s7,16(sp)
1c006e06:	c662                	sw	s8,12(sp)
1c006e08:	c466                	sw	s9,8(sp)
1c006e0a:	c26a                	sw	s10,4(sp)
1c006e0c:	c06e                	sw	s11,0(sp)
1c006e0e:	54c2                	lw	s1,48(sp)
1c006e10:	5ae2                	lw	s5,56(sp)
1c006e12:	5b72                	lw	s6,60(sp)
1c006e14:	4306                	lw	t1,64(sp)
1c006e16:	780377d7          	pv.extract.b	a5,t1,0
1c006e1a:	1007d3b3          	p.exthz	t2,a5
1c006e1e:	78137357          	pv.extract.b	t1,t1,2
1c006e22:	100357b3          	p.exthz	a5,t1
1c006e26:	89c6                	mv	s3,a7
1c006e28:	435809b3          	p.mac	s3,a6,s5
1c006e2c:	098a                	slli	s3,s3,0x2
1c006e2e:	99ae                	add	s3,s3,a1
1c006e30:	5952                	lw	s2,52(sp)
1c006e32:	03280933          	mul	s2,a6,s2
1c006e36:	090a                	slli	s2,s2,0x2
1c006e38:	994e                	add	s2,s2,s3
1c006e3a:	00062303          	lw	t1,0(a2)
1c006e3e:	00362e03          	lw	t3,3(a2)
1c006e42:	00662e83          	lw	t4,6(a2)
1c006e46:	20d67f03          	p.lw	t5,a3(a2)
1c006e4a:	96b2                	add	a3,a3,a2
1c006e4c:	0036af83          	lw	t6,3(a3)
1c006e50:	0066a283          	lw	t0,6(a3)
1c006e54:	0a98f263          	bleu	s1,a7,1c006ef8 <KerConv3x3Stride1_Body_2Out_SQ8+0x104>
1c006e58:	b2107357          	pv.insert.b	t1,zero,3
1c006e5c:	b2107e57          	pv.insert.b	t3,zero,3
1c006e60:	b2107ed7          	pv.insert.b	t4,zero,3
1c006e64:	b2107f57          	pv.insert.b	t5,zero,3
1c006e68:	b2107fd7          	pv.insert.b	t6,zero,3
1c006e6c:	b21072d7          	pv.insert.b	t0,zero,3
1c006e70:	40fa87b3          	sub	a5,s5,a5
1c006e74:	02e787b3          	mul	a5,a5,a4
1c006e78:	407787b3          	sub	a5,a5,t2
1c006e7c:	00281c93          	slli	s9,a6,0x2
1c006e80:	00f88a33          	add	s4,a7,a5
1c006e84:	9a2a                	add	s4,s4,a0
1c006e86:	8d3a                	mv	s10,a4
1c006e88:	00e88433          	add	s0,a7,a4
1c006e8c:	943e                	add	s0,s0,a5
1c006e8e:	942a                	add	s0,s0,a0
1c006e90:	94aa                	add	s1,s1,a0
1c006e92:	94be                	add	s1,s1,a5
1c006e94:	00171c13          	slli	s8,a4,0x1
1c006e98:	8bda                	mv	s7,s6
1c006e9a:	414484b3          	sub	s1,s1,s4
1c006e9e:	02c4c07b          	lp.setup	x0,s1,1c006ef6 <KerConv3x3Stride1_Body_2Out_SQ8+0x102>
1c006ea2:	83d2                	mv	t2,s4
1c006ea4:	2183f68b          	p.lw	a3,s8(t2!)
1c006ea8:	401c                	lw	a5,0(s0)
1c006eaa:	85d6                	mv	a1,s5
1c006eac:	056af263          	bleu	s6,s5,1c006ef0 <KerConv3x3Stride1_Body_2Out_SQ8+0xfc>
1c006eb0:	88ca                	mv	a7,s2
1c006eb2:	884e                	mv	a6,s3
1c006eb4:	415b8533          	sub	a0,s7,s5
1c006eb8:	01b540fb          	lp.setup	x1,a0,1c006eee <KerConv3x3Stride1_Body_2Out_SQ8+0xfa>
1c006ebc:	00082603          	lw	a2,0(a6)
1c006ec0:	21a3f70b          	p.lw	a4,s10(t2!)
1c006ec4:	b8669657          	pv.sdotsp.b	a2,a3,t1
1c006ec8:	b9c79657          	pv.sdotsp.b	a2,a5,t3
1c006ecc:	b9d71657          	pv.sdotsp.b	a2,a4,t4
1c006ed0:	0008ad83          	lw	s11,0(a7)
1c006ed4:	b9e69dd7          	pv.sdotsp.b	s11,a3,t5
1c006ed8:	86ee                	mv	a3,s11
1c006eda:	b9f796d7          	pv.sdotsp.b	a3,a5,t6
1c006ede:	b85716d7          	pv.sdotsp.b	a3,a4,t0
1c006ee2:	00c86cab          	p.sw	a2,s9(a6!)
1c006ee6:	00d8ecab          	p.sw	a3,s9(a7!)
1c006eea:	0585                	addi	a1,a1,1
1c006eec:	86be                	mv	a3,a5
1c006eee:	87ba                	mv	a5,a4
1c006ef0:	0991                	addi	s3,s3,4
1c006ef2:	0911                	addi	s2,s2,4
1c006ef4:	0a05                	addi	s4,s4,1
1c006ef6:	0405                	addi	s0,s0,1
1c006ef8:	5432                	lw	s0,44(sp)
1c006efa:	54a2                	lw	s1,40(sp)
1c006efc:	5912                	lw	s2,36(sp)
1c006efe:	5982                	lw	s3,32(sp)
1c006f00:	4a72                	lw	s4,28(sp)
1c006f02:	4ae2                	lw	s5,24(sp)
1c006f04:	4b52                	lw	s6,20(sp)
1c006f06:	4bc2                	lw	s7,16(sp)
1c006f08:	4c32                	lw	s8,12(sp)
1c006f0a:	4ca2                	lw	s9,8(sp)
1c006f0c:	4d12                	lw	s10,4(sp)
1c006f0e:	4d82                	lw	s11,0(sp)
1c006f10:	6145                	addi	sp,sp,48
1c006f12:	8082                	ret

1c006f14 <KerConv2x3from3x3Stride1_V_2Out_SQ8>:
1c006f14:	7179                	addi	sp,sp,-48
1c006f16:	d622                	sw	s0,44(sp)
1c006f18:	d426                	sw	s1,40(sp)
1c006f1a:	d24a                	sw	s2,36(sp)
1c006f1c:	d04e                	sw	s3,32(sp)
1c006f1e:	ce52                	sw	s4,28(sp)
1c006f20:	cc56                	sw	s5,24(sp)
1c006f22:	ca5a                	sw	s6,20(sp)
1c006f24:	c85e                	sw	s7,16(sp)
1c006f26:	c662                	sw	s8,12(sp)
1c006f28:	c466                	sw	s9,8(sp)
1c006f2a:	5342                	lw	t1,48(sp)
1c006f2c:	5e52                	lw	t3,52(sp)
1c006f2e:	5ee2                	lw	t4,56(sp)
1c006f30:	0e0e8a63          	beqz	t4,1c007024 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x110>
1c006f34:	00035383          	lhu	t2,0(t1)
1c006f38:	00335283          	lhu	t0,3(t1)
1c006f3c:	00635403          	lhu	s0,6(t1)
1c006f40:	9372                	add	t1,t1,t3
1c006f42:	00035f83          	lhu	t6,0(t1)
1c006f46:	00335f03          	lhu	t5,3(t1)
1c006f4a:	00635483          	lhu	s1,6(t1)
1c006f4e:	0e17a963          	p.beqimm	a5,1,1c007040 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x12c>
1c006f52:	40c78633          	sub	a2,a5,a2
1c006f56:	02d78333          	mul	t1,a5,a3
1c006f5a:	030a                	slli	t1,t1,0x2
1c006f5c:	989a                	add	a7,a7,t1
1c006f5e:	42b60533          	p.mac	a0,a2,a1
1c006f62:	20b57e0b          	p.lw	t3,a1(a0!)
1c006f66:	20b5760b          	p.lw	a2,a1(a0!)
1c006f6a:	02d70ab3          	mul	s5,a4,a3
1c006f6e:	0a8a                	slli	s5,s5,0x2
1c006f70:	9ac6                	add	s5,s5,a7
1c006f72:	8b3e                	mv	s6,a5
1c006f74:	0707f363          	bleu	a6,a5,1c006fda <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xc6>
1c006f78:	00269b93          	slli	s7,a3,0x2
1c006f7c:	89d6                	mv	s3,s5
1c006f7e:	8946                	mv	s2,a7
1c006f80:	8a2a                	mv	s4,a0
1c006f82:	8c2e                	mv	s8,a1
1c006f84:	40f806b3          	sub	a3,a6,a5
1c006f88:	01b6c0fb          	lp.setup	x1,a3,1c006fbe <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xaa>
1c006f8c:	00092e83          	lw	t4,0(s2)
1c006f90:	20ba730b          	p.lw	t1,a1(s4!)
1c006f94:	b87e1ed7          	pv.sdotsp.b	t4,t3,t2
1c006f98:	b8561ed7          	pv.sdotsp.b	t4,a2,t0
1c006f9c:	b8831ed7          	pv.sdotsp.b	t4,t1,s0
1c006fa0:	0009ac83          	lw	s9,0(s3)
1c006fa4:	b9fe1cd7          	pv.sdotsp.b	s9,t3,t6
1c006fa8:	8e66                	mv	t3,s9
1c006faa:	b9e61e57          	pv.sdotsp.b	t3,a2,t5
1c006fae:	b8931e57          	pv.sdotsp.b	t3,t1,s1
1c006fb2:	01d96bab          	p.sw	t4,s7(s2!)
1c006fb6:	01c9ebab          	p.sw	t3,s7(s3!)
1c006fba:	0785                	addi	a5,a5,1
1c006fbc:	8e32                	mv	t3,a2
1c006fbe:	861a                	mv	a2,t1
1c006fc0:	fff80793          	addi	a5,a6,-1
1c006fc4:	416787b3          	sub	a5,a5,s6
1c006fc8:	43878c33          	p.mac	s8,a5,s8
1c006fcc:	9562                	add	a0,a0,s8
1c006fce:	41680b33          	sub	s6,a6,s6
1c006fd2:	037b0bb3          	mul	s7,s6,s7
1c006fd6:	98de                	add	a7,a7,s7
1c006fd8:	9ade                	add	s5,s5,s7
1c006fda:	03070963          	beq	a4,a6,1c00700c <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xf8>
1c006fde:	0008a683          	lw	a3,0(a7)
1c006fe2:	000aa703          	lw	a4,0(s5)
1c006fe6:	00159793          	slli	a5,a1,0x1
1c006fea:	8d1d                	sub	a0,a0,a5
1c006fec:	411c                	lw	a5,0(a0)
1c006fee:	20b57583          	p.lw	a1,a1(a0)
1c006ff2:	b87796d7          	pv.sdotsp.b	a3,a5,t2
1c006ff6:	b85596d7          	pv.sdotsp.b	a3,a1,t0
1c006ffa:	b9f79757          	pv.sdotsp.b	a4,a5,t6
1c006ffe:	87ba                	mv	a5,a4
1c007000:	b9e597d7          	pv.sdotsp.b	a5,a1,t5
1c007004:	00d8a023          	sw	a3,0(a7)
1c007008:	00faa023          	sw	a5,0(s5)
1c00700c:	5432                	lw	s0,44(sp)
1c00700e:	54a2                	lw	s1,40(sp)
1c007010:	5912                	lw	s2,36(sp)
1c007012:	5982                	lw	s3,32(sp)
1c007014:	4a72                	lw	s4,28(sp)
1c007016:	4ae2                	lw	s5,24(sp)
1c007018:	4b52                	lw	s6,20(sp)
1c00701a:	4bc2                	lw	s7,16(sp)
1c00701c:	4c32                	lw	s8,12(sp)
1c00701e:	4ca2                	lw	s9,8(sp)
1c007020:	6145                	addi	sp,sp,48
1c007022:	8082                	ret
1c007024:	00135383          	lhu	t2,1(t1)
1c007028:	00435283          	lhu	t0,4(t1)
1c00702c:	00735403          	lhu	s0,7(t1)
1c007030:	9372                	add	t1,t1,t3
1c007032:	00135f83          	lhu	t6,1(t1)
1c007036:	00435f03          	lhu	t5,4(t1)
1c00703a:	00735483          	lhu	s1,7(t1)
1c00703e:	bf01                	j	1c006f4e <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x3a>
1c007040:	20b5760b          	p.lw	a2,a1(a0!)
1c007044:	00007e57          	pv.add.sci.b	t3,zero,0
1c007048:	4781                	li	a5,0
1c00704a:	b705                	j	1c006f6a <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x56>

1c00704c <KerConv3x2from3x3Stride1_H_2Out_SQ8>:
1c00704c:	4302                	lw	t1,0(sp)
1c00704e:	4f92                	lw	t6,4(sp)
1c007050:	4ea2                	lw	t4,8(sp)
1c007052:	8e3e                	mv	t3,a5
1c007054:	40c78633          	sub	a2,a5,a2
1c007058:	9532                	add	a0,a0,a2
1c00705a:	02e683b3          	mul	t2,a3,a4
1c00705e:	038a                	slli	t2,t2,0x2
1c007060:	93c6                	add	t2,t2,a7
1c007062:	060e8063          	beqz	t4,1c0070c2 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x76>
1c007066:	00032e83          	lw	t4,0(t1)
1c00706a:	b2107ed7          	pv.insert.b	t4,zero,3
1c00706e:	00332f03          	lw	t5,3(t1)
1c007072:	b2107f57          	pv.insert.b	t5,zero,3
1c007076:	937e                	add	t1,t1,t6
1c007078:	00032f83          	lw	t6,0(t1)
1c00707c:	b2107fd7          	pv.insert.b	t6,zero,3
1c007080:	00332283          	lw	t0,3(t1)
1c007084:	b21072d7          	pv.insert.b	t0,zero,3
1c007088:	030e7c63          	bleu	a6,t3,1c0070c0 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x74>
1c00708c:	95aa                	add	a1,a1,a0
1c00708e:	40f80833          	sub	a6,a6,a5
1c007092:	015840fb          	lp.setup	x1,a6,1c0070bc <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x70>
1c007096:	0008ae03          	lw	t3,0(a7)
1c00709a:	0003a303          	lw	t1,0(t2)
1c00709e:	0015268b          	p.lw	a3,1(a0!)
1c0070a2:	0015a70b          	p.lw	a4,1(a1!)
1c0070a6:	b9d69e57          	pv.sdotsp.b	t3,a3,t4
1c0070aa:	b9e71e57          	pv.sdotsp.b	t3,a4,t5
1c0070ae:	b9f69357          	pv.sdotsp.b	t1,a3,t6
1c0070b2:	869a                	mv	a3,t1
1c0070b4:	b85716d7          	pv.sdotsp.b	a3,a4,t0
1c0070b8:	01c8a22b          	p.sw	t3,4(a7!)
1c0070bc:	00d3a22b          	p.sw	a3,4(t2!)
1c0070c0:	8082                	ret
1c0070c2:	00332e83          	lw	t4,3(t1)
1c0070c6:	b2107ed7          	pv.insert.b	t4,zero,3
1c0070ca:	00632f03          	lw	t5,6(t1)
1c0070ce:	b2107f57          	pv.insert.b	t5,zero,3
1c0070d2:	937e                	add	t1,t1,t6
1c0070d4:	00332f83          	lw	t6,3(t1)
1c0070d8:	b2107fd7          	pv.insert.b	t6,zero,3
1c0070dc:	00632283          	lw	t0,6(t1)
1c0070e0:	b21072d7          	pv.insert.b	t0,zero,3
1c0070e4:	b755                	j	1c007088 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x3c>

1c0070e6 <KerConv3x3BorderStride1_2Out_SQ8>:
1c0070e6:	715d                	addi	sp,sp,-80
1c0070e8:	c686                	sw	ra,76(sp)
1c0070ea:	c4a2                	sw	s0,72(sp)
1c0070ec:	c2a6                	sw	s1,68(sp)
1c0070ee:	c0ca                	sw	s2,64(sp)
1c0070f0:	de4e                	sw	s3,60(sp)
1c0070f2:	dc52                	sw	s4,56(sp)
1c0070f4:	da56                	sw	s5,52(sp)
1c0070f6:	d85a                	sw	s6,48(sp)
1c0070f8:	d65e                	sw	s7,44(sp)
1c0070fa:	d462                	sw	s8,40(sp)
1c0070fc:	d266                	sw	s9,36(sp)
1c0070fe:	d06a                	sw	s10,32(sp)
1c007100:	ce6e                	sw	s11,28(sp)
1c007102:	8a2a                	mv	s4,a0
1c007104:	8aae                	mv	s5,a1
1c007106:	8b32                	mv	s6,a2
1c007108:	8bb6                	mv	s7,a3
1c00710a:	893a                	mv	s2,a4
1c00710c:	84c2                	mv	s1,a6
1c00710e:	89c6                	mv	s3,a7
1c007110:	5786                	lw	a5,96(sp)
1c007112:	5416                	lw	s0,100(sp)
1c007114:	78047c57          	pv.extract.b	s8,s0,0
1c007118:	78147457          	pv.extract.b	s0,s0,2
1c00711c:	7a07fdd7          	pv.extract.b	s11,a5,1
1c007120:	7817fd57          	pv.extract.b	s10,a5,2
1c007124:	7a17fcd7          	pv.extract.b	s9,a5,3
1c007128:	7807f7d7          	pv.extract.b	a5,a5,0
1c00712c:	e795                	bnez	a5,1c007158 <KerConv3x3BorderStride1_2Out_SQ8+0x72>
1c00712e:	040d9163          	bnez	s11,1c007170 <KerConv3x3BorderStride1_2Out_SQ8+0x8a>
1c007132:	060d1363          	bnez	s10,1c007198 <KerConv3x3BorderStride1_2Out_SQ8+0xb2>
1c007136:	080c9063          	bnez	s9,1c0071b6 <KerConv3x3BorderStride1_2Out_SQ8+0xd0>
1c00713a:	40b6                	lw	ra,76(sp)
1c00713c:	4426                	lw	s0,72(sp)
1c00713e:	4496                	lw	s1,68(sp)
1c007140:	4906                	lw	s2,64(sp)
1c007142:	59f2                	lw	s3,60(sp)
1c007144:	5a62                	lw	s4,56(sp)
1c007146:	5ad2                	lw	s5,52(sp)
1c007148:	5b42                	lw	s6,48(sp)
1c00714a:	5bb2                	lw	s7,44(sp)
1c00714c:	5c22                	lw	s8,40(sp)
1c00714e:	5c92                	lw	s9,36(sp)
1c007150:	5d02                	lw	s10,32(sp)
1c007152:	4df2                	lw	s11,28(sp)
1c007154:	6161                	addi	sp,sp,80
1c007156:	8082                	ret
1c007158:	c402                	sw	zero,8(sp)
1c00715a:	c236                	sw	a3,4(sp)
1c00715c:	c032                	sw	a2,0(sp)
1c00715e:	88ae                	mv	a7,a1
1c007160:	4876                	lw	a6,92(sp)
1c007162:	47e6                	lw	a5,88(sp)
1c007164:	4756                	lw	a4,84(sp)
1c007166:	86a6                	mv	a3,s1
1c007168:	8622                	mv	a2,s0
1c00716a:	85ca                	mv	a1,s2
1c00716c:	3365                	jal	1c006f14 <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c00716e:	b7c1                	j	1c00712e <KerConv3x3BorderStride1_2Out_SQ8+0x48>
1c007170:	00249893          	slli	a7,s1,0x2
1c007174:	18f1                	addi	a7,a7,-4
1c007176:	47c6                	lw	a5,80(sp)
1c007178:	41878533          	sub	a0,a5,s8
1c00717c:	4785                	li	a5,1
1c00717e:	c43e                	sw	a5,8(sp)
1c007180:	c25e                	sw	s7,4(sp)
1c007182:	c05a                	sw	s6,0(sp)
1c007184:	98d6                	add	a7,a7,s5
1c007186:	4876                	lw	a6,92(sp)
1c007188:	47e6                	lw	a5,88(sp)
1c00718a:	4756                	lw	a4,84(sp)
1c00718c:	86a6                	mv	a3,s1
1c00718e:	8622                	mv	a2,s0
1c007190:	85ca                	mv	a1,s2
1c007192:	9552                	add	a0,a0,s4
1c007194:	3341                	jal	1c006f14 <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c007196:	bf71                	j	1c007132 <KerConv3x3BorderStride1_2Out_SQ8+0x4c>
1c007198:	00299893          	slli	a7,s3,0x2
1c00719c:	c402                	sw	zero,8(sp)
1c00719e:	c25e                	sw	s7,4(sp)
1c0071a0:	c05a                	sw	s6,0(sp)
1c0071a2:	98d6                	add	a7,a7,s5
1c0071a4:	4846                	lw	a6,80(sp)
1c0071a6:	87ce                	mv	a5,s3
1c0071a8:	4756                	lw	a4,84(sp)
1c0071aa:	86a6                	mv	a3,s1
1c0071ac:	8662                	mv	a2,s8
1c0071ae:	85ca                	mv	a1,s2
1c0071b0:	8552                	mv	a0,s4
1c0071b2:	3d69                	jal	1c00704c <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c0071b4:	b749                	j	1c007136 <KerConv3x3BorderStride1_2Out_SQ8+0x50>
1c0071b6:	88ce                	mv	a7,s3
1c0071b8:	47f6                	lw	a5,92(sp)
1c0071ba:	42f488b3          	p.mac	a7,s1,a5
1c0071be:	088a                	slli	a7,a7,0x2
1c0071c0:	40878433          	sub	s0,a5,s0
1c0071c4:	4785                	li	a5,1
1c0071c6:	c43e                	sw	a5,8(sp)
1c0071c8:	c25e                	sw	s7,4(sp)
1c0071ca:	c05a                	sw	s6,0(sp)
1c0071cc:	98d6                	add	a7,a7,s5
1c0071ce:	4846                	lw	a6,80(sp)
1c0071d0:	87ce                	mv	a5,s3
1c0071d2:	4756                	lw	a4,84(sp)
1c0071d4:	86a6                	mv	a3,s1
1c0071d6:	8662                	mv	a2,s8
1c0071d8:	85ca                	mv	a1,s2
1c0071da:	8552                	mv	a0,s4
1c0071dc:	43240533          	p.mac	a0,s0,s2
1c0071e0:	35b5                	jal	1c00704c <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c0071e2:	bfa1                	j	1c00713a <KerConv3x3BorderStride1_2Out_SQ8+0x54>

1c0071e4 <KerConv3x3Stride1_Body_SQ8>:
1c0071e4:	1101                	addi	sp,sp,-32
1c0071e6:	ce22                	sw	s0,28(sp)
1c0071e8:	cc26                	sw	s1,24(sp)
1c0071ea:	ca4a                	sw	s2,20(sp)
1c0071ec:	c84e                	sw	s3,16(sp)
1c0071ee:	c652                	sw	s4,12(sp)
1c0071f0:	c456                	sw	s5,8(sp)
1c0071f2:	5392                	lw	t2,36(sp)
1c0071f4:	5422                	lw	s0,40(sp)
1c0071f6:	5332                	lw	t1,44(sp)
1c0071f8:	78037757          	pv.extract.b	a4,t1,0
1c0071fc:	78137357          	pv.extract.b	t1,t1,2
1c007200:	10035f33          	p.exthz	t5,t1
1c007204:	8342                	mv	t1,a6
1c007206:	42778333          	p.mac	t1,a5,t2
1c00720a:	030a                	slli	t1,t1,0x2
1c00720c:	959a                	add	a1,a1,t1
1c00720e:	00062303          	lw	t1,0(a2)
1c007212:	00362e03          	lw	t3,3(a2)
1c007216:	00662e83          	lw	t4,6(a2)
1c00721a:	09187363          	bleu	a7,a6,1c0072a0 <KerConv3x3Stride1_Body_SQ8+0xbc>
1c00721e:	100752b3          	p.exthz	t0,a4
1c007222:	b2107357          	pv.insert.b	t1,zero,3
1c007226:	b2107e57          	pv.insert.b	t3,zero,3
1c00722a:	b2107ed7          	pv.insert.b	t4,zero,3
1c00722e:	41e38733          	sub	a4,t2,t5
1c007232:	02d70733          	mul	a4,a4,a3
1c007236:	40570733          	sub	a4,a4,t0
1c00723a:	00279913          	slli	s2,a5,0x2
1c00723e:	00e804b3          	add	s1,a6,a4
1c007242:	94aa                	add	s1,s1,a0
1c007244:	89b6                	mv	s3,a3
1c007246:	00d80fb3          	add	t6,a6,a3
1c00724a:	9fba                	add	t6,t6,a4
1c00724c:	9faa                	add	t6,t6,a0
1c00724e:	011502b3          	add	t0,a0,a7
1c007252:	92ba                	add	t0,t0,a4
1c007254:	00169a93          	slli	s5,a3,0x1
1c007258:	8a22                	mv	s4,s0
1c00725a:	409282b3          	sub	t0,t0,s1
1c00725e:	0202c07b          	lp.setup	x0,t0,1c00729e <KerConv3x3Stride1_Body_SQ8+0xba>
1c007262:	88a6                	mv	a7,s1
1c007264:	2158f60b          	p.lw	a2,s5(a7!)
1c007268:	000fa703          	lw	a4,0(t6)
1c00726c:	8f1e                	mv	t5,t2
1c00726e:	0283f663          	bleu	s0,t2,1c00729a <KerConv3x3Stride1_Body_SQ8+0xb6>
1c007272:	882e                	mv	a6,a1
1c007274:	407a0533          	sub	a0,s4,t2
1c007278:	010540fb          	lp.setup	x1,a0,1c007298 <KerConv3x3Stride1_Body_SQ8+0xb4>
1c00727c:	00082783          	lw	a5,0(a6)
1c007280:	2138f68b          	p.lw	a3,s3(a7!)
1c007284:	b86617d7          	pv.sdotsp.b	a5,a2,t1
1c007288:	b9c717d7          	pv.sdotsp.b	a5,a4,t3
1c00728c:	b9d697d7          	pv.sdotsp.b	a5,a3,t4
1c007290:	00f8692b          	p.sw	a5,s2(a6!)
1c007294:	0f05                	addi	t5,t5,1
1c007296:	863a                	mv	a2,a4
1c007298:	8736                	mv	a4,a3
1c00729a:	0591                	addi	a1,a1,4
1c00729c:	0485                	addi	s1,s1,1
1c00729e:	0f85                	addi	t6,t6,1
1c0072a0:	4472                	lw	s0,28(sp)
1c0072a2:	44e2                	lw	s1,24(sp)
1c0072a4:	4952                	lw	s2,20(sp)
1c0072a6:	49c2                	lw	s3,16(sp)
1c0072a8:	4a32                	lw	s4,12(sp)
1c0072aa:	4aa2                	lw	s5,8(sp)
1c0072ac:	6105                	addi	sp,sp,32
1c0072ae:	8082                	ret

1c0072b0 <KerConv2x3from3x3Stride1_V_SQ8>:
1c0072b0:	1141                	addi	sp,sp,-16
1c0072b2:	c622                	sw	s0,12(sp)
1c0072b4:	c426                	sw	s1,8(sp)
1c0072b6:	c24a                	sw	s2,4(sp)
1c0072b8:	c04e                	sw	s3,0(sp)
1c0072ba:	4342                	lw	t1,16(sp)
1c0072bc:	4e52                	lw	t3,20(sp)
1c0072be:	0a0e0063          	beqz	t3,1c00735e <KerConv2x3from3x3Stride1_V_SQ8+0xae>
1c0072c2:	00035f83          	lhu	t6,0(t1)
1c0072c6:	00335f03          	lhu	t5,3(t1)
1c0072ca:	00635283          	lhu	t0,6(t1)
1c0072ce:	0817af63          	p.beqimm	a5,1,1c00736c <KerConv2x3from3x3Stride1_V_SQ8+0xbc>
1c0072d2:	40c78633          	sub	a2,a5,a2
1c0072d6:	02d78333          	mul	t1,a5,a3
1c0072da:	030a                	slli	t1,t1,0x2
1c0072dc:	989a                	add	a7,a7,t1
1c0072de:	42b60533          	p.mac	a0,a2,a1
1c0072e2:	20b57e8b          	p.lw	t4,a1(a0!)
1c0072e6:	20b5730b          	p.lw	t1,a1(a0!)
1c0072ea:	84be                	mv	s1,a5
1c0072ec:	0507f363          	bleu	a6,a5,1c007332 <KerConv2x3from3x3Stride1_V_SQ8+0x82>
1c0072f0:	00269993          	slli	s3,a3,0x2
1c0072f4:	86c6                	mv	a3,a7
1c0072f6:	842a                	mv	s0,a0
1c0072f8:	892e                	mv	s2,a1
1c0072fa:	40f803b3          	sub	t2,a6,a5
1c0072fe:	00f3c0fb          	lp.setup	x1,t2,1c00731c <KerConv2x3from3x3Stride1_V_SQ8+0x6c>
1c007302:	4290                	lw	a2,0(a3)
1c007304:	20b47e0b          	p.lw	t3,a1(s0!)
1c007308:	b9fe9657          	pv.sdotsp.b	a2,t4,t6
1c00730c:	b9e31657          	pv.sdotsp.b	a2,t1,t5
1c007310:	b85e1657          	pv.sdotsp.b	a2,t3,t0
1c007314:	00c6e9ab          	p.sw	a2,s3(a3!)
1c007318:	0785                	addi	a5,a5,1
1c00731a:	8e9a                	mv	t4,t1
1c00731c:	8372                	mv	t1,t3
1c00731e:	fff80793          	addi	a5,a6,-1
1c007322:	8f85                	sub	a5,a5,s1
1c007324:	43278933          	p.mac	s2,a5,s2
1c007328:	954a                	add	a0,a0,s2
1c00732a:	409804b3          	sub	s1,a6,s1
1c00732e:	433488b3          	p.mac	a7,s1,s3
1c007332:	03070063          	beq	a4,a6,1c007352 <KerConv2x3from3x3Stride1_V_SQ8+0xa2>
1c007336:	0008a783          	lw	a5,0(a7)
1c00733a:	00159713          	slli	a4,a1,0x1
1c00733e:	8d19                	sub	a0,a0,a4
1c007340:	20b57583          	p.lw	a1,a1(a0)
1c007344:	4118                	lw	a4,0(a0)
1c007346:	b9f717d7          	pv.sdotsp.b	a5,a4,t6
1c00734a:	b9e597d7          	pv.sdotsp.b	a5,a1,t5
1c00734e:	00f8a023          	sw	a5,0(a7)
1c007352:	4432                	lw	s0,12(sp)
1c007354:	44a2                	lw	s1,8(sp)
1c007356:	4912                	lw	s2,4(sp)
1c007358:	4982                	lw	s3,0(sp)
1c00735a:	0141                	addi	sp,sp,16
1c00735c:	8082                	ret
1c00735e:	00135f83          	lhu	t6,1(t1)
1c007362:	00435f03          	lhu	t5,4(t1)
1c007366:	00735283          	lhu	t0,7(t1)
1c00736a:	b795                	j	1c0072ce <KerConv2x3from3x3Stride1_V_SQ8+0x1e>
1c00736c:	20b5730b          	p.lw	t1,a1(a0!)
1c007370:	00007ed7          	pv.add.sci.b	t4,zero,0
1c007374:	4781                	li	a5,0
1c007376:	bf95                	j	1c0072ea <KerConv2x3from3x3Stride1_V_SQ8+0x3a>

1c007378 <KerConv3x2from3x3Stride1_H_SQ8>:
1c007378:	4302                	lw	t1,0(sp)
1c00737a:	86ba                	mv	a3,a4
1c00737c:	40c70633          	sub	a2,a4,a2
1c007380:	9532                	add	a0,a0,a2
1c007382:	02030d63          	beqz	t1,1c0073bc <KerConv3x2from3x3Stride1_H_SQ8+0x44>
1c007386:	0008ae03          	lw	t3,0(a7)
1c00738a:	b2107e57          	pv.insert.b	t3,zero,3
1c00738e:	0038ae83          	lw	t4,3(a7)
1c007392:	b2107ed7          	pv.insert.b	t4,zero,3
1c007396:	02f6f263          	bleu	a5,a3,1c0073ba <KerConv3x2from3x3Stride1_H_SQ8+0x42>
1c00739a:	95aa                	add	a1,a1,a0
1c00739c:	8f99                	sub	a5,a5,a4
1c00739e:	00c7c0fb          	lp.setup	x1,a5,1c0073b6 <KerConv3x2from3x3Stride1_H_SQ8+0x3e>
1c0073a2:	00082683          	lw	a3,0(a6)
1c0073a6:	0015230b          	p.lw	t1,1(a0!)
1c0073aa:	0015a88b          	p.lw	a7,1(a1!)
1c0073ae:	b9c316d7          	pv.sdotsp.b	a3,t1,t3
1c0073b2:	b9d896d7          	pv.sdotsp.b	a3,a7,t4
1c0073b6:	00d8222b          	p.sw	a3,4(a6!)
1c0073ba:	8082                	ret
1c0073bc:	0038ae03          	lw	t3,3(a7)
1c0073c0:	b2107e57          	pv.insert.b	t3,zero,3
1c0073c4:	0068ae83          	lw	t4,6(a7)
1c0073c8:	b2107ed7          	pv.insert.b	t4,zero,3
1c0073cc:	b7e9                	j	1c007396 <KerConv3x2from3x3Stride1_H_SQ8+0x1e>

1c0073ce <KerConv3x3BorderStride1_SQ8>:
1c0073ce:	715d                	addi	sp,sp,-80
1c0073d0:	c686                	sw	ra,76(sp)
1c0073d2:	c4a2                	sw	s0,72(sp)
1c0073d4:	c2a6                	sw	s1,68(sp)
1c0073d6:	c0ca                	sw	s2,64(sp)
1c0073d8:	de4e                	sw	s3,60(sp)
1c0073da:	dc52                	sw	s4,56(sp)
1c0073dc:	da56                	sw	s5,52(sp)
1c0073de:	d85a                	sw	s6,48(sp)
1c0073e0:	d65e                	sw	s7,44(sp)
1c0073e2:	d462                	sw	s8,40(sp)
1c0073e4:	d266                	sw	s9,36(sp)
1c0073e6:	d06a                	sw	s10,32(sp)
1c0073e8:	ce6e                	sw	s11,28(sp)
1c0073ea:	8a2a                	mv	s4,a0
1c0073ec:	8aae                	mv	s5,a1
1c0073ee:	8b32                	mv	s6,a2
1c0073f0:	8936                	mv	s2,a3
1c0073f2:	84be                	mv	s1,a5
1c0073f4:	89c2                	mv	s3,a6
1c0073f6:	8c46                	mv	s8,a7
1c0073f8:	47f6                	lw	a5,92(sp)
1c0073fa:	5406                	lw	s0,96(sp)
1c0073fc:	78047bd7          	pv.extract.b	s7,s0,0
1c007400:	78147457          	pv.extract.b	s0,s0,2
1c007404:	7a07fdd7          	pv.extract.b	s11,a5,1
1c007408:	7817fd57          	pv.extract.b	s10,a5,2
1c00740c:	7a17fcd7          	pv.extract.b	s9,a5,3
1c007410:	7807f7d7          	pv.extract.b	a5,a5,0
1c007414:	e795                	bnez	a5,1c007440 <KerConv3x3BorderStride1_SQ8+0x72>
1c007416:	040d9063          	bnez	s11,1c007456 <KerConv3x3BorderStride1_SQ8+0x88>
1c00741a:	060d1063          	bnez	s10,1c00747a <KerConv3x3BorderStride1_SQ8+0xac>
1c00741e:	060c9b63          	bnez	s9,1c007494 <KerConv3x3BorderStride1_SQ8+0xc6>
1c007422:	40b6                	lw	ra,76(sp)
1c007424:	4426                	lw	s0,72(sp)
1c007426:	4496                	lw	s1,68(sp)
1c007428:	4906                	lw	s2,64(sp)
1c00742a:	59f2                	lw	s3,60(sp)
1c00742c:	5a62                	lw	s4,56(sp)
1c00742e:	5ad2                	lw	s5,52(sp)
1c007430:	5b42                	lw	s6,48(sp)
1c007432:	5bb2                	lw	s7,44(sp)
1c007434:	5c22                	lw	s8,40(sp)
1c007436:	5c92                	lw	s9,36(sp)
1c007438:	5d02                	lw	s10,32(sp)
1c00743a:	4df2                	lw	s11,28(sp)
1c00743c:	6161                	addi	sp,sp,80
1c00743e:	8082                	ret
1c007440:	c202                	sw	zero,4(sp)
1c007442:	c032                	sw	a2,0(sp)
1c007444:	88ae                	mv	a7,a1
1c007446:	4866                	lw	a6,88(sp)
1c007448:	47d6                	lw	a5,84(sp)
1c00744a:	4746                	lw	a4,80(sp)
1c00744c:	86a6                	mv	a3,s1
1c00744e:	8622                	mv	a2,s0
1c007450:	85ca                	mv	a1,s2
1c007452:	3db9                	jal	1c0072b0 <KerConv2x3from3x3Stride1_V_SQ8>
1c007454:	b7c9                	j	1c007416 <KerConv3x3BorderStride1_SQ8+0x48>
1c007456:	00249893          	slli	a7,s1,0x2
1c00745a:	18f1                	addi	a7,a7,-4
1c00745c:	417c0533          	sub	a0,s8,s7
1c007460:	4785                	li	a5,1
1c007462:	c23e                	sw	a5,4(sp)
1c007464:	c05a                	sw	s6,0(sp)
1c007466:	98d6                	add	a7,a7,s5
1c007468:	4866                	lw	a6,88(sp)
1c00746a:	47d6                	lw	a5,84(sp)
1c00746c:	4746                	lw	a4,80(sp)
1c00746e:	86a6                	mv	a3,s1
1c007470:	8622                	mv	a2,s0
1c007472:	85ca                	mv	a1,s2
1c007474:	9552                	add	a0,a0,s4
1c007476:	3d2d                	jal	1c0072b0 <KerConv2x3from3x3Stride1_V_SQ8>
1c007478:	b74d                	j	1c00741a <KerConv3x3BorderStride1_SQ8+0x4c>
1c00747a:	00299813          	slli	a6,s3,0x2
1c00747e:	c002                	sw	zero,0(sp)
1c007480:	88da                	mv	a7,s6
1c007482:	9856                	add	a6,a6,s5
1c007484:	87e2                	mv	a5,s8
1c007486:	874e                	mv	a4,s3
1c007488:	86a6                	mv	a3,s1
1c00748a:	865e                	mv	a2,s7
1c00748c:	85ca                	mv	a1,s2
1c00748e:	8552                	mv	a0,s4
1c007490:	35e5                	jal	1c007378 <KerConv3x2from3x3Stride1_H_SQ8>
1c007492:	b771                	j	1c00741e <KerConv3x3BorderStride1_SQ8+0x50>
1c007494:	884e                	mv	a6,s3
1c007496:	47e6                	lw	a5,88(sp)
1c007498:	42f48833          	p.mac	a6,s1,a5
1c00749c:	080a                	slli	a6,a6,0x2
1c00749e:	40878433          	sub	s0,a5,s0
1c0074a2:	4785                	li	a5,1
1c0074a4:	c03e                	sw	a5,0(sp)
1c0074a6:	88da                	mv	a7,s6
1c0074a8:	9856                	add	a6,a6,s5
1c0074aa:	87e2                	mv	a5,s8
1c0074ac:	874e                	mv	a4,s3
1c0074ae:	86a6                	mv	a3,s1
1c0074b0:	865e                	mv	a2,s7
1c0074b2:	85ca                	mv	a1,s2
1c0074b4:	8552                	mv	a0,s4
1c0074b6:	43240533          	p.mac	a0,s0,s2
1c0074ba:	3d7d                	jal	1c007378 <KerConv3x2from3x3Stride1_H_SQ8>
1c0074bc:	b79d                	j	1c007422 <KerConv3x3BorderStride1_SQ8+0x54>

1c0074be <KerConv3x3Stride2_Body_SQ8>:
1c0074be:	1101                	addi	sp,sp,-32
1c0074c0:	ce22                	sw	s0,28(sp)
1c0074c2:	cc26                	sw	s1,24(sp)
1c0074c4:	ca4a                	sw	s2,20(sp)
1c0074c6:	c84e                	sw	s3,16(sp)
1c0074c8:	c652                	sw	s4,12(sp)
1c0074ca:	c456                	sw	s5,8(sp)
1c0074cc:	5412                	lw	s0,36(sp)
1c0074ce:	54a2                	lw	s1,40(sp)
1c0074d0:	5332                	lw	t1,44(sp)
1c0074d2:	78037757          	pv.extract.b	a4,t1,0
1c0074d6:	78137357          	pv.extract.b	t1,t1,2
1c0074da:	100352b3          	p.exthz	t0,t1
1c0074de:	8342                	mv	t1,a6
1c0074e0:	42878333          	p.mac	t1,a5,s0
1c0074e4:	030a                	slli	t1,t1,0x2
1c0074e6:	959a                	add	a1,a1,t1
1c0074e8:	00062303          	lw	t1,0(a2)
1c0074ec:	00362e03          	lw	t3,3(a2)
1c0074f0:	00662e83          	lw	t4,6(a2)
1c0074f4:	09187763          	bleu	a7,a6,1c007582 <KerConv3x3Stride2_Body_SQ8+0xc4>
1c0074f8:	10075f33          	p.exthz	t5,a4
1c0074fc:	b2107357          	pv.insert.b	t1,zero,3
1c007500:	b2107e57          	pv.insert.b	t3,zero,3
1c007504:	b2107ed7          	pv.insert.b	t4,zero,3
1c007508:	00141713          	slli	a4,s0,0x1
1c00750c:	40570733          	sub	a4,a4,t0
1c007510:	02d702b3          	mul	t0,a4,a3
1c007514:	41e28733          	sub	a4,t0,t5
1c007518:	00279a13          	slli	s4,a5,0x2
1c00751c:	00181393          	slli	t2,a6,0x1
1c007520:	93ba                	add	t2,t2,a4
1c007522:	93aa                	add	t2,t2,a0
1c007524:	00189293          	slli	t0,a7,0x1
1c007528:	92aa                	add	t0,t0,a0
1c00752a:	92ba                	add	t0,t0,a4
1c00752c:	89b6                	mv	s3,a3
1c00752e:	00169a93          	slli	s5,a3,0x1
1c007532:	8926                	mv	s2,s1
1c007534:	407282b3          	sub	t0,t0,t2
1c007538:	12f9                	addi	t0,t0,-2
1c00753a:	0012d293          	srli	t0,t0,0x1
1c00753e:	0285                	addi	t0,t0,1
1c007540:	0202c07b          	lp.setup	x0,t0,1c007580 <KerConv3x3Stride2_Body_SQ8+0xc2>
1c007544:	889e                	mv	a7,t2
1c007546:	2138f68b          	p.lw	a3,s3(a7!)
1c00754a:	8fc6                	mv	t6,a7
1c00754c:	8f22                	mv	t5,s0
1c00754e:	02947863          	bleu	s1,s0,1c00757e <KerConv3x3Stride2_Body_SQ8+0xc0>
1c007552:	98ce                	add	a7,a7,s3
1c007554:	882e                	mv	a6,a1
1c007556:	40890533          	sub	a0,s2,s0
1c00755a:	011540fb          	lp.setup	x1,a0,1c00757c <KerConv3x3Stride2_Body_SQ8+0xbe>
1c00755e:	00082783          	lw	a5,0(a6)
1c007562:	215ff60b          	p.lw	a2,s5(t6!)
1c007566:	2158f70b          	p.lw	a4,s5(a7!)
1c00756a:	b86697d7          	pv.sdotsp.b	a5,a3,t1
1c00756e:	b9c617d7          	pv.sdotsp.b	a5,a2,t3
1c007572:	b9d717d7          	pv.sdotsp.b	a5,a4,t4
1c007576:	00f86a2b          	p.sw	a5,s4(a6!)
1c00757a:	0f05                	addi	t5,t5,1
1c00757c:	86ba                	mv	a3,a4
1c00757e:	0591                	addi	a1,a1,4
1c007580:	0389                	addi	t2,t2,2
1c007582:	4472                	lw	s0,28(sp)
1c007584:	44e2                	lw	s1,24(sp)
1c007586:	4952                	lw	s2,20(sp)
1c007588:	49c2                	lw	s3,16(sp)
1c00758a:	4a32                	lw	s4,12(sp)
1c00758c:	4aa2                	lw	s5,8(sp)
1c00758e:	6105                	addi	sp,sp,32
1c007590:	8082                	ret

1c007592 <KerConv2x3from3x3Stride2_V_SQ8>:
1c007592:	1101                	addi	sp,sp,-32
1c007594:	ce22                	sw	s0,28(sp)
1c007596:	cc26                	sw	s1,24(sp)
1c007598:	ca4a                	sw	s2,20(sp)
1c00759a:	c84e                	sw	s3,16(sp)
1c00759c:	c652                	sw	s4,12(sp)
1c00759e:	5302                	lw	t1,32(sp)
1c0075a0:	5e12                	lw	t3,36(sp)
1c0075a2:	0a0e0663          	beqz	t3,1c00764e <KerConv2x3from3x3Stride2_V_SQ8+0xbc>
1c0075a6:	00035f83          	lhu	t6,0(t1)
1c0075aa:	00335f03          	lhu	t5,3(t1)
1c0075ae:	00635283          	lhu	t0,6(t1)
1c0075b2:	0a17a563          	p.beqimm	a5,1,1c00765c <KerConv2x3from3x3Stride2_V_SQ8+0xca>
1c0075b6:	00179313          	slli	t1,a5,0x1
1c0075ba:	40c30633          	sub	a2,t1,a2
1c0075be:	02d78333          	mul	t1,a5,a3
1c0075c2:	030a                	slli	t1,t1,0x2
1c0075c4:	989a                	add	a7,a7,t1
1c0075c6:	42b60533          	p.mac	a0,a2,a1
1c0075ca:	20b57e0b          	p.lw	t3,a1(a0!)
1c0075ce:	893e                	mv	s2,a5
1c0075d0:	0507fb63          	bleu	a6,a5,1c007626 <KerConv2x3from3x3Stride2_V_SQ8+0x94>
1c0075d4:	00269993          	slli	s3,a3,0x2
1c0075d8:	00159a13          	slli	s4,a1,0x1
1c0075dc:	00b504b3          	add	s1,a0,a1
1c0075e0:	86c6                	mv	a3,a7
1c0075e2:	842a                	mv	s0,a0
1c0075e4:	40f803b3          	sub	t2,a6,a5
1c0075e8:	0103c0fb          	lp.setup	x1,t2,1c007608 <KerConv2x3from3x3Stride2_V_SQ8+0x76>
1c0075ec:	4290                	lw	a2,0(a3)
1c0075ee:	21447e8b          	p.lw	t4,s4(s0!)
1c0075f2:	2144f30b          	p.lw	t1,s4(s1!)
1c0075f6:	b9fe1657          	pv.sdotsp.b	a2,t3,t6
1c0075fa:	b9ee9657          	pv.sdotsp.b	a2,t4,t5
1c0075fe:	b8531657          	pv.sdotsp.b	a2,t1,t0
1c007602:	00c6e9ab          	p.sw	a2,s3(a3!)
1c007606:	0785                	addi	a5,a5,1
1c007608:	8e1a                	mv	t3,t1
1c00760a:	fff80793          	addi	a5,a6,-1
1c00760e:	412787b3          	sub	a5,a5,s2
1c007612:	86ae                	mv	a3,a1
1c007614:	42b786b3          	p.mac	a3,a5,a1
1c007618:	00169793          	slli	a5,a3,0x1
1c00761c:	953e                	add	a0,a0,a5
1c00761e:	41280933          	sub	s2,a6,s2
1c007622:	433908b3          	p.mac	a7,s2,s3
1c007626:	01070d63          	beq	a4,a6,1c007640 <KerConv2x3from3x3Stride2_V_SQ8+0xae>
1c00762a:	0008a783          	lw	a5,0(a7)
1c00762e:	4118                	lw	a4,0(a0)
1c007630:	8d0d                	sub	a0,a0,a1
1c007632:	4114                	lw	a3,0(a0)
1c007634:	b9f697d7          	pv.sdotsp.b	a5,a3,t6
1c007638:	b9e717d7          	pv.sdotsp.b	a5,a4,t5
1c00763c:	00f8a023          	sw	a5,0(a7)
1c007640:	4472                	lw	s0,28(sp)
1c007642:	44e2                	lw	s1,24(sp)
1c007644:	4952                	lw	s2,20(sp)
1c007646:	49c2                	lw	s3,16(sp)
1c007648:	4a32                	lw	s4,12(sp)
1c00764a:	6105                	addi	sp,sp,32
1c00764c:	8082                	ret
1c00764e:	00135f83          	lhu	t6,1(t1)
1c007652:	00435f03          	lhu	t5,4(t1)
1c007656:	00735283          	lhu	t0,7(t1)
1c00765a:	bfa1                	j	1c0075b2 <KerConv2x3from3x3Stride2_V_SQ8+0x20>
1c00765c:	00007e57          	pv.add.sci.b	t3,zero,0
1c007660:	4781                	li	a5,0
1c007662:	b7b5                	j	1c0075ce <KerConv2x3from3x3Stride2_V_SQ8+0x3c>

1c007664 <KerConv3x2from3x3Stride2_H_SQ8>:
1c007664:	4302                	lw	t1,0(sp)
1c007666:	00171693          	slli	a3,a4,0x1
1c00766a:	40c68633          	sub	a2,a3,a2
1c00766e:	9532                	add	a0,a0,a2
1c007670:	02030f63          	beqz	t1,1c0076ae <KerConv3x2from3x3Stride2_H_SQ8+0x4a>
1c007674:	0008a303          	lw	t1,0(a7)
1c007678:	b2107357          	pv.insert.b	t1,zero,3
1c00767c:	0038ae03          	lw	t3,3(a7)
1c007680:	b2107e57          	pv.insert.b	t3,zero,3
1c007684:	02f77463          	bleu	a5,a4,1c0076ac <KerConv3x2from3x3Stride2_H_SQ8+0x48>
1c007688:	95aa                	add	a1,a1,a0
1c00768a:	40e78eb3          	sub	t4,a5,a4
1c00768e:	00eec0fb          	lp.setup	x1,t4,1c0076aa <KerConv3x2from3x3Stride2_H_SQ8+0x46>
1c007692:	00082783          	lw	a5,0(a6)
1c007696:	0025288b          	p.lw	a7,2(a0!)
1c00769a:	0025a68b          	p.lw	a3,2(a1!)
1c00769e:	b86897d7          	pv.sdotsp.b	a5,a7,t1
1c0076a2:	b9c697d7          	pv.sdotsp.b	a5,a3,t3
1c0076a6:	00f8222b          	p.sw	a5,4(a6!)
1c0076aa:	0705                	addi	a4,a4,1
1c0076ac:	8082                	ret
1c0076ae:	0038a303          	lw	t1,3(a7)
1c0076b2:	b2107357          	pv.insert.b	t1,zero,3
1c0076b6:	0068ae03          	lw	t3,6(a7)
1c0076ba:	b2107e57          	pv.insert.b	t3,zero,3
1c0076be:	b7d9                	j	1c007684 <KerConv3x2from3x3Stride2_H_SQ8+0x20>

1c0076c0 <KerConv3x3BorderStride2_SQ8>:
1c0076c0:	715d                	addi	sp,sp,-80
1c0076c2:	c686                	sw	ra,76(sp)
1c0076c4:	c4a2                	sw	s0,72(sp)
1c0076c6:	c2a6                	sw	s1,68(sp)
1c0076c8:	c0ca                	sw	s2,64(sp)
1c0076ca:	de4e                	sw	s3,60(sp)
1c0076cc:	dc52                	sw	s4,56(sp)
1c0076ce:	da56                	sw	s5,52(sp)
1c0076d0:	d85a                	sw	s6,48(sp)
1c0076d2:	d65e                	sw	s7,44(sp)
1c0076d4:	d462                	sw	s8,40(sp)
1c0076d6:	d266                	sw	s9,36(sp)
1c0076d8:	d06a                	sw	s10,32(sp)
1c0076da:	ce6e                	sw	s11,28(sp)
1c0076dc:	8a2a                	mv	s4,a0
1c0076de:	8aae                	mv	s5,a1
1c0076e0:	8b32                	mv	s6,a2
1c0076e2:	8936                	mv	s2,a3
1c0076e4:	84be                	mv	s1,a5
1c0076e6:	89c2                	mv	s3,a6
1c0076e8:	8c46                	mv	s8,a7
1c0076ea:	47f6                	lw	a5,92(sp)
1c0076ec:	5406                	lw	s0,96(sp)
1c0076ee:	78047bd7          	pv.extract.b	s7,s0,0
1c0076f2:	78147457          	pv.extract.b	s0,s0,2
1c0076f6:	7a07fdd7          	pv.extract.b	s11,a5,1
1c0076fa:	7817fd57          	pv.extract.b	s10,a5,2
1c0076fe:	7a17fcd7          	pv.extract.b	s9,a5,3
1c007702:	7807f7d7          	pv.extract.b	a5,a5,0
1c007706:	e795                	bnez	a5,1c007732 <KerConv3x3BorderStride2_SQ8+0x72>
1c007708:	040d9063          	bnez	s11,1c007748 <KerConv3x3BorderStride2_SQ8+0x88>
1c00770c:	060d1263          	bnez	s10,1c007770 <KerConv3x3BorderStride2_SQ8+0xb0>
1c007710:	060c9d63          	bnez	s9,1c00778a <KerConv3x3BorderStride2_SQ8+0xca>
1c007714:	40b6                	lw	ra,76(sp)
1c007716:	4426                	lw	s0,72(sp)
1c007718:	4496                	lw	s1,68(sp)
1c00771a:	4906                	lw	s2,64(sp)
1c00771c:	59f2                	lw	s3,60(sp)
1c00771e:	5a62                	lw	s4,56(sp)
1c007720:	5ad2                	lw	s5,52(sp)
1c007722:	5b42                	lw	s6,48(sp)
1c007724:	5bb2                	lw	s7,44(sp)
1c007726:	5c22                	lw	s8,40(sp)
1c007728:	5c92                	lw	s9,36(sp)
1c00772a:	5d02                	lw	s10,32(sp)
1c00772c:	4df2                	lw	s11,28(sp)
1c00772e:	6161                	addi	sp,sp,80
1c007730:	8082                	ret
1c007732:	c202                	sw	zero,4(sp)
1c007734:	c032                	sw	a2,0(sp)
1c007736:	88ae                	mv	a7,a1
1c007738:	4866                	lw	a6,88(sp)
1c00773a:	47d6                	lw	a5,84(sp)
1c00773c:	4746                	lw	a4,80(sp)
1c00773e:	86a6                	mv	a3,s1
1c007740:	8622                	mv	a2,s0
1c007742:	85ca                	mv	a1,s2
1c007744:	35b9                	jal	1c007592 <KerConv2x3from3x3Stride2_V_SQ8>
1c007746:	b7c9                	j	1c007708 <KerConv3x3BorderStride2_SQ8+0x48>
1c007748:	00249893          	slli	a7,s1,0x2
1c00774c:	18f1                	addi	a7,a7,-4
1c00774e:	001c1513          	slli	a0,s8,0x1
1c007752:	41750533          	sub	a0,a0,s7
1c007756:	4785                	li	a5,1
1c007758:	c23e                	sw	a5,4(sp)
1c00775a:	c05a                	sw	s6,0(sp)
1c00775c:	98d6                	add	a7,a7,s5
1c00775e:	4866                	lw	a6,88(sp)
1c007760:	47d6                	lw	a5,84(sp)
1c007762:	4746                	lw	a4,80(sp)
1c007764:	86a6                	mv	a3,s1
1c007766:	8622                	mv	a2,s0
1c007768:	85ca                	mv	a1,s2
1c00776a:	9552                	add	a0,a0,s4
1c00776c:	351d                	jal	1c007592 <KerConv2x3from3x3Stride2_V_SQ8>
1c00776e:	bf79                	j	1c00770c <KerConv3x3BorderStride2_SQ8+0x4c>
1c007770:	00299813          	slli	a6,s3,0x2
1c007774:	c002                	sw	zero,0(sp)
1c007776:	88da                	mv	a7,s6
1c007778:	9856                	add	a6,a6,s5
1c00777a:	87e2                	mv	a5,s8
1c00777c:	874e                	mv	a4,s3
1c00777e:	86a6                	mv	a3,s1
1c007780:	865e                	mv	a2,s7
1c007782:	85ca                	mv	a1,s2
1c007784:	8552                	mv	a0,s4
1c007786:	3df9                	jal	1c007664 <KerConv3x2from3x3Stride2_H_SQ8>
1c007788:	b761                	j	1c007710 <KerConv3x3BorderStride2_SQ8+0x50>
1c00778a:	884e                	mv	a6,s3
1c00778c:	4766                	lw	a4,88(sp)
1c00778e:	42e48833          	p.mac	a6,s1,a4
1c007792:	080a                	slli	a6,a6,0x2
1c007794:	00171793          	slli	a5,a4,0x1
1c007798:	40878433          	sub	s0,a5,s0
1c00779c:	4785                	li	a5,1
1c00779e:	c03e                	sw	a5,0(sp)
1c0077a0:	88da                	mv	a7,s6
1c0077a2:	9856                	add	a6,a6,s5
1c0077a4:	87e2                	mv	a5,s8
1c0077a6:	874e                	mv	a4,s3
1c0077a8:	86a6                	mv	a3,s1
1c0077aa:	865e                	mv	a2,s7
1c0077ac:	85ca                	mv	a1,s2
1c0077ae:	8552                	mv	a0,s4
1c0077b0:	43240533          	p.mac	a0,s0,s2
1c0077b4:	3d45                	jal	1c007664 <KerConv3x2from3x3Stride2_H_SQ8>
1c0077b6:	bfb9                	j	1c007714 <KerConv3x3BorderStride2_SQ8+0x54>

1c0077b8 <KerParConv3x3Stride1_SQ8>:

void KerParConv3x3Stride1_SQ8(KerConv_SQ8_T *Arg)

{
1c0077b8:	7171                	addi	sp,sp,-176
1c0077ba:	d706                	sw	ra,172(sp)
1c0077bc:	d522                	sw	s0,168(sp)
1c0077be:	d326                	sw	s1,164(sp)
1c0077c0:	d14a                	sw	s2,160(sp)
1c0077c2:	cf4e                	sw	s3,156(sp)
1c0077c4:	cd52                	sw	s4,152(sp)
1c0077c6:	cb56                	sw	s5,148(sp)
1c0077c8:	c95a                	sw	s6,144(sp)
1c0077ca:	c75e                	sw	s7,140(sp)
1c0077cc:	c562                	sw	s8,136(sp)
1c0077ce:	c366                	sw	s9,132(sp)
1c0077d0:	c16a                	sw	s10,128(sp)
1c0077d2:	deee                	sw	s11,124(sp)
1c0077d4:	84aa                	mv	s1,a0
	unsigned int FS=3, S=1;
	signed char * __restrict__ In = Arg->In;
1c0077d6:	4110                	lw	a2,0(a0)
1c0077d8:	cab2                	sw	a2,84(sp)
	unsigned int W = Arg->W;
1c0077da:	00455683          	lhu	a3,4(a0)
1c0077de:	d636                	sw	a3,44(sp)
	unsigned int H = Arg->H;
1c0077e0:	00855703          	lhu	a4,8(a0)
1c0077e4:	d83a                	sw	a4,48(sp)
	int TotalInFeatures = Arg->TotalInFeatures;
1c0077e6:	01055783          	lhu	a5,16(a0)
1c0077ea:	cebe                	sw	a5,92(sp)
	unsigned int OutFeatures = Arg->OutFeatures;
1c0077ec:	00e55703          	lhu	a4,14(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c0077f0:	4950                	lw	a2,20(a0)
1c0077f2:	d2b2                	sw	a2,100(sp)
	int * __restrict__ Out = Arg->Out;
1c0077f4:	4d54                	lw	a3,28(a0)
1c0077f6:	d6b6                	sw	a3,108(sp)
	unsigned int CoreId = gap_coreid();
1c0077f8:	f1402473          	csrr	s0,mhartid
1c0077fc:	c8041433          	p.extractu	s0,s0,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c007800:	f83737b3          	p.bclr	a5,a4,28,3
1c007804:	00f037b3          	snez	a5,a5
1c007808:	00375693          	srli	a3,a4,0x3
1c00780c:	97b6                	add	a5,a5,a3
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c00780e:	02f40433          	mul	s0,s0,a5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c007812:	97a2                	add	a5,a5,s0
1c007814:	04e7c7b3          	p.min	a5,a5,a4
1c007818:	d4be                	sw	a5,104(sp)
	v4s PadIn = Arg->Pad;
1c00781a:	02052903          	lw	s2,32(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00781e:	78097657          	pv.extract.b	a2,s2,0
1c007822:	00655503          	lhu	a0,6(a0)
1c007826:	ffe50793          	addi	a5,a0,-2
1c00782a:	97b2                	add	a5,a5,a2
1c00782c:	7a097757          	pv.extract.b	a4,s2,1
1c007830:	973e                	add	a4,a4,a5
1c007832:	d43a                	sw	a4,40(sp)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c007834:	04c74733          	p.min	a4,a4,a2
1c007838:	de3a                	sw	a4,60(sp)
1c00783a:	4685                	li	a3,1
1c00783c:	458d                	li	a1,3
1c00783e:	d9cff0ef          	jal	ra,1c006dda <LastDefinedOutput>
1c007842:	57f2                	lw	a5,60(sp)
1c007844:	04a7eab3          	p.max	s5,a5,a0
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c007848:	78197657          	pv.extract.b	a2,s2,2
1c00784c:	00a4d503          	lhu	a0,10(s1)
1c007850:	ffe50993          	addi	s3,a0,-2
1c007854:	99b2                	add	s3,s3,a2
1c007856:	7a1977d7          	pv.extract.b	a5,s2,3
1c00785a:	99be                	add	s3,s3,a5
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00785c:	04c9ca33          	p.min	s4,s3,a2
1c007860:	4685                	li	a3,1
1c007862:	458d                	li	a1,3
1c007864:	d76ff0ef          	jal	ra,1c006dda <LastDefinedOutput>
1c007868:	04aa6b33          	p.max	s6,s4,a0

	unsigned int InFeatures = Arg->InFeatures;
1c00786c:	00c4d483          	lhu	s1,12(s1)
1c007870:	c2a6                	sw	s1,68(sp)
	unsigned int Iter = Max(0, Last-First);
1c007872:	5626                	lw	a2,104(sp)
1c007874:	408607b3          	sub	a5,a2,s0
1c007878:	0407e7b3          	p.max	a5,a5,zero
1c00787c:	d0be                	sw	a5,96(sp)
	for (unsigned int i=0; i<Iter/2; i++) {
1c00787e:	0017d693          	srli	a3,a5,0x1
1c007882:	c4b6                	sw	a3,72(sp)
1c007884:	cec5                	beqz	a3,1c00793c <KerParConv3x3Stride1_SQ8+0x184>
		unsigned int of = First + 2*i;
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c007886:	5732                	lw	a4,44(sp)
1c007888:	57c2                	lw	a5,48(sp)
1c00788a:	02f70d33          	mul	s10,a4,a5
			int *out = Out+Wo*Ho*(of);
1c00788e:	5622                	lw	a2,40(sp)
1c007890:	033607b3          	mul	a5,a2,s3
1c007894:	00279713          	slli	a4,a5,0x2
			KerConv3x3Stride1_Body_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c007898:	4676                	lw	a2,92(sp)
1c00789a:	00361693          	slli	a3,a2,0x3
1c00789e:	96b2                	add	a3,a3,a2
1c0078a0:	dc36                	sw	a3,56(sp)
1c0078a2:	0686                	slli	a3,a3,0x1
1c0078a4:	c6b6                	sw	a3,76(sp)
1c0078a6:	5d96                	lw	s11,100(sp)
1c0078a8:	5662                	lw	a2,56(sp)
1c0078aa:	42860db3          	p.mac	s11,a2,s0
1c0078ae:	078e                	slli	a5,a5,0x3
1c0078b0:	c8be                	sw	a5,80(sp)
1c0078b2:	56b6                	lw	a3,108(sp)
1c0078b4:	428706b3          	p.mac	a3,a4,s0
1c0078b8:	c0b6                	sw	a3,64(sp)
1c0078ba:	00349793          	slli	a5,s1,0x3
1c0078be:	97a6                	add	a5,a5,s1
1c0078c0:	ccbe                	sw	a5,88(sp)
	for (unsigned int i=0; i<Iter/2; i++) {
1c0078c2:	4b81                	li	s7,0
			if ((int)PadIn) KerConv3x3BorderStride1_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c0078c4:	8cca                	mv	s9,s2
1c0078c6:	a08d                	j	1c007928 <KerParConv3x3Stride1_SQ8+0x170>
1c0078c8:	94ea                	add	s1,s1,s10
1c0078ca:	0425                	addi	s0,s0,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c0078cc:	05840463          	beq	s0,s8,1c007914 <KerParConv3x3Stride1_SQ8+0x15c>
			KerConv3x3Stride1_Body_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c0078d0:	c84a                	sw	s2,16(sp)
1c0078d2:	c65a                	sw	s6,12(sp)
1c0078d4:	c452                	sw	s4,8(sp)
1c0078d6:	c24e                	sw	s3,4(sp)
1c0078d8:	c056                	sw	s5,0(sp)
1c0078da:	58f2                	lw	a7,60(sp)
1c0078dc:	5822                	lw	a6,40(sp)
1c0078de:	57c2                	lw	a5,48(sp)
1c0078e0:	5732                	lw	a4,44(sp)
1c0078e2:	56e2                	lw	a3,56(sp)
1c0078e4:	8622                	mv	a2,s0
1c0078e6:	55d2                	lw	a1,52(sp)
1c0078e8:	8526                	mv	a0,s1
1c0078ea:	d0aff0ef          	jal	ra,1c006df4 <KerConv3x3Stride1_Body_2Out_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride1_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c0078ee:	fc0c8de3          	beqz	s9,1c0078c8 <KerParConv3x3Stride1_SQ8+0x110>
1c0078f2:	ca4a                	sw	s2,20(sp)
1c0078f4:	c84a                	sw	s2,16(sp)
1c0078f6:	c65a                	sw	s6,12(sp)
1c0078f8:	c452                	sw	s4,8(sp)
1c0078fa:	c24e                	sw	s3,4(sp)
1c0078fc:	c056                	sw	s5,0(sp)
1c0078fe:	58f2                	lw	a7,60(sp)
1c007900:	5822                	lw	a6,40(sp)
1c007902:	57c2                	lw	a5,48(sp)
1c007904:	5732                	lw	a4,44(sp)
1c007906:	56e2                	lw	a3,56(sp)
1c007908:	8622                	mv	a2,s0
1c00790a:	55d2                	lw	a1,52(sp)
1c00790c:	8526                	mv	a0,s1
1c00790e:	fd8ff0ef          	jal	ra,1c0070e6 <KerConv3x3BorderStride1_2Out_SQ8>
1c007912:	bf5d                	j	1c0078c8 <KerParConv3x3Stride1_SQ8+0x110>
	for (unsigned int i=0; i<Iter/2; i++) {
1c007914:	0b85                	addi	s7,s7,1
1c007916:	46b6                	lw	a3,76(sp)
1c007918:	9db6                	add	s11,s11,a3
1c00791a:	4706                	lw	a4,64(sp)
1c00791c:	47c6                	lw	a5,80(sp)
1c00791e:	973e                	add	a4,a4,a5
1c007920:	c0ba                	sw	a4,64(sp)
1c007922:	4626                	lw	a2,72(sp)
1c007924:	01760c63          	beq	a2,s7,1c00793c <KerParConv3x3Stride1_SQ8+0x184>
		for (unsigned int If=0; If<InFeatures; If++) {
1c007928:	4716                	lw	a4,68(sp)
1c00792a:	d76d                	beqz	a4,1c007914 <KerParConv3x3Stride1_SQ8+0x15c>
			int *out = Out+Wo*Ho*(of);
1c00792c:	4786                	lw	a5,64(sp)
1c00792e:	da3e                	sw	a5,52(sp)
1c007930:	44d6                	lw	s1,84(sp)
1c007932:	4666                	lw	a2,88(sp)
1c007934:	00cd8c33          	add	s8,s11,a2
1c007938:	846e                	mv	s0,s11
1c00793a:	bf59                	j	1c0078d0 <KerParConv3x3Stride1_SQ8+0x118>
		}
	}
	if (Iter&0x1) {
1c00793c:	5686                	lw	a3,96(sp)
1c00793e:	fc16b7b3          	p.bclr	a5,a3,30,1
1c007942:	cbc1                	beqz	a5,1c0079d2 <KerParConv3x3Stride1_SQ8+0x21a>
		unsigned int of = Last-1;
1c007944:	57a6                	lw	a5,104(sp)
1c007946:	fff78713          	addi	a4,a5,-1
		for (unsigned int If=0; If<InFeatures; If++) {
1c00794a:	4616                	lw	a2,68(sp)
1c00794c:	c259                	beqz	a2,1c0079d2 <KerParConv3x3Stride1_SQ8+0x21a>
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c00794e:	56b2                	lw	a3,44(sp)
1c007950:	57c2                	lw	a5,48(sp)
1c007952:	02f68d33          	mul	s10,a3,a5
1c007956:	4676                	lw	a2,92(sp)
1c007958:	02e607b3          	mul	a5,a2,a4
			int *out = Out+Wo*Ho*(of);
1c00795c:	5622                	lw	a2,40(sp)
1c00795e:	033606b3          	mul	a3,a2,s3
1c007962:	068a                	slli	a3,a3,0x2
1c007964:	5bb6                	lw	s7,108(sp)
1c007966:	42e68bb3          	p.mac	s7,a3,a4
1c00796a:	4456                	lw	s0,84(sp)
1c00796c:	00379493          	slli	s1,a5,0x3
1c007970:	94be                	add	s1,s1,a5
1c007972:	5696                	lw	a3,100(sp)
1c007974:	94b6                	add	s1,s1,a3
1c007976:	4716                	lw	a4,68(sp)
1c007978:	97ba                	add	a5,a5,a4
1c00797a:	00379c13          	slli	s8,a5,0x3
1c00797e:	97e2                	add	a5,a5,s8
1c007980:	00f68c33          	add	s8,a3,a5
			KerConv3x3Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv3x3BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c007984:	8cca                	mv	s9,s2
1c007986:	5df2                	lw	s11,60(sp)
1c007988:	a029                	j	1c007992 <KerParConv3x3Stride1_SQ8+0x1da>
1c00798a:	946a                	add	s0,s0,s10
1c00798c:	04a5                	addi	s1,s1,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c00798e:	05848263          	beq	s1,s8,1c0079d2 <KerParConv3x3Stride1_SQ8+0x21a>
			KerConv3x3Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c007992:	c64a                	sw	s2,12(sp)
1c007994:	c45a                	sw	s6,8(sp)
1c007996:	c252                	sw	s4,4(sp)
1c007998:	c04e                	sw	s3,0(sp)
1c00799a:	88d6                	mv	a7,s5
1c00799c:	886e                	mv	a6,s11
1c00799e:	57a2                	lw	a5,40(sp)
1c0079a0:	5742                	lw	a4,48(sp)
1c0079a2:	56b2                	lw	a3,44(sp)
1c0079a4:	8626                	mv	a2,s1
1c0079a6:	85de                	mv	a1,s7
1c0079a8:	8522                	mv	a0,s0
1c0079aa:	83bff0ef          	jal	ra,1c0071e4 <KerConv3x3Stride1_Body_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c0079ae:	fc0c8ee3          	beqz	s9,1c00798a <KerParConv3x3Stride1_SQ8+0x1d2>
1c0079b2:	c84a                	sw	s2,16(sp)
1c0079b4:	c64a                	sw	s2,12(sp)
1c0079b6:	c45a                	sw	s6,8(sp)
1c0079b8:	c252                	sw	s4,4(sp)
1c0079ba:	c04e                	sw	s3,0(sp)
1c0079bc:	88d6                	mv	a7,s5
1c0079be:	886e                	mv	a6,s11
1c0079c0:	57a2                	lw	a5,40(sp)
1c0079c2:	5742                	lw	a4,48(sp)
1c0079c4:	56b2                	lw	a3,44(sp)
1c0079c6:	8626                	mv	a2,s1
1c0079c8:	85de                	mv	a1,s7
1c0079ca:	8522                	mv	a0,s0
1c0079cc:	a03ff0ef          	jal	ra,1c0073ce <KerConv3x3BorderStride1_SQ8>
1c0079d0:	bf6d                	j	1c00798a <KerParConv3x3Stride1_SQ8+0x1d2>
1c0079d2:	002047b7          	lui	a5,0x204
1c0079d6:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0079da:	01c7e703          	p.elw	a4,28(a5)
		}
	}
	gap_waitbarrier(0);
}
1c0079de:	50ba                	lw	ra,172(sp)
1c0079e0:	542a                	lw	s0,168(sp)
1c0079e2:	549a                	lw	s1,164(sp)
1c0079e4:	590a                	lw	s2,160(sp)
1c0079e6:	49fa                	lw	s3,156(sp)
1c0079e8:	4a6a                	lw	s4,152(sp)
1c0079ea:	4ada                	lw	s5,148(sp)
1c0079ec:	4b4a                	lw	s6,144(sp)
1c0079ee:	4bba                	lw	s7,140(sp)
1c0079f0:	4c2a                	lw	s8,136(sp)
1c0079f2:	4c9a                	lw	s9,132(sp)
1c0079f4:	4d0a                	lw	s10,128(sp)
1c0079f6:	5df6                	lw	s11,124(sp)
1c0079f8:	614d                	addi	sp,sp,176
1c0079fa:	8082                	ret

1c0079fc <KerParConv3x3Stride2_SQ8>:

void KerParConv3x3Stride2_SQ8(KerConv_SQ8_T *Arg)

{
1c0079fc:	7175                	addi	sp,sp,-144
1c0079fe:	c706                	sw	ra,140(sp)
1c007a00:	c522                	sw	s0,136(sp)
1c007a02:	c326                	sw	s1,132(sp)
1c007a04:	c14a                	sw	s2,128(sp)
1c007a06:	dece                	sw	s3,124(sp)
1c007a08:	dcd2                	sw	s4,120(sp)
1c007a0a:	dad6                	sw	s5,116(sp)
1c007a0c:	d8da                	sw	s6,112(sp)
1c007a0e:	d6de                	sw	s7,108(sp)
1c007a10:	d4e2                	sw	s8,104(sp)
1c007a12:	d2e6                	sw	s9,100(sp)
1c007a14:	d0ea                	sw	s10,96(sp)
1c007a16:	ceee                	sw	s11,92(sp)
1c007a18:	8aaa                	mv	s5,a0
	unsigned int FS=3, S=2;
	signed char * __restrict__ In = Arg->In;
1c007a1a:	4118                	lw	a4,0(a0)
1c007a1c:	c4ba                	sw	a4,72(sp)
	unsigned int W = Arg->W;
1c007a1e:	00455783          	lhu	a5,4(a0)
1c007a22:	d63e                	sw	a5,44(sp)
	unsigned int H = Arg->H;
1c007a24:	00855703          	lhu	a4,8(a0)
1c007a28:	d83a                	sw	a4,48(sp)
	int TotalInFeatures = Arg->TotalInFeatures;
1c007a2a:	01055403          	lhu	s0,16(a0)
	unsigned int OutFeatures = Arg->OutFeatures;
1c007a2e:	00e55703          	lhu	a4,14(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c007a32:	01452d83          	lw	s11,20(a0)
	int * __restrict__ Out = Arg->Out;
1c007a36:	4d44                	lw	s1,28(a0)
	unsigned int CoreId = gap_coreid();
1c007a38:	f1402d73          	csrr	s10,mhartid
1c007a3c:	c80d1d33          	p.extractu	s10,s10,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c007a40:	f83737b3          	p.bclr	a5,a4,28,3
1c007a44:	00f037b3          	snez	a5,a5
1c007a48:	00375693          	srli	a3,a4,0x3
1c007a4c:	97b6                	add	a5,a5,a3
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c007a4e:	02fd0d33          	mul	s10,s10,a5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c007a52:	97ea                	add	a5,a5,s10
1c007a54:	04e7c7b3          	p.min	a5,a5,a4
1c007a58:	de3e                	sw	a5,60(sp)
	v4s PadIn = Arg->Pad;
1c007a5a:	02052903          	lw	s2,32(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c007a5e:	78097657          	pv.extract.b	a2,s2,0
1c007a62:	00655503          	lhu	a0,6(a0)
1c007a66:	ffd50793          	addi	a5,a0,-3
1c007a6a:	97b2                	add	a5,a5,a2
1c007a6c:	7a097757          	pv.extract.b	a4,s2,1
1c007a70:	82e7a7db          	p.addun	a5,a5,a4,1
1c007a74:	0785                	addi	a5,a5,1
1c007a76:	d23e                	sw	a5,36(sp)
	return ((Pad+Stride-1)/Stride);
1c007a78:	00160793          	addi	a5,a2,1
1c007a7c:	8385                	srli	a5,a5,0x1
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c007a7e:	5712                	lw	a4,36(sp)
1c007a80:	04f747b3          	p.min	a5,a4,a5
1c007a84:	d43e                	sw	a5,40(sp)
1c007a86:	4689                	li	a3,2
1c007a88:	458d                	li	a1,3
1c007a8a:	b50ff0ef          	jal	ra,1c006dda <LastDefinedOutput>
1c007a8e:	57a2                	lw	a5,40(sp)
1c007a90:	04a7e533          	p.max	a0,a5,a0
1c007a94:	da2a                	sw	a0,52(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c007a96:	78197657          	pv.extract.b	a2,s2,2
1c007a9a:	00aad503          	lhu	a0,10(s5)
1c007a9e:	ffd50993          	addi	s3,a0,-3
1c007aa2:	99b2                	add	s3,s3,a2
1c007aa4:	7a1977d7          	pv.extract.b	a5,s2,3
1c007aa8:	82f9a9db          	p.addun	s3,s3,a5,1
1c007aac:	0985                	addi	s3,s3,1
	return ((Pad+Stride-1)/Stride);
1c007aae:	00160a13          	addi	s4,a2,1
1c007ab2:	001a5a13          	srli	s4,s4,0x1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c007ab6:	0549ca33          	p.min	s4,s3,s4
1c007aba:	4689                	li	a3,2
1c007abc:	458d                	li	a1,3
1c007abe:	b1cff0ef          	jal	ra,1c006dda <LastDefinedOutput>
1c007ac2:	04aa6b33          	p.max	s6,s4,a0

	unsigned int InFeatures = Arg->InFeatures;
1c007ac6:	00cada83          	lhu	s5,12(s5)
1c007aca:	dc56                	sw	s5,56(sp)
	for (unsigned int of=First; of<Last; of++) 
1c007acc:	5772                	lw	a4,60(sp)
1c007ace:	0aed7063          	bleu	a4,s10,1c007b6e <KerParConv3x3Stride2_SQ8+0x172>
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c007ad2:	57b2                	lw	a5,44(sp)
1c007ad4:	5742                	lw	a4,48(sp)
1c007ad6:	02e78cb3          	mul	s9,a5,a4
			int *out = Out+Wo*Ho*(of);
1c007ada:	5712                	lw	a4,36(sp)
1c007adc:	033707b3          	mul	a5,a4,s3
1c007ae0:	078a                	slli	a5,a5,0x2
1c007ae2:	c0be                	sw	a5,64(sp)
1c007ae4:	00341793          	slli	a5,s0,0x3
1c007ae8:	97a2                	add	a5,a5,s0
1c007aea:	c2be                	sw	a5,68(sp)
1c007aec:	42fd0db3          	p.mac	s11,s10,a5
1c007af0:	8aa6                	mv	s5,s1
1c007af2:	4786                	lw	a5,64(sp)
1c007af4:	42fd0ab3          	p.mac	s5,s10,a5
1c007af8:	5762                	lw	a4,56(sp)
1c007afa:	00371793          	slli	a5,a4,0x3
1c007afe:	97ba                	add	a5,a5,a4
1c007b00:	c6be                	sw	a5,76(sp)
			KerConv3x3Stride2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv3x3BorderStride2_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c007b02:	8c4a                	mv	s8,s2
1c007b04:	a8a1                	j	1c007b5c <KerParConv3x3Stride2_SQ8+0x160>
1c007b06:	94e6                	add	s1,s1,s9
1c007b08:	0425                	addi	s0,s0,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c007b0a:	05740163          	beq	s0,s7,1c007b4c <KerParConv3x3Stride2_SQ8+0x150>
			KerConv3x3Stride2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c007b0e:	c64a                	sw	s2,12(sp)
1c007b10:	c45a                	sw	s6,8(sp)
1c007b12:	c252                	sw	s4,4(sp)
1c007b14:	c04e                	sw	s3,0(sp)
1c007b16:	58d2                	lw	a7,52(sp)
1c007b18:	5822                	lw	a6,40(sp)
1c007b1a:	5792                	lw	a5,36(sp)
1c007b1c:	5742                	lw	a4,48(sp)
1c007b1e:	56b2                	lw	a3,44(sp)
1c007b20:	8622                	mv	a2,s0
1c007b22:	5582                	lw	a1,32(sp)
1c007b24:	8526                	mv	a0,s1
1c007b26:	999ff0ef          	jal	ra,1c0074be <KerConv3x3Stride2_Body_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride2_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c007b2a:	fc0c0ee3          	beqz	s8,1c007b06 <KerParConv3x3Stride2_SQ8+0x10a>
1c007b2e:	c84a                	sw	s2,16(sp)
1c007b30:	c64a                	sw	s2,12(sp)
1c007b32:	c45a                	sw	s6,8(sp)
1c007b34:	c252                	sw	s4,4(sp)
1c007b36:	c04e                	sw	s3,0(sp)
1c007b38:	58d2                	lw	a7,52(sp)
1c007b3a:	5822                	lw	a6,40(sp)
1c007b3c:	5792                	lw	a5,36(sp)
1c007b3e:	5742                	lw	a4,48(sp)
1c007b40:	56b2                	lw	a3,44(sp)
1c007b42:	8622                	mv	a2,s0
1c007b44:	5582                	lw	a1,32(sp)
1c007b46:	8526                	mv	a0,s1
1c007b48:	3ea5                	jal	1c0076c0 <KerConv3x3BorderStride2_SQ8>
1c007b4a:	bf75                	j	1c007b06 <KerParConv3x3Stride2_SQ8+0x10a>
	for (unsigned int of=First; of<Last; of++) 
1c007b4c:	0d05                	addi	s10,s10,1
1c007b4e:	4716                	lw	a4,68(sp)
1c007b50:	9dba                	add	s11,s11,a4
1c007b52:	4786                	lw	a5,64(sp)
1c007b54:	9abe                	add	s5,s5,a5
1c007b56:	5772                	lw	a4,60(sp)
1c007b58:	01a70b63          	beq	a4,s10,1c007b6e <KerParConv3x3Stride2_SQ8+0x172>
		for (unsigned int If=0; If<InFeatures; If++) {
1c007b5c:	57e2                	lw	a5,56(sp)
1c007b5e:	d7fd                	beqz	a5,1c007b4c <KerParConv3x3Stride2_SQ8+0x150>
			int *out = Out+Wo*Ho*(of);
1c007b60:	d056                	sw	s5,32(sp)
1c007b62:	44a6                	lw	s1,72(sp)
1c007b64:	47b6                	lw	a5,76(sp)
1c007b66:	00fd8bb3          	add	s7,s11,a5
1c007b6a:	846e                	mv	s0,s11
1c007b6c:	b74d                	j	1c007b0e <KerParConv3x3Stride2_SQ8+0x112>
1c007b6e:	002047b7          	lui	a5,0x204
1c007b72:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c007b76:	01c7e703          	p.elw	a4,28(a5)
		}
	gap_waitbarrier(0);
}
1c007b7a:	40ba                	lw	ra,140(sp)
1c007b7c:	442a                	lw	s0,136(sp)
1c007b7e:	449a                	lw	s1,132(sp)
1c007b80:	490a                	lw	s2,128(sp)
1c007b82:	59f6                	lw	s3,124(sp)
1c007b84:	5a66                	lw	s4,120(sp)
1c007b86:	5ad6                	lw	s5,116(sp)
1c007b88:	5b46                	lw	s6,112(sp)
1c007b8a:	5bb6                	lw	s7,108(sp)
1c007b8c:	5c26                	lw	s8,104(sp)
1c007b8e:	5c96                	lw	s9,100(sp)
1c007b90:	5d06                	lw	s10,96(sp)
1c007b92:	4df6                	lw	s11,92(sp)
1c007b94:	6149                	addi	sp,sp,144
1c007b96:	8082                	ret

1c007b98 <LastDefinedOutput>:
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);

	if (DoScale) KerParPoolActivation(Out, Wo, Ho, First, Last, Infos, ACT_NONE);
1c007b98:	fff68793          	addi	a5,a3,-1
1c007b9c:	953e                	add	a0,a0,a5
1c007b9e:	9532                	add	a0,a0,a2
1c007ba0:	0015d613          	srli	a2,a1,0x1
1c007ba4:	8d11                	sub	a0,a0,a2
1c007ba6:	15fd                	addi	a1,a1,-1
1c007ba8:	8185                	srli	a1,a1,0x1
1c007baa:	8d0d                	sub	a0,a0,a1
1c007bac:	02d55533          	divu	a0,a0,a3
1c007bb0:	8082                	ret

1c007bb2 <KerMaxPool2x2Stride2_SQ8>:
1c007bb2:	715d                	addi	sp,sp,-80
1c007bb4:	c6a2                	sw	s0,76(sp)
1c007bb6:	c4a6                	sw	s1,72(sp)
1c007bb8:	c2ca                	sw	s2,68(sp)
1c007bba:	c0ce                	sw	s3,64(sp)
1c007bbc:	de52                	sw	s4,60(sp)
1c007bbe:	dc56                	sw	s5,56(sp)
1c007bc0:	da5a                	sw	s6,52(sp)
1c007bc2:	d85e                	sw	s7,48(sp)
1c007bc4:	d662                	sw	s8,44(sp)
1c007bc6:	d466                	sw	s9,40(sp)
1c007bc8:	d26a                	sw	s10,36(sp)
1c007bca:	d06e                	sw	s11,32(sp)
1c007bcc:	ce32                	sw	a2,28(sp)
1c007bce:	c842                	sw	a6,16(sp)
1c007bd0:	ca46                	sw	a7,20(sp)
1c007bd2:	4346                	lw	t1,80(sp)
1c007bd4:	4666                	lw	a2,88(sp)
1c007bd6:	4bf6                	lw	s7,92(sp)
1c007bd8:	78067857          	pv.extract.b	a6,a2,0
1c007bdc:	c242                	sw	a6,4(sp)
1c007bde:	7a0678d7          	pv.extract.b	a7,a2,1
1c007be2:	c646                	sw	a7,12(sp)
1c007be4:	78167fd7          	pv.extract.b	t6,a2,2
1c007be8:	7a167657          	pv.extract.b	a2,a2,3
1c007bec:	cc32                	sw	a2,24(sp)
1c007bee:	780bf657          	pv.extract.b	a2,s7,0
1c007bf2:	c432                	sw	a2,8(sp)
1c007bf4:	781bfbd7          	pv.extract.b	s7,s7,2
1c007bf8:	0a080f63          	beqz	a6,1c007cb6 <KerMaxPool2x2Stride2_SQ8+0x104>
1c007bfc:	899a                	mv	s3,t1
1c007bfe:	4d56                	lw	s10,84(sp)
1c007c00:	37a37563          	bleu	s10,t1,1c007f6a <KerMaxPool2x2Stride2_SQ8+0x3b8>
1c007c04:	00159393          	slli	t2,a1,0x1
1c007c08:	00131613          	slli	a2,t1,0x1
1c007c0c:	41760833          	sub	a6,a2,s7
1c007c10:	8f2a                	mv	t5,a0
1c007c12:	42b80f33          	p.mac	t5,a6,a1
1c007c16:	00180613          	addi	a2,a6,1
1c007c1a:	8eaa                	mv	t4,a0
1c007c1c:	42b60eb3          	p.mac	t4,a2,a1
1c007c20:	82ba                	mv	t0,a4
1c007c22:	8e36                	mv	t3,a3
1c007c24:	42e30e33          	p.mac	t3,t1,a4
1c007c28:	889a                	mv	a7,t1
1c007c2a:	406d0833          	sub	a6,s10,t1
1c007c2e:	00c840fb          	lp.setup	x1,a6,1c007c46 <KerMaxPool2x2Stride2_SQ8+0x94>
1c007c32:	007f760b          	p.lb	a2,t2(t5!)
1c007c36:	04066633          	p.max	a2,a2,zero
1c007c3a:	007ef40b          	p.lb	s0,t2(t4!)
1c007c3e:	04866633          	p.max	a2,a2,s0
1c007c42:	00ce42ab          	p.sb	a2,t0(t3!)
1c007c46:	0885                	addi	a7,a7,1
1c007c48:	060f9963          	bnez	t6,1c007cba <KerMaxPool2x2Stride2_SQ8+0x108>
1c007c4c:	4642                	lw	a2,16(sp)
1c007c4e:	40f60ab3          	sub	s5,a2,a5
1c007c52:	001adb13          	srli	s6,s5,0x1
1c007c56:	002b1493          	slli	s1,s6,0x2
1c007c5a:	00159a13          	slli	s4,a1,0x1
1c007c5e:	00199613          	slli	a2,s3,0x1
1c007c62:	00179293          	slli	t0,a5,0x1
1c007c66:	4822                	lw	a6,8(sp)
1c007c68:	410282b3          	sub	t0,t0,a6
1c007c6c:	92a6                	add	t0,t0,s1
1c007c6e:	41760833          	sub	a6,a2,s7
1c007c72:	8416                	mv	s0,t0
1c007c74:	42b80433          	p.mac	s0,a6,a1
1c007c78:	942a                	add	s0,s0,a0
1c007c7a:	00180613          	addi	a2,a6,1
1c007c7e:	42b602b3          	p.mac	t0,a2,a1
1c007c82:	92aa                	add	t0,t0,a0
1c007c84:	8c3a                	mv	s8,a4
1c007c86:	83be                	mv	t2,a5
1c007c88:	42e983b3          	p.mac	t2,s3,a4
1c007c8c:	93b6                	add	t2,t2,a3
1c007c8e:	894e                	mv	s2,s3
1c007c90:	fc1abcb3          	p.bclr	s9,s5,30,1
1c007c94:	c00abab3          	p.bclr	s5,s5,0,0
1c007c98:	00f68db3          	add	s11,a3,a5
1c007c9c:	9aee                	add	s5,s5,s11
1c007c9e:	413d08b3          	sub	a7,s10,s3
1c007ca2:	c046                	sw	a7,0(sp)
1c007ca4:	00198613          	addi	a2,s3,1
1c007ca8:	00cd6463          	bltu	s10,a2,1c007cb0 <KerMaxPool2x2Stride2_SQ8+0xfe>
1c007cac:	0e0d1463          	bnez	s10,1c007d94 <KerMaxPool2x2Stride2_SQ8+0x1e2>
1c007cb0:	4605                	li	a2,1
1c007cb2:	c032                	sw	a2,0(sp)
1c007cb4:	a0c5                	j	1c007d94 <KerMaxPool2x2Stride2_SQ8+0x1e2>
1c007cb6:	0c0f8163          	beqz	t6,1c007d78 <KerMaxPool2x2Stride2_SQ8+0x1c6>
1c007cba:	00179f93          	slli	t6,a5,0x1
1c007cbe:	4822                	lw	a6,8(sp)
1c007cc0:	410f8fb3          	sub	t6,t6,a6
1c007cc4:	9faa                	add	t6,t6,a0
1c007cc6:	4642                	lw	a2,16(sp)
1c007cc8:	40f602b3          	sub	t0,a2,a5
1c007ccc:	0012d393          	srli	t2,t0,0x1
1c007cd0:	04038463          	beqz	t2,1c007d18 <KerMaxPool2x2Stride2_SQ8+0x166>
1c007cd4:	00f68f33          	add	t5,a3,a5
1c007cd8:	00178e13          	addi	t3,a5,1
1c007cdc:	9e36                	add	t3,t3,a3
1c007cde:	8efe                	mv	t4,t6
1c007ce0:	00239893          	slli	a7,t2,0x2
1c007ce4:	18f1                	addi	a7,a7,-4
1c007ce6:	0028d893          	srli	a7,a7,0x2
1c007cea:	0885                	addi	a7,a7,1
1c007cec:	0148c0fb          	lp.setup	x1,a7,1c007d14 <KerMaxPool2x2Stride2_SQ8+0x162>
1c007cf0:	004ea60b          	p.lw	a2,4(t4!)
1c007cf4:	30067657          	pv.max.sci.b	a2,a2,0
1c007cf8:	78067857          	pv.extract.b	a6,a2,0
1c007cfc:	7a067457          	pv.extract.b	s0,a2,1
1c007d00:	04886833          	p.max	a6,a6,s0
1c007d04:	010f012b          	p.sb	a6,2(t5!)
1c007d08:	78167857          	pv.extract.b	a6,a2,2
1c007d0c:	7a167657          	pv.extract.b	a2,a2,3
1c007d10:	04c86633          	p.max	a2,a6,a2
1c007d14:	00ce012b          	p.sb	a2,2(t3!)
1c007d18:	fc12b633          	p.bclr	a2,t0,30,1
1c007d1c:	c21d                	beqz	a2,1c007d42 <KerMaxPool2x2Stride2_SQ8+0x190>
1c007d1e:	00239613          	slli	a2,t2,0x2
1c007d22:	20cff603          	p.lw	a2,a2(t6)
1c007d26:	30067657          	pv.max.sci.b	a2,a2,0
1c007d2a:	78067857          	pv.extract.b	a6,a2,0
1c007d2e:	7a067657          	pv.extract.b	a2,a2,1
1c007d32:	04c86633          	p.max	a2,a6,a2
1c007d36:	c002b2b3          	p.bclr	t0,t0,0,0
1c007d3a:	00f68833          	add	a6,a3,a5
1c007d3e:	00c842a3          	p.sb	a2,t0(a6)
1c007d42:	4812                	lw	a6,4(sp)
1c007d44:	00080863          	beqz	a6,1c007d54 <KerMaxPool2x2Stride2_SQ8+0x1a2>
1c007d48:	00050603          	lb	a2,0(a0)
1c007d4c:	04066633          	p.max	a2,a2,zero
1c007d50:	00c68023          	sb	a2,0(a3)
1c007d54:	48b2                	lw	a7,12(sp)
1c007d56:	20088d63          	beqz	a7,1c007f70 <KerMaxPool2x2Stride2_SQ8+0x3be>
1c007d5a:	00b50633          	add	a2,a0,a1
1c007d5e:	fff60603          	lb	a2,-1(a2)
1c007d62:	04066633          	p.max	a2,a2,zero
1c007d66:	00e68833          	add	a6,a3,a4
1c007d6a:	fec80fa3          	sb	a2,-1(a6)
1c007d6e:	899a                	mv	s3,t1
1c007d70:	4d56                	lw	s10,84(sp)
1c007d72:	eda36de3          	bltu	t1,s10,1c007c4c <KerMaxPool2x2Stride2_SQ8+0x9a>
1c007d76:	a8c5                	j	1c007e66 <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c007d78:	899a                	mv	s3,t1
1c007d7a:	4d56                	lw	s10,84(sp)
1c007d7c:	eda368e3          	bltu	t1,s10,1c007c4c <KerMaxPool2x2Stride2_SQ8+0x9a>
1c007d80:	a0dd                	j	1c007e66 <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c007d82:	0905                	addi	s2,s2,1
1c007d84:	9452                	add	s0,s0,s4
1c007d86:	92d2                	add	t0,t0,s4
1c007d88:	93e2                	add	t2,t2,s8
1c007d8a:	4802                	lw	a6,0(sp)
1c007d8c:	187d                	addi	a6,a6,-1
1c007d8e:	c042                	sw	a6,0(sp)
1c007d90:	06080c63          	beqz	a6,1c007e08 <KerMaxPool2x2Stride2_SQ8+0x256>
1c007d94:	040b0663          	beqz	s6,1c007de0 <KerMaxPool2x2Stride2_SQ8+0x22e>
1c007d98:	40928fb3          	sub	t6,t0,s1
1c007d9c:	00138f13          	addi	t5,t2,1
1c007da0:	8e9e                	mv	t4,t2
1c007da2:	40940e33          	sub	t3,s0,s1
1c007da6:	ffc48313          	addi	t1,s1,-4
1c007daa:	00235313          	srli	t1,t1,0x2
1c007dae:	0305                	addi	t1,t1,1
1c007db0:	016340fb          	lp.setup	x1,t1,1c007ddc <KerMaxPool2x2Stride2_SQ8+0x22a>
1c007db4:	004e280b          	p.lw	a6,4(t3!)
1c007db8:	004fa60b          	p.lw	a2,4(t6!)
1c007dbc:	30c81657          	pv.max.b	a2,a6,a2
1c007dc0:	78067857          	pv.extract.b	a6,a2,0
1c007dc4:	7a0678d7          	pv.extract.b	a7,a2,1
1c007dc8:	05186833          	p.max	a6,a6,a7
1c007dcc:	010e812b          	p.sb	a6,2(t4!)
1c007dd0:	78167857          	pv.extract.b	a6,a2,2
1c007dd4:	7a167657          	pv.extract.b	a2,a2,3
1c007dd8:	04c86633          	p.max	a2,a6,a2
1c007ddc:	00cf012b          	p.sb	a2,2(t5!)
1c007de0:	fa0c81e3          	beqz	s9,1c007d82 <KerMaxPool2x2Stride2_SQ8+0x1d0>
1c007de4:	4010                	lw	a2,0(s0)
1c007de6:	0002a803          	lw	a6,0(t0)
1c007dea:	31061657          	pv.max.b	a2,a2,a6
1c007dee:	78067857          	pv.extract.b	a6,a2,0
1c007df2:	7a067657          	pv.extract.b	a2,a2,1
1c007df6:	04c86633          	p.max	a2,a6,a2
1c007dfa:	41b38833          	sub	a6,t2,s11
1c007dfe:	00cac823          	p.sb	a2,a6(s5)
1c007e02:	b741                	j	1c007d82 <KerMaxPool2x2Stride2_SQ8+0x1d0>
1c007e04:	4305                	li	t1,1
1c007e06:	a099                	j	1c007e4c <KerMaxPool2x2Stride2_SQ8+0x29a>
1c007e08:	4832                	lw	a6,12(sp)
1c007e0a:	04080e63          	beqz	a6,1c007e66 <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c007e0e:	00159f13          	slli	t5,a1,0x1
1c007e12:	00199613          	slli	a2,s3,0x1
1c007e16:	fff58893          	addi	a7,a1,-1
1c007e1a:	41760833          	sub	a6,a2,s7
1c007e1e:	8ec6                	mv	t4,a7
1c007e20:	42b80eb3          	p.mac	t4,a6,a1
1c007e24:	9eaa                	add	t4,t4,a0
1c007e26:	00180613          	addi	a2,a6,1
1c007e2a:	42b608b3          	p.mac	a7,a2,a1
1c007e2e:	98aa                	add	a7,a7,a0
1c007e30:	8fba                	mv	t6,a4
1c007e32:	fff70e13          	addi	t3,a4,-1
1c007e36:	42e98e33          	p.mac	t3,s3,a4
1c007e3a:	9e36                	add	t3,t3,a3
1c007e3c:	413d0333          	sub	t1,s10,s3
1c007e40:	00198613          	addi	a2,s3,1
1c007e44:	fccd60e3          	bltu	s10,a2,1c007e04 <KerMaxPool2x2Stride2_SQ8+0x252>
1c007e48:	fa0d0ee3          	beqz	s10,1c007e04 <KerMaxPool2x2Stride2_SQ8+0x252>
1c007e4c:	00c340fb          	lp.setup	x1,t1,1c007e64 <KerMaxPool2x2Stride2_SQ8+0x2b2>
1c007e50:	01eef60b          	p.lb	a2,t5(t4!)
1c007e54:	04066633          	p.max	a2,a2,zero
1c007e58:	01e8f80b          	p.lb	a6,t5(a7!)
1c007e5c:	05066633          	p.max	a2,a2,a6
1c007e60:	00ce4fab          	p.sb	a2,t6(t3!)
1c007e64:	0985                	addi	s3,s3,1
1c007e66:	48e2                	lw	a7,24(sp)
1c007e68:	0e088363          	beqz	a7,1c007f4e <KerMaxPool2x2Stride2_SQ8+0x39c>
1c007e6c:	4672                	lw	a2,28(sp)
1c007e6e:	fff60293          	addi	t0,a2,-1
1c007e72:	02b282b3          	mul	t0,t0,a1
1c007e76:	00179f93          	slli	t6,a5,0x1
1c007e7a:	9f96                	add	t6,t6,t0
1c007e7c:	4822                	lw	a6,8(sp)
1c007e7e:	410f8fb3          	sub	t6,t6,a6
1c007e82:	9faa                	add	t6,t6,a0
1c007e84:	4642                	lw	a2,16(sp)
1c007e86:	40f603b3          	sub	t2,a2,a5
1c007e8a:	0013d413          	srli	s0,t2,0x1
1c007e8e:	c831                	beqz	s0,1c007ee2 <KerMaxPool2x2Stride2_SQ8+0x330>
1c007e90:	4852                	lw	a6,20(sp)
1c007e92:	fff80613          	addi	a2,a6,-1
1c007e96:	88be                	mv	a7,a5
1c007e98:	42e608b3          	p.mac	a7,a2,a4
1c007e9c:	01168f33          	add	t5,a3,a7
1c007ea0:	00188613          	addi	a2,a7,1
1c007ea4:	00c68e33          	add	t3,a3,a2
1c007ea8:	8efe                	mv	t4,t6
1c007eaa:	00241313          	slli	t1,s0,0x2
1c007eae:	1371                	addi	t1,t1,-4
1c007eb0:	00235313          	srli	t1,t1,0x2
1c007eb4:	0305                	addi	t1,t1,1
1c007eb6:	014340fb          	lp.setup	x1,t1,1c007ede <KerMaxPool2x2Stride2_SQ8+0x32c>
1c007eba:	004ea60b          	p.lw	a2,4(t4!)
1c007ebe:	30067657          	pv.max.sci.b	a2,a2,0
1c007ec2:	78067857          	pv.extract.b	a6,a2,0
1c007ec6:	7a0678d7          	pv.extract.b	a7,a2,1
1c007eca:	05186833          	p.max	a6,a6,a7
1c007ece:	010f012b          	p.sb	a6,2(t5!)
1c007ed2:	78167857          	pv.extract.b	a6,a2,2
1c007ed6:	7a167657          	pv.extract.b	a2,a2,3
1c007eda:	04c86633          	p.max	a2,a6,a2
1c007ede:	00ce012b          	p.sb	a2,2(t3!)
1c007ee2:	fc13b633          	p.bclr	a2,t2,30,1
1c007ee6:	c61d                	beqz	a2,1c007f14 <KerMaxPool2x2Stride2_SQ8+0x362>
1c007ee8:	00241613          	slli	a2,s0,0x2
1c007eec:	20cff603          	p.lw	a2,a2(t6)
1c007ef0:	30067657          	pv.max.sci.b	a2,a2,0
1c007ef4:	78067857          	pv.extract.b	a6,a2,0
1c007ef8:	7a067657          	pv.extract.b	a2,a2,1
1c007efc:	04c86633          	p.max	a2,a6,a2
1c007f00:	48d2                	lw	a7,20(sp)
1c007f02:	fff88813          	addi	a6,a7,-1
1c007f06:	c003b3b3          	p.bclr	t2,t2,0,0
1c007f0a:	97b6                	add	a5,a5,a3
1c007f0c:	42e807b3          	p.mac	a5,a6,a4
1c007f10:	00c7c3a3          	p.sb	a2,t2(a5)
1c007f14:	4612                	lw	a2,4(sp)
1c007f16:	ce11                	beqz	a2,1c007f32 <KerMaxPool2x2Stride2_SQ8+0x380>
1c007f18:	005507b3          	add	a5,a0,t0
1c007f1c:	00078783          	lb	a5,0(a5)
1c007f20:	0407e7b3          	p.max	a5,a5,zero
1c007f24:	4852                	lw	a6,20(sp)
1c007f26:	fff80613          	addi	a2,a6,-1
1c007f2a:	02e60633          	mul	a2,a2,a4
1c007f2e:	00f6c623          	p.sb	a5,a2(a3)
1c007f32:	48b2                	lw	a7,12(sp)
1c007f34:	00088d63          	beqz	a7,1c007f4e <KerMaxPool2x2Stride2_SQ8+0x39c>
1c007f38:	9516                	add	a0,a0,t0
1c007f3a:	95aa                	add	a1,a1,a0
1c007f3c:	fff58783          	lb	a5,-1(a1)
1c007f40:	0407e7b3          	p.max	a5,a5,zero
1c007f44:	4652                	lw	a2,20(sp)
1c007f46:	42c706b3          	p.mac	a3,a4,a2
1c007f4a:	fef68fa3          	sb	a5,-1(a3)
1c007f4e:	4436                	lw	s0,76(sp)
1c007f50:	44a6                	lw	s1,72(sp)
1c007f52:	4916                	lw	s2,68(sp)
1c007f54:	4986                	lw	s3,64(sp)
1c007f56:	5a72                	lw	s4,60(sp)
1c007f58:	5ae2                	lw	s5,56(sp)
1c007f5a:	5b52                	lw	s6,52(sp)
1c007f5c:	5bc2                	lw	s7,48(sp)
1c007f5e:	5c32                	lw	s8,44(sp)
1c007f60:	5ca2                	lw	s9,40(sp)
1c007f62:	5d12                	lw	s10,36(sp)
1c007f64:	5d82                	lw	s11,32(sp)
1c007f66:	6161                	addi	sp,sp,80
1c007f68:	8082                	ret
1c007f6a:	ee0f8ee3          	beqz	t6,1c007e66 <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c007f6e:	b3b1                	j	1c007cba <KerMaxPool2x2Stride2_SQ8+0x108>
1c007f70:	899a                	mv	s3,t1
1c007f72:	4d56                	lw	s10,84(sp)
1c007f74:	cda36ce3          	bltu	t1,s10,1c007c4c <KerMaxPool2x2Stride2_SQ8+0x9a>
1c007f78:	b5fd                	j	1c007e66 <KerMaxPool2x2Stride2_SQ8+0x2b4>

1c007f7a <KerAvgPool2x2Stride2_SQ8>:
1c007f7a:	7139                	addi	sp,sp,-64
1c007f7c:	de22                	sw	s0,60(sp)
1c007f7e:	dc26                	sw	s1,56(sp)
1c007f80:	da4a                	sw	s2,52(sp)
1c007f82:	d84e                	sw	s3,48(sp)
1c007f84:	d652                	sw	s4,44(sp)
1c007f86:	d456                	sw	s5,40(sp)
1c007f88:	d25a                	sw	s6,36(sp)
1c007f8a:	d05e                	sw	s7,32(sp)
1c007f8c:	ce62                	sw	s8,28(sp)
1c007f8e:	cc66                	sw	s9,24(sp)
1c007f90:	ca6a                	sw	s10,20(sp)
1c007f92:	c86e                	sw	s11,16(sp)
1c007f94:	c632                	sw	a2,12(sp)
1c007f96:	4f86                	lw	t6,64(sp)
1c007f98:	4626                	lw	a2,72(sp)
1c007f9a:	4ab6                	lw	s5,76(sp)
1c007f9c:	78067cd7          	pv.extract.b	s9,a2,0
1c007fa0:	7a067dd7          	pv.extract.b	s11,a2,1
1c007fa4:	781673d7          	pv.extract.b	t2,a2,2
1c007fa8:	7a167657          	pv.extract.b	a2,a2,3
1c007fac:	c432                	sw	a2,8(sp)
1c007fae:	780afd57          	pv.extract.b	s10,s5,0
1c007fb2:	781afad7          	pv.extract.b	s5,s5,2
1c007fb6:	1c0c8363          	beqz	s9,1c00817c <KerAvgPool2x2Stride2_SQ8+0x202>
1c007fba:	8a7e                	mv	s4,t6
1c007fbc:	4c16                	lw	s8,68(sp)
1c007fbe:	238ffd63          	bleu	s8,t6,1c0081f8 <KerAvgPool2x2Stride2_SQ8+0x27e>
1c007fc2:	00159493          	slli	s1,a1,0x1
1c007fc6:	001f9613          	slli	a2,t6,0x1
1c007fca:	41560333          	sub	t1,a2,s5
1c007fce:	82aa                	mv	t0,a0
1c007fd0:	42b302b3          	p.mac	t0,t1,a1
1c007fd4:	00130613          	addi	a2,t1,1
1c007fd8:	8f2a                	mv	t5,a0
1c007fda:	42b60f33          	p.mac	t5,a2,a1
1c007fde:	843a                	mv	s0,a4
1c007fe0:	8eb6                	mv	t4,a3
1c007fe2:	42ef8eb3          	p.mac	t4,t6,a4
1c007fe6:	8e7e                	mv	t3,t6
1c007fe8:	41fc0333          	sub	t1,s8,t6
1c007fec:	00a340fb          	lp.setup	x1,t1,1c008000 <KerAvgPool2x2Stride2_SQ8+0x86>
1c007ff0:	0092f60b          	p.lb	a2,s1(t0!)
1c007ff4:	009f790b          	p.lb	s2,s1(t5!)
1c007ff8:	0526665b          	p.mac.zh.zl	a2,a2,s2,sp
1c007ffc:	00cec42b          	p.sb	a2,s0(t4!)
1c008000:	0e05                	addi	t3,t3,1
1c008002:	16039f63          	bnez	t2,1c008180 <KerAvgPool2x2Stride2_SQ8+0x206>
1c008006:	00159b13          	slli	s6,a1,0x1
1c00800a:	001a1613          	slli	a2,s4,0x1
1c00800e:	41560933          	sub	s2,a2,s5
1c008012:	02b90333          	mul	t1,s2,a1
1c008016:	00179393          	slli	t2,a5,0x1
1c00801a:	41a383b3          	sub	t2,t2,s10
1c00801e:	939a                	add	t2,t2,t1
1c008020:	93aa                	add	t2,t2,a0
1c008022:	8bba                	mv	s7,a4
1c008024:	84b6                	mv	s1,a3
1c008026:	42ea04b3          	p.mac	s1,s4,a4
1c00802a:	0905                	addi	s2,s2,1
1c00802c:	02b90933          	mul	s2,s2,a1
1c008030:	40690933          	sub	s2,s2,t1
1c008034:	89d2                	mv	s3,s4
1c008036:	40f80633          	sub	a2,a6,a5
1c00803a:	c232                	sw	a2,4(sp)
1c00803c:	1c010637          	lui	a2,0x1c010
1c008040:	17462303          	lw	t1,372(a2) # 1c010174 <__clz_tab+0x340>
1c008044:	414c0433          	sub	s0,s8,s4
1c008048:	001a0613          	addi	a2,s4,1
1c00804c:	1acc6263          	bltu	s8,a2,1c0081f0 <KerAvgPool2x2Stride2_SQ8+0x276>
1c008050:	1a0c0063          	beqz	s8,1c0081f0 <KerAvgPool2x2Stride2_SQ8+0x276>
1c008054:	0194407b          	lp.setup	x0,s0,1c008086 <KerAvgPool2x2Stride2_SQ8+0x10c>
1c008058:	03078563          	beq	a5,a6,1c008082 <KerAvgPool2x2Stride2_SQ8+0x108>
1c00805c:	012382b3          	add	t0,t2,s2
1c008060:	8fa6                	mv	t6,s1
1c008062:	8f1e                	mv	t5,t2
1c008064:	4e92                	lw	t4,4(sp)
1c008066:	00cec0fb          	lp.setup	x1,t4,1c00807e <KerAvgPool2x2Stride2_SQ8+0x104>
1c00806a:	002f160b          	p.lh	a2,2(t5!)
1c00806e:	98661657          	pv.dotsp.b	a2,a2,t1
1c008072:	00229e0b          	p.lh	t3,2(t0!)
1c008076:	b86e1657          	pv.sdotsp.b	a2,t3,t1
1c00807a:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c00807e:	00cf80ab          	p.sb	a2,1(t6!)
1c008082:	0985                	addi	s3,s3,1
1c008084:	93da                	add	t2,t2,s6
1c008086:	94de                	add	s1,s1,s7
1c008088:	040d8c63          	beqz	s11,1c0080e0 <KerAvgPool2x2Stride2_SQ8+0x166>
1c00808c:	00159f93          	slli	t6,a1,0x1
1c008090:	001a1613          	slli	a2,s4,0x1
1c008094:	fff58e13          	addi	t3,a1,-1
1c008098:	41560333          	sub	t1,a2,s5
1c00809c:	82f2                	mv	t0,t3
1c00809e:	42b302b3          	p.mac	t0,t1,a1
1c0080a2:	92aa                	add	t0,t0,a0
1c0080a4:	00130613          	addi	a2,t1,1
1c0080a8:	42b60e33          	p.mac	t3,a2,a1
1c0080ac:	9e2a                	add	t3,t3,a0
1c0080ae:	83ba                	mv	t2,a4
1c0080b0:	fff70f13          	addi	t5,a4,-1
1c0080b4:	42ea0f33          	p.mac	t5,s4,a4
1c0080b8:	9f36                	add	t5,t5,a3
1c0080ba:	414c0eb3          	sub	t4,s8,s4
1c0080be:	001a0613          	addi	a2,s4,1
1c0080c2:	12cc6963          	bltu	s8,a2,1c0081f4 <KerAvgPool2x2Stride2_SQ8+0x27a>
1c0080c6:	120c0763          	beqz	s8,1c0081f4 <KerAvgPool2x2Stride2_SQ8+0x27a>
1c0080ca:	00aec0fb          	lp.setup	x1,t4,1c0080de <KerAvgPool2x2Stride2_SQ8+0x164>
1c0080ce:	01f2f60b          	p.lb	a2,t6(t0!)
1c0080d2:	01fe730b          	p.lb	t1,t6(t3!)
1c0080d6:	0466665b          	p.mac.zh.zl	a2,a2,t1,sp
1c0080da:	00cf43ab          	p.sb	a2,t2(t5!)
1c0080de:	0a05                	addi	s4,s4,1
1c0080e0:	4622                	lw	a2,8(sp)
1c0080e2:	ce3d                	beqz	a2,1c008160 <KerAvgPool2x2Stride2_SQ8+0x1e6>
1c0080e4:	4632                	lw	a2,12(sp)
1c0080e6:	fff60e93          	addi	t4,a2,-1
1c0080ea:	02be8eb3          	mul	t4,t4,a1
1c0080ee:	00179613          	slli	a2,a5,0x1
1c0080f2:	9676                	add	a2,a2,t4
1c0080f4:	41a60633          	sub	a2,a2,s10
1c0080f8:	40f80833          	sub	a6,a6,a5
1c0080fc:	02080863          	beqz	a6,1c00812c <KerAvgPool2x2Stride2_SQ8+0x1b2>
1c008100:	fff88313          	addi	t1,a7,-1
1c008104:	42e307b3          	p.mac	a5,t1,a4
1c008108:	00c50333          	add	t1,a0,a2
1c00810c:	00f68e33          	add	t3,a3,a5
1c008110:	1c0107b7          	lui	a5,0x1c010
1c008114:	1747a603          	lw	a2,372(a5) # 1c010174 <__clz_tab+0x340>
1c008118:	008840fb          	lp.setup	x1,a6,1c008128 <KerAvgPool2x2Stride2_SQ8+0x1ae>
1c00811c:	0023178b          	p.lh	a5,2(t1!)
1c008120:	98c797d7          	pv.dotsp.b	a5,a5,a2
1c008124:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c008128:	00fe00ab          	p.sb	a5,1(t3!)
1c00812c:	000c8e63          	beqz	s9,1c008148 <KerAvgPool2x2Stride2_SQ8+0x1ce>
1c008130:	01d507b3          	add	a5,a0,t4
1c008134:	00078783          	lb	a5,0(a5)
1c008138:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c00813c:	fff88613          	addi	a2,a7,-1
1c008140:	02e60633          	mul	a2,a2,a4
1c008144:	00f6c623          	p.sb	a5,a2(a3)
1c008148:	000d8c63          	beqz	s11,1c008160 <KerAvgPool2x2Stride2_SQ8+0x1e6>
1c00814c:	9576                	add	a0,a0,t4
1c00814e:	95aa                	add	a1,a1,a0
1c008150:	fff58783          	lb	a5,-1(a1)
1c008154:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c008158:	431706b3          	p.mac	a3,a4,a7
1c00815c:	fef68fa3          	sb	a5,-1(a3)
1c008160:	5472                	lw	s0,60(sp)
1c008162:	54e2                	lw	s1,56(sp)
1c008164:	5952                	lw	s2,52(sp)
1c008166:	59c2                	lw	s3,48(sp)
1c008168:	5a32                	lw	s4,44(sp)
1c00816a:	5aa2                	lw	s5,40(sp)
1c00816c:	5b12                	lw	s6,36(sp)
1c00816e:	5b82                	lw	s7,32(sp)
1c008170:	4c72                	lw	s8,28(sp)
1c008172:	4ce2                	lw	s9,24(sp)
1c008174:	4d52                	lw	s10,20(sp)
1c008176:	4dc2                	lw	s11,16(sp)
1c008178:	6121                	addi	sp,sp,64
1c00817a:	8082                	ret
1c00817c:	06038563          	beqz	t2,1c0081e6 <KerAvgPool2x2Stride2_SQ8+0x26c>
1c008180:	00179613          	slli	a2,a5,0x1
1c008184:	41a60633          	sub	a2,a2,s10
1c008188:	40f80e33          	sub	t3,a6,a5
1c00818c:	020e0463          	beqz	t3,1c0081b4 <KerAvgPool2x2Stride2_SQ8+0x23a>
1c008190:	00c50eb3          	add	t4,a0,a2
1c008194:	00f68f33          	add	t5,a3,a5
1c008198:	1c010637          	lui	a2,0x1c010
1c00819c:	17462303          	lw	t1,372(a2) # 1c010174 <__clz_tab+0x340>
1c0081a0:	008e40fb          	lp.setup	x1,t3,1c0081b0 <KerAvgPool2x2Stride2_SQ8+0x236>
1c0081a4:	004ea60b          	p.lw	a2,4(t4!)
1c0081a8:	98661657          	pv.dotsp.b	a2,a2,t1
1c0081ac:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c0081b0:	00cf00ab          	p.sb	a2,1(t5!)
1c0081b4:	000c8863          	beqz	s9,1c0081c4 <KerAvgPool2x2Stride2_SQ8+0x24a>
1c0081b8:	00050603          	lb	a2,0(a0)
1c0081bc:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c0081c0:	00c68023          	sb	a2,0(a3)
1c0081c4:	020d8d63          	beqz	s11,1c0081fe <KerAvgPool2x2Stride2_SQ8+0x284>
1c0081c8:	00b50633          	add	a2,a0,a1
1c0081cc:	fff60603          	lb	a2,-1(a2)
1c0081d0:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c0081d4:	00e68333          	add	t1,a3,a4
1c0081d8:	fec30fa3          	sb	a2,-1(t1)
1c0081dc:	8a7e                	mv	s4,t6
1c0081de:	4c16                	lw	s8,68(sp)
1c0081e0:	e38fe3e3          	bltu	t6,s8,1c008006 <KerAvgPool2x2Stride2_SQ8+0x8c>
1c0081e4:	bdf5                	j	1c0080e0 <KerAvgPool2x2Stride2_SQ8+0x166>
1c0081e6:	8a7e                	mv	s4,t6
1c0081e8:	4c16                	lw	s8,68(sp)
1c0081ea:	e18feee3          	bltu	t6,s8,1c008006 <KerAvgPool2x2Stride2_SQ8+0x8c>
1c0081ee:	bdcd                	j	1c0080e0 <KerAvgPool2x2Stride2_SQ8+0x166>
1c0081f0:	4405                	li	s0,1
1c0081f2:	b58d                	j	1c008054 <KerAvgPool2x2Stride2_SQ8+0xda>
1c0081f4:	4e85                	li	t4,1
1c0081f6:	bdd1                	j	1c0080ca <KerAvgPool2x2Stride2_SQ8+0x150>
1c0081f8:	ee0384e3          	beqz	t2,1c0080e0 <KerAvgPool2x2Stride2_SQ8+0x166>
1c0081fc:	b751                	j	1c008180 <KerAvgPool2x2Stride2_SQ8+0x206>
1c0081fe:	8a7e                	mv	s4,t6
1c008200:	4c16                	lw	s8,68(sp)
1c008202:	e18fe2e3          	bltu	t6,s8,1c008006 <KerAvgPool2x2Stride2_SQ8+0x8c>
1c008206:	bde9                	j	1c0080e0 <KerAvgPool2x2Stride2_SQ8+0x166>

1c008208 <Ker_ActivationScale1_SQ8>:
1c008208:	0015d793          	srli	a5,a1,0x1
1c00820c:	cba1                	beqz	a5,1c00825c <Ker_ActivationScale1_SQ8+0x54>
1c00820e:	00150893          	addi	a7,a0,1
1c008212:	882a                	mv	a6,a0
1c008214:	c005b333          	p.bclr	t1,a1,0,0
1c008218:	1379                	addi	t1,t1,-2
1c00821a:	00135313          	srli	t1,t1,0x1
1c00821e:	0305                	addi	t1,t1,1
1c008220:	a839                	j	1c00823e <Ker_ActivationScale1_SQ8+0x36>
1c008222:	04076733          	p.max	a4,a4,zero
1c008226:	0407e7b3          	p.max	a5,a5,zero
1c00822a:	00ee8023          	sb	a4,0(t4)
1c00822e:	00fe0023          	sb	a5,0(t3)
1c008232:	0809                	addi	a6,a6,2
1c008234:	0889                	addi	a7,a7,2
1c008236:	137d                	addi	t1,t1,-1
1c008238:	00031363          	bnez	t1,1c00823e <Ker_ActivationScale1_SQ8+0x36>
1c00823c:	a005                	j	1c00825c <Ker_ActivationScale1_SQ8+0x54>
1c00823e:	8ec2                	mv	t4,a6
1c008240:	00080703          	lb	a4,0(a6)
1c008244:	8e46                	mv	t3,a7
1c008246:	00088783          	lb	a5,0(a7)
1c00824a:	fc162ce3          	p.beqimm	a2,1,1c008222 <Ker_ActivationScale1_SQ8+0x1a>
1c00824e:	fc263ee3          	p.bneimm	a2,2,1c00822a <Ker_ActivationScale1_SQ8+0x22>
1c008252:	14d76733          	p.clipur	a4,a4,a3
1c008256:	14d7e7b3          	p.clipur	a5,a5,a3
1c00825a:	bfc1                	j	1c00822a <Ker_ActivationScale1_SQ8+0x22>
1c00825c:	fc15b7b3          	p.bclr	a5,a1,30,1
1c008260:	cb99                	beqz	a5,1c008276 <Ker_ActivationScale1_SQ8+0x6e>
1c008262:	15fd                	addi	a1,a1,-1
1c008264:	95aa                	add	a1,a1,a0
1c008266:	00058783          	lb	a5,0(a1)
1c00826a:	00162763          	p.beqimm	a2,1,1c008278 <Ker_ActivationScale1_SQ8+0x70>
1c00826e:	00262863          	p.beqimm	a2,2,1c00827e <Ker_ActivationScale1_SQ8+0x76>
1c008272:	00f58023          	sb	a5,0(a1)
1c008276:	8082                	ret
1c008278:	0407e7b3          	p.max	a5,a5,zero
1c00827c:	bfdd                	j	1c008272 <Ker_ActivationScale1_SQ8+0x6a>
1c00827e:	14d7e7b3          	p.clipur	a5,a5,a3
1c008282:	bfc5                	j	1c008272 <Ker_ActivationScale1_SQ8+0x6a>

1c008284 <Ker_Activation_SQ8>:
1c008284:	1101                	addi	sp,sp,-32
1c008286:	ce22                	sw	s0,28(sp)
1c008288:	cc26                	sw	s1,24(sp)
1c00828a:	ca4a                	sw	s2,20(sp)
1c00828c:	c84e                	sw	s3,16(sp)
1c00828e:	c652                	sw	s4,12(sp)
1c008290:	c456                	sw	s5,8(sp)
1c008292:	0015d313          	srli	t1,a1,0x1
1c008296:	14030363          	beqz	t1,1c0083dc <Ker_Activation_SQ8+0x158>
1c00829a:	00150f13          	addi	t5,a0,1
1c00829e:	8eaa                	mv	t4,a0
1c0082a0:	4389                	li	t2,2
1c0082a2:	4491                	li	s1,4
1c0082a4:	441d                	li	s0,7
1c0082a6:	c005bfb3          	p.bclr	t6,a1,0,0
1c0082aa:	1ff9                	addi	t6,t6,-2
1c0082ac:	001fdf93          	srli	t6,t6,0x1
1c0082b0:	0f85                	addi	t6,t6,1
1c0082b2:	a0b9                	j	1c008300 <Ker_Activation_SQ8+0x7c>
1c0082b4:	c205                	beqz	a2,1c0082d4 <Ker_Activation_SQ8+0x50>
1c0082b6:	02163763          	p.bneimm	a2,1,1c0082e4 <Ker_Activation_SQ8+0x60>
1c0082ba:	040e6933          	p.max	s2,t3,zero
1c0082be:	02d90933          	mul	s2,s2,a3
1c0082c2:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c0082c6:	040a6333          	p.max	t1,s4,zero
1c0082ca:	02d30333          	mul	t1,t1,a3
1c0082ce:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c0082d2:	a809                	j	1c0082e4 <Ker_Activation_SQ8+0x60>
1c0082d4:	02de0933          	mul	s2,t3,a3
1c0082d8:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c0082dc:	02da0333          	mul	t1,s4,a3
1c0082e0:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c0082e4:	14891933          	p.clip	s2,s2,8
1c0082e8:	01298023          	sb	s2,0(s3)
1c0082ec:	14831333          	p.clip	t1,t1,8
1c0082f0:	00628023          	sb	t1,0(t0)
1c0082f4:	0e89                	addi	t4,t4,2
1c0082f6:	0f09                	addi	t5,t5,2
1c0082f8:	1ffd                	addi	t6,t6,-1
1c0082fa:	000f9363          	bnez	t6,1c008300 <Ker_Activation_SQ8+0x7c>
1c0082fe:	a8f9                	j	1c0083dc <Ker_Activation_SQ8+0x158>
1c008300:	89f6                	mv	s3,t4
1c008302:	000e8e03          	lb	t3,0(t4)
1c008306:	8972                	mv	s2,t3
1c008308:	82fa                	mv	t0,t5
1c00830a:	000f0a03          	lb	s4,0(t5)
1c00830e:	8352                	mv	t1,s4
1c008310:	04262b63          	p.beqimm	a2,2,1c008366 <Ker_Activation_SQ8+0xe2>
1c008314:	fac3f0e3          	bleu	a2,t2,1c0082b4 <Ker_Activation_SQ8+0x30>
1c008318:	08462963          	p.beqimm	a2,4,1c0083aa <Ker_Activation_SQ8+0x126>
1c00831c:	06966263          	bltu	a2,s1,1c008380 <Ker_Activation_SQ8+0xfc>
1c008320:	fc5632e3          	p.bneimm	a2,5,1c0082e4 <Ker_Activation_SQ8+0x60>
1c008324:	c1fe1333          	p.extractu	t1,t3,0,31
1c008328:	03c78933          	mul	s2,a5,t3
1c00832c:	4080695b          	p.mac.zh.sl	s2,zero,s0,zero
1c008330:	00133a93          	seqz	s5,t1
1c008334:	03230933          	mul	s2,t1,s2
1c008338:	43ca8933          	p.mac	s2,s5,t3
1c00833c:	02d90933          	mul	s2,s2,a3
1c008340:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c008344:	c1fa1e33          	p.extractu	t3,s4,0,31
1c008348:	03478333          	mul	t1,a5,s4
1c00834c:	4080635b          	p.mac.zh.sl	t1,zero,s0,zero
1c008350:	001e3a93          	seqz	s5,t3
1c008354:	026e0333          	mul	t1,t3,t1
1c008358:	434a8333          	p.mac	t1,s5,s4
1c00835c:	02d30333          	mul	t1,t1,a3
1c008360:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008364:	b741                	j	1c0082e4 <Ker_Activation_SQ8+0x60>
1c008366:	14fe6933          	p.clipur	s2,t3,a5
1c00836a:	02d90933          	mul	s2,s2,a3
1c00836e:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c008372:	14fa6333          	p.clipur	t1,s4,a5
1c008376:	02d30333          	mul	t1,t1,a3
1c00837a:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c00837e:	b79d                	j	1c0082e4 <Ker_Activation_SQ8+0x60>
1c008380:	01c80933          	add	s2,a6,t3
1c008384:	14f96933          	p.clipur	s2,s2,a5
1c008388:	03190933          	mul	s2,s2,a7
1c00838c:	02d90933          	mul	s2,s2,a3
1c008390:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c008394:	01480333          	add	t1,a6,s4
1c008398:	14f36333          	p.clipur	t1,t1,a5
1c00839c:	03130333          	mul	t1,t1,a7
1c0083a0:	02d30333          	mul	t1,t1,a3
1c0083a4:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c0083a8:	bf35                	j	1c0082e4 <Ker_Activation_SQ8+0x60>
1c0083aa:	01c80933          	add	s2,a6,t3
1c0083ae:	14f96933          	p.clipur	s2,s2,a5
1c0083b2:	03190933          	mul	s2,s2,a7
1c0083b6:	03c90933          	mul	s2,s2,t3
1c0083ba:	02d90933          	mul	s2,s2,a3
1c0083be:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c0083c2:	01480333          	add	t1,a6,s4
1c0083c6:	14f36333          	p.clipur	t1,t1,a5
1c0083ca:	03130333          	mul	t1,t1,a7
1c0083ce:	03430333          	mul	t1,t1,s4
1c0083d2:	02d30333          	mul	t1,t1,a3
1c0083d6:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c0083da:	b729                	j	1c0082e4 <Ker_Activation_SQ8+0x60>
1c0083dc:	fc15b333          	p.bclr	t1,a1,30,1
1c0083e0:	06030a63          	beqz	t1,1c008454 <Ker_Activation_SQ8+0x1d0>
1c0083e4:	15fd                	addi	a1,a1,-1
1c0083e6:	95aa                	add	a1,a1,a0
1c0083e8:	00058503          	lb	a0,0(a1)
1c0083ec:	832a                	mv	t1,a0
1c0083ee:	06262b63          	p.beqimm	a2,2,1c008464 <Ker_Activation_SQ8+0x1e0>
1c0083f2:	4e09                	li	t3,2
1c0083f4:	02ce7c63          	bleu	a2,t3,1c00842c <Ker_Activation_SQ8+0x1a8>
1c0083f8:	08462963          	p.beqimm	a2,4,1c00848a <Ker_Activation_SQ8+0x206>
1c0083fc:	4e11                	li	t3,4
1c0083fe:	07c66b63          	bltu	a2,t3,1c008474 <Ker_Activation_SQ8+0x1f0>
1c008402:	04563563          	p.bneimm	a2,5,1c00844c <Ker_Activation_SQ8+0x1c8>
1c008406:	c1f51633          	p.extractu	a2,a0,0,31
1c00840a:	02f507b3          	mul	a5,a0,a5
1c00840e:	481d                	li	a6,7
1c008410:	410067db          	p.mac.zh.sl	a5,zero,a6,zero
1c008414:	00163813          	seqz	a6,a2
1c008418:	02f607b3          	mul	a5,a2,a5
1c00841c:	42a807b3          	p.mac	a5,a6,a0
1c008420:	02d786b3          	mul	a3,a5,a3
1c008424:	8336                	mv	t1,a3
1c008426:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c00842a:	a00d                	j	1c00844c <Ker_Activation_SQ8+0x1c8>
1c00842c:	ca19                	beqz	a2,1c008442 <Ker_Activation_SQ8+0x1be>
1c00842e:	00163f63          	p.bneimm	a2,1,1c00844c <Ker_Activation_SQ8+0x1c8>
1c008432:	04056333          	p.max	t1,a0,zero
1c008436:	02d306b3          	mul	a3,t1,a3
1c00843a:	8336                	mv	t1,a3
1c00843c:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008440:	a031                	j	1c00844c <Ker_Activation_SQ8+0x1c8>
1c008442:	02d506b3          	mul	a3,a0,a3
1c008446:	8336                	mv	t1,a3
1c008448:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c00844c:	14831333          	p.clip	t1,t1,8
1c008450:	00658023          	sb	t1,0(a1)
1c008454:	4472                	lw	s0,28(sp)
1c008456:	44e2                	lw	s1,24(sp)
1c008458:	4952                	lw	s2,20(sp)
1c00845a:	49c2                	lw	s3,16(sp)
1c00845c:	4a32                	lw	s4,12(sp)
1c00845e:	4aa2                	lw	s5,8(sp)
1c008460:	6105                	addi	sp,sp,32
1c008462:	8082                	ret
1c008464:	14f56333          	p.clipur	t1,a0,a5
1c008468:	02d306b3          	mul	a3,t1,a3
1c00846c:	8336                	mv	t1,a3
1c00846e:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008472:	bfe9                	j	1c00844c <Ker_Activation_SQ8+0x1c8>
1c008474:	9542                	add	a0,a0,a6
1c008476:	14f567b3          	p.clipur	a5,a0,a5
1c00847a:	031788b3          	mul	a7,a5,a7
1c00847e:	02d886b3          	mul	a3,a7,a3
1c008482:	8336                	mv	t1,a3
1c008484:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008488:	b7d1                	j	1c00844c <Ker_Activation_SQ8+0x1c8>
1c00848a:	982a                	add	a6,a6,a0
1c00848c:	14f867b3          	p.clipur	a5,a6,a5
1c008490:	031788b3          	mul	a7,a5,a7
1c008494:	02a88333          	mul	t1,a7,a0
1c008498:	02d306b3          	mul	a3,t1,a3
1c00849c:	8336                	mv	t1,a3
1c00849e:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c0084a2:	b76d                	j	1c00844c <Ker_Activation_SQ8+0x1c8>

1c0084a4 <KerParPoolActivation>:
1c0084a4:	1141                	addi	sp,sp,-16
1c0084a6:	c606                	sw	ra,12(sp)
1c0084a8:	88b6                	mv	a7,a3
1c0084aa:	00078683          	lb	a3,0(a5)
1c0084ae:	c6d9                	beqz	a3,1c00853c <KerParPoolActivation+0x98>
1c0084b0:	02c585b3          	mul	a1,a1,a2
1c0084b4:	03158333          	mul	t1,a1,a7
1c0084b8:	41170733          	sub	a4,a4,a7
1c0084bc:	02b705b3          	mul	a1,a4,a1
1c0084c0:	0ff6f693          	andi	a3,a3,255
1c0084c4:	0017c703          	lbu	a4,1(a5)
1c0084c8:	00278603          	lb	a2,2(a5)
1c0084cc:	00378e03          	lb	t3,3(a5)
1c0084d0:	00478883          	lb	a7,4(a5)
1c0084d4:	04282263          	p.beqimm	a6,2,1c008518 <KerParPoolActivation+0x74>
1c0084d8:	4789                	li	a5,2
1c0084da:	0107ff63          	bleu	a6,a5,1c0084f8 <KerParPoolActivation+0x54>
1c0084de:	04482963          	p.beqimm	a6,4,1c008530 <KerParPoolActivation+0x8c>
1c0084e2:	4791                	li	a5,4
1c0084e4:	04f86063          	bltu	a6,a5,1c008524 <KerParPoolActivation+0x80>
1c0084e8:	04583e63          	p.bneimm	a6,5,1c008544 <KerParPoolActivation+0xa0>
1c0084ec:	8872                	mv	a6,t3
1c0084ee:	87b2                	mv	a5,a2
1c0084f0:	4615                	li	a2,5
1c0084f2:	951a                	add	a0,a0,t1
1c0084f4:	3b41                	jal	1c008284 <Ker_Activation_SQ8>
1c0084f6:	a0b9                	j	1c008544 <KerParPoolActivation+0xa0>
1c0084f8:	00080a63          	beqz	a6,1c00850c <KerParPoolActivation+0x68>
1c0084fc:	04183463          	p.bneimm	a6,1,1c008544 <KerParPoolActivation+0xa0>
1c008500:	8872                	mv	a6,t3
1c008502:	87b2                	mv	a5,a2
1c008504:	4605                	li	a2,1
1c008506:	951a                	add	a0,a0,t1
1c008508:	3bb5                	jal	1c008284 <Ker_Activation_SQ8>
1c00850a:	a82d                	j	1c008544 <KerParPoolActivation+0xa0>
1c00850c:	8872                	mv	a6,t3
1c00850e:	87b2                	mv	a5,a2
1c008510:	4601                	li	a2,0
1c008512:	951a                	add	a0,a0,t1
1c008514:	3b85                	jal	1c008284 <Ker_Activation_SQ8>
1c008516:	a03d                	j	1c008544 <KerParPoolActivation+0xa0>
1c008518:	8872                	mv	a6,t3
1c00851a:	87b2                	mv	a5,a2
1c00851c:	4609                	li	a2,2
1c00851e:	951a                	add	a0,a0,t1
1c008520:	3395                	jal	1c008284 <Ker_Activation_SQ8>
1c008522:	a00d                	j	1c008544 <KerParPoolActivation+0xa0>
1c008524:	8872                	mv	a6,t3
1c008526:	87b2                	mv	a5,a2
1c008528:	460d                	li	a2,3
1c00852a:	951a                	add	a0,a0,t1
1c00852c:	3ba1                	jal	1c008284 <Ker_Activation_SQ8>
1c00852e:	a819                	j	1c008544 <KerParPoolActivation+0xa0>
1c008530:	8872                	mv	a6,t3
1c008532:	87b2                	mv	a5,a2
1c008534:	4611                	li	a2,4
1c008536:	951a                	add	a0,a0,t1
1c008538:	33b1                	jal	1c008284 <Ker_Activation_SQ8>
1c00853a:	a029                	j	1c008544 <KerParPoolActivation+0xa0>
1c00853c:	00182763          	p.beqimm	a6,1,1c00854a <KerParPoolActivation+0xa6>
1c008540:	02282163          	p.beqimm	a6,2,1c008562 <KerParPoolActivation+0xbe>
1c008544:	40b2                	lw	ra,12(sp)
1c008546:	0141                	addi	sp,sp,16
1c008548:	8082                	ret
1c00854a:	02c58833          	mul	a6,a1,a2
1c00854e:	411705b3          	sub	a1,a4,a7
1c008552:	4681                	li	a3,0
1c008554:	4605                	li	a2,1
1c008556:	030585b3          	mul	a1,a1,a6
1c00855a:	43180533          	p.mac	a0,a6,a7
1c00855e:	316d                	jal	1c008208 <Ker_ActivationScale1_SQ8>
1c008560:	b7d5                	j	1c008544 <KerParPoolActivation+0xa0>
1c008562:	02c58833          	mul	a6,a1,a2
1c008566:	411705b3          	sub	a1,a4,a7
1c00856a:	00278683          	lb	a3,2(a5)
1c00856e:	4609                	li	a2,2
1c008570:	030585b3          	mul	a1,a1,a6
1c008574:	43180533          	p.mac	a0,a6,a7
1c008578:	3941                	jal	1c008208 <Ker_ActivationScale1_SQ8>
1c00857a:	b7e9                	j	1c008544 <KerParPoolActivation+0xa0>

1c00857c <KerParPool2x2Stride2_ReLU_SQ8>:
	gap_waitbarrier(0);
}

void KerParPool2x2Stride2_ReLU_SQ8(KerPool_SQ8_T *Arg)

{
1c00857c:	7119                	addi	sp,sp,-128
1c00857e:	de86                	sw	ra,124(sp)
1c008580:	dca2                	sw	s0,120(sp)
1c008582:	daa6                	sw	s1,116(sp)
1c008584:	d8ca                	sw	s2,112(sp)
1c008586:	d6ce                	sw	s3,108(sp)
1c008588:	d4d2                	sw	s4,104(sp)
1c00858a:	d2d6                	sw	s5,100(sp)
1c00858c:	d0da                	sw	s6,96(sp)
1c00858e:	cede                	sw	s7,92(sp)
1c008590:	cce2                	sw	s8,88(sp)
1c008592:	cae6                	sw	s9,84(sp)
1c008594:	c8ea                	sw	s10,80(sp)
1c008596:	c6ee                	sw	s11,76(sp)
1c008598:	892a                	mv	s2,a0
	unsigned int FS=2,S=2;
	signed char * __restrict__ In = Arg->In;
1c00859a:	4100                	lw	s0,0(a0)
	unsigned int W = Arg->W, H = Arg->H;
1c00859c:	00a55703          	lhu	a4,10(a0)
1c0085a0:	d03a                	sw	a4,32(sp)
1c0085a2:	00e55783          	lhu	a5,14(a0)
1c0085a6:	d23e                	sw	a5,36(sp)
	unsigned int Feat = Arg->Feat;
1c0085a8:	00855703          	lhu	a4,8(a0)
	signed char * __restrict__ Out = Arg->Out;
1c0085ac:	415c                	lw	a5,4(a0)
1c0085ae:	dc3e                	sw	a5,56(sp)
	signed char * __restrict__ Infos = Arg->Infos;
1c0085b0:	515c                	lw	a5,36(a0)
1c0085b2:	de3e                	sw	a5,60(sp)
	int PoolMax = Arg->PoolMax;
1c0085b4:	01254b03          	lbu	s6,18(a0)
	v4s PadIn = Arg->Pad;
1c0085b8:	5104                	lw	s1,32(a0)

	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c0085ba:	f1402af3          	csrr	s5,mhartid
1c0085be:	c80a9ab3          	p.extractu	s5,s5,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0085c2:	f83737b3          	p.bclr	a5,a4,28,3
1c0085c6:	00f037b3          	snez	a5,a5
1c0085ca:	00375693          	srli	a3,a4,0x3
1c0085ce:	97b6                	add	a5,a5,a3
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c0085d0:	02fa8ab3          	mul	s5,s5,a5
1c0085d4:	97d6                	add	a5,a5,s5
1c0085d6:	04e7c7b3          	p.min	a5,a5,a4
1c0085da:	da3e                	sw	a5,52(sp)
1c0085dc:	8bbe                	mv	s7,a5

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c0085de:	7804f657          	pv.extract.b	a2,s1,0
1c0085e2:	00c55503          	lhu	a0,12(a0)
1c0085e6:	ffe50993          	addi	s3,a0,-2
1c0085ea:	99b2                	add	s3,s3,a2
1c0085ec:	7a04f7d7          	pv.extract.b	a5,s1,1
1c0085f0:	82f9a9db          	p.addun	s3,s3,a5,1
1c0085f4:	0985                	addi	s3,s3,1
1c0085f6:	d44e                	sw	s3,40(sp)
	return ((Pad+Stride-1)/Stride);
1c0085f8:	00160793          	addi	a5,a2,1
1c0085fc:	8385                	srli	a5,a5,0x1
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c0085fe:	04f9c7b3          	p.min	a5,s3,a5
1c008602:	ce3e                	sw	a5,28(sp)
1c008604:	4689                	li	a3,2
1c008606:	4589                	li	a1,2
1c008608:	d90ff0ef          	jal	ra,1c007b98 <LastDefinedOutput>
1c00860c:	4772                	lw	a4,28(sp)
1c00860e:	04a76533          	p.max	a0,a4,a0
1c008612:	d62a                	sw	a0,44(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c008614:	7814f657          	pv.extract.b	a2,s1,2
1c008618:	01095503          	lhu	a0,16(s2)
1c00861c:	ffe50a13          	addi	s4,a0,-2
1c008620:	9a32                	add	s4,s4,a2
1c008622:	7a14f7d7          	pv.extract.b	a5,s1,3
1c008626:	82fa2a5b          	p.addun	s4,s4,a5,1
1c00862a:	0a05                	addi	s4,s4,1
1c00862c:	d852                	sw	s4,48(sp)
	return ((Pad+Stride-1)/Stride);
1c00862e:	00160913          	addi	s2,a2,1
1c008632:	00195913          	srli	s2,s2,0x1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c008636:	052a4933          	p.min	s2,s4,s2
1c00863a:	4689                	li	a3,2
1c00863c:	4589                	li	a1,2
1c00863e:	d5aff0ef          	jal	ra,1c007b98 <LastDefinedOutput>
1c008642:	04a96c33          	p.max	s8,s2,a0

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c008646:	040b1463          	bnez	s6,1c00868e <KerParPool2x2Stride2_ReLU_SQ8+0x112>
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00864a:	097af363          	bleu	s7,s5,1c0086d0 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
1c00864e:	5782                	lw	a5,32(sp)
1c008650:	5712                	lw	a4,36(sp)
1c008652:	02e78d33          	mul	s10,a5,a4
1c008656:	03498cb3          	mul	s9,s3,s4
1c00865a:	43aa8433          	p.mac	s0,s5,s10
1c00865e:	5de2                	lw	s11,56(sp)
1c008660:	439a8db3          	p.mac	s11,s5,s9
1c008664:	8b56                	mv	s6,s5
1c008666:	c626                	sw	s1,12(sp)
1c008668:	c426                	sw	s1,8(sp)
1c00866a:	c262                	sw	s8,4(sp)
1c00866c:	c04a                	sw	s2,0(sp)
1c00866e:	58c2                	lw	a7,48(sp)
1c008670:	5832                	lw	a6,44(sp)
1c008672:	47f2                	lw	a5,28(sp)
1c008674:	5722                	lw	a4,40(sp)
1c008676:	86ee                	mv	a3,s11
1c008678:	5612                	lw	a2,36(sp)
1c00867a:	5582                	lw	a1,32(sp)
1c00867c:	8522                	mv	a0,s0
1c00867e:	8fdff0ef          	jal	ra,1c007f7a <KerAvgPool2x2Stride2_SQ8>
1c008682:	0b05                	addi	s6,s6,1
1c008684:	946a                	add	s0,s0,s10
1c008686:	9de6                	add	s11,s11,s9
1c008688:	fd6b9fe3          	bne	s7,s6,1c008666 <KerParPool2x2Stride2_ReLU_SQ8+0xea>
1c00868c:	a091                	j	1c0086d0 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00868e:	057af163          	bleu	s7,s5,1c0086d0 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
1c008692:	5782                	lw	a5,32(sp)
1c008694:	5712                	lw	a4,36(sp)
1c008696:	02e78d33          	mul	s10,a5,a4
1c00869a:	03498cb3          	mul	s9,s3,s4
1c00869e:	43aa8433          	p.mac	s0,s5,s10
1c0086a2:	5de2                	lw	s11,56(sp)
1c0086a4:	439a8db3          	p.mac	s11,s5,s9
1c0086a8:	8b56                	mv	s6,s5
1c0086aa:	c626                	sw	s1,12(sp)
1c0086ac:	c426                	sw	s1,8(sp)
1c0086ae:	c262                	sw	s8,4(sp)
1c0086b0:	c04a                	sw	s2,0(sp)
1c0086b2:	58c2                	lw	a7,48(sp)
1c0086b4:	5832                	lw	a6,44(sp)
1c0086b6:	47f2                	lw	a5,28(sp)
1c0086b8:	5722                	lw	a4,40(sp)
1c0086ba:	86ee                	mv	a3,s11
1c0086bc:	5612                	lw	a2,36(sp)
1c0086be:	5582                	lw	a1,32(sp)
1c0086c0:	8522                	mv	a0,s0
1c0086c2:	cf0ff0ef          	jal	ra,1c007bb2 <KerMaxPool2x2Stride2_SQ8>
1c0086c6:	0b05                	addi	s6,s6,1
1c0086c8:	946a                	add	s0,s0,s10
1c0086ca:	9de6                	add	s11,s11,s9
1c0086cc:	fd6b9fe3          	bne	s7,s6,1c0086aa <KerParPool2x2Stride2_ReLU_SQ8+0x12e>

	KerParPoolActivation(Out, Wo, Ho, First, Last, Infos, ACT_RELU);
1c0086d0:	4805                	li	a6,1
1c0086d2:	57f2                	lw	a5,60(sp)
1c0086d4:	5752                	lw	a4,52(sp)
1c0086d6:	86d6                	mv	a3,s5
1c0086d8:	8652                	mv	a2,s4
1c0086da:	85ce                	mv	a1,s3
1c0086dc:	5562                	lw	a0,56(sp)
1c0086de:	33d9                	jal	1c0084a4 <KerParPoolActivation>
1c0086e0:	002047b7          	lui	a5,0x204
1c0086e4:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0086e8:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
}
1c0086ec:	50f6                	lw	ra,124(sp)
1c0086ee:	5466                	lw	s0,120(sp)
1c0086f0:	54d6                	lw	s1,116(sp)
1c0086f2:	5946                	lw	s2,112(sp)
1c0086f4:	59b6                	lw	s3,108(sp)
1c0086f6:	5a26                	lw	s4,104(sp)
1c0086f8:	5a96                	lw	s5,100(sp)
1c0086fa:	5b06                	lw	s6,96(sp)
1c0086fc:	4bf6                	lw	s7,92(sp)
1c0086fe:	4c66                	lw	s8,88(sp)
1c008700:	4cd6                	lw	s9,84(sp)
1c008702:	4d46                	lw	s10,80(sp)
1c008704:	4db6                	lw	s11,76(sp)
1c008706:	6109                	addi	sp,sp,128
1c008708:	8082                	ret

1c00870a <KerParSoftMax_SQ8>:
}
#endif

void KerParSoftMax_SQ8(KerSoftMax_SQ8_T *Arg)

{
1c00870a:	7139                	addi	sp,sp,-64
1c00870c:	de22                	sw	s0,60(sp)
1c00870e:	dc26                	sw	s1,56(sp)
1c008710:	da4a                	sw	s2,52(sp)
1c008712:	d84e                	sw	s3,48(sp)
1c008714:	d652                	sw	s4,44(sp)
1c008716:	d456                	sw	s5,40(sp)
1c008718:	d25a                	sw	s6,36(sp)
1c00871a:	d05e                	sw	s7,32(sp)
1c00871c:	ce62                	sw	s8,28(sp)
1c00871e:	cc66                	sw	s9,24(sp)
1c008720:	ca6a                	sw	s10,20(sp)
1c008722:	c86e                	sw	s11,16(sp)
	signed char * __restrict__ In = Arg->In;
1c008724:	00052f03          	lw	t5,0(a0)
	short int * __restrict__ Out = Arg->Out;
1c008728:	450c                	lw	a1,8(a0)
1c00872a:	c42e                	sw	a1,8(sp)
	int N = Arg->N;
1c00872c:	00455e83          	lhu	t4,4(a0)
	int Norm = Arg->Infos[AT_INF_BIASL_SM];
1c008730:	455c                	lw	a5,12(a0)
1c008732:	00078a03          	lb	s4,0(a5)
	static L1_CL_MEM int Reduct[8];
	int M, Sum, InvSum;
	unsigned int CoreId = gap_coreid();
1c008736:	f1402473          	csrr	s0,mhartid
1c00873a:	c8041433          	p.extractu	s0,s0,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00873e:	f83eb7b3          	p.bclr	a5,t4,28,3
1c008742:	00f037b3          	snez	a5,a5
1c008746:	003ed713          	srli	a4,t4,0x3
1c00874a:	97ba                	add	a5,a5,a4
	unsigned int ChunkCell = ChunkSize(N);
	unsigned int First = CoreId*ChunkCell;
1c00874c:	02f40333          	mul	t1,s0,a5
	unsigned int Last  = Min(First+ChunkCell, N);
1c008750:	979a                	add	a5,a5,t1
1c008752:	05d7ceb3          	p.min	t4,a5,t4
	unsigned int *Red = &Reduct[CoreId];

	/* Turns In into distribution */
	/* Find max */
	M = 0x80000000;
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c008756:	8f9a                	mv	t6,t1
1c008758:	0dd37563          	bleu	t4,t1,1c008822 <KerParSoftMax_SQ8+0x118>
1c00875c:	006f06b3          	add	a3,t5,t1
	M = 0x80000000;
1c008760:	80000737          	lui	a4,0x80000
1c008764:	406e87b3          	sub	a5,t4,t1
1c008768:	0047c0fb          	lp.setup	x1,a5,1c008770 <KerParSoftMax_SQ8+0x66>
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c00876c:	0016860b          	p.lb	a2,1(a3!)
1c008770:	04c76733          	p.max	a4,a4,a2
	Reduct[CoreId] = M;
1c008774:	00241793          	slli	a5,s0,0x2
1c008778:	100006b7          	lui	a3,0x10000
1c00877c:	02068693          	addi	a3,a3,32 # 10000020 <Reduct.15734>
1c008780:	00e6e7a3          	p.sw	a4,a5(a3)
1c008784:	002047b7          	lui	a5,0x204
1c008788:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00878c:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	if (CoreId==0) {
1c008790:	1e041e63          	bnez	s0,1c00898c <KerParSoftMax_SQ8+0x282>
		M = Reduct[0];
1c008794:	10000737          	lui	a4,0x10000
1c008798:	02070713          	addi	a4,a4,32 # 10000020 <Reduct.15734>
1c00879c:	0047268b          	p.lw	a3,4(a4!)
1c0087a0:	007250fb          	lp.setupi	x1,7,1c0087a8 <KerParSoftMax_SQ8+0x9e>
		for (int i=1; i<gap_ncore(); i++) M = Max(M, Reduct[i]);
1c0087a4:	0047260b          	p.lw	a2,4(a4!)
1c0087a8:	04c6e6b3          	p.max	a3,a3,a2
		//for (int i=1; i<8; i++) M = Max(M, Reduct[i]);
		Reduct[0] = M;
1c0087ac:	100007b7          	lui	a5,0x10000
1c0087b0:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c0087b4:	c394                	sw	a3,0(a5)
1c0087b6:	00204737          	lui	a4,0x204
1c0087ba:	20070713          	addi	a4,a4,512 # 204200 <__L2+0x184200>
1c0087be:	01c76683          	p.elw	a3,28(a4)
	gap_waitbarrier(0);
	/* Computes Exp(In[i]-M) for all in and sum results.
	   Since we substract max from In[i] we always have exp(X) with X<=0 thus exp(X)<=1.0
	   By definition of softmax Sum is <= 1
	*/
	M = Reduct[0];
1c0087c2:	0007a983          	lw	s3,0(a5)
	Sum = 0;
	for (int i=First; i<Last; i++) {
1c0087c6:	1dd36f63          	bltu	t1,t4,1c0089a4 <KerParSoftMax_SQ8+0x29a>
		unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(Norm));
		Out[i] = Exp; Sum += Exp;
	}
	Reduct[CoreId] = Sum;
1c0087ca:	040a                	slli	s0,s0,0x2
1c0087cc:	100007b7          	lui	a5,0x10000
1c0087d0:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c0087d4:	0007e423          	p.sw	zero,s0(a5)
1c0087d8:	002047b7          	lui	a5,0x204
1c0087dc:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0087e0:	01c7e703          	p.elw	a4,28(a5)
1c0087e4:	10000737          	lui	a4,0x10000
1c0087e8:	02070713          	addi	a4,a4,32 # 10000020 <Reduct.15734>
	gap_waitbarrier(0);
	if (CoreId==0) {
		Sum = 0;
1c0087ec:	4681                	li	a3,0
1c0087ee:	008250fb          	lp.setupi	x1,8,1c0087f6 <KerParSoftMax_SQ8+0xec>
		for (int i=0; i<gap_ncore(); i++) Sum += Reduct[i];
1c0087f2:	0047260b          	p.lw	a2,4(a4!)
1c0087f6:	96b2                	add	a3,a3,a2
		Reduct[0] = Sum;
1c0087f8:	100007b7          	lui	a5,0x10000
1c0087fc:	02d7a023          	sw	a3,32(a5) # 10000020 <Reduct.15734>
1c008800:	002047b7          	lui	a5,0x204
1c008804:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c008808:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
	Sum = Reduct[0];
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
	for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c00880c:	13d37c63          	bleu	t4,t1,1c008944 <KerParSoftMax_SQ8+0x23a>
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
1c008810:	100007b7          	lui	a5,0x10000
1c008814:	0207a783          	lw	a5,32(a5) # 10000020 <Reduct.15734>
1c008818:	3fff8637          	lui	a2,0x3fff8
1c00881c:	02f64633          	div	a2,a2,a5
1c008820:	a8cd                	j	1c008912 <KerParSoftMax_SQ8+0x208>
	M = 0x80000000;
1c008822:	80000737          	lui	a4,0x80000
1c008826:	b7b9                	j	1c008774 <KerParSoftMax_SQ8+0x6a>
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c008828:	0786                	slli	a5,a5,0x1
1c00882a:	00fc8733          	add	a4,s9,a5
1c00882e:	00075583          	lhu	a1,0(a4) # 80000000 <pulp__FC+0x80000001>
1c008832:	97e2                	add	a5,a5,s8
1c008834:	0007d703          	lhu	a4,0(a5)
	FractX_s = FractX; Z_s = FractX; Result = 0;
1c008838:	1008c8b3          	p.exths	a7,a7
1c00883c:	002a8813          	addi	a6,s5,2
1c008840:	87c6                	mv	a5,a7
1c008842:	4501                	li	a0,0
1c008844:	410d8633          	sub	a2,s11,a6
1c008848:	1679                	addi	a2,a2,-2
1c00884a:	8205                	srli	a2,a2,0x1
1c00884c:	0605                	addi	a2,a2,1
1c00884e:	008640fb          	lp.setup	x1,a2,1c00885e <KerParSoftMax_SQ8+0x154>
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c008852:	00285d0b          	p.lhu	s10,2(a6!)
1c008856:	43a78533          	p.mac	a0,a5,s10
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c00885a:	9f17c7db          	p.mac.sl.zl	a5,a5,a7,a5
1c00885e:	1007c7b3          	p.exths	a5,a5
	Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c008862:	1e0567db          	p.mac.zh.zl	a5,a0,zero,a5
1c008866:	97ca                	add	a5,a5,s2
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c008868:	1ee7c75b          	p.mac.zl.zl	a4,a5,a4,a5
1c00886c:	0177f7b3          	and	a5,a5,s7
1c008870:	42b78733          	p.mac	a4,a5,a1
1c008874:	87ba                	mv	a5,a4
	if (Result && (X > 0x7FFFFFFF)) 
1c008876:	c319                	beqz	a4,1c00887c <KerParSoftMax_SQ8+0x172>
1c008878:	0406c663          	bltz	a3,1c0088c4 <KerParSoftMax_SQ8+0x1ba>
		Out[i] = Exp; Sum += Exp;
1c00887c:	873e                	mv	a4,a5
1c00887e:	00e2912b          	p.sh	a4,2(t0!)
1c008882:	93be                	add	t2,t2,a5
1c008884:	1e7d                	addi	t3,t3,-1
1c008886:	000e1363          	bnez	t3,1c00888c <KerParSoftMax_SQ8+0x182>
1c00888a:	a0b1                	j	1c0088d6 <KerParSoftMax_SQ8+0x1cc>
		unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(Norm));
1c00888c:	001f068b          	p.lb	a3,1(t5!)
1c008890:	413686b3          	sub	a3,a3,s3
1c008894:	014696b3          	sll	a3,a3,s4
1c008898:	8636                	mv	a2,a3
	if (!X) return 0x8000;
1c00889a:	87a6                	mv	a5,s1
1c00889c:	d2e5                	beqz	a3,1c00887c <KerParSoftMax_SQ8+0x172>
	Y = Abs(X);
1c00889e:	04068733          	p.avg	a4,a3,zero
	IntX = (Y >> 15);
1c0088a2:	40f75793          	srai	a5,a4,0xf
	FractX = (Y & 0x7FFF);
1c0088a6:	012778b3          	and	a7,a4,s2
	if (gap_bitextractu(FractX, 1, 14)) {
1c0088aa:	01189593          	slli	a1,a7,0x11
1c0088ae:	0005d563          	bgez	a1,1c0088b8 <KerParSoftMax_SQ8+0x1ae>
		FractX -= 0x8000; IntX++;
1c0088b2:	75e1                	lui	a1,0xffff8
1c0088b4:	98ae                	add	a7,a7,a1
1c0088b6:	0785                	addi	a5,a5,1
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c0088b8:	f6fb58e3          	ble	a5,s6,1c008828 <KerParSoftMax_SQ8+0x11e>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c0088bc:	00e60963          	beq	a2,a4,1c0088ce <KerParSoftMax_SQ8+0x1c4>
1c0088c0:	4781                	li	a5,0
1c0088c2:	bf6d                	j	1c00887c <KerParSoftMax_SQ8+0x172>
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c0088c4:	4732                	lw	a4,12(sp)
1c0088c6:	02f747b3          	div	a5,a4,a5
1c0088ca:	8785                	srai	a5,a5,0x1
1c0088cc:	bf45                	j	1c00887c <KerParSoftMax_SQ8+0x172>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c0088ce:	47b2                	lw	a5,12(sp)
1c0088d0:	b775                	j	1c00887c <KerParSoftMax_SQ8+0x172>
1c0088d2:	4705                	li	a4,1
1c0088d4:	a899                	j	1c00892a <KerParSoftMax_SQ8+0x220>
	Reduct[CoreId] = Sum;
1c0088d6:	00241713          	slli	a4,s0,0x2
1c0088da:	100007b7          	lui	a5,0x10000
1c0088de:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c0088e2:	0077e723          	p.sw	t2,a4(a5)
1c0088e6:	002047b7          	lui	a5,0x204
1c0088ea:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0088ee:	01c7e703          	p.elw	a4,28(a5)
	if (CoreId==0) {
1c0088f2:	ee0409e3          	beqz	s0,1c0087e4 <KerParSoftMax_SQ8+0xda>
1c0088f6:	002047b7          	lui	a5,0x204
1c0088fa:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0088fe:	01c7e703          	p.elw	a4,28(a5)
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
1c008902:	100007b7          	lui	a5,0x10000
1c008906:	0207a783          	lw	a5,32(a5) # 10000020 <Reduct.15734>
1c00890a:	3fff8637          	lui	a2,0x3fff8
1c00890e:	02f64633          	div	a2,a2,a5
1c008912:	0306                	slli	t1,t1,0x1
1c008914:	47a2                	lw	a5,8(sp)
1c008916:	933e                	add	t1,t1,a5
	for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c008918:	46bd                	li	a3,15
1c00891a:	41fe8733          	sub	a4,t4,t6
1c00891e:	001f8793          	addi	a5,t6,1
1c008922:	fafee8e3          	bltu	t4,a5,1c0088d2 <KerParSoftMax_SQ8+0x1c8>
1c008926:	fa0e86e3          	beqz	t4,1c0088d2 <KerParSoftMax_SQ8+0x1c8>
1c00892a:	00c740fb          	lp.setup	x1,a4,1c008942 <KerParSoftMax_SQ8+0x238>
1c00892e:	00031783          	lh	a5,0(t1)
1c008932:	02c787b3          	mul	a5,a5,a2
1c008936:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c00893a:	040787b3          	p.avg	a5,a5,zero
1c00893e:	00f3112b          	p.sh	a5,2(t1!)
1c008942:	0f85                	addi	t6,t6,1
1c008944:	002047b7          	lui	a5,0x204
1c008948:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00894c:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);

}
1c008950:	5472                	lw	s0,60(sp)
1c008952:	54e2                	lw	s1,56(sp)
1c008954:	5952                	lw	s2,52(sp)
1c008956:	59c2                	lw	s3,48(sp)
1c008958:	5a32                	lw	s4,44(sp)
1c00895a:	5aa2                	lw	s5,40(sp)
1c00895c:	5b12                	lw	s6,36(sp)
1c00895e:	5b82                	lw	s7,32(sp)
1c008960:	4c72                	lw	s8,28(sp)
1c008962:	4ce2                	lw	s9,24(sp)
1c008964:	4d52                	lw	s10,20(sp)
1c008966:	4dc2                	lw	s11,16(sp)
1c008968:	6121                	addi	sp,sp,64
1c00896a:	8082                	ret
	Reduct[CoreId] = Sum;
1c00896c:	040a                	slli	s0,s0,0x2
1c00896e:	100007b7          	lui	a5,0x10000
1c008972:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c008976:	0007e423          	p.sw	zero,s0(a5)
1c00897a:	002047b7          	lui	a5,0x204
1c00897e:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c008982:	01c7e703          	p.elw	a4,28(a5)
1c008986:	01c7e703          	p.elw	a4,28(a5)
1c00898a:	bf6d                	j	1c008944 <KerParSoftMax_SQ8+0x23a>
1c00898c:	002047b7          	lui	a5,0x204
1c008990:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c008994:	01c7e703          	p.elw	a4,28(a5)
	M = Reduct[0];
1c008998:	100007b7          	lui	a5,0x10000
1c00899c:	0207a983          	lw	s3,32(a5) # 10000020 <Reduct.15734>
	for (int i=First; i<Last; i++) {
1c0089a0:	fdd376e3          	bleu	t4,t1,1c00896c <KerParSoftMax_SQ8+0x262>
1c0089a4:	00131293          	slli	t0,t1,0x1
1c0089a8:	4722                	lw	a4,8(sp)
1c0089aa:	92ba                	add	t0,t0,a4
1c0089ac:	9f1a                	add	t5,t5,t1
	Sum = 0;
1c0089ae:	4381                	li	t2,0
	if (!X) return 0x8000;
1c0089b0:	64a1                	lui	s1,0x8
	FractX = (Y & 0x7FFF);
1c0089b2:	fff48913          	addi	s2,s1,-1 # 7fff <__rt_stack_size+0x77ff>
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c0089b6:	4b2d                	li	s6,11
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c0089b8:	1c010cb7          	lui	s9,0x1c010
1c0089bc:	1a4c8c93          	addi	s9,s9,420 # 1c0101a4 <IntegerExpLUT>
1c0089c0:	1c010c37          	lui	s8,0x1c010
1c0089c4:	18cc0c13          	addi	s8,s8,396 # 1c01018c <FractionExpLUT>
1c0089c8:	1c010ab7          	lui	s5,0x1c010
1c0089cc:	178a8a93          	addi	s5,s5,376 # 1c010178 <ExpCoeffLUT>
1c0089d0:	012a8d93          	addi	s11,s5,18
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c0089d4:	6bc1                	lui	s7,0x10
1c0089d6:	1bfd                	addi	s7,s7,-1
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c0089d8:	800007b7          	lui	a5,0x80000
1c0089dc:	fff7c793          	not	a5,a5
1c0089e0:	c63e                	sw	a5,12(sp)
		FractX -= 0x8000; IntX++;
1c0089e2:	406e8e33          	sub	t3,t4,t1
1c0089e6:	b55d                	j	1c00888c <KerParSoftMax_SQ8+0x182>

1c0089e8 <CNN_NormBW_offset_fps>:
	gap_waitbarrier(0);
}

void CNN_NormBW_offset_fps(KerNormBW_fps_T *Arg)
{
	unsigned char *__restrict__ In = Arg->In;
1c0089e8:	4114                	lw	a3,0(a0)
	signed char *__restrict__ Out = Arg->Out;
1c0089ea:	4150                	lw	a2,4(a0)
	unsigned int W = Arg->W;
	unsigned int H = Arg->H;
	unsigned int Sz = W * H;
1c0089ec:	451c                	lw	a5,8(a0)
1c0089ee:	4548                	lw	a0,12(a0)
1c0089f0:	02a78533          	mul	a0,a5,a0
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c0089f4:	f14025f3          	csrr	a1,mhartid
1c0089f8:	c80595b3          	p.extractu	a1,a1,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0089fc:	f8353733          	p.bclr	a4,a0,28,3
1c008a00:	00e03733          	snez	a4,a4
1c008a04:	00355793          	srli	a5,a0,0x3
1c008a08:	973e                	add	a4,a4,a5
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c008a0a:	02e585b3          	mul	a1,a1,a4
1c008a0e:	00e587b3          	add	a5,a1,a4
1c008a12:	04a7c7b3          	p.min	a5,a5,a0

	for (int Idx=First; Idx<Last; Idx++) {
1c008a16:	00f5fd63          	bleu	a5,a1,1c008a30 <CNN_NormBW_offset_fps+0x48>
1c008a1a:	962e                	add	a2,a2,a1
1c008a1c:	96ae                	add	a3,a3,a1
1c008a1e:	8f8d                	sub	a5,a5,a1
1c008a20:	0067c0fb          	lp.setup	x1,a5,1c008a2c <CNN_NormBW_offset_fps+0x44>
		Out[Idx] = In[Idx] - 128;
1c008a24:	0016c70b          	p.lbu	a4,1(a3!)
1c008a28:	f8070713          	addi	a4,a4,-128
1c008a2c:	00e600ab          	p.sb	a4,1(a2!) # 3fff8001 <__l2_end+0x23fe72b9>
1c008a30:	002047b7          	lui	a5,0x204
1c008a34:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c008a38:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c008a3c:	8082                	ret

1c008a3e <pi_flash_open>:


int pi_flash_open(struct pi_device *device)
{
  struct pi_flash_conf *conf = (struct pi_flash_conf *)device->config;
  pi_flash_api_t *api = (pi_flash_api_t *)conf->api;
1c008a3e:	415c                	lw	a5,4(a0)
1c008a40:	439c                	lw	a5,0(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c008a42:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c008a46:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c008a48:	8302                	jr	t1

1c008a4a <__flash_conf_init>:
}


void __flash_conf_init(struct pi_flash_conf *conf)
{
}
1c008a4a:	8082                	ret

1c008a4c <pi_task_wait_on.isra.3>:
{
  pi_task_t task;
  int result = pi_fs_direct_read_async(file, buffer, size, pi_task_block(&task));
  pi_task_wait_on(&task);
  return result;
}
1c008a4c:	1141                	addi	sp,sp,-16
1c008a4e:	c422                	sw	s0,8(sp)
1c008a50:	c226                	sw	s1,4(sp)
1c008a52:	c606                	sw	ra,12(sp)
1c008a54:	c04a                	sw	s2,0(sp)
1c008a56:	842a                	mv	s0,a0
1c008a58:	00040783          	lb	a5,0(s0)
1c008a5c:	c799                	beqz	a5,1c008a6a <pi_task_wait_on.isra.3+0x1e>
1c008a5e:	40b2                	lw	ra,12(sp)
1c008a60:	4422                	lw	s0,8(sp)
1c008a62:	4492                	lw	s1,4(sp)
1c008a64:	4902                	lw	s2,0(sp)
1c008a66:	0141                	addi	sp,sp,16
1c008a68:	8082                	ret
1c008a6a:	30047973          	csrrci	s2,mstatus,8
1c008a6e:	4585                	li	a1,1
1c008a70:	01c00513          	li	a0,28
1c008a74:	248030ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c008a78:	30091073          	csrw	mstatus,s2
1c008a7c:	bff1                	j	1c008a58 <pi_task_wait_on.isra.3+0xc>

1c008a7e <pi_fs_conf_init>:
1c008a7e:	00052023          	sw	zero,0(a0)
1c008a82:	00052423          	sw	zero,8(a0)
1c008a86:	00050623          	sb	zero,12(a0)
1c008a8a:	00052823          	sw	zero,16(a0)
1c008a8e:	8082                	ret

1c008a90 <pi_fs_mount>:
1c008a90:	4158                	lw	a4,4(a0)
1c008a92:	4b1c                	lw	a5,16(a4)
1c008a94:	eb89                	bnez	a5,1c008aa6 <pi_fs_mount+0x16>
1c008a96:	431c                	lw	a5,0(a4)
1c008a98:	cb99                	beqz	a5,1c008aae <pi_fs_mount+0x1e>
1c008a9a:	0017bf63          	p.bneimm	a5,1,1c008ab8 <pi_fs_mount+0x28>
1c008a9e:	1c0107b7          	lui	a5,0x1c010
1c008aa2:	5e878793          	addi	a5,a5,1512 # 1c0105e8 <__pi_host_fs_api>
1c008aa6:	0007a303          	lw	t1,0(a5)
1c008aaa:	c11c                	sw	a5,0(a0)
1c008aac:	8302                	jr	t1
1c008aae:	1c0107b7          	lui	a5,0x1c010
1c008ab2:	5c078793          	addi	a5,a5,1472 # 1c0105c0 <__pi_read_fs_api>
1c008ab6:	bfc5                	j	1c008aa6 <pi_fs_mount+0x16>
1c008ab8:	557d                	li	a0,-1
1c008aba:	8082                	ret

1c008abc <pi_fs_unmount>:
1c008abc:	411c                	lw	a5,0(a0)
1c008abe:	0047a303          	lw	t1,4(a5)
1c008ac2:	8302                	jr	t1

1c008ac4 <pi_fs_open>:
1c008ac4:	411c                	lw	a5,0(a0)
1c008ac6:	0087a303          	lw	t1,8(a5)
1c008aca:	8302                	jr	t1

1c008acc <pi_fs_read_async>:
1c008acc:	415c                	lw	a5,4(a0)
1c008ace:	0107a303          	lw	t1,16(a5)
1c008ad2:	8302                	jr	t1

1c008ad4 <pi_fs_read>:
1c008ad4:	7175                	addi	sp,sp,-144
1c008ad6:	4785                	li	a5,1
1c008ad8:	868a                	mv	a3,sp
1c008ada:	c706                	sw	ra,140(sp)
1c008adc:	c522                	sw	s0,136(sp)
1c008ade:	cc3e                	sw	a5,24(sp)
1c008ae0:	d43e                	sw	a5,40(sp)
1c008ae2:	c202                	sw	zero,4(sp)
1c008ae4:	00010a23          	sb	zero,20(sp)
1c008ae8:	37d5                	jal	1c008acc <pi_fs_read_async>
1c008aea:	842a                	mv	s0,a0
1c008aec:	0848                	addi	a0,sp,20
1c008aee:	3fb9                	jal	1c008a4c <pi_task_wait_on.isra.3>
1c008af0:	8522                	mv	a0,s0
1c008af2:	40ba                	lw	ra,140(sp)
1c008af4:	442a                	lw	s0,136(sp)
1c008af6:	6149                	addi	sp,sp,144
1c008af8:	8082                	ret

1c008afa <pi_fs_write_async>:
1c008afa:	415c                	lw	a5,4(a0)
1c008afc:	0187a303          	lw	t1,24(a5)
1c008b00:	8302                	jr	t1

1c008b02 <pi_fs_write>:
1c008b02:	7175                	addi	sp,sp,-144
1c008b04:	4785                	li	a5,1
1c008b06:	868a                	mv	a3,sp
1c008b08:	c706                	sw	ra,140(sp)
1c008b0a:	c522                	sw	s0,136(sp)
1c008b0c:	cc3e                	sw	a5,24(sp)
1c008b0e:	d43e                	sw	a5,40(sp)
1c008b10:	c202                	sw	zero,4(sp)
1c008b12:	00010a23          	sb	zero,20(sp)
1c008b16:	37d5                	jal	1c008afa <pi_fs_write_async>
1c008b18:	842a                	mv	s0,a0
1c008b1a:	0848                	addi	a0,sp,20
1c008b1c:	3f05                	jal	1c008a4c <pi_task_wait_on.isra.3>
1c008b1e:	8522                	mv	a0,s0
1c008b20:	40ba                	lw	ra,140(sp)
1c008b22:	442a                	lw	s0,136(sp)
1c008b24:	6149                	addi	sp,sp,144
1c008b26:	8082                	ret

1c008b28 <pi_fs_copy_async>:

int32_t pi_fs_copy_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc, pi_task_t *task)
{
  return file->api->copy(file, index, buffer, size, ext2loc, task);
1c008b28:	00452803          	lw	a6,4(a0)
1c008b2c:	02082303          	lw	t1,32(a6)
1c008b30:	8302                	jr	t1

1c008b32 <pi_flash_read_async>:
}

static inline void pi_flash_read_async(struct pi_device *device, uint32_t pi_flash_addr, void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->read_async(device, pi_flash_addr, data, size, task);
1c008b32:	411c                	lw	a5,0(a0)
1c008b34:	00c7a303          	lw	t1,12(a5)
1c008b38:	8302                	jr	t1

1c008b3a <__pi_read_fs_write>:
    return block_size;
}

static int32_t __pi_read_fs_write(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *task)
{
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c008b3a:	411c                	lw	a5,0(a0)
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c008b3c:	01852803          	lw	a6,24(a0)
{
1c008b40:	8736                	mv	a4,a3
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c008b42:	4794                	lw	a3,8(a5)
    unsigned int addr = file->addr + file->offset;
1c008b44:	495c                	lw	a5,20(a0)
{
1c008b46:	88ae                	mv	a7,a1
1c008b48:	1141                	addi	sp,sp,-16
    unsigned int addr = file->addr + file->offset;
1c008b4a:	010785b3          	add	a1,a5,a6
    if(file->offset + size > file->fs_file.size)
1c008b4e:	00c52803          	lw	a6,12(a0)
{
1c008b52:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c008b54:	00c78333          	add	t1,a5,a2
1c008b58:	00687463          	bleu	t1,a6,1c008b60 <__pi_read_fs_write+0x26>
    {
        real_size = file->fs_file.size - file->offset;
1c008b5c:	40f80633          	sub	a2,a6,a5
    }
    file->offset += real_size;
1c008b60:	97b2                	add	a5,a5,a2
1c008b62:	c95c                	sw	a5,20(a0)
    
    pi_flash_program_async(fs->flash, addr, (void *) buffer, real_size, task);
1c008b64:	4288                	lw	a0,0(a3)
}

static inline void pi_flash_program_async(struct pi_device *device, uint32_t pi_flash_addr, const void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->program_async(device, pi_flash_addr, data, size, task);
1c008b66:	86b2                	mv	a3,a2
1c008b68:	8646                	mv	a2,a7
1c008b6a:	411c                	lw	a5,0(a0)
1c008b6c:	4b9c                	lw	a5,16(a5)
1c008b6e:	9782                	jalr	a5
    
    return 0;
}
1c008b70:	40b2                	lw	ra,12(sp)
1c008b72:	4501                	li	a0,0
1c008b74:	0141                	addi	sp,sp,16
1c008b76:	8082                	ret

1c008b78 <__pi_read_fs_seek>:
static int32_t __pi_read_fs_seek(pi_fs_file_t *_file, unsigned int offset)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    //printf("[FS] File seek (file: %p, offset: 0x%x)\n", file, offset);
    
    if(offset < file->fs_file.size)
1c008b78:	455c                	lw	a5,12(a0)
1c008b7a:	00f5f563          	bleu	a5,a1,1c008b84 <__pi_read_fs_seek+0xc>
    {
        file->offset = offset;
1c008b7e:	c94c                	sw	a1,20(a0)
        return 0;
1c008b80:	4501                	li	a0,0
1c008b82:	8082                	ret
    }
    return -1;
1c008b84:	557d                	li	a0,-1
}
1c008b86:	8082                	ret

1c008b88 <__pi_read_fs_direct_read_async>:
}

static int32_t __pi_read_fs_direct_read_async(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *event)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008b88:	411c                	lw	a5,0(a0)
{
1c008b8a:	1141                	addi	sp,sp,-16
1c008b8c:	c422                	sw	s0,8(sp)
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008b8e:	0087a803          	lw	a6,8(a5)
{
1c008b92:	8432                	mv	s0,a2
    // Mask interrupt to update file current position and get information
    //int irq = pi_irq_disable();
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c008b94:	495c                	lw	a5,20(a0)
1c008b96:	4d10                	lw	a2,24(a0)
{
1c008b98:	88ae                	mv	a7,a1
1c008b9a:	8736                	mv	a4,a3
    unsigned int addr = file->addr + file->offset;
1c008b9c:	00c785b3          	add	a1,a5,a2
    if(file->offset + size > file->fs_file.size)
1c008ba0:	4550                	lw	a2,12(a0)
{
1c008ba2:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c008ba4:	008786b3          	add	a3,a5,s0
1c008ba8:	00d67463          	bleu	a3,a2,1c008bb0 <__pi_read_fs_direct_read_async+0x28>
    {
        real_size = file->fs_file.size - file->offset;
1c008bac:	40f60433          	sub	s0,a2,a5
    }
    file->offset += real_size;
1c008bb0:	97a2                	add	a5,a5,s0
1c008bb2:	c95c                	sw	a5,20(a0)
    
    //pi_irq_restore(irq);
    
    pi_flash_read_async(fs->flash, addr, (void *) buffer, real_size, event);
1c008bb4:	00082503          	lw	a0,0(a6)
1c008bb8:	86a2                	mv	a3,s0
1c008bba:	8646                	mv	a2,a7
1c008bbc:	3f9d                	jal	1c008b32 <pi_flash_read_async>
    
    return real_size;
}
1c008bbe:	8522                	mv	a0,s0
1c008bc0:	40b2                	lw	ra,12(sp)
1c008bc2:	4422                	lw	s0,8(sp)
1c008bc4:	0141                	addi	sp,sp,16
1c008bc6:	8082                	ret

1c008bc8 <__pi_read_fs_copy_async>:


static int32_t
__pi_read_fs_copy_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc,
                        pi_task_t *task)
{
1c008bc8:	882a                	mv	a6,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008bca:	4108                	lw	a0,0(a0)
    return pi_flash_copy_async(fs->flash, file->addr + index, buffer, size, ext2loc, task);
1c008bcc:	01882803          	lw	a6,24(a6)
1c008bd0:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_async(device, pi_flash_addr, buffer, size, ext2loc, task);
1c008bd2:	95c2                	add	a1,a1,a6
1c008bd4:	4108                	lw	a0,0(a0)
1c008bd6:	00052883          	lw	a7,0(a0)
1c008bda:	0288a303          	lw	t1,40(a7)
1c008bde:	8302                	jr	t1

1c008be0 <__pi_read_fs_copy_2d_async>:
}

static int32_t
__pi_read_fs_copy_2d_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, uint32_t stride,
                           uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c008be0:	832a                	mv	t1,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008be2:	4108                	lw	a0,0(a0)
    return pi_flash_copy_2d_async(fs->flash, file->addr + index, buffer, size, stride, length, ext2loc, task);
1c008be4:	01832e03          	lw	t3,24(t1)
1c008be8:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_2d_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, task);
1c008bea:	95f2                	add	a1,a1,t3
1c008bec:	4108                	lw	a0,0(a0)
1c008bee:	00052303          	lw	t1,0(a0)
1c008bf2:	02c32303          	lw	t1,44(t1)
1c008bf6:	8302                	jr	t1

1c008bf8 <rt_event_enqueue>:

#if defined(__OPTIMIZE__) && defined(CORE_PULP_BUILTINS) && !defined(__LLVM__)

static inline unsigned int hal_spr_read_then_clr(unsigned int reg, unsigned int val)
{
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008bf8:	300476f3          	csrrci	a3,mstatus,8

static inline void __rt_event_enqueue(rt_event_t *event)
{
  rt_event_sched_t *sched = rt_event_internal_sched();
  event->next = NULL;
  if (sched->first) {
1c008bfc:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c008c00:	00052023          	sw	zero,0(a0)
1c008c04:	01c00713          	li	a4,28
  if (sched->first) {
1c008c08:	c619                	beqz	a2,1c008c16 <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c008c0a:	435c                	lw	a5,4(a4)
1c008c0c:	c388                	sw	a0,0(a5)
  } else {
    sched->first = event;
  }
  sched->last = event;
1c008c0e:	c348                	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
}

static inline void hal_spr_write(unsigned int reg, unsigned int val)
{
  __builtin_pulp_spr_write(reg, val);
1c008c10:	30069073          	csrw	mstatus,a3

static inline void rt_event_enqueue(rt_event_t *event) {
  int irq = rt_irq_disable();
  __rt_event_enqueue(event);
  rt_irq_restore(irq);
}
1c008c14:	8082                	ret
    sched->first = event;
1c008c16:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c008c1a:	bfd5                	j	1c008c0e <rt_event_enqueue+0x16>

1c008c1c <__pi_fs_free>:
    if(fs != NULL)
1c008c1c:	c91d                	beqz	a0,1c008c52 <__pi_fs_free+0x36>
{
1c008c1e:	1141                	addi	sp,sp,-16
1c008c20:	c422                	sw	s0,8(sp)
1c008c22:	842a                	mv	s0,a0
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c008c24:	09c52503          	lw	a0,156(a0)
{
1c008c28:	c606                	sw	ra,12(sp)
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c008c2a:	c511                	beqz	a0,1c008c36 <__pi_fs_free+0x1a>
1c008c2c:	09842783          	lw	a5,152(s0)
1c008c30:	438c                	lw	a1,0(a5)
1c008c32:	338030ef          	jal	ra,1c00bf6a <pi_l2_free>
        if(fs->pi_fs_l2) pmsis_l2_malloc_free(fs->pi_fs_l2, sizeof(pi_fs_l2_t));
1c008c36:	09842503          	lw	a0,152(s0)
1c008c3a:	c501                	beqz	a0,1c008c42 <__pi_fs_free+0x26>
1c008c3c:	45a1                	li	a1,8
1c008c3e:	32c030ef          	jal	ra,1c00bf6a <pi_l2_free>
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c008c42:	8522                	mv	a0,s0
}
1c008c44:	4422                	lw	s0,8(sp)
1c008c46:	40b2                	lw	ra,12(sp)
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c008c48:	1b800593          	li	a1,440
}
1c008c4c:	0141                	addi	sp,sp,16
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c008c4e:	31c0306f          	j	1c00bf6a <pi_l2_free>
1c008c52:	8082                	ret

1c008c54 <__pi_read_fs_unmount>:
    __pi_fs_free(fs);
1c008c54:	4508                	lw	a0,8(a0)
1c008c56:	b7d9                	j	1c008c1c <__pi_fs_free>

1c008c58 <__pi_read_fs_open>:
{
1c008c58:	1101                	addi	sp,sp,-32
1c008c5a:	ca26                	sw	s1,20(sp)
1c008c5c:	c452                	sw	s4,8(sp)
1c008c5e:	c256                	sw	s5,4(sp)
1c008c60:	ce06                	sw	ra,28(sp)
1c008c62:	cc22                	sw	s0,24(sp)
1c008c64:	c84a                	sw	s2,16(sp)
1c008c66:	c64e                	sw	s3,12(sp)
1c008c68:	c05a                	sw	s6,0(sp)
1c008c6a:	8a2a                	mv	s4,a0
1c008c6c:	8aae                	mv	s5,a1
    pi_read_fs_t *fs = (pi_read_fs_t *) device->data;
1c008c6e:	4504                	lw	s1,8(a0)
    if(flags == PI_FS_FLAGS_WRITE)
1c008c70:	08163f63          	p.bneimm	a2,1,1c008d0e <__pi_read_fs_open+0xb6>
        if(fs->last_created_file)
1c008c74:	12c4a783          	lw	a5,300(s1)
1c008c78:	c399                	beqz	a5,1c008c7e <__pi_read_fs_open+0x26>
    return NULL;
1c008c7a:	4501                	li	a0,0
1c008c7c:	a8bd                	j	1c008cfa <__pi_read_fs_open+0xa2>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c008c7e:	0c000513          	li	a0,192
1c008c82:	2da030ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c008c86:	842a                	mv	s0,a0
        if(file == NULL) return NULL;
1c008c88:	d96d                	beqz	a0,1c008c7a <__pi_read_fs_open+0x22>
        int str_len = strlen(file_name);
1c008c8a:	8556                	mv	a0,s5
1c008c8c:	4e5050ef          	jal	ra,1c00e970 <strlen>
        int header_size = ((str_len + 7) & ~0x7) + 12;
1c008c90:	00750913          	addi	s2,a0,7
1c008c94:	c4093933          	p.bclr	s2,s2,2,0
1c008c98:	0931                	addi	s2,s2,12
        int str_len = strlen(file_name);
1c008c9a:	89aa                	mv	s3,a0
        uint8_t *header = pmsis_l2_malloc(header_size);
1c008c9c:	854a                	mv	a0,s2
1c008c9e:	2be030ef          	jal	ra,1c00bf5c <pi_l2_malloc>
        if(header == NULL)
1c008ca2:	e519                	bnez	a0,1c008cb0 <__pi_read_fs_open+0x58>
    pmsis_l2_malloc_free(file, sizeof(pi_read_fs_file_t));
1c008ca4:	0c000593          	li	a1,192
1c008ca8:	8522                	mv	a0,s0
1c008caa:	2c0030ef          	jal	ra,1c00bf6a <pi_l2_free>
1c008cae:	b7f1                	j	1c008c7a <__pi_read_fs_open+0x22>
        file->header = header;
1c008cb0:	0aa42a23          	sw	a0,180(s0)
        file->header_size = header_size;
1c008cb4:	0b242c23          	sw	s2,184(s0)
        memcpy(&file->header[12], file_name, str_len);
1c008cb8:	864e                	mv	a2,s3
1c008cba:	85d6                	mv	a1,s5
1c008cbc:	0531                	addi	a0,a0,12
1c008cbe:	4d9050ef          	jal	ra,1c00e996 <memcpy>
        *(uint32_t *) &file->header[8] = str_len;
1c008cc2:	0b442783          	lw	a5,180(s0)
1c008cc6:	0137a423          	sw	s3,8(a5)
        file->addr = fs->free_flash_area + header_size;
1c008cca:	1284a783          	lw	a5,296(s1)
        file->fs_file.size = 0;
1c008cce:	00042623          	sw	zero,12(s0)
        file->offset = 0;
1c008cd2:	00042a23          	sw	zero,20(s0)
        file->addr = fs->free_flash_area + header_size;
1c008cd6:	993e                	add	s2,s2,a5
        file->cache_addr = -1;
1c008cd8:	57fd                	li	a5,-1
        file->addr = fs->free_flash_area + header_size;
1c008cda:	01242c23          	sw	s2,24(s0)
        file->cache_addr = -1;
1c008cde:	0af42823          	sw	a5,176(s0)
        fs->last_created_file = file;
1c008ce2:	1284a623          	sw	s0,300(s1)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c008ce6:	000a2783          	lw	a5,0(s4)
    file->fs_file.fs_data = &fs->fs_data;
1c008cea:	13048493          	addi	s1,s1,304
    file->fs_file.data = file;
1c008cee:	c400                	sw	s0,8(s0)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c008cf0:	c05c                	sw	a5,4(s0)
    file->fs_file.fs = device;
1c008cf2:	01442023          	sw	s4,0(s0)
    file->fs_file.fs_data = &fs->fs_data;
1c008cf6:	c804                	sw	s1,16(s0)
    return &file->fs_file;
1c008cf8:	8522                	mv	a0,s0
}
1c008cfa:	40f2                	lw	ra,28(sp)
1c008cfc:	4462                	lw	s0,24(sp)
1c008cfe:	44d2                	lw	s1,20(sp)
1c008d00:	4942                	lw	s2,16(sp)
1c008d02:	49b2                	lw	s3,12(sp)
1c008d04:	4a22                	lw	s4,8(sp)
1c008d06:	4a92                	lw	s5,4(sp)
1c008d08:	4b02                	lw	s6,0(sp)
1c008d0a:	6105                	addi	sp,sp,32
1c008d0c:	8082                	ret
        unsigned int *pi_fs_info = fs->pi_fs_info;
1c008d0e:	09c4a783          	lw	a5,156(s1)
        for (i = 0; i < nb_comps; i++)
1c008d12:	4981                	li	s3,0
        pi_fs_desc_t *desc = NULL;
1c008d14:	4901                	li	s2,0
        int nb_comps = *pi_fs_info++;
1c008d16:	0007ab03          	lw	s6,0(a5)
1c008d1a:	00478413          	addi	s0,a5,4
        for (i = 0; i < nb_comps; i++)
1c008d1e:	0569c163          	blt	s3,s6,1c008d60 <__pi_read_fs_open+0x108>
        if(i == nb_comps) goto error;
1c008d22:	f5698ce3          	beq	s3,s6,1c008c7a <__pi_read_fs_open+0x22>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c008d26:	0c000513          	li	a0,192
1c008d2a:	232030ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c008d2e:	842a                	mv	s0,a0
        if(file == NULL) goto error;
1c008d30:	d529                	beqz	a0,1c008c7a <__pi_read_fs_open+0x22>
        file->cache = pmsis_l2_malloc(READ_FS_THRESHOLD_BLOCK_FULL);
1c008d32:	08800513          	li	a0,136
1c008d36:	226030ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c008d3a:	0aa42623          	sw	a0,172(s0)
        if(file->cache == NULL) goto error1;
1c008d3e:	d13d                	beqz	a0,1c008ca4 <__pi_read_fs_open+0x4c>
        file->fs_file.size = desc->size;
1c008d40:	00492783          	lw	a5,4(s2)
        file->addr = desc->addr + fs->partition_offset;
1c008d44:	4498                	lw	a4,8(s1)
        file->header = NULL;
1c008d46:	0a042a23          	sw	zero,180(s0)
        file->fs_file.size = desc->size;
1c008d4a:	c45c                	sw	a5,12(s0)
        file->addr = desc->addr + fs->partition_offset;
1c008d4c:	00092783          	lw	a5,0(s2)
        file->offset = 0;
1c008d50:	00042a23          	sw	zero,20(s0)
        file->addr = desc->addr + fs->partition_offset;
1c008d54:	97ba                	add	a5,a5,a4
1c008d56:	cc1c                	sw	a5,24(s0)
        file->cache_addr = -1;
1c008d58:	57fd                	li	a5,-1
1c008d5a:	0af42823          	sw	a5,176(s0)
1c008d5e:	b761                	j	1c008ce6 <__pi_read_fs_open+0x8e>
            if(strcmp(desc->name, file_name) == 0) break;
1c008d60:	85d6                	mv	a1,s5
1c008d62:	00c40513          	addi	a0,s0,12
1c008d66:	3d7050ef          	jal	ra,1c00e93c <strcmp>
1c008d6a:	c901                	beqz	a0,1c008d7a <__pi_read_fs_open+0x122>
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c008d6c:	441c                	lw	a5,8(s0)
        for (i = 0; i < nb_comps; i++)
1c008d6e:	8922                	mv	s2,s0
1c008d70:	0985                	addi	s3,s3,1
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c008d72:	97a2                	add	a5,a5,s0
1c008d74:	00c78413          	addi	s0,a5,12
1c008d78:	b75d                	j	1c008d1e <__pi_read_fs_open+0xc6>
1c008d7a:	8922                	mv	s2,s0
1c008d7c:	b76d                	j	1c008d26 <__pi_read_fs_open+0xce>

1c008d7e <__pi_fs_mount_step>:
{
1c008d7e:	7179                	addi	sp,sp,-48
1c008d80:	d226                	sw	s1,36(sp)
    switch (fs->mount_step)
1c008d82:	09052483          	lw	s1,144(a0)
{
1c008d86:	d422                	sw	s0,40(sp)
1c008d88:	d606                	sw	ra,44(sp)
1c008d8a:	d04a                	sw	s2,32(sp)
    const pi_partition_table_t partition_table = NULL;
1c008d8c:	ce02                	sw	zero,28(sp)
{
1c008d8e:	842a                	mv	s0,a0
    switch (fs->mount_step)
1c008d90:	0834a463          	p.beqimm	s1,3,1c008e18 <__pi_fs_mount_step+0x9a>
1c008d94:	0c44a963          	p.beqimm	s1,4,1c008e66 <__pi_fs_mount_step+0xe8>
1c008d98:	0614ba63          	p.bneimm	s1,1,1c008e0c <__pi_fs_mount_step+0x8e>
            rc = pi_partition_table_load(fs->flash, &partition_table);
1c008d9c:	4108                	lw	a0,0(a0)
1c008d9e:	086c                	addi	a1,sp,28
1c008da0:	055010ef          	jal	ra,1c00a5f4 <pi_partition_table_load>
            if(rc != PI_OK) goto error;
1c008da4:	ed09                	bnez	a0,1c008dbe <__pi_fs_mount_step+0x40>
            readfs_partition = pi_partition_find_first(partition_table, PI_PARTITION_TYPE_DATA,
1c008da6:	4054                	lw	a3,4(s0)
1c008da8:	4572                	lw	a0,28(sp)
1c008daa:	08100613          	li	a2,129
1c008dae:	4585                	li	a1,1
1c008db0:	049010ef          	jal	ra,1c00a5f8 <pi_partition_find_first>
1c008db4:	892a                	mv	s2,a0
            if(readfs_partition == NULL)
1c008db6:	e901                	bnez	a0,1c008dc6 <__pi_fs_mount_step+0x48>
                pi_partition_table_free(partition_table);
1c008db8:	4572                	lw	a0,28(sp)
1c008dba:	039010ef          	jal	ra,1c00a5f2 <pi_partition_table_free>
    fs->error = -1;
1c008dbe:	57fd                	li	a5,-1
1c008dc0:	12f42223          	sw	a5,292(s0)
1c008dc4:	a0c9                	j	1c008e86 <__pi_fs_mount_step+0x108>
            fs->partition_offset = pi_partition_get_flash_offset(readfs_partition);
1c008dc6:	023010ef          	jal	ra,1c00a5e8 <pi_partition_get_flash_offset>

/// @cond IMPLEM

static inline pi_err_t pi_partition_close(const pi_partition_t *partition)
{
    pi_l2_free((pi_partition_t *) partition, sizeof(pi_partition_t));
1c008dca:	02800593          	li	a1,40
1c008dce:	c408                	sw	a0,8(s0)
1c008dd0:	854a                	mv	a0,s2
1c008dd2:	198030ef          	jal	ra,1c00bf6a <pi_l2_free>
            pi_partition_table_free(partition_table);
1c008dd6:	4572                	lw	a0,28(sp)
1c008dd8:	01b010ef          	jal	ra,1c00a5f2 <pi_partition_table_free>
            fs->mount_step++;
1c008ddc:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c008de0:	4008                	lw	a0,0(s0)
1c008de2:	440c                	lw	a1,8(s0)
            fs->mount_step++;
1c008de4:	0789                	addi	a5,a5,2
1c008de6:	08f42823          	sw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c008dea:	09842603          	lw	a2,152(s0)


struct pi_task *pi_task_callback(struct pi_task *task, void (*callback)(void*), void *arg)
{
  task->id = PI_TASK_CALLBACK_ID;
  task->arg[0] = (uint32_t)callback;
1c008dee:	1c0097b7          	lui	a5,0x1c009
1c008df2:	d7e78793          	addi	a5,a5,-642 # 1c008d7e <__pi_fs_mount_step>
  task->id = PI_TASK_CALLBACK_ID;
1c008df6:	02042223          	sw	zero,36(s0)
  task->arg[0] = (uint32_t)callback;
1c008dfa:	c81c                	sw	a5,16(s0)
  task->arg[1] = (uint32_t)arg;
1c008dfc:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c008dfe:	d844                	sw	s1,52(s0)

void __rt_event_sched_init();

static inline void __rt_task_init(pi_task_t *task)
{
  task->done = 0;
1c008e00:	02040023          	sb	zero,32(s0)
1c008e04:	00c40713          	addi	a4,s0,12
1c008e08:	46a1                	li	a3,8
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c008e0a:	3325                	jal	1c008b32 <pi_flash_read_async>
}
1c008e0c:	50b2                	lw	ra,44(sp)
1c008e0e:	5422                	lw	s0,40(sp)
1c008e10:	5492                	lw	s1,36(sp)
1c008e12:	5902                	lw	s2,32(sp)
1c008e14:	6145                	addi	sp,sp,48
1c008e16:	8082                	ret
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c008e18:	09852783          	lw	a5,152(a0)
            int pi_fs_offset = fs->partition_offset;
1c008e1c:	4504                	lw	s1,8(a0)
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c008e1e:	4394                	lw	a3,0(a5)
1c008e20:	069d                	addi	a3,a3,7
1c008e22:	c406b6b3          	p.bclr	a3,a3,2,0
            fs->pi_fs_info = pmsis_l2_malloc(pi_fs_size);
1c008e26:	8536                	mv	a0,a3
1c008e28:	c636                	sw	a3,12(sp)
1c008e2a:	132030ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c008e2e:	08a42e23          	sw	a0,156(s0)
1c008e32:	862a                	mv	a2,a0
            if(fs->pi_fs_info == NULL)
1c008e34:	46b2                	lw	a3,12(sp)
1c008e36:	d541                	beqz	a0,1c008dbe <__pi_fs_mount_step+0x40>
            fs->mount_step++;
1c008e38:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c008e3c:	4008                	lw	a0,0(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c008e3e:	02042223          	sw	zero,36(s0)
            fs->mount_step++;
1c008e42:	0785                	addi	a5,a5,1
1c008e44:	08f42823          	sw	a5,144(s0)
  task->arg[0] = (uint32_t)callback;
1c008e48:	1c0097b7          	lui	a5,0x1c009
1c008e4c:	d7e78793          	addi	a5,a5,-642 # 1c008d7e <__pi_fs_mount_step>
1c008e50:	c81c                	sw	a5,16(s0)
  task->implem.keep = 1;
1c008e52:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c008e54:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c008e56:	d85c                	sw	a5,52(s0)
1c008e58:	02040023          	sb	zero,32(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c008e5c:	00c40713          	addi	a4,s0,12
1c008e60:	00848593          	addi	a1,s1,8
1c008e64:	b75d                	j	1c008e0a <__pi_fs_mount_step+0x8c>
            unsigned int *pi_fs_info = fs->pi_fs_info;
1c008e66:	09c52703          	lw	a4,156(a0)
            for (i = 0; i < nb_comps; i++)
1c008e6a:	4681                	li	a3,0
            int nb_comps = *pi_fs_info++;
1c008e6c:	00470793          	addi	a5,a4,4
1c008e70:	430c                	lw	a1,0(a4)
            pi_fs_desc_t *desc = NULL;
1c008e72:	4701                	li	a4,0
            for (i = 0; i < nb_comps; i++)
1c008e74:	00b6cd63          	blt	a3,a1,1c008e8e <__pi_fs_mount_step+0x110>
            if(desc == NULL)
1c008e78:	e315                	bnez	a4,1c008e9c <__pi_fs_mount_step+0x11e>
                fs->free_flash_area = desc->addr + desc->size;
1c008e7a:	12f42423          	sw	a5,296(s0)
            fs->last_created_file = NULL;
1c008e7e:	12042623          	sw	zero,300(s0)
            fs->error = 0;
1c008e82:	12042223          	sw	zero,292(s0)
  rt_event_enqueue(task);
1c008e86:	08c42503          	lw	a0,140(s0)
1c008e8a:	33bd                	jal	1c008bf8 <rt_event_enqueue>
1c008e8c:	b741                	j	1c008e0c <__pi_fs_mount_step+0x8e>
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c008e8e:	4790                	lw	a2,8(a5)
            for (i = 0; i < nb_comps; i++)
1c008e90:	873e                	mv	a4,a5
1c008e92:	0685                	addi	a3,a3,1
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c008e94:	963e                	add	a2,a2,a5
1c008e96:	00c60793          	addi	a5,a2,12
1c008e9a:	bfe9                	j	1c008e74 <__pi_fs_mount_step+0xf6>
                fs->free_flash_area = desc->addr + desc->size;
1c008e9c:	431c                	lw	a5,0(a4)
1c008e9e:	4358                	lw	a4,4(a4)
1c008ea0:	97ba                	add	a5,a5,a4
1c008ea2:	bfe1                	j	1c008e7a <__pi_fs_mount_step+0xfc>

1c008ea4 <__pi_read_fs_close>:
    if(file->header == NULL)
1c008ea4:	0b452603          	lw	a2,180(a0)
{
1c008ea8:	1141                	addi	sp,sp,-16
1c008eaa:	c422                	sw	s0,8(sp)
1c008eac:	c606                	sw	ra,12(sp)
1c008eae:	842a                	mv	s0,a0
    if(file->header == NULL)
1c008eb0:	ee19                	bnez	a2,1c008ece <__pi_read_fs_close+0x2a>
        pmsis_l2_malloc_free(file->cache, READ_FS_THRESHOLD_BLOCK_FULL);
1c008eb2:	0ac52503          	lw	a0,172(a0)
1c008eb6:	08800593          	li	a1,136
        pi_l2_free((void *) file->header, file->header_size);
1c008eba:	0b0030ef          	jal	ra,1c00bf6a <pi_l2_free>
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c008ebe:	8522                	mv	a0,s0
}
1c008ec0:	4422                	lw	s0,8(sp)
1c008ec2:	40b2                	lw	ra,12(sp)
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c008ec4:	0c000593          	li	a1,192
}
1c008ec8:	0141                	addi	sp,sp,16
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c008eca:	0a00306f          	j	1c00bf6a <pi_l2_free>
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008ece:	411c                	lw	a5,0(a0)
        *(uint32_t *) &file->header[0] = file->addr;
1c008ed0:	4d0c                	lw	a1,24(a0)
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c008ed2:	4558                	lw	a4,12(a0)
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008ed4:	479c                	lw	a5,8(a5)
  api->program(device, pi_flash_addr, data, size);
1c008ed6:	0b842683          	lw	a3,184(s0)
        *(uint32_t *) &file->header[0] = file->addr;
1c008eda:	c20c                	sw	a1,0(a2)
        pi_flash_program(fs->flash, file->addr - file->header_size, (void *) file->header, file->header_size);
1c008edc:	4388                	lw	a0,0(a5)
1c008ede:	8d95                	sub	a1,a1,a3
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c008ee0:	c258                	sw	a4,4(a2)
1c008ee2:	411c                	lw	a5,0(a0)
1c008ee4:	5bdc                	lw	a5,52(a5)
1c008ee6:	9782                	jalr	a5
        pi_l2_free((void *) file->header, file->header_size);
1c008ee8:	0b842583          	lw	a1,184(s0)
1c008eec:	0b442503          	lw	a0,180(s0)
1c008ef0:	b7e9                	j	1c008eba <__pi_read_fs_close+0x16>

1c008ef2 <__pi_read_fs_mount>:
{
1c008ef2:	7175                	addi	sp,sp,-144
1c008ef4:	c326                	sw	s1,132(sp)
1c008ef6:	c14a                	sw	s2,128(sp)
1c008ef8:	84aa                	mv	s1,a0
    struct pi_fs_conf *conf = (struct pi_fs_conf *) device->config;
1c008efa:	00452903          	lw	s2,4(a0)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c008efe:	1b800513          	li	a0,440
{
1c008f02:	c522                	sw	s0,136(sp)
1c008f04:	c706                	sw	ra,140(sp)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c008f06:	056030ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c008f0a:	842a                	mv	s0,a0
    if(fs == NULL) goto error;
1c008f0c:	e911                	bnez	a0,1c008f20 <__pi_read_fs_mount+0x2e>
    __pi_fs_free(fs);
1c008f0e:	8522                	mv	a0,s0
1c008f10:	3331                	jal	1c008c1c <__pi_fs_free>
    return -1;
1c008f12:	557d                	li	a0,-1
}
1c008f14:	40ba                	lw	ra,140(sp)
1c008f16:	442a                	lw	s0,136(sp)
1c008f18:	449a                	lw	s1,132(sp)
1c008f1a:	490a                	lw	s2,128(sp)
1c008f1c:	6149                	addi	sp,sp,144
1c008f1e:	8082                	ret
    fs->flash = conf->flash;
1c008f20:	00492783          	lw	a5,4(s2)
    fs->pi_fs_l2 = NULL;
1c008f24:	08052c23          	sw	zero,152(a0)
    fs->pi_fs_info = NULL;
1c008f28:	08052e23          	sw	zero,156(a0)
    fs->flash = conf->flash;
1c008f2c:	c11c                	sw	a5,0(a0)
    fs->fs_data.cluster_reqs_first = NULL;
1c008f2e:	12052823          	sw	zero,304(a0)
    fs->pi_fs_l2 = pmsis_l2_malloc(sizeof(pi_fs_l2_t));
1c008f32:	4521                	li	a0,8
1c008f34:	028030ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c008f38:	08a42c23          	sw	a0,152(s0)
    if(fs->pi_fs_l2 == NULL) goto error;
1c008f3c:	d969                	beqz	a0,1c008f0e <__pi_read_fs_mount+0x1c>
    fs->mount_step = 1;
1c008f3e:	4785                	li	a5,1
1c008f40:	08f42823          	sw	a5,144(s0)
  task->id = PI_TASK_NONE_ID;
1c008f44:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008f46:	d43e                	sw	a5,40(sp)
1c008f48:	00010a23          	sb	zero,20(sp)
    fs->pending_event = pi_task_block(&task);
1c008f4c:	00010793          	mv	a5,sp
1c008f50:	08f42623          	sw	a5,140(s0)
    fs->partition_name = conf->partition_name;
1c008f54:	00892783          	lw	a5,8(s2)
  task->arg[0] = (uint32_t)0;
1c008f58:	c202                	sw	zero,4(sp)
    fs->pi_fs_info = NULL;
1c008f5a:	08042e23          	sw	zero,156(s0)
    fs->partition_name = conf->partition_name;
1c008f5e:	c05c                	sw	a5,4(s0)
    device->data = (void *) fs;
1c008f60:	c480                	sw	s0,8(s1)
    __pi_fs_mount_step((void *) fs);
1c008f62:	8522                	mv	a0,s0
1c008f64:	3d29                	jal	1c008d7e <__pi_fs_mount_step>
  while(!task->done)
1c008f66:	01410783          	lb	a5,20(sp)
1c008f6a:	c791                	beqz	a5,1c008f76 <__pi_read_fs_mount+0x84>
    if(fs->error)
1c008f6c:	12442783          	lw	a5,292(s0)
1c008f70:	ffd9                	bnez	a5,1c008f0e <__pi_read_fs_mount+0x1c>
    return 0;
1c008f72:	4501                	li	a0,0
1c008f74:	b745                	j	1c008f14 <__pi_read_fs_mount+0x22>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008f76:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c008f7a:	4585                	li	a1,1
1c008f7c:	01c00513          	li	a0,28
1c008f80:	53d020ef          	jal	ra,1c00bcbc <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c008f84:	30091073          	csrw	mstatus,s2
1c008f88:	bff9                	j	1c008f66 <__pi_read_fs_mount+0x74>

1c008f8a <__pi_fs_read_cached>:
{
1c008f8a:	88ae                	mv	a7,a1
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c008f8c:	0b052583          	lw	a1,176(a0)
{
1c008f90:	1141                	addi	sp,sp,-16
1c008f92:	c226                	sw	s1,4(sp)
1c008f94:	c606                	sw	ra,12(sp)
1c008f96:	c422                	sw	s0,8(sp)
1c008f98:	84ba                	mv	s1,a4
1c008f9a:	0ac52803          	lw	a6,172(a0)
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c008f9e:	00b66f63          	bltu	a2,a1,1c008fbc <__pi_fs_read_cached+0x32>
    if(size > READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7)) size = READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7);
1c008fa2:	f8363733          	p.bclr	a4,a2,28,3
1c008fa6:	08800413          	li	s0,136
1c008faa:	8c19                	sub	s0,s0,a4
1c008fac:	04d45433          	p.minu	s0,s0,a3
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c008fb0:	008606b3          	add	a3,a2,s0
1c008fb4:	08858713          	addi	a4,a1,136 # ffff8088 <pulp__FC+0xffff8089>
1c008fb8:	02d77a63          	bleu	a3,a4,1c008fec <__pi_fs_read_cached+0x62>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008fbc:	4118                	lw	a4,0(a0)
        file->cache_addr = addr & ~0x7;
1c008fbe:	c40635b3          	p.bclr	a1,a2,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c008fc2:	08800693          	li	a3,136
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008fc6:	00872883          	lw	a7,8(a4)
        file->cache_addr = addr & ~0x7;
1c008fca:	0ab52823          	sw	a1,176(a0)
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c008fce:	873e                	mv	a4,a5
1c008fd0:	0008a503          	lw	a0,0(a7)
1c008fd4:	8642                	mv	a2,a6
        return 0;
1c008fd6:	4401                	li	s0,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c008fd8:	b5bff0ef          	jal	ra,1c008b32 <pi_flash_read_async>
        *pending = 1;
1c008fdc:	4785                	li	a5,1
1c008fde:	c09c                	sw	a5,0(s1)
}
1c008fe0:	8522                	mv	a0,s0
1c008fe2:	40b2                	lw	ra,12(sp)
1c008fe4:	4422                	lw	s0,8(sp)
1c008fe6:	4492                	lw	s1,4(sp)
1c008fe8:	0141                	addi	sp,sp,16
1c008fea:	8082                	ret
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c008fec:	40b605b3          	sub	a1,a2,a1
1c008ff0:	95c2                	add	a1,a1,a6
1c008ff2:	8622                	mv	a2,s0
1c008ff4:	8546                	mv	a0,a7
1c008ff6:	1a1050ef          	jal	ra,1c00e996 <memcpy>
    return __pi_fs_read_from_cache(file, buffer, addr, size);
1c008ffa:	b7dd                	j	1c008fe0 <__pi_fs_read_cached+0x56>

1c008ffc <__pi_fs_read>:
{
1c008ffc:	7179                	addi	sp,sp,-48
1c008ffe:	d422                	sw	s0,40(sp)
1c009000:	d226                	sw	s1,36(sp)
1c009002:	d04a                	sw	s2,32(sp)
1c009004:	ca56                	sw	s5,20(sp)
1c009006:	c85a                	sw	s6,16(sp)
1c009008:	d606                	sw	ra,44(sp)
1c00900a:	8b3e                	mv	s6,a5
1c00900c:	ce4e                	sw	s3,28(sp)
1c00900e:	cc52                	sw	s4,24(sp)
1c009010:	c65e                	sw	s7,12(sp)
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c009012:	47c1                	li	a5,16
{
1c009014:	892e                	mv	s2,a1
1c009016:	8432                	mv	s0,a2
1c009018:	84b6                	mv	s1,a3
1c00901a:	8aba                	mv	s5,a4
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c00901c:	06d7d063          	ble	a3,a5,1c00907c <__pi_fs_read+0x80>
1c009020:	00b647b3          	xor	a5,a2,a1
1c009024:	f837b7b3          	p.bclr	a5,a5,28,3
1c009028:	ebb1                	bnez	a5,1c00907c <__pi_fs_read+0x80>
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c00902a:	08800793          	li	a5,136
1c00902e:	06d7d763          	ble	a3,a5,1c00909c <__pi_fs_read+0xa0>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009032:	411c                	lw	a5,0(a0)
1c009034:	0087ab83          	lw	s7,8(a5)
    int prefix_size = addr & 0x7;
1c009038:	f83437b3          	p.bclr	a5,s0,28,3
    if(prefix_size)
1c00903c:	c395                	beqz	a5,1c009060 <__pi_fs_read+0x64>
        prefix_size = 4 - prefix_size;
1c00903e:	4991                	li	s3,4
1c009040:	40f989b3          	sub	s3,s3,a5
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c009044:	8756                	mv	a4,s5
1c009046:	87da                	mv	a5,s6
1c009048:	86ce                	mv	a3,s3
1c00904a:	8622                	mv	a2,s0
1c00904c:	85ca                	mv	a1,s2
1c00904e:	3f35                	jal	1c008f8a <__pi_fs_read_cached>
        if(*pending) return read_size;
1c009050:	000aa783          	lw	a5,0(s5)
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c009054:	8a2a                	mv	s4,a0
        if(*pending) return read_size;
1c009056:	e7bd                	bnez	a5,1c0090c4 <__pi_fs_read+0xc8>
        addr += prefix_size;
1c009058:	944e                	add	s0,s0,s3
        buffer += prefix_size;
1c00905a:	994e                	add	s2,s2,s3
        size -= prefix_size;
1c00905c:	413484b3          	sub	s1,s1,s3
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c009060:	000ba503          	lw	a0,0(s7) # 10000 <__L1Cl>
    int block_size = size & ~0x7;
1c009064:	c404ba33          	p.bclr	s4,s1,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c009068:	875a                	mv	a4,s6
1c00906a:	86d2                	mv	a3,s4
1c00906c:	864a                	mv	a2,s2
1c00906e:	85a2                	mv	a1,s0
1c009070:	ac3ff0ef          	jal	ra,1c008b32 <pi_flash_read_async>
    *pending = 1;
1c009074:	4785                	li	a5,1
1c009076:	00faa023          	sw	a5,0(s5)
    return block_size;
1c00907a:	a0a9                	j	1c0090c4 <__pi_fs_read+0xc8>
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c00907c:	8622                	mv	a2,s0
}
1c00907e:	5422                	lw	s0,40(sp)
1c009080:	50b2                	lw	ra,44(sp)
1c009082:	49f2                	lw	s3,28(sp)
1c009084:	4a62                	lw	s4,24(sp)
1c009086:	4bb2                	lw	s7,12(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c009088:	87da                	mv	a5,s6
1c00908a:	8756                	mv	a4,s5
}
1c00908c:	4b42                	lw	s6,16(sp)
1c00908e:	4ad2                	lw	s5,20(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c009090:	86a6                	mv	a3,s1
1c009092:	85ca                	mv	a1,s2
}
1c009094:	5492                	lw	s1,36(sp)
1c009096:	5902                	lw	s2,32(sp)
1c009098:	6145                	addi	sp,sp,48
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c00909a:	bdc5                	j	1c008f8a <__pi_fs_read_cached>
       addr >= file->cache_addr &&
1c00909c:	0b052583          	lw	a1,176(a0)
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c0090a0:	f8b669e3          	bltu	a2,a1,1c009032 <__pi_fs_read+0x36>
       addr + size < file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c0090a4:	00c687b3          	add	a5,a3,a2
1c0090a8:	08858713          	addi	a4,a1,136
       addr >= file->cache_addr &&
1c0090ac:	f8e7f3e3          	bleu	a4,a5,1c009032 <__pi_fs_read+0x36>
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c0090b0:	40b60433          	sub	s0,a2,a1
1c0090b4:	0ac52583          	lw	a1,172(a0)
1c0090b8:	8636                	mv	a2,a3
1c0090ba:	854a                	mv	a0,s2
1c0090bc:	95a2                	add	a1,a1,s0
1c0090be:	0d9050ef          	jal	ra,1c00e996 <memcpy>
        return __pi_fs_read_from_cache(file, buffer, addr, size);
1c0090c2:	8a26                	mv	s4,s1
}
1c0090c4:	50b2                	lw	ra,44(sp)
1c0090c6:	5422                	lw	s0,40(sp)
1c0090c8:	8552                	mv	a0,s4
1c0090ca:	5492                	lw	s1,36(sp)
1c0090cc:	5902                	lw	s2,32(sp)
1c0090ce:	49f2                	lw	s3,28(sp)
1c0090d0:	4a62                	lw	s4,24(sp)
1c0090d2:	4ad2                	lw	s5,20(sp)
1c0090d4:	4b42                	lw	s6,16(sp)
1c0090d6:	4bb2                	lw	s7,12(sp)
1c0090d8:	6145                	addi	sp,sp,48
1c0090da:	8082                	ret

1c0090dc <__pi_read_fs_try_read>:
    if(file->pending_size == 0)
1c0090dc:	0a852683          	lw	a3,168(a0)
{
1c0090e0:	7179                	addi	sp,sp,-48
1c0090e2:	d422                	sw	s0,40(sp)
1c0090e4:	d606                	sw	ra,44(sp)
1c0090e6:	d226                	sw	s1,36(sp)
1c0090e8:	d04a                	sw	s2,32(sp)
1c0090ea:	ce4e                	sw	s3,28(sp)
    int pending = 0;
1c0090ec:	c602                	sw	zero,12(sp)
{
1c0090ee:	842a                	mv	s0,a0
    if(file->pending_size == 0)
1c0090f0:	ee99                	bnez	a3,1c00910e <__pi_read_fs_try_read+0x32>
            file->pending_event->implem.data[0] = file->first_read_size;
1c0090f2:	501c                	lw	a5,32(s0)
1c0090f4:	0bc42703          	lw	a4,188(s0)
1c0090f8:	df98                	sw	a4,56(a5)
  rt_event_enqueue(task);
1c0090fa:	5008                	lw	a0,32(s0)
1c0090fc:	afdff0ef          	jal	ra,1c008bf8 <rt_event_enqueue>
}
1c009100:	50b2                	lw	ra,44(sp)
1c009102:	5422                	lw	s0,40(sp)
1c009104:	5492                	lw	s1,36(sp)
1c009106:	5902                	lw	s2,32(sp)
1c009108:	49f2                	lw	s3,28(sp)
1c00910a:	6145                	addi	sp,sp,48
1c00910c:	8082                	ret
  task->arg[0] = (uint32_t)callback;
1c00910e:	1c0094b7          	lui	s1,0x1c009
1c009112:	0dc48493          	addi	s1,s1,220 # 1c0090dc <__pi_read_fs_try_read>
  task->id = PI_TASK_CALLBACK_ID;
1c009116:	02052e23          	sw	zero,60(a0)
  task->arg[0] = (uint32_t)callback;
1c00911a:	d504                	sw	s1,40(a0)
    int size = __pi_fs_read(
1c00911c:	4d50                	lw	a2,28(a0)
1c00911e:	0a452583          	lw	a1,164(a0)
  task->arg[1] = (uint32_t)arg;
1c009122:	d448                	sw	a0,44(s0)
            pi_task_callback(&file->step_event, __pi_read_fs_try_read, (void *) file)
1c009124:	02450913          	addi	s2,a0,36
  task->implem.keep = 1;
1c009128:	4985                	li	s3,1
    int size = __pi_fs_read(
1c00912a:	87ca                	mv	a5,s2
1c00912c:	05352623          	sw	s3,76(a0)
  task->done = 0;
1c009130:	02050c23          	sb	zero,56(a0)
1c009134:	0078                	addi	a4,sp,12
1c009136:	35d9                	jal	1c008ffc <__pi_fs_read>
    file->pending_addr += size;
1c009138:	4c5c                	lw	a5,28(s0)
1c00913a:	97aa                	add	a5,a5,a0
1c00913c:	cc5c                	sw	a5,28(s0)
    file->pending_buffer += size;
1c00913e:	0a442783          	lw	a5,164(s0)
1c009142:	97aa                	add	a5,a5,a0
1c009144:	0af42223          	sw	a5,164(s0)
    file->pending_size -= size;
1c009148:	0a842783          	lw	a5,168(s0)
1c00914c:	40a78533          	sub	a0,a5,a0
    if(!pending)
1c009150:	47b2                	lw	a5,12(sp)
    file->pending_size -= size;
1c009152:	0aa42423          	sw	a0,168(s0)
    if(!pending)
1c009156:	f7cd                	bnez	a5,1c009100 <__pi_read_fs_try_read+0x24>
        if(file->pending_size == 0)
1c009158:	dd49                	beqz	a0,1c0090f2 <__pi_read_fs_try_read+0x16>
  task->id = PI_TASK_CALLBACK_ID;
1c00915a:	02042e23          	sw	zero,60(s0)
  task->arg[0] = (uint32_t)callback;
1c00915e:	d404                	sw	s1,40(s0)
  task->arg[1] = (uint32_t)arg;
1c009160:	d440                	sw	s0,44(s0)
  task->implem.keep = 1;
1c009162:	05342623          	sw	s3,76(s0)
1c009166:	02040c23          	sb	zero,56(s0)
  rt_event_enqueue(task);
1c00916a:	854a                	mv	a0,s2
1c00916c:	bf41                	j	1c0090fc <__pi_read_fs_try_read+0x20>

1c00916e <__pi_read_fs_read_async>:
    if(file->offset + size > file->fs_file.size)
1c00916e:	495c                	lw	a5,20(a0)
1c009170:	4558                	lw	a4,12(a0)
{
1c009172:	1101                	addi	sp,sp,-32
1c009174:	ce06                	sw	ra,28(sp)
    if(file->offset + size > file->fs_file.size)
1c009176:	00c78833          	add	a6,a5,a2
1c00917a:	01077463          	bleu	a6,a4,1c009182 <__pi_read_fs_read_async+0x14>
        real_size = file->fs_file.size - file->offset;
1c00917e:	40f70633          	sub	a2,a4,a5
    file->first_read_size = real_size;
1c009182:	0ac52e23          	sw	a2,188(a0)
1c009186:	00068a23          	sb	zero,20(a3)
    file->pending_addr = file->addr + file->offset;
1c00918a:	495c                	lw	a5,20(a0)
1c00918c:	4d18                	lw	a4,24(a0)
    file->pending_size = real_size;
1c00918e:	0ac52423          	sw	a2,168(a0)
    file->pending_event = event;
1c009192:	d114                	sw	a3,32(a0)
    file->pending_addr = file->addr + file->offset;
1c009194:	973e                	add	a4,a4,a5
    file->offset += real_size;
1c009196:	97b2                	add	a5,a5,a2
    file->pending_buffer = (unsigned int) buffer;
1c009198:	0ab52223          	sw	a1,164(a0)
    file->pending_addr = file->addr + file->offset;
1c00919c:	cd58                	sw	a4,28(a0)
    file->offset += real_size;
1c00919e:	c95c                	sw	a5,20(a0)
    __pi_read_fs_try_read((void *) file);
1c0091a0:	c632                	sw	a2,12(sp)
1c0091a2:	3f2d                	jal	1c0090dc <__pi_read_fs_try_read>
}
1c0091a4:	4632                	lw	a2,12(sp)
1c0091a6:	40f2                	lw	ra,28(sp)
1c0091a8:	8532                	mv	a0,a2
1c0091aa:	6105                	addi	sp,sp,32
1c0091ac:	8082                	ret

1c0091ae <__pi_host_fs_mount>:
  int fd;
} pi_host_fs_file_t;

static int32_t __pi_host_fs_mount(struct pi_device *device)
{
  bsp_fs_data.cluster_reqs_first = NULL;
1c0091ae:	1c0117b7          	lui	a5,0x1c011
1c0091b2:	9807aa23          	sw	zero,-1644(a5) # 1c010994 <bsp_fs_data>
  return 0;
}
1c0091b6:	4501                	li	a0,0
1c0091b8:	8082                	ret

1c0091ba <__pi_host_fs_unmount>:

static void __pi_host_fs_unmount(struct pi_device *device)
{
}
1c0091ba:	8082                	ret

1c0091bc <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0091bc:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c0091c0:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c0091c4:	00052023          	sw	zero,0(a0)
1c0091c8:	01c00713          	li	a4,28
  if (sched->first) {
1c0091cc:	c619                	beqz	a2,1c0091da <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c0091ce:	435c                	lw	a5,4(a4)
1c0091d0:	c388                	sw	a0,0(a5)
  sched->last = event;
1c0091d2:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c0091d4:	30069073          	csrw	mstatus,a3
}
1c0091d8:	8082                	ret
    sched->first = event;
1c0091da:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c0091de:	bfd5                	j	1c0091d2 <rt_event_enqueue+0x16>

1c0091e0 <__pi_host_fs_seek>:
}

static int32_t __pi_host_fs_seek(pi_fs_file_t *arg, unsigned int offset)
{
  pi_host_fs_file_t *file = (pi_host_fs_file_t *)arg;
  return semihost_seek(file->fd, offset);
1c0091e0:	4948                	lw	a0,20(a0)
1c0091e2:	1de0206f          	j	1c00b3c0 <semihost_seek>

1c0091e6 <__pi_host_fs_copy_2d_async>:
  else
    return __pi_host_fs_write_async(arg, buffer, size, task);
}

static int32_t __pi_host_fs_copy_2d_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c0091e6:	7179                	addi	sp,sp,-48
1c0091e8:	d422                	sw	s0,40(sp)
1c0091ea:	d226                	sw	s1,36(sp)
1c0091ec:	d04a                	sw	s2,32(sp)
1c0091ee:	ce4e                	sw	s3,28(sp)
1c0091f0:	cc52                	sw	s4,24(sp)
1c0091f2:	ca56                	sw	s5,20(sp)
1c0091f4:	c85a                	sw	s6,16(sp)
1c0091f6:	c65e                	sw	s7,12(sp)
1c0091f8:	c462                	sw	s8,8(sp)
1c0091fa:	d606                	sw	ra,44(sp)
1c0091fc:	89aa                	mv	s3,a0
1c0091fe:	8a2e                	mv	s4,a1
1c009200:	84b2                	mv	s1,a2
1c009202:	8b36                	mv	s6,a3
1c009204:	8bba                	mv	s7,a4
1c009206:	843e                	mv	s0,a5
1c009208:	8c42                	mv	s8,a6
1c00920a:	8ac6                	mv	s5,a7
  unsigned int chunk;
  for (chunk=0; chunk<size; chunk+=length)
1c00920c:	4901                	li	s2,0
1c00920e:	03696163          	bltu	s2,s6,1c009230 <__pi_host_fs_copy_2d_async+0x4a>
1c009212:	8556                	mv	a0,s5
1c009214:	3765                	jal	1c0091bc <rt_event_enqueue>

    buffer = ((char *)buffer) + length;
    index += stride;
  }
  pi_task_push(task);
  return 0;
1c009216:	4501                	li	a0,0

error:
  pi_task_push(task);
  return -1;
}
1c009218:	50b2                	lw	ra,44(sp)
1c00921a:	5422                	lw	s0,40(sp)
1c00921c:	5492                	lw	s1,36(sp)
1c00921e:	5902                	lw	s2,32(sp)
1c009220:	49f2                	lw	s3,28(sp)
1c009222:	4a62                	lw	s4,24(sp)
1c009224:	4ad2                	lw	s5,20(sp)
1c009226:	4b42                	lw	s6,16(sp)
1c009228:	4bb2                	lw	s7,12(sp)
1c00922a:	4c22                	lw	s8,8(sp)
1c00922c:	6145                	addi	sp,sp,48
1c00922e:	8082                	ret
    if (__pi_host_fs_seek(file, index))
1c009230:	85d2                	mv	a1,s4
1c009232:	854e                	mv	a0,s3
1c009234:	05645433          	p.minu	s0,s0,s6
1c009238:	3765                	jal	1c0091e0 <__pi_host_fs_seek>
1c00923a:	e10d                	bnez	a0,1c00925c <__pi_host_fs_copy_2d_async+0x76>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c00923c:	8622                	mv	a2,s0
1c00923e:	85a6                	mv	a1,s1
1c009240:	854e                	mv	a0,s3
    if (ext2loc)
1c009242:	000c0a63          	beqz	s8,1c009256 <__pi_host_fs_copy_2d_async+0x70>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c009246:	88fff0ef          	jal	ra,1c008ad4 <pi_fs_read>
1c00924a:	00851963          	bne	a0,s0,1c00925c <__pi_host_fs_copy_2d_async+0x76>
    buffer = ((char *)buffer) + length;
1c00924e:	94a2                	add	s1,s1,s0
    index += stride;
1c009250:	9a5e                	add	s4,s4,s7
  for (chunk=0; chunk<size; chunk+=length)
1c009252:	9922                	add	s2,s2,s0
1c009254:	bf6d                	j	1c00920e <__pi_host_fs_copy_2d_async+0x28>
      if (pi_fs_write(file, buffer, length) != (int)length)
1c009256:	8adff0ef          	jal	ra,1c008b02 <pi_fs_write>
1c00925a:	bfc5                	j	1c00924a <__pi_host_fs_copy_2d_async+0x64>
1c00925c:	8556                	mv	a0,s5
1c00925e:	3fb9                	jal	1c0091bc <rt_event_enqueue>
  return -1;
1c009260:	557d                	li	a0,-1
1c009262:	bf5d                	j	1c009218 <__pi_host_fs_copy_2d_async+0x32>

1c009264 <__pi_host_fs_write_async>:
  int result = size - semihost_write(file->fd, buffer, size);
1c009264:	4948                	lw	a0,20(a0)
{
1c009266:	1101                	addi	sp,sp,-32
1c009268:	ce06                	sw	ra,28(sp)
1c00926a:	cc22                	sw	s0,24(sp)
1c00926c:	ca26                	sw	s1,20(sp)
  int result = size - semihost_write(file->fd, buffer, size);
1c00926e:	c636                	sw	a3,12(sp)
{
1c009270:	84b2                	mv	s1,a2
  int result = size - semihost_write(file->fd, buffer, size);
1c009272:	130020ef          	jal	ra,1c00b3a2 <semihost_write>
1c009276:	46b2                	lw	a3,12(sp)
1c009278:	842a                	mv	s0,a0
1c00927a:	8536                	mv	a0,a3
1c00927c:	3781                	jal	1c0091bc <rt_event_enqueue>
}
1c00927e:	40848533          	sub	a0,s1,s0
1c009282:	40f2                	lw	ra,28(sp)
1c009284:	4462                	lw	s0,24(sp)
1c009286:	44d2                	lw	s1,20(sp)
1c009288:	6105                	addi	sp,sp,32
1c00928a:	8082                	ret

1c00928c <__pi_host_fs_read_async>:
  int result = size - semihost_read(file->fd, buffer, size);
1c00928c:	4948                	lw	a0,20(a0)
{
1c00928e:	1101                	addi	sp,sp,-32
1c009290:	ce06                	sw	ra,28(sp)
1c009292:	cc22                	sw	s0,24(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c009294:	c636                	sw	a3,12(sp)
{
1c009296:	8432                	mv	s0,a2
  int result = size - semihost_read(file->fd, buffer, size);
1c009298:	0ec020ef          	jal	ra,1c00b384 <semihost_read>
  task->implem.data[0] = result;
1c00929c:	46b2                	lw	a3,12(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c00929e:	8c09                	sub	s0,s0,a0
  task->implem.data[0] = result;
1c0092a0:	de80                	sw	s0,56(a3)
1c0092a2:	8536                	mv	a0,a3
1c0092a4:	3f21                	jal	1c0091bc <rt_event_enqueue>
}
1c0092a6:	8522                	mv	a0,s0
1c0092a8:	40f2                	lw	ra,28(sp)
1c0092aa:	4462                	lw	s0,24(sp)
1c0092ac:	6105                	addi	sp,sp,32
1c0092ae:	8082                	ret

1c0092b0 <__pi_host_fs_copy_async>:
{
1c0092b0:	1101                	addi	sp,sp,-32
1c0092b2:	cc22                	sw	s0,24(sp)
1c0092b4:	ca26                	sw	s1,20(sp)
  if (__pi_host_fs_seek(arg, index))
1c0092b6:	c636                	sw	a3,12(sp)
{
1c0092b8:	84b2                	mv	s1,a2
  if (__pi_host_fs_seek(arg, index))
1c0092ba:	c43a                	sw	a4,8(sp)
{
1c0092bc:	ce06                	sw	ra,28(sp)
1c0092be:	842a                	mv	s0,a0
  if (__pi_host_fs_seek(arg, index))
1c0092c0:	c23e                	sw	a5,4(sp)
1c0092c2:	3f39                	jal	1c0091e0 <__pi_host_fs_seek>
1c0092c4:	4632                	lw	a2,12(sp)
1c0092c6:	4692                	lw	a3,4(sp)
1c0092c8:	4722                	lw	a4,8(sp)
1c0092ca:	ed11                	bnez	a0,1c0092e6 <__pi_host_fs_copy_async+0x36>
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c0092cc:	85a6                	mv	a1,s1
1c0092ce:	8522                	mv	a0,s0
  if (ext2loc)
1c0092d0:	c711                	beqz	a4,1c0092dc <__pi_host_fs_copy_async+0x2c>
}
1c0092d2:	4462                	lw	s0,24(sp)
1c0092d4:	40f2                	lw	ra,28(sp)
1c0092d6:	44d2                	lw	s1,20(sp)
1c0092d8:	6105                	addi	sp,sp,32
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c0092da:	bf4d                	j	1c00928c <__pi_host_fs_read_async>
}
1c0092dc:	4462                	lw	s0,24(sp)
1c0092de:	40f2                	lw	ra,28(sp)
1c0092e0:	44d2                	lw	s1,20(sp)
1c0092e2:	6105                	addi	sp,sp,32
    return __pi_host_fs_write_async(arg, buffer, size, task);
1c0092e4:	b741                	j	1c009264 <__pi_host_fs_write_async>
}
1c0092e6:	40f2                	lw	ra,28(sp)
1c0092e8:	4462                	lw	s0,24(sp)
1c0092ea:	44d2                	lw	s1,20(sp)
1c0092ec:	557d                	li	a0,-1
1c0092ee:	6105                	addi	sp,sp,32
1c0092f0:	8082                	ret

1c0092f2 <__pi_host_fs_direct_read_async>:
1c0092f2:	bf69                	j	1c00928c <__pi_host_fs_read_async>

1c0092f4 <__pi_host_fs_close>:
{
1c0092f4:	1141                	addi	sp,sp,-16
1c0092f6:	c422                	sw	s0,8(sp)
1c0092f8:	842a                	mv	s0,a0
  semihost_close(file->fd);
1c0092fa:	4948                	lw	a0,20(a0)
{
1c0092fc:	c606                	sw	ra,12(sp)
  semihost_close(file->fd);
1c0092fe:	07e020ef          	jal	ra,1c00b37c <semihost_close>
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c009302:	8522                	mv	a0,s0
}
1c009304:	4422                	lw	s0,8(sp)
1c009306:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c009308:	45e1                	li	a1,24
}
1c00930a:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c00930c:	45f0206f          	j	1c00bf6a <pi_l2_free>

1c009310 <__pi_host_fs_open>:
{
1c009310:	1101                	addi	sp,sp,-32
1c009312:	ca26                	sw	s1,20(sp)
1c009314:	84aa                	mv	s1,a0
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c009316:	4561                	li	a0,24
{
1c009318:	c84a                	sw	s2,16(sp)
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c00931a:	c632                	sw	a2,12(sp)
{
1c00931c:	ce06                	sw	ra,28(sp)
1c00931e:	cc22                	sw	s0,24(sp)
1c009320:	892e                	mv	s2,a1
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c009322:	43b020ef          	jal	ra,1c00bf5c <pi_l2_malloc>
  if (file == NULL) goto error;
1c009326:	4632                	lw	a2,12(sp)
1c009328:	e909                	bnez	a0,1c00933a <__pi_host_fs_open+0x2a>
  return NULL;
1c00932a:	4401                	li	s0,0
}
1c00932c:	8522                	mv	a0,s0
1c00932e:	40f2                	lw	ra,28(sp)
1c009330:	4462                	lw	s0,24(sp)
1c009332:	44d2                	lw	s1,20(sp)
1c009334:	4942                	lw	s2,16(sp)
1c009336:	6105                	addi	sp,sp,32
1c009338:	8082                	ret
  file->header.fs = device;
1c00933a:	c104                	sw	s1,0(a0)
1c00933c:	842a                	mv	s0,a0
  file->fd = semihost_open(file_name, flags == PI_FS_FLAGS_WRITE ? 6 : flags == PI_FS_FLAGS_APPEND ? 8 : 0);
1c00933e:	4599                	li	a1,6
1c009340:	00162663          	p.beqimm	a2,1,1c00934c <__pi_host_fs_open+0x3c>
1c009344:	45a1                	li	a1,8
1c009346:	00262363          	p.beqimm	a2,2,1c00934c <__pi_host_fs_open+0x3c>
1c00934a:	4581                	li	a1,0
1c00934c:	854a                	mv	a0,s2
1c00934e:	002020ef          	jal	ra,1c00b350 <semihost_open>
1c009352:	c848                	sw	a0,20(s0)
  if (file->fd == -1)
1c009354:	fdf52be3          	p.beqimm	a0,-1,1c00932a <__pi_host_fs_open+0x1a>
  file->header.api = (pi_fs_api_t *)device->api;
1c009358:	409c                	lw	a5,0(s1)
  file->header.data = file;
1c00935a:	c400                	sw	s0,8(s0)
  file->header.fs = device;
1c00935c:	c004                	sw	s1,0(s0)
  file->header.api = (pi_fs_api_t *)device->api;
1c00935e:	c05c                	sw	a5,4(s0)
  file->header.fs_data = &bsp_fs_data;
1c009360:	1c0117b7          	lui	a5,0x1c011
1c009364:	99478793          	addi	a5,a5,-1644 # 1c010994 <bsp_fs_data>
1c009368:	c81c                	sw	a5,16(s0)
  return (pi_fs_file_t *)file;
1c00936a:	b7c9                	j	1c00932c <__pi_host_fs_open+0x1c>

1c00936c <pi_camera_open>:
#include "bsp/camera.h"

int32_t pi_camera_open(struct pi_device *device)
{
  struct pi_camera_conf *conf = (struct pi_camera_conf *)device->config;
  pi_camera_api_t *api = (pi_camera_api_t *)conf->api;
1c00936c:	415c                	lw	a5,4(a0)
1c00936e:	43dc                	lw	a5,4(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c009370:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c009374:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c009376:	8302                	jr	t1

1c009378 <pi_camera_capture>:
}



void pi_camera_capture(struct pi_device *device, void *buffer, uint32_t size)
{
1c009378:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00937a:	4785                	li	a5,1
1c00937c:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00937e:	d43e                	sw	a5,40(sp)
}

static inline void pi_camera_capture_async(struct pi_device *device, void *buffer, uint32_t bufferlen, pi_task_t *task)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  api->capture_async(device, buffer, bufferlen, task);
1c009380:	411c                	lw	a5,0(a0)
  task->done = 0;
1c009382:	00010a23          	sb	zero,20(sp)
1c009386:	c522                	sw	s0,136(sp)
1c009388:	47dc                	lw	a5,12(a5)
1c00938a:	c706                	sw	ra,140(sp)
1c00938c:	c326                	sw	s1,132(sp)
  task->arg[0] = (uint32_t)0;
1c00938e:	c202                	sw	zero,4(sp)
1c009390:	868a                	mv	a3,sp
1c009392:	9782                	jalr	a5
  while(!task->done)
1c009394:	01410783          	lb	a5,20(sp)
1c009398:	c791                	beqz	a5,1c0093a4 <pi_camera_capture+0x2c>
  pi_task_t task;
  pi_camera_capture_async(device, buffer, size, pi_task_block(&task));
  pi_task_wait_on(&task);
}
1c00939a:	40ba                	lw	ra,140(sp)
1c00939c:	442a                	lw	s0,136(sp)
1c00939e:	449a                	lw	s1,132(sp)
1c0093a0:	6149                	addi	sp,sp,144
1c0093a2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0093a4:	300474f3          	csrrci	s1,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0093a8:	4585                	li	a1,1
1c0093aa:	01c00513          	li	a0,28
1c0093ae:	10f020ef          	jal	ra,1c00bcbc <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0093b2:	30049073          	csrw	mstatus,s1
1c0093b6:	bff9                	j	1c009394 <pi_camera_capture+0x1c>

1c0093b8 <__camera_conf_init>:



void __camera_conf_init(struct pi_camera_conf *conf)
{
}
1c0093b8:	8082                	ret

1c0093ba <__himax_reg_write>:
static void __himax_reg_write(himax_t *himax, uint16_t addr, uint8_t value)
{
  if (is_i2c_active())
  {
    himax->i2c_req.value = value;
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c0093ba:	00859793          	slli	a5,a1,0x8
1c0093be:	81a1                	srli	a1,a1,0x8
1c0093c0:	8ddd                	or	a1,a1,a5
    himax->i2c_req.value = value;
1c0093c2:	02c50f23          	sb	a2,62(a0)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c0093c6:	02b51e23          	sh	a1,60(a0)
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 3, PI_I2C_XFER_STOP);
1c0093ca:	4681                	li	a3,0
1c0093cc:	03c50593          	addi	a1,a0,60
1c0093d0:	460d                	li	a2,3
1c0093d2:	03050513          	addi	a0,a0,48
1c0093d6:	57a0406f          	j	1c00d950 <pi_i2c_write>

1c0093da <__himax_init_regs>:
}



static void __himax_init_regs(himax_t *himax)
{
1c0093da:	1101                	addi	sp,sp,-32
1c0093dc:	cc22                	sw	s0,24(sp)
1c0093de:	1c010437          	lui	s0,0x1c010
1c0093e2:	ca26                	sw	s1,20(sp)
1c0093e4:	c84a                	sw	s2,16(sp)
1c0093e6:	c64e                	sw	s3,12(sp)
1c0093e8:	ce06                	sw	ra,28(sp)
1c0093ea:	89aa                	mv	s3,a0
1c0093ec:	1dc40413          	addi	s0,s0,476 # 1c0101dc <__himax_reg_init>
  int32_t i;
  for(i=0; i<(int32_t)(sizeof(__himax_reg_init)/sizeof(himax_reg_init_t)); i++)
1c0093f0:	4481                	li	s1,0
1c0093f2:	04700913          	li	s2,71
  {
    __himax_reg_write(himax, __himax_reg_init[i].addr, __himax_reg_init[i].data);
1c0093f6:	00244603          	lbu	a2,2(s0)
1c0093fa:	0044558b          	p.lhu	a1,4(s0!)
1c0093fe:	854e                	mv	a0,s3
  for(i=0; i<(int32_t)(sizeof(__himax_reg_init)/sizeof(himax_reg_init_t)); i++)
1c009400:	0485                	addi	s1,s1,1
    __himax_reg_write(himax, __himax_reg_init[i].addr, __himax_reg_init[i].data);
1c009402:	3f65                	jal	1c0093ba <__himax_reg_write>
  for(i=0; i<(int32_t)(sizeof(__himax_reg_init)/sizeof(himax_reg_init_t)); i++)
1c009404:	ff2499e3          	bne	s1,s2,1c0093f6 <__himax_init_regs+0x1c>
  }
}
1c009408:	40f2                	lw	ra,28(sp)
1c00940a:	4462                	lw	s0,24(sp)
1c00940c:	44d2                	lw	s1,20(sp)
1c00940e:	4942                	lw	s2,16(sp)
1c009410:	49b2                	lw	s3,12(sp)
1c009412:	6105                	addi	sp,sp,32
1c009414:	8082                	ret

1c009416 <__himax_set_qqvga>:
    __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
    pi_time_wait_us(50);
  }
}

static void __himax_set_qqvga(himax_t *himax){
1c009416:	1141                	addi	sp,sp,-16
  __himax_reg_write(himax, HIMAX_BINNING_MODE, 0x03);
1c009418:	460d                	li	a2,3
1c00941a:	39000593          	li	a1,912
static void __himax_set_qqvga(himax_t *himax){
1c00941e:	c606                	sw	ra,12(sp)
1c009420:	c422                	sw	s0,8(sp)
1c009422:	842a                	mv	s0,a0
  __himax_reg_write(himax, HIMAX_BINNING_MODE, 0x03);
1c009424:	3f59                	jal	1c0093ba <__himax_reg_write>
  __himax_reg_write(himax, HIMAX_READOUT_X, 0x03);
1c009426:	8522                	mv	a0,s0
1c009428:	460d                	li	a2,3
1c00942a:	38300593          	li	a1,899
1c00942e:	3771                	jal	1c0093ba <__himax_reg_write>
  __himax_reg_write(himax, HIMAX_READOUT_Y, 0x03);
1c009430:	8522                	mv	a0,s0
}
1c009432:	4422                	lw	s0,8(sp)
1c009434:	40b2                	lw	ra,12(sp)
  __himax_reg_write(himax, HIMAX_READOUT_Y, 0x03);
1c009436:	460d                	li	a2,3
1c009438:	38700593          	li	a1,903
}
1c00943c:	0141                	addi	sp,sp,16
  __himax_reg_write(himax, HIMAX_READOUT_Y, 0x03);
1c00943e:	bfb5                	j	1c0093ba <__himax_reg_write>

1c009440 <__himax_reg_set>:
}



int32_t __himax_reg_set(struct pi_device *device, uint32_t addr, uint8_t *value)
{
1c009440:	1141                	addi	sp,sp,-16
1c009442:	c606                	sw	ra,12(sp)
  himax_t *himax = (himax_t *)device->data;
  __himax_reg_write(himax, addr, *value);
1c009444:	4508                	lw	a0,8(a0)
1c009446:	00064603          	lbu	a2,0(a2)
1c00944a:	1005d5b3          	p.exthz	a1,a1
1c00944e:	37b5                	jal	1c0093ba <__himax_reg_write>
  return 0;
}
1c009450:	40b2                	lw	ra,12(sp)
1c009452:	4501                	li	a0,0
1c009454:	0141                	addi	sp,sp,16
1c009456:	8082                	ret

1c009458 <__himax_reg_get>:



int32_t __himax_reg_get(struct pi_device *device, uint32_t addr, uint8_t *value)
{
1c009458:	1141                	addi	sp,sp,-16
1c00945a:	c422                	sw	s0,8(sp)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c00945c:	01000737          	lui	a4,0x1000
  himax_t *himax = (himax_t *)device->data;
1c009460:	4500                	lw	s0,8(a0)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c009462:	f0070713          	addi	a4,a4,-256 # ffff00 <__L2+0xf7ff00>
1c009466:	00859793          	slli	a5,a1,0x8
1c00946a:	8ff9                	and	a5,a5,a4
1c00946c:	ce8595b3          	p.extractu	a1,a1,7,8
{
1c009470:	c606                	sw	ra,12(sp)
1c009472:	c226                	sw	s1,4(sp)
1c009474:	c04a                	sw	s2,0(sp)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c009476:	8ddd                	or	a1,a1,a5
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c009478:	03040493          	addi	s1,s0,48
{
1c00947c:	8932                	mv	s2,a2
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c00947e:	02b41e23          	sh	a1,60(s0)
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c009482:	4685                	li	a3,1
1c009484:	03c40593          	addi	a1,s0,60
1c009488:	4609                	li	a2,2
1c00948a:	8526                	mv	a0,s1
1c00948c:	4c4040ef          	jal	ra,1c00d950 <pi_i2c_write>
    pi_i2c_read(&himax->i2c_device, (uint8_t *)&himax->i2c_read_value, 1, PI_I2C_XFER_STOP);
1c009490:	04040593          	addi	a1,s0,64
1c009494:	8526                	mv	a0,s1
1c009496:	4681                	li	a3,0
1c009498:	4605                	li	a2,1
1c00949a:	596040ef          	jal	ra,1c00da30 <pi_i2c_read>
    return *(volatile uint8_t *)&himax->i2c_read_value;
1c00949e:	04044783          	lbu	a5,64(s0)
  *value = __himax_reg_read(himax, addr);
  return 0;
}
1c0094a2:	40b2                	lw	ra,12(sp)
1c0094a4:	4422                	lw	s0,8(sp)
  *value = __himax_reg_read(himax, addr);
1c0094a6:	00f90023          	sb	a5,0(s2)
}
1c0094aa:	4492                	lw	s1,4(sp)
1c0094ac:	4902                	lw	s2,0(sp)
1c0094ae:	4501                	li	a0,0
1c0094b0:	0141                	addi	sp,sp,16
1c0094b2:	8082                	ret

1c0094b4 <__himax_capture_async>:
  pi_cpi_capture_async(&himax->cpi_device, buffer, bufferlen, task);
1c0094b4:	4508                	lw	a0,8(a0)
1c0094b6:	02450513          	addi	a0,a0,36
1c0094ba:	3200406f          	j	1c00d7da <pi_cpi_capture_async>

1c0094be <__himax_standby>:
  if (himax->is_awake)
1c0094be:	4178                	lw	a4,68(a0)
1c0094c0:	cf19                	beqz	a4,1c0094de <__himax_standby+0x20>
{
1c0094c2:	1141                	addi	sp,sp,-16
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c0094c4:	4601                	li	a2,0
1c0094c6:	10000593          	li	a1,256
{
1c0094ca:	c422                	sw	s0,8(sp)
1c0094cc:	c606                	sw	ra,12(sp)
1c0094ce:	842a                	mv	s0,a0
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c0094d0:	35ed                	jal	1c0093ba <__himax_reg_write>
}
1c0094d2:	40b2                	lw	ra,12(sp)
    himax->is_awake = 0;
1c0094d4:	04042223          	sw	zero,68(s0)
}
1c0094d8:	4422                	lw	s0,8(sp)
1c0094da:	0141                	addi	sp,sp,16
1c0094dc:	8082                	ret
1c0094de:	8082                	ret

1c0094e0 <__himax_close>:
{
1c0094e0:	1141                	addi	sp,sp,-16
1c0094e2:	c422                	sw	s0,8(sp)
  himax_t *himax = (himax_t *)device->data;
1c0094e4:	4500                	lw	s0,8(a0)
{
1c0094e6:	c606                	sw	ra,12(sp)
  __himax_standby(himax);
1c0094e8:	8522                	mv	a0,s0
1c0094ea:	3fd1                	jal	1c0094be <__himax_standby>
  pi_cpi_close(&himax->cpi_device);
1c0094ec:	02440513          	addi	a0,s0,36
1c0094f0:	2a2040ef          	jal	ra,1c00d792 <pi_cpi_close>
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c0094f4:	8522                	mv	a0,s0
}
1c0094f6:	4422                	lw	s0,8(sp)
1c0094f8:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c0094fa:	04800593          	li	a1,72
}
1c0094fe:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c009500:	26b0206f          	j	1c00bf6a <pi_l2_free>

1c009504 <__himax_reset>:
{
1c009504:	1101                	addi	sp,sp,-32
1c009506:	cc22                	sw	s0,24(sp)
  __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c009508:	4605                	li	a2,1
{
1c00950a:	842a                	mv	s0,a0
  __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c00950c:	10300593          	li	a1,259
{
1c009510:	ca26                	sw	s1,20(sp)
1c009512:	c84a                	sw	s2,16(sp)
1c009514:	c64e                	sw	s3,12(sp)
1c009516:	c452                	sw	s4,8(sp)
1c009518:	ce06                	sw	ra,28(sp)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c00951a:	4a05                	li	s4,1
  __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c00951c:	3d79                	jal	1c0093ba <__himax_reg_write>
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c00951e:	03040493          	addi	s1,s0,48
1c009522:	03c40993          	addi	s3,s0,60
    pi_i2c_read(&himax->i2c_device, (uint8_t *)&himax->i2c_read_value, 1, PI_I2C_XFER_STOP);
1c009526:	04040913          	addi	s2,s0,64
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c00952a:	4685                	li	a3,1
1c00952c:	4609                	li	a2,2
1c00952e:	85ce                	mv	a1,s3
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c009530:	03441e23          	sh	s4,60(s0)
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c009534:	8526                	mv	a0,s1
1c009536:	41a040ef          	jal	ra,1c00d950 <pi_i2c_write>
    pi_i2c_read(&himax->i2c_device, (uint8_t *)&himax->i2c_read_value, 1, PI_I2C_XFER_STOP);
1c00953a:	4681                	li	a3,0
1c00953c:	4605                	li	a2,1
1c00953e:	85ca                	mv	a1,s2
1c009540:	8526                	mv	a0,s1
1c009542:	4ee040ef          	jal	ra,1c00da30 <pi_i2c_read>
    return *(volatile uint8_t *)&himax->i2c_read_value;
1c009546:	04044783          	lbu	a5,64(s0)
1c00954a:	0ff7f793          	andi	a5,a5,255
  while (__himax_reg_read(himax, HIMAX_MODE_SELECT) != HIMAX_STANDBY)
1c00954e:	eb89                	bnez	a5,1c009560 <__himax_reset+0x5c>
}
1c009550:	40f2                	lw	ra,28(sp)
1c009552:	4462                	lw	s0,24(sp)
1c009554:	44d2                	lw	s1,20(sp)
1c009556:	4942                	lw	s2,16(sp)
1c009558:	49b2                	lw	s3,12(sp)
1c00955a:	4a22                	lw	s4,8(sp)
1c00955c:	6105                	addi	sp,sp,32
1c00955e:	8082                	ret
    __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c009560:	8522                	mv	a0,s0
1c009562:	4605                	li	a2,1
1c009564:	10300593          	li	a1,259
1c009568:	3d89                	jal	1c0093ba <__himax_reg_write>
    pi_time_wait_us(50);
1c00956a:	03200513          	li	a0,50
1c00956e:	2db020ef          	jal	ra,1c00c048 <pi_time_wait_us>
1c009572:	bf65                	j	1c00952a <__himax_reset+0x26>

1c009574 <__himax_open>:
{
1c009574:	7179                	addi	sp,sp,-48
1c009576:	d226                	sw	s1,36(sp)
1c009578:	d04a                	sw	s2,32(sp)
  struct pi_himax_conf *conf = (struct pi_himax_conf *)device->config;
1c00957a:	4144                	lw	s1,4(a0)
{
1c00957c:	892a                	mv	s2,a0
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c00957e:	04800513          	li	a0,72
{
1c009582:	d606                	sw	ra,44(sp)
1c009584:	d422                	sw	s0,40(sp)
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c009586:	1d7020ef          	jal	ra,1c00bf5c <pi_l2_malloc>
  if (himax == NULL) return -1;
1c00958a:	14050063          	beqz	a0,1c0096ca <__himax_open+0x156>
  memcpy(&himax->conf, conf, sizeof(*conf));
1c00958e:	02400613          	li	a2,36
1c009592:	85a6                	mv	a1,s1
1c009594:	842a                	mv	s0,a0
1c009596:	400050ef          	jal	ra,1c00e996 <memcpy>
  if (bsp_himax_open(conf))
1c00959a:	8526                	mv	a0,s1
  device->data = (void *)himax;
1c00959c:	00892423          	sw	s0,8(s2)
  if (bsp_himax_open(conf))
1c0095a0:	6d7010ef          	jal	ra,1c00b476 <bsp_himax_open>
1c0095a4:	10051e63          	bnez	a0,1c0096c0 <__himax_open+0x14c>
  pi_cpi_conf_init(&cpi_conf);
1c0095a8:	0028                	addi	a0,sp,8
1c0095aa:	174040ef          	jal	ra,1c00d71e <pi_cpi_conf_init>
  cpi_conf.itf = conf->cpi_itf;
1c0095ae:	449c                	lw	a5,8(s1)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c0095b0:	02440913          	addi	s2,s0,36
1c0095b4:	854a                	mv	a0,s2
1c0095b6:	002c                	addi	a1,sp,8
  cpi_conf.itf = conf->cpi_itf;
1c0095b8:	00f10623          	sb	a5,12(sp)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c0095bc:	080020ef          	jal	ra,1c00b63c <pi_open_from_conf>
  if (pi_cpi_open(&himax->cpi_device))
1c0095c0:	854a                	mv	a0,s2
1c0095c2:	166040ef          	jal	ra,1c00d728 <pi_cpi_open>
1c0095c6:	0e051d63          	bnez	a0,1c0096c0 <__himax_open+0x14c>
  pi_i2c_conf_init(&i2c_conf);
1c0095ca:	0808                	addi	a0,sp,16
1c0095cc:	5a0040ef          	jal	ra,1c00db6c <pi_i2c_conf_init>
  i2c_conf.cs = 0x48;
1c0095d0:	04800793          	li	a5,72
1c0095d4:	00f11b23          	sh	a5,22(sp)
  i2c_conf.itf = conf->i2c_itf;
1c0095d8:	44dc                	lw	a5,12(s1)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c0095da:	03040493          	addi	s1,s0,48
1c0095de:	8526                	mv	a0,s1
1c0095e0:	080c                	addi	a1,sp,16
  i2c_conf.itf = conf->i2c_itf;
1c0095e2:	00f10a23          	sb	a5,20(sp)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c0095e6:	056020ef          	jal	ra,1c00b63c <pi_open_from_conf>
  if (pi_i2c_open(&himax->i2c_device))
1c0095ea:	8526                	mv	a0,s1
1c0095ec:	468040ef          	jal	ra,1c00da54 <pi_i2c_open>
1c0095f0:	e569                	bnez	a0,1c0096ba <__himax_open+0x146>
1c0095f2:	5450                	lw	a2,44(s0)
static inline void udma_cpi_cam_tx_cfg_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_TX_CFG_OFFSET, value); }

static inline uint32_t udma_cpi_cam_tx_initcfg_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_TX_INITCFG_OFFSET); }
static inline void udma_cpi_cam_tx_initcfg_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_TX_INITCFG_OFFSET, value); }

static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c0095f4:	4618                	lw	a4,8(a2)
}

static inline void pi_cpi_set_format(struct pi_device *device, pi_cpi_format_e format)
{
  rt_cpi_t *cpi = (rt_cpi_t *)device->data;
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c0095f6:	02072783          	lw	a5,32(a4)
  reg.format = format;
1c0095fa:	4695                	li	a3,5
1c0095fc:	c486a7b3          	p.insert	a5,a3,2,8
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c009600:	02f72023          	sw	a5,32(a4)
  if(himax->conf.format>PI_CAMERA_QQVGA){
1c009604:	4858                	lw	a4,20(s0)
1c009606:	4789                	li	a5,2
1c009608:	0ae7f263          	bleu	a4,a5,1c0096ac <__himax_open+0x138>
      rowlen = himax->conf.format;
1c00960c:	100757b3          	p.exthz	a5,a4

static inline void pi_cpi_set_rowlen(struct pi_device *device, uint16_t rowlen)
{
  rt_cpi_t *cpi = (rt_cpi_t *)device->data;
  /* the rowlen should be the weidth of each frame devided by the channel size in byte */
  udma_cpi_cam_cfg_size_set(cpi->base, UDMA_CPI_CAM_CFG_SIZE_ROWLEN(
1c009610:	01c64703          	lbu	a4,28(a2)
1c009614:	4614                	lw	a3,8(a2)
1c009616:	e311                	bnez	a4,1c00961a <__himax_open+0xa6>
1c009618:	4705                	li	a4,1
1c00961a:	02e7c7b3          	div	a5,a5,a4
1c00961e:	17fd                	addi	a5,a5,-1
1c009620:	07c2                	slli	a5,a5,0x10

static inline uint32_t udma_cpi_cam_cfg_ur_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_UR_OFFSET); }
static inline void udma_cpi_cam_cfg_ur_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_UR_OFFSET, value); }

static inline uint32_t udma_cpi_cam_cfg_size_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_SIZE_OFFSET); }
static inline void udma_cpi_cam_cfg_size_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_SIZE_OFFSET, value); }
1c009622:	02f6a623          	sw	a5,44(a3)
  if (himax->conf.roi.slice_en != 0)
1c009626:	02044783          	lbu	a5,32(s0)
1c00962a:	cfa9                	beqz	a5,1c009684 <__himax_open+0x110>
    pi_cpi_set_slice(&himax->cpi_device, himax->conf.roi.x>>div,
1c00962c:	01845703          	lhu	a4,24(s0)
            himax->conf.roi.y,
1c009630:	01a45803          	lhu	a6,26(s0)
    pi_cpi_set_slice(&himax->cpi_device, himax->conf.roi.x>>div,
1c009634:	01c45683          	lhu	a3,28(s0)
            himax->conf.roi.h);
1c009638:	01e45783          	lhu	a5,30(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c00963c:	4608                	lw	a0,8(a2)

static inline void pi_cpi_set_slice(struct pi_device *device, uint32_t x, uint32_t y, uint32_t w, uint32_t h)
{
  rt_cpi_t *cpi = (rt_cpi_t *)device->data;

  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c00963e:	02052883          	lw	a7,32(a0)
  reg.frameslice_en = w != 0;
1c009642:	00d035b3          	snez	a1,a3
1c009646:	c075a8b3          	p.insert	a7,a1,0,7
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c00964a:	03152023          	sw	a7,32(a0)
  udma_cpi_cam_cfg_glob_set(cpi->base, reg.raw);

  if (w)
1c00964e:	ca9d                	beqz	a3,1c009684 <__himax_open+0x110>
  {
    udma_cpi_cam_cfg_ll_set(cpi->base,
      UDMA_CPI_CAM_CFG_LL_FRAMESLICE_LLX(x/(cpi->datasize ? cpi->datasize : 1)) |
1c009650:	01c64603          	lbu	a2,28(a2)
1c009654:	85b2                	mv	a1,a2
1c009656:	e211                	bnez	a2,1c00965a <__himax_open+0xe6>
1c009658:	4605                	li	a2,1
1c00965a:	02c75633          	divu	a2,a4,a2
      UDMA_CPI_CAM_CFG_LL_FRAMESLICE_LLY(y)
1c00965e:	01081893          	slli	a7,a6,0x10
    udma_cpi_cam_cfg_ll_set(cpi->base,
1c009662:	01166633          	or	a2,a2,a7
static inline void udma_cpi_cam_cfg_ll_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_LL_OFFSET, value); }
1c009666:	02c52223          	sw	a2,36(a0)
    );

    udma_cpi_cam_cfg_ur_set(cpi->base,
      UDMA_CPI_CAM_CFG_UR_FRAMESLICE_URX((x + w)/(cpi->datasize ? cpi->datasize : 1) - 1) |
1c00966a:	96ba                	add	a3,a3,a4
1c00966c:	872e                	mv	a4,a1
1c00966e:	e191                	bnez	a1,1c009672 <__himax_open+0xfe>
1c009670:	4705                	li	a4,1
1c009672:	02e6d733          	divu	a4,a3,a4
      UDMA_CPI_CAM_CFG_UR_FRAMESLICE_URY(y + h - 1)
1c009676:	97c2                	add	a5,a5,a6
1c009678:	17fd                	addi	a5,a5,-1
1c00967a:	07c2                	slli	a5,a5,0x10
      UDMA_CPI_CAM_CFG_UR_FRAMESLICE_URX((x + w)/(cpi->datasize ? cpi->datasize : 1) - 1) |
1c00967c:	177d                	addi	a4,a4,-1
    udma_cpi_cam_cfg_ur_set(cpi->base,
1c00967e:	8fd9                	or	a5,a5,a4
static inline void udma_cpi_cam_cfg_ur_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_UR_OFFSET, value); }
1c009680:	02f52423          	sw	a5,40(a0)
  __himax_reset(himax);
1c009684:	8522                	mv	a0,s0
  himax->is_awake = 0;
1c009686:	04042223          	sw	zero,68(s0)
  __himax_reset(himax);
1c00968a:	3dad                	jal	1c009504 <__himax_reset>
  __himax_init_regs(himax);
1c00968c:	8522                	mv	a0,s0
1c00968e:	d4dff0ef          	jal	ra,1c0093da <__himax_init_regs>
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c009692:	485c                	lw	a5,20(s0)
  return 0;
1c009694:	4481                	li	s1,0
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c009696:	0027b463          	p.bneimm	a5,2,1c00969e <__himax_open+0x12a>
    __himax_set_qqvga(himax);
1c00969a:	8522                	mv	a0,s0
1c00969c:	3bad                	jal	1c009416 <__himax_set_qqvga>
}
1c00969e:	50b2                	lw	ra,44(sp)
1c0096a0:	5422                	lw	s0,40(sp)
1c0096a2:	8526                	mv	a0,s1
1c0096a4:	5902                	lw	s2,32(sp)
1c0096a6:	5492                	lw	s1,36(sp)
1c0096a8:	6145                	addi	sp,sp,48
1c0096aa:	8082                	ret
      rowlen = 160+2;
1c0096ac:	0a200793          	li	a5,162
  }else if(himax->conf.format==PI_CAMERA_QQVGA){
1c0096b0:	f62720e3          	p.beqimm	a4,2,1c009610 <__himax_open+0x9c>
      rowlen = 320+4;
1c0096b4:	14400793          	li	a5,324
1c0096b8:	bfa1                	j	1c009610 <__himax_open+0x9c>
  pi_cpi_close(&himax->cpi_device);
1c0096ba:	854a                	mv	a0,s2
1c0096bc:	0d6040ef          	jal	ra,1c00d792 <pi_cpi_close>
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c0096c0:	04800593          	li	a1,72
1c0096c4:	8522                	mv	a0,s0
1c0096c6:	0a5020ef          	jal	ra,1c00bf6a <pi_l2_free>
  if (himax == NULL) return -1;
1c0096ca:	54fd                	li	s1,-1
1c0096cc:	bfc9                	j	1c00969e <__himax_open+0x12a>

1c0096ce <__himax_reopen>:
{
1c0096ce:	7139                	addi	sp,sp,-64
1c0096d0:	da26                	sw	s1,52(sp)
1c0096d2:	d84a                	sw	s2,48(sp)
  struct pi_himax_conf *conf = (struct pi_himax_conf *)device->config;
1c0096d4:	4144                	lw	s1,4(a0)
{
1c0096d6:	892a                	mv	s2,a0
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c0096d8:	04800513          	li	a0,72
{
1c0096dc:	d64e                	sw	s3,44(sp)
1c0096de:	de06                	sw	ra,60(sp)
1c0096e0:	dc22                	sw	s0,56(sp)
1c0096e2:	89ae                	mv	s3,a1
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c0096e4:	079020ef          	jal	ra,1c00bf5c <pi_l2_malloc>
  if (himax == NULL) return -1;
1c0096e8:	c955                	beqz	a0,1c00979c <__himax_reopen+0xce>
  memcpy(&himax->conf, conf, sizeof(*conf));
1c0096ea:	02400613          	li	a2,36
1c0096ee:	85a6                	mv	a1,s1
1c0096f0:	842a                	mv	s0,a0
1c0096f2:	2a4050ef          	jal	ra,1c00e996 <memcpy>
  if (bsp_himax_open(conf))
1c0096f6:	8526                	mv	a0,s1
  device->data = (void *)himax;
1c0096f8:	00892423          	sw	s0,8(s2)
  if (bsp_himax_open(conf))
1c0096fc:	57b010ef          	jal	ra,1c00b476 <bsp_himax_open>
1c009700:	e949                	bnez	a0,1c009792 <__himax_reopen+0xc4>
  pi_cpi_conf_init(&cpi_conf);
1c009702:	0028                	addi	a0,sp,8
1c009704:	01a040ef          	jal	ra,1c00d71e <pi_cpi_conf_init>
  cpi_conf.itf = conf->cpi_itf;
1c009708:	449c                	lw	a5,8(s1)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c00970a:	02440913          	addi	s2,s0,36
1c00970e:	854a                	mv	a0,s2
1c009710:	002c                	addi	a1,sp,8
  cpi_conf.itf = conf->cpi_itf;
1c009712:	00f10623          	sb	a5,12(sp)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c009716:	727010ef          	jal	ra,1c00b63c <pi_open_from_conf>
  if (pi_cpi_open(&himax->cpi_device))
1c00971a:	854a                	mv	a0,s2
1c00971c:	00c040ef          	jal	ra,1c00d728 <pi_cpi_open>
1c009720:	e92d                	bnez	a0,1c009792 <__himax_reopen+0xc4>
  pi_i2c_conf_init(&i2c_conf);
1c009722:	0808                	addi	a0,sp,16
1c009724:	448040ef          	jal	ra,1c00db6c <pi_i2c_conf_init>
  i2c_conf.cs = 0x48;
1c009728:	04800793          	li	a5,72
1c00972c:	00f11b23          	sh	a5,22(sp)
  i2c_conf.itf = conf->i2c_itf;
1c009730:	44dc                	lw	a5,12(s1)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c009732:	03040493          	addi	s1,s0,48
1c009736:	8526                	mv	a0,s1
1c009738:	080c                	addi	a1,sp,16
  i2c_conf.itf = conf->i2c_itf;
1c00973a:	00f10a23          	sb	a5,20(sp)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c00973e:	6ff010ef          	jal	ra,1c00b63c <pi_open_from_conf>
  if (pi_i2c_open(&himax->i2c_device))
1c009742:	8526                	mv	a0,s1
1c009744:	310040ef          	jal	ra,1c00da54 <pi_i2c_open>
1c009748:	e131                	bnez	a0,1c00978c <__himax_reopen+0xbe>
1c00974a:	545c                	lw	a5,44(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c00974c:	4798                	lw	a4,8(a5)
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c00974e:	02072783          	lw	a5,32(a4)
  reg.format = format;
1c009752:	4695                	li	a3,5
1c009754:	c486a7b3          	p.insert	a5,a3,2,8
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c009758:	02f72023          	sw	a5,32(a4)
  himax->is_awake = 0;
1c00975c:	04042223          	sw	zero,68(s0)
  if(opts != PI_CAMERA_OPT_NO_REG_INIT){
1c009760:	0019a763          	p.beqimm	s3,1,1c00976e <__himax_reopen+0xa0>
    __himax_reset(himax);
1c009764:	8522                	mv	a0,s0
1c009766:	3b79                	jal	1c009504 <__himax_reset>
    __himax_init_regs(himax);
1c009768:	8522                	mv	a0,s0
1c00976a:	c71ff0ef          	jal	ra,1c0093da <__himax_init_regs>
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c00976e:	485c                	lw	a5,20(s0)
  return 0;
1c009770:	4481                	li	s1,0
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c009772:	0027b563          	p.bneimm	a5,2,1c00977c <__himax_reopen+0xae>
    __himax_set_qqvga(himax);
1c009776:	8522                	mv	a0,s0
1c009778:	c9fff0ef          	jal	ra,1c009416 <__himax_set_qqvga>
}
1c00977c:	50f2                	lw	ra,60(sp)
1c00977e:	5462                	lw	s0,56(sp)
1c009780:	8526                	mv	a0,s1
1c009782:	5942                	lw	s2,48(sp)
1c009784:	54d2                	lw	s1,52(sp)
1c009786:	59b2                	lw	s3,44(sp)
1c009788:	6121                	addi	sp,sp,64
1c00978a:	8082                	ret
  pi_cpi_close(&himax->cpi_device);
1c00978c:	854a                	mv	a0,s2
1c00978e:	004040ef          	jal	ra,1c00d792 <pi_cpi_close>
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c009792:	04800593          	li	a1,72
1c009796:	8522                	mv	a0,s0
1c009798:	7d2020ef          	jal	ra,1c00bf6a <pi_l2_free>
  if (himax == NULL) return -1;
1c00979c:	54fd                	li	s1,-1
1c00979e:	bff9                	j	1c00977c <__himax_reopen+0xae>

1c0097a0 <__himax_control>:
{
1c0097a0:	1141                	addi	sp,sp,-16
1c0097a2:	c606                	sw	ra,12(sp)
1c0097a4:	c422                	sw	s0,8(sp)
1c0097a6:	c226                	sw	s1,4(sp)
1c0097a8:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0097aa:	300474f3          	csrrci	s1,mstatus,8
  switch (cmd)
1c0097ae:	471d                	li	a4,7
  himax_t *himax = (himax_t *)device->data;
1c0097b0:	4500                	lw	s0,8(a0)
  switch (cmd)
1c0097b2:	00b76d63          	bltu	a4,a1,1c0097cc <__himax_control+0x2c>
1c0097b6:	87ae                	mv	a5,a1
1c0097b8:	1c010737          	lui	a4,0x1c010
1c0097bc:	078a                	slli	a5,a5,0x2
1c0097be:	1bc70713          	addi	a4,a4,444 # 1c0101bc <IntegerExpLUT+0x18>
1c0097c2:	20f77783          	p.lw	a5,a5(a4)
1c0097c6:	85b2                	mv	a1,a2
1c0097c8:	8782                	jr	a5
      __himax_reopen(device, open_opt);
1c0097ca:	3711                	jal	1c0096ce <__himax_reopen>
  __builtin_pulp_spr_write(reg, val);
1c0097cc:	30049073          	csrw	mstatus,s1
}
1c0097d0:	40b2                	lw	ra,12(sp)
1c0097d2:	4422                	lw	s0,8(sp)
1c0097d4:	4492                	lw	s1,4(sp)
1c0097d6:	4902                	lw	s2,0(sp)
1c0097d8:	4501                	li	a0,0
1c0097da:	0141                	addi	sp,sp,16
1c0097dc:	8082                	ret
1c0097de:	545c                	lw	a5,44(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c0097e0:	4798                	lw	a4,8(a5)
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c0097e2:	02072783          	lw	a5,32(a4)
  reg.en = 1;
1c0097e6:	4905                	li	s2,1
1c0097e8:	c1f927b3          	p.insert	a5,s2,0,31
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c0097ec:	02f72023          	sw	a5,32(a4)
  if (!himax->is_awake)
1c0097f0:	407c                	lw	a5,68(s0)
1c0097f2:	ffe9                	bnez	a5,1c0097cc <__himax_control+0x2c>
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c0097f4:	4605                	li	a2,1
1c0097f6:	10000593          	li	a1,256
1c0097fa:	8522                	mv	a0,s0
1c0097fc:	bbfff0ef          	jal	ra,1c0093ba <__himax_reg_write>
    himax->is_awake = 1;
1c009800:	05242223          	sw	s2,68(s0)
1c009804:	b7e1                	j	1c0097cc <__himax_control+0x2c>
      __himax_standby(himax);
1c009806:	8522                	mv	a0,s0
1c009808:	cb7ff0ef          	jal	ra,1c0094be <__himax_standby>
1c00980c:	545c                	lw	a5,44(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c00980e:	4798                	lw	a4,8(a5)
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c009810:	02072783          	lw	a5,32(a4)
  reg.en = 0;
1c009814:	c1f027b3          	p.insert	a5,zero,0,31
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c009818:	02f72023          	sw	a5,32(a4)
1c00981c:	bf45                	j	1c0097cc <__himax_control+0x2c>
  if (!himax->is_awake)
1c00981e:	407c                	lw	a5,68(s0)
1c009820:	eb89                	bnez	a5,1c009832 <__himax_control+0x92>
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c009822:	4605                	li	a2,1
1c009824:	10000593          	li	a1,256
1c009828:	8522                	mv	a0,s0
1c00982a:	b91ff0ef          	jal	ra,1c0093ba <__himax_reg_write>
    himax->is_awake = 1;
1c00982e:	4785                	li	a5,1
1c009830:	c07c                	sw	a5,68(s0)
    pi_time_wait_us(1000000);
1c009832:	000f4537          	lui	a0,0xf4
1c009836:	24050513          	addi	a0,a0,576 # f4240 <__L2+0x74240>
1c00983a:	00f020ef          	jal	ra,1c00c048 <pi_time_wait_us>
    __himax_standby(himax);
1c00983e:	8522                	mv	a0,s0
1c009840:	c7fff0ef          	jal	ra,1c0094be <__himax_standby>
1c009844:	b761                	j	1c0097cc <__himax_control+0x2c>

1c009846 <pi_himax_conf_init>:
  .reg_set        = &__himax_reg_set,
  .reg_get        = &__himax_reg_get
};

void pi_himax_conf_init(struct pi_himax_conf *conf)
{
1c009846:	1141                	addi	sp,sp,-16
  conf->camera.api = &himax_api;
1c009848:	1c0107b7          	lui	a5,0x1c010
{
1c00984c:	c422                	sw	s0,8(sp)
1c00984e:	c606                	sw	ra,12(sp)
  conf->camera.api = &himax_api;
1c009850:	61078793          	addi	a5,a5,1552 # 1c010610 <himax_api>
1c009854:	c15c                	sw	a5,4(a0)
  conf->skip_pads_config = 0;
  conf->format = PI_CAMERA_QVGA; //By Default QVGA
1c009856:	4785                	li	a5,1
  conf->skip_pads_config = 0;
1c009858:	00050823          	sb	zero,16(a0)
  conf->format = PI_CAMERA_QVGA; //By Default QVGA
1c00985c:	c95c                	sw	a5,20(a0)
  conf->roi.slice_en = 0; //Disable the ROI by default.
1c00985e:	02050023          	sb	zero,32(a0)
{
1c009862:	842a                	mv	s0,a0
  bsp_himax_conf_init(conf);
1c009864:	3f9010ef          	jal	ra,1c00b45c <bsp_himax_conf_init>
  __camera_conf_init(&conf->camera);
1c009868:	8522                	mv	a0,s0
}
1c00986a:	4422                	lw	s0,8(sp)
1c00986c:	40b2                	lw	ra,12(sp)
1c00986e:	0141                	addi	sp,sp,16
  __camera_conf_init(&conf->camera);
1c009870:	b49ff06f          	j	1c0093b8 <__camera_conf_init>

1c009874 <__rt_event_enqueue>:
  if (sched->first) {
1c009874:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c009878:	00052023          	sw	zero,0(a0)
1c00987c:	01c00713          	li	a4,28
  if (sched->first) {
1c009880:	c689                	beqz	a3,1c00988a <__rt_event_enqueue+0x16>
    sched->last->next = event;
1c009882:	435c                	lw	a5,4(a4)
1c009884:	c388                	sw	a0,0(a5)
  sched->last = event;
1c009886:	c348                	sw	a0,4(a4)
}
1c009888:	8082                	ret
    sched->first = event;
1c00988a:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00988e:	bfe5                	j	1c009886 <__rt_event_enqueue+0x12>

1c009890 <hyperflash_ioctl>:



static int32_t hyperflash_ioctl(struct pi_device *device, uint32_t cmd, void *arg)
{
  switch (cmd)
1c009890:	e589                	bnez	a1,1c00989a <hyperflash_ioctl+0xa>
  {
    case PI_FLASH_IOCTL_INFO:
    {
      struct pi_flash_info *flash_info = (struct pi_flash_info *)arg;
      flash_info->sector_size = 1<<18;
1c009892:	000407b7          	lui	a5,0x40
1c009896:	c21c                	sw	a5,0(a2)
      // TODO find a way to know what is on the flash, as they may be a boot binary
      flash_info->flash_start = flash_info->sector_size;
1c009898:	c25c                	sw	a5,4(a2)
    }
  }
  return 0;
}
1c00989a:	4501                	li	a0,0
1c00989c:	8082                	ret

1c00989e <hyperflash_stall_task>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00989e:	30047373          	csrrci	t1,mstatus,8

    restore_irq(irq);
    return 1;
  }
#else
  if (hyperflash->pending_task != NULL)
1c0098a2:	01852e03          	lw	t3,24(a0)
1c0098a6:	020e0763          	beqz	t3,1c0098d4 <hyperflash_stall_task+0x36>
  {
    task->implem.data[0] = id;
1c0098aa:	dd90                	sw	a2,56(a1)
    task->implem.data[1] = arg0;
1c0098ac:	ddd4                	sw	a3,60(a1)
    task->implem.data[2] = arg1;
1c0098ae:	c1b8                	sw	a4,64(a1)
    task->implem.data[3] = arg2;
1c0098b0:	c1fc                	sw	a5,68(a1)
    task->implem.data[4] = arg3;
1c0098b2:	0505a423          	sw	a6,72(a1)
    task->implem.data[5] = arg4;
1c0098b6:	0515a623          	sw	a7,76(a1)

    if (hyperflash->waiting_first)
1c0098ba:	491c                	lw	a5,16(a0)
1c0098bc:	cb91                	beqz	a5,1c0098d0 <hyperflash_stall_task+0x32>
      hyperflash->waiting_last->implem.next = task;
1c0098be:	495c                	lw	a5,20(a0)
1c0098c0:	cfcc                	sw	a1,28(a5)
    else
      hyperflash->waiting_first = task;

    hyperflash->waiting_last = task;
1c0098c2:	c94c                	sw	a1,20(a0)
    task->implem.next = NULL;
1c0098c4:	0005ae23          	sw	zero,28(a1)
  __builtin_pulp_spr_write(reg, val);
1c0098c8:	30031073          	csrw	mstatus,t1

    restore_irq(irq);
    return 1;
1c0098cc:	4505                	li	a0,1
1c0098ce:	8082                	ret
      hyperflash->waiting_first = task;
1c0098d0:	c90c                	sw	a1,16(a0)
1c0098d2:	bfc5                	j	1c0098c2 <hyperflash_stall_task+0x24>
  }
#endif  /* PMSIS_DRIVERS */

  hyperflash->pending_task = task;
1c0098d4:	cd0c                	sw	a1,24(a0)
1c0098d6:	30031073          	csrw	mstatus,t1

  restore_irq(irq);
  return 0;
1c0098da:	4501                	li	a0,0
}
1c0098dc:	8082                	ret

1c0098de <hyperflash_read_2d_async>:
{
1c0098de:	1101                	addi	sp,sp,-32
1c0098e0:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0098e2:	4500                	lw	s0,8(a0)
{
1c0098e4:	ca26                	sw	s1,20(sp)
1c0098e6:	84ae                	mv	s1,a1
1c0098e8:	c84a                	sw	s2,16(sp)
1c0098ea:	c64e                	sw	s3,12(sp)
1c0098ec:	c452                	sw	s4,8(sp)
1c0098ee:	c256                	sw	s5,4(sp)
1c0098f0:	c05a                	sw	s6,0(sp)
1c0098f2:	8932                	mv	s2,a2
1c0098f4:	8b2a                	mv	s6,a0
1c0098f6:	89b6                	mv	s3,a3
1c0098f8:	8a3a                	mv	s4,a4
1c0098fa:	8abe                	mv	s5,a5
1c0098fc:	85c2                	mv	a1,a6
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c0098fe:	88be                	mv	a7,a5
1c009900:	883a                	mv	a6,a4
1c009902:	87b6                	mv	a5,a3
1c009904:	8732                	mv	a4,a2
1c009906:	86a6                	mv	a3,s1
1c009908:	4619                	li	a2,6
1c00990a:	8522                	mv	a0,s0
{
1c00990c:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c00990e:	3f41                	jal	1c00989e <hyperflash_stall_task>
1c009910:	e129                	bnez	a0,1c009952 <hyperflash_read_2d_async+0x74>
  task->arg[0] = (uint32_t)callback;
1c009912:	1c00a7b7          	lui	a5,0x1c00a
1c009916:	b5878793          	addi	a5,a5,-1192 # 1c009b58 <hyperflash_handle_pending_task>
  task->done = 0;
1c00991a:	02040e23          	sb	zero,60(s0)
1c00991e:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c009920:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c009922:	03642823          	sw	s6,48(s0)
  task->implem.keep = 1;
1c009926:	c83c                	sw	a5,80(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009928:	04042023          	sw	zero,64(s0)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00992c:	02840813          	addi	a6,s0,40
1c009930:	8522                	mv	a0,s0
}
1c009932:	4462                	lw	s0,24(sp)
1c009934:	40f2                	lw	ra,28(sp)
1c009936:	4b02                	lw	s6,0(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009938:	87d6                	mv	a5,s5
1c00993a:	8752                	mv	a4,s4
}
1c00993c:	4a92                	lw	s5,4(sp)
1c00993e:	4a22                	lw	s4,8(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009940:	86ce                	mv	a3,s3
1c009942:	864a                	mv	a2,s2
}
1c009944:	49b2                	lw	s3,12(sp)
1c009946:	4942                	lw	s2,16(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009948:	85a6                	mv	a1,s1
}
1c00994a:	44d2                	lw	s1,20(sp)
1c00994c:	6105                	addi	sp,sp,32
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00994e:	5650306f          	j	1c00d6b2 <pi_hyper_read_2d_async>
}
1c009952:	40f2                	lw	ra,28(sp)
1c009954:	4462                	lw	s0,24(sp)
1c009956:	44d2                	lw	s1,20(sp)
1c009958:	4942                	lw	s2,16(sp)
1c00995a:	49b2                	lw	s3,12(sp)
1c00995c:	4a22                	lw	s4,8(sp)
1c00995e:	4a92                	lw	s5,4(sp)
1c009960:	4b02                	lw	s6,0(sp)
1c009962:	6105                	addi	sp,sp,32
1c009964:	8082                	ret

1c009966 <hyperflash_copy_2d_async>:



static int hyperflash_copy_2d_async(struct pi_device *device, uint32_t flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  if (!ext2loc)
1c009966:	00080a63          	beqz	a6,1c00997a <hyperflash_copy_2d_async+0x14>
{
1c00996a:	1141                	addi	sp,sp,-16
1c00996c:	8846                	mv	a6,a7
1c00996e:	c606                	sw	ra,12(sp)
    return -1;

  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c009970:	37bd                	jal	1c0098de <hyperflash_read_2d_async>

  return 0;
}
1c009972:	40b2                	lw	ra,12(sp)
  return 0;
1c009974:	4501                	li	a0,0
}
1c009976:	0141                	addi	sp,sp,16
1c009978:	8082                	ret
    return -1;
1c00997a:	557d                	li	a0,-1
}
1c00997c:	8082                	ret

1c00997e <hyperflash_set_reg_exec>:
  hyperflash->udma_buffer[0] = value;
1c00997e:	00c51623          	sh	a2,12(a0)
  pi_hyper_write(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 2);
1c009982:	4689                	li	a3,2
1c009984:	00c50613          	addi	a2,a0,12
1c009988:	1830306f          	j	1c00d30a <pi_hyper_write>

1c00998c <hyperflash_erase_sector_async>:
{
1c00998c:	1101                	addi	sp,sp,-32
1c00998e:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009990:	4500                	lw	s0,8(a0)
{
1c009992:	c64e                	sw	s3,12(sp)
1c009994:	89ae                	mv	s3,a1
1c009996:	c84a                	sw	s2,16(sp)
1c009998:	85b2                	mv	a1,a2
1c00999a:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c00999c:	4881                	li	a7,0
1c00999e:	4801                	li	a6,0
1c0099a0:	4781                	li	a5,0
1c0099a2:	4701                	li	a4,0
1c0099a4:	86ce                	mv	a3,s3
1c0099a6:	4609                	li	a2,2
1c0099a8:	8522                	mv	a0,s0
{
1c0099aa:	ce06                	sw	ra,28(sp)
1c0099ac:	ca26                	sw	s1,20(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c0099ae:	3dc5                	jal	1c00989e <hyperflash_stall_task>
1c0099b0:	ed3d                	bnez	a0,1c009a2e <hyperflash_erase_sector_async+0xa2>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c0099b2:	6485                	lui	s1,0x1
1c0099b4:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c0099b8:	8522                	mv	a0,s0
1c0099ba:	0aa00613          	li	a2,170
1c0099be:	37c1                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c0099c0:	8522                	mv	a0,s0
1c0099c2:	05500613          	li	a2,85
1c0099c6:	55400593          	li	a1,1364
1c0099ca:	3f55                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c0099cc:	aaa48593          	addi	a1,s1,-1366
1c0099d0:	8522                	mv	a0,s0
1c0099d2:	08000613          	li	a2,128
1c0099d6:	3765                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c0099d8:	aaa48593          	addi	a1,s1,-1366
1c0099dc:	8522                	mv	a0,s0
1c0099de:	0aa00613          	li	a2,170
1c0099e2:	3f71                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c0099e4:	8522                	mv	a0,s0
1c0099e6:	05500613          	li	a2,85
1c0099ea:	55400593          	li	a1,1364
1c0099ee:	3f41                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, addr, 0x30);
1c0099f0:	85ce                	mv	a1,s3
1c0099f2:	8522                	mv	a0,s0
1c0099f4:	03000613          	li	a2,48
1c0099f8:	3759                	jal	1c00997e <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c0099fa:	1c00a7b7          	lui	a5,0x1c00a
1c0099fe:	18078793          	addi	a5,a5,384 # 1c00a180 <hyperflash_check_erase>
1c009a02:	02040e23          	sb	zero,60(s0)
1c009a06:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c009a08:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c009a0a:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009a0e:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c009a12:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c009a14:	02840513          	addi	a0,s0,40
}
1c009a18:	4462                	lw	s0,24(sp)
1c009a1a:	40f2                	lw	ra,28(sp)
1c009a1c:	44d2                	lw	s1,20(sp)
1c009a1e:	4942                	lw	s2,16(sp)
1c009a20:	49b2                	lw	s3,12(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c009a22:	6589                	lui	a1,0x2
1c009a24:	71058593          	addi	a1,a1,1808 # 2710 <__rt_stack_size+0x1f10>
}
1c009a28:	6105                	addi	sp,sp,32
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c009a2a:	3500206f          	j	1c00bd7a <pi_task_push_delayed_us>
}
1c009a2e:	40f2                	lw	ra,28(sp)
1c009a30:	4462                	lw	s0,24(sp)
1c009a32:	44d2                	lw	s1,20(sp)
1c009a34:	4942                	lw	s2,16(sp)
1c009a36:	49b2                	lw	s3,12(sp)
1c009a38:	6105                	addi	sp,sp,32
1c009a3a:	8082                	ret

1c009a3c <hyperflash_erase_chip_async>:
{
1c009a3c:	1141                	addi	sp,sp,-16
1c009a3e:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009a40:	4500                	lw	s0,8(a0)
{
1c009a42:	c04a                	sw	s2,0(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c009a44:	4881                	li	a7,0
{
1c009a46:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c009a48:	4801                	li	a6,0
1c009a4a:	4781                	li	a5,0
1c009a4c:	4701                	li	a4,0
1c009a4e:	4681                	li	a3,0
1c009a50:	4605                	li	a2,1
1c009a52:	8522                	mv	a0,s0
{
1c009a54:	c606                	sw	ra,12(sp)
1c009a56:	c226                	sw	s1,4(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c009a58:	3599                	jal	1c00989e <hyperflash_stall_task>
1c009a5a:	ed35                	bnez	a0,1c009ad6 <hyperflash_erase_chip_async+0x9a>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c009a5c:	6485                	lui	s1,0x1
1c009a5e:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c009a62:	8522                	mv	a0,s0
1c009a64:	0aa00613          	li	a2,170
1c009a68:	3f19                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c009a6a:	8522                	mv	a0,s0
1c009a6c:	05500613          	li	a2,85
1c009a70:	55400593          	li	a1,1364
1c009a74:	3729                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c009a76:	aaa48593          	addi	a1,s1,-1366
1c009a7a:	8522                	mv	a0,s0
1c009a7c:	08000613          	li	a2,128
1c009a80:	3dfd                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c009a82:	aaa48593          	addi	a1,s1,-1366
1c009a86:	8522                	mv	a0,s0
1c009a88:	0aa00613          	li	a2,170
1c009a8c:	3dcd                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c009a8e:	8522                	mv	a0,s0
1c009a90:	05500613          	li	a2,85
1c009a94:	55400593          	li	a1,1364
1c009a98:	35dd                	jal	1c00997e <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x10);
1c009a9a:	aaa48593          	addi	a1,s1,-1366
1c009a9e:	8522                	mv	a0,s0
1c009aa0:	4641                	li	a2,16
1c009aa2:	3df1                	jal	1c00997e <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c009aa4:	1c00a7b7          	lui	a5,0x1c00a
1c009aa8:	18078793          	addi	a5,a5,384 # 1c00a180 <hyperflash_check_erase>
1c009aac:	02040e23          	sb	zero,60(s0)
1c009ab0:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c009ab2:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c009ab4:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009ab8:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c009abc:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c009abe:	02840513          	addi	a0,s0,40
}
1c009ac2:	4422                	lw	s0,8(sp)
1c009ac4:	40b2                	lw	ra,12(sp)
1c009ac6:	4492                	lw	s1,4(sp)
1c009ac8:	4902                	lw	s2,0(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c009aca:	65e1                	lui	a1,0x18
1c009acc:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c009ad0:	0141                	addi	sp,sp,16
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c009ad2:	2a80206f          	j	1c00bd7a <pi_task_push_delayed_us>
}
1c009ad6:	40b2                	lw	ra,12(sp)
1c009ad8:	4422                	lw	s0,8(sp)
1c009ada:	4492                	lw	s1,4(sp)
1c009adc:	4902                	lw	s2,0(sp)
1c009ade:	0141                	addi	sp,sp,16
1c009ae0:	8082                	ret

1c009ae2 <hyperflash_read_async>:
{
1c009ae2:	1101                	addi	sp,sp,-32
1c009ae4:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009ae6:	4500                	lw	s0,8(a0)
{
1c009ae8:	ca26                	sw	s1,20(sp)
1c009aea:	84ae                	mv	s1,a1
1c009aec:	c84a                	sw	s2,16(sp)
1c009aee:	c64e                	sw	s3,12(sp)
1c009af0:	c452                	sw	s4,8(sp)
1c009af2:	8932                	mv	s2,a2
1c009af4:	8a2a                	mv	s4,a0
1c009af6:	89b6                	mv	s3,a3
1c009af8:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c009afa:	87b6                	mv	a5,a3
1c009afc:	8732                	mv	a4,a2
1c009afe:	4881                	li	a7,0
1c009b00:	4801                	li	a6,0
1c009b02:	86a6                	mv	a3,s1
1c009b04:	4615                	li	a2,5
1c009b06:	8522                	mv	a0,s0
{
1c009b08:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c009b0a:	d95ff0ef          	jal	ra,1c00989e <hyperflash_stall_task>
1c009b0e:	ed0d                	bnez	a0,1c009b48 <hyperflash_read_async+0x66>
  task->arg[0] = (uint32_t)callback;
1c009b10:	1c00a7b7          	lui	a5,0x1c00a
1c009b14:	b5878793          	addi	a5,a5,-1192 # 1c009b58 <hyperflash_handle_pending_task>
1c009b18:	02040e23          	sb	zero,60(s0)
1c009b1c:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c009b1e:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c009b20:	03442823          	sw	s4,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009b24:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c009b28:	c83c                	sw	a5,80(s0)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009b2a:	02840713          	addi	a4,s0,40
1c009b2e:	8522                	mv	a0,s0
}
1c009b30:	4462                	lw	s0,24(sp)
1c009b32:	40f2                	lw	ra,28(sp)
1c009b34:	4a22                	lw	s4,8(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009b36:	86ce                	mv	a3,s3
1c009b38:	864a                	mv	a2,s2
}
1c009b3a:	49b2                	lw	s3,12(sp)
1c009b3c:	4942                	lw	s2,16(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009b3e:	85a6                	mv	a1,s1
}
1c009b40:	44d2                	lw	s1,20(sp)
1c009b42:	6105                	addi	sp,sp,32
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009b44:	7760306f          	j	1c00d2ba <pi_hyper_read_async>
}
1c009b48:	40f2                	lw	ra,28(sp)
1c009b4a:	4462                	lw	s0,24(sp)
1c009b4c:	44d2                	lw	s1,20(sp)
1c009b4e:	4942                	lw	s2,16(sp)
1c009b50:	49b2                	lw	s3,12(sp)
1c009b52:	4a22                	lw	s4,8(sp)
1c009b54:	6105                	addi	sp,sp,32
1c009b56:	8082                	ret

1c009b58 <hyperflash_handle_pending_task>:
{
1c009b58:	1101                	addi	sp,sp,-32
1c009b5a:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009b5c:	4504                	lw	s1,8(a0)
{
1c009b5e:	cc22                	sw	s0,24(sp)
1c009b60:	842a                	mv	s0,a0
1c009b62:	ce06                	sw	ra,28(sp)
1c009b64:	c84a                	sw	s2,16(sp)
1c009b66:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009b68:	30047973          	csrrci	s2,mstatus,8
  pi_task_enqueue(hyperflash->pending_task);
1c009b6c:	4c88                	lw	a0,24(s1)
1c009b6e:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c009b72:	d03ff0ef          	jal	ra,1c009874 <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c009b76:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->waiting_first;
1c009b7a:	4898                	lw	a4,16(s1)
  hyperflash->pending_task = NULL;
1c009b7c:	0004ac23          	sw	zero,24(s1)
  if (task)
1c009b80:	c319                	beqz	a4,1c009b86 <hyperflash_handle_pending_task+0x2e>
    hyperflash->waiting_first = task->implem.next;
1c009b82:	4f5c                	lw	a5,28(a4)
1c009b84:	c89c                	sw	a5,16(s1)
1c009b86:	30091073          	csrw	mstatus,s2
  if (task)
1c009b8a:	c369                	beqz	a4,1c009c4c <hyperflash_handle_pending_task+0xf4>
    if (task->implem.data[0] == STALL_TASK_PROGRAM)
1c009b8c:	5f1c                	lw	a5,56(a4)
1c009b8e:	ef81                	bnez	a5,1c009ba6 <hyperflash_handle_pending_task+0x4e>
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009b90:	8522                	mv	a0,s0
}
1c009b92:	4462                	lw	s0,24(sp)
1c009b94:	40f2                	lw	ra,28(sp)
1c009b96:	44d2                	lw	s1,20(sp)
1c009b98:	4942                	lw	s2,16(sp)
1c009b9a:	49b2                	lw	s3,12(sp)
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009b9c:	4374                	lw	a3,68(a4)
1c009b9e:	4330                	lw	a2,64(a4)
1c009ba0:	5f4c                	lw	a1,60(a4)
}
1c009ba2:	6105                	addi	sp,sp,32
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009ba4:	ac31                	j	1c009dc0 <hyperflash_program_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_CHIP)
1c009ba6:	0017bb63          	p.bneimm	a5,1,1c009bbc <hyperflash_handle_pending_task+0x64>
      hyperflash_erase_chip_async(device, task);
1c009baa:	8522                	mv	a0,s0
}
1c009bac:	4462                	lw	s0,24(sp)
1c009bae:	40f2                	lw	ra,28(sp)
1c009bb0:	44d2                	lw	s1,20(sp)
1c009bb2:	4942                	lw	s2,16(sp)
1c009bb4:	49b2                	lw	s3,12(sp)
      hyperflash_erase_chip_async(device, task);
1c009bb6:	85ba                	mv	a1,a4
}
1c009bb8:	6105                	addi	sp,sp,32
      hyperflash_erase_chip_async(device, task);
1c009bba:	b549                	j	1c009a3c <hyperflash_erase_chip_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_SECTOR)
1c009bbc:	0027bd63          	p.bneimm	a5,2,1c009bd6 <hyperflash_handle_pending_task+0x7e>
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c009bc0:	8522                	mv	a0,s0
}
1c009bc2:	4462                	lw	s0,24(sp)
1c009bc4:	40f2                	lw	ra,28(sp)
1c009bc6:	44d2                	lw	s1,20(sp)
1c009bc8:	4942                	lw	s2,16(sp)
1c009bca:	49b2                	lw	s3,12(sp)
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c009bcc:	5f4c                	lw	a1,60(a4)
1c009bce:	863a                	mv	a2,a4
}
1c009bd0:	6105                	addi	sp,sp,32
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c009bd2:	dbbff06f          	j	1c00998c <hyperflash_erase_sector_async>
    else if (task->implem.data[0] == STALL_TASK_REG_SET)
1c009bd6:	0037bd63          	p.bneimm	a5,3,1c009bf0 <hyperflash_handle_pending_task+0x98>
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c009bda:	8522                	mv	a0,s0
}
1c009bdc:	4462                	lw	s0,24(sp)
1c009bde:	40f2                	lw	ra,28(sp)
1c009be0:	44d2                	lw	s1,20(sp)
1c009be2:	4942                	lw	s2,16(sp)
1c009be4:	49b2                	lw	s3,12(sp)
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c009be6:	4330                	lw	a2,64(a4)
1c009be8:	5f4c                	lw	a1,60(a4)
1c009bea:	86ba                	mv	a3,a4
}
1c009bec:	6105                	addi	sp,sp,32
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c009bee:	a0e9                	j	1c009cb8 <hyperflash_reg_set_async>
    else if (task->implem.data[0] == STALL_TASK_REG_GET)
1c009bf0:	0047bd63          	p.bneimm	a5,4,1c009c0a <hyperflash_handle_pending_task+0xb2>
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c009bf4:	8522                	mv	a0,s0
}
1c009bf6:	4462                	lw	s0,24(sp)
1c009bf8:	40f2                	lw	ra,28(sp)
1c009bfa:	44d2                	lw	s1,20(sp)
1c009bfc:	4942                	lw	s2,16(sp)
1c009bfe:	49b2                	lw	s3,12(sp)
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c009c00:	4330                	lw	a2,64(a4)
1c009c02:	5f4c                	lw	a1,60(a4)
1c009c04:	86ba                	mv	a3,a4
}
1c009c06:	6105                	addi	sp,sp,32
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c009c08:	a889                	j	1c009c5a <hyperflash_reg_get_async>
    else if (task->implem.data[0] == STALL_TASK_READ)
1c009c0a:	0057bd63          	p.bneimm	a5,5,1c009c24 <hyperflash_handle_pending_task+0xcc>
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009c0e:	8522                	mv	a0,s0
}
1c009c10:	4462                	lw	s0,24(sp)
1c009c12:	40f2                	lw	ra,28(sp)
1c009c14:	44d2                	lw	s1,20(sp)
1c009c16:	4942                	lw	s2,16(sp)
1c009c18:	49b2                	lw	s3,12(sp)
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009c1a:	4374                	lw	a3,68(a4)
1c009c1c:	4330                	lw	a2,64(a4)
1c009c1e:	5f4c                	lw	a1,60(a4)
}
1c009c20:	6105                	addi	sp,sp,32
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009c22:	b5c1                	j	1c009ae2 <hyperflash_read_async>
    else if (task->implem.data[0] == STALL_TASK_READ_2D)
1c009c24:	0267b463          	p.bneimm	a5,6,1c009c4c <hyperflash_handle_pending_task+0xf4>
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c009c28:	883a                	mv	a6,a4
1c009c2a:	8522                	mv	a0,s0
}
1c009c2c:	4462                	lw	s0,24(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c009c2e:	477c                	lw	a5,76(a4)
}
1c009c30:	40f2                	lw	ra,28(sp)
1c009c32:	44d2                	lw	s1,20(sp)
1c009c34:	4942                	lw	s2,16(sp)
1c009c36:	49b2                	lw	s3,12(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c009c38:	4738                	lw	a4,72(a4)
1c009c3a:	04482683          	lw	a3,68(a6)
1c009c3e:	04082603          	lw	a2,64(a6)
1c009c42:	03c82583          	lw	a1,60(a6)
}
1c009c46:	6105                	addi	sp,sp,32
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c009c48:	c97ff06f          	j	1c0098de <hyperflash_read_2d_async>
}
1c009c4c:	40f2                	lw	ra,28(sp)
1c009c4e:	4462                	lw	s0,24(sp)
1c009c50:	44d2                	lw	s1,20(sp)
1c009c52:	4942                	lw	s2,16(sp)
1c009c54:	49b2                	lw	s3,12(sp)
1c009c56:	6105                	addi	sp,sp,32
1c009c58:	8082                	ret

1c009c5a <hyperflash_reg_get_async>:
{
1c009c5a:	1101                	addi	sp,sp,-32
1c009c5c:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009c5e:	4500                	lw	s0,8(a0)
{
1c009c60:	c64e                	sw	s3,12(sp)
1c009c62:	89ae                	mv	s3,a1
1c009c64:	ca26                	sw	s1,20(sp)
1c009c66:	c84a                	sw	s2,16(sp)
1c009c68:	84aa                	mv	s1,a0
1c009c6a:	8932                	mv	s2,a2
1c009c6c:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c009c6e:	8732                	mv	a4,a2
1c009c70:	4881                	li	a7,0
1c009c72:	4801                	li	a6,0
1c009c74:	4781                	li	a5,0
1c009c76:	86ce                	mv	a3,s3
1c009c78:	4611                	li	a2,4
1c009c7a:	8522                	mv	a0,s0
{
1c009c7c:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c009c7e:	c21ff0ef          	jal	ra,1c00989e <hyperflash_stall_task>
1c009c82:	e505                	bnez	a0,1c009caa <hyperflash_reg_get_async+0x50>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c009c84:	8522                	mv	a0,s0
1c009c86:	00c40613          	addi	a2,s0,12
1c009c8a:	85ce                	mv	a1,s3
1c009c8c:	4691                	li	a3,4
1c009c8e:	642030ef          	jal	ra,1c00d2d0 <pi_hyper_read>
  return hyperflash->udma_buffer[0];
1c009c92:	00c45783          	lhu	a5,12(s0)
}
1c009c96:	4462                	lw	s0,24(sp)
1c009c98:	40f2                	lw	ra,28(sp)
  *(uint16_t *)value = hyperflash_get_reg_exec(hyperflash, addr);
1c009c9a:	00f91023          	sh	a5,0(s2)
}
1c009c9e:	49b2                	lw	s3,12(sp)
1c009ca0:	4942                	lw	s2,16(sp)
  hyperflash_handle_pending_task(device);
1c009ca2:	8526                	mv	a0,s1
}
1c009ca4:	44d2                	lw	s1,20(sp)
1c009ca6:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c009ca8:	bd45                	j	1c009b58 <hyperflash_handle_pending_task>
}
1c009caa:	40f2                	lw	ra,28(sp)
1c009cac:	4462                	lw	s0,24(sp)
1c009cae:	44d2                	lw	s1,20(sp)
1c009cb0:	4942                	lw	s2,16(sp)
1c009cb2:	49b2                	lw	s3,12(sp)
1c009cb4:	6105                	addi	sp,sp,32
1c009cb6:	8082                	ret

1c009cb8 <hyperflash_reg_set_async>:
{
1c009cb8:	1101                	addi	sp,sp,-32
1c009cba:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009cbc:	4504                	lw	s1,8(a0)
{
1c009cbe:	c84a                	sw	s2,16(sp)
1c009cc0:	892e                	mv	s2,a1
1c009cc2:	cc22                	sw	s0,24(sp)
1c009cc4:	c64e                	sw	s3,12(sp)
1c009cc6:	842a                	mv	s0,a0
1c009cc8:	89b2                	mv	s3,a2
1c009cca:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c009ccc:	8732                	mv	a4,a2
1c009cce:	4881                	li	a7,0
1c009cd0:	4801                	li	a6,0
1c009cd2:	4781                	li	a5,0
1c009cd4:	86ca                	mv	a3,s2
1c009cd6:	460d                	li	a2,3
1c009cd8:	8526                	mv	a0,s1
{
1c009cda:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c009cdc:	bc3ff0ef          	jal	ra,1c00989e <hyperflash_stall_task>
1c009ce0:	e105                	bnez	a0,1c009d00 <hyperflash_reg_set_async+0x48>
  hyperflash_set_reg_exec(hyperflash, addr, *(uint16_t *)value);
1c009ce2:	0009d603          	lhu	a2,0(s3)
1c009ce6:	8526                	mv	a0,s1
1c009ce8:	85ca                	mv	a1,s2
1c009cea:	c95ff0ef          	jal	ra,1c00997e <hyperflash_set_reg_exec>
  hyperflash_handle_pending_task(device);
1c009cee:	8522                	mv	a0,s0
}
1c009cf0:	4462                	lw	s0,24(sp)
1c009cf2:	40f2                	lw	ra,28(sp)
1c009cf4:	44d2                	lw	s1,20(sp)
1c009cf6:	4942                	lw	s2,16(sp)
1c009cf8:	49b2                	lw	s3,12(sp)
1c009cfa:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c009cfc:	e5dff06f          	j	1c009b58 <hyperflash_handle_pending_task>
}
1c009d00:	40f2                	lw	ra,28(sp)
1c009d02:	4462                	lw	s0,24(sp)
1c009d04:	44d2                	lw	s1,20(sp)
1c009d06:	4942                	lw	s2,16(sp)
1c009d08:	49b2                	lw	s3,12(sp)
1c009d0a:	6105                	addi	sp,sp,32
1c009d0c:	8082                	ret

1c009d0e <hyperflash_program_resume>:
{
1c009d0e:	1101                	addi	sp,sp,-32
1c009d10:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009d12:	4500                	lw	s0,8(a0)
{
1c009d14:	ce06                	sw	ra,28(sp)
1c009d16:	ca26                	sw	s1,20(sp)
  if (hyperflash->pending_size == 0)
1c009d18:	13042683          	lw	a3,304(s0)
{
1c009d1c:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_size == 0)
1c009d1e:	ea81                	bnez	a3,1c009d2e <hyperflash_program_resume+0x20>
}
1c009d20:	4462                	lw	s0,24(sp)
1c009d22:	40f2                	lw	ra,28(sp)
1c009d24:	44d2                	lw	s1,20(sp)
1c009d26:	4942                	lw	s2,16(sp)
1c009d28:	6105                	addi	sp,sp,32
    hyperflash_handle_pending_task(device);
1c009d2a:	e2fff06f          	j	1c009b58 <hyperflash_handle_pending_task>
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c009d2e:	12842783          	lw	a5,296(s0)
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c009d32:	6905                	lui	s2,0x1
1c009d34:	84aa                	mv	s1,a0
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c009d36:	ec97b733          	p.bclr	a4,a5,22,9
1c009d3a:	20000793          	li	a5,512
1c009d3e:	8f99                	sub	a5,a5,a4
1c009d40:	04f6d6b3          	p.minu	a3,a3,a5
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c009d44:	aaa90593          	addi	a1,s2,-1366 # aaa <__rt_stack_size+0x2aa>
1c009d48:	8522                	mv	a0,s0
1c009d4a:	0aa00613          	li	a2,170
1c009d4e:	c636                	sw	a3,12(sp)
1c009d50:	c2fff0ef          	jal	ra,1c00997e <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c009d54:	8522                	mv	a0,s0
1c009d56:	05500613          	li	a2,85
1c009d5a:	55400593          	li	a1,1364
1c009d5e:	c21ff0ef          	jal	ra,1c00997e <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xA0);
1c009d62:	aaa90593          	addi	a1,s2,-1366
1c009d66:	8522                	mv	a0,s0
1c009d68:	0a000613          	li	a2,160
1c009d6c:	c13ff0ef          	jal	ra,1c00997e <hyperflash_set_reg_exec>
    hyperflash->pending_hyper_addr += iter_size;
1c009d70:	46b2                	lw	a3,12(sp)
    uint32_t hyper_addr = hyperflash->pending_hyper_addr;
1c009d72:	12842583          	lw	a1,296(s0)
    uint32_t data = hyperflash->pending_data;
1c009d76:	12c42603          	lw	a2,300(s0)
  task->done = 0;
1c009d7a:	02040e23          	sb	zero,60(s0)
    hyperflash->pending_hyper_addr += iter_size;
1c009d7e:	00d587b3          	add	a5,a1,a3
1c009d82:	12f42423          	sw	a5,296(s0)
    hyperflash->pending_data += iter_size;
1c009d86:	00d607b3          	add	a5,a2,a3
1c009d8a:	12f42623          	sw	a5,300(s0)
    hyperflash->pending_size -= iter_size;
1c009d8e:	13042783          	lw	a5,304(s0)
  task->arg[1] = (uint32_t)arg;
1c009d92:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009d94:	04042023          	sw	zero,64(s0)
1c009d98:	8f95                	sub	a5,a5,a3
1c009d9a:	12f42823          	sw	a5,304(s0)
  task->arg[0] = (uint32_t)callback;
1c009d9e:	1c00a7b7          	lui	a5,0x1c00a
1c009da2:	1d278793          	addi	a5,a5,466 # 1c00a1d2 <hyperflash_check_program>
1c009da6:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c009da8:	4785                	li	a5,1
1c009daa:	c83c                	sw	a5,80(s0)
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c009dac:	02840713          	addi	a4,s0,40
1c009db0:	8522                	mv	a0,s0
}
1c009db2:	4462                	lw	s0,24(sp)
1c009db4:	40f2                	lw	ra,28(sp)
1c009db6:	44d2                	lw	s1,20(sp)
1c009db8:	4942                	lw	s2,16(sp)
1c009dba:	6105                	addi	sp,sp,32
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c009dbc:	5360306f          	j	1c00d2f2 <pi_hyper_write_async>

1c009dc0 <hyperflash_program_async>:
{
1c009dc0:	1101                	addi	sp,sp,-32
1c009dc2:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009dc4:	4500                	lw	s0,8(a0)
{
1c009dc6:	c452                	sw	s4,8(sp)
1c009dc8:	8a2e                	mv	s4,a1
1c009dca:	ca26                	sw	s1,20(sp)
1c009dcc:	c84a                	sw	s2,16(sp)
1c009dce:	c64e                	sw	s3,12(sp)
1c009dd0:	84aa                	mv	s1,a0
1c009dd2:	89b2                	mv	s3,a2
1c009dd4:	8936                	mv	s2,a3
1c009dd6:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c009dd8:	87b6                	mv	a5,a3
1c009dda:	8732                	mv	a4,a2
1c009ddc:	4881                	li	a7,0
1c009dde:	4801                	li	a6,0
1c009de0:	86d2                	mv	a3,s4
1c009de2:	4601                	li	a2,0
1c009de4:	8522                	mv	a0,s0
{
1c009de6:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c009de8:	ab7ff0ef          	jal	ra,1c00989e <hyperflash_stall_task>
1c009dec:	e105                	bnez	a0,1c009e0c <hyperflash_program_async+0x4c>
  hyperflash->pending_hyper_addr = hyper_addr;
1c009dee:	13442423          	sw	s4,296(s0)
  hyperflash->pending_data = (uint32_t)data;
1c009df2:	13342623          	sw	s3,300(s0)
  hyperflash->pending_size = size;
1c009df6:	13242823          	sw	s2,304(s0)
}
1c009dfa:	4462                	lw	s0,24(sp)
1c009dfc:	40f2                	lw	ra,28(sp)
1c009dfe:	4942                	lw	s2,16(sp)
1c009e00:	49b2                	lw	s3,12(sp)
1c009e02:	4a22                	lw	s4,8(sp)
  hyperflash_program_resume(device);
1c009e04:	8526                	mv	a0,s1
}
1c009e06:	44d2                	lw	s1,20(sp)
1c009e08:	6105                	addi	sp,sp,32
  hyperflash_program_resume(device);
1c009e0a:	b711                	j	1c009d0e <hyperflash_program_resume>
}
1c009e0c:	40f2                	lw	ra,28(sp)
1c009e0e:	4462                	lw	s0,24(sp)
1c009e10:	44d2                	lw	s1,20(sp)
1c009e12:	4942                	lw	s2,16(sp)
1c009e14:	49b2                	lw	s3,12(sp)
1c009e16:	4a22                	lw	s4,8(sp)
1c009e18:	6105                	addi	sp,sp,32
1c009e1a:	8082                	ret

1c009e1c <hyperflash_copy_async>:
{
1c009e1c:	1141                	addi	sp,sp,-16
1c009e1e:	c606                	sw	ra,12(sp)
  if (!ext2loc)
1c009e20:	e719                	bnez	a4,1c009e2e <hyperflash_copy_async+0x12>
    hyperflash_program_async(device, flash_addr, buffer, size, task);
1c009e22:	873e                	mv	a4,a5
1c009e24:	3f71                	jal	1c009dc0 <hyperflash_program_async>
}
1c009e26:	40b2                	lw	ra,12(sp)
1c009e28:	4501                	li	a0,0
1c009e2a:	0141                	addi	sp,sp,16
1c009e2c:	8082                	ret
    hyperflash_read_async(device, flash_addr, buffer, size, task);
1c009e2e:	873e                	mv	a4,a5
1c009e30:	cb3ff0ef          	jal	ra,1c009ae2 <hyperflash_read_async>
1c009e34:	bfcd                	j	1c009e26 <hyperflash_copy_async+0xa>

1c009e36 <hyperflash_close>:
{
1c009e36:	1141                	addi	sp,sp,-16
1c009e38:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009e3a:	4500                	lw	s0,8(a0)
{
1c009e3c:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperflash->hyper_device);
1c009e3e:	8522                	mv	a0,s0
1c009e40:	2e2030ef          	jal	ra,1c00d122 <pi_hyper_close>
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c009e44:	8522                	mv	a0,s0
}
1c009e46:	4422                	lw	s0,8(sp)
1c009e48:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c009e4a:	13c00593          	li	a1,316
}
1c009e4e:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c009e50:	11a0206f          	j	1c00bf6a <pi_l2_free>

1c009e54 <hyperflash_open>:
{
1c009e54:	7179                	addi	sp,sp,-48
1c009e56:	d226                	sw	s1,36(sp)
1c009e58:	d04a                	sw	s2,32(sp)
1c009e5a:	84aa                	mv	s1,a0
  struct pi_hyperflash_conf *conf = (struct pi_hyperflash_conf *)device->config;
1c009e5c:	00452903          	lw	s2,4(a0)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c009e60:	13c00513          	li	a0,316
{
1c009e64:	d606                	sw	ra,44(sp)
1c009e66:	d422                	sw	s0,40(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c009e68:	0f4020ef          	jal	ra,1c00bf5c <pi_l2_malloc>
  if (hyperflash == NULL)
1c009e6c:	c935                	beqz	a0,1c009ee0 <hyperflash_open+0x8c>
  device->data = (void *)hyperflash;
1c009e6e:	c488                	sw	a0,8(s1)
1c009e70:	842a                	mv	s0,a0
  if (bsp_hyperflash_open(conf))
1c009e72:	854a                	mv	a0,s2
1c009e74:	5d8010ef          	jal	ra,1c00b44c <bsp_hyperflash_open>
1c009e78:	84aa                	mv	s1,a0
1c009e7a:	ed21                	bnez	a0,1c009ed2 <hyperflash_open+0x7e>
  struct pi_hyper_conf hyper_conf = {0};
1c009e7c:	4671                	li	a2,28
1c009e7e:	4581                	li	a1,0
1c009e80:	0048                	addi	a0,sp,4
1c009e82:	305040ef          	jal	ra,1c00e986 <memset>
  pi_hyper_conf_init(&hyper_conf);
1c009e86:	0048                	addi	a0,sp,4
1c009e88:	12a030ef          	jal	ra,1c00cfb2 <pi_hyper_conf_init>
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c009e8c:	00492783          	lw	a5,4(s2)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c009e90:	8522                	mv	a0,s0
1c009e92:	004c                	addi	a1,sp,4
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c009e94:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c009e98:	00892783          	lw	a5,8(s2)
  hyper_conf.type = PI_HYPER_TYPE_FLASH;
1c009e9c:	c802                	sw	zero,16(sp)
  hyper_conf.cs = conf->hyper_cs;
1c009e9e:	c63e                	sw	a5,12(sp)
  hyper_conf.xip_en = conf->xip_en;
1c009ea0:	00c92783          	lw	a5,12(s2)
1c009ea4:	00f104a3          	sb	a5,9(sp)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c009ea8:	794010ef          	jal	ra,1c00b63c <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperflash->hyper_device);
1c009eac:	8522                	mv	a0,s0
1c009eae:	114030ef          	jal	ra,1c00cfc2 <pi_hyper_open>
  if (error)
1c009eb2:	e105                	bnez	a0,1c009ed2 <hyperflash_open+0x7e>
  hyperflash->pending_task = NULL;
1c009eb4:	00042c23          	sw	zero,24(s0)
  hyperflash->waiting_first = NULL;
1c009eb8:	00042823          	sw	zero,16(s0)
  hyperflash->erase_task = NULL;
1c009ebc:	02042223          	sw	zero,36(s0)
  hyperflash->erase_waiting_first = NULL;
1c009ec0:	00042e23          	sw	zero,28(s0)
}
1c009ec4:	50b2                	lw	ra,44(sp)
1c009ec6:	5422                	lw	s0,40(sp)
1c009ec8:	8526                	mv	a0,s1
1c009eca:	5902                	lw	s2,32(sp)
1c009ecc:	5492                	lw	s1,36(sp)
1c009ece:	6145                	addi	sp,sp,48
1c009ed0:	8082                	ret
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c009ed2:	13c00593          	li	a1,316
1c009ed6:	8522                	mv	a0,s0
1c009ed8:	092020ef          	jal	ra,1c00bf6a <pi_l2_free>
  return -2;
1c009edc:	54f9                	li	s1,-2
1c009ede:	b7dd                	j	1c009ec4 <hyperflash_open+0x70>
    return -1;
1c009ee0:	54fd                	li	s1,-1
1c009ee2:	b7cd                	j	1c009ec4 <hyperflash_open+0x70>

1c009ee4 <pi_task_wait_on.isra.3>:
static inline void pi_task_wait_on(struct pi_task *task)
1c009ee4:	1141                	addi	sp,sp,-16
1c009ee6:	c422                	sw	s0,8(sp)
1c009ee8:	c226                	sw	s1,4(sp)
1c009eea:	c606                	sw	ra,12(sp)
1c009eec:	c04a                	sw	s2,0(sp)
1c009eee:	842a                	mv	s0,a0
  while(!task->done)
1c009ef0:	00040783          	lb	a5,0(s0)
1c009ef4:	c799                	beqz	a5,1c009f02 <pi_task_wait_on.isra.3+0x1e>
}
1c009ef6:	40b2                	lw	ra,12(sp)
1c009ef8:	4422                	lw	s0,8(sp)
1c009efa:	4492                	lw	s1,4(sp)
1c009efc:	4902                	lw	s2,0(sp)
1c009efe:	0141                	addi	sp,sp,16
1c009f00:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009f02:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009f06:	4585                	li	a1,1
1c009f08:	01c00513          	li	a0,28
1c009f0c:	5b1010ef          	jal	ra,1c00bcbc <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009f10:	30091073          	csrw	mstatus,s2
1c009f14:	bff1                	j	1c009ef0 <pi_task_wait_on.isra.3+0xc>

1c009f16 <hyperflash_copy_2d>:
  pi_task_wait_on(&task);
  return 0;
}

static inline int hyperflash_copy_2d(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc)
{
1c009f16:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009f18:	4885                	li	a7,1
1c009f1a:	c706                	sw	ra,140(sp)
1c009f1c:	cc46                	sw	a7,24(sp)
  task->arg[0] = (uint32_t)0;
1c009f1e:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c009f20:	d446                	sw	a7,40(sp)
  task->done = 0;
1c009f22:	00010a23          	sb	zero,20(sp)
  if (!ext2loc)
1c009f26:	00080b63          	beqz	a6,1c009f3c <hyperflash_copy_2d+0x26>
  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c009f2a:	880a                	mv	a6,sp
1c009f2c:	9b3ff0ef          	jal	ra,1c0098de <hyperflash_read_2d_async>
  pi_task_t task;
  pi_task_block(&task);
  if (hyperflash_copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, &task))
    return -1;
  pi_task_wait_on(&task);
1c009f30:	0848                	addi	a0,sp,20
1c009f32:	3f4d                	jal	1c009ee4 <pi_task_wait_on.isra.3>
  return 0;
1c009f34:	4501                	li	a0,0
}
1c009f36:	40ba                	lw	ra,140(sp)
1c009f38:	6149                	addi	sp,sp,144
1c009f3a:	8082                	ret
    return -1;
1c009f3c:	557d                	li	a0,-1
1c009f3e:	bfe5                	j	1c009f36 <hyperflash_copy_2d+0x20>

1c009f40 <hyperflash_erase_sector>:
{
1c009f40:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009f42:	4785                	li	a5,1
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c009f44:	860a                	mv	a2,sp
{
1c009f46:	c706                	sw	ra,140(sp)
1c009f48:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009f4a:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c009f4c:	c202                	sw	zero,4(sp)
1c009f4e:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c009f52:	a3bff0ef          	jal	ra,1c00998c <hyperflash_erase_sector_async>
  pi_task_wait_on(&task);
1c009f56:	0848                	addi	a0,sp,20
1c009f58:	3771                	jal	1c009ee4 <pi_task_wait_on.isra.3>
}
1c009f5a:	40ba                	lw	ra,140(sp)
1c009f5c:	4501                	li	a0,0
1c009f5e:	6149                	addi	sp,sp,144
1c009f60:	8082                	ret

1c009f62 <hyperflash_erase_chip>:
{
1c009f62:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009f64:	4785                	li	a5,1
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c009f66:	858a                	mv	a1,sp
{
1c009f68:	c706                	sw	ra,140(sp)
1c009f6a:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009f6c:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c009f6e:	c202                	sw	zero,4(sp)
1c009f70:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c009f74:	ac9ff0ef          	jal	ra,1c009a3c <hyperflash_erase_chip_async>
  pi_task_wait_on(&task);
1c009f78:	0848                	addi	a0,sp,20
1c009f7a:	37ad                	jal	1c009ee4 <pi_task_wait_on.isra.3>
}
1c009f7c:	40ba                	lw	ra,140(sp)
1c009f7e:	4501                	li	a0,0
1c009f80:	6149                	addi	sp,sp,144
1c009f82:	8082                	ret

1c009f84 <hyperflash_read>:
{
1c009f84:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009f86:	4785                	li	a5,1
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c009f88:	870a                	mv	a4,sp
{
1c009f8a:	c706                	sw	ra,140(sp)
1c009f8c:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009f8e:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c009f90:	c202                	sw	zero,4(sp)
1c009f92:	00010a23          	sb	zero,20(sp)
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c009f96:	b4dff0ef          	jal	ra,1c009ae2 <hyperflash_read_async>
  pi_task_wait_on(&task);
1c009f9a:	0848                	addi	a0,sp,20
1c009f9c:	37a1                	jal	1c009ee4 <pi_task_wait_on.isra.3>
}
1c009f9e:	40ba                	lw	ra,140(sp)
1c009fa0:	4501                	li	a0,0
1c009fa2:	6149                	addi	sp,sp,144
1c009fa4:	8082                	ret

1c009fa6 <hyperflash_reg_get>:
{
1c009fa6:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009fa8:	4785                	li	a5,1
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c009faa:	868a                	mv	a3,sp
{
1c009fac:	c706                	sw	ra,140(sp)
1c009fae:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009fb0:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c009fb2:	c202                	sw	zero,4(sp)
1c009fb4:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c009fb8:	ca3ff0ef          	jal	ra,1c009c5a <hyperflash_reg_get_async>
  pi_task_wait_on(&task);
1c009fbc:	0848                	addi	a0,sp,20
1c009fbe:	f27ff0ef          	jal	ra,1c009ee4 <pi_task_wait_on.isra.3>
}
1c009fc2:	40ba                	lw	ra,140(sp)
1c009fc4:	4501                	li	a0,0
1c009fc6:	6149                	addi	sp,sp,144
1c009fc8:	8082                	ret

1c009fca <hyperflash_reg_set>:
{
1c009fca:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009fcc:	4785                	li	a5,1
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c009fce:	868a                	mv	a3,sp
{
1c009fd0:	c706                	sw	ra,140(sp)
1c009fd2:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009fd4:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c009fd6:	c202                	sw	zero,4(sp)
1c009fd8:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c009fdc:	cddff0ef          	jal	ra,1c009cb8 <hyperflash_reg_set_async>
  pi_task_wait_on(&task);
1c009fe0:	0848                	addi	a0,sp,20
1c009fe2:	f03ff0ef          	jal	ra,1c009ee4 <pi_task_wait_on.isra.3>
}
1c009fe6:	40ba                	lw	ra,140(sp)
1c009fe8:	4501                	li	a0,0
1c009fea:	6149                	addi	sp,sp,144
1c009fec:	8082                	ret

1c009fee <hyperflash_program>:
{
1c009fee:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009ff0:	4785                	li	a5,1
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c009ff2:	870a                	mv	a4,sp
{
1c009ff4:	c706                	sw	ra,140(sp)
1c009ff6:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009ff8:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c009ffa:	c202                	sw	zero,4(sp)
1c009ffc:	00010a23          	sb	zero,20(sp)
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00a000:	dc1ff0ef          	jal	ra,1c009dc0 <hyperflash_program_async>
  pi_task_wait_on(&task);
1c00a004:	0848                	addi	a0,sp,20
1c00a006:	edfff0ef          	jal	ra,1c009ee4 <pi_task_wait_on.isra.3>
}
1c00a00a:	40ba                	lw	ra,140(sp)
1c00a00c:	4501                	li	a0,0
1c00a00e:	6149                	addi	sp,sp,144
1c00a010:	8082                	ret

1c00a012 <hyperflash_copy>:
{
1c00a012:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a014:	4785                	li	a5,1
1c00a016:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00a018:	d43e                	sw	a5,40(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c00a01a:	878a                	mv	a5,sp
{
1c00a01c:	c522                	sw	s0,136(sp)
1c00a01e:	c706                	sw	ra,140(sp)
  task->arg[0] = (uint32_t)0;
1c00a020:	c202                	sw	zero,4(sp)
1c00a022:	00010a23          	sb	zero,20(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c00a026:	df7ff0ef          	jal	ra,1c009e1c <hyperflash_copy_async>
    return -1;
1c00a02a:	547d                	li	s0,-1
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c00a02c:	e509                	bnez	a0,1c00a036 <hyperflash_copy+0x24>
1c00a02e:	842a                	mv	s0,a0
  pi_task_wait_on(&task);
1c00a030:	0848                	addi	a0,sp,20
1c00a032:	eb3ff0ef          	jal	ra,1c009ee4 <pi_task_wait_on.isra.3>
}
1c00a036:	8522                	mv	a0,s0
1c00a038:	40ba                	lw	ra,140(sp)
1c00a03a:	442a                	lw	s0,136(sp)
1c00a03c:	6149                	addi	sp,sp,144
1c00a03e:	8082                	ret

1c00a040 <hyperflash_erase_resume>:
{
1c00a040:	1101                	addi	sp,sp,-32
1c00a042:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a044:	4500                	lw	s0,8(a0)
{
1c00a046:	ca26                	sw	s1,20(sp)
1c00a048:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_erase_size == 0)
1c00a04a:	13842483          	lw	s1,312(s0)
{
1c00a04e:	ce06                	sw	ra,28(sp)
1c00a050:	c64e                	sw	s3,12(sp)
1c00a052:	892a                	mv	s2,a0
  if (hyperflash->pending_erase_size == 0)
1c00a054:	ec8d                	bnez	s1,1c00a08e <hyperflash_erase_resume+0x4e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a056:	300474f3          	csrrci	s1,mstatus,8
  pi_task_enqueue(hyperflash->erase_task);
1c00a05a:	5048                	lw	a0,36(s0)
1c00a05c:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c00a060:	815ff0ef          	jal	ra,1c009874 <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c00a064:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->erase_waiting_first;
1c00a068:	4c54                	lw	a3,28(s0)
  hyperflash->erase_task = NULL;
1c00a06a:	02042223          	sw	zero,36(s0)
  if (task)
1c00a06e:	c299                	beqz	a3,1c00a074 <hyperflash_erase_resume+0x34>
    hyperflash->erase_waiting_first = task->implem.next;
1c00a070:	4edc                	lw	a5,28(a3)
1c00a072:	cc5c                	sw	a5,28(s0)
1c00a074:	30049073          	csrw	mstatus,s1
  if (task)
1c00a078:	c2b5                	beqz	a3,1c00a0dc <hyperflash_erase_resume+0x9c>
}
1c00a07a:	4462                	lw	s0,24(sp)
1c00a07c:	40f2                	lw	ra,28(sp)
1c00a07e:	44d2                	lw	s1,20(sp)
1c00a080:	49b2                	lw	s3,12(sp)
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c00a082:	42b0                	lw	a2,64(a3)
1c00a084:	5ecc                	lw	a1,60(a3)
1c00a086:	854a                	mv	a0,s2
}
1c00a088:	4942                	lw	s2,16(sp)
1c00a08a:	6105                	addi	sp,sp,32
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c00a08c:	a8b9                	j	1c00a0ea <hyperflash_erase_async>
    unsigned int iter_size = SECTOR_SIZE - (hyperflash->pending_erase_hyper_addr & (SECTOR_SIZE - 1));
1c00a08e:	13442583          	lw	a1,308(s0)
1c00a092:	000407b7          	lui	a5,0x40
  task->id = PI_TASK_CALLBACK_ID;
1c00a096:	0c042023          	sw	zero,192(s0)
1c00a09a:	db25b733          	p.bclr	a4,a1,13,18
1c00a09e:	8f99                	sub	a5,a5,a4
1c00a0a0:	04f4d4b3          	p.minu	s1,s1,a5
  task->arg[0] = (uint32_t)callback;
1c00a0a4:	1c00a7b7          	lui	a5,0x1c00a
1c00a0a8:	04078793          	addi	a5,a5,64 # 1c00a040 <hyperflash_erase_resume>
1c00a0ac:	0af42623          	sw	a5,172(s0)
  task->implem.keep = 1;
1c00a0b0:	4785                	li	a5,1
1c00a0b2:	0cf42823          	sw	a5,208(s0)
  task->arg[1] = (uint32_t)arg;
1c00a0b6:	0aa42823          	sw	a0,176(s0)
  task->done = 0;
1c00a0ba:	0a040e23          	sb	zero,188(s0)
    hyperflash_erase_sector_async(device, hyper_addr, pi_task_callback(&hyperflash->task2, hyperflash_erase_resume, device));
1c00a0be:	0a840613          	addi	a2,s0,168
1c00a0c2:	8cbff0ef          	jal	ra,1c00998c <hyperflash_erase_sector_async>
    hyperflash->pending_erase_hyper_addr += iter_size;
1c00a0c6:	13442783          	lw	a5,308(s0)
1c00a0ca:	97a6                	add	a5,a5,s1
1c00a0cc:	12f42a23          	sw	a5,308(s0)
    hyperflash->pending_erase_size -= iter_size;
1c00a0d0:	13842783          	lw	a5,312(s0)
1c00a0d4:	409784b3          	sub	s1,a5,s1
1c00a0d8:	12942c23          	sw	s1,312(s0)
}
1c00a0dc:	40f2                	lw	ra,28(sp)
1c00a0de:	4462                	lw	s0,24(sp)
1c00a0e0:	44d2                	lw	s1,20(sp)
1c00a0e2:	4942                	lw	s2,16(sp)
1c00a0e4:	49b2                	lw	s3,12(sp)
1c00a0e6:	6105                	addi	sp,sp,32
1c00a0e8:	8082                	ret

1c00a0ea <hyperflash_erase_async>:
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a0ea:	451c                	lw	a5,8(a0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a0ec:	30047773          	csrrci	a4,mstatus,8
  if (hyperflash->erase_task != NULL)
1c00a0f0:	0247a803          	lw	a6,36(a5)
1c00a0f4:	02080463          	beqz	a6,1c00a11c <hyperflash_erase_async+0x32>
    task->implem.data[0] = id;
1c00a0f8:	450d                	li	a0,3
1c00a0fa:	de88                	sw	a0,56(a3)
    task->implem.data[1] = arg0;
1c00a0fc:	decc                	sw	a1,60(a3)
    task->implem.data[2] = arg1;
1c00a0fe:	c2b0                	sw	a2,64(a3)
    task->implem.data[3] = arg2;
1c00a100:	0406a223          	sw	zero,68(a3)
    if (hyperflash->erase_waiting_first)
1c00a104:	4fd0                	lw	a2,28(a5)
1c00a106:	ca09                	beqz	a2,1c00a118 <hyperflash_erase_async+0x2e>
      hyperflash->erase_waiting_last->implem.next = task;
1c00a108:	5390                	lw	a2,32(a5)
1c00a10a:	ce54                	sw	a3,28(a2)
    hyperflash->erase_waiting_last = task;
1c00a10c:	d394                	sw	a3,32(a5)
    task->implem.next = NULL;
1c00a10e:	0006ae23          	sw	zero,28(a3)
  __builtin_pulp_spr_write(reg, val);
1c00a112:	30071073          	csrw	mstatus,a4
}
1c00a116:	8082                	ret
      hyperflash->erase_waiting_first = task;
1c00a118:	cfd4                	sw	a3,28(a5)
1c00a11a:	bfcd                	j	1c00a10c <hyperflash_erase_async+0x22>
  hyperflash->erase_task = task;
1c00a11c:	d3d4                	sw	a3,36(a5)
1c00a11e:	30071073          	csrw	mstatus,a4
  hyperflash->pending_erase_hyper_addr = addr;
1c00a122:	12b7aa23          	sw	a1,308(a5)
  hyperflash->pending_erase_size = size;
1c00a126:	12c7ac23          	sw	a2,312(a5)
  hyperflash_erase_resume(device);
1c00a12a:	f17ff06f          	j	1c00a040 <hyperflash_erase_resume>

1c00a12e <hyperflash_erase>:
{
1c00a12e:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a130:	4785                	li	a5,1
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c00a132:	868a                	mv	a3,sp
{
1c00a134:	c706                	sw	ra,140(sp)
1c00a136:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00a138:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c00a13a:	c202                	sw	zero,4(sp)
1c00a13c:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c00a140:	376d                	jal	1c00a0ea <hyperflash_erase_async>
  pi_task_wait_on(&task);
1c00a142:	0848                	addi	a0,sp,20
1c00a144:	da1ff0ef          	jal	ra,1c009ee4 <pi_task_wait_on.isra.3>
}
1c00a148:	40ba                	lw	ra,140(sp)
1c00a14a:	4501                	li	a0,0
1c00a14c:	6149                	addi	sp,sp,144
1c00a14e:	8082                	ret

1c00a150 <hyperflash_get_status_reg>:
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c00a150:	6585                	lui	a1,0x1
{
1c00a152:	1141                	addi	sp,sp,-16
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c00a154:	07000613          	li	a2,112
1c00a158:	aaa58593          	addi	a1,a1,-1366 # aaa <__rt_stack_size+0x2aa>
{
1c00a15c:	c606                	sw	ra,12(sp)
1c00a15e:	c422                	sw	s0,8(sp)
1c00a160:	842a                	mv	s0,a0
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c00a162:	81dff0ef          	jal	ra,1c00997e <hyperflash_set_reg_exec>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c00a166:	8522                	mv	a0,s0
1c00a168:	00c40613          	addi	a2,s0,12
1c00a16c:	4691                	li	a3,4
1c00a16e:	4581                	li	a1,0
1c00a170:	160030ef          	jal	ra,1c00d2d0 <pi_hyper_read>
}
1c00a174:	00c45503          	lhu	a0,12(s0)
1c00a178:	40b2                	lw	ra,12(sp)
1c00a17a:	4422                	lw	s0,8(sp)
1c00a17c:	0141                	addi	sp,sp,16
1c00a17e:	8082                	ret

1c00a180 <hyperflash_check_erase>:
{
1c00a180:	1141                	addi	sp,sp,-16
1c00a182:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a184:	4500                	lw	s0,8(a0)
{
1c00a186:	c226                	sw	s1,4(sp)
1c00a188:	84aa                	mv	s1,a0
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c00a18a:	8522                	mv	a0,s0
{
1c00a18c:	c606                	sw	ra,12(sp)
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c00a18e:	37c9                	jal	1c00a150 <hyperflash_get_status_reg>
  if (((reg_status >> 7) & 1) == 0)
1c00a190:	c0751533          	p.extractu	a0,a0,0,7
1c00a194:	e905                	bnez	a0,1c00a1c4 <hyperflash_check_erase+0x44>
  task->arg[0] = (uint32_t)callback;
1c00a196:	1c00a7b7          	lui	a5,0x1c00a
1c00a19a:	18078793          	addi	a5,a5,384 # 1c00a180 <hyperflash_check_erase>
1c00a19e:	02040e23          	sb	zero,60(s0)
1c00a1a2:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00a1a4:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00a1a6:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00a1a8:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c00a1ac:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00a1ae:	02840513          	addi	a0,s0,40
}
1c00a1b2:	4422                	lw	s0,8(sp)
1c00a1b4:	40b2                	lw	ra,12(sp)
1c00a1b6:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00a1b8:	65e1                	lui	a1,0x18
1c00a1ba:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c00a1be:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00a1c0:	3bb0106f          	j	1c00bd7a <pi_task_push_delayed_us>
}
1c00a1c4:	4422                	lw	s0,8(sp)
1c00a1c6:	40b2                	lw	ra,12(sp)
    hyperflash_handle_pending_task(device);
1c00a1c8:	8526                	mv	a0,s1
}
1c00a1ca:	4492                	lw	s1,4(sp)
1c00a1cc:	0141                	addi	sp,sp,16
    hyperflash_handle_pending_task(device);
1c00a1ce:	98bff06f          	j	1c009b58 <hyperflash_handle_pending_task>

1c00a1d2 <hyperflash_check_program>:
{
1c00a1d2:	1141                	addi	sp,sp,-16
1c00a1d4:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a1d6:	4500                	lw	s0,8(a0)
{
1c00a1d8:	c226                	sw	s1,4(sp)
1c00a1da:	84aa                	mv	s1,a0
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c00a1dc:	8522                	mv	a0,s0
{
1c00a1de:	c606                	sw	ra,12(sp)
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c00a1e0:	f71ff0ef          	jal	ra,1c00a150 <hyperflash_get_status_reg>
1c00a1e4:	08057513          	andi	a0,a0,128
1c00a1e8:	e51d                	bnez	a0,1c00a216 <hyperflash_check_program+0x44>
  task->arg[0] = (uint32_t)callback;
1c00a1ea:	1c00a7b7          	lui	a5,0x1c00a
1c00a1ee:	1d278793          	addi	a5,a5,466 # 1c00a1d2 <hyperflash_check_program>
1c00a1f2:	02040e23          	sb	zero,60(s0)
1c00a1f6:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00a1f8:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00a1fa:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00a1fc:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c00a200:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c00a202:	02840513          	addi	a0,s0,40
}
1c00a206:	4422                	lw	s0,8(sp)
1c00a208:	40b2                	lw	ra,12(sp)
1c00a20a:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c00a20c:	0fa00593          	li	a1,250
}
1c00a210:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c00a212:	3690106f          	j	1c00bd7a <pi_task_push_delayed_us>
}
1c00a216:	4422                	lw	s0,8(sp)
1c00a218:	40b2                	lw	ra,12(sp)
    hyperflash_program_resume(device);
1c00a21a:	8526                	mv	a0,s1
}
1c00a21c:	4492                	lw	s1,4(sp)
1c00a21e:	0141                	addi	sp,sp,16
    hyperflash_program_resume(device);
1c00a220:	aefff06f          	j	1c009d0e <hyperflash_program_resume>

1c00a224 <pi_hyperflash_conf_init>:
};



void pi_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
1c00a224:	1141                	addi	sp,sp,-16
  conf->flash.api = &hyperflash_api;
1c00a226:	1c0107b7          	lui	a5,0x1c010
{
1c00a22a:	c606                	sw	ra,12(sp)
1c00a22c:	c422                	sw	s0,8(sp)
  conf->flash.api = &hyperflash_api;
1c00a22e:	62c78793          	addi	a5,a5,1580 # 1c01062c <hyperflash_api>
1c00a232:	c11c                	sw	a5,0(a0)
{
1c00a234:	842a                	mv	s0,a0
  bsp_hyperflash_conf_init(conf);
1c00a236:	20c010ef          	jal	ra,1c00b442 <bsp_hyperflash_conf_init>
  __flash_conf_init(&conf->flash);
1c00a23a:	8522                	mv	a0,s0
1c00a23c:	80ffe0ef          	jal	ra,1c008a4a <__flash_conf_init>
  conf->xip_en = 0;
}
1c00a240:	40b2                	lw	ra,12(sp)
  conf->xip_en = 0;
1c00a242:	00042623          	sw	zero,12(s0)
}
1c00a246:	4422                	lw	s0,8(sp)
1c00a248:	0141                	addi	sp,sp,16
1c00a24a:	8082                	ret

1c00a24c <hyperram_alloc>:

int hyperram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
  void *chunk;
  hyperram_t *hyperram = (hyperram_t *)device->data;
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c00a24c:	4508                	lw	a0,8(a0)
{
1c00a24e:	1101                	addi	sp,sp,-32
1c00a250:	cc22                	sw	s0,24(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c00a252:	0531                	addi	a0,a0,12
{
1c00a254:	842e                	mv	s0,a1
1c00a256:	85b2                	mv	a1,a2
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c00a258:	0070                	addi	a2,sp,12
{
1c00a25a:	ce06                	sw	ra,28(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c00a25c:	244d                	jal	1c00a4fe <extern_alloc>
  *addr = (uint32_t)chunk;
1c00a25e:	47b2                	lw	a5,12(sp)
  return err;
}
1c00a260:	40f2                	lw	ra,28(sp)
  *addr = (uint32_t)chunk;
1c00a262:	c01c                	sw	a5,0(s0)
}
1c00a264:	4462                	lw	s0,24(sp)
1c00a266:	6105                	addi	sp,sp,32
1c00a268:	8082                	ret

1c00a26a <hyperram_free>:


int hyperram_free(struct pi_device *device, uint32_t addr, uint32_t size)
{
  hyperram_t *hyperram = (hyperram_t *)device->data;
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c00a26a:	4508                	lw	a0,8(a0)
{
1c00a26c:	87b2                	mv	a5,a2
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c00a26e:	862e                	mv	a2,a1
1c00a270:	0531                	addi	a0,a0,12
1c00a272:	85be                	mv	a1,a5
1c00a274:	a4e5                	j	1c00a55c <extern_free>

1c00a276 <hyperram_copy_2d_async>:
{
1c00a276:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c00a278:	00080563          	beqz	a6,1c00a282 <hyperram_copy_2d_async+0xc>
    pi_hyper_read_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c00a27c:	8846                	mv	a6,a7
1c00a27e:	4340306f          	j	1c00d6b2 <pi_hyper_read_2d_async>
    pi_hyper_write_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c00a282:	8846                	mv	a6,a7
1c00a284:	4460306f          	j	1c00d6ca <pi_hyper_write_2d_async>

1c00a288 <hyperram_copy_async>:
{
1c00a288:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c00a28a:	c701                	beqz	a4,1c00a292 <hyperram_copy_async+0xa>
    pi_hyper_read_async(&hyperram->hyper_device, addr, data, size, task);
1c00a28c:	873e                	mv	a4,a5
1c00a28e:	02c0306f          	j	1c00d2ba <pi_hyper_read_async>
    pi_hyper_write_async(&hyperram->hyper_device, addr, data, size, task);
1c00a292:	873e                	mv	a4,a5
1c00a294:	05e0306f          	j	1c00d2f2 <pi_hyper_write_async>

1c00a298 <hyperram_close>:
{
1c00a298:	1141                	addi	sp,sp,-16
1c00a29a:	c422                	sw	s0,8(sp)
  hyperram_t *hyperram = (hyperram_t *)device->data;
1c00a29c:	4500                	lw	s0,8(a0)
{
1c00a29e:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperram->hyper_device);
1c00a2a0:	8522                	mv	a0,s0
1c00a2a2:	681020ef          	jal	ra,1c00d122 <pi_hyper_close>
  extern_alloc_deinit(&hyperram->alloc);
1c00a2a6:	00c40513          	addi	a0,s0,12
1c00a2aa:	24b1                	jal	1c00a4f6 <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c00a2ac:	8522                	mv	a0,s0
}
1c00a2ae:	4422                	lw	s0,8(sp)
1c00a2b0:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c00a2b2:	45c1                	li	a1,16
}
1c00a2b4:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c00a2b6:	4b50106f          	j	1c00bf6a <pi_l2_free>

1c00a2ba <hyperram_open>:
{
1c00a2ba:	7139                	addi	sp,sp,-64
1c00a2bc:	dc22                	sw	s0,56(sp)
1c00a2be:	d84a                	sw	s2,48(sp)
  struct pi_hyperram_conf *conf = (struct pi_hyperram_conf *)device->config;
1c00a2c0:	4140                	lw	s0,4(a0)
{
1c00a2c2:	892a                	mv	s2,a0
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c00a2c4:	4541                	li	a0,16
{
1c00a2c6:	de06                	sw	ra,60(sp)
1c00a2c8:	da26                	sw	s1,52(sp)
1c00a2ca:	d64e                	sw	s3,44(sp)
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c00a2cc:	491010ef          	jal	ra,1c00bf5c <pi_l2_malloc>
  if (hyperram == NULL)
1c00a2d0:	c141                	beqz	a0,1c00a350 <hyperram_open+0x96>
  if (conf->reserve_addr_0)
1c00a2d2:	501c                	lw	a5,32(s0)
  device->data = (void *)hyperram;
1c00a2d4:	00a92423          	sw	a0,8(s2)
1c00a2d8:	84aa                	mv	s1,a0
  int size = conf->ram_size;
1c00a2da:	4c10                	lw	a2,24(s0)
  uint32_t start_addr = 0;
1c00a2dc:	4581                	li	a1,0
  if (conf->reserve_addr_0)
1c00a2de:	c399                	beqz	a5,1c00a2e4 <hyperram_open+0x2a>
    size -= 4;
1c00a2e0:	1671                	addi	a2,a2,-4
    start_addr = 4;
1c00a2e2:	4591                	li	a1,4
  if (extern_alloc_init(&hyperram->alloc, (void *)start_addr, size))
1c00a2e4:	00c48993          	addi	s3,s1,12
1c00a2e8:	854e                	mv	a0,s3
1c00a2ea:	2a6d                	jal	1c00a4a4 <extern_alloc_init>
1c00a2ec:	e901                	bnez	a0,1c00a2fc <hyperram_open+0x42>
  if (bsp_hyperram_open(conf))
1c00a2ee:	8522                	mv	a0,s0
1c00a2f0:	142010ef          	jal	ra,1c00b432 <bsp_hyperram_open>
1c00a2f4:	892a                	mv	s2,a0
1c00a2f6:	c909                	beqz	a0,1c00a308 <hyperram_open+0x4e>
  extern_alloc_deinit(&hyperram->alloc);
1c00a2f8:	854e                	mv	a0,s3
1c00a2fa:	2af5                	jal	1c00a4f6 <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c00a2fc:	45c1                	li	a1,16
1c00a2fe:	8526                	mv	a0,s1
1c00a300:	46b010ef          	jal	ra,1c00bf6a <pi_l2_free>
  return -2;
1c00a304:	5979                	li	s2,-2
1c00a306:	a82d                	j	1c00a340 <hyperram_open+0x86>
  pi_hyper_conf_init(&hyper_conf);
1c00a308:	0048                	addi	a0,sp,4
1c00a30a:	4a9020ef          	jal	ra,1c00cfb2 <pi_hyper_conf_init>
  hyper_conf.burst_length = 4000;
1c00a30e:	6785                	lui	a5,0x1
1c00a310:	fa078793          	addi	a5,a5,-96 # fa0 <__rt_stack_size+0x7a0>
1c00a314:	cc3e                	sw	a5,24(sp)
  hyper_conf.id = conf->hyper_itf;
1c00a316:	405c                	lw	a5,4(s0)
1c00a318:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c00a31c:	441c                	lw	a5,8(s0)
1c00a31e:	c63e                	sw	a5,12(sp)
  hyper_conf.type = PI_HYPER_TYPE_RAM;
1c00a320:	4785                	li	a5,1
1c00a322:	c83e                	sw	a5,16(sp)
  hyper_conf.xip_en = conf->xip_en;
1c00a324:	481c                	lw	a5,16(s0)
1c00a326:	00f104a3          	sb	a5,9(sp)
  if (conf->baudrate)
1c00a32a:	4c5c                	lw	a5,28(s0)
1c00a32c:	c391                	beqz	a5,1c00a330 <hyperram_open+0x76>
      hyper_conf.baudrate = conf->baudrate;
1c00a32e:	ca3e                	sw	a5,20(sp)
  pi_open_from_conf(&hyperram->hyper_device, &hyper_conf);
1c00a330:	8526                	mv	a0,s1
1c00a332:	004c                	addi	a1,sp,4
1c00a334:	308010ef          	jal	ra,1c00b63c <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperram->hyper_device);
1c00a338:	8526                	mv	a0,s1
1c00a33a:	489020ef          	jal	ra,1c00cfc2 <pi_hyper_open>
  if (error)
1c00a33e:	fd4d                	bnez	a0,1c00a2f8 <hyperram_open+0x3e>
}
1c00a340:	50f2                	lw	ra,60(sp)
1c00a342:	5462                	lw	s0,56(sp)
1c00a344:	854a                	mv	a0,s2
1c00a346:	54d2                	lw	s1,52(sp)
1c00a348:	5942                	lw	s2,48(sp)
1c00a34a:	59b2                	lw	s3,44(sp)
1c00a34c:	6121                	addi	sp,sp,64
1c00a34e:	8082                	ret
      return -1;
1c00a350:	597d                	li	s2,-1
1c00a352:	b7fd                	j	1c00a340 <hyperram_open+0x86>

1c00a354 <pi_hyperram_conf_init>:
};


void pi_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram.api = &hyperram_api;
1c00a354:	1c010737          	lui	a4,0x1c010
1c00a358:	68070713          	addi	a4,a4,1664 # 1c010680 <hyperram_api>
1c00a35c:	c118                	sw	a4,0(a0)
  conf->baudrate = 0;
  conf->xip_en = 0;
  conf->reserve_addr_0 = 1;
1c00a35e:	4705                	li	a4,1
  conf->baudrate = 0;
1c00a360:	00052e23          	sw	zero,28(a0)
  conf->xip_en = 0;
1c00a364:	00052823          	sw	zero,16(a0)
  conf->reserve_addr_0 = 1;
1c00a368:	d118                	sw	a4,32(a0)
  bsp_hyperram_conf_init(conf);
1c00a36a:	0b00106f          	j	1c00b41a <bsp_hyperram_conf_init>

1c00a36e <__pi_ram_cluster_req>:
}


void __pi_ram_conf_init(struct pi_ram_conf *conf)
{
}
1c00a36e:	832a                	mv	t1,a0
1c00a370:	09f34783          	lbu	a5,159(t1)
1c00a374:	1c00ae37          	lui	t3,0x1c00a
1c00a378:	4108                	lw	a0,0(a0)
1c00a37a:	00832583          	lw	a1,8(t1)
1c00a37e:	00432603          	lw	a2,4(t1)
1c00a382:	00c32683          	lw	a3,12(t1)
1c00a386:	09e34803          	lbu	a6,158(t1)
1c00a38a:	01830893          	addi	a7,t1,24
1c00a38e:	3dee0e13          	addi	t3,t3,990 # 1c00a3de <__pi_ram_cluster_req_done>
1c00a392:	c78d                	beqz	a5,1c00a3bc <__pi_ram_cluster_req+0x4e>
1c00a394:	01c32e23          	sw	t3,28(t1)
1c00a398:	02030623          	sb	zero,44(t1)
1c00a39c:	4e05                	li	t3,1
1c00a39e:	01032703          	lw	a4,16(t1)
1c00a3a2:	01432783          	lw	a5,20(t1)
1c00a3a6:	02032823          	sw	zero,48(t1)
1c00a3aa:	02632023          	sw	t1,32(t1)
1c00a3ae:	05c32023          	sw	t3,64(t1)
1c00a3b2:	00052303          	lw	t1,0(a0)
1c00a3b6:	00c32303          	lw	t1,12(t1)
1c00a3ba:	8302                	jr	t1
1c00a3bc:	4785                	li	a5,1
1c00a3be:	02030623          	sb	zero,44(t1)
1c00a3c2:	04f32023          	sw	a5,64(t1)
1c00a3c6:	411c                	lw	a5,0(a0)
1c00a3c8:	02032823          	sw	zero,48(t1)
1c00a3cc:	01c32e23          	sw	t3,28(t1)
1c00a3d0:	02632023          	sw	t1,32(t1)
1c00a3d4:	0087a303          	lw	t1,8(a5)
1c00a3d8:	8742                	mv	a4,a6
1c00a3da:	87c6                	mv	a5,a7
1c00a3dc:	8302                	jr	t1

1c00a3de <__pi_ram_cluster_req_done>:
1c00a3de:	09d54783          	lbu	a5,157(a0)
1c00a3e2:	4705                	li	a4,1
1c00a3e4:	08e50e23          	sb	a4,156(a0)
1c00a3e8:	04078793          	addi	a5,a5,64
1c00a3ec:	00201737          	lui	a4,0x201
1c00a3f0:	07da                	slli	a5,a5,0x16
1c00a3f2:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00a3f6:	0007e723          	p.sw	zero,a4(a5)
1c00a3fa:	8082                	ret

1c00a3fc <pi_ram_open>:
1c00a3fc:	415c                	lw	a5,4(a0)
1c00a3fe:	439c                	lw	a5,0(a5)
1c00a400:	0007a303          	lw	t1,0(a5)
1c00a404:	c11c                	sw	a5,0(a0)
1c00a406:	8302                	jr	t1

1c00a408 <pi_cl_ram_copy>:
                 uint32_t pi_ram_addr, void *addr, uint32_t size, int ext2loc, pi_cl_ram_req_t *req)
{
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
1c00a408:	c7d4                	sw	a3,12(a5)
    req->cid = pi_cluster_id();
    req->done = 0;
    req->ext2loc = ext2loc;
1c00a40a:	08e78f23          	sb	a4,158(a5)
}

static inline unsigned int cluster_id() {  int hart_id;
#if RISCV_VERSION >= 4 && !defined(RISCV_1_7)
#if PULP_CHIP_FAMILY == CHIP_GAP
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a40e:	014026f3          	csrr	a3,uhartid
  task->arg[0] = (uint32_t)callback;
1c00a412:	1c00a737          	lui	a4,0x1c00a
#endif
#else
  asm("csrr %0, 0xF10" : "=r" (hart_id) : );
#endif
  // in PULP the hart id is {22'b0, cluster_id, core_id}
  return (hart_id >> 5) & 0x3f;
1c00a416:	8695                	srai	a3,a3,0x5
1c00a418:	36e70713          	addi	a4,a4,878 # 1c00a36e <__pi_ram_cluster_req>
1c00a41c:	f266b6b3          	p.bclr	a3,a3,25,6
1c00a420:	cfd8                	sw	a4,28(a5)
  task->implem.keep = 1;
1c00a422:	4705                	li	a4,1
    req->device = device;
1c00a424:	c388                	sw	a0,0(a5)
    req->addr = addr;
1c00a426:	c3d0                	sw	a2,4(a5)
    req->pi_ram_addr = pi_ram_addr;
1c00a428:	c78c                	sw	a1,8(a5)
    req->cid = pi_cluster_id();
1c00a42a:	08d78ea3          	sb	a3,157(a5)
    req->done = 0;
1c00a42e:	08078e23          	sb	zero,156(a5)
    req->is_2d = 0;
1c00a432:	08078fa3          	sb	zero,159(a5)
  task->id = PI_TASK_CALLBACK_ID;
1c00a436:	0207a823          	sw	zero,48(a5)
  task->arg[1] = (uint32_t)arg;
1c00a43a:	d39c                	sw	a5,32(a5)
  task->implem.keep = 1;
1c00a43c:	c3b8                	sw	a4,64(a5)
1c00a43e:	02078623          	sb	zero,44(a5)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c00a442:	01878513          	addi	a0,a5,24
1c00a446:	1370106f          	j	1c00bd7c <pi_cl_send_task_to_fc>

1c00a44a <pi_cl_ram_copy_2d>:
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
    req->stride = stride;
    req->length = length;
1c00a44a:	00f8aa23          	sw	a5,20(a7)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a44e:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00a452:	8795                	srai	a5,a5,0x5
1c00a454:	f267b7b3          	p.bclr	a5,a5,25,6
    req->cid = pi_cluster_id();
1c00a458:	08f88ea3          	sb	a5,157(a7)
    req->done = 0;
    req->ext2loc = ext2loc;
    req->is_2d = 1;
1c00a45c:	4785                	li	a5,1
1c00a45e:	08f88fa3          	sb	a5,159(a7)
  task->arg[0] = (uint32_t)callback;
1c00a462:	1c00a7b7          	lui	a5,0x1c00a
1c00a466:	36e78793          	addi	a5,a5,878 # 1c00a36e <__pi_ram_cluster_req>
1c00a46a:	00f8ae23          	sw	a5,28(a7)
  task->implem.keep = 1;
1c00a46e:	4785                	li	a5,1
    req->device = device;
1c00a470:	00a8a023          	sw	a0,0(a7)
    req->addr = addr;
1c00a474:	00c8a223          	sw	a2,4(a7)
    req->pi_ram_addr = pi_ram_addr;
1c00a478:	00b8a423          	sw	a1,8(a7)
    req->size = size;
1c00a47c:	00d8a623          	sw	a3,12(a7)
    req->stride = stride;
1c00a480:	00e8a823          	sw	a4,16(a7)
    req->done = 0;
1c00a484:	08088e23          	sb	zero,156(a7)
    req->ext2loc = ext2loc;
1c00a488:	09088f23          	sb	a6,158(a7)
  task->id = PI_TASK_CALLBACK_ID;
1c00a48c:	0208a823          	sw	zero,48(a7)
  task->arg[1] = (uint32_t)arg;
1c00a490:	0318a023          	sw	a7,32(a7)
  task->implem.keep = 1;
1c00a494:	04f8a023          	sw	a5,64(a7)
1c00a498:	02088623          	sb	zero,44(a7)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c00a49c:	01888513          	addi	a0,a7,24
1c00a4a0:	0dd0106f          	j	1c00bd7c <pi_cl_send_task_to_fc>

1c00a4a4 <extern_alloc_init>:
  }
  printf("=============================================\n");
}

int extern_alloc_init(extern_alloc_t *a, void *addr, int size)
{
1c00a4a4:	1101                	addi	sp,sp,-32
1c00a4a6:	ca26                	sw	s1,20(sp)
1c00a4a8:	ce06                	sw	ra,28(sp)
1c00a4aa:	cc22                	sw	s0,24(sp)
1c00a4ac:	84aa                	mv	s1,a0
  if (size)
1c00a4ae:	ce1d                	beqz	a2,1c00a4ec <extern_alloc_init+0x48>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c00a4b0:	4531                	li	a0,12
  {
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00a4b2:	00758413          	addi	s0,a1,7
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c00a4b6:	c62e                	sw	a1,12(sp)
1c00a4b8:	c432                	sw	a2,8(sp)
1c00a4ba:	2a3010ef          	jal	ra,1c00bf5c <pi_l2_malloc>
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00a4be:	c4043433          	p.bclr	s0,s0,2,0
    alloc_chunk_extern_t *chunk = __alloc_chunk();
    if (chunk == NULL) return -1;
1c00a4c2:	45b2                	lw	a1,12(sp)
1c00a4c4:	4622                	lw	a2,8(sp)
1c00a4c6:	c515                	beqz	a0,1c00a4f2 <extern_alloc_init+0x4e>
    size = size - (staaddr - (unsigned int)addr);
1c00a4c8:	95b2                	add	a1,a1,a2
1c00a4ca:	8d81                	sub	a1,a1,s0
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c00a4cc:	4601                	li	a2,0
    if (size > 0) {
1c00a4ce:	00b05963          	blez	a1,1c00a4e0 <extern_alloc_init+0x3c>
      a->first_free = chunk;
1c00a4d2:	c088                	sw	a0,0(s1)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c00a4d4:	c405b5b3          	p.bclr	a1,a1,2,0
1c00a4d8:	c10c                	sw	a1,0(a0)
      chunk->next = NULL;
1c00a4da:	00052223          	sw	zero,4(a0)
      chunk->addr = staaddr;
1c00a4de:	c500                	sw	s0,8(a0)
}
1c00a4e0:	40f2                	lw	ra,28(sp)
1c00a4e2:	4462                	lw	s0,24(sp)
1c00a4e4:	44d2                	lw	s1,20(sp)
1c00a4e6:	8532                	mv	a0,a2
1c00a4e8:	6105                	addi	sp,sp,32
1c00a4ea:	8082                	ret
    a->first_free = NULL;
1c00a4ec:	00052023          	sw	zero,0(a0)
1c00a4f0:	bfc5                	j	1c00a4e0 <extern_alloc_init+0x3c>
    if (chunk == NULL) return -1;
1c00a4f2:	567d                	li	a2,-1
1c00a4f4:	b7f5                	j	1c00a4e0 <extern_alloc_init+0x3c>

1c00a4f6 <extern_alloc_deinit>:
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00a4f6:	4108                	lw	a0,0(a0)
1c00a4f8:	45b1                	li	a1,12
1c00a4fa:	2710106f          	j	1c00bf6a <pi_l2_free>

1c00a4fe <extern_alloc>:



int extern_alloc(extern_alloc_t *a, int size, void **chunk)
{
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c00a4fe:	411c                	lw	a5,0(a0)

  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c00a500:	059d                	addi	a1,a1,7
1c00a502:	c405b5b3          	p.bclr	a1,a1,2,0
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c00a506:	4681                	li	a3,0

  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c00a508:	c7b1                	beqz	a5,1c00a554 <extern_alloc+0x56>
1c00a50a:	4398                	lw	a4,0(a5)
1c00a50c:	02b74863          	blt	a4,a1,1c00a53c <extern_alloc+0x3e>
{
1c00a510:	1141                	addi	sp,sp,-16
1c00a512:	c226                	sw	s1,4(sp)
1c00a514:	c606                	sw	ra,12(sp)
1c00a516:	c422                	sw	s0,8(sp)
1c00a518:	4784                	lw	s1,8(a5)

  if (pt) {
    if (pt->size == size) {
1c00a51a:	02b71663          	bne	a4,a1,1c00a546 <extern_alloc+0x48>
1c00a51e:	43d8                	lw	a4,4(a5)
      // Special case where the whole block disappears
      // This special case is interesting to support when we allocate aligned pages, to limit fragmentation
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c00a520:	c28d                	beqz	a3,1c00a542 <extern_alloc+0x44>
1c00a522:	c2d8                	sw	a4,4(a3)
1c00a524:	8432                	mv	s0,a2
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00a526:	45b1                	li	a1,12
1c00a528:	853e                	mv	a0,a5
1c00a52a:	241010ef          	jal	ra,1c00bf6a <pi_l2_free>
      void *addr = (void *)pt->addr;
      __free_chunk(pt);
      *chunk = addr;
1c00a52e:	c004                	sw	s1,0(s0)
  } else {
    //warning("Not enough memory to allocate\n");
    *chunk = (void *)0xffffffff;
    return -1;
  }
}
1c00a530:	40b2                	lw	ra,12(sp)
1c00a532:	4422                	lw	s0,8(sp)
1c00a534:	4492                	lw	s1,4(sp)
      return 0;
1c00a536:	4501                	li	a0,0
}
1c00a538:	0141                	addi	sp,sp,16
1c00a53a:	8082                	ret
  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c00a53c:	86be                	mv	a3,a5
1c00a53e:	43dc                	lw	a5,4(a5)
1c00a540:	b7e1                	j	1c00a508 <extern_alloc+0xa>
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c00a542:	c118                	sw	a4,0(a0)
1c00a544:	b7c5                	j	1c00a524 <extern_alloc+0x26>
      pt->size = pt->size - size;
1c00a546:	40b706b3          	sub	a3,a4,a1
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c00a54a:	9726                	add	a4,a4,s1
      pt->size = pt->size - size;
1c00a54c:	c394                	sw	a3,0(a5)
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c00a54e:	8f0d                	sub	a4,a4,a1
      *chunk = result;
1c00a550:	c218                	sw	a4,0(a2)
1c00a552:	bff9                	j	1c00a530 <extern_alloc+0x32>
    *chunk = (void *)0xffffffff;
1c00a554:	57fd                	li	a5,-1
1c00a556:	c21c                	sw	a5,0(a2)
    return -1;
1c00a558:	557d                	li	a0,-1
}
1c00a55a:	8082                	ret

1c00a55c <extern_free>:
  return 0;
}

int __attribute__((noinline)) extern_free(extern_alloc_t *a, int size, void *addr)

{
1c00a55c:	7179                	addi	sp,sp,-48
1c00a55e:	d422                	sw	s0,40(sp)
  alloc_chunk_extern_t *chunk;
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c00a560:	4100                	lw	s0,0(a0)
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c00a562:	059d                	addi	a1,a1,7
{
1c00a564:	d226                	sw	s1,36(sp)
1c00a566:	d04a                	sw	s2,32(sp)
1c00a568:	ce4e                	sw	s3,28(sp)
1c00a56a:	d606                	sw	ra,44(sp)
1c00a56c:	89aa                	mv	s3,a0
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c00a56e:	c405b933          	p.bclr	s2,a1,2,0
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c00a572:	4481                	li	s1,0

  while (next && next->addr < (unsigned int)addr) {
1c00a574:	c439                	beqz	s0,1c00a5c2 <extern_free+0x66>
1c00a576:	441c                	lw	a5,8(s0)
1c00a578:	04c7e263          	bltu	a5,a2,1c00a5bc <extern_free+0x60>
    prev = next; next = next->next; 
  }

  if (next && ((char *)addr + size) == (char *)next->addr) {
1c00a57c:	01260733          	add	a4,a2,s2
1c00a580:	04f71163          	bne	a4,a5,1c00a5c2 <extern_free+0x66>
    /* Coalesce with next */
    next->size = size + next->size;
1c00a584:	400c                	lw	a1,0(s0)
    next->addr = (unsigned int)addr;
1c00a586:	c410                	sw	a2,8(s0)
    next->size = size + next->size;
1c00a588:	992e                	add	s2,s2,a1
1c00a58a:	01242023          	sw	s2,0(s0)
    chunk->size = size;
    chunk->next = next;
    chunk->addr = (unsigned int)addr;
  }

  if (prev) {
1c00a58e:	c8b1                	beqz	s1,1c00a5e2 <extern_free+0x86>
    if (((char *)prev->addr + prev->size) == (char *)addr) {
1c00a590:	4094                	lw	a3,0(s1)
1c00a592:	4498                	lw	a4,8(s1)
1c00a594:	9736                	add	a4,a4,a3
1c00a596:	04e61463          	bne	a2,a4,1c00a5de <extern_free+0x82>
      /* Coalesce with previous */
      prev->size += chunk->size;
1c00a59a:	401c                	lw	a5,0(s0)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00a59c:	45b1                	li	a1,12
1c00a59e:	8522                	mv	a0,s0
      prev->size += chunk->size;
1c00a5a0:	97b6                	add	a5,a5,a3
1c00a5a2:	c09c                	sw	a5,0(s1)
      prev->next = chunk->next;
1c00a5a4:	405c                	lw	a5,4(s0)
1c00a5a6:	c0dc                	sw	a5,4(s1)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00a5a8:	1c3010ef          	jal	ra,1c00bf6a <pi_l2_free>
    }
  } else {
    a->first_free = chunk;
  }

  return 0;
1c00a5ac:	4501                	li	a0,0
}
1c00a5ae:	50b2                	lw	ra,44(sp)
1c00a5b0:	5422                	lw	s0,40(sp)
1c00a5b2:	5492                	lw	s1,36(sp)
1c00a5b4:	5902                	lw	s2,32(sp)
1c00a5b6:	49f2                	lw	s3,28(sp)
1c00a5b8:	6145                	addi	sp,sp,48
1c00a5ba:	8082                	ret
    prev = next; next = next->next; 
1c00a5bc:	84a2                	mv	s1,s0
1c00a5be:	4040                	lw	s0,4(s0)
1c00a5c0:	bf55                	j	1c00a574 <extern_free+0x18>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c00a5c2:	4531                	li	a0,12
1c00a5c4:	c632                	sw	a2,12(sp)
1c00a5c6:	197010ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c00a5ca:	87aa                	mv	a5,a0
    if (chunk == NULL) return -1;
1c00a5cc:	4632                	lw	a2,12(sp)
1c00a5ce:	557d                	li	a0,-1
1c00a5d0:	dff9                	beqz	a5,1c00a5ae <extern_free+0x52>
    chunk->next = next;
1c00a5d2:	c3c0                	sw	s0,4(a5)
    chunk->size = size;
1c00a5d4:	0127a023          	sw	s2,0(a5)
    chunk->addr = (unsigned int)addr;
1c00a5d8:	c790                	sw	a2,8(a5)
1c00a5da:	843e                	mv	s0,a5
1c00a5dc:	bf4d                	j	1c00a58e <extern_free+0x32>
      prev->next = chunk;
1c00a5de:	c0c0                	sw	s0,4(s1)
1c00a5e0:	b7f1                	j	1c00a5ac <extern_free+0x50>
    a->first_free = chunk;
1c00a5e2:	0089a023          	sw	s0,0(s3)
1c00a5e6:	b7d9                	j	1c00a5ac <extern_free+0x50>

1c00a5e8 <pi_partition_get_flash_offset>:
        return 0;
}

uint32_t pi_partition_get_flash_offset(const pi_partition_t *partition)
{
    if(partition)
1c00a5e8:	c119                	beqz	a0,1c00a5ee <pi_partition_get_flash_offset+0x6>
        return partition->offset;
1c00a5ea:	4548                	lw	a0,12(a0)
1c00a5ec:	8082                	ret
    else
        return UINT32_MAX;
1c00a5ee:	557d                	li	a0,-1
}
1c00a5f0:	8082                	ret

1c00a5f2 <pi_partition_table_free>:

void pi_partition_table_free(pi_partition_table_t table)
{
    flash_partition_table_free((flash_partition_table_t *) table);
1c00a5f2:	aaf1                	j	1c00a7ce <flash_partition_table_free>

1c00a5f4 <pi_partition_table_load>:

pi_err_t pi_partition_table_load(pi_device_t *flash, const pi_partition_table_t *table)
{
    pi_err_t rc;
    
    rc = flash_partition_table_load(flash, (const flash_partition_table_t **) table, NULL);
1c00a5f4:	4601                	li	a2,0
1c00a5f6:	a8d1                	j	1c00a6ca <flash_partition_table_load>

1c00a5f8 <pi_partition_find_first>:

const pi_partition_t *
pi_partition_find_first(const pi_partition_table_t table, const pi_partition_type_t type,
                        const pi_partition_subtype_t subtype,
                        const char *label)
{
1c00a5f8:	1141                	addi	sp,sp,-16
1c00a5fa:	c226                	sw	s1,4(sp)
1c00a5fc:	c606                	sw	ra,12(sp)
1c00a5fe:	c422                	sw	s0,8(sp)
1c00a600:	84aa                	mv	s1,a0
    pi_partition_t *partition;
    const flash_partition_info_t *info;
    
    info = flash_partition_find_first((const flash_partition_table_t *) table, type, subtype, label);
1c00a602:	2ac5                	jal	1c00a7f2 <flash_partition_find_first>
    if(info == NULL)
1c00a604:	c539                	beqz	a0,1c00a652 <pi_partition_find_first+0x5a>
1c00a606:	842a                	mv	s0,a0
        return NULL;
    
    partition = pi_l2_malloc(sizeof(pi_partition_t));
1c00a608:	02800513          	li	a0,40
1c00a60c:	151010ef          	jal	ra,1c00bf5c <pi_l2_malloc>
    partition->type = info->type;
1c00a610:	00244783          	lbu	a5,2(s0)
    partition->subtype = info->subtype;
    partition->size = info->pos.size;
    partition->offset = info->pos.offset;
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c00a614:	4098                	lw	a4,0(s1)
    partition->type = info->type;
1c00a616:	c15c                	sw	a5,4(a0)
    partition->subtype = info->subtype;
1c00a618:	00344783          	lbu	a5,3(s0)
1c00a61c:	c51c                	sw	a5,8(a0)
    partition->size = info->pos.size;
1c00a61e:	441c                	lw	a5,8(s0)
1c00a620:	c91c                	sw	a5,16(a0)
    partition->offset = info->pos.offset;
1c00a622:	405c                	lw	a5,4(s0)
1c00a624:	c55c                	sw	a5,12(a0)
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c00a626:	87aa                	mv	a5,a0
1c00a628:	00e7aa2b          	p.sw	a4,20(a5!)
    memcpy(partition->label, info->label, 16);
1c00a62c:	4458                	lw	a4,12(s0)
1c00a62e:	c398                	sw	a4,0(a5)
1c00a630:	481c                	lw	a5,16(s0)
1c00a632:	cd1c                	sw	a5,24(a0)
1c00a634:	485c                	lw	a5,20(s0)
1c00a636:	cd5c                	sw	a5,28(a0)
1c00a638:	4c1c                	lw	a5,24(s0)
    partition->label[16] = 0;
1c00a63a:	02050223          	sb	zero,36(a0)
    partition->encrypted = false;
1c00a63e:	020502a3          	sb	zero,37(a0)
    memcpy(partition->label, info->label, 16);
1c00a642:	d11c                	sw	a5,32(a0)
    partition->read_only = false;
1c00a644:	02050323          	sb	zero,38(a0)
    
    return (const pi_partition_t *) partition;
}
1c00a648:	40b2                	lw	ra,12(sp)
1c00a64a:	4422                	lw	s0,8(sp)
1c00a64c:	4492                	lw	s1,4(sp)
1c00a64e:	0141                	addi	sp,sp,16
1c00a650:	8082                	ret
        return NULL;
1c00a652:	4501                	li	a0,0
1c00a654:	bfd5                	j	1c00a648 <pi_partition_find_first+0x50>

1c00a656 <flash_partition_table_verify>:

pi_err_t flash_partition_table_verify(const flash_partition_table_t *table)
{
    const flash_partition_info_t *part;
    const flash_partition_table_header_t *header = &table->header;
    const flash_partition_info_t *partition_table = table->partitions;
1c00a656:	514c                	lw	a1,36(a0)
    MD5_CTX context;
    uint8_t digest[16];

    // Check magic number for each partition
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00a658:	00754683          	lbu	a3,7(a0)
1c00a65c:	4781                	li	a5,0
1c00a65e:	872e                	mv	a4,a1
    {
        part = partition_table + num_parts;
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c00a660:	1ba00613          	li	a2,442
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00a664:	04f69663          	bne	a3,a5,1c00a6b0 <flash_partition_table_verify+0x5a>
        {
            return PI_ERR_INVALID_STATE;
        }
    }

    if (header->crc_flags)
1c00a668:	00854783          	lbu	a5,8(a0)
1c00a66c:	cfa9                	beqz	a5,1c00a6c6 <flash_partition_table_verify+0x70>
{
1c00a66e:	7155                	addi	sp,sp,-208
1c00a670:	c5a2                	sw	s0,200(sp)
1c00a672:	842a                	mv	s0,a0
    {
        MD5_Init(&context);
1c00a674:	1028                	addi	a0,sp,40
{
1c00a676:	c786                	sw	ra,204(sp)
        MD5_Init(&context);
1c00a678:	c62e                	sw	a1,12(sp)
1c00a67a:	2bb000ef          	jal	ra,1c00b134 <MD5_Init>
        MD5_Update(&context, (unsigned char *) partition_table,
                   header->nbr_of_entries * sizeof(flash_partition_info_t));
1c00a67e:	00744603          	lbu	a2,7(s0)
        MD5_Update(&context, (unsigned char *) partition_table,
1c00a682:	45b2                	lw	a1,12(sp)
1c00a684:	1028                	addi	a0,sp,40
1c00a686:	0616                	slli	a2,a2,0x5
1c00a688:	2df000ef          	jal	ra,1c00b166 <MD5_Update>
        MD5_Final(digest, &context);
1c00a68c:	102c                	addi	a1,sp,40
1c00a68e:	0828                	addi	a0,sp,24
1c00a690:	373000ef          	jal	ra,1c00b202 <MD5_Final>

        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c00a694:	4641                	li	a2,16
1c00a696:	082c                	addi	a1,sp,24
1c00a698:	01440513          	addi	a0,s0,20
1c00a69c:	2b4040ef          	jal	ra,1c00e950 <strncmp>
        {
            return PI_ERR_INVALID_CRC;
1c00a6a0:	47a1                	li	a5,8
        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c00a6a2:	e111                	bnez	a0,1c00a6a6 <flash_partition_table_verify+0x50>
        }
    }

    return PI_OK;
1c00a6a4:	4781                	li	a5,0
}
1c00a6a6:	40be                	lw	ra,204(sp)
1c00a6a8:	442e                	lw	s0,200(sp)
1c00a6aa:	853e                	mv	a0,a5
1c00a6ac:	6169                	addi	sp,sp,208
1c00a6ae:	8082                	ret
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c00a6b0:	0207580b          	p.lhu	a6,32(a4!)
1c00a6b4:	00c81663          	bne	a6,a2,1c00a6c0 <flash_partition_table_verify+0x6a>
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00a6b8:	0785                	addi	a5,a5,1
1c00a6ba:	0ff7f793          	andi	a5,a5,255
1c00a6be:	b75d                	j	1c00a664 <flash_partition_table_verify+0xe>
            return PI_ERR_INVALID_STATE;
1c00a6c0:	478d                	li	a5,3
}
1c00a6c2:	853e                	mv	a0,a5
1c00a6c4:	8082                	ret
    return PI_OK;
1c00a6c6:	4781                	li	a5,0
1c00a6c8:	bfed                	j	1c00a6c2 <flash_partition_table_verify+0x6c>

1c00a6ca <flash_partition_table_load>:

pi_err_t flash_partition_table_load(pi_device_t *flash, const flash_partition_table_t **partition_table,
                                    uint8_t *nbr_of_entries)
{
1c00a6ca:	1101                	addi	sp,sp,-32
1c00a6cc:	ca26                	sw	s1,20(sp)
1c00a6ce:	ce06                	sw	ra,28(sp)
1c00a6d0:	cc22                	sw	s0,24(sp)
1c00a6d2:	c84a                	sw	s2,16(sp)
1c00a6d4:	c64e                	sw	s3,12(sp)
1c00a6d6:	c452                	sw	s4,8(sp)
1c00a6d8:	c256                	sw	s5,4(sp)
    flash_partition_info_t *partitions = NULL;

    if(partition_table == NULL)
    {
        PARTITION_TRACE_ERR("Table argument is NULL");
        return PI_ERR_INVALID_ARG;
1c00a6da:	4489                	li	s1,2
    if(partition_table == NULL)
1c00a6dc:	c9e1                	beqz	a1,1c00a7ac <flash_partition_table_load+0xe2>
1c00a6de:	892a                	mv	s2,a0
    }

// Alloc table containing header
    table = pi_l2_malloc(sizeof(*table));
1c00a6e0:	02800513          	li	a0,40
1c00a6e4:	89b2                	mv	s3,a2
1c00a6e6:	8aae                	mv	s5,a1
1c00a6e8:	075010ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c00a6ec:	842a                	mv	s0,a0
    if(table == NULL)
    {
        PARTITION_TRACE_ERR("Unable to allocate partition table in L2.");
        rc = PI_ERR_L2_NO_MEM;
1c00a6ee:	20100493          	li	s1,513
    if(table == NULL)
1c00a6f2:	cd4d                	beqz	a0,1c00a7ac <flash_partition_table_load+0xe2>
        goto mount_error;
    }

    table_offset_l2 = pi_l2_malloc(sizeof(*table_offset_l2));
1c00a6f4:	4511                	li	a0,4
1c00a6f6:	067010ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c00a6fa:	84aa                	mv	s1,a0
    if(table_offset_l2 == NULL)
1c00a6fc:	c171                	beqz	a0,1c00a7c0 <flash_partition_table_load+0xf6>
  api->read(device, pi_flash_addr, data, size);
1c00a6fe:	00092783          	lw	a5,0(s2)
1c00a702:	862a                	mv	a2,a0
1c00a704:	4581                	li	a1,0
1c00a706:	5b9c                	lw	a5,48(a5)
1c00a708:	4691                	li	a3,4
1c00a70a:	854a                	mv	a0,s2
1c00a70c:	9782                	jalr	a5
        rc = PI_ERR_L2_NO_MEM;
        goto mount_error;
    }

    pi_flash_read(flash, 0, table_offset_l2, 4);
    if(*table_offset_l2 == 0)
1c00a70e:	0004aa03          	lw	s4,0(s1)

    return PI_OK;

    mount_error:
    if(table_offset_l2)
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00a712:	4591                	li	a1,4
1c00a714:	8526                	mv	a0,s1
    if(*table_offset_l2 == 0)
1c00a716:	0a0a0863          	beqz	s4,1c00a7c6 <flash_partition_table_load+0xfc>
    pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00a71a:	051010ef          	jal	ra,1c00bf6a <pi_l2_free>
1c00a71e:	00092783          	lw	a5,0(s2)
1c00a722:	02000693          	li	a3,32
1c00a726:	00440613          	addi	a2,s0,4
1c00a72a:	5b9c                	lw	a5,48(a5)
1c00a72c:	85d2                	mv	a1,s4
1c00a72e:	854a                	mv	a0,s2
1c00a730:	9782                	jalr	a5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c00a732:	00445703          	lhu	a4,4(s0)
1c00a736:	2ba00793          	li	a5,698
        rc = PI_ERR_NOT_FOUND;
1c00a73a:	4495                	li	s1,5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c00a73c:	04f71763          	bne	a4,a5,1c00a78a <flash_partition_table_load+0xc0>
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c00a740:	00644783          	lbu	a5,6(s0)
        rc = PI_ERR_INVALID_VERSION;
1c00a744:	44a5                	li	s1,9
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c00a746:	0417b263          	p.bneimm	a5,1,1c00a78a <flash_partition_table_load+0xc0>
    table->partitions = pi_l2_malloc(sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a74a:	00744503          	lbu	a0,7(s0)
1c00a74e:	0516                	slli	a0,a0,0x5
1c00a750:	00d010ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c00a754:	d048                	sw	a0,36(s0)
1c00a756:	862a                	mv	a2,a0
    if(table->partitions == NULL)
1c00a758:	c525                	beqz	a0,1c00a7c0 <flash_partition_table_load+0xf6>
1c00a75a:	00092783          	lw	a5,0(s2)
                  sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a75e:	00744683          	lbu	a3,7(s0)
1c00a762:	020a0593          	addi	a1,s4,32
1c00a766:	5b9c                	lw	a5,48(a5)
1c00a768:	0696                	slli	a3,a3,0x5
1c00a76a:	854a                	mv	a0,s2
1c00a76c:	9782                	jalr	a5
    if(table->header.crc_flags)
1c00a76e:	00844783          	lbu	a5,8(s0)
1c00a772:	c395                	beqz	a5,1c00a796 <flash_partition_table_load+0xcc>
        rc = flash_partition_table_verify(table);
1c00a774:	8522                	mv	a0,s0
1c00a776:	ee1ff0ef          	jal	ra,1c00a656 <flash_partition_table_verify>
1c00a77a:	84aa                	mv	s1,a0
        if(rc != PI_OK)
1c00a77c:	cd09                	beqz	a0,1c00a796 <flash_partition_table_load+0xcc>
            pi_l2_free(table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a77e:	00744583          	lbu	a1,7(s0)
1c00a782:	5048                	lw	a0,36(s0)
1c00a784:	0596                	slli	a1,a1,0x5
1c00a786:	7e4010ef          	jal	ra,1c00bf6a <pi_l2_free>
    if(table)
        pi_l2_free(table, sizeof(*table));
1c00a78a:	02800593          	li	a1,40
1c00a78e:	8522                	mv	a0,s0
1c00a790:	7da010ef          	jal	ra,1c00bf6a <pi_l2_free>
1c00a794:	a821                	j	1c00a7ac <flash_partition_table_load+0xe2>
    table->flash = flash;
1c00a796:	01242023          	sw	s2,0(s0)
    *partition_table = table;
1c00a79a:	008aa023          	sw	s0,0(s5)
    return PI_OK;
1c00a79e:	4481                	li	s1,0
    if(nbr_of_entries)
1c00a7a0:	00098663          	beqz	s3,1c00a7ac <flash_partition_table_load+0xe2>
        *nbr_of_entries = table->header.nbr_of_entries;
1c00a7a4:	00744783          	lbu	a5,7(s0)
1c00a7a8:	00f98023          	sb	a5,0(s3)
    return rc;
}
1c00a7ac:	40f2                	lw	ra,28(sp)
1c00a7ae:	4462                	lw	s0,24(sp)
1c00a7b0:	8526                	mv	a0,s1
1c00a7b2:	4942                	lw	s2,16(sp)
1c00a7b4:	44d2                	lw	s1,20(sp)
1c00a7b6:	49b2                	lw	s3,12(sp)
1c00a7b8:	4a22                	lw	s4,8(sp)
1c00a7ba:	4a92                	lw	s5,4(sp)
1c00a7bc:	6105                	addi	sp,sp,32
1c00a7be:	8082                	ret
        rc = PI_ERR_L2_NO_MEM;
1c00a7c0:	20100493          	li	s1,513
1c00a7c4:	b7d9                	j	1c00a78a <flash_partition_table_load+0xc0>
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00a7c6:	7a4010ef          	jal	ra,1c00bf6a <pi_l2_free>
        rc = PI_ERR_NOT_FOUND;
1c00a7ca:	4495                	li	s1,5
1c00a7cc:	bf7d                	j	1c00a78a <flash_partition_table_load+0xc0>

1c00a7ce <flash_partition_table_free>:

void flash_partition_table_free(const flash_partition_table_t *table)
{
1c00a7ce:	1141                	addi	sp,sp,-16
1c00a7d0:	c422                	sw	s0,8(sp)
1c00a7d2:	c606                	sw	ra,12(sp)
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a7d4:	00754583          	lbu	a1,7(a0)
{
1c00a7d8:	842a                	mv	s0,a0
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a7da:	5148                	lw	a0,36(a0)
1c00a7dc:	0596                	slli	a1,a1,0x5
1c00a7de:	78c010ef          	jal	ra,1c00bf6a <pi_l2_free>
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00a7e2:	8522                	mv	a0,s0
}
1c00a7e4:	4422                	lw	s0,8(sp)
1c00a7e6:	40b2                	lw	ra,12(sp)
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00a7e8:	02800593          	li	a1,40
}
1c00a7ec:	0141                	addi	sp,sp,16
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00a7ee:	77c0106f          	j	1c00bf6a <pi_l2_free>

1c00a7f2 <flash_partition_find_first>:


const flash_partition_info_t *flash_partition_find_first(const flash_partition_table_t *table, pi_partition_type_t type,
                                                         pi_partition_subtype_t subtype, const char *label)
{
1c00a7f2:	7179                	addi	sp,sp,-48
1c00a7f4:	d226                	sw	s1,36(sp)
1c00a7f6:	d04a                	sw	s2,32(sp)
1c00a7f8:	cc52                	sw	s4,24(sp)
1c00a7fa:	ca56                	sw	s5,20(sp)
1c00a7fc:	d606                	sw	ra,44(sp)
1c00a7fe:	d422                	sw	s0,40(sp)
1c00a800:	ce4e                	sw	s3,28(sp)
    const flash_partition_info_t *part = NULL;

    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c00a802:	00754983          	lbu	s3,7(a0)
{
1c00a806:	892a                	mv	s2,a0
1c00a808:	8a2e                	mv	s4,a1
1c00a80a:	8ab2                	mv	s5,a2
    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c00a80c:	4481                	li	s1,0
1c00a80e:	0ff4f793          	andi	a5,s1,255
1c00a812:	0137ed63          	bltu	a5,s3,1c00a82c <flash_partition_find_first+0x3a>
        if(label == NULL)
            return part;
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
            return part;
    }
    return NULL;
1c00a816:	4401                	li	s0,0
}
1c00a818:	8522                	mv	a0,s0
1c00a81a:	50b2                	lw	ra,44(sp)
1c00a81c:	5422                	lw	s0,40(sp)
1c00a81e:	5492                	lw	s1,36(sp)
1c00a820:	5902                	lw	s2,32(sp)
1c00a822:	49f2                	lw	s3,28(sp)
1c00a824:	4a62                	lw	s4,24(sp)
1c00a826:	4ad2                	lw	s5,20(sp)
1c00a828:	6145                	addi	sp,sp,48
1c00a82a:	8082                	ret
        part = table->partitions + i;
1c00a82c:	02492783          	lw	a5,36(s2)
1c00a830:	00549413          	slli	s0,s1,0x5
1c00a834:	943e                	add	s0,s0,a5
        if(part->type != type || part->subtype != subtype)
1c00a836:	00244783          	lbu	a5,2(s0)
1c00a83a:	03479063          	bne	a5,s4,1c00a85a <flash_partition_find_first+0x68>
1c00a83e:	00344783          	lbu	a5,3(s0)
1c00a842:	01579c63          	bne	a5,s5,1c00a85a <flash_partition_find_first+0x68>
        if(label == NULL)
1c00a846:	dae9                	beqz	a3,1c00a818 <flash_partition_find_first+0x26>
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
1c00a848:	8536                	mv	a0,a3
1c00a84a:	4641                	li	a2,16
1c00a84c:	00c40593          	addi	a1,s0,12
1c00a850:	c636                	sw	a3,12(sp)
1c00a852:	0fe040ef          	jal	ra,1c00e950 <strncmp>
1c00a856:	46b2                	lw	a3,12(sp)
1c00a858:	d161                	beqz	a0,1c00a818 <flash_partition_find_first+0x26>
1c00a85a:	0485                	addi	s1,s1,1
1c00a85c:	bf4d                	j	1c00a80e <flash_partition_find_first+0x1c>

1c00a85e <body>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c00a85e:	715d                	addi	sp,sp,-80
	MD5_u32plus a, b, c, d;
	MD5_u32plus saved_a, saved_b, saved_c, saved_d;

	ptr = (const unsigned char *)data;

	a = ctx->a;
1c00a860:	00852283          	lw	t0,8(a0)
1c00a864:	fc060613          	addi	a2,a2,-64
{
1c00a868:	de52                	sw	s4,60(sp)
1c00a86a:	dc56                	sw	s5,56(sp)
1c00a86c:	8219                	srli	a2,a2,0x6
	b = ctx->b;
1c00a86e:	00c52803          	lw	a6,12(a0)
	c = ctx->c;
1c00a872:	01052a03          	lw	s4,16(a0)
	d = ctx->d;
1c00a876:	01452a83          	lw	s5,20(a0)
1c00a87a:	0605                	addi	a2,a2,1
{
1c00a87c:	c6a2                	sw	s0,76(sp)
1c00a87e:	c4a6                	sw	s1,72(sp)
1c00a880:	c2ca                	sw	s2,68(sp)
1c00a882:	c0ce                	sw	s3,64(sp)
1c00a884:	da5a                	sw	s6,52(sp)
1c00a886:	d85e                	sw	s7,48(sp)
1c00a888:	d662                	sw	s8,44(sp)
1c00a88a:	d466                	sw	s9,40(sp)
1c00a88c:	d26a                	sw	s10,36(sp)
1c00a88e:	d06e                	sw	s11,32(sp)
1c00a890:	87aa                	mv	a5,a0
	a = ctx->a;
1c00a892:	cc16                	sw	t0,24(sp)
1c00a894:	ce32                	sw	a2,28(sp)
1c00a896:	4362                	lw	t1,24(sp)
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c00a898:	0005a983          	lw	s3,0(a1)
1c00a89c:	d76aa537          	lui	a0,0xd76aa
1c00a8a0:	47850513          	addi	a0,a0,1144 # d76aa478 <pulp__FC+0xd76aa479>
1c00a8a4:	00a30733          	add	a4,t1,a0
1c00a8a8:	013706b3          	add	a3,a4,s3
1c00a8ac:	015a4733          	xor	a4,s4,s5
1c00a8b0:	01077733          	and	a4,a4,a6
1c00a8b4:	0537ac23          	sw	s3,88(a5)
1c00a8b8:	01574733          	xor	a4,a4,s5
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00a8bc:	41d0                	lw	a2,4(a1)
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c00a8be:	9736                	add	a4,a4,a3
1c00a8c0:	e8c7b6b7          	lui	a3,0xe8c7b
1c00a8c4:	4365                	li	t1,25
1c00a8c6:	75668693          	addi	a3,a3,1878 # e8c7b756 <pulp__FC+0xe8c7b757>
1c00a8ca:	00da8e33          	add	t3,s5,a3
1c00a8ce:	08675733          	p.ror	a4,a4,t1
1c00a8d2:	9742                	add	a4,a4,a6
1c00a8d4:	00ce06b3          	add	a3,t3,a2
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00a8d8:	01484e33          	xor	t3,a6,s4
1c00a8dc:	cff0                	sw	a2,92(a5)
1c00a8de:	00ee7e33          	and	t3,t3,a4
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a8e2:	0085a883          	lw	a7,8(a1)
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00a8e6:	014e4e33          	xor	t3,t3,s4
1c00a8ea:	24207bb7          	lui	s7,0x24207
1c00a8ee:	4d51                	li	s10,20
1c00a8f0:	9e36                	add	t3,t3,a3
1c00a8f2:	0dbb8b93          	addi	s7,s7,219 # 242070db <__l2_end+0x81f6393>
1c00a8f6:	017a0533          	add	a0,s4,s7
1c00a8fa:	09ae5e33          	p.ror	t3,t3,s10
1c00a8fe:	9e3a                	add	t3,t3,a4
1c00a900:	011506b3          	add	a3,a0,a7
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a904:	00e84533          	xor	a0,a6,a4
1c00a908:	0717a023          	sw	a7,96(a5)
1c00a90c:	01c57533          	and	a0,a0,t3
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00a910:	00c5a283          	lw	t0,12(a1)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a914:	01054533          	xor	a0,a0,a6
1c00a918:	c1bddc37          	lui	s8,0xc1bdd
1c00a91c:	4cbd                	li	s9,15
1c00a91e:	9536                	add	a0,a0,a3
1c00a920:	eeec0c13          	addi	s8,s8,-274 # c1bdceee <pulp__FC+0xc1bdceef>
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00a924:	c432                	sw	a2,8(sp)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a926:	09955533          	p.ror	a0,a0,s9
1c00a92a:	01880633          	add	a2,a6,s8
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00a92e:	0657a223          	sw	t0,100(a5)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a932:	9572                	add	a0,a0,t3
1c00a934:	005606b3          	add	a3,a2,t0
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00a938:	01c74633          	xor	a2,a4,t3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00a93c:	0105ad83          	lw	s11,16(a1)
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00a940:	8e69                	and	a2,a2,a0
1c00a942:	8e39                	xor	a2,a2,a4
1c00a944:	f57c1eb7          	lui	t4,0xf57c1
1c00a948:	4c29                	li	s8,10
1c00a94a:	9636                	add	a2,a2,a3
1c00a94c:	fafe8e93          	addi	t4,t4,-81 # f57c0faf <pulp__FC+0xf57c0fb0>
1c00a950:	01dd86b3          	add	a3,s11,t4
1c00a954:	09865633          	p.ror	a2,a2,s8
1c00a958:	962a                	add	a2,a2,a0
1c00a95a:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00a95c:	00ae46b3          	xor	a3,t3,a0
1c00a960:	07b7a423          	sw	s11,104(a5)
1c00a964:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00a966:	49c0                	lw	s0,20(a1)
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00a968:	01c6c6b3          	xor	a3,a3,t3
1c00a96c:	9736                	add	a4,a4,a3
1c00a96e:	4787c6b7          	lui	a3,0x4787c
1c00a972:	62a68693          	addi	a3,a3,1578 # 4787c62a <__l2_end+0x2b86b8e2>
1c00a976:	00d40fb3          	add	t6,s0,a3
1c00a97a:	08675733          	p.ror	a4,a4,t1
1c00a97e:	9732                	add	a4,a4,a2
1c00a980:	9e7e                	add	t3,t3,t6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00a982:	00c54fb3          	xor	t6,a0,a2
1c00a986:	00efffb3          	and	t6,t6,a4
1c00a98a:	d7e0                	sw	s0,108(a5)
1c00a98c:	00afcfb3          	xor	t6,t6,a0
1c00a990:	9ff2                	add	t6,t6,t3
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a992:	0185ae03          	lw	t3,24(a1)
1c00a996:	a8304bb7          	lui	s7,0xa8304
1c00a99a:	613b8b93          	addi	s7,s7,1555 # a8304613 <pulp__FC+0xa8304614>
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a99e:	c646                	sw	a7,12(sp)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00a9a0:	09afdfb3          	p.ror	t6,t6,s10
1c00a9a4:	017e08b3          	add	a7,t3,s7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a9a8:	07c7a823          	sw	t3,112(a5)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00a9ac:	9fba                	add	t6,t6,a4
1c00a9ae:	9546                	add	a0,a0,a7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a9b0:	00e648b3          	xor	a7,a2,a4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00a9b4:	01c5a903          	lw	s2,28(a1)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a9b8:	01f8f8b3          	and	a7,a7,t6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00a9bc:	c86e                	sw	s11,16(sp)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a9be:	00c8c8b3          	xor	a7,a7,a2
1c00a9c2:	fd469db7          	lui	s11,0xfd469
1c00a9c6:	98aa                	add	a7,a7,a0
1c00a9c8:	501d8d93          	addi	s11,s11,1281 # fd469501 <pulp__FC+0xfd469502>
1c00a9cc:	01b906b3          	add	a3,s2,s11
1c00a9d0:	0998d8b3          	p.ror	a7,a7,s9
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00a9d4:	0727aa23          	sw	s2,116(a5)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a9d8:	98fe                	add	a7,a7,t6
1c00a9da:	9636                	add	a2,a2,a3
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00a9dc:	01f746b3          	xor	a3,a4,t6
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00a9e0:	0205af03          	lw	t5,32(a1)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00a9e4:	0116f6b3          	and	a3,a3,a7
1c00a9e8:	8eb9                	xor	a3,a3,a4
1c00a9ea:	6980aeb7          	lui	t4,0x6980a
1c00a9ee:	9636                	add	a2,a2,a3
1c00a9f0:	8d8e8e93          	addi	t4,t4,-1832 # 698098d8 <__l2_end+0x4d7f8b90>
1c00a9f4:	01df06b3          	add	a3,t5,t4
1c00a9f8:	09865633          	p.ror	a2,a2,s8
1c00a9fc:	9646                	add	a2,a2,a7
1c00a9fe:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00aa00:	011fc6b3          	xor	a3,t6,a7
1c00aa04:	07e7ac23          	sw	t5,120(a5)
1c00aa08:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00aa0a:	51c8                	lw	a0,36(a1)
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00aa0c:	01f6c6b3          	xor	a3,a3,t6
1c00aa10:	96ba                	add	a3,a3,a4
1c00aa12:	8b44f737          	lui	a4,0x8b44f
1c00aa16:	7af70713          	addi	a4,a4,1967 # 8b44f7af <pulp__FC+0x8b44f7b0>
1c00aa1a:	00e504b3          	add	s1,a0,a4
1c00aa1e:	0866d6b3          	p.ror	a3,a3,t1
1c00aa22:	96b2                	add	a3,a3,a2
1c00aa24:	9fa6                	add	t6,t6,s1
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00aa26:	00c8c4b3          	xor	s1,a7,a2
1c00aa2a:	8cf5                	and	s1,s1,a3
1c00aa2c:	dfe8                	sw	a0,124(a5)
1c00aa2e:	0114c4b3          	xor	s1,s1,a7
1c00aa32:	94fe                	add	s1,s1,t6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00aa34:	0285af83          	lw	t6,40(a1)
1c00aa38:	7bd9                	lui	s7,0xffff6
1c00aa3a:	bb1b8b93          	addi	s7,s7,-1103 # ffff5bb1 <pulp__FC+0xffff5bb2>
1c00aa3e:	017f8eb3          	add	t4,t6,s7
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00aa42:	09a4d4b3          	p.ror	s1,s1,s10
1c00aa46:	94b6                	add	s1,s1,a3
1c00aa48:	98f6                	add	a7,a7,t4
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00aa4a:	00d64eb3          	xor	t4,a2,a3
1c00aa4e:	009efeb3          	and	t4,t4,s1
1c00aa52:	09f7a023          	sw	t6,128(a5)
1c00aa56:	00ceceb3          	xor	t4,t4,a2
1c00aa5a:	9ec6                	add	t4,t4,a7
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00aa5c:	02c5a883          	lw	a7,44(a1)
1c00aa60:	895cddb7          	lui	s11,0x895cd
1c00aa64:	7bed8d93          	addi	s11,s11,1982 # 895cd7be <pulp__FC+0x895cd7bf>
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00aa68:	ca2a                	sw	a0,20(sp)
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00aa6a:	099edeb3          	p.ror	t4,t4,s9
1c00aa6e:	01b88533          	add	a0,a7,s11
1c00aa72:	9ea6                	add	t4,t4,s1
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00aa74:	0917a223          	sw	a7,132(a5)
1c00aa78:	962a                	add	a2,a2,a0
1c00aa7a:	0096c533          	xor	a0,a3,s1
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00aa7e:	0305a383          	lw	t2,48(a1)
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00aa82:	01d57533          	and	a0,a0,t4
1c00aa86:	8d35                	xor	a0,a0,a3
1c00aa88:	6b901737          	lui	a4,0x6b901
1c00aa8c:	9532                	add	a0,a0,a2
1c00aa8e:	12270713          	addi	a4,a4,290 # 6b901122 <__l2_end+0x4f8f03da>
1c00aa92:	00e38633          	add	a2,t2,a4
1c00aa96:	09855533          	p.ror	a0,a0,s8
1c00aa9a:	9576                	add	a0,a0,t4
1c00aa9c:	96b2                	add	a3,a3,a2
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00aa9e:	01d4c633          	xor	a2,s1,t4
1c00aaa2:	8e69                	and	a2,a2,a0
1c00aaa4:	8e25                	xor	a2,a2,s1
1c00aaa6:	0877a423          	sw	t2,136(a5)
1c00aaaa:	96b2                	add	a3,a3,a2
1c00aaac:	0866d6b3          	p.ror	a3,a3,t1
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00aab0:	0345a303          	lw	t1,52(a1)
1c00aab4:	fd987db7          	lui	s11,0xfd987
1c00aab8:	193d8d93          	addi	s11,s11,403 # fd987193 <pulp__FC+0xfd987194>
1c00aabc:	01b30bb3          	add	s7,t1,s11
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00aac0:	00d50733          	add	a4,a0,a3
1c00aac4:	94de                	add	s1,s1,s7
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00aac6:	00aecbb3          	xor	s7,t4,a0
1c00aaca:	00ebfbb3          	and	s7,s7,a4
1c00aace:	01dbcbb3          	xor	s7,s7,t4
1c00aad2:	94de                	add	s1,s1,s7
1c00aad4:	0867a623          	sw	t1,140(a5)
1c00aad8:	09a4dbb3          	p.ror	s7,s1,s10
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00aadc:	5d84                	lw	s1,56(a1)
1c00aade:	a6794637          	lui	a2,0xa6794
1c00aae2:	38e60613          	addi	a2,a2,910 # a679438e <pulp__FC+0xa679438f>
1c00aae6:	00c48b33          	add	s6,s1,a2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00aaea:	9bba                	add	s7,s7,a4
1c00aaec:	9eda                	add	t4,t4,s6
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00aaee:	00e54b33          	xor	s6,a0,a4
1c00aaf2:	017b7b33          	and	s6,s6,s7
1c00aaf6:	00ab4b33          	xor	s6,s6,a0
1c00aafa:	0897a823          	sw	s1,144(a5)
1c00aafe:	9eda                	add	t4,t4,s6
1c00ab00:	099edb33          	p.ror	s6,t4,s9
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00ab04:	03c5ae83          	lw	t4,60(a1)
1c00ab08:	49b416b7          	lui	a3,0x49b41
1c00ab0c:	82168693          	addi	a3,a3,-2015 # 49b40821 <__l2_end+0x2db2fad9>
1c00ab10:	00de8633          	add	a2,t4,a3
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00ab14:	9b5e                	add	s6,s6,s7
1c00ab16:	9532                	add	a0,a0,a2
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00ab18:	01774633          	xor	a2,a4,s7
1c00ab1c:	01667633          	and	a2,a2,s6
1c00ab20:	8e39                	xor	a2,a2,a4
1c00ab22:	9532                	add	a0,a0,a2
1c00ab24:	09855633          	p.ror	a2,a0,s8
1c00ab28:	4c22                	lw	s8,8(sp)
1c00ab2a:	f61e2d37          	lui	s10,0xf61e2
1c00ab2e:	562d0d13          	addi	s10,s10,1378 # f61e2562 <pulp__FC+0xf61e2563>
1c00ab32:	965a                	add	a2,a2,s6
1c00ab34:	01ac06b3          	add	a3,s8,s10
1c00ab38:	9736                	add	a4,a4,a3

/* Round 2 */
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
1c00ab3a:	00cb46b3          	xor	a3,s6,a2
1c00ab3e:	0176f6b3          	and	a3,a3,s7
1c00ab42:	0166c6b3          	xor	a3,a3,s6
1c00ab46:	4ded                	li	s11,27
1c00ab48:	96ba                	add	a3,a3,a4
1c00ab4a:	c040b537          	lui	a0,0xc040b
1c00ab4e:	09b6d6b3          	p.ror	a3,a3,s11
1c00ab52:	34050513          	addi	a0,a0,832 # c040b340 <pulp__FC+0xc040b341>
1c00ab56:	96b2                	add	a3,a3,a2
1c00ab58:	00ae0733          	add	a4,t3,a0
1c00ab5c:	9bba                	add	s7,s7,a4
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
1c00ab5e:	00d64733          	xor	a4,a2,a3
1c00ab62:	01677733          	and	a4,a4,s6
1c00ab66:	8f31                	xor	a4,a4,a2
1c00ab68:	4d5d                	li	s10,23
1c00ab6a:	975e                	add	a4,a4,s7
1c00ab6c:	265e6bb7          	lui	s7,0x265e6
1c00ab70:	09a75733          	p.ror	a4,a4,s10
1c00ab74:	a51b8b93          	addi	s7,s7,-1455 # 265e5a51 <__l2_end+0xa5d4d09>
1c00ab78:	9736                	add	a4,a4,a3
1c00ab7a:	01788533          	add	a0,a7,s7
1c00ab7e:	955a                	add	a0,a0,s6
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
1c00ab80:	00e6cb33          	xor	s6,a3,a4
1c00ab84:	00cb7b33          	and	s6,s6,a2
1c00ab88:	00db4b33          	xor	s6,s6,a3
1c00ab8c:	4cc9                	li	s9,18
1c00ab8e:	9b2a                	add	s6,s6,a0
1c00ab90:	e9b6cc37          	lui	s8,0xe9b6c
1c00ab94:	099b5b33          	p.ror	s6,s6,s9
1c00ab98:	7aac0c13          	addi	s8,s8,1962 # e9b6c7aa <pulp__FC+0xe9b6c7ab>
1c00ab9c:	9b3a                	add	s6,s6,a4
1c00ab9e:	01898533          	add	a0,s3,s8
1c00aba2:	962a                	add	a2,a2,a0
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
1c00aba4:	01674533          	xor	a0,a4,s6
1c00aba8:	8d75                	and	a0,a0,a3
1c00abaa:	8d39                	xor	a0,a0,a4
1c00abac:	4c31                	li	s8,12
1c00abae:	9532                	add	a0,a0,a2
1c00abb0:	d62f1bb7          	lui	s7,0xd62f1
1c00abb4:	09855533          	p.ror	a0,a0,s8
1c00abb8:	05db8b93          	addi	s7,s7,93 # d62f105d <pulp__FC+0xd62f105e>
1c00abbc:	955a                	add	a0,a0,s6
1c00abbe:	01740633          	add	a2,s0,s7
1c00abc2:	96b2                	add	a3,a3,a2
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
1c00abc4:	00ab4633          	xor	a2,s6,a0
1c00abc8:	8e79                	and	a2,a2,a4
1c00abca:	01664633          	xor	a2,a2,s6
1c00abce:	96b2                	add	a3,a3,a2
1c00abd0:	02441bb7          	lui	s7,0x2441
1c00abd4:	09b6d6b3          	p.ror	a3,a3,s11
1c00abd8:	453b8b93          	addi	s7,s7,1107 # 2441453 <__L2+0x23c1453>
1c00abdc:	96aa                	add	a3,a3,a0
1c00abde:	017f8633          	add	a2,t6,s7
1c00abe2:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
1c00abe4:	00d54633          	xor	a2,a0,a3
1c00abe8:	01667633          	and	a2,a2,s6
1c00abec:	8e29                	xor	a2,a2,a0
1c00abee:	9732                	add	a4,a4,a2
1c00abf0:	d8a1ebb7          	lui	s7,0xd8a1e
1c00abf4:	09a75733          	p.ror	a4,a4,s10
1c00abf8:	681b8b93          	addi	s7,s7,1665 # d8a1e681 <pulp__FC+0xd8a1e682>
1c00abfc:	9736                	add	a4,a4,a3
1c00abfe:	017e8633          	add	a2,t4,s7
1c00ac02:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
1c00ac04:	00e6c633          	xor	a2,a3,a4
1c00ac08:	8e69                	and	a2,a2,a0
1c00ac0a:	8e35                	xor	a2,a2,a3
1c00ac0c:	4bc2                	lw	s7,16(sp)
1c00ac0e:	9b32                	add	s6,s6,a2
1c00ac10:	e7d40637          	lui	a2,0xe7d40
1c00ac14:	099b5b33          	p.ror	s6,s6,s9
1c00ac18:	bc860613          	addi	a2,a2,-1080 # e7d3fbc8 <pulp__FC+0xe7d3fbc9>
1c00ac1c:	9b3a                	add	s6,s6,a4
1c00ac1e:	965e                	add	a2,a2,s7
1c00ac20:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
1c00ac22:	01674633          	xor	a2,a4,s6
1c00ac26:	8e75                	and	a2,a2,a3
1c00ac28:	8e39                	xor	a2,a2,a4
1c00ac2a:	9532                	add	a0,a0,a2
1c00ac2c:	4652                	lw	a2,20(sp)
1c00ac2e:	21e1dbb7          	lui	s7,0x21e1d
1c00ac32:	09855533          	p.ror	a0,a0,s8
1c00ac36:	de6b8b93          	addi	s7,s7,-538 # 21e1cde6 <__l2_end+0x5e0c09e>
1c00ac3a:	955a                	add	a0,a0,s6
1c00ac3c:	9bb2                	add	s7,s7,a2
1c00ac3e:	96de                	add	a3,a3,s7
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
1c00ac40:	00ab4bb3          	xor	s7,s6,a0
1c00ac44:	00ebfbb3          	and	s7,s7,a4
1c00ac48:	016bcbb3          	xor	s7,s7,s6
1c00ac4c:	9bb6                	add	s7,s7,a3
1c00ac4e:	c3370637          	lui	a2,0xc3370
1c00ac52:	09bbdbb3          	p.ror	s7,s7,s11
1c00ac56:	7d660613          	addi	a2,a2,2006 # c33707d6 <pulp__FC+0xc33707d7>
1c00ac5a:	9baa                	add	s7,s7,a0
1c00ac5c:	9626                	add	a2,a2,s1
1c00ac5e:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
1c00ac60:	01754633          	xor	a2,a0,s7
1c00ac64:	01667633          	and	a2,a2,s6
1c00ac68:	8e29                	xor	a2,a2,a0
1c00ac6a:	963a                	add	a2,a2,a4
1c00ac6c:	f4d51737          	lui	a4,0xf4d51
1c00ac70:	09a65633          	p.ror	a2,a2,s10
1c00ac74:	d8770713          	addi	a4,a4,-633 # f4d50d87 <pulp__FC+0xf4d50d88>
1c00ac78:	965e                	add	a2,a2,s7
1c00ac7a:	9716                	add	a4,a4,t0
1c00ac7c:	9b3a                	add	s6,s6,a4
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
1c00ac7e:	00cbc733          	xor	a4,s7,a2
1c00ac82:	8f69                	and	a4,a4,a0
1c00ac84:	01774733          	xor	a4,a4,s7
1c00ac88:	9b3a                	add	s6,s6,a4
1c00ac8a:	455a1737          	lui	a4,0x455a1
1c00ac8e:	099b5b33          	p.ror	s6,s6,s9
1c00ac92:	4ed70713          	addi	a4,a4,1261 # 455a14ed <__l2_end+0x295907a5>
1c00ac96:	9b32                	add	s6,s6,a2
1c00ac98:	977a                	add	a4,a4,t5
1c00ac9a:	953a                	add	a0,a0,a4
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
1c00ac9c:	01664733          	xor	a4,a2,s6
1c00aca0:	01777733          	and	a4,a4,s7
1c00aca4:	8f31                	xor	a4,a4,a2
1c00aca6:	953a                	add	a0,a0,a4
1c00aca8:	a9e3f6b7          	lui	a3,0xa9e3f
1c00acac:	09855533          	p.ror	a0,a0,s8
1c00acb0:	90568693          	addi	a3,a3,-1787 # a9e3e905 <pulp__FC+0xa9e3e906>
1c00acb4:	955a                	add	a0,a0,s6
1c00acb6:	969a                	add	a3,a3,t1
1c00acb8:	9bb6                	add	s7,s7,a3
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
1c00acba:	00ab46b3          	xor	a3,s6,a0
1c00acbe:	8ef1                	and	a3,a3,a2
1c00acc0:	0166c6b3          	xor	a3,a3,s6
1c00acc4:	9bb6                	add	s7,s7,a3
1c00acc6:	09bbd6b3          	p.ror	a3,s7,s11
1c00acca:	4bb2                	lw	s7,12(sp)
1c00accc:	fcefa737          	lui	a4,0xfcefa
1c00acd0:	3f870713          	addi	a4,a4,1016 # fcefa3f8 <pulp__FC+0xfcefa3f9>
1c00acd4:	96aa                	add	a3,a3,a0
1c00acd6:	975e                	add	a4,a4,s7
1c00acd8:	963a                	add	a2,a2,a4
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
1c00acda:	00d54733          	xor	a4,a0,a3
1c00acde:	01677733          	and	a4,a4,s6
1c00ace2:	8f29                	xor	a4,a4,a0
1c00ace4:	963a                	add	a2,a2,a4
1c00ace6:	09a65733          	p.ror	a4,a2,s10
1c00acea:	676f0637          	lui	a2,0x676f0
1c00acee:	2d960613          	addi	a2,a2,729 # 676f02d9 <__l2_end+0x4b6df591>
1c00acf2:	9736                	add	a4,a4,a3
1c00acf4:	964a                	add	a2,a2,s2
1c00acf6:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
1c00acf8:	00e6c633          	xor	a2,a3,a4
1c00acfc:	8e69                	and	a2,a2,a0
1c00acfe:	8e35                	xor	a2,a2,a3
1c00ad00:	9b32                	add	s6,s6,a2
1c00ad02:	8d2a5637          	lui	a2,0x8d2a5
1c00ad06:	099b5b33          	p.ror	s6,s6,s9
1c00ad0a:	c8a60613          	addi	a2,a2,-886 # 8d2a4c8a <pulp__FC+0x8d2a4c8b>
1c00ad0e:	9b3a                	add	s6,s6,a4
1c00ad10:	961e                	add	a2,a2,t2
1c00ad12:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
1c00ad14:	01674633          	xor	a2,a4,s6
1c00ad18:	8e75                	and	a2,a2,a3
1c00ad1a:	8e39                	xor	a2,a2,a4
1c00ad1c:	9532                	add	a0,a0,a2
1c00ad1e:	09855533          	p.ror	a0,a0,s8
1c00ad22:	fffa4637          	lui	a2,0xfffa4
1c00ad26:	955a                	add	a0,a0,s6
1c00ad28:	94260613          	addi	a2,a2,-1726 # fffa3942 <pulp__FC+0xfffa3943>

/* Round 3 */
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
1c00ad2c:	00ab4bb3          	xor	s7,s6,a0
1c00ad30:	9622                	add	a2,a2,s0
1c00ad32:	96b2                	add	a3,a3,a2
1c00ad34:	00ebc633          	xor	a2,s7,a4
1c00ad38:	4cf1                	li	s9,28
1c00ad3a:	96b2                	add	a3,a3,a2
1c00ad3c:	8771f637          	lui	a2,0x8771f
1c00ad40:	0996d6b3          	p.ror	a3,a3,s9
1c00ad44:	68160613          	addi	a2,a2,1665 # 8771f681 <pulp__FC+0x8771f682>
1c00ad48:	96aa                	add	a3,a3,a0
1c00ad4a:	967a                	add	a2,a2,t5
1c00ad4c:	9732                	add	a4,a4,a2
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
1c00ad4e:	00dbc633          	xor	a2,s7,a3
1c00ad52:	4c55                	li	s8,21
1c00ad54:	963a                	add	a2,a2,a4
1c00ad56:	09865633          	p.ror	a2,a2,s8
1c00ad5a:	6d9d6737          	lui	a4,0x6d9d6
1c00ad5e:	9636                	add	a2,a2,a3
1c00ad60:	12270713          	addi	a4,a4,290 # 6d9d6122 <__l2_end+0x519c53da>
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
1c00ad64:	00c6cd33          	xor	s10,a3,a2
1c00ad68:	9746                	add	a4,a4,a7
1c00ad6a:	975a                	add	a4,a4,s6
1c00ad6c:	00ad4b33          	xor	s6,s10,a0
1c00ad70:	4bc1                	li	s7,16
1c00ad72:	975a                	add	a4,a4,s6
1c00ad74:	fde54b37          	lui	s6,0xfde54
1c00ad78:	09775733          	p.ror	a4,a4,s7
1c00ad7c:	80cb0b13          	addi	s6,s6,-2036 # fde5380c <pulp__FC+0xfde5380d>
1c00ad80:	9732                	add	a4,a4,a2
1c00ad82:	9b26                	add	s6,s6,s1
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
1c00ad84:	00ed4d33          	xor	s10,s10,a4
1c00ad88:	955a                	add	a0,a0,s6
1c00ad8a:	956a                	add	a0,a0,s10
1c00ad8c:	4b25                	li	s6,9
1c00ad8e:	09655533          	p.ror	a0,a0,s6
1c00ad92:	953a                	add	a0,a0,a4
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00ad94:	00a74d33          	xor	s10,a4,a0
1c00ad98:	4da2                	lw	s11,8(sp)
1c00ad9a:	c06a                	sw	s10,0(sp)
1c00ad9c:	a4befd37          	lui	s10,0xa4bef
1c00ada0:	a44d0d13          	addi	s10,s10,-1468 # a4beea44 <pulp__FC+0xa4beea45>
1c00ada4:	9dea                	add	s11,s11,s10
1c00ada6:	96ee                	add	a3,a3,s11
1c00ada8:	4d82                	lw	s11,0(sp)
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00adaa:	09d7aa23          	sw	t4,148(a5)
		a += saved_a;
		b += saved_b;
		c += saved_c;
		d += saved_d;

		ptr += 64;
1c00adae:	04058593          	addi	a1,a1,64
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00adb2:	00cdcd33          	xor	s10,s11,a2
1c00adb6:	96ea                	add	a3,a3,s10
1c00adb8:	4d42                	lw	s10,16(sp)
1c00adba:	4bdeddb7          	lui	s11,0x4bded
1c00adbe:	fa9d8d93          	addi	s11,s11,-87 # 4bdecfa9 <__l2_end+0x2fddc261>
1c00adc2:	9d6e                	add	s10,s10,s11
1c00adc4:	966a                	add	a2,a2,s10
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00adc6:	4d02                	lw	s10,0(sp)
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00adc8:	0996d6b3          	p.ror	a3,a3,s9
1c00adcc:	96aa                	add	a3,a3,a0
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00adce:	00dd4db3          	xor	s11,s10,a3
1c00add2:	966e                	add	a2,a2,s11
1c00add4:	09865633          	p.ror	a2,a2,s8
1c00add8:	f6bb5db7          	lui	s11,0xf6bb5
1c00addc:	9636                	add	a2,a2,a3
1c00adde:	b60d8d93          	addi	s11,s11,-1184 # f6bb4b60 <pulp__FC+0xf6bb4b61>
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
1c00ade2:	00c6cd33          	xor	s10,a3,a2
1c00ade6:	9dca                	add	s11,s11,s2
1c00ade8:	976e                	add	a4,a4,s11
1c00adea:	00ad4db3          	xor	s11,s10,a0
1c00adee:	976e                	add	a4,a4,s11
1c00adf0:	bebfcdb7          	lui	s11,0xbebfc
1c00adf4:	09775733          	p.ror	a4,a4,s7
1c00adf8:	c70d8d93          	addi	s11,s11,-912 # bebfbc70 <pulp__FC+0xbebfbc71>
1c00adfc:	9732                	add	a4,a4,a2
1c00adfe:	9dfe                	add	s11,s11,t6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
1c00ae00:	00ed4d33          	xor	s10,s10,a4
1c00ae04:	956e                	add	a0,a0,s11
1c00ae06:	956a                	add	a0,a0,s10
1c00ae08:	09655533          	p.ror	a0,a0,s6
1c00ae0c:	289b8d37          	lui	s10,0x289b8
1c00ae10:	953a                	add	a0,a0,a4
1c00ae12:	ec6d0d13          	addi	s10,s10,-314 # 289b7ec6 <__l2_end+0xc9a717e>
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
1c00ae16:	00a74db3          	xor	s11,a4,a0
1c00ae1a:	9d1a                	add	s10,s10,t1
1c00ae1c:	96ea                	add	a3,a3,s10
1c00ae1e:	00cdcd33          	xor	s10,s11,a2
1c00ae22:	9d36                	add	s10,s10,a3
1c00ae24:	eaa126b7          	lui	a3,0xeaa12
1c00ae28:	099d5d33          	p.ror	s10,s10,s9
1c00ae2c:	7fa68693          	addi	a3,a3,2042 # eaa127fa <pulp__FC+0xeaa127fb>
1c00ae30:	9d2a                	add	s10,s10,a0
1c00ae32:	96ce                	add	a3,a3,s3
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
1c00ae34:	01adcdb3          	xor	s11,s11,s10
1c00ae38:	9636                	add	a2,a2,a3
1c00ae3a:	966e                	add	a2,a2,s11
1c00ae3c:	09865633          	p.ror	a2,a2,s8
1c00ae40:	d4ef3db7          	lui	s11,0xd4ef3
1c00ae44:	966a                	add	a2,a2,s10
1c00ae46:	085d8d93          	addi	s11,s11,133 # d4ef3085 <pulp__FC+0xd4ef3086>
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
1c00ae4a:	00cd46b3          	xor	a3,s10,a2
1c00ae4e:	9d96                	add	s11,s11,t0
1c00ae50:	976e                	add	a4,a4,s11
1c00ae52:	00a6cdb3          	xor	s11,a3,a0
1c00ae56:	9dba                	add	s11,s11,a4
1c00ae58:	04882737          	lui	a4,0x4882
1c00ae5c:	097dddb3          	p.ror	s11,s11,s7
1c00ae60:	d0570713          	addi	a4,a4,-763 # 4881d05 <__L2+0x4801d05>
1c00ae64:	9db2                	add	s11,s11,a2
1c00ae66:	9772                	add	a4,a4,t3
1c00ae68:	953a                	add	a0,a0,a4
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
1c00ae6a:	01b6c6b3          	xor	a3,a3,s11
1c00ae6e:	96aa                	add	a3,a3,a0
1c00ae70:	0966d6b3          	p.ror	a3,a3,s6
1c00ae74:	96ee                	add	a3,a3,s11
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
1c00ae76:	00ddc533          	xor	a0,s11,a3
1c00ae7a:	4752                	lw	a4,20(sp)
1c00ae7c:	c02a                	sw	a0,0(sp)
1c00ae7e:	d9d4d537          	lui	a0,0xd9d4d
1c00ae82:	03950513          	addi	a0,a0,57 # d9d4d039 <pulp__FC+0xd9d4d03a>
1c00ae86:	972a                	add	a4,a4,a0
1c00ae88:	9d3a                	add	s10,s10,a4
1c00ae8a:	4702                	lw	a4,0(sp)
1c00ae8c:	00c74533          	xor	a0,a4,a2
1c00ae90:	9d2a                	add	s10,s10,a0
1c00ae92:	e6dba537          	lui	a0,0xe6dba
1c00ae96:	099d5cb3          	p.ror	s9,s10,s9
1c00ae9a:	9e550513          	addi	a0,a0,-1563 # e6db99e5 <pulp__FC+0xe6db99e6>
1c00ae9e:	9cb6                	add	s9,s9,a3
1c00aea0:	951e                	add	a0,a0,t2
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
1c00aea2:	01974733          	xor	a4,a4,s9
1c00aea6:	962a                	add	a2,a2,a0
1c00aea8:	963a                	add	a2,a2,a4
1c00aeaa:	09865c33          	p.ror	s8,a2,s8
1c00aeae:	1fa28737          	lui	a4,0x1fa28
1c00aeb2:	9c66                	add	s8,s8,s9
1c00aeb4:	cf870713          	addi	a4,a4,-776 # 1fa27cf8 <__l2_end+0x3a16fb0>
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
1c00aeb8:	018ccd33          	xor	s10,s9,s8
1c00aebc:	9776                	add	a4,a4,t4
1c00aebe:	9dba                	add	s11,s11,a4
1c00aec0:	00dd4733          	xor	a4,s10,a3
1c00aec4:	9dba                	add	s11,s11,a4
1c00aec6:	097ddbb3          	p.ror	s7,s11,s7
1c00aeca:	4db2                	lw	s11,12(sp)
1c00aecc:	c4ac5737          	lui	a4,0xc4ac5
1c00aed0:	66570713          	addi	a4,a4,1637 # c4ac5665 <pulp__FC+0xc4ac5666>
1c00aed4:	9be2                	add	s7,s7,s8
1c00aed6:	976e                	add	a4,a4,s11
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
1c00aed8:	017d4d33          	xor	s10,s10,s7
1c00aedc:	96ba                	add	a3,a3,a4
1c00aede:	f4292737          	lui	a4,0xf4292
1c00aee2:	96ea                	add	a3,a3,s10
1c00aee4:	24470713          	addi	a4,a4,580 # f4292244 <pulp__FC+0xf4292245>
1c00aee8:	0966db33          	p.ror	s6,a3,s6
1c00aeec:	99ba                	add	s3,s3,a4
1c00aeee:	9b5e                	add	s6,s6,s7
1c00aef0:	99e6                	add	s3,s3,s9
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
1c00aef2:	fffc4c93          	not	s9,s8
1c00aef6:	016cecb3          	or	s9,s9,s6
1c00aefa:	017cccb3          	xor	s9,s9,s7
1c00aefe:	432b0737          	lui	a4,0x432b0
1c00af02:	4669                	li	a2,26
1c00af04:	f9770713          	addi	a4,a4,-105 # 432aff97 <__l2_end+0x2729f24f>
1c00af08:	9cce                	add	s9,s9,s3
1c00af0a:	08ccdcb3          	p.ror	s9,s9,a2
1c00af0e:	993a                	add	s2,s2,a4
1c00af10:	9cda                	add	s9,s9,s6
1c00af12:	9962                	add	s2,s2,s8
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
1c00af14:	fffbcc13          	not	s8,s7
1c00af18:	019c6c33          	or	s8,s8,s9
1c00af1c:	016c4c33          	xor	s8,s8,s6
1c00af20:	ab942737          	lui	a4,0xab942
1c00af24:	4559                	li	a0,22
1c00af26:	9c4a                	add	s8,s8,s2
1c00af28:	3a770713          	addi	a4,a4,935 # ab9423a7 <pulp__FC+0xab9423a8>
1c00af2c:	08ac5c33          	p.ror	s8,s8,a0
1c00af30:	94ba                	add	s1,s1,a4
1c00af32:	9c66                	add	s8,s8,s9
1c00af34:	94de                	add	s1,s1,s7
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
1c00af36:	fffb4b93          	not	s7,s6
1c00af3a:	018bebb3          	or	s7,s7,s8
1c00af3e:	019bcbb3          	xor	s7,s7,s9
1c00af42:	fc93a737          	lui	a4,0xfc93a
1c00af46:	4945                	li	s2,17
1c00af48:	9ba6                	add	s7,s7,s1
1c00af4a:	03970713          	addi	a4,a4,57 # fc93a039 <pulp__FC+0xfc93a03a>
1c00af4e:	9722                	add	a4,a4,s0
1c00af50:	092bdbb3          	p.ror	s7,s7,s2
1c00af54:	9be2                	add	s7,s7,s8
1c00af56:	9b3a                	add	s6,s6,a4
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
1c00af58:	fffcc713          	not	a4,s9
1c00af5c:	01776733          	or	a4,a4,s7
1c00af60:	01874733          	xor	a4,a4,s8
1c00af64:	46ad                	li	a3,11
1c00af66:	975a                	add	a4,a4,s6
1c00af68:	08d75733          	p.ror	a4,a4,a3
1c00af6c:	655b6437          	lui	s0,0x655b6
1c00af70:	975e                	add	a4,a4,s7
1c00af72:	9c340413          	addi	s0,s0,-1597 # 655b59c3 <__l2_end+0x495a4c7b>
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
1c00af76:	fffc4493          	not	s1,s8
1c00af7a:	93a2                	add	t2,t2,s0
1c00af7c:	8cd9                	or	s1,s1,a4
1c00af7e:	9c9e                	add	s9,s9,t2
1c00af80:	0174c4b3          	xor	s1,s1,s7
1c00af84:	9ca6                	add	s9,s9,s1
1c00af86:	08ccdcb3          	p.ror	s9,s9,a2
1c00af8a:	8f0cd3b7          	lui	t2,0x8f0cd
1c00af8e:	9cba                	add	s9,s9,a4
1c00af90:	c9238393          	addi	t2,t2,-878 # 8f0ccc92 <pulp__FC+0x8f0ccc93>
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
1c00af94:	fffbc413          	not	s0,s7
1c00af98:	929e                	add	t0,t0,t2
1c00af9a:	01946433          	or	s0,s0,s9
1c00af9e:	9c16                	add	s8,s8,t0
1c00afa0:	8c39                	xor	s0,s0,a4
1c00afa2:	9c22                	add	s8,s8,s0
1c00afa4:	08ac5c33          	p.ror	s8,s8,a0
1c00afa8:	ffeff2b7          	lui	t0,0xffeff
1c00afac:	9c66                	add	s8,s8,s9
1c00afae:	47d28293          	addi	t0,t0,1149 # ffeff47d <pulp__FC+0xffeff47e>
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
1c00afb2:	fff74393          	not	t2,a4
1c00afb6:	9f96                	add	t6,t6,t0
1c00afb8:	0183e3b3          	or	t2,t2,s8
1c00afbc:	9bfe                	add	s7,s7,t6
1c00afbe:	0193c3b3          	xor	t2,t2,s9
1c00afc2:	42a2                	lw	t0,8(sp)
1c00afc4:	9b9e                	add	s7,s7,t2
1c00afc6:	85846fb7          	lui	t6,0x85846
1c00afca:	092bdbb3          	p.ror	s7,s7,s2
1c00afce:	dd1f8f93          	addi	t6,t6,-559 # 85845dd1 <pulp__FC+0x85845dd2>
1c00afd2:	9be2                	add	s7,s7,s8
1c00afd4:	9f96                	add	t6,t6,t0
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
1c00afd6:	fffcc293          	not	t0,s9
1c00afda:	0172e2b3          	or	t0,t0,s7
1c00afde:	0182c2b3          	xor	t0,t0,s8
1c00afe2:	977e                	add	a4,a4,t6
1c00afe4:	9716                	add	a4,a4,t0
1c00afe6:	08d75733          	p.ror	a4,a4,a3
1c00afea:	6fa88fb7          	lui	t6,0x6fa88
1c00afee:	975e                	add	a4,a4,s7
1c00aff0:	e4ff8f93          	addi	t6,t6,-433 # 6fa87e4f <__l2_end+0x53a77107>
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
1c00aff4:	fffc4293          	not	t0,s8
1c00aff8:	9f7e                	add	t5,t5,t6
1c00affa:	00e2e2b3          	or	t0,t0,a4
1c00affe:	9cfa                	add	s9,s9,t5
1c00b000:	0172c2b3          	xor	t0,t0,s7
1c00b004:	9c96                	add	s9,s9,t0
1c00b006:	08ccdcb3          	p.ror	s9,s9,a2
1c00b00a:	fe2cef37          	lui	t5,0xfe2ce
1c00b00e:	9cba                	add	s9,s9,a4
1c00b010:	6e0f0f13          	addi	t5,t5,1760 # fe2ce6e0 <pulp__FC+0xfe2ce6e1>
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
1c00b014:	fffbcf93          	not	t6,s7
1c00b018:	9efa                	add	t4,t4,t5
1c00b01a:	019fefb3          	or	t6,t6,s9
1c00b01e:	9c76                	add	s8,s8,t4
1c00b020:	00efcfb3          	xor	t6,t6,a4
1c00b024:	9c7e                	add	s8,s8,t6
1c00b026:	08ac5c33          	p.ror	s8,s8,a0
1c00b02a:	a3014eb7          	lui	t4,0xa3014
1c00b02e:	9c66                	add	s8,s8,s9
1c00b030:	314e8e93          	addi	t4,t4,788 # a3014314 <pulp__FC+0xa3014315>
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
1c00b034:	fff74f13          	not	t5,a4
1c00b038:	9e76                	add	t3,t3,t4
1c00b03a:	018f6f33          	or	t5,t5,s8
1c00b03e:	9bf2                	add	s7,s7,t3
1c00b040:	019f4f33          	xor	t5,t5,s9
1c00b044:	9bfa                	add	s7,s7,t5
1c00b046:	092bdbb3          	p.ror	s7,s7,s2
1c00b04a:	4e081e37          	lui	t3,0x4e081
1c00b04e:	9be2                	add	s7,s7,s8
1c00b050:	1a1e0e13          	addi	t3,t3,417 # 4e0811a1 <__l2_end+0x32070459>
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
1c00b054:	fffcce93          	not	t4,s9
1c00b058:	9372                	add	t1,t1,t3
1c00b05a:	017eeeb3          	or	t4,t4,s7
1c00b05e:	018eceb3          	xor	t4,t4,s8
1c00b062:	971a                	add	a4,a4,t1
1c00b064:	9776                	add	a4,a4,t4
1c00b066:	4d42                	lw	s10,16(sp)
1c00b068:	08d75733          	p.ror	a4,a4,a3
1c00b06c:	f7538337          	lui	t1,0xf7538
1c00b070:	975e                	add	a4,a4,s7
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
1c00b072:	fffc4e13          	not	t3,s8
1c00b076:	e8230313          	addi	t1,t1,-382 # f7537e82 <pulp__FC+0xf7537e83>
1c00b07a:	936a                	add	t1,t1,s10
1c00b07c:	00ee6e33          	or	t3,t3,a4
1c00b080:	017e4e33          	xor	t3,t3,s7
1c00b084:	9c9a                	add	s9,s9,t1
1c00b086:	9cf2                	add	s9,s9,t3
1c00b088:	08ccd633          	p.ror	a2,s9,a2
1c00b08c:	bd3af337          	lui	t1,0xbd3af
1c00b090:	963a                	add	a2,a2,a4
1c00b092:	23530313          	addi	t1,t1,565 # bd3af235 <pulp__FC+0xbd3af236>
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
1c00b096:	fffbce13          	not	t3,s7
1c00b09a:	989a                	add	a7,a7,t1
1c00b09c:	00ce6e33          	or	t3,t3,a2
1c00b0a0:	00ee4e33          	xor	t3,t3,a4
1c00b0a4:	9c46                	add	s8,s8,a7
1c00b0a6:	9c72                	add	s8,s8,t3
1c00b0a8:	08ac5533          	p.ror	a0,s8,a0
1c00b0ac:	2ad7d8b7          	lui	a7,0x2ad7d
1c00b0b0:	9532                	add	a0,a0,a2
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
1c00b0b2:	fff74313          	not	t1,a4
1c00b0b6:	2bb88893          	addi	a7,a7,699 # 2ad7d2bb <__l2_end+0xed6c573>
1c00b0ba:	98ee                	add	a7,a7,s11
1c00b0bc:	00a36333          	or	t1,t1,a0
1c00b0c0:	9bc6                	add	s7,s7,a7
1c00b0c2:	00c34333          	xor	t1,t1,a2
1c00b0c6:	9b9a                	add	s7,s7,t1
1c00b0c8:	4dd2                	lw	s11,20(sp)
1c00b0ca:	092bd933          	p.ror	s2,s7,s2
1c00b0ce:	eb86d8b7          	lui	a7,0xeb86d
1c00b0d2:	992a                	add	s2,s2,a0
1c00b0d4:	39188893          	addi	a7,a7,913 # eb86d391 <pulp__FC+0xeb86d392>
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00b0d8:	fff64313          	not	t1,a2
		a += saved_a;
1c00b0dc:	4e62                	lw	t3,24(sp)
	} while (size -= 64);
1c00b0de:	4ef2                	lw	t4,28(sp)
1c00b0e0:	98ee                	add	a7,a7,s11
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00b0e2:	01236333          	or	t1,t1,s2
1c00b0e6:	9746                	add	a4,a4,a7
1c00b0e8:	00a34333          	xor	t1,t1,a0
1c00b0ec:	971a                	add	a4,a4,t1
1c00b0ee:	08d75733          	p.ror	a4,a4,a3
		a += saved_a;
1c00b0f2:	9e32                	add	t3,t3,a2
	} while (size -= 64);
1c00b0f4:	1efd                	addi	t4,t4,-1
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00b0f6:	974a                	add	a4,a4,s2
		a += saved_a;
1c00b0f8:	cc72                	sw	t3,24(sp)
	} while (size -= 64);
1c00b0fa:	ce76                	sw	t4,28(sp)
		b += saved_b;
1c00b0fc:	983a                	add	a6,a6,a4
		c += saved_c;
1c00b0fe:	9a4a                	add	s4,s4,s2
		d += saved_d;
1c00b100:	9aaa                	add	s5,s5,a0
	} while (size -= 64);
1c00b102:	f80e9a63          	bnez	t4,1c00a896 <body+0x38>
	ctx->b = b;
	ctx->c = c;
	ctx->d = d;

	return ptr;
}
1c00b106:	4436                	lw	s0,76(sp)
	ctx->c = c;
1c00b108:	0147a823          	sw	s4,16(a5)
	ctx->d = d;
1c00b10c:	0157aa23          	sw	s5,20(a5)
	ctx->a = a;
1c00b110:	01c7a423          	sw	t3,8(a5)
	ctx->b = b;
1c00b114:	0107a623          	sw	a6,12(a5)
}
1c00b118:	44a6                	lw	s1,72(sp)
1c00b11a:	4916                	lw	s2,68(sp)
1c00b11c:	4986                	lw	s3,64(sp)
1c00b11e:	5a72                	lw	s4,60(sp)
1c00b120:	5ae2                	lw	s5,56(sp)
1c00b122:	5b52                	lw	s6,52(sp)
1c00b124:	5bc2                	lw	s7,48(sp)
1c00b126:	5c32                	lw	s8,44(sp)
1c00b128:	5ca2                	lw	s9,40(sp)
1c00b12a:	5d12                	lw	s10,36(sp)
1c00b12c:	5d82                	lw	s11,32(sp)
1c00b12e:	852e                	mv	a0,a1
1c00b130:	6161                	addi	sp,sp,80
1c00b132:	8082                	ret

1c00b134 <MD5_Init>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
1c00b134:	674527b7          	lui	a5,0x67452
1c00b138:	30178793          	addi	a5,a5,769 # 67452301 <__l2_end+0x4b4415b9>
1c00b13c:	c51c                	sw	a5,8(a0)
	ctx->b = 0xefcdab89;
1c00b13e:	efcdb7b7          	lui	a5,0xefcdb
1c00b142:	b8978793          	addi	a5,a5,-1143 # efcdab89 <pulp__FC+0xefcdab8a>
1c00b146:	c55c                	sw	a5,12(a0)
	ctx->c = 0x98badcfe;
1c00b148:	98bae7b7          	lui	a5,0x98bae
1c00b14c:	cfe78793          	addi	a5,a5,-770 # 98badcfe <pulp__FC+0x98badcff>
1c00b150:	c91c                	sw	a5,16(a0)
	ctx->d = 0x10325476;
1c00b152:	103257b7          	lui	a5,0x10325
1c00b156:	47678793          	addi	a5,a5,1142 # 10325476 <__l1_end+0x325432>
1c00b15a:	c95c                	sw	a5,20(a0)

	ctx->lo = 0;
1c00b15c:	00052023          	sw	zero,0(a0)
	ctx->hi = 0;
1c00b160:	00052223          	sw	zero,4(a0)
}
1c00b164:	8082                	ret

1c00b166 <MD5_Update>:

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c00b166:	1101                	addi	sp,sp,-32
1c00b168:	cc22                	sw	s0,24(sp)
1c00b16a:	842a                	mv	s0,a0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
1c00b16c:	4108                	lw	a0,0(a0)
{
1c00b16e:	ca26                	sw	s1,20(sp)
1c00b170:	c84a                	sw	s2,16(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00b172:	00c507b3          	add	a5,a0,a2
{
1c00b176:	ce06                	sw	ra,28(sp)
1c00b178:	c64e                	sw	s3,12(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00b17a:	c5d7b7b3          	p.bclr	a5,a5,2,29
1c00b17e:	c01c                	sw	a5,0(s0)
{
1c00b180:	892e                	mv	s2,a1
1c00b182:	84b2                	mv	s1,a2
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00b184:	00a7f563          	bleu	a0,a5,1c00b18e <MD5_Update+0x28>
		ctx->hi++;
1c00b188:	405c                	lw	a5,4(s0)
1c00b18a:	0785                	addi	a5,a5,1
1c00b18c:	c05c                	sw	a5,4(s0)
	ctx->hi += size >> 29;
1c00b18e:	4058                	lw	a4,4(s0)
1c00b190:	01d4d793          	srli	a5,s1,0x1d

	used = saved_lo & 0x3f;
1c00b194:	f2653533          	p.bclr	a0,a0,25,6
	ctx->hi += size >> 29;
1c00b198:	97ba                	add	a5,a5,a4
1c00b19a:	c05c                	sw	a5,4(s0)

	if (used) {
1c00b19c:	c129                	beqz	a0,1c00b1de <MD5_Update+0x78>
		available = 64 - used;
1c00b19e:	04000993          	li	s3,64
1c00b1a2:	40a989b3          	sub	s3,s3,a0
1c00b1a6:	0561                	addi	a0,a0,24
1c00b1a8:	9522                	add	a0,a0,s0

		if (size < available) {
1c00b1aa:	0134fc63          	bleu	s3,s1,1c00b1c2 <MD5_Update+0x5c>
			memcpy(&ctx->buffer[used], data, size);
1c00b1ae:	8626                	mv	a2,s1
1c00b1b0:	85ca                	mv	a1,s2
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
1c00b1b2:	4462                	lw	s0,24(sp)
1c00b1b4:	40f2                	lw	ra,28(sp)
1c00b1b6:	44d2                	lw	s1,20(sp)
1c00b1b8:	4942                	lw	s2,16(sp)
1c00b1ba:	49b2                	lw	s3,12(sp)
1c00b1bc:	6105                	addi	sp,sp,32
	memcpy(ctx->buffer, data, size);
1c00b1be:	7d80306f          	j	1c00e996 <memcpy>
		memcpy(&ctx->buffer[used], data, available);
1c00b1c2:	85ca                	mv	a1,s2
1c00b1c4:	864e                	mv	a2,s3
1c00b1c6:	7d0030ef          	jal	ra,1c00e996 <memcpy>
		body(ctx, ctx->buffer, 64);
1c00b1ca:	04000613          	li	a2,64
1c00b1ce:	01840593          	addi	a1,s0,24
1c00b1d2:	8522                	mv	a0,s0
		data = (const unsigned char *)data + available;
1c00b1d4:	994e                	add	s2,s2,s3
		size -= available;
1c00b1d6:	413484b3          	sub	s1,s1,s3
		body(ctx, ctx->buffer, 64);
1c00b1da:	e84ff0ef          	jal	ra,1c00a85e <body>
	if (size >= 64) {
1c00b1de:	03f00793          	li	a5,63
1c00b1e2:	0097fb63          	bleu	s1,a5,1c00b1f8 <MD5_Update+0x92>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
1c00b1e6:	ca04b633          	p.bclr	a2,s1,5,0
1c00b1ea:	85ca                	mv	a1,s2
1c00b1ec:	8522                	mv	a0,s0
1c00b1ee:	e70ff0ef          	jal	ra,1c00a85e <body>
1c00b1f2:	892a                	mv	s2,a0
		size &= 0x3f;
1c00b1f4:	f264b4b3          	p.bclr	s1,s1,25,6
	memcpy(ctx->buffer, data, size);
1c00b1f8:	8626                	mv	a2,s1
1c00b1fa:	85ca                	mv	a1,s2
1c00b1fc:	01840513          	addi	a0,s0,24
1c00b200:	bf4d                	j	1c00b1b2 <MD5_Update+0x4c>

1c00b202 <MD5_Final>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
1c00b202:	1141                	addi	sp,sp,-16
1c00b204:	c226                	sw	s1,4(sp)
1c00b206:	84aa                	mv	s1,a0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
1c00b208:	4188                	lw	a0,0(a1)
{
1c00b20a:	c422                	sw	s0,8(sp)
1c00b20c:	c04a                	sw	s2,0(sp)
	used = ctx->lo & 0x3f;
1c00b20e:	f2653533          	p.bclr	a0,a0,25,6

	ctx->buffer[used++] = 0x80;
1c00b212:	00a58733          	add	a4,a1,a0
{
1c00b216:	c606                	sw	ra,12(sp)
	ctx->buffer[used++] = 0x80;
1c00b218:	00150793          	addi	a5,a0,1
1c00b21c:	f8000693          	li	a3,-128

	available = 64 - used;
1c00b220:	04000613          	li	a2,64
	ctx->buffer[used++] = 0x80;
1c00b224:	00d70c23          	sb	a3,24(a4)
	available = 64 - used;
1c00b228:	8e1d                	sub	a2,a2,a5

	if (available < 8) {
1c00b22a:	471d                	li	a4,7
{
1c00b22c:	842e                	mv	s0,a1
1c00b22e:	01858913          	addi	s2,a1,24
	if (available < 8) {
1c00b232:	02c76063          	bltu	a4,a2,1c00b252 <MD5_Final+0x50>
		memset(&ctx->buffer[used], 0, available);
1c00b236:	0565                	addi	a0,a0,25
1c00b238:	4581                	li	a1,0
1c00b23a:	9522                	add	a0,a0,s0
1c00b23c:	74a030ef          	jal	ra,1c00e986 <memset>
		body(ctx, ctx->buffer, 64);
1c00b240:	04000613          	li	a2,64
1c00b244:	85ca                	mv	a1,s2
1c00b246:	8522                	mv	a0,s0
1c00b248:	e16ff0ef          	jal	ra,1c00a85e <body>
		used = 0;
		available = 64;
1c00b24c:	04000613          	li	a2,64
		used = 0;
1c00b250:	4781                	li	a5,0
	}

	memset(&ctx->buffer[used], 0, available - 8);
1c00b252:	01878513          	addi	a0,a5,24
1c00b256:	1661                	addi	a2,a2,-8
1c00b258:	4581                	li	a1,0
1c00b25a:	9522                	add	a0,a0,s0
1c00b25c:	72a030ef          	jal	ra,1c00e986 <memset>

	ctx->lo <<= 3;
1c00b260:	401c                	lw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
	OUT(&ctx->buffer[60], ctx->hi)

	body(ctx, ctx->buffer, 64);
1c00b262:	85ca                	mv	a1,s2
1c00b264:	04000613          	li	a2,64
	ctx->lo <<= 3;
1c00b268:	078e                	slli	a5,a5,0x3
	OUT(&ctx->buffer[56], ctx->lo)
1c00b26a:	873e                	mv	a4,a5
1c00b26c:	04e40823          	sb	a4,80(s0)
1c00b270:	0087d713          	srli	a4,a5,0x8
	ctx->lo <<= 3;
1c00b274:	c01c                	sw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c00b276:	04e408a3          	sb	a4,81(s0)
1c00b27a:	0107d713          	srli	a4,a5,0x10
1c00b27e:	83e1                	srli	a5,a5,0x18
1c00b280:	04f409a3          	sb	a5,83(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c00b284:	405c                	lw	a5,4(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c00b286:	04e40923          	sb	a4,82(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c00b28a:	873e                	mv	a4,a5
1c00b28c:	04e40a23          	sb	a4,84(s0)
1c00b290:	0087d713          	srli	a4,a5,0x8
1c00b294:	04e40aa3          	sb	a4,85(s0)
1c00b298:	0107d713          	srli	a4,a5,0x10
1c00b29c:	83e1                	srli	a5,a5,0x18
1c00b29e:	04f40ba3          	sb	a5,87(s0)
1c00b2a2:	04e40b23          	sb	a4,86(s0)
	body(ctx, ctx->buffer, 64);
1c00b2a6:	8522                	mv	a0,s0
1c00b2a8:	db6ff0ef          	jal	ra,1c00a85e <body>

	OUT(&result[0], ctx->a)
1c00b2ac:	441c                	lw	a5,8(s0)
	OUT(&result[4], ctx->b)
	OUT(&result[8], ctx->c)
	OUT(&result[12], ctx->d)

	memset(ctx, 0, sizeof(*ctx));
1c00b2ae:	8522                	mv	a0,s0
1c00b2b0:	09800613          	li	a2,152
	OUT(&result[0], ctx->a)
1c00b2b4:	00f48023          	sb	a5,0(s1)
1c00b2b8:	441c                	lw	a5,8(s0)
	memset(ctx, 0, sizeof(*ctx));
1c00b2ba:	4581                	li	a1,0
	OUT(&result[0], ctx->a)
1c00b2bc:	83a1                	srli	a5,a5,0x8
1c00b2be:	00f480a3          	sb	a5,1(s1)
1c00b2c2:	00a45783          	lhu	a5,10(s0)
1c00b2c6:	00f48123          	sb	a5,2(s1)
1c00b2ca:	00b44783          	lbu	a5,11(s0)
1c00b2ce:	00f481a3          	sb	a5,3(s1)
	OUT(&result[4], ctx->b)
1c00b2d2:	445c                	lw	a5,12(s0)
1c00b2d4:	00f48223          	sb	a5,4(s1)
1c00b2d8:	445c                	lw	a5,12(s0)
1c00b2da:	83a1                	srli	a5,a5,0x8
1c00b2dc:	00f482a3          	sb	a5,5(s1)
1c00b2e0:	00e45783          	lhu	a5,14(s0)
1c00b2e4:	00f48323          	sb	a5,6(s1)
1c00b2e8:	00f44783          	lbu	a5,15(s0)
1c00b2ec:	00f483a3          	sb	a5,7(s1)
	OUT(&result[8], ctx->c)
1c00b2f0:	481c                	lw	a5,16(s0)
1c00b2f2:	00f48423          	sb	a5,8(s1)
1c00b2f6:	481c                	lw	a5,16(s0)
1c00b2f8:	83a1                	srli	a5,a5,0x8
1c00b2fa:	00f484a3          	sb	a5,9(s1)
1c00b2fe:	01245783          	lhu	a5,18(s0)
1c00b302:	00f48523          	sb	a5,10(s1)
1c00b306:	01344783          	lbu	a5,19(s0)
1c00b30a:	00f485a3          	sb	a5,11(s1)
	OUT(&result[12], ctx->d)
1c00b30e:	485c                	lw	a5,20(s0)
1c00b310:	00f48623          	sb	a5,12(s1)
1c00b314:	485c                	lw	a5,20(s0)
1c00b316:	83a1                	srli	a5,a5,0x8
1c00b318:	00f486a3          	sb	a5,13(s1)
1c00b31c:	01645783          	lhu	a5,22(s0)
1c00b320:	00f48723          	sb	a5,14(s1)
1c00b324:	01744783          	lbu	a5,23(s0)
1c00b328:	00f487a3          	sb	a5,15(s1)
}
1c00b32c:	40b2                	lw	ra,12(sp)
1c00b32e:	4422                	lw	s0,8(sp)
1c00b330:	4492                	lw	s1,4(sp)
1c00b332:	4902                	lw	s2,0(sp)
1c00b334:	0141                	addi	sp,sp,16
	memset(ctx, 0, sizeof(*ctx));
1c00b336:	6500306f          	j	1c00e986 <memset>

1c00b33a <__internal_semihost>:
    return __internal_semihost(SEMIHOSTING_SYS_SEEK, (long) args);
}

int semihost_flen(int fd)
{
    return __internal_semihost(SEMIHOSTING_SYS_FLEN, (long) fd);
1c00b33a:	01f01013          	slli	zero,zero,0x1f
1c00b33e:	00100073          	ebreak
1c00b342:	40705013          	srai	zero,zero,0x7
1c00b346:	8082                	ret

1c00b348 <semihost_write0>:
1c00b348:	85aa                	mv	a1,a0
1c00b34a:	4511                	li	a0,4
1c00b34c:	fefff06f          	j	1c00b33a <__internal_semihost>

1c00b350 <semihost_open>:
1c00b350:	7139                	addi	sp,sp,-64
1c00b352:	de06                	sw	ra,60(sp)
1c00b354:	dc22                	sw	s0,56(sp)
1c00b356:	c62e                	sw	a1,12(sp)
1c00b358:	842a                	mv	s0,a0
1c00b35a:	616030ef          	jal	ra,1c00e970 <strlen>
1c00b35e:	45b2                	lw	a1,12(sp)
1c00b360:	083c                	addi	a5,sp,24
1c00b362:	c380                	sw	s0,0(a5)
1c00b364:	087c                	addi	a5,sp,28
1c00b366:	c38c                	sw	a1,0(a5)
1c00b368:	101c                	addi	a5,sp,32
1c00b36a:	c388                	sw	a0,0(a5)
1c00b36c:	082c                	addi	a1,sp,24
1c00b36e:	4505                	li	a0,1
1c00b370:	fcbff0ef          	jal	ra,1c00b33a <__internal_semihost>
1c00b374:	50f2                	lw	ra,60(sp)
1c00b376:	5462                	lw	s0,56(sp)
1c00b378:	6121                	addi	sp,sp,64
1c00b37a:	8082                	ret

1c00b37c <semihost_close>:
1c00b37c:	85aa                	mv	a1,a0
1c00b37e:	4509                	li	a0,2
1c00b380:	fbbff06f          	j	1c00b33a <__internal_semihost>

1c00b384 <semihost_read>:
1c00b384:	7179                	addi	sp,sp,-48
1c00b386:	d606                	sw	ra,44(sp)
1c00b388:	003c                	addi	a5,sp,8
1c00b38a:	c388                	sw	a0,0(a5)
1c00b38c:	007c                	addi	a5,sp,12
1c00b38e:	c38c                	sw	a1,0(a5)
1c00b390:	4519                	li	a0,6
1c00b392:	081c                	addi	a5,sp,16
1c00b394:	002c                	addi	a1,sp,8
1c00b396:	c390                	sw	a2,0(a5)
1c00b398:	fa3ff0ef          	jal	ra,1c00b33a <__internal_semihost>
1c00b39c:	50b2                	lw	ra,44(sp)
1c00b39e:	6145                	addi	sp,sp,48
1c00b3a0:	8082                	ret

1c00b3a2 <semihost_write>:
1c00b3a2:	7179                	addi	sp,sp,-48
1c00b3a4:	d606                	sw	ra,44(sp)
1c00b3a6:	003c                	addi	a5,sp,8
1c00b3a8:	c388                	sw	a0,0(a5)
1c00b3aa:	007c                	addi	a5,sp,12
1c00b3ac:	c38c                	sw	a1,0(a5)
1c00b3ae:	4515                	li	a0,5
1c00b3b0:	081c                	addi	a5,sp,16
1c00b3b2:	002c                	addi	a1,sp,8
1c00b3b4:	c390                	sw	a2,0(a5)
1c00b3b6:	f85ff0ef          	jal	ra,1c00b33a <__internal_semihost>
1c00b3ba:	50b2                	lw	ra,44(sp)
1c00b3bc:	6145                	addi	sp,sp,48
1c00b3be:	8082                	ret

1c00b3c0 <semihost_seek>:
1c00b3c0:	1101                	addi	sp,sp,-32
1c00b3c2:	c42a                	sw	a0,8(sp)
1c00b3c4:	c62e                	sw	a1,12(sp)
1c00b3c6:	4529                	li	a0,10
1c00b3c8:	002c                	addi	a1,sp,8
1c00b3ca:	ce06                	sw	ra,28(sp)
1c00b3cc:	f6fff0ef          	jal	ra,1c00b33a <__internal_semihost>
1c00b3d0:	40f2                	lw	ra,28(sp)
1c00b3d2:	6105                	addi	sp,sp,32
1c00b3d4:	8082                	ret

1c00b3d6 <semihost_exit>:
}

int semihost_exit(int code)
{
    return __internal_semihost(SEMIHOSTING_SYS_EXIT, (long) code);
1c00b3d6:	85aa                	mv	a1,a0
1c00b3d8:	4561                	li	a0,24
1c00b3da:	f61ff06f          	j	1c00b33a <__internal_semihost>

1c00b3de <__bsp_init_pads>:
  conf->ram_start = CONFIG_SPIRAM_START;
  conf->ram_size = CONFIG_SPIRAM_SIZE;
  conf->skip_pads_config = 0;
  conf->spi_itf = CONFIG_SPIRAM_SPI_ITF;
  conf->spi_cs = CONFIG_SPIRAM_SPI_CS;
}
1c00b3de:	1c0117b7          	lui	a5,0x1c011
1c00b3e2:	c7078793          	addi	a5,a5,-912 # 1c010c70 <__bsp_init_pads_done>
1c00b3e6:	4398                	lw	a4,0(a5)
1c00b3e8:	eb05                	bnez	a4,1c00b418 <__bsp_init_pads+0x3a>
1c00b3ea:	1101                	addi	sp,sp,-32
1c00b3ec:	ce06                	sw	ra,28(sp)
1c00b3ee:	4705                	li	a4,1
1c00b3f0:	c398                	sw	a4,0(a5)
1c00b3f2:	000557b7          	lui	a5,0x55
1c00b3f6:	50078793          	addi	a5,a5,1280 # 55500 <__L1Cl+0x45500>
1c00b3fa:	c03e                	sw	a5,0(sp)
1c00b3fc:	0f0007b7          	lui	a5,0xf000
1c00b400:	c23e                	sw	a5,4(sp)
1c00b402:	004007b7          	lui	a5,0x400
1c00b406:	17fd                	addi	a5,a5,-1
1c00b408:	850a                	mv	a0,sp
1c00b40a:	c43e                	sw	a5,8(sp)
1c00b40c:	c602                	sw	zero,12(sp)
1c00b40e:	2c5010ef          	jal	ra,1c00ced2 <pi_pad_init>
1c00b412:	40f2                	lw	ra,28(sp)
1c00b414:	6105                	addi	sp,sp,32
1c00b416:	8082                	ret
1c00b418:	8082                	ret

1c00b41a <bsp_hyperram_conf_init>:
1c00b41a:	008007b7          	lui	a5,0x800
1c00b41e:	00052a23          	sw	zero,20(a0)
1c00b422:	cd1c                	sw	a5,24(a0)
1c00b424:	00050623          	sb	zero,12(a0)
1c00b428:	00052223          	sw	zero,4(a0)
1c00b42c:	00052423          	sw	zero,8(a0)
1c00b430:	8082                	ret

1c00b432 <bsp_hyperram_open>:
1c00b432:	1141                	addi	sp,sp,-16
1c00b434:	c606                	sw	ra,12(sp)
1c00b436:	fa9ff0ef          	jal	ra,1c00b3de <__bsp_init_pads>
1c00b43a:	40b2                	lw	ra,12(sp)
1c00b43c:	4501                	li	a0,0
1c00b43e:	0141                	addi	sp,sp,16
1c00b440:	8082                	ret

1c00b442 <bsp_hyperflash_conf_init>:
1c00b442:	4785                	li	a5,1
1c00b444:	00052223          	sw	zero,4(a0)
1c00b448:	c51c                	sw	a5,8(a0)
1c00b44a:	8082                	ret

1c00b44c <bsp_hyperflash_open>:
1c00b44c:	1141                	addi	sp,sp,-16
1c00b44e:	c606                	sw	ra,12(sp)
1c00b450:	f8fff0ef          	jal	ra,1c00b3de <__bsp_init_pads>
1c00b454:	40b2                	lw	ra,12(sp)
1c00b456:	4501                	li	a0,0
1c00b458:	0141                	addi	sp,sp,16
1c00b45a:	8082                	ret

1c00b45c <bsp_himax_conf_init>:
  return 0;
}


void bsp_himax_conf_init(struct pi_himax_conf *conf)
{
1c00b45c:	1101                	addi	sp,sp,-32
1c00b45e:	ce06                	sw	ra,28(sp)
  __bsp_init_pads();
1c00b460:	c62a                	sw	a0,12(sp)
1c00b462:	f7dff0ef          	jal	ra,1c00b3de <__bsp_init_pads>
  conf->i2c_itf = CONFIG_HIMAX_I2C_ITF;
1c00b466:	4532                	lw	a0,12(sp)
  conf->cpi_itf = CONFIG_HIMAX_CPI_ITF;
}
1c00b468:	40f2                	lw	ra,28(sp)
  conf->i2c_itf = CONFIG_HIMAX_I2C_ITF;
1c00b46a:	00052623          	sw	zero,12(a0)
  conf->cpi_itf = CONFIG_HIMAX_CPI_ITF;
1c00b46e:	00052423          	sw	zero,8(a0)
}
1c00b472:	6105                	addi	sp,sp,32
1c00b474:	8082                	ret

1c00b476 <bsp_himax_open>:

int bsp_himax_open(struct pi_himax_conf *conf)
{
1c00b476:	1141                	addi	sp,sp,-16
1c00b478:	c606                	sw	ra,12(sp)
  __bsp_init_pads();
1c00b47a:	f65ff0ef          	jal	ra,1c00b3de <__bsp_init_pads>
  return 0;
}
1c00b47e:	40b2                	lw	ra,12(sp)
1c00b480:	4501                	li	a0,0
1c00b482:	0141                	addi	sp,sp,16
1c00b484:	8082                	ret

1c00b486 <cluster_start>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b486:	002047b7          	lui	a5,0x204
1c00b48a:	00070737          	lui	a4,0x70
1c00b48e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  IP_WRITE_PTR(base, EU_DISPATCH_FIFO_ACCESS, value);
}

static inline void eu_dispatch_team_config(unsigned value)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00b492:	0ff00713          	li	a4,255
1c00b496:	002046b7          	lui	a3,0x204
1c00b49a:	08e6a223          	sw	a4,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00b49e:	20078793          	addi	a5,a5,512
1c00b4a2:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00b4a6:	00e7a623          	sw	a4,12(a5)
    __rt_team_config(rt_nb_active_pe());
  }

#endif

}
1c00b4aa:	8082                	ret

1c00b4ac <__rt_init>:
{
1c00b4ac:	1101                	addi	sp,sp,-32
static inline void hal_pmu_bypass_set(unsigned int Value) {
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
}

static inline unsigned int hal_pmu_bypass_get() {
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET);
1c00b4ae:	1a104737          	lui	a4,0x1a104
1c00b4b2:	ce06                	sw	ra,28(sp)
1c00b4b4:	cc22                	sw	s0,24(sp)
1c00b4b6:	ca26                	sw	s1,20(sp)
1c00b4b8:	07072783          	lw	a5,112(a4) # 1a104070 <__l1_end+0xa10402c>
  hal_pmu_bypass_set (ARCHI_REG_FIELD_SET (hal_pmu_bypass_get (), 1, 11, 1) );
1c00b4bc:	c0b7c7b3          	p.bset	a5,a5,0,11
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00b4c0:	06f72823          	sw	a5,112(a4)
  __rt_bridge_set_available();
1c00b4c4:	2b49                	jal	1c00ba56 <__rt_bridge_set_available>
  cpu_stack_check_enable((int)__rt_fc_stack, (int)__rt_fc_stack + __rt_fc_stack_size);
1c00b4c6:	1b0007b7          	lui	a5,0x1b000
1c00b4ca:	3e878793          	addi	a5,a5,1000 # 1b0003e8 <__rt_fc_stack>
 * Stack checking
 */

static inline void cpu_stack_check_enable(unsigned int base, unsigned int end)
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c00b4ce:	7d005073          	csrwi	0x7d0,0
  asm volatile ("csrw  0x7D1, %0" :: "r" (base));
1c00b4d2:	7d179073          	csrw	0x7d1,a5
1c00b4d6:	1c010737          	lui	a4,0x1c010
1c00b4da:	7a472703          	lw	a4,1956(a4) # 1c0107a4 <__rt_fc_stack_size>
1c00b4de:	97ba                	add	a5,a5,a4
  asm volatile ("csrw  0x7D2, %0" :: "r" (end));
1c00b4e0:	7d279073          	csrw	0x7d2,a5
  asm volatile ("csrwi 0x7D0, 1" :: );
1c00b4e4:	7d00d073          	csrwi	0x7d0,1
  __rt_irq_init();
1c00b4e8:	2add                	jal	1c00b6de <__rt_irq_init>

#include "archi/pulp.h"
#include "archi/soc_eu/soc_eu_v1.h"

static inline void soc_eu_eventMask_set(unsigned int reg, unsigned int value) {
  ARCHI_WRITE(ARCHI_SOC_EU_ADDR, reg, value);
1c00b4ea:	54fd                	li	s1,-1
1c00b4ec:	1a1067b7          	lui	a5,0x1a106
1c00b4f0:	0097a223          	sw	s1,4(a5) # 1a106004 <__l1_end+0xa105fc0>
1c00b4f4:	0097a423          	sw	s1,8(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_SOC_EVT, __rt_fc_socevents_handler);
1c00b4f8:	1c0005b7          	lui	a1,0x1c000
1c00b4fc:	44c58593          	addi	a1,a1,1100 # 1c00044c <__rt_fc_socevents_handler>
1c00b500:	456d                	li	a0,27
1c00b502:	2a3d                	jal	1c00b640 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00b504:	080007b7          	lui	a5,0x8000
1c00b508:	00204737          	lui	a4,0x204
1c00b50c:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b510:	00f72423          	sw	a5,8(a4)
  __rt_pmu_init();
1c00b514:	29a010ef          	jal	ra,1c00c7ae <__rt_pmu_init>
  __rt_freq_init();
1c00b518:	6e5000ef          	jal	ra,1c00c3fc <__rt_freq_init>
1c00b51c:	002017b7          	lui	a5,0x201
1c00b520:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
}

static inline void icache_enable(unsigned int base)
{
  pulp_write32(base, 0xFFFFFFFF);
1c00b524:	c384                	sw	s1,0(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b526:	01402473          	csrr	s0,uhartid
1c00b52a:	1c0104b7          	lui	s1,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00b52e:	8415                	srai	s0,s0,0x5
  __rt_utils_init();
1c00b530:	24ed                	jal	1c00b81a <__rt_utils_init>
1c00b532:	f2643433          	p.bclr	s0,s0,25,6
  __rt_allocs_init();
1c00b536:	1af000ef          	jal	ra,1c00bee4 <__rt_allocs_init>
1c00b53a:	da048493          	addi	s1,s1,-608 # 1c00fda0 <ctor_list+0x4>
  __rt_event_sched_init();
1c00b53e:	029000ef          	jal	ra,1c00bd66 <__rt_event_sched_init>
  __rt_padframe_init();
1c00b542:	3f5020ef          	jal	ra,1c00e136 <__rt_padframe_init>
  for(fpp = ctor_list+1;  *fpp != 0;  ++fpp) {
1c00b546:	0044a78b          	p.lw	a5,4(s1!)
1c00b54a:	ebad                	bnez	a5,1c00b5bc <__rt_init+0x110>
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
1c00b54c:	300467f3          	csrrsi	a5,mstatus,8
  if (__rt_cbsys_exec(RT_CBSYS_START)) goto error;
1c00b550:	4501                	li	a0,0
1c00b552:	2c61                	jal	1c00b7ea <__rt_cbsys_exec>
1c00b554:	e539                	bnez	a0,1c00b5a2 <__rt_init+0xf6>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b556:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00b55a:	8795                	srai	a5,a5,0x5
1c00b55c:	f267b7b3          	p.bclr	a5,a5,25,6
        exit(retval);
      }
    }
    else
      return cluster_master_start(NULL);
  } else if (!rt_is_fc()) {
1c00b560:	02000713          	li	a4,32
1c00b564:	0ae78363          	beq	a5,a4,1c00b60a <__rt_init+0x15e>
    rt_cluster_mount(1, cid, 0, NULL);
1c00b568:	4681                	li	a3,0
1c00b56a:	4601                	li	a2,0
1c00b56c:	4581                	li	a1,0
1c00b56e:	4505                	li	a0,1
  if (rt_cluster_id() != cid)
1c00b570:	cba1                	beqz	a5,1c00b5c0 <__rt_init+0x114>
    rt_cluster_mount(1, cid, 0, NULL);
1c00b572:	78c010ef          	jal	ra,1c00ccfe <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*rt_nb_active_pe());
1c00b576:	6591                	lui	a1,0x4
1c00b578:	4509                	li	a0,2
1c00b57a:	0bf000ef          	jal	ra,1c00be38 <rt_alloc>
1c00b57e:	872a                	mv	a4,a0
    if (stacks == NULL) return -1;
1c00b580:	c10d                	beqz	a0,1c00b5a2 <__rt_init+0xf6>
    if (rt_cluster_call(NULL, cid, cluster_start, NULL, stacks, 0x800, 0x800, rt_nb_active_pe(), event)) return -1;
1c00b582:	6805                	lui	a6,0x1
1c00b584:	80080813          	addi	a6,a6,-2048 # 800 <__rt_stack_size>
1c00b588:	1c00b637          	lui	a2,0x1c00b
1c00b58c:	c002                	sw	zero,0(sp)
1c00b58e:	48a1                	li	a7,8
1c00b590:	87c2                	mv	a5,a6
1c00b592:	4681                	li	a3,0
1c00b594:	48660613          	addi	a2,a2,1158 # 1c00b486 <cluster_start>
1c00b598:	4581                	li	a1,0
1c00b59a:	4501                	li	a0,0
1c00b59c:	6d2010ef          	jal	ra,1c00cc6e <rt_cluster_call>
1c00b5a0:	c52d                	beqz	a0,1c00b60a <__rt_init+0x15e>
  rt_fatal("There was an error during runtime initialization\n");
1c00b5a2:	1c010537          	lui	a0,0x1c010
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b5a6:	01402673          	csrr	a2,uhartid
1c00b5aa:	85a2                	mv	a1,s0
1c00b5ac:	f4563633          	p.bclr	a2,a2,26,5
1c00b5b0:	2f850513          	addi	a0,a0,760 # 1c0102f8 <__himax_reg_init+0x11c>
1c00b5b4:	70e030ef          	jal	ra,1c00ecc2 <printf>
1c00b5b8:	68e030ef          	jal	ra,1c00ec46 <abort>
    (**fpp)();
1c00b5bc:	9782                	jalr	a5
1c00b5be:	b761                	j	1c00b546 <__rt_init+0x9a>
    rt_cluster_mount(1, cid, 0, NULL);
1c00b5c0:	73e010ef          	jal	ra,1c00ccfe <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*(rt_nb_active_pe()-1));
1c00b5c4:	6591                	lui	a1,0x4
1c00b5c6:	80058593          	addi	a1,a1,-2048 # 3800 <__rt_stack_size+0x3000>
1c00b5ca:	4509                	li	a0,2
1c00b5cc:	06d000ef          	jal	ra,1c00be38 <rt_alloc>
    if (stacks == NULL) return -1;
1c00b5d0:	d969                	beqz	a0,1c00b5a2 <__rt_init+0xf6>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00b5d2:	00204737          	lui	a4,0x204
1c00b5d6:	0ff00793          	li	a5,255
1c00b5da:	08f72223          	sw	a5,132(a4) # 204084 <__L2+0x184084>
    eu_dispatch_push((unsigned int)__rt_set_slave_stack | 1);
1c00b5de:	1c0107b7          	lui	a5,0x1c010
1c00b5e2:	ce478793          	addi	a5,a5,-796 # 1c00fce4 <__rt_set_slave_stack>
1c00b5e6:	c007c7b3          	p.bset	a5,a5,0,0
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00b5ea:	08f72023          	sw	a5,128(a4)
1c00b5ee:	6785                	lui	a5,0x1
1c00b5f0:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00b5f4:	08f72023          	sw	a5,128(a4)
1c00b5f8:	08a72023          	sw	a0,128(a4)
}
1c00b5fc:	4462                	lw	s0,24(sp)
1c00b5fe:	40f2                	lw	ra,28(sp)
1c00b600:	44d2                	lw	s1,20(sp)
    cluster_start(NULL);
1c00b602:	4501                	li	a0,0
}
1c00b604:	6105                	addi	sp,sp,32
    cluster_start(NULL);
1c00b606:	e81ff06f          	j	1c00b486 <cluster_start>
}
1c00b60a:	40f2                	lw	ra,28(sp)
1c00b60c:	4462                	lw	s0,24(sp)
1c00b60e:	44d2                	lw	s1,20(sp)
1c00b610:	6105                	addi	sp,sp,32
1c00b612:	8082                	ret

1c00b614 <__rt_deinit>:
{
1c00b614:	1141                	addi	sp,sp,-16
1c00b616:	c606                	sw	ra,12(sp)
1c00b618:	c422                	sw	s0,8(sp)
}

static inline void cpu_stack_check_disable()
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c00b61a:	7d005073          	csrwi	0x7d0,0
  __rt_cbsys_exec(RT_CBSYS_STOP);
1c00b61e:	4505                	li	a0,1
1c00b620:	1c010437          	lui	s0,0x1c010
1c00b624:	22d9                	jal	1c00b7ea <__rt_cbsys_exec>
1c00b626:	df040413          	addi	s0,s0,-528 # 1c00fdf0 <dtor_list+0x4>
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c00b62a:	0044278b          	p.lw	a5,4(s0!)
1c00b62e:	e789                	bnez	a5,1c00b638 <__rt_deinit+0x24>
}
1c00b630:	40b2                	lw	ra,12(sp)
1c00b632:	4422                	lw	s0,8(sp)
1c00b634:	0141                	addi	sp,sp,16
1c00b636:	8082                	ret
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c00b638:	9782                	jalr	a5
1c00b63a:	bfc5                	j	1c00b62a <__rt_deinit+0x16>

1c00b63c <pi_open_from_conf>:
#endif


void pi_open_from_conf(struct pi_device *device, void *conf)
{
  device->config = conf;
1c00b63c:	c14c                	sw	a1,4(a0)
}
1c00b63e:	8082                	ret

1c00b640 <rt_irq_set_handler>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b640:	014027f3          	csrr	a5,uhartid
  return hal_spr_read(0x305) & ~1;
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
  return ARCHI_L2_ADDR;
#else
  if (rt_is_fc()) {
1c00b644:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00b648:	ca5797b3          	p.extractu	a5,a5,5,5
1c00b64c:	02e79c63          	bne	a5,a4,1c00b684 <rt_irq_set_handler+0x44>
#if defined(ARCHI_CORE_HAS_SECURITY) && !defined(ARCHI_CORE_HAS_1_10)
    return __builtin_pulp_spr_read(SR_MTVEC);
1c00b650:	30502773          	csrr	a4,mtvec
  irq -= 16;
#endif

  unsigned int base = __rt_get_fc_vector_base();

  unsigned int jmpAddr = base + 0x4 * irq;
1c00b654:	050a                	slli	a0,a0,0x2
  unsigned int S = ((unsigned int) ItHandler - (ItBaseAddr+ItIndex*4));
1c00b656:	8d89                	sub	a1,a1,a0
1c00b658:	8d99                	sub	a1,a1,a4
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 20),  1, 31);
1c00b65a:	c14586b3          	p.extract	a3,a1,0,20
1c00b65e:	06f00793          	li	a5,111
1c00b662:	c1f6a7b3          	p.insert	a5,a3,0,31
  R = __BITINSERT(R, __BITEXTRACT(S, 10,  1), 10, 21);
1c00b666:	d21586b3          	p.extract	a3,a1,9,1
1c00b66a:	d356a7b3          	p.insert	a5,a3,9,21
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 11),  1, 20);
1c00b66e:	c0b586b3          	p.extract	a3,a1,0,11
1c00b672:	c146a7b3          	p.insert	a5,a3,0,20
  R = __BITINSERT(R, __BITEXTRACT(S,  8, 12),  8, 12);
1c00b676:	cec585b3          	p.extract	a1,a1,7,12
1c00b67a:	cec5a7b3          	p.insert	a5,a1,7,12

  *(volatile unsigned int *)jmpAddr = __rt_get_itvec(base, irq, (unsigned int)handler);
1c00b67e:	00f56723          	p.sw	a5,a4(a0)

#if defined(PLP_FC_HAS_ICACHE)
  flush_all_icache_banks_common(plp_icache_fc_base());
#endif

}
1c00b682:	8082                	ret
static inline void plp_ctrl_core_bootaddr_set_remote(int cid, int core, unsigned int bootAddr) {
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
}

static inline unsigned int plp_ctrl_bootaddr_get() {
  return pulp_read32(ARCHI_CLUSTER_CTRL_ADDR + 0x40);
1c00b684:	002007b7          	lui	a5,0x200
1c00b688:	43b8                	lw	a4,64(a5)
1c00b68a:	b7e9                	j	1c00b654 <rt_irq_set_handler+0x14>

1c00b68c <illegal_insn_handler_c>:
#include <stdlib.h>

void __attribute__((weak)) illegal_insn_handler_c()
{

}
1c00b68c:	8082                	ret

1c00b68e <__rt_handle_illegal_instr>:


extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config;
extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config_trace;

static inline unsigned int rt_debug_config() { return __rt_debug_config; }
1c00b68e:	1b0017b7          	lui	a5,0x1b001

static inline unsigned int rt_debug_config_trace() { return __rt_debug_config_trace; }

static inline int rt_debug_config_warnings() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WARNING_BIT, 1);
1c00b692:	bec7a703          	lw	a4,-1044(a5) # 1b000bec <__rt_debug_config>

void __rt_handle_illegal_instr()
{
1c00b696:	1141                	addi	sp,sp,-16
1c00b698:	c422                	sw	s0,8(sp)
1c00b69a:	c606                	sw	ra,12(sp)
1c00b69c:	fc173733          	p.bclr	a4,a4,30,1
1c00b6a0:	843e                	mv	s0,a5
#ifdef __riscv__
  unsigned int mepc = hal_mepc_read();
  rt_warning("Reached illegal instruction (PC: 0x%x, opcode: 0x%x\n", mepc, *(int *)mepc);
1c00b6a2:	c315                	beqz	a4,1c00b6c6 <__rt_handle_illegal_instr+0x38>
1c00b6a4:	341026f3          	csrr	a3,mepc
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b6a8:	01402673          	csrr	a2,uhartid
1c00b6ac:	1c010537          	lui	a0,0x1c010
1c00b6b0:	4298                	lw	a4,0(a3)
  return (hart_id >> 5) & 0x3f;
1c00b6b2:	40565593          	srai	a1,a2,0x5
1c00b6b6:	f265b5b3          	p.bclr	a1,a1,25,6
1c00b6ba:	f4563633          	p.bclr	a2,a2,26,5
1c00b6be:	35050513          	addi	a0,a0,848 # 1c010350 <__himax_reg_init+0x174>
1c00b6c2:	600030ef          	jal	ra,1c00ecc2 <printf>
}

static inline int rt_debug_config_werror() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WERROR_BIT, 1);
1c00b6c6:	bec42783          	lw	a5,-1044(s0)
1c00b6ca:	c01797b3          	p.extractu	a5,a5,0,1
1c00b6ce:	c399                	beqz	a5,1c00b6d4 <__rt_handle_illegal_instr+0x46>
1c00b6d0:	576030ef          	jal	ra,1c00ec46 <abort>
  illegal_insn_handler_c();
#endif
}
1c00b6d4:	4422                	lw	s0,8(sp)
1c00b6d6:	40b2                	lw	ra,12(sp)
1c00b6d8:	0141                	addi	sp,sp,16
  illegal_insn_handler_c();
1c00b6da:	fb3ff06f          	j	1c00b68c <illegal_insn_handler_c>

1c00b6de <__rt_irq_init>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_IRQ_AND, irqMask);
1c00b6de:	57fd                	li	a5,-1
1c00b6e0:	00204737          	lui	a4,0x204
1c00b6e4:	00f72823          	sw	a5,16(a4) # 204010 <__L2+0x184010>
  else eu_irq_maskClr(mask);
#elif defined(ITC_VERSION)
  hal_itc_enable_clr(mask);
#elif defined(EU_VERSION)
  eu_irq_maskClr(mask);
  if (hal_is_fc()) eu_evt_maskClr(mask);
1c00b6e8:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b6ec:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00b6f0:	ca5797b3          	p.extractu	a5,a5,5,5
1c00b6f4:	00e79763          	bne	a5,a4,1c00b702 <__rt_irq_init+0x24>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b6f8:	57fd                	li	a5,-1
1c00b6fa:	00204737          	lui	a4,0x204
1c00b6fe:	00f72223          	sw	a5,4(a4) # 204004 <__L2+0x184004>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b702:	014027f3          	csrr	a5,uhartid
#if defined(ARCHI_CORE_RISCV_ITC)
  hal_spr_write(0x305, base);
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
#else
  if (rt_is_fc()) {
1c00b706:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00b70a:	ca5797b3          	p.extractu	a5,a5,5,5
1c00b70e:	00e79963          	bne	a5,a4,1c00b720 <__rt_irq_init+0x42>
#if defined(ARCHI_CORE_HAS_SECURITY)
    __builtin_pulp_spr_write(SR_MTVEC, base);
1c00b712:	1c0007b7          	lui	a5,0x1c000
1c00b716:	00078793          	mv	a5,a5
1c00b71a:	30579073          	csrw	mtvec,a5
1c00b71e:	8082                	ret
  pulp_write32(ARCHI_CLUSTER_CTRL_ADDR + 0x40, bootAddr);
1c00b720:	1c0007b7          	lui	a5,0x1c000
1c00b724:	00200737          	lui	a4,0x200
1c00b728:	00078793          	mv	a5,a5
1c00b72c:	c33c                	sw	a5,64(a4)
  rt_irq_mask_clr(-1);

  // As the FC code may not be at the beginning of the L2, set the
  // vector base to get proper interrupt handlers
  __rt_set_fc_vector_base((int)rt_irq_vector_base());
}
1c00b72e:	8082                	ret

1c00b730 <__rt_fc_cluster_lock_req>:
      rt_free(RT_ALLOC_FC_RET_DATA, (void *)cbsys, sizeof(rt_cbsys_t));     
      return;
    }

    prev = cbsys;
    cbsys = cbsys->next;
1c00b730:	300476f3          	csrrci	a3,mstatus,8
1c00b734:	08a54703          	lbu	a4,138(a0)
1c00b738:	411c                	lw	a5,0(a0)
1c00b73a:	c321                	beqz	a4,1c00b77a <__rt_fc_cluster_lock_req+0x4a>
1c00b73c:	4398                	lw	a4,0(a5)
1c00b73e:	cf09                	beqz	a4,1c00b758 <__rt_fc_cluster_lock_req+0x28>
1c00b740:	43d8                	lw	a4,4(a5)
1c00b742:	cb09                	beqz	a4,1c00b754 <__rt_fc_cluster_lock_req+0x24>
1c00b744:	4798                	lw	a4,8(a5)
1c00b746:	c348                	sw	a0,4(a4)
1c00b748:	c788                	sw	a0,8(a5)
1c00b74a:	00052223          	sw	zero,4(a0)
1c00b74e:	30069073          	csrw	mstatus,a3
1c00b752:	8082                	ret
1c00b754:	c3c8                	sw	a0,4(a5)
1c00b756:	bfcd                	j	1c00b748 <__rt_fc_cluster_lock_req+0x18>
1c00b758:	4705                	li	a4,1
1c00b75a:	08e50423          	sb	a4,136(a0)
1c00b75e:	4705                	li	a4,1
1c00b760:	c398                	sw	a4,0(a5)
1c00b762:	08954783          	lbu	a5,137(a0)
1c00b766:	00201737          	lui	a4,0x201
1c00b76a:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00b76e:	04078793          	addi	a5,a5,64 # 1c000040 <__irq_vector_base+0x40>
1c00b772:	07da                	slli	a5,a5,0x16
1c00b774:	0007e723          	p.sw	zero,a4(a5)
1c00b778:	bfd9                	j	1c00b74e <__rt_fc_cluster_lock_req+0x1e>
1c00b77a:	43d8                	lw	a4,4(a5)
1c00b77c:	e719                	bnez	a4,1c00b78a <__rt_fc_cluster_lock_req+0x5a>
1c00b77e:	0007a023          	sw	zero,0(a5)
1c00b782:	4785                	li	a5,1
1c00b784:	08f50423          	sb	a5,136(a0)
1c00b788:	bfe9                	j	1c00b762 <__rt_fc_cluster_lock_req+0x32>
1c00b78a:	4350                	lw	a2,4(a4)
1c00b78c:	c3d0                	sw	a2,4(a5)
1c00b78e:	4785                	li	a5,1
1c00b790:	08f70423          	sb	a5,136(a4)
1c00b794:	08974783          	lbu	a5,137(a4)
1c00b798:	00201737          	lui	a4,0x201
1c00b79c:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00b7a0:	04078793          	addi	a5,a5,64
1c00b7a4:	07da                	slli	a5,a5,0x16
1c00b7a6:	0007e723          	p.sw	zero,a4(a5)
1c00b7aa:	bfe1                	j	1c00b782 <__rt_fc_cluster_lock_req+0x52>

1c00b7ac <__rt_cbsys_add>:
  }
}

int __rt_cbsys_add(__rt_cbsys_e cbsys_id, int (*cb)(void *), void *cb_arg)
{
1c00b7ac:	1101                	addi	sp,sp,-32
1c00b7ae:	cc22                	sw	s0,24(sp)
1c00b7b0:	ca26                	sw	s1,20(sp)
1c00b7b2:	842a                	mv	s0,a0
1c00b7b4:	84ae                	mv	s1,a1
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c00b7b6:	4501                	li	a0,0
1c00b7b8:	45b1                	li	a1,12
1c00b7ba:	c632                	sw	a2,12(sp)
{
1c00b7bc:	ce06                	sw	ra,28(sp)
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c00b7be:	2dad                	jal	1c00be38 <rt_alloc>
  if (cbsys == NULL) return -1;
1c00b7c0:	4632                	lw	a2,12(sp)
1c00b7c2:	c115                	beqz	a0,1c00b7e6 <__rt_cbsys_add+0x3a>

  cbsys->callback = cb;
  cbsys->arg = cb_arg;
  cbsys->next = cbsys_first[cbsys_id];
1c00b7c4:	1b0017b7          	lui	a5,0x1b001
1c00b7c8:	040a                	slli	s0,s0,0x2
1c00b7ca:	bf078793          	addi	a5,a5,-1040 # 1b000bf0 <cbsys_first>
1c00b7ce:	97a2                	add	a5,a5,s0
1c00b7d0:	4398                	lw	a4,0(a5)
  cbsys->callback = cb;
1c00b7d2:	c104                	sw	s1,0(a0)
  cbsys->arg = cb_arg;
1c00b7d4:	c150                	sw	a2,4(a0)
  cbsys->next = cbsys_first[cbsys_id];
1c00b7d6:	c518                	sw	a4,8(a0)
  cbsys_first[cbsys_id] = cbsys;
1c00b7d8:	c388                	sw	a0,0(a5)

  return 0;
1c00b7da:	4501                	li	a0,0
}
1c00b7dc:	40f2                	lw	ra,28(sp)
1c00b7de:	4462                	lw	s0,24(sp)
1c00b7e0:	44d2                	lw	s1,20(sp)
1c00b7e2:	6105                	addi	sp,sp,32
1c00b7e4:	8082                	ret
  if (cbsys == NULL) return -1;
1c00b7e6:	557d                	li	a0,-1
1c00b7e8:	bfd5                	j	1c00b7dc <__rt_cbsys_add+0x30>

1c00b7ea <__rt_cbsys_exec>:


int __rt_cbsys_exec(__rt_cbsys_e cbsys_id)
{
1c00b7ea:	1141                	addi	sp,sp,-16
1c00b7ec:	c422                	sw	s0,8(sp)
  rt_cbsys_t *cbsys = cbsys_first[cbsys_id];
1c00b7ee:	1b001437          	lui	s0,0x1b001
1c00b7f2:	050a                	slli	a0,a0,0x2
1c00b7f4:	bf040413          	addi	s0,s0,-1040 # 1b000bf0 <cbsys_first>
1c00b7f8:	20a47403          	p.lw	s0,a0(s0)
{
1c00b7fc:	c606                	sw	ra,12(sp)
  while (cbsys)
1c00b7fe:	e411                	bnez	s0,1c00b80a <__rt_cbsys_exec+0x20>
  {
    if (cbsys->callback(cbsys->arg)) return -1;
    cbsys = cbsys->next;
  }

  return 0;
1c00b800:	4501                	li	a0,0
}
1c00b802:	40b2                	lw	ra,12(sp)
1c00b804:	4422                	lw	s0,8(sp)
1c00b806:	0141                	addi	sp,sp,16
1c00b808:	8082                	ret
    if (cbsys->callback(cbsys->arg)) return -1;
1c00b80a:	401c                	lw	a5,0(s0)
1c00b80c:	4048                	lw	a0,4(s0)
1c00b80e:	9782                	jalr	a5
1c00b810:	e119                	bnez	a0,1c00b816 <__rt_cbsys_exec+0x2c>
    cbsys = cbsys->next;
1c00b812:	4400                	lw	s0,8(s0)
1c00b814:	b7ed                	j	1c00b7fe <__rt_cbsys_exec+0x14>
    if (cbsys->callback(cbsys->arg)) return -1;
1c00b816:	557d                	li	a0,-1
1c00b818:	b7ed                	j	1c00b802 <__rt_cbsys_exec+0x18>

1c00b81a <__rt_utils_init>:

RT_FC_BOOT_CODE void __rt_utils_init()
{
  for (int i=0; i<RT_CBSYS_NB; i++)
  {
    cbsys_first[i] = NULL;
1c00b81a:	1b0017b7          	lui	a5,0x1b001
1c00b81e:	bf078793          	addi	a5,a5,-1040 # 1b000bf0 <cbsys_first>
1c00b822:	0007a023          	sw	zero,0(a5)
1c00b826:	0007a223          	sw	zero,4(a5)
1c00b82a:	0007a423          	sw	zero,8(a5)
1c00b82e:	0007a623          	sw	zero,12(a5)
1c00b832:	0007a823          	sw	zero,16(a5)
1c00b836:	0007aa23          	sw	zero,20(a5)
  }
}
1c00b83a:	8082                	ret

1c00b83c <__rt_fc_lock>:

void __rt_fc_lock(rt_fc_lock_t *lock)
{
1c00b83c:	1141                	addi	sp,sp,-16
1c00b83e:	c422                	sw	s0,8(sp)
1c00b840:	842a                	mv	s0,a0
1c00b842:	c606                	sw	ra,12(sp)
1c00b844:	c226                	sw	s1,4(sp)
1c00b846:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b848:	300474f3          	csrrci	s1,mstatus,8
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  while(lock->locked)
1c00b84c:	401c                	lw	a5,0(s0)
1c00b84e:	eb99                	bnez	a5,1c00b864 <__rt_fc_lock+0x28>
  {
    //lock->fc_wait = __rt_thread_current;
    __rt_event_execute(rt_event_internal_sched(), 1);
  }
  lock->locked = 1;
1c00b850:	4785                	li	a5,1
1c00b852:	c01c                	sw	a5,0(s0)
  __builtin_pulp_spr_write(reg, val);
1c00b854:	30049073          	csrw	mstatus,s1
  while (rt_tas_lock_32((uint32_t)&lock->lock) == -1)
  {

  }
#endif
}
1c00b858:	40b2                	lw	ra,12(sp)
1c00b85a:	4422                	lw	s0,8(sp)
1c00b85c:	4492                	lw	s1,4(sp)
1c00b85e:	4902                	lw	s2,0(sp)
1c00b860:	0141                	addi	sp,sp,16
1c00b862:	8082                	ret
    __rt_event_execute(rt_event_internal_sched(), 1);
1c00b864:	4585                	li	a1,1
1c00b866:	01c00513          	li	a0,28
1c00b86a:	2989                	jal	1c00bcbc <__rt_event_execute>
1c00b86c:	b7c5                	j	1c00b84c <__rt_fc_lock+0x10>

1c00b86e <__rt_fc_unlock>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b86e:	300476f3          	csrrci	a3,mstatus,8

static int __rt_fc_unlock_to_cluster(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_CLUSTER)
  if (lock->waiting) {
1c00b872:	415c                	lw	a5,4(a0)
1c00b874:	e791                	bnez	a5,1c00b880 <__rt_fc_unlock+0x12>
{
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  if (!__rt_fc_unlock_to_cluster(lock))
  {
    lock->locked = 0;    
1c00b876:	00052023          	sw	zero,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c00b87a:	30069073          	csrw	mstatus,a3
  }
  rt_irq_restore(irq);
#else
  rt_tas_unlock_32((uint32_t)&lock->lock, 0);
#endif
}
1c00b87e:	8082                	ret
    lock->waiting = req->next;
1c00b880:	43d8                	lw	a4,4(a5)
1c00b882:	c158                	sw	a4,4(a0)
    req->done = 1;
1c00b884:	4705                	li	a4,1
1c00b886:	08e78423          	sb	a4,136(a5)
    __rt_cluster_notif_req_done(req->cid);
1c00b88a:	0897c783          	lbu	a5,137(a5)
  pulp_write32(evtAddr, coreSet);
1c00b88e:	00201737          	lui	a4,0x201
1c00b892:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00b896:	04078793          	addi	a5,a5,64
1c00b89a:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c00b89c:	0007e723          	p.sw	zero,a4(a5)
1c00b8a0:	bfe9                	j	1c00b87a <__rt_fc_unlock+0xc>

1c00b8a2 <__rt_fc_cluster_lock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b8a2:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00b8a6:	8795                	srai	a5,a5,0x5
1c00b8a8:	f267b7b3          	p.bclr	a5,a5,25,6
#if defined(ARCHI_HAS_FC)

void __rt_fc_cluster_lock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c00b8ac:	08f584a3          	sb	a5,137(a1)
  req->done = 0;
  req->req_lock = 1;
1c00b8b0:	4785                	li	a5,1
1c00b8b2:	08f58523          	sb	a5,138(a1)
  event->arg[0] = (uintptr_t)callback;
1c00b8b6:	1c00b7b7          	lui	a5,0x1c00b
1c00b8ba:	73078793          	addi	a5,a5,1840 # 1c00b730 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c00b8be:	c188                	sw	a0,0(a1)
  req->done = 0;
1c00b8c0:	08058423          	sb	zero,136(a1)
  event->implem.pending = 0;
1c00b8c4:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c00b8c8:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c00b8cc:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c00b8ce:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c00b8d0:	05a1                	addi	a1,a1,8

// This function will push an event from cluster to FC and the event callback
// will be executed directly from within the interrupt handler
static inline void __rt_cluster_push_fc_irq_event(rt_event_t *event)
{
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)event) | 0x1));
1c00b8d2:	c005c533          	p.bset	a0,a1,0,0
1c00b8d6:	2b00106f          	j	1c00cb86 <__rt_cluster_push_fc_event>

1c00b8da <__rt_fc_cluster_unlock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b8da:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00b8de:	8795                	srai	a5,a5,0x5
1c00b8e0:	f267b7b3          	p.bclr	a5,a5,25,6
}

void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c00b8e4:	08f584a3          	sb	a5,137(a1)
  event->arg[0] = (uintptr_t)callback;
1c00b8e8:	1c00b7b7          	lui	a5,0x1c00b
1c00b8ec:	73078793          	addi	a5,a5,1840 # 1c00b730 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c00b8f0:	c188                	sw	a0,0(a1)
  req->done = 0;
1c00b8f2:	08058423          	sb	zero,136(a1)
  req->req_lock = 0;
1c00b8f6:	08058523          	sb	zero,138(a1)
  event->implem.pending = 0;
1c00b8fa:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c00b8fe:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c00b902:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c00b904:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c00b906:	05a1                	addi	a1,a1,8
1c00b908:	c005c533          	p.bset	a0,a1,0,0
1c00b90c:	27a0106f          	j	1c00cb86 <__rt_cluster_push_fc_event>

1c00b910 <__rt_event_enqueue>:

    __rt_wait_event_check(event, call_event);
  }

  rt_irq_restore(irq);
}
1c00b910:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c00b914:	00052023          	sw	zero,0(a0)
1c00b918:	01c00713          	li	a4,28
1c00b91c:	c689                	beqz	a3,1c00b926 <__rt_event_enqueue+0x16>
1c00b91e:	435c                	lw	a5,4(a4)
1c00b920:	c388                	sw	a0,0(a5)
1c00b922:	c348                	sw	a0,4(a4)
1c00b924:	8082                	ret
1c00b926:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00b92a:	bfe5                	j	1c00b922 <__rt_event_enqueue+0x12>

1c00b92c <__rt_bridge_check_bridge_req.part.5>:
1c00b92c:	1c010737          	lui	a4,0x1c010
1c00b930:	6e070793          	addi	a5,a4,1760 # 1c0106e0 <__hal_debug_struct>
1c00b934:	0a47a783          	lw	a5,164(a5)
1c00b938:	6e070713          	addi	a4,a4,1760
1c00b93c:	c789                	beqz	a5,1c00b946 <__rt_bridge_check_bridge_req.part.5+0x1a>
1c00b93e:	4f94                	lw	a3,24(a5)
1c00b940:	e681                	bnez	a3,1c00b948 <__rt_bridge_check_bridge_req.part.5+0x1c>
1c00b942:	0af72623          	sw	a5,172(a4)
1c00b946:	8082                	ret
1c00b948:	479c                	lw	a5,8(a5)
1c00b94a:	bfcd                	j	1c00b93c <__rt_bridge_check_bridge_req.part.5+0x10>

1c00b94c <__rt_bridge_wait>:
1c00b94c:	014027f3          	csrr	a5,uhartid
1c00b950:	02000713          	li	a4,32
1c00b954:	ca5797b3          	p.extractu	a5,a5,5,5
1c00b958:	02e79c63          	bne	a5,a4,1c00b990 <__rt_bridge_wait+0x44>
1c00b95c:	1141                	addi	sp,sp,-16
1c00b95e:	c422                	sw	s0,8(sp)
1c00b960:	1a106437          	lui	s0,0x1a106
1c00b964:	c606                	sw	ra,12(sp)
1c00b966:	00442783          	lw	a5,4(s0) # 1a106004 <__l1_end+0xa105fc0>
1c00b96a:	c187b7b3          	p.bclr	a5,a5,0,24
1c00b96e:	00f42223          	sw	a5,4(s0)
1c00b972:	4585                	li	a1,1
1c00b974:	03800513          	li	a0,56
1c00b978:	187000ef          	jal	ra,1c00c2fe <__rt_periph_wait_event>
1c00b97c:	00442783          	lw	a5,4(s0)
1c00b980:	c187c7b3          	p.bset	a5,a5,0,24
1c00b984:	00f42223          	sw	a5,4(s0)
1c00b988:	40b2                	lw	ra,12(sp)
1c00b98a:	4422                	lw	s0,8(sp)
1c00b98c:	0141                	addi	sp,sp,16
1c00b98e:	8082                	ret
1c00b990:	8082                	ret

1c00b992 <__rt_bridge_handle_notif>:
1c00b992:	1141                	addi	sp,sp,-16
1c00b994:	c422                	sw	s0,8(sp)
1c00b996:	1c010437          	lui	s0,0x1c010
1c00b99a:	6e040793          	addi	a5,s0,1760 # 1c0106e0 <__hal_debug_struct>
1c00b99e:	0a47a783          	lw	a5,164(a5)
1c00b9a2:	c606                	sw	ra,12(sp)
1c00b9a4:	c226                	sw	s1,4(sp)
1c00b9a6:	c04a                	sw	s2,0(sp)
1c00b9a8:	6e040413          	addi	s0,s0,1760
1c00b9ac:	c399                	beqz	a5,1c00b9b2 <__rt_bridge_handle_notif+0x20>
1c00b9ae:	4bd8                	lw	a4,20(a5)
1c00b9b0:	e31d                	bnez	a4,1c00b9d6 <__rt_bridge_handle_notif+0x44>
1c00b9b2:	0b442783          	lw	a5,180(s0)
1c00b9b6:	c791                	beqz	a5,1c00b9c2 <__rt_bridge_handle_notif+0x30>
1c00b9b8:	43a8                	lw	a0,64(a5)
1c00b9ba:	0a042a23          	sw	zero,180(s0)
1c00b9be:	f53ff0ef          	jal	ra,1c00b910 <__rt_event_enqueue>
1c00b9c2:	0ac42783          	lw	a5,172(s0)
1c00b9c6:	ef85                	bnez	a5,1c00b9fe <__rt_bridge_handle_notif+0x6c>
1c00b9c8:	4422                	lw	s0,8(sp)
1c00b9ca:	40b2                	lw	ra,12(sp)
1c00b9cc:	4492                	lw	s1,4(sp)
1c00b9ce:	4902                	lw	s2,0(sp)
1c00b9d0:	0141                	addi	sp,sp,16
1c00b9d2:	f5bff06f          	j	1c00b92c <__rt_bridge_check_bridge_req.part.5>
1c00b9d6:	4784                	lw	s1,8(a5)
1c00b9d8:	4fd8                	lw	a4,28(a5)
1c00b9da:	0a942223          	sw	s1,164(s0)
1c00b9de:	cb01                	beqz	a4,1c00b9ee <__rt_bridge_handle_notif+0x5c>
1c00b9e0:	0b042703          	lw	a4,176(s0)
1c00b9e4:	c798                	sw	a4,8(a5)
1c00b9e6:	0af42823          	sw	a5,176(s0)
1c00b9ea:	87a6                	mv	a5,s1
1c00b9ec:	b7c1                	j	1c00b9ac <__rt_bridge_handle_notif+0x1a>
1c00b9ee:	43a8                	lw	a0,64(a5)
1c00b9f0:	30047973          	csrrci	s2,mstatus,8
1c00b9f4:	f1dff0ef          	jal	ra,1c00b910 <__rt_event_enqueue>
1c00b9f8:	30091073          	csrw	mstatus,s2
1c00b9fc:	b7fd                	j	1c00b9ea <__rt_bridge_handle_notif+0x58>
1c00b9fe:	40b2                	lw	ra,12(sp)
1c00ba00:	4422                	lw	s0,8(sp)
1c00ba02:	4492                	lw	s1,4(sp)
1c00ba04:	4902                	lw	s2,0(sp)
1c00ba06:	0141                	addi	sp,sp,16
1c00ba08:	8082                	ret

1c00ba0a <__rt_bridge_check_connection>:
1c00ba0a:	1c0106b7          	lui	a3,0x1c010
1c00ba0e:	6e068693          	addi	a3,a3,1760 # 1c0106e0 <__hal_debug_struct>
1c00ba12:	469c                	lw	a5,8(a3)
1c00ba14:	e3a1                	bnez	a5,1c00ba54 <__rt_bridge_check_connection+0x4a>
1c00ba16:	1a1047b7          	lui	a5,0x1a104
1c00ba1a:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104030>
1c00ba1e:	4398                	lw	a4,0(a5)
1c00ba20:	8325                	srli	a4,a4,0x9
1c00ba22:	f8373733          	p.bclr	a4,a4,28,3
1c00ba26:	02773763          	p.bneimm	a4,7,1c00ba54 <__rt_bridge_check_connection+0x4a>
1c00ba2a:	1141                	addi	sp,sp,-16
1c00ba2c:	c422                	sw	s0,8(sp)
1c00ba2e:	c606                	sw	ra,12(sp)
1c00ba30:	4705                	li	a4,1
1c00ba32:	c698                	sw	a4,8(a3)
1c00ba34:	4709                	li	a4,2
1c00ba36:	c398                	sw	a4,0(a5)
1c00ba38:	843e                	mv	s0,a5
1c00ba3a:	401c                	lw	a5,0(s0)
1c00ba3c:	83a5                	srli	a5,a5,0x9
1c00ba3e:	f837b7b3          	p.bclr	a5,a5,28,3
1c00ba42:	0077a663          	p.beqimm	a5,7,1c00ba4e <__rt_bridge_check_connection+0x44>
1c00ba46:	40b2                	lw	ra,12(sp)
1c00ba48:	4422                	lw	s0,8(sp)
1c00ba4a:	0141                	addi	sp,sp,16
1c00ba4c:	8082                	ret
1c00ba4e:	effff0ef          	jal	ra,1c00b94c <__rt_bridge_wait>
1c00ba52:	b7e5                	j	1c00ba3a <__rt_bridge_check_connection+0x30>
1c00ba54:	8082                	ret

1c00ba56 <__rt_bridge_set_available>:
1c00ba56:	1c0107b7          	lui	a5,0x1c010
1c00ba5a:	6e078793          	addi	a5,a5,1760 # 1c0106e0 <__hal_debug_struct>
1c00ba5e:	4798                	lw	a4,8(a5)
1c00ba60:	1a1047b7          	lui	a5,0x1a104
1c00ba64:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104030>
1c00ba68:	e701                	bnez	a4,1c00ba70 <__rt_bridge_set_available+0x1a>
1c00ba6a:	4721                	li	a4,8
1c00ba6c:	c398                	sw	a4,0(a5)
1c00ba6e:	8082                	ret
1c00ba70:	4709                	li	a4,2
1c00ba72:	bfed                	j	1c00ba6c <__rt_bridge_set_available+0x16>

1c00ba74 <__rt_bridge_send_notif>:
1c00ba74:	1141                	addi	sp,sp,-16
1c00ba76:	c606                	sw	ra,12(sp)
1c00ba78:	f93ff0ef          	jal	ra,1c00ba0a <__rt_bridge_check_connection>
1c00ba7c:	1c0107b7          	lui	a5,0x1c010
1c00ba80:	6e078793          	addi	a5,a5,1760 # 1c0106e0 <__hal_debug_struct>
1c00ba84:	479c                	lw	a5,8(a5)
1c00ba86:	c789                	beqz	a5,1c00ba90 <__rt_bridge_send_notif+0x1c>
1c00ba88:	1a1047b7          	lui	a5,0x1a104
1c00ba8c:	4719                	li	a4,6
1c00ba8e:	dbf8                	sw	a4,116(a5)
1c00ba90:	40b2                	lw	ra,12(sp)
1c00ba92:	0141                	addi	sp,sp,16
1c00ba94:	8082                	ret

1c00ba96 <__rt_bridge_clear_notif>:
  #endif
  }
}

void __rt_bridge_clear_notif()
{
1c00ba96:	1141                	addi	sp,sp,-16
1c00ba98:	c606                	sw	ra,12(sp)
  hal_debug_struct_t *debug_struct = hal_debug_struct_get();

  __rt_bridge_check_connection();
1c00ba9a:	f71ff0ef          	jal	ra,1c00ba0a <__rt_bridge_check_connection>

  if (debug_struct->bridge.connected)
1c00ba9e:	1c0107b7          	lui	a5,0x1c010
1c00baa2:	6e078793          	addi	a5,a5,1760 # 1c0106e0 <__hal_debug_struct>
1c00baa6:	479c                	lw	a5,8(a5)
1c00baa8:	c789                	beqz	a5,1c00bab2 <__rt_bridge_clear_notif+0x1c>
  {
    __rt_bridge_set_available();
  }
}
1c00baaa:	40b2                	lw	ra,12(sp)
1c00baac:	0141                	addi	sp,sp,16
    __rt_bridge_set_available();
1c00baae:	fa9ff06f          	j	1c00ba56 <__rt_bridge_set_available>
}
1c00bab2:	40b2                	lw	ra,12(sp)
1c00bab4:	0141                	addi	sp,sp,16
1c00bab6:	8082                	ret

1c00bab8 <__rt_bridge_printf_flush>:
{
1c00bab8:	1141                	addi	sp,sp,-16
1c00baba:	c422                	sw	s0,8(sp)
1c00babc:	c606                	sw	ra,12(sp)
  if (debug_struct->bridge.connected)
1c00babe:	1c010437          	lui	s0,0x1c010
  __rt_bridge_check_connection();
1c00bac2:	f49ff0ef          	jal	ra,1c00ba0a <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c00bac6:	6e040793          	addi	a5,s0,1760 # 1c0106e0 <__hal_debug_struct>
1c00baca:	479c                	lw	a5,8(a5)
1c00bacc:	c39d                	beqz	a5,1c00baf2 <__rt_bridge_printf_flush+0x3a>
1c00bace:	6e040413          	addi	s0,s0,1760
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
}

static inline int hal_debug_is_busy(hal_debug_struct_t *debug_struct)
{
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c00bad2:	485c                	lw	a5,20(s0)
    if (hal_debug_is_busy(hal_debug_struct_get()) || !hal_debug_is_empty(hal_debug_struct_get()))
1c00bad4:	e399                	bnez	a5,1c00bada <__rt_bridge_printf_flush+0x22>
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
1c00bad6:	4c1c                	lw	a5,24(s0)
1c00bad8:	cf89                	beqz	a5,1c00baf2 <__rt_bridge_printf_flush+0x3a>
      __rt_bridge_send_notif();
1c00bada:	f9bff0ef          	jal	ra,1c00ba74 <__rt_bridge_send_notif>
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c00bade:	485c                	lw	a5,20(s0)
      while(hal_debug_is_busy(hal_debug_struct_get()))
1c00bae0:	e791                	bnez	a5,1c00baec <__rt_bridge_printf_flush+0x34>
}
1c00bae2:	4422                	lw	s0,8(sp)
1c00bae4:	40b2                	lw	ra,12(sp)
1c00bae6:	0141                	addi	sp,sp,16
      __rt_bridge_clear_notif();
1c00bae8:	fafff06f          	j	1c00ba96 <__rt_bridge_clear_notif>
        __rt_bridge_wait();
1c00baec:	e61ff0ef          	jal	ra,1c00b94c <__rt_bridge_wait>
1c00baf0:	b7fd                	j	1c00bade <__rt_bridge_printf_flush+0x26>
}
1c00baf2:	40b2                	lw	ra,12(sp)
1c00baf4:	4422                	lw	s0,8(sp)
1c00baf6:	0141                	addi	sp,sp,16
1c00baf8:	8082                	ret

1c00bafa <__rt_bridge_req_shutdown>:
{
1c00bafa:	1141                	addi	sp,sp,-16
1c00bafc:	c606                	sw	ra,12(sp)
1c00bafe:	c422                	sw	s0,8(sp)
  __rt_bridge_check_connection();
1c00bb00:	f0bff0ef          	jal	ra,1c00ba0a <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c00bb04:	1c0107b7          	lui	a5,0x1c010
1c00bb08:	6e078793          	addi	a5,a5,1760 # 1c0106e0 <__hal_debug_struct>
1c00bb0c:	479c                	lw	a5,8(a5)
1c00bb0e:	c7a9                	beqz	a5,1c00bb58 <__rt_bridge_req_shutdown+0x5e>




static inline unsigned int apb_soc_jtag_reg_read() {
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00bb10:	1a104437          	lui	s0,0x1a104
    __rt_bridge_printf_flush();
1c00bb14:	fa5ff0ef          	jal	ra,1c00bab8 <__rt_bridge_printf_flush>
1c00bb18:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c00bb1c:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c00bb1e:	83a5                	srli	a5,a5,0x9
1c00bb20:	f837b7b3          	p.bclr	a5,a5,28,3
1c00bb24:	0277ae63          	p.beqimm	a5,7,1c00bb60 <__rt_bridge_req_shutdown+0x66>
}

static inline void apb_soc_jtag_reg_write(unsigned int value) {
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00bb28:	4791                	li	a5,4
1c00bb2a:	c01c                	sw	a5,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00bb2c:	1a104437          	lui	s0,0x1a104
1c00bb30:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c00bb34:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) != 7)
1c00bb36:	83a5                	srli	a5,a5,0x9
1c00bb38:	f837b7b3          	p.bclr	a5,a5,28,3
1c00bb3c:	0277b563          	p.bneimm	a5,7,1c00bb66 <__rt_bridge_req_shutdown+0x6c>
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00bb40:	00042023          	sw	zero,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00bb44:	1a104437          	lui	s0,0x1a104
1c00bb48:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c00bb4c:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c00bb4e:	83a5                	srli	a5,a5,0x9
1c00bb50:	f837b7b3          	p.bclr	a5,a5,28,3
1c00bb54:	0077ac63          	p.beqimm	a5,7,1c00bb6c <__rt_bridge_req_shutdown+0x72>
}
1c00bb58:	40b2                	lw	ra,12(sp)
1c00bb5a:	4422                	lw	s0,8(sp)
1c00bb5c:	0141                	addi	sp,sp,16
1c00bb5e:	8082                	ret
      __rt_bridge_wait();
1c00bb60:	dedff0ef          	jal	ra,1c00b94c <__rt_bridge_wait>
1c00bb64:	bf65                	j	1c00bb1c <__rt_bridge_req_shutdown+0x22>
      __rt_bridge_wait();
1c00bb66:	de7ff0ef          	jal	ra,1c00b94c <__rt_bridge_wait>
1c00bb6a:	b7e9                	j	1c00bb34 <__rt_bridge_req_shutdown+0x3a>
      __rt_bridge_wait();
1c00bb6c:	de1ff0ef          	jal	ra,1c00b94c <__rt_bridge_wait>
1c00bb70:	bff1                	j	1c00bb4c <__rt_bridge_req_shutdown+0x52>

1c00bb72 <__rt_bridge_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_bridge_init()
{
  hal_bridge_t *bridge = hal_bridge_get();
  
  bridge->first_req = 0;
1c00bb72:	1c0107b7          	lui	a5,0x1c010
  bridge->notif_req_addr = ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET;
  bridge->notif_req_value = 1<<RT_BRIDGE_ENQUEUE_EVENT;
#else
#if defined(EU_VERSION) && EU_VERSION >= 3
#if defined(ARCHI_HAS_FC)
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c00bb76:	1b201737          	lui	a4,0x1b201
  bridge->first_req = 0;
1c00bb7a:	6e078793          	addi	a5,a5,1760 # 1c0106e0 <__hal_debug_struct>
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c00bb7e:	e1070713          	addi	a4,a4,-496 # 1b200e10 <__fc_tcdm_end+0x1ff9f0>
1c00bb82:	0ae7ac23          	sw	a4,184(a5)
  bridge->notif_req_value = 1;
1c00bb86:	4705                	li	a4,1
  bridge->first_req = 0;
1c00bb88:	0a07a223          	sw	zero,164(a5)
  bridge->first_bridge_req = 0;
1c00bb8c:	0a07a623          	sw	zero,172(a5)
  bridge->target_req = 0;
1c00bb90:	0a07aa23          	sw	zero,180(a5)
  bridge->notif_req_value = 1;
1c00bb94:	0ae7ae23          	sw	a4,188(a5)
#endif
#endif
#endif

  __rt_bridge_eeprom_handle = NULL;
1c00bb98:	00400793          	li	a5,4
1c00bb9c:	0007a823          	sw	zero,16(a5)
  __rt_bridge_flash_handle = NULL;
1c00bba0:	0007a023          	sw	zero,0(a5)
}
1c00bba4:	8082                	ret

1c00bba6 <__rt_event_init>:
{
  __rt_event_execute(sched, 0);
  rt_wait_for_interrupt();
  rt_irq_enable();
  rt_irq_disable();
}
1c00bba6:	1141                	addi	sp,sp,-16
1c00bba8:	c422                	sw	s0,8(sp)
1c00bbaa:	c606                	sw	ra,12(sp)
1c00bbac:	842a                	mv	s0,a0
1c00bbae:	02052223          	sw	zero,36(a0)
1c00bbb2:	02052423          	sw	zero,40(a0)
1c00bbb6:	45c1                	li	a1,16
1c00bbb8:	4501                	li	a0,0
1c00bbba:	2cbd                	jal	1c00be38 <rt_alloc>
1c00bbbc:	dc68                	sw	a0,124(s0)
1c00bbbe:	02042a23          	sw	zero,52(s0)
1c00bbc2:	00042223          	sw	zero,4(s0)
1c00bbc6:	40b2                	lw	ra,12(sp)
1c00bbc8:	4422                	lw	s0,8(sp)
1c00bbca:	0141                	addi	sp,sp,16
1c00bbcc:	8082                	ret

1c00bbce <__rt_wait_event_prepare_blocking>:
1c00bbce:	01800793          	li	a5,24
1c00bbd2:	4388                	lw	a0,0(a5)
1c00bbd4:	4118                	lw	a4,0(a0)
1c00bbd6:	02052423          	sw	zero,40(a0)
1c00bbda:	00052223          	sw	zero,4(a0)
1c00bbde:	c398                	sw	a4,0(a5)
1c00bbe0:	4785                	li	a5,1
1c00bbe2:	d15c                	sw	a5,36(a0)
1c00bbe4:	8082                	ret

1c00bbe6 <rt_event_alloc>:
1c00bbe6:	1101                	addi	sp,sp,-32
1c00bbe8:	c64e                	sw	s3,12(sp)
1c00bbea:	89ae                	mv	s3,a1
1c00bbec:	ce06                	sw	ra,28(sp)
1c00bbee:	cc22                	sw	s0,24(sp)
1c00bbf0:	ca26                	sw	s1,20(sp)
1c00bbf2:	c84a                	sw	s2,16(sp)
1c00bbf4:	c452                	sw	s4,8(sp)
1c00bbf6:	c256                	sw	s5,4(sp)
1c00bbf8:	30047a73          	csrrci	s4,mstatus,8
1c00bbfc:	014027f3          	csrr	a5,uhartid
1c00bc00:	8795                	srai	a5,a5,0x5
1c00bc02:	f267b7b3          	p.bclr	a5,a5,25,6
1c00bc06:	02000713          	li	a4,32
1c00bc0a:	00278513          	addi	a0,a5,2
1c00bc0e:	00e79363          	bne	a5,a4,1c00bc14 <rt_event_alloc+0x2e>
1c00bc12:	4505                	li	a0,1
1c00bc14:	00799593          	slli	a1,s3,0x7
1c00bc18:	2405                	jal	1c00be38 <rt_alloc>
1c00bc1a:	842a                	mv	s0,a0
1c00bc1c:	557d                	li	a0,-1
1c00bc1e:	c819                	beqz	s0,1c00bc34 <rt_event_alloc+0x4e>
1c00bc20:	01800493          	li	s1,24
1c00bc24:	4901                	li	s2,0
1c00bc26:	00448a93          	addi	s5,s1,4
1c00bc2a:	01394e63          	blt	s2,s3,1c00bc46 <rt_event_alloc+0x60>
1c00bc2e:	300a1073          	csrw	mstatus,s4
1c00bc32:	4501                	li	a0,0
1c00bc34:	40f2                	lw	ra,28(sp)
1c00bc36:	4462                	lw	s0,24(sp)
1c00bc38:	44d2                	lw	s1,20(sp)
1c00bc3a:	4942                	lw	s2,16(sp)
1c00bc3c:	49b2                	lw	s3,12(sp)
1c00bc3e:	4a22                	lw	s4,8(sp)
1c00bc40:	4a92                	lw	s5,4(sp)
1c00bc42:	6105                	addi	sp,sp,32
1c00bc44:	8082                	ret
1c00bc46:	8522                	mv	a0,s0
1c00bc48:	85d6                	mv	a1,s5
1c00bc4a:	f5dff0ef          	jal	ra,1c00bba6 <__rt_event_init>
1c00bc4e:	409c                	lw	a5,0(s1)
1c00bc50:	0905                	addi	s2,s2,1
1c00bc52:	c01c                	sw	a5,0(s0)
1c00bc54:	c080                	sw	s0,0(s1)
1c00bc56:	08040413          	addi	s0,s0,128
1c00bc5a:	bfc1                	j	1c00bc2a <rt_event_alloc+0x44>

1c00bc5c <rt_event_get>:
1c00bc5c:	30047773          	csrrci	a4,mstatus,8
1c00bc60:	01800793          	li	a5,24
1c00bc64:	4388                	lw	a0,0(a5)
1c00bc66:	c509                	beqz	a0,1c00bc70 <rt_event_get+0x14>
1c00bc68:	4114                	lw	a3,0(a0)
1c00bc6a:	c14c                	sw	a1,4(a0)
1c00bc6c:	c510                	sw	a2,8(a0)
1c00bc6e:	c394                	sw	a3,0(a5)
1c00bc70:	30071073          	csrw	mstatus,a4
1c00bc74:	8082                	ret

1c00bc76 <rt_event_get_blocking>:
1c00bc76:	30047773          	csrrci	a4,mstatus,8
1c00bc7a:	01800793          	li	a5,24
1c00bc7e:	4388                	lw	a0,0(a5)
1c00bc80:	c909                	beqz	a0,1c00bc92 <rt_event_get_blocking+0x1c>
1c00bc82:	4114                	lw	a3,0(a0)
1c00bc84:	00052223          	sw	zero,4(a0)
1c00bc88:	00052423          	sw	zero,8(a0)
1c00bc8c:	c394                	sw	a3,0(a5)
1c00bc8e:	4785                	li	a5,1
1c00bc90:	d15c                	sw	a5,36(a0)
1c00bc92:	30071073          	csrw	mstatus,a4
1c00bc96:	8082                	ret

1c00bc98 <rt_event_push>:
1c00bc98:	30047773          	csrrci	a4,mstatus,8
1c00bc9c:	01800693          	li	a3,24
1c00bca0:	42d4                	lw	a3,4(a3)
1c00bca2:	00052023          	sw	zero,0(a0)
1c00bca6:	01800793          	li	a5,24
1c00bcaa:	e691                	bnez	a3,1c00bcb6 <rt_event_push+0x1e>
1c00bcac:	c3c8                	sw	a0,4(a5)
1c00bcae:	c788                	sw	a0,8(a5)
1c00bcb0:	30071073          	csrw	mstatus,a4
1c00bcb4:	8082                	ret
1c00bcb6:	4794                	lw	a3,8(a5)
1c00bcb8:	c288                	sw	a0,0(a3)
1c00bcba:	bfd5                	j	1c00bcae <rt_event_push+0x16>

1c00bcbc <__rt_event_execute>:
1c00bcbc:	1141                	addi	sp,sp,-16
1c00bcbe:	c422                	sw	s0,8(sp)
1c00bcc0:	01800793          	li	a5,24
1c00bcc4:	43dc                	lw	a5,4(a5)
1c00bcc6:	c606                	sw	ra,12(sp)
1c00bcc8:	c226                	sw	s1,4(sp)
1c00bcca:	01800413          	li	s0,24
1c00bcce:	ef81                	bnez	a5,1c00bce6 <__rt_event_execute+0x2a>
1c00bcd0:	c1b9                	beqz	a1,1c00bd16 <__rt_event_execute+0x5a>
1c00bcd2:	002047b7          	lui	a5,0x204
1c00bcd6:	0387e703          	p.elw	a4,56(a5) # 204038 <__L2+0x184038>
1c00bcda:	300467f3          	csrrsi	a5,mstatus,8
1c00bcde:	300477f3          	csrrci	a5,mstatus,8
1c00bce2:	405c                	lw	a5,4(s0)
1c00bce4:	cb8d                	beqz	a5,1c00bd16 <__rt_event_execute+0x5a>
1c00bce6:	4485                	li	s1,1
1c00bce8:	4398                	lw	a4,0(a5)
1c00bcea:	5794                	lw	a3,40(a5)
1c00bcec:	00978a23          	sb	s1,20(a5)
1c00bcf0:	c058                	sw	a4,4(s0)
1c00bcf2:	4788                	lw	a0,8(a5)
1c00bcf4:	43d8                	lw	a4,4(a5)
1c00bcf6:	e691                	bnez	a3,1c00bd02 <__rt_event_execute+0x46>
1c00bcf8:	53d4                	lw	a3,36(a5)
1c00bcfa:	e681                	bnez	a3,1c00bd02 <__rt_event_execute+0x46>
1c00bcfc:	4014                	lw	a3,0(s0)
1c00bcfe:	c394                	sw	a3,0(a5)
1c00bd00:	c01c                	sw	a5,0(s0)
1c00bd02:	0207a223          	sw	zero,36(a5)
1c00bd06:	c711                	beqz	a4,1c00bd12 <__rt_event_execute+0x56>
1c00bd08:	300467f3          	csrrsi	a5,mstatus,8
1c00bd0c:	9702                	jalr	a4
1c00bd0e:	300477f3          	csrrci	a5,mstatus,8
1c00bd12:	405c                	lw	a5,4(s0)
1c00bd14:	fbf1                	bnez	a5,1c00bce8 <__rt_event_execute+0x2c>
1c00bd16:	40b2                	lw	ra,12(sp)
1c00bd18:	4422                	lw	s0,8(sp)
1c00bd1a:	4492                	lw	s1,4(sp)
1c00bd1c:	0141                	addi	sp,sp,16
1c00bd1e:	8082                	ret

1c00bd20 <__rt_wait_event>:
  } while(event);

}

void __rt_wait_event(rt_event_t *event)
{
1c00bd20:	1141                	addi	sp,sp,-16
1c00bd22:	c422                	sw	s0,8(sp)
1c00bd24:	c606                	sw	ra,12(sp)
1c00bd26:	842a                	mv	s0,a0
  while (event->implem.pending || event->implem.saved_pending) {
1c00bd28:	505c                	lw	a5,36(s0)
1c00bd2a:	ef81                	bnez	a5,1c00bd42 <__rt_wait_event+0x22>
1c00bd2c:	585c                	lw	a5,52(s0)
1c00bd2e:	eb91                	bnez	a5,1c00bd42 <__rt_wait_event+0x22>
    __rt_event_execute(NULL, 1);
  }

  event->next = __rt_first_free;
1c00bd30:	01800793          	li	a5,24
1c00bd34:	4398                	lw	a4,0(a5)
  __rt_first_free = event;
}
1c00bd36:	40b2                	lw	ra,12(sp)
  event->next = __rt_first_free;
1c00bd38:	c018                	sw	a4,0(s0)
  __rt_first_free = event;
1c00bd3a:	c380                	sw	s0,0(a5)
}
1c00bd3c:	4422                	lw	s0,8(sp)
1c00bd3e:	0141                	addi	sp,sp,16
1c00bd40:	8082                	ret
    __rt_event_execute(NULL, 1);
1c00bd42:	4585                	li	a1,1
1c00bd44:	4501                	li	a0,0
1c00bd46:	f77ff0ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00bd4a:	bff9                	j	1c00bd28 <__rt_wait_event+0x8>

1c00bd4c <rt_event_wait>:

void rt_event_wait(rt_event_t *event)
{
1c00bd4c:	1141                	addi	sp,sp,-16
1c00bd4e:	c606                	sw	ra,12(sp)
1c00bd50:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bd52:	30047473          	csrrci	s0,mstatus,8
  int irq = rt_irq_disable();
__rt_wait_event(event);
1c00bd56:	fcbff0ef          	jal	ra,1c00bd20 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00bd5a:	30041073          	csrw	mstatus,s0
  rt_irq_restore(irq);
}
1c00bd5e:	40b2                	lw	ra,12(sp)
1c00bd60:	4422                	lw	s0,8(sp)
1c00bd62:	0141                	addi	sp,sp,16
1c00bd64:	8082                	ret

1c00bd66 <__rt_event_sched_init>:

void __rt_event_sched_init()
{
  __rt_first_free = NULL;
1c00bd66:	01800513          	li	a0,24
1c00bd6a:	00052023          	sw	zero,0(a0)
  sched->first = NULL;
1c00bd6e:	00052223          	sw	zero,4(a0)
  rt_event_sched_init(&__rt_sched);
  // Push one event ot the runtime scheduler as some runtime services need
  // one event.
  rt_event_alloc(&__rt_sched, 1);
1c00bd72:	4585                	li	a1,1
1c00bd74:	0511                	addi	a0,a0,4
1c00bd76:	e71ff06f          	j	1c00bbe6 <rt_event_alloc>

1c00bd7a <pi_task_push_delayed_us>:
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
  rt_event_push_delayed(task, delay);
1c00bd7a:	ac05                	j	1c00bfaa <rt_event_push_delayed>

1c00bd7c <pi_cl_send_task_to_fc>:
}

static inline void __rt_task_init_from_cluster(pi_task_t *task)
{
  task->implem.keep = 1;
1c00bd7c:	4785                	li	a5,1
1c00bd7e:	d51c                	sw	a5,40(a0)
#ifdef ARCHI_HAS_CLUSTER

void pi_cl_send_task_to_fc(pi_task_t *task)
{
  __rt_task_init_from_cluster(task);
  __rt_cluster_push_fc_event(task);
1c00bd80:	6070006f          	j	1c00cb86 <__rt_cluster_push_fc_event>

1c00bd84 <rt_user_alloc_init>:


void rt_free(rt_alloc_e flags, void *_chunk, int size)
{
#if defined(ARCHI_HAS_L1)
  if (flags >= RT_ALLOC_CL_DATA) return rt_user_free(rt_alloc_l1(flags - RT_ALLOC_CL_DATA), _chunk, size);
1c00bd84:	00758793          	addi	a5,a1,7
1c00bd88:	c407b7b3          	p.bclr	a5,a5,2,0
1c00bd8c:	40b785b3          	sub	a1,a5,a1
1c00bd90:	c11c                	sw	a5,0(a0)
1c00bd92:	8e0d                	sub	a2,a2,a1
1c00bd94:	00c05763          	blez	a2,1c00bda2 <rt_user_alloc_init+0x1e>
1c00bd98:	c4063633          	p.bclr	a2,a2,2,0
1c00bd9c:	c390                	sw	a2,0(a5)
1c00bd9e:	0007a223          	sw	zero,4(a5)
1c00bda2:	8082                	ret

1c00bda4 <rt_user_alloc>:
1c00bda4:	411c                	lw	a5,0(a0)
1c00bda6:	059d                	addi	a1,a1,7
1c00bda8:	c405b5b3          	p.bclr	a1,a1,2,0
1c00bdac:	4701                	li	a4,0
1c00bdae:	cb89                	beqz	a5,1c00bdc0 <rt_user_alloc+0x1c>
1c00bdb0:	4394                	lw	a3,0(a5)
1c00bdb2:	43d0                	lw	a2,4(a5)
1c00bdb4:	00b6c863          	blt	a3,a1,1c00bdc4 <rt_user_alloc+0x20>
1c00bdb8:	00b69b63          	bne	a3,a1,1c00bdce <rt_user_alloc+0x2a>
1c00bdbc:	c719                	beqz	a4,1c00bdca <rt_user_alloc+0x26>
1c00bdbe:	c350                	sw	a2,4(a4)
1c00bdc0:	853e                	mv	a0,a5
1c00bdc2:	8082                	ret
1c00bdc4:	873e                	mv	a4,a5
1c00bdc6:	87b2                	mv	a5,a2
1c00bdc8:	b7dd                	j	1c00bdae <rt_user_alloc+0xa>
1c00bdca:	c110                	sw	a2,0(a0)
1c00bdcc:	bfd5                	j	1c00bdc0 <rt_user_alloc+0x1c>
1c00bdce:	00b78833          	add	a6,a5,a1
1c00bdd2:	40b685b3          	sub	a1,a3,a1
1c00bdd6:	00b82023          	sw	a1,0(a6)
1c00bdda:	00c82223          	sw	a2,4(a6)
1c00bdde:	c701                	beqz	a4,1c00bde6 <rt_user_alloc+0x42>
1c00bde0:	01072223          	sw	a6,4(a4)
1c00bde4:	bff1                	j	1c00bdc0 <rt_user_alloc+0x1c>
1c00bde6:	01052023          	sw	a6,0(a0)
1c00bdea:	bfd9                	j	1c00bdc0 <rt_user_alloc+0x1c>

1c00bdec <rt_user_free>:
1c00bdec:	411c                	lw	a5,0(a0)
1c00bdee:	061d                	addi	a2,a2,7
1c00bdf0:	c4063633          	p.bclr	a2,a2,2,0
1c00bdf4:	4701                	li	a4,0
1c00bdf6:	c399                	beqz	a5,1c00bdfc <rt_user_free+0x10>
1c00bdf8:	02b7e763          	bltu	a5,a1,1c00be26 <rt_user_free+0x3a>
1c00bdfc:	00c586b3          	add	a3,a1,a2
1c00be00:	02d79663          	bne	a5,a3,1c00be2c <rt_user_free+0x40>
1c00be04:	4394                	lw	a3,0(a5)
1c00be06:	43dc                	lw	a5,4(a5)
1c00be08:	9636                	add	a2,a2,a3
1c00be0a:	c190                	sw	a2,0(a1)
1c00be0c:	c1dc                	sw	a5,4(a1)
1c00be0e:	c31d                	beqz	a4,1c00be34 <rt_user_free+0x48>
1c00be10:	4314                	lw	a3,0(a4)
1c00be12:	00d707b3          	add	a5,a4,a3
1c00be16:	00f59d63          	bne	a1,a5,1c00be30 <rt_user_free+0x44>
1c00be1a:	419c                	lw	a5,0(a1)
1c00be1c:	97b6                	add	a5,a5,a3
1c00be1e:	c31c                	sw	a5,0(a4)
1c00be20:	41dc                	lw	a5,4(a1)
1c00be22:	c35c                	sw	a5,4(a4)
1c00be24:	8082                	ret
1c00be26:	873e                	mv	a4,a5
1c00be28:	43dc                	lw	a5,4(a5)
1c00be2a:	b7f1                	j	1c00bdf6 <rt_user_free+0xa>
1c00be2c:	c190                	sw	a2,0(a1)
1c00be2e:	bff9                	j	1c00be0c <rt_user_free+0x20>
1c00be30:	c34c                	sw	a1,4(a4)
1c00be32:	8082                	ret
1c00be34:	c10c                	sw	a1,0(a0)
1c00be36:	8082                	ret

1c00be38 <rt_alloc>:
1c00be38:	4785                	li	a5,1
1c00be3a:	00a7fb63          	bleu	a0,a5,1c00be50 <rt_alloc+0x18>
1c00be3e:	1c0117b7          	lui	a5,0x1c011
1c00be42:	cc07a783          	lw	a5,-832(a5) # 1c010cc0 <__rt_alloc_l1>
1c00be46:	1579                	addi	a0,a0,-2
1c00be48:	050a                	slli	a0,a0,0x2
1c00be4a:	953e                	add	a0,a0,a5
1c00be4c:	f59ff06f          	j	1c00bda4 <rt_user_alloc>
1c00be50:	00153763          	p.bneimm	a0,1,1c00be5e <rt_alloc+0x26>
1c00be54:	1c011537          	lui	a0,0x1c011
1c00be58:	cc850513          	addi	a0,a0,-824 # 1c010cc8 <__rt_alloc_fc_tcdm>
1c00be5c:	bfc5                	j	1c00be4c <rt_alloc+0x14>
1c00be5e:	1c011537          	lui	a0,0x1c011
1c00be62:	cc450513          	addi	a0,a0,-828 # 1c010cc4 <__rt_alloc_l2>
1c00be66:	b7dd                	j	1c00be4c <rt_alloc+0x14>

1c00be68 <rt_free>:
1c00be68:	4785                	li	a5,1
1c00be6a:	00a7fb63          	bleu	a0,a5,1c00be80 <rt_free+0x18>
1c00be6e:	1c0117b7          	lui	a5,0x1c011
1c00be72:	cc07a783          	lw	a5,-832(a5) # 1c010cc0 <__rt_alloc_l1>
1c00be76:	1579                	addi	a0,a0,-2
1c00be78:	050a                	slli	a0,a0,0x2
1c00be7a:	953e                	add	a0,a0,a5
1c00be7c:	f71ff06f          	j	1c00bdec <rt_user_free>
1c00be80:	c511                	beqz	a0,1c00be8c <rt_free+0x24>
1c00be82:	1c011537          	lui	a0,0x1c011
1c00be86:	cc850513          	addi	a0,a0,-824 # 1c010cc8 <__rt_alloc_fc_tcdm>
1c00be8a:	bfcd                	j	1c00be7c <rt_free+0x14>
1c00be8c:	1c011537          	lui	a0,0x1c011
1c00be90:	cc450513          	addi	a0,a0,-828 # 1c010cc4 <__rt_alloc_l2>
1c00be94:	b7e5                	j	1c00be7c <rt_free+0x14>

1c00be96 <__rt_alloc_init_l1>:
1c00be96:	1c0117b7          	lui	a5,0x1c011
1c00be9a:	cc07a703          	lw	a4,-832(a5) # 1c010cc0 <__rt_alloc_l1>
1c00be9e:	100007b7          	lui	a5,0x10000
1c00bea2:	01651593          	slli	a1,a0,0x16
1c00bea6:	6641                	lui	a2,0x10
1c00bea8:	050a                	slli	a0,a0,0x2
1c00beaa:	04478793          	addi	a5,a5,68 # 10000044 <__l1_end>
1c00beae:	fbc60613          	addi	a2,a2,-68 # ffbc <__l1_heap_size>
1c00beb2:	95be                	add	a1,a1,a5
1c00beb4:	953a                	add	a0,a0,a4
1c00beb6:	ecfff06f          	j	1c00bd84 <rt_user_alloc_init>

1c00beba <__rt_alloc_init_l1_for_fc>:
1c00beba:	100005b7          	lui	a1,0x10000
1c00bebe:	01651793          	slli	a5,a0,0x16
1c00bec2:	04458593          	addi	a1,a1,68 # 10000044 <__l1_end>
1c00bec6:	00b78733          	add	a4,a5,a1
1c00beca:	050a                	slli	a0,a0,0x2
1c00becc:	0791                	addi	a5,a5,4
1c00bece:	6641                	lui	a2,0x10
1c00bed0:	1c0116b7          	lui	a3,0x1c011
1c00bed4:	fb860613          	addi	a2,a2,-72 # ffb8 <__rt_stack_size+0xf7b8>
1c00bed8:	95be                	add	a1,a1,a5
1c00beda:	953a                	add	a0,a0,a4
1c00bedc:	cce6a023          	sw	a4,-832(a3) # 1c010cc0 <__rt_alloc_l1>
1c00bee0:	ea5ff06f          	j	1c00bd84 <rt_user_alloc_init>

1c00bee4 <__rt_allocs_init>:
1c00bee4:	1c0115b7          	lui	a1,0x1c011
1c00bee8:	d4858793          	addi	a5,a1,-696 # 1c010d48 <__l2_end>
1c00beec:	1c080637          	lui	a2,0x1c080
1c00bef0:	1c011537          	lui	a0,0x1c011
1c00bef4:	1141                	addi	sp,sp,-16
1c00bef6:	8e1d                	sub	a2,a2,a5
1c00bef8:	d4858593          	addi	a1,a1,-696
1c00befc:	cc450513          	addi	a0,a0,-828 # 1c010cc4 <__rt_alloc_l2>
1c00bf00:	c606                	sw	ra,12(sp)
1c00bf02:	c422                	sw	s0,8(sp)
1c00bf04:	e81ff0ef          	jal	ra,1c00bd84 <rt_user_alloc_init>
1c00bf08:	1b0015b7          	lui	a1,0x1b001
1c00bf0c:	42058793          	addi	a5,a1,1056 # 1b001420 <__fc_tcdm_end>
1c00bf10:	1b004637          	lui	a2,0x1b004
1c00bf14:	1c011437          	lui	s0,0x1c011
1c00bf18:	8e1d                	sub	a2,a2,a5
1c00bf1a:	42058593          	addi	a1,a1,1056
1c00bf1e:	cc840513          	addi	a0,s0,-824 # 1c010cc8 <__rt_alloc_fc_tcdm>
1c00bf22:	e63ff0ef          	jal	ra,1c00bd84 <rt_user_alloc_init>
1c00bf26:	014027f3          	csrr	a5,uhartid
1c00bf2a:	ca5797b3          	p.extractu	a5,a5,5,5
1c00bf2e:	e799                	bnez	a5,1c00bf3c <__rt_allocs_init+0x58>
1c00bf30:	4422                	lw	s0,8(sp)
1c00bf32:	40b2                	lw	ra,12(sp)
1c00bf34:	4501                	li	a0,0
1c00bf36:	0141                	addi	sp,sp,16
1c00bf38:	f83ff06f          	j	1c00beba <__rt_alloc_init_l1_for_fc>
1c00bf3c:	cc840513          	addi	a0,s0,-824
1c00bf40:	4591                	li	a1,4
1c00bf42:	e63ff0ef          	jal	ra,1c00bda4 <rt_user_alloc>
1c00bf46:	40b2                	lw	ra,12(sp)
1c00bf48:	4422                	lw	s0,8(sp)
1c00bf4a:	1c0117b7          	lui	a5,0x1c011
1c00bf4e:	cca7a023          	sw	a0,-832(a5) # 1c010cc0 <__rt_alloc_l1>
1c00bf52:	0141                	addi	sp,sp,16
1c00bf54:	8082                	ret

1c00bf56 <pi_cl_l1_malloc>:
1c00bf56:	4509                	li	a0,2
1c00bf58:	ee1ff06f          	j	1c00be38 <rt_alloc>

1c00bf5c <pi_l2_malloc>:
    return rt_user_alloc(rt_alloc_l2(), size);
1c00bf5c:	85aa                	mv	a1,a0
1c00bf5e:	1c011537          	lui	a0,0x1c011
1c00bf62:	cc450513          	addi	a0,a0,-828 # 1c010cc4 <__rt_alloc_l2>
1c00bf66:	e3fff06f          	j	1c00bda4 <rt_user_alloc>

1c00bf6a <pi_l2_free>:
    if (base < (unsigned int)rt_l2_priv0_base() + rt_l2_priv0_size()) a = &__rt_alloc_l2[0];
    else if (base < (unsigned int)rt_l2_priv1_base() + rt_l2_priv1_size()) a = &__rt_alloc_l2[1];
    else a = &__rt_alloc_l2[2];
    rt_user_free(a, _chunk, size);
#else
    rt_user_free(rt_alloc_l2(), _chunk, size);
1c00bf6a:	862e                	mv	a2,a1
1c00bf6c:	85aa                	mv	a1,a0
1c00bf6e:	1c011537          	lui	a0,0x1c011
1c00bf72:	cc450513          	addi	a0,a0,-828 # 1c010cc4 <__rt_alloc_l2>
1c00bf76:	e77ff06f          	j	1c00bdec <rt_user_free>

1c00bf7a <__rt_time_poweroff>:
  {
    timer->current_time += timer->period;
    __rt_event_set_pending(timer->event);
    rt_event_push_delayed(timer->event, timer->current_time - rt_time_get_us());
  }
}
1c00bf7a:	002007b7          	lui	a5,0x200
1c00bf7e:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00bf82:	0087a783          	lw	a5,8(a5)
1c00bf86:	1c011737          	lui	a4,0x1c011
1c00bf8a:	c6f72a23          	sw	a5,-908(a4) # 1c010c74 <timer_count>
1c00bf8e:	4501                	li	a0,0
1c00bf90:	8082                	ret

1c00bf92 <__rt_time_poweron>:
1c00bf92:	1c0117b7          	lui	a5,0x1c011
1c00bf96:	c747a703          	lw	a4,-908(a5) # 1c010c74 <timer_count>
1c00bf9a:	002007b7          	lui	a5,0x200
1c00bf9e:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00bfa2:	00e7a423          	sw	a4,8(a5)
1c00bfa6:	4501                	li	a0,0
1c00bfa8:	8082                	ret

1c00bfaa <rt_event_push_delayed>:
1c00bfaa:	30047373          	csrrci	t1,mstatus,8
1c00bfae:	1c011637          	lui	a2,0x1c011
1c00bfb2:	ccc62703          	lw	a4,-820(a2) # 1c010ccc <first_delayed>
1c00bfb6:	002007b7          	lui	a5,0x200
1c00bfba:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00bfbe:	0087a783          	lw	a5,8(a5)
1c00bfc2:	46f9                	li	a3,30
1c00bfc4:	0405e5b3          	p.max	a1,a1,zero
1c00bfc8:	02d5c5b3          	div	a1,a1,a3
1c00bfcc:	800006b7          	lui	a3,0x80000
1c00bfd0:	fff6c693          	not	a3,a3
1c00bfd4:	00d7f833          	and	a6,a5,a3
1c00bfd8:	0585                	addi	a1,a1,1
1c00bfda:	97ae                	add	a5,a5,a1
1c00bfdc:	dd1c                	sw	a5,56(a0)
1c00bfde:	982e                	add	a6,a6,a1
1c00bfe0:	4781                	li	a5,0
1c00bfe2:	c719                	beqz	a4,1c00bff0 <rt_event_push_delayed+0x46>
1c00bfe4:	03872883          	lw	a7,56(a4)
1c00bfe8:	00d8f8b3          	and	a7,a7,a3
1c00bfec:	0108e863          	bltu	a7,a6,1c00bffc <rt_event_push_delayed+0x52>
1c00bff0:	cb89                	beqz	a5,1c00c002 <rt_event_push_delayed+0x58>
1c00bff2:	cfc8                	sw	a0,28(a5)
1c00bff4:	cd58                	sw	a4,28(a0)
1c00bff6:	30031073          	csrw	mstatus,t1
1c00bffa:	8082                	ret
1c00bffc:	87ba                	mv	a5,a4
1c00bffe:	4f58                	lw	a4,28(a4)
1c00c000:	b7cd                	j	1c00bfe2 <rt_event_push_delayed+0x38>
1c00c002:	002007b7          	lui	a5,0x200
1c00c006:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00c00a:	cca62623          	sw	a0,-820(a2)
1c00c00e:	cd58                	sw	a4,28(a0)
1c00c010:	0087a703          	lw	a4,8(a5)
1c00c014:	95ba                	add	a1,a1,a4
1c00c016:	00b7a823          	sw	a1,16(a5)
1c00c01a:	08500713          	li	a4,133
1c00c01e:	00e7a023          	sw	a4,0(a5)
1c00c022:	bfd1                	j	1c00bff6 <rt_event_push_delayed+0x4c>

1c00c024 <rt_time_wait_us>:
{
1c00c024:	1101                	addi	sp,sp,-32
1c00c026:	85aa                	mv	a1,a0
  rt_event_t *event = rt_event_get_blocking(NULL);
1c00c028:	4501                	li	a0,0
{
1c00c02a:	ce06                	sw	ra,28(sp)
1c00c02c:	cc22                	sw	s0,24(sp)
  rt_event_t *event = rt_event_get_blocking(NULL);
1c00c02e:	c62e                	sw	a1,12(sp)
1c00c030:	c47ff0ef          	jal	ra,1c00bc76 <rt_event_get_blocking>
  rt_event_push_delayed(event, time_us);
1c00c034:	45b2                	lw	a1,12(sp)
  rt_event_t *event = rt_event_get_blocking(NULL);
1c00c036:	842a                	mv	s0,a0
  rt_event_push_delayed(event, time_us);
1c00c038:	f73ff0ef          	jal	ra,1c00bfaa <rt_event_push_delayed>
  rt_event_wait(event);
1c00c03c:	8522                	mv	a0,s0
}
1c00c03e:	4462                	lw	s0,24(sp)
1c00c040:	40f2                	lw	ra,28(sp)
1c00c042:	6105                	addi	sp,sp,32
  rt_event_wait(event);
1c00c044:	d09ff06f          	j	1c00bd4c <rt_event_wait>

1c00c048 <pi_time_wait_us>:
  rt_time_wait_us(time_us);
1c00c048:	fddff06f          	j	1c00c024 <rt_time_wait_us>

1c00c04c <__rt_time_init>:
  first_delayed = NULL;
1c00c04c:	1c0117b7          	lui	a5,0x1c011
1c00c050:	cc07a623          	sw	zero,-820(a5) # 1c010ccc <first_delayed>
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00c054:	002007b7          	lui	a5,0x200
{
1c00c058:	1141                	addi	sp,sp,-16
1c00c05a:	08300713          	li	a4,131
1c00c05e:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00c062:	c606                	sw	ra,12(sp)
1c00c064:	c422                	sw	s0,8(sp)
1c00c066:	00e7a023          	sw	a4,0(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_TIMER0_HI, __rt_timer_handler);
1c00c06a:	1c00c5b7          	lui	a1,0x1c00c
1c00c06e:	0d858593          	addi	a1,a1,216 # 1c00c0d8 <__rt_timer_handler>
1c00c072:	452d                	li	a0,11
1c00c074:	dccff0ef          	jal	ra,1c00b640 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00c078:	6785                	lui	a5,0x1
1c00c07a:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00c07e:	00204737          	lui	a4,0x204
1c00c082:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c086:	00f72423          	sw	a5,8(a4)
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00c08a:	1c00c5b7          	lui	a1,0x1c00c
1c00c08e:	4601                	li	a2,0
1c00c090:	f7a58593          	addi	a1,a1,-134 # 1c00bf7a <__rt_time_poweroff>
1c00c094:	4509                	li	a0,2
1c00c096:	f16ff0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00c09a:	1c00c5b7          	lui	a1,0x1c00c
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00c09e:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00c0a0:	4601                	li	a2,0
1c00c0a2:	f9258593          	addi	a1,a1,-110 # 1c00bf92 <__rt_time_poweron>
1c00c0a6:	450d                	li	a0,3
1c00c0a8:	f04ff0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>
1c00c0ac:	8d41                	or	a0,a0,s0
  if (err) rt_fatal("Unable to initialize time driver\n");
1c00c0ae:	c10d                	beqz	a0,1c00c0d0 <__rt_time_init+0x84>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00c0b0:	01402673          	csrr	a2,uhartid
1c00c0b4:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00c0b8:	40565593          	srai	a1,a2,0x5
1c00c0bc:	f265b5b3          	p.bclr	a1,a1,25,6
1c00c0c0:	f4563633          	p.bclr	a2,a2,26,5
1c00c0c4:	3ac50513          	addi	a0,a0,940 # 1c0103ac <__himax_reg_init+0x1d0>
1c00c0c8:	3fb020ef          	jal	ra,1c00ecc2 <printf>
1c00c0cc:	37b020ef          	jal	ra,1c00ec46 <abort>
}
1c00c0d0:	40b2                	lw	ra,12(sp)
1c00c0d2:	4422                	lw	s0,8(sp)
1c00c0d4:	0141                	addi	sp,sp,16
1c00c0d6:	8082                	ret

1c00c0d8 <__rt_timer_handler>:
#if defined(__LLVM__)
void __rt_timer_handler()
#else
void __attribute__((interrupt)) __rt_timer_handler()
#endif
{
1c00c0d8:	7179                	addi	sp,sp,-48
1c00c0da:	d032                	sw	a2,32(sp)
  rt_event_t *event = first_delayed;
1c00c0dc:	1c011637          	lui	a2,0x1c011
{
1c00c0e0:	ca3e                	sw	a5,20(sp)
  rt_event_t *event = first_delayed;
1c00c0e2:	ccc62783          	lw	a5,-820(a2) # 1c010ccc <first_delayed>
{
1c00c0e6:	ce36                	sw	a3,28(sp)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00c0e8:	002006b7          	lui	a3,0x200
1c00c0ec:	40468693          	addi	a3,a3,1028 # 200404 <__L2+0x180404>
1c00c0f0:	d61a                	sw	t1,44(sp)
1c00c0f2:	d42a                	sw	a0,40(sp)
1c00c0f4:	d22e                	sw	a1,36(sp)
1c00c0f6:	cc3a                	sw	a4,24(sp)
1c00c0f8:	c842                	sw	a6,16(sp)
1c00c0fa:	c646                	sw	a7,12(sp)
1c00c0fc:	c472                	sw	t3,8(sp)
1c00c0fe:	c276                	sw	t4,4(sp)
1c00c100:	0086a683          	lw	a3,8(a3)
1c00c104:	01c00593          	li	a1,28
1c00c108:	01c02503          	lw	a0,28(zero) # 1c <__rt_sched>
1c00c10c:	41cc                	lw	a1,4(a1)

  uint32_t current_time = timer_count_get(timer_base_fc(0, 1));

  // First dequeue and push to their scheduler all events with the same number of
  // ticks as they were waiting for the same time.
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00c10e:	80000337          	lui	t1,0x80000
1c00c112:	4801                	li	a6,0
1c00c114:	4881                	li	a7,0
1c00c116:	01c00e93          	li	t4,28
1c00c11a:	ffe34313          	xori	t1,t1,-2
1c00c11e:	e7ad                	bnez	a5,1c00c188 <__rt_timer_handler+0xb0>
1c00c120:	00088463          	beqz	a7,1c00c128 <__rt_timer_handler+0x50>
1c00c124:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00c128:	00080463          	beqz	a6,1c00c130 <__rt_timer_handler+0x58>
1c00c12c:	00bea223          	sw	a1,4(t4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00c130:	002007b7          	lui	a5,0x200
1c00c134:	08100713          	li	a4,129
1c00c138:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
    event = next;
  }

  // Update the wait list with the next waiting event which has a different number
  // of ticks
  first_delayed = event;
1c00c13c:	cc062623          	sw	zero,-820(a2)
1c00c140:	00e7a023          	sw	a4,0(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_BUFFER_CLEAR, evtMask);
1c00c144:	6785                	lui	a5,0x1
1c00c146:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00c14a:	00204737          	lui	a4,0x204
1c00c14e:	02f72423          	sw	a5,40(a4) # 204028 <__L2+0x184028>
    rt_irq_clr(1 << ARCHI_FC_EVT_TIMER0_HI);
#else
    rt_irq_clr(1 << ARCHI_EVT_TIMER0_HI);
#endif
  }
}
1c00c152:	5332                	lw	t1,44(sp)
1c00c154:	5522                	lw	a0,40(sp)
1c00c156:	5592                	lw	a1,36(sp)
1c00c158:	5602                	lw	a2,32(sp)
1c00c15a:	46f2                	lw	a3,28(sp)
1c00c15c:	4762                	lw	a4,24(sp)
1c00c15e:	47d2                	lw	a5,20(sp)
1c00c160:	4842                	lw	a6,16(sp)
1c00c162:	48b2                	lw	a7,12(sp)
1c00c164:	4e22                	lw	t3,8(sp)
1c00c166:	4e92                	lw	t4,4(sp)
1c00c168:	6145                	addi	sp,sp,48
1c00c16a:	30200073          	mret
  event->next = NULL;
1c00c16e:	0007a023          	sw	zero,0(a5)
    rt_event_t *next = event->implem.next;
1c00c172:	01c7ae03          	lw	t3,28(a5)
  if (sched->first == NULL) {
1c00c176:	c511                	beqz	a0,1c00c182 <__rt_timer_handler+0xaa>
    sched->last->next = event;
1c00c178:	c19c                	sw	a5,0(a1)
    event = next;
1c00c17a:	85be                	mv	a1,a5
1c00c17c:	4805                	li	a6,1
1c00c17e:	87f2                	mv	a5,t3
1c00c180:	bf79                	j	1c00c11e <__rt_timer_handler+0x46>
  if (sched->first == NULL) {
1c00c182:	853e                	mv	a0,a5
1c00c184:	4885                	li	a7,1
1c00c186:	bfd5                	j	1c00c17a <__rt_timer_handler+0xa2>
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00c188:	0387ae03          	lw	t3,56(a5)
1c00c18c:	41c68e33          	sub	t3,a3,t3
1c00c190:	fdc37fe3          	bleu	t3,t1,1c00c16e <__rt_timer_handler+0x96>
1c00c194:	00088463          	beqz	a7,1c00c19c <__rt_timer_handler+0xc4>
1c00c198:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00c19c:	00080463          	beqz	a6,1c00c1a4 <__rt_timer_handler+0xcc>
1c00c1a0:	00bea223          	sw	a1,4(t4)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00c1a4:	00200737          	lui	a4,0x200
1c00c1a8:	40470713          	addi	a4,a4,1028 # 200404 <__L2+0x180404>
  first_delayed = event;
1c00c1ac:	ccf62623          	sw	a5,-820(a2)
1c00c1b0:	00872603          	lw	a2,8(a4)
      first_delayed->implem.time - current_time
1c00c1b4:	5f9c                	lw	a5,56(a5)
1c00c1b6:	40d786b3          	sub	a3,a5,a3
1c00c1ba:	96b2                	add	a3,a3,a2

static inline uint32_t timer_cnt_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_HI_OFFSET); }
static inline void timer_cnt_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CNT_HI_OFFSET, value); }

static inline uint32_t timer_cmp_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CMP_LO_OFFSET); }
static inline void timer_cmp_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_LO_OFFSET, value); }
1c00c1bc:	00d72823          	sw	a3,16(a4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00c1c0:	08500793          	li	a5,133
1c00c1c4:	00f72023          	sw	a5,0(a4)
}
1c00c1c8:	b769                	j	1c00c152 <__rt_timer_handler+0x7a>

1c00c1ca <rt_periph_copy>:
  }

  __rt_socevents_status[index] &= ~(1<<event);

  rt_irq_restore(irq);
}
1c00c1ca:	7179                	addi	sp,sp,-48
1c00c1cc:	d422                	sw	s0,40(sp)
1c00c1ce:	842a                	mv	s0,a0
1c00c1d0:	d606                	sw	ra,44(sp)
1c00c1d2:	d226                	sw	s1,36(sp)
1c00c1d4:	d04a                	sw	s2,32(sp)
1c00c1d6:	30047973          	csrrci	s2,mstatus,8
1c00c1da:	4015d493          	srai	s1,a1,0x1
1c00c1de:	1a102537          	lui	a0,0x1a102
1c00c1e2:	049e                	slli	s1,s1,0x7
1c00c1e4:	94aa                	add	s1,s1,a0
1c00c1e6:	00459513          	slli	a0,a1,0x4
1c00c1ea:	8941                	andi	a0,a0,16
1c00c1ec:	94aa                	add	s1,s1,a0
1c00c1ee:	853e                	mv	a0,a5
1c00c1f0:	ef89                	bnez	a5,1c00c20a <rt_periph_copy+0x40>
1c00c1f2:	ce2e                	sw	a1,28(sp)
1c00c1f4:	cc32                	sw	a2,24(sp)
1c00c1f6:	ca36                	sw	a3,20(sp)
1c00c1f8:	c83a                	sw	a4,16(sp)
1c00c1fa:	c63e                	sw	a5,12(sp)
1c00c1fc:	9d3ff0ef          	jal	ra,1c00bbce <__rt_wait_event_prepare_blocking>
1c00c200:	47b2                	lw	a5,12(sp)
1c00c202:	4742                	lw	a4,16(sp)
1c00c204:	46d2                	lw	a3,20(sp)
1c00c206:	4662                	lw	a2,24(sp)
1c00c208:	45f2                	lw	a1,28(sp)
1c00c20a:	e419                	bnez	s0,1c00c218 <rt_periph_copy+0x4e>
1c00c20c:	03850413          	addi	s0,a0,56 # 1a102038 <__l1_end+0xa101ff4>
1c00c210:	04052223          	sw	zero,68(a0)
1c00c214:	04052a23          	sw	zero,84(a0)
1c00c218:	00c42803          	lw	a6,12(s0)
1c00c21c:	c054                	sw	a3,4(s0)
1c00c21e:	cc08                	sw	a0,24(s0)
1c00c220:	f6483833          	p.bclr	a6,a6,27,4
1c00c224:	4891                	li	a7,4
1c00c226:	c0474733          	p.bset	a4,a4,0,4
1c00c22a:	0908e163          	bltu	a7,a6,1c00c2ac <rt_periph_copy+0xe2>
1c00c22e:	03000893          	li	a7,48
1c00c232:	0596                	slli	a1,a1,0x5
1c00c234:	98ae                	add	a7,a7,a1
1c00c236:	0008a303          	lw	t1,0(a7)
1c00c23a:	00042a23          	sw	zero,20(s0)
1c00c23e:	03000813          	li	a6,48
1c00c242:	02031b63          	bnez	t1,1c00c278 <rt_periph_copy+0xae>
1c00c246:	0088a023          	sw	s0,0(a7)
1c00c24a:	00b808b3          	add	a7,a6,a1
1c00c24e:	0088a303          	lw	t1,8(a7)
1c00c252:	0088a223          	sw	s0,4(a7)
1c00c256:	02031663          	bnez	t1,1c00c282 <rt_periph_copy+0xb8>
1c00c25a:	00848893          	addi	a7,s1,8
1c00c25e:	0008a883          	lw	a7,0(a7)
1c00c262:	0208f893          	andi	a7,a7,32
1c00c266:	00089e63          	bnez	a7,1c00c282 <rt_periph_copy+0xb8>
1c00c26a:	00c4a023          	sw	a2,0(s1)
1c00c26e:	00d4a223          	sw	a3,4(s1)
1c00c272:	00e4a423          	sw	a4,8(s1)
1c00c276:	a005                	j	1c00c296 <rt_periph_copy+0xcc>
1c00c278:	0048a883          	lw	a7,4(a7)
1c00c27c:	0088aa23          	sw	s0,20(a7)
1c00c280:	b7e9                	j	1c00c24a <rt_periph_copy+0x80>
1c00c282:	00042823          	sw	zero,16(s0)
1c00c286:	c010                	sw	a2,0(s0)
1c00c288:	c054                	sw	a3,4(s0)
1c00c28a:	c418                	sw	a4,8(s0)
1c00c28c:	00031563          	bnez	t1,1c00c296 <rt_periph_copy+0xcc>
1c00c290:	982e                	add	a6,a6,a1
1c00c292:	00882423          	sw	s0,8(a6)
1c00c296:	e399                	bnez	a5,1c00c29c <rt_periph_copy+0xd2>
1c00c298:	a89ff0ef          	jal	ra,1c00bd20 <__rt_wait_event>
1c00c29c:	30091073          	csrw	mstatus,s2
1c00c2a0:	50b2                	lw	ra,44(sp)
1c00c2a2:	5422                	lw	s0,40(sp)
1c00c2a4:	5492                	lw	s1,36(sp)
1c00c2a6:	5902                	lw	s2,32(sp)
1c00c2a8:	6145                	addi	sp,sp,48
1c00c2aa:	8082                	ret
1c00c2ac:	fe6835e3          	p.bneimm	a6,6,1c00c296 <rt_periph_copy+0xcc>
1c00c2b0:	03000893          	li	a7,48
1c00c2b4:	0596                	slli	a1,a1,0x5
1c00c2b6:	98ae                	add	a7,a7,a1
1c00c2b8:	0008a303          	lw	t1,0(a7)
1c00c2bc:	00042a23          	sw	zero,20(s0)
1c00c2c0:	03000813          	li	a6,48
1c00c2c4:	00031f63          	bnez	t1,1c00c2e2 <rt_periph_copy+0x118>
1c00c2c8:	0088a023          	sw	s0,0(a7)
1c00c2cc:	95c2                	add	a1,a1,a6
1c00c2ce:	c1c0                	sw	s0,4(a1)
1c00c2d0:	00031e63          	bnez	t1,1c00c2ec <rt_periph_copy+0x122>
1c00c2d4:	02442803          	lw	a6,36(s0)
1c00c2d8:	1a1025b7          	lui	a1,0x1a102
1c00c2dc:	1b05a023          	sw	a6,416(a1) # 1a1021a0 <__l1_end+0xa10215c>
1c00c2e0:	b769                	j	1c00c26a <rt_periph_copy+0xa0>
1c00c2e2:	0048a883          	lw	a7,4(a7)
1c00c2e6:	0088aa23          	sw	s0,20(a7)
1c00c2ea:	b7cd                	j	1c00c2cc <rt_periph_copy+0x102>
1c00c2ec:	c418                	sw	a4,8(s0)
1c00c2ee:	4598                	lw	a4,8(a1)
1c00c2f0:	c010                	sw	a2,0(s0)
1c00c2f2:	c054                	sw	a3,4(s0)
1c00c2f4:	00042823          	sw	zero,16(s0)
1c00c2f8:	ff59                	bnez	a4,1c00c296 <rt_periph_copy+0xcc>
1c00c2fa:	c580                	sw	s0,8(a1)
1c00c2fc:	bf69                	j	1c00c296 <rt_periph_copy+0xcc>

1c00c2fe <__rt_periph_wait_event>:
1c00c2fe:	30047673          	csrrci	a2,mstatus,8
1c00c302:	477d                	li	a4,31
1c00c304:	4781                	li	a5,0
1c00c306:	00a75463          	ble	a0,a4,1c00c30e <__rt_periph_wait_event+0x10>
1c00c30a:	1501                	addi	a0,a0,-32
1c00c30c:	4785                	li	a5,1
1c00c30e:	00279713          	slli	a4,a5,0x2
1c00c312:	4685                	li	a3,1
1c00c314:	03000793          	li	a5,48
1c00c318:	00a696b3          	sll	a3,a3,a0
1c00c31c:	97ba                	add	a5,a5,a4
1c00c31e:	00204837          	lui	a6,0x204
1c00c322:	2807a703          	lw	a4,640(a5)
1c00c326:	8f75                	and	a4,a4,a3
1c00c328:	cf19                	beqz	a4,1c00c346 <__rt_periph_wait_event+0x48>
1c00c32a:	c999                	beqz	a1,1c00c340 <__rt_periph_wait_event+0x42>
1c00c32c:	2807a683          	lw	a3,640(a5)
1c00c330:	4705                	li	a4,1
1c00c332:	00a71533          	sll	a0,a4,a0
1c00c336:	fff54513          	not	a0,a0
1c00c33a:	8d75                	and	a0,a0,a3
1c00c33c:	28a7a023          	sw	a0,640(a5)
1c00c340:	30061073          	csrw	mstatus,a2
1c00c344:	8082                	ret
1c00c346:	03886703          	p.elw	a4,56(a6) # 204038 <__L2+0x184038>
1c00c34a:	30046773          	csrrsi	a4,mstatus,8
1c00c34e:	30047773          	csrrci	a4,mstatus,8
1c00c352:	bfc1                	j	1c00c322 <__rt_periph_wait_event+0x24>

1c00c354 <__rt_periph_init>:
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
    rt_periph_channel_t *channel = &periph_channels[i];
    channel->first = NULL;
    channel->firstToEnqueue = NULL;
    channel->base = hal_udma_channel_base(i);
    channel->callback = udma_event_handler;
1c00c354:	1c000537          	lui	a0,0x1c000
1c00c358:	03000693          	li	a3,48
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00c35c:	4601                	li	a2,0
1c00c35e:	03000713          	li	a4,48
static inline unsigned int hal_udma_periph_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id);
}

static inline __attribute__((always_inline)) unsigned int hal_udma_channel_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id>>1) + UDMA_CHANNEL_OFFSET(id&1);
1c00c362:	1a1028b7          	lui	a7,0x1a102
    channel->callback = udma_event_handler;
1c00c366:	30c50513          	addi	a0,a0,780 # 1c00030c <udma_event_handler>
1c00c36a:	014950fb          	lp.setupi	x1,20,1c00c38e <__rt_periph_init+0x3a>
1c00c36e:	40165793          	srai	a5,a2,0x1
1c00c372:	00461813          	slli	a6,a2,0x4
1c00c376:	079e                	slli	a5,a5,0x7
1c00c378:	97c6                	add	a5,a5,a7
1c00c37a:	01087813          	andi	a6,a6,16
1c00c37e:	97c2                	add	a5,a5,a6
    channel->first = NULL;
1c00c380:	0006a023          	sw	zero,0(a3)
    channel->firstToEnqueue = NULL;
1c00c384:	0006a423          	sw	zero,8(a3)
    channel->base = hal_udma_channel_base(i);
1c00c388:	c6dc                	sw	a5,12(a3)
    channel->callback = udma_event_handler;
1c00c38a:	cec8                	sw	a0,28(a3)
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00c38c:	0605                	addi	a2,a2,1
1c00c38e:	02068693          	addi	a3,a3,32
  }
  
  for (int i=0; i<ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT; i++)
  {
    __rt_udma_extra_callback[i] = __rt_soc_evt_no_udma;
1c00c392:	1c0006b7          	lui	a3,0x1c000
1c00c396:	28870613          	addi	a2,a4,648
1c00c39a:	4b668693          	addi	a3,a3,1206 # 1c0004b6 <__rt_soc_evt_no_udma>
1c00c39e:	00a250fb          	lp.setupi	x1,10,1c00c3a6 <__rt_periph_init+0x52>
1c00c3a2:	00d6222b          	p.sw	a3,4(a2!)
1c00c3a6:	0001                	nop
  }

  __rt_socevents_status[0] = 0;
1c00c3a8:	28072023          	sw	zero,640(a4)
  __rt_socevents_status[1] = 0;
1c00c3ac:	28072223          	sw	zero,644(a4)
}
1c00c3b0:	8082                	ret

1c00c3b2 <rt_freq_set_and_get>:
void rt_freq_wait_convergence(int fll)
{
}

int rt_freq_set_and_get(rt_freq_domain_e domain, unsigned int freq, unsigned int *out_freq)
{
1c00c3b2:	1141                	addi	sp,sp,-16
1c00c3b4:	c226                	sw	s1,4(sp)
1c00c3b6:	84ae                	mv	s1,a1
1c00c3b8:	c606                	sw	ra,12(sp)
1c00c3ba:	c422                	sw	s0,8(sp)
1c00c3bc:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c3be:	30047973          	csrrci	s2,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00c3c2:	1c011437          	lui	s0,0x1c011
  int irq = rt_irq_disable();
  int err = 0;

  rt_trace(RT_TRACE_FREQ, "Setting domain frequency (domain: %d, freq: %d)\n", domain, freq);

  if (domain == RT_FREQ_DOMAIN_CL)
1c00c3c6:	00153f63          	p.bneimm	a0,1,1c00c3e4 <rt_freq_set_and_get+0x32>
  {
    // On cluster side, this is straight forward as the fll is not shared
    __rt_fll_set_freq(__RT_FLL_CL, freq);
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00c3ca:	cd040413          	addi	s0,s0,-816 # 1c010cd0 <__rt_freq_domains>
    __rt_fll_set_freq(__RT_FLL_CL, freq);
1c00c3ce:	294d                	jal	1c00c880 <__rt_fll_set_freq>
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00c3d0:	c044                	sw	s1,4(s0)
  __builtin_pulp_spr_write(reg, val);
1c00c3d2:	30091073          	csrw	mstatus,s2
  }

  rt_irq_restore(irq);

  return err;
}
1c00c3d6:	40b2                	lw	ra,12(sp)
1c00c3d8:	4422                	lw	s0,8(sp)
1c00c3da:	4492                	lw	s1,4(sp)
1c00c3dc:	4902                	lw	s2,0(sp)
1c00c3de:	4501                	li	a0,0
1c00c3e0:	0141                	addi	sp,sp,16
1c00c3e2:	8082                	ret
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_BEFORE);
1c00c3e4:	4511                	li	a0,4
1c00c3e6:	c04ff0ef          	jal	ra,1c00b7ea <__rt_cbsys_exec>
    __rt_fll_set_freq(0, freq);
1c00c3ea:	85a6                	mv	a1,s1
1c00c3ec:	4501                	li	a0,0
1c00c3ee:	2949                	jal	1c00c880 <__rt_fll_set_freq>
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00c3f0:	4515                	li	a0,5
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = freq;
1c00c3f2:	cc942823          	sw	s1,-816(s0)
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00c3f6:	bf4ff0ef          	jal	ra,1c00b7ea <__rt_cbsys_exec>
1c00c3fa:	bfe1                	j	1c00c3d2 <rt_freq_set_and_get+0x20>

1c00c3fc <__rt_freq_init>:

void __rt_freq_init()
{
1c00c3fc:	1141                	addi	sp,sp,-16
1c00c3fe:	c422                	sw	s0,8(sp)
1c00c400:	c606                	sw	ra,12(sp)

  __rt_flls_constructor();
1c00c402:	29b5                	jal	1c00c87e <__rt_flls_constructor>
  return __rt_platform;
1c00c404:	1c0107b7          	lui	a5,0x1c010

  // On all chips only FLL 0 is initialized here as it is shared between periph and soc
  // while FLL 1 is used for cluster only and thus is initialized when the cluster is set on.
  if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00c408:	7b07a783          	lw	a5,1968(a5) # 1c0107b0 <__rt_platform>
1c00c40c:	1c011437          	lui	s0,0x1c011
1c00c410:	0017ae63          	p.beqimm	a5,1,1c00c42c <__rt_freq_init+0x30>
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = __rt_fll_init(__RT_FLL_FC);
1c00c414:	4501                	li	a0,0
1c00c416:	2991                	jal	1c00c86a <__rt_fll_init>
1c00c418:	cca42823          	sw	a0,-816(s0) # 1c010cd0 <__rt_freq_domains>
  }
  else
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
  }
  __rt_freq_domains[RT_FREQ_DOMAIN_CL] = 0;
1c00c41c:	cd040413          	addi	s0,s0,-816
1c00c420:	00042223          	sw	zero,4(s0)

}
1c00c424:	40b2                	lw	ra,12(sp)
1c00c426:	4422                	lw	s0,8(sp)
1c00c428:	0141                	addi	sp,sp,16
1c00c42a:	8082                	ret
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
1c00c42c:	026267b7          	lui	a5,0x2626
1c00c430:	a0078793          	addi	a5,a5,-1536 # 2625a00 <__L2+0x25a5a00>
1c00c434:	ccf42823          	sw	a5,-816(s0)
1c00c438:	b7d5                	j	1c00c41c <__rt_freq_init+0x20>

1c00c43a <SetFllMultDivFactors>:
  if (PMURetentionState.Fields.BootType != COLD_BOOT && PMURetentionState.Fields.ClusterWakeUpState) {
          // ChangePowerSystemState(POWER_SYSTEM_STATE(PMURetentionState.Fields.WakeupState, PMURetentionState.Fields.ClusterWakeUpState), 0);
    __rt_pmu_cluster_power_up(NULL, NULL);
    if (PMU_ClusterIsRunning() && PMURetentionState.Fields.FllClusterRetention) InitOneFll(FLL_CLUSTER, 1);
  }
}
1c00c43a:	100517b3          	p.fl1	a5,a0
1c00c43e:	4769                	li	a4,26
1c00c440:	8f1d                	sub	a4,a4,a5
1c00c442:	4785                	li	a5,1
1c00c444:	04f76733          	p.max	a4,a4,a5
1c00c448:	47a1                	li	a5,8
1c00c44a:	04f74733          	p.min	a4,a4,a5
1c00c44e:	fff70693          	addi	a3,a4,-1
1c00c452:	00f55793          	srli	a5,a0,0xf
1c00c456:	00d797b3          	sll	a5,a5,a3
1c00c45a:	c19c                	sw	a5,0(a1)
1c00c45c:	07be                	slli	a5,a5,0xf
1c00c45e:	c218                	sw	a4,0(a2)
1c00c460:	00d7d533          	srl	a0,a5,a3
1c00c464:	8082                	ret

1c00c466 <soc_eu_fcEventMask_setEvent>:
1c00c466:	47fd                	li	a5,31
1c00c468:	4721                	li	a4,8
1c00c46a:	00f50463          	beq	a0,a5,1c00c472 <soc_eu_fcEventMask_setEvent+0xc>
1c00c46e:	1501                	addi	a0,a0,-32
1c00c470:	4711                	li	a4,4
1c00c472:	1a1066b7          	lui	a3,0x1a106
1c00c476:	20e6f603          	p.lw	a2,a4(a3)
1c00c47a:	4785                	li	a5,1
1c00c47c:	00a79533          	sll	a0,a5,a0
1c00c480:	fff54513          	not	a0,a0
1c00c484:	8d71                	and	a0,a0,a2
1c00c486:	00a6e723          	p.sw	a0,a4(a3)
1c00c48a:	8082                	ret

1c00c48c <__rt_pmu_cluster_power_down>:
1c00c48c:	1c0107b7          	lui	a5,0x1c010
1c00c490:	7b07a783          	lw	a5,1968(a5) # 1c0107b0 <__rt_platform>
1c00c494:	0817a363          	p.beqimm	a5,1,1c00c51a <__rt_pmu_cluster_power_down+0x8e>
1c00c498:	1141                	addi	sp,sp,-16
1c00c49a:	1a1046b7          	lui	a3,0x1a104
1c00c49e:	c606                	sw	ra,12(sp)
1c00c4a0:	c422                	sw	s0,8(sp)
1c00c4a2:	c226                	sw	s1,4(sp)
1c00c4a4:	c04a                	sw	s2,0(sp)
1c00c4a6:	0706a683          	lw	a3,112(a3) # 1a104070 <__l1_end+0xa10402c>
1c00c4aa:	1c010737          	lui	a4,0x1c010
1c00c4ae:	7c870713          	addi	a4,a4,1992 # 1c0107c8 <SystemStateToSCUFastSeq>
1c00c4b2:	00874783          	lbu	a5,8(a4)
1c00c4b6:	8436                	mv	s0,a3
1c00c4b8:	c0079933          	p.extractu	s2,a5,0,0
1c00c4bc:	04193963          	p.bneimm	s2,1,1c00c50e <__rt_pmu_cluster_power_down+0x82>
1c00c4c0:	01069613          	slli	a2,a3,0x10
1c00c4c4:	04064563          	bltz	a2,1c00c50e <__rt_pmu_cluster_power_down+0x82>
1c00c4c8:	c007b7b3          	p.bclr	a5,a5,0,0
1c00c4cc:	c0a92433          	p.insert	s0,s2,0,10
1c00c4d0:	1a1044b7          	lui	s1,0x1a104
1c00c4d4:	00f70423          	sb	a5,8(a4)
1c00c4d8:	0684a823          	sw	s0,112(s1) # 1a104070 <__l1_end+0xa10402c>
1c00c4dc:	4585                	li	a1,1
1c00c4de:	02300513          	li	a0,35
1c00c4e2:	e1dff0ef          	jal	ra,1c00c2fe <__rt_periph_wait_event>
1c00c4e6:	4785                	li	a5,1
1c00c4e8:	00f4a623          	sw	a5,12(s1)
1c00c4ec:	c0302433          	p.insert	s0,zero,0,3
1c00c4f0:	0684a823          	sw	s0,112(s1)
1c00c4f4:	c0d92433          	p.insert	s0,s2,0,13
1c00c4f8:	0684a823          	sw	s0,112(s1)
1c00c4fc:	4422                	lw	s0,8(sp)
1c00c4fe:	40b2                	lw	ra,12(sp)
1c00c500:	4492                	lw	s1,4(sp)
1c00c502:	4902                	lw	s2,0(sp)
1c00c504:	4585                	li	a1,1
1c00c506:	457d                	li	a0,31
1c00c508:	0141                	addi	sp,sp,16
1c00c50a:	df5ff06f          	j	1c00c2fe <__rt_periph_wait_event>
1c00c50e:	40b2                	lw	ra,12(sp)
1c00c510:	4422                	lw	s0,8(sp)
1c00c512:	4492                	lw	s1,4(sp)
1c00c514:	4902                	lw	s2,0(sp)
1c00c516:	0141                	addi	sp,sp,16
1c00c518:	8082                	ret
1c00c51a:	8082                	ret

1c00c51c <SetFllFrequency>:
1c00c51c:	7179                	addi	sp,sp,-48
1c00c51e:	d422                	sw	s0,40(sp)
1c00c520:	d226                	sw	s1,36(sp)
1c00c522:	1c010437          	lui	s0,0x1c010
1c00c526:	84aa                	mv	s1,a0
1c00c528:	d606                	sw	ra,44(sp)
1c00c52a:	852e                	mv	a0,a1
1c00c52c:	7c840413          	addi	s0,s0,1992 # 1c0107c8 <SystemStateToSCUFastSeq>
1c00c530:	0014be63          	p.bneimm	s1,1,1c00c54c <SetFllFrequency+0x30>
1c00c534:	00844783          	lbu	a5,8(s0)
1c00c538:	c0079733          	p.extractu	a4,a5,0,0
1c00c53c:	08172763          	p.beqimm	a4,1,1c00c5ca <SetFllFrequency+0xae>
1c00c540:	4501                	li	a0,0
1c00c542:	50b2                	lw	ra,44(sp)
1c00c544:	5422                	lw	s0,40(sp)
1c00c546:	5492                	lw	s1,36(sp)
1c00c548:	6145                	addi	sp,sp,48
1c00c54a:	8082                	ret
1c00c54c:	ce2d                	beqz	a2,1c00c5c6 <SetFllFrequency+0xaa>
1c00c54e:	00844783          	lbu	a5,8(s0)
1c00c552:	03200713          	li	a4,50
1c00c556:	c21797b3          	p.extractu	a5,a5,1,1
1c00c55a:	97a2                	add	a5,a5,s0
1c00c55c:	00a7c783          	lbu	a5,10(a5)
1c00c560:	00e787db          	p.mac	a5,a5,a4,zero
1c00c564:	22678793          	addi	a5,a5,550
1c00c568:	ecad                	bnez	s1,1c00c5e2 <SetFllFrequency+0xc6>
1c00c56a:	0007a6b7          	lui	a3,0x7a
1c00c56e:	eb237737          	lui	a4,0xeb237
1c00c572:	12068693          	addi	a3,a3,288 # 7a120 <__L1Cl+0x6a120>
1c00c576:	c8070713          	addi	a4,a4,-896 # eb236c80 <pulp__FC+0xeb236c81>
1c00c57a:	42d78733          	p.mac	a4,a5,a3
1c00c57e:	fcb761e3          	bltu	a4,a1,1c00c540 <SetFllFrequency+0x24>
1c00c582:	c62a                	sw	a0,12(sp)
1c00c584:	d76ff0ef          	jal	ra,1c00bafa <__rt_bridge_req_shutdown>
1c00c588:	4532                	lw	a0,12(sp)
1c00c58a:	0870                	addi	a2,sp,28
1c00c58c:	082c                	addi	a1,sp,24
1c00c58e:	eadff0ef          	jal	ra,1c00c43a <SetFllMultDivFactors>
1c00c592:	4762                	lw	a4,24(sp)
1c00c594:	800007b7          	lui	a5,0x80000
1c00c598:	1a1006b7          	lui	a3,0x1a100
1c00c59c:	de0727b3          	p.insert	a5,a4,15,0
1c00c5a0:	4772                	lw	a4,28(sp)
1c00c5a2:	c7a727b3          	p.insert	a5,a4,3,26
1c00c5a6:	00449713          	slli	a4,s1,0x4
1c00c5aa:	0711                	addi	a4,a4,4
1c00c5ac:	00f6e723          	p.sw	a5,a4(a3)
1c00c5b0:	00249793          	slli	a5,s1,0x2
1c00c5b4:	943e                	add	s0,s0,a5
1c00c5b6:	d008                	sw	a0,32(s0)
1c00c5b8:	c808                	sw	a0,16(s0)
1c00c5ba:	f4c1                	bnez	s1,1c00c542 <SetFllFrequency+0x26>
1c00c5bc:	c62a                	sw	a0,12(sp)
1c00c5be:	c98ff0ef          	jal	ra,1c00ba56 <__rt_bridge_set_available>
1c00c5c2:	4532                	lw	a0,12(sp)
1c00c5c4:	bfbd                	j	1c00c542 <SetFllFrequency+0x26>
1c00c5c6:	f0f1                	bnez	s1,1c00c58a <SetFllFrequency+0x6e>
1c00c5c8:	bf6d                	j	1c00c582 <SetFllFrequency+0x66>
1c00c5ca:	d261                	beqz	a2,1c00c58a <SetFllFrequency+0x6e>
1c00c5cc:	c21797b3          	p.extractu	a5,a5,1,1
1c00c5d0:	97a2                	add	a5,a5,s0
1c00c5d2:	00a7c783          	lbu	a5,10(a5) # 8000000a <pulp__FC+0x8000000b>
1c00c5d6:	03200713          	li	a4,50
1c00c5da:	00e787db          	p.mac	a5,a5,a4,zero
1c00c5de:	22678793          	addi	a5,a5,550
1c00c5e2:	0006b6b7          	lui	a3,0x6b
1c00c5e6:	eaf5a737          	lui	a4,0xeaf5a
1c00c5ea:	6c068693          	addi	a3,a3,1728 # 6b6c0 <__L1Cl+0x5b6c0>
1c00c5ee:	5c070713          	addi	a4,a4,1472 # eaf5a5c0 <pulp__FC+0xeaf5a5c1>
1c00c5f2:	42d78733          	p.mac	a4,a5,a3
1c00c5f6:	f8a77ae3          	bleu	a0,a4,1c00c58a <SetFllFrequency+0x6e>
1c00c5fa:	b799                	j	1c00c540 <SetFllFrequency+0x24>

1c00c5fc <InitOneFll>:
1c00c5fc:	7179                	addi	sp,sp,-48
1c00c5fe:	00451713          	slli	a4,a0,0x4
1c00c602:	ce4e                	sw	s3,28(sp)
1c00c604:	1a1007b7          	lui	a5,0x1a100
1c00c608:	00470993          	addi	s3,a4,4
1c00c60c:	d606                	sw	ra,44(sp)
1c00c60e:	d422                	sw	s0,40(sp)
1c00c610:	d226                	sw	s1,36(sp)
1c00c612:	d04a                	sw	s2,32(sp)
1c00c614:	2137f783          	p.lw	a5,s3(a5)
1c00c618:	1c010437          	lui	s0,0x1c010
1c00c61c:	7c840413          	addi	s0,s0,1992 # 1c0107c8 <SystemStateToSCUFastSeq>
1c00c620:	00251913          	slli	s2,a0,0x2
1c00c624:	c585                	beqz	a1,1c00c64c <InitOneFll+0x50>
1c00c626:	c7a79733          	p.extractu	a4,a5,3,26
1c00c62a:	1007d7b3          	p.exthz	a5,a5
1c00c62e:	07be                	slli	a5,a5,0xf
1c00c630:	c701                	beqz	a4,1c00c638 <InitOneFll+0x3c>
1c00c632:	177d                	addi	a4,a4,-1
1c00c634:	00e7d7b3          	srl	a5,a5,a4
1c00c638:	944a                	add	s0,s0,s2
1c00c63a:	d01c                	sw	a5,32(s0)
1c00c63c:	c81c                	sw	a5,16(s0)
1c00c63e:	50b2                	lw	ra,44(sp)
1c00c640:	5422                	lw	s0,40(sp)
1c00c642:	5492                	lw	s1,36(sp)
1c00c644:	5902                	lw	s2,32(sp)
1c00c646:	49f2                	lw	s3,28(sp)
1c00c648:	6145                	addi	sp,sp,48
1c00c64a:	8082                	ret
1c00c64c:	0007d363          	bgez	a5,1c00c652 <InitOneFll+0x56>
1c00c650:	c105                	beqz	a0,1c00c670 <InitOneFll+0x74>
1c00c652:	810047b7          	lui	a5,0x81004
1c00c656:	1a1006b7          	lui	a3,0x1a100
1c00c65a:	00870613          	addi	a2,a4,8
1c00c65e:	10778793          	addi	a5,a5,263 # 81004107 <pulp__FC+0x81004108>
1c00c662:	00f6e623          	p.sw	a5,a2(a3)
1c00c666:	014c04b7          	lui	s1,0x14c0
1c00c66a:	0731                	addi	a4,a4,12
1c00c66c:	0096e723          	p.sw	s1,a4(a3)
1c00c670:	02faf537          	lui	a0,0x2faf
1c00c674:	0070                	addi	a2,sp,12
1c00c676:	002c                	addi	a1,sp,8
1c00c678:	08050513          	addi	a0,a0,128 # 2faf080 <__L2+0x2f2f080>
1c00c67c:	dbfff0ef          	jal	ra,1c00c43a <SetFllMultDivFactors>
1c00c680:	47a2                	lw	a5,8(sp)
1c00c682:	c00004b7          	lui	s1,0xc0000
1c00c686:	de07a4b3          	p.insert	s1,a5,15,0
1c00c68a:	47b2                	lw	a5,12(sp)
1c00c68c:	c7a7a4b3          	p.insert	s1,a5,3,26
1c00c690:	1a1007b7          	lui	a5,0x1a100
1c00c694:	0097e9a3          	p.sw	s1,s3(a5)
1c00c698:	944a                	add	s0,s0,s2
1c00c69a:	d008                	sw	a0,32(s0)
1c00c69c:	c808                	sw	a0,16(s0)
1c00c69e:	b745                	j	1c00c63e <InitOneFll+0x42>

1c00c6a0 <__rt_pmu_cluster_power_up>:
1c00c6a0:	1141                	addi	sp,sp,-16
1c00c6a2:	c226                	sw	s1,4(sp)
1c00c6a4:	1c0104b7          	lui	s1,0x1c010
1c00c6a8:	c606                	sw	ra,12(sp)
1c00c6aa:	c422                	sw	s0,8(sp)
1c00c6ac:	c04a                	sw	s2,0(sp)
1c00c6ae:	7c848793          	addi	a5,s1,1992 # 1c0107c8 <SystemStateToSCUFastSeq>
1c00c6b2:	0087c783          	lbu	a5,8(a5) # 1a100008 <__l1_end+0xa0fffc4>
1c00c6b6:	4501                	li	a0,0
1c00c6b8:	c00797b3          	p.extractu	a5,a5,0,0
1c00c6bc:	e785                	bnez	a5,1c00c6e4 <__rt_pmu_cluster_power_up+0x44>
1c00c6be:	1c0107b7          	lui	a5,0x1c010
1c00c6c2:	7b07a783          	lw	a5,1968(a5) # 1c0107b0 <__rt_platform>
1c00c6c6:	7c848493          	addi	s1,s1,1992
1c00c6ca:	0217b363          	p.bneimm	a5,1,1c00c6f0 <__rt_pmu_cluster_power_up+0x50>
1c00c6ce:	1a1047b7          	lui	a5,0x1a104
1c00c6d2:	0007a623          	sw	zero,12(a5) # 1a10400c <__l1_end+0xa103fc8>
1c00c6d6:	0084c783          	lbu	a5,8(s1)
1c00c6da:	4505                	li	a0,1
1c00c6dc:	c007c7b3          	p.bset	a5,a5,0,0
1c00c6e0:	00f48423          	sb	a5,8(s1)
1c00c6e4:	40b2                	lw	ra,12(sp)
1c00c6e6:	4422                	lw	s0,8(sp)
1c00c6e8:	4492                	lw	s1,4(sp)
1c00c6ea:	4902                	lw	s2,0(sp)
1c00c6ec:	0141                	addi	sp,sp,16
1c00c6ee:	8082                	ret
1c00c6f0:	1a104437          	lui	s0,0x1a104
1c00c6f4:	07042403          	lw	s0,112(s0) # 1a104070 <__l1_end+0xa10402c>
1c00c6f8:	c0a417b3          	p.extractu	a5,s0,0,10
1c00c6fc:	ef89                	bnez	a5,1c00c716 <__rt_pmu_cluster_power_up+0x76>
1c00c6fe:	4785                	li	a5,1
1c00c700:	c0a7a433          	p.insert	s0,a5,0,10
1c00c704:	1a1047b7          	lui	a5,0x1a104
1c00c708:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10402c>
1c00c70c:	4585                	li	a1,1
1c00c70e:	02300513          	li	a0,35
1c00c712:	bedff0ef          	jal	ra,1c00c2fe <__rt_periph_wait_event>
1c00c716:	4785                	li	a5,1
1c00c718:	c037a433          	p.insert	s0,a5,0,3
1c00c71c:	1a104937          	lui	s2,0x1a104
1c00c720:	06892823          	sw	s0,112(s2) # 1a104070 <__l1_end+0xa10402c>
1c00c724:	4585                	li	a1,1
1c00c726:	457d                	li	a0,31
1c00c728:	bd7ff0ef          	jal	ra,1c00c2fe <__rt_periph_wait_event>
1c00c72c:	00092623          	sw	zero,12(s2)
1c00c730:	c0d02433          	p.insert	s0,zero,0,13
1c00c734:	06892823          	sw	s0,112(s2)
1c00c738:	c0a02433          	p.insert	s0,zero,0,10
1c00c73c:	06892823          	sw	s0,112(s2)
1c00c740:	4585                	li	a1,1
1c00c742:	02300513          	li	a0,35
1c00c746:	bb9ff0ef          	jal	ra,1c00c2fe <__rt_periph_wait_event>
1c00c74a:	01c4c783          	lbu	a5,28(s1)
1c00c74e:	0207f793          	andi	a5,a5,32
1c00c752:	e789                	bnez	a5,1c00c75c <__rt_pmu_cluster_power_up+0xbc>
1c00c754:	4581                	li	a1,0
1c00c756:	4505                	li	a0,1
1c00c758:	ea5ff0ef          	jal	ra,1c00c5fc <InitOneFll>
1c00c75c:	c0e44433          	p.bset	s0,s0,0,14
1c00c760:	1a1047b7          	lui	a5,0x1a104
1c00c764:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10402c>
1c00c768:	b7bd                	j	1c00c6d6 <__rt_pmu_cluster_power_up+0x36>

1c00c76a <InitFlls>:

  }
}

void  __attribute__ ((noinline)) InitFlls()
{
1c00c76a:	1141                	addi	sp,sp,-16
1c00c76c:	c422                	sw	s0,8(sp)
  __rt_bridge_req_shutdown();

  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00c76e:	1c010437          	lui	s0,0x1c010
{
1c00c772:	c606                	sw	ra,12(sp)
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00c774:	7c840413          	addi	s0,s0,1992 # 1c0107c8 <SystemStateToSCUFastSeq>
  __rt_bridge_req_shutdown();
1c00c778:	b82ff0ef          	jal	ra,1c00bafa <__rt_bridge_req_shutdown>
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00c77c:	01c44583          	lbu	a1,28(s0)
1c00c780:	4501                	li	a0,0
1c00c782:	c04595b3          	p.extractu	a1,a1,0,4
1c00c786:	e77ff0ef          	jal	ra,1c00c5fc <InitOneFll>
#define PMU_ERROR_CLUSTER_STATE_CHANGE_FAILED   (0x1<<4)

extern void 		   InitPMUDriver();

static inline int 	   PMU_ClusterIsDown()    { return (CLUSTER_STATE(PMUState.State)==CLUSTER_OFF);}
static inline int 	   PMU_ClusterIsRunning() { return (CLUSTER_STATE(PMUState.State)==CLUSTER_ON);}
1c00c78a:	00844783          	lbu	a5,8(s0)
1c00c78e:	c00797b3          	p.extractu	a5,a5,0,0
  if (PMU_ClusterIsRunning()) InitOneFll(FLL_CLUSTER, PMURetentionState.Fields.FllClusterRetention);
1c00c792:	0017b963          	p.bneimm	a5,1,1c00c7a4 <InitFlls+0x3a>
1c00c796:	01c44583          	lbu	a1,28(s0)
1c00c79a:	4505                	li	a0,1
1c00c79c:	c05595b3          	p.extractu	a1,a1,0,5
1c00c7a0:	e5dff0ef          	jal	ra,1c00c5fc <InitOneFll>

#ifdef __RT_USE_BRIDGE
  __rt_bridge_set_available();
#endif
}
1c00c7a4:	4422                	lw	s0,8(sp)
1c00c7a6:	40b2                	lw	ra,12(sp)
1c00c7a8:	0141                	addi	sp,sp,16
  __rt_bridge_set_available();
1c00c7aa:	aacff06f          	j	1c00ba56 <__rt_bridge_set_available>

1c00c7ae <__rt_pmu_init>:
1c00c7ae:	1c0107b7          	lui	a5,0x1c010
  if (rt_platform() == ARCHI_PLATFORM_FPGA) {
1c00c7b2:	7b07a783          	lw	a5,1968(a5) # 1c0107b0 <__rt_platform>
1c00c7b6:	0a17a963          	p.beqimm	a5,1,1c00c868 <__rt_pmu_init+0xba>
{
1c00c7ba:	1141                	addi	sp,sp,-16
  __rt_wakeup_use_fast = 0;
1c00c7bc:	1c0117b7          	lui	a5,0x1c011
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_DCDC_CONFIG_OFFSET);
1c00c7c0:	1a104637          	lui	a2,0x1a104
{
1c00c7c4:	c606                	sw	ra,12(sp)
  __rt_wakeup_use_fast = 0;
1c00c7c6:	cc07ac23          	sw	zero,-808(a5) # 1c010cd8 <__rt_wakeup_use_fast>
1c00c7ca:	10062703          	lw	a4,256(a2) # 1a104100 <__l1_end+0xa1040bc>
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_RETENTION_CONFIG_OFFSET);
1c00c7ce:	10462683          	lw	a3,260(a2)
  PMURetentionState.Raw = GetRetentiveState();
1c00c7d2:	1c0107b7          	lui	a5,0x1c010
1c00c7d6:	7c878793          	addi	a5,a5,1992 # 1c0107c8 <SystemStateToSCUFastSeq>
1c00c7da:	cfd4                	sw	a3,28(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00c7dc:	c2e696b3          	p.extractu	a3,a3,1,14
1c00c7e0:	96be                	add	a3,a3,a5
1c00c7e2:	0286c683          	lbu	a3,40(a3) # 1a100028 <__l1_end+0xa0fffe4>
  PMUState.DCDC_Settings[REGU_OFF] = 0;
1c00c7e6:	000786a3          	sb	zero,13(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00c7ea:	00d78423          	sb	a3,8(a5)
  PMUState.DCDC_Settings[REGU_NV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Nominal*8);
1c00c7ee:	c80716b3          	p.extractu	a3,a4,4,0
1c00c7f2:	00d78523          	sb	a3,10(a5)
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00c7f6:	c90716b3          	p.extractu	a3,a4,4,16
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00c7fa:	c9871733          	p.extractu	a4,a4,4,24
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00c7fe:	00d785a3          	sb	a3,11(a5)
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00c802:	00e78623          	sb	a4,12(a5)
  Bypass.Raw = GetPMUBypass();
1c00c806:	07062783          	lw	a5,112(a2)
  Bypass.Fields.Bypass = 1;
1c00c80a:	4705                	li	a4,1
1c00c80c:	c00727b3          	p.insert	a5,a4,0,0
  Bypass.Fields.BypassClock = 1;
1c00c810:	c09727b3          	p.insert	a5,a4,0,9
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00c814:	06f62823          	sw	a5,112(a2)
  InitFlls();
1c00c818:	f53ff0ef          	jal	ra,1c00c76a <InitFlls>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_CLUSTER_ON_OFF);
1c00c81c:	457d                	li	a0,31
1c00c81e:	c49ff0ef          	jal	ra,1c00c466 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_MSP);
1c00c822:	02000513          	li	a0,32
1c00c826:	c41ff0ef          	jal	ra,1c00c466 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_MODE_CHANGED);
1c00c82a:	02100513          	li	a0,33
1c00c82e:	c39ff0ef          	jal	ra,1c00c466 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_OK);
1c00c832:	02200513          	li	a0,34
1c00c836:	c31ff0ef          	jal	ra,1c00c466 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_DELAYED);
1c00c83a:	02300513          	li	a0,35
1c00c83e:	c29ff0ef          	jal	ra,1c00c466 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_PICL_OK);
1c00c842:	02400513          	li	a0,36
1c00c846:	c21ff0ef          	jal	ra,1c00c466 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_SCU_OK);
1c00c84a:	02500513          	li	a0,37
1c00c84e:	c19ff0ef          	jal	ra,1c00c466 <soc_eu_fcEventMask_setEvent>
  PMU_Write(DLC_IMR, 0x7);
1c00c852:	1a1077b7          	lui	a5,0x1a107
1c00c856:	471d                	li	a4,7
1c00c858:	00e7a623          	sw	a4,12(a5) # 1a10700c <__l1_end+0xa106fc8>
  PMU_Write(DLC_IFR, (MAESTRO_EVENT_PICL_OK|MAESTRO_EVENT_SCU_OK));
1c00c85c:	4761                	li	a4,24
1c00c85e:	00e7a823          	sw	a4,16(a5)
}
1c00c862:	40b2                	lw	ra,12(sp)
1c00c864:	0141                	addi	sp,sp,16
1c00c866:	8082                	ret
1c00c868:	8082                	ret

1c00c86a <__rt_fll_init>:


unsigned int __rt_fll_init(int fll)
{
  return FllsFrequency[fll];
1c00c86a:	00251793          	slli	a5,a0,0x2
1c00c86e:	1c010537          	lui	a0,0x1c010
1c00c872:	7c850513          	addi	a0,a0,1992 # 1c0107c8 <SystemStateToSCUFastSeq>
1c00c876:	953e                	add	a0,a0,a5
}
1c00c878:	5108                	lw	a0,32(a0)
1c00c87a:	8082                	ret

1c00c87c <__rt_fll_deinit>:

void __rt_fll_deinit(int fll)
{
}
1c00c87c:	8082                	ret

1c00c87e <__rt_flls_constructor>:

void __rt_flls_constructor()
{
}
1c00c87e:	8082                	ret

1c00c880 <__rt_fll_set_freq>:

unsigned int __rt_fll_set_freq(int fll, unsigned int frequency)
{
  return SetFllFrequency(fll, frequency, 0);
1c00c880:	4601                	li	a2,0
1c00c882:	c9bff06f          	j	1c00c51c <SetFllFrequency>

1c00c886 <__rt_init_cluster_data>:
{
#if defined(EU_VERSION) && EU_VERSION >= 3
  eu_evt_maskSet((1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT));
  rt_team_fork(rt_nb_pe(), cluster_pe_start, NULL);
#endif
}
1c00c886:	04050713          	addi	a4,a0,64
1c00c88a:	00400793          	li	a5,4
1c00c88e:	01671613          	slli	a2,a4,0x16
1c00c892:	e6c7b7b3          	p.bclr	a5,a5,19,12
1c00c896:	1c0116b7          	lui	a3,0x1c011
1c00c89a:	97b2                	add	a5,a5,a2
1c00c89c:	d0868693          	addi	a3,a3,-760 # 1c010d08 <_bss_end>
1c00c8a0:	04000713          	li	a4,64
1c00c8a4:	8f95                	sub	a5,a5,a3
1c00c8a6:	00f685b3          	add	a1,a3,a5
1c00c8aa:	02e04963          	bgtz	a4,1c00c8dc <__rt_init_cluster_data+0x56>
1c00c8ae:	1c0117b7          	lui	a5,0x1c011
1c00c8b2:	02800713          	li	a4,40
1c00c8b6:	ce078793          	addi	a5,a5,-800 # 1c010ce0 <__rt_fc_cluster_data>
1c00c8ba:	42e507b3          	p.mac	a5,a0,a4
1c00c8be:	00201737          	lui	a4,0x201
1c00c8c2:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00c8c6:	9732                	add	a4,a4,a2
1c00c8c8:	cb98                	sw	a4,16(a5)
1c00c8ca:	00400713          	li	a4,4
1c00c8ce:	e6c73733          	p.bclr	a4,a4,19,12
1c00c8d2:	9732                	add	a4,a4,a2
1c00c8d4:	0007a423          	sw	zero,8(a5)
1c00c8d8:	cbd8                	sw	a4,20(a5)
1c00c8da:	8082                	ret
1c00c8dc:	0046a80b          	p.lw	a6,4(a3!)
1c00c8e0:	1771                	addi	a4,a4,-4
1c00c8e2:	0105a023          	sw	a6,0(a1)
1c00c8e6:	b7c1                	j	1c00c8a6 <__rt_init_cluster_data+0x20>

1c00c8e8 <__rt_cluster_init>:
1c00c8e8:	1c011537          	lui	a0,0x1c011
1c00c8ec:	1141                	addi	sp,sp,-16
1c00c8ee:	02800613          	li	a2,40
1c00c8f2:	4581                	li	a1,0
1c00c8f4:	ce050513          	addi	a0,a0,-800 # 1c010ce0 <__rt_fc_cluster_data>
1c00c8f8:	c606                	sw	ra,12(sp)
1c00c8fa:	08c020ef          	jal	ra,1c00e986 <memset>
1c00c8fe:	1c0105b7          	lui	a1,0x1c010
1c00c902:	d0858593          	addi	a1,a1,-760 # 1c00fd08 <__rt_dma_2d>
1c00c906:	4525                	li	a0,9
1c00c908:	d39fe0ef          	jal	ra,1c00b640 <rt_irq_set_handler>
1c00c90c:	1c0005b7          	lui	a1,0x1c000
1c00c910:	1cc58593          	addi	a1,a1,460 # 1c0001cc <__rt_remote_enqueue_event>
1c00c914:	4505                	li	a0,1
1c00c916:	d2bfe0ef          	jal	ra,1c00b640 <rt_irq_set_handler>
1c00c91a:	4789                	li	a5,2
1c00c91c:	00204737          	lui	a4,0x204
1c00c920:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00c924:	00f72423          	sw	a5,8(a4)
1c00c928:	1c0005b7          	lui	a1,0x1c000
1c00c92c:	19458593          	addi	a1,a1,404 # 1c000194 <__rt_bridge_enqueue_event>
1c00c930:	4511                	li	a0,4
1c00c932:	d0ffe0ef          	jal	ra,1c00b640 <rt_irq_set_handler>
1c00c936:	47c1                	li	a5,16
1c00c938:	00204737          	lui	a4,0x204
1c00c93c:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00c940:	00f72423          	sw	a5,8(a4)
1c00c944:	40b2                	lw	ra,12(sp)
1c00c946:	4501                	li	a0,0
1c00c948:	0141                	addi	sp,sp,16
1c00c94a:	8082                	ret

1c00c94c <__rt_cluster_mount_step>:
{
1c00c94c:	7179                	addi	sp,sp,-48
1c00c94e:	ce4e                	sw	s3,28(sp)
1c00c950:	cc52                	sw	s4,24(sp)
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00c952:	1c000a37          	lui	s4,0x1c000
  return (void *)(ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ((int)data & 0xFFF));
1c00c956:	00400993          	li	s3,4
1c00c95a:	080a0a13          	addi	s4,s4,128 # 1c000080 <_start>
{
1c00c95e:	d422                	sw	s0,40(sp)
1c00c960:	d606                	sw	ra,44(sp)
1c00c962:	d226                	sw	s1,36(sp)
1c00c964:	d04a                	sw	s2,32(sp)
1c00c966:	ca56                	sw	s5,20(sp)
1c00c968:	842a                	mv	s0,a0
1c00c96a:	e6c9b9b3          	p.bclr	s3,s3,19,12
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00c96e:	ce0a3a33          	p.bclr	s4,s4,7,0
    switch (cluster->state)
1c00c972:	4c5c                	lw	a5,28(s0)
1c00c974:	0217ad63          	p.beqimm	a5,1,1c00c9ae <__rt_cluster_mount_step+0x62>
1c00c978:	0c27a663          	p.beqimm	a5,2,1c00ca44 <__rt_cluster_mount_step+0xf8>
1c00c97c:	e3e1                	bnez	a5,1c00ca3c <__rt_cluster_mount_step+0xf0>
  int cid = cluster->cid;
1c00c97e:	5018                	lw	a4,32(s0)
  cluster->powered_up = 0;
1c00c980:	00042c23          	sw	zero,24(s0)
  if (cid == 0)
1c00c984:	eb01                	bnez	a4,1c00c994 <__rt_cluster_mount_step+0x48>
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00c986:	5048                	lw	a0,36(s0)
1c00c988:	006c                	addi	a1,sp,12
    int pending = 0;
1c00c98a:	c602                	sw	zero,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00c98c:	d15ff0ef          	jal	ra,1c00c6a0 <__rt_pmu_cluster_power_up>
    return pending;
1c00c990:	47b2                	lw	a5,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00c992:	cc08                	sw	a0,24(s0)
    cluster->state++;
1c00c994:	4c58                	lw	a4,28(s0)
1c00c996:	0705                	addi	a4,a4,1
1c00c998:	cc58                	sw	a4,28(s0)
  while(!end)
1c00c99a:	dfe1                	beqz	a5,1c00c972 <__rt_cluster_mount_step+0x26>
}
1c00c99c:	50b2                	lw	ra,44(sp)
1c00c99e:	5422                	lw	s0,40(sp)
1c00c9a0:	5492                	lw	s1,36(sp)
1c00c9a2:	5902                	lw	s2,32(sp)
1c00c9a4:	49f2                	lw	s3,28(sp)
1c00c9a6:	4a62                	lw	s4,24(sp)
1c00c9a8:	4ad2                	lw	s5,20(sp)
1c00c9aa:	6145                	addi	sp,sp,48
1c00c9ac:	8082                	ret
1c00c9ae:	02042a83          	lw	s5,32(s0)
1c00c9b2:	040a8493          	addi	s1,s5,64
1c00c9b6:	04da                	slli	s1,s1,0x16
1c00c9b8:	009987b3          	add	a5,s3,s1
  pool->first_call_fc_for_cl = NULL;
1c00c9bc:	0007a023          	sw	zero,0(a5)
  pool->first_call_fc = NULL;
1c00c9c0:	0007a223          	sw	zero,4(a5)
  pool->last_call_fc = NULL;
1c00c9c4:	0007a423          	sw	zero,8(a5)
  __rt_cluster_fc_task_lock = 0;
1c00c9c8:	100007b7          	lui	a5,0x10000
1c00c9cc:	0407a023          	sw	zero,64(a5) # 10000040 <__rt_cluster_fc_task_lock>
  return __rt_platform;
1c00c9d0:	1c0107b7          	lui	a5,0x1c010
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00c9d4:	7b07a783          	lw	a5,1968(a5) # 1c0107b0 <__rt_platform>
1c00c9d8:	0017af63          	p.beqimm	a5,1,1c00c9f6 <__rt_cluster_mount_step+0xaa>
      int init_freq = __rt_fll_init(__RT_FLL_CL);
1c00c9dc:	4505                	li	a0,1
1c00c9de:	e8dff0ef          	jal	ra,1c00c86a <__rt_fll_init>

  #if defined(FLL_VERSION)

  static inline int rt_freq_get(rt_freq_domain_e domain)
  {
    return __rt_freq_domains[domain];
1c00c9e2:	1c0117b7          	lui	a5,0x1c011
1c00c9e6:	cd078793          	addi	a5,a5,-816 # 1c010cd0 <__rt_freq_domains>
1c00c9ea:	43cc                	lw	a1,4(a5)
      if (freq)
1c00c9ec:	c9b1                	beqz	a1,1c00ca40 <__rt_cluster_mount_step+0xf4>
    return rt_freq_set_and_get(domain, freq, NULL);
1c00c9ee:	4601                	li	a2,0
1c00c9f0:	4505                	li	a0,1
1c00c9f2:	9c1ff0ef          	jal	ra,1c00c3b2 <rt_freq_set_and_get>
    IP_WRITE(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid), ARCHI_CLUSTER_CTRL_CLUSTER_CLK_GATE, 1);
1c00c9f6:	00200937          	lui	s2,0x200
1c00c9fa:	01248733          	add	a4,s1,s2
1c00c9fe:	4785                	li	a5,1
1c00ca00:	02f72023          	sw	a5,32(a4)
    __rt_init_cluster_data(cid);
1c00ca04:	8556                	mv	a0,s5
1c00ca06:	e81ff0ef          	jal	ra,1c00c886 <__rt_init_cluster_data>
    __rt_alloc_init_l1(cid);
1c00ca0a:	8556                	mv	a0,s5
1c00ca0c:	c8aff0ef          	jal	ra,1c00be96 <__rt_alloc_init_l1>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
1c00ca10:	002017b7          	lui	a5,0x201
1c00ca14:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00ca18:	577d                	li	a4,-1
1c00ca1a:	04090913          	addi	s2,s2,64 # 200040 <__L2+0x180040>
1c00ca1e:	00e4e7a3          	p.sw	a4,a5(s1)
1c00ca22:	9926                	add	s2,s2,s1
1c00ca24:	008250fb          	lp.setupi	x1,8,1c00ca2c <__rt_cluster_mount_step+0xe0>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00ca28:	0149222b          	p.sw	s4,4(s2!)
1c00ca2c:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00ca2e:	002007b7          	lui	a5,0x200
1c00ca32:	07a1                	addi	a5,a5,8
1c00ca34:	0ff00713          	li	a4,255
1c00ca38:	00e4e7a3          	p.sw	a4,a5(s1)
    switch (cluster->state)
1c00ca3c:	4781                	li	a5,0
1c00ca3e:	bf99                	j	1c00c994 <__rt_cluster_mount_step+0x48>
    __rt_freq_domains[domain] = freq;
1c00ca40:	c3c8                	sw	a0,4(a5)
1c00ca42:	bf55                	j	1c00c9f6 <__rt_cluster_mount_step+0xaa>
        __rt_event_restore(cluster->mount_event);
1c00ca44:	505c                	lw	a5,36(s0)
  event->implem.pending = event->implem.saved_pending;
1c00ca46:	5bd8                	lw	a4,52(a5)
1c00ca48:	d3d8                	sw	a4,36(a5)
  event->arg[0] = (uintptr_t)event->implem.saved_callback;
1c00ca4a:	57d8                	lw	a4,44(a5)
1c00ca4c:	c3d8                	sw	a4,4(a5)
  event->arg[1] = (uintptr_t)event->implem.saved_arg;
1c00ca4e:	5b98                	lw	a4,48(a5)
1c00ca50:	c798                	sw	a4,8(a5)
  event->implem.saved_pending = 0;
1c00ca52:	0207aa23          	sw	zero,52(a5) # 200034 <__L2+0x180034>
        __rt_event_enqueue(cluster->mount_event);
1c00ca56:	505c                	lw	a5,36(s0)
  if (sched->first) {
1c00ca58:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00ca5c:	01c00693          	li	a3,28
  event->next = NULL;
1c00ca60:	0007a023          	sw	zero,0(a5)
  if (sched->first) {
1c00ca64:	c611                	beqz	a2,1c00ca70 <__rt_cluster_mount_step+0x124>
    sched->last->next = event;
1c00ca66:	42d8                	lw	a4,4(a3)
1c00ca68:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c00ca6a:	c2dc                	sw	a5,4(a3)
        end = 1;
1c00ca6c:	4785                	li	a5,1
1c00ca6e:	b71d                	j	1c00c994 <__rt_cluster_mount_step+0x48>
    sched->first = event;
1c00ca70:	00f02e23          	sw	a5,28(zero) # 1c <__rt_sched>
1c00ca74:	bfdd                	j	1c00ca6a <__rt_cluster_mount_step+0x11e>

1c00ca76 <pi_cluster_conf_init>:
  conf->id = 0;
1c00ca76:	00052223          	sw	zero,4(a0)
}
1c00ca7a:	8082                	ret

1c00ca7c <pi_cluster_open>:
{
1c00ca7c:	1101                	addi	sp,sp,-32
1c00ca7e:	ce06                	sw	ra,28(sp)
1c00ca80:	cc22                	sw	s0,24(sp)
1c00ca82:	ca26                	sw	s1,20(sp)
1c00ca84:	c84a                	sw	s2,16(sp)
1c00ca86:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ca88:	30047973          	csrrci	s2,mstatus,8
  struct pi_cluster_conf *conf = (struct pi_cluster_conf *)cluster_dev->config;
1c00ca8c:	00452983          	lw	s3,4(a0)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00ca90:	1c0114b7          	lui	s1,0x1c011
1c00ca94:	02800793          	li	a5,40
  int cid = conf->id;
1c00ca98:	0049a703          	lw	a4,4(s3)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00ca9c:	ce048493          	addi	s1,s1,-800 # 1c010ce0 <__rt_fc_cluster_data>
1c00caa0:	42f704b3          	p.mac	s1,a4,a5
1c00caa4:	c504                	sw	s1,8(a0)
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00caa6:	928ff0ef          	jal	ra,1c00bbce <__rt_wait_event_prepare_blocking>
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00caaa:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00caae:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00cab2:	ca5797b3          	p.extractu	a5,a5,5,5
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00cab6:	842a                	mv	s0,a0
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00cab8:	04e79563          	bne	a5,a4,1c00cb02 <pi_cluster_open+0x86>
  event->implem.saved_pending = event->implem.pending;
1c00cabc:	515c                	lw	a5,36(a0)
    cluster->state = RT_CLUSTER_MOUNT_START;
1c00cabe:	0004ae23          	sw	zero,28(s1)
    cluster->mount_event = event;
1c00cac2:	d0c8                	sw	a0,36(s1)
1c00cac4:	d95c                	sw	a5,52(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00cac6:	415c                	lw	a5,4(a0)
  event->implem.keep = 0;
1c00cac8:	02052423          	sw	zero,40(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00cacc:	d55c                	sw	a5,44(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00cace:	451c                	lw	a5,8(a0)
  event->arg[1] = (uintptr_t)arg;
1c00cad0:	c504                	sw	s1,8(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00cad2:	d91c                	sw	a5,48(a0)
  event->arg[0] = (uintptr_t)callback;
1c00cad4:	1c00d7b7          	lui	a5,0x1c00d
1c00cad8:	94c78793          	addi	a5,a5,-1716 # 1c00c94c <__rt_cluster_mount_step>
1c00cadc:	c15c                	sw	a5,4(a0)
  event->implem.pending = 1;  
1c00cade:	4785                	li	a5,1
1c00cae0:	d15c                	sw	a5,36(a0)
    __rt_cluster_mount_step((void *)cluster);
1c00cae2:	8526                	mv	a0,s1
1c00cae4:	e69ff0ef          	jal	ra,1c00c94c <__rt_cluster_mount_step>
  __rt_wait_event(event);
1c00cae8:	8522                	mv	a0,s0
1c00caea:	a36ff0ef          	jal	ra,1c00bd20 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00caee:	30091073          	csrw	mstatus,s2
}
1c00caf2:	40f2                	lw	ra,28(sp)
1c00caf4:	4462                	lw	s0,24(sp)
1c00caf6:	44d2                	lw	s1,20(sp)
1c00caf8:	4942                	lw	s2,16(sp)
1c00cafa:	49b2                	lw	s3,12(sp)
1c00cafc:	4501                	li	a0,0
1c00cafe:	6105                	addi	sp,sp,32
1c00cb00:	8082                	ret
  if (__rt_cluster_mount(&__rt_fc_cluster_data[cid], conf->id, 0, event))
1c00cb02:	0049a483          	lw	s1,4(s3)
    __rt_init_cluster_data(cid);
1c00cb06:	8526                	mv	a0,s1
1c00cb08:	d7fff0ef          	jal	ra,1c00c886 <__rt_init_cluster_data>
1c00cb0c:	04048513          	addi	a0,s1,64
1c00cb10:	002017b7          	lui	a5,0x201
1c00cb14:	055a                	slli	a0,a0,0x16
1c00cb16:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00cb1a:	577d                	li	a4,-1
1c00cb1c:	00e567a3          	p.sw	a4,a5(a0)
1c00cb20:	002007b7          	lui	a5,0x200
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00cb24:	1c000737          	lui	a4,0x1c000
1c00cb28:	04478793          	addi	a5,a5,68 # 200044 <__L2+0x180044>
1c00cb2c:	08070713          	addi	a4,a4,128 # 1c000080 <_start>
1c00cb30:	97aa                	add	a5,a5,a0
1c00cb32:	ce073733          	p.bclr	a4,a4,7,0
1c00cb36:	007250fb          	lp.setupi	x1,7,1c00cb3e <pi_cluster_open+0xc2>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00cb3a:	00e7a22b          	p.sw	a4,4(a5!)
1c00cb3e:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00cb40:	002007b7          	lui	a5,0x200
1c00cb44:	07a1                	addi	a5,a5,8
1c00cb46:	577d                	li	a4,-1
1c00cb48:	00e567a3          	p.sw	a4,a5(a0)
    rt_event_push(event);
1c00cb4c:	8522                	mv	a0,s0
1c00cb4e:	94aff0ef          	jal	ra,1c00bc98 <rt_event_push>
1c00cb52:	bf59                	j	1c00cae8 <pi_cluster_open+0x6c>

1c00cb54 <pi_cluster_close>:
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00cb54:	451c                	lw	a5,8(a0)
{
1c00cb56:	1101                	addi	sp,sp,-32
1c00cb58:	cc22                	sw	s0,24(sp)
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00cb5a:	5380                	lw	s0,32(a5)
1c00cb5c:	1c0107b7          	lui	a5,0x1c010
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00cb60:	7b07a783          	lw	a5,1968(a5) # 1c0107b0 <__rt_platform>
{
1c00cb64:	ce06                	sw	ra,28(sp)
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00cb66:	0017a563          	p.beqimm	a5,1,1c00cb70 <pi_cluster_close+0x1c>
      __rt_fll_deinit(__RT_FLL_CL);
1c00cb6a:	4505                	li	a0,1
1c00cb6c:	d11ff0ef          	jal	ra,1c00c87c <__rt_fll_deinit>
    int pending = 0;
1c00cb70:	c602                	sw	zero,12(sp)
  if (cid == 0) __rt_pmu_cluster_power_down(event, &pending);
1c00cb72:	e409                	bnez	s0,1c00cb7c <pi_cluster_close+0x28>
1c00cb74:	006c                	addi	a1,sp,12
1c00cb76:	4501                	li	a0,0
1c00cb78:	915ff0ef          	jal	ra,1c00c48c <__rt_pmu_cluster_power_down>
}
1c00cb7c:	40f2                	lw	ra,28(sp)
1c00cb7e:	4462                	lw	s0,24(sp)
1c00cb80:	4501                	li	a0,0
1c00cb82:	6105                	addi	sp,sp,32
1c00cb84:	8082                	ret

1c00cb86 <__rt_cluster_push_fc_event>:
  while (rt_tas_lock_32((int)&__rt_cluster_fc_task_lock) == -1)
1c00cb86:	100006b7          	lui	a3,0x10000
1c00cb8a:	04068693          	addi	a3,a3,64 # 10000040 <__rt_cluster_fc_task_lock>
  return addr | (1<<ARCHI_L1_TAS_BIT);
1c00cb8e:	c146c5b3          	p.bset	a1,a3,0,20
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00cb92:	4709                	li	a4,2
1c00cb94:	002047b7          	lui	a5,0x204
  signed int result = *(volatile signed int *)__rt_tas_addr(addr);
1c00cb98:	4190                	lw	a2,0(a1)
1c00cb9a:	05f62063          	p.beqimm	a2,-1,1c00cbda <__rt_cluster_push_fc_event+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00cb9e:	01402773          	csrr	a4,uhartid
  while(data->events != NULL)
1c00cba2:	1c0117b7          	lui	a5,0x1c011
  return (hart_id >> 5) & 0x3f;
1c00cba6:	8715                	srai	a4,a4,0x5
1c00cba8:	f2673733          	p.bclr	a4,a4,25,6
1c00cbac:	02800613          	li	a2,40
1c00cbb0:	ce078793          	addi	a5,a5,-800 # 1c010ce0 <__rt_fc_cluster_data>
1c00cbb4:	42c707b3          	p.mac	a5,a4,a2
1c00cbb8:	4609                	li	a2,2
1c00cbba:	00204737          	lui	a4,0x204
1c00cbbe:	43cc                	lw	a1,4(a5)
1c00cbc0:	e585                	bnez	a1,1c00cbe8 <__rt_cluster_push_fc_event+0x62>
  data->events = event;
1c00cbc2:	c3c8                	sw	a0,4(a5)
  pulp_write32(evtAddr, coreSet);
1c00cbc4:	1b2017b7          	lui	a5,0x1b201
1c00cbc8:	e007a223          	sw	zero,-508(a5) # 1b200e04 <__fc_tcdm_end+0x1ff9e4>
  *(volatile signed int *)addr = value;
1c00cbcc:	0006a023          	sw	zero,0(a3)
1c00cbd0:	002047b7          	lui	a5,0x204
1c00cbd4:	1007a223          	sw	zero,260(a5) # 204104 <__L2+0x184104>
}
1c00cbd8:	8082                	ret
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00cbda:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00cbde:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00cbe2:	00e7a223          	sw	a4,4(a5)
1c00cbe6:	bf4d                	j	1c00cb98 <__rt_cluster_push_fc_event+0x12>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00cbe8:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00cbec:	03c76583          	p.elw	a1,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00cbf0:	00c72223          	sw	a2,4(a4)
1c00cbf4:	b7e9                	j	1c00cbbe <__rt_cluster_push_fc_event+0x38>

1c00cbf6 <__rt_cluster_new>:
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00cbf6:	1c00d5b7          	lui	a1,0x1c00d
{
1c00cbfa:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00cbfc:	4601                	li	a2,0
1c00cbfe:	8e858593          	addi	a1,a1,-1816 # 1c00c8e8 <__rt_cluster_init>
1c00cc02:	4501                	li	a0,0
{
1c00cc04:	c606                	sw	ra,12(sp)
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00cc06:	ba7fe0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>
  if (err) rt_fatal("Unable to initialize time driver\n");
1c00cc0a:	c10d                	beqz	a0,1c00cc2c <__rt_cluster_new+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00cc0c:	01402673          	csrr	a2,uhartid
1c00cc10:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00cc14:	40565593          	srai	a1,a2,0x5
1c00cc18:	f265b5b3          	p.bclr	a1,a1,25,6
1c00cc1c:	f4563633          	p.bclr	a2,a2,26,5
1c00cc20:	3ac50513          	addi	a0,a0,940 # 1c0103ac <__himax_reg_init+0x1d0>
1c00cc24:	09e020ef          	jal	ra,1c00ecc2 <printf>
1c00cc28:	01e020ef          	jal	ra,1c00ec46 <abort>
}
1c00cc2c:	40b2                	lw	ra,12(sp)
1c00cc2e:	0141                	addi	sp,sp,16
1c00cc30:	8082                	ret

1c00cc32 <__rt_cluster_pulpos_emu_init>:
static struct pi_device *__rt_fc_cluster_device;
static struct pi_cluster_task __rt_pulpos_emu_global_cluster_task;


static void __attribute__((constructor)) __rt_cluster_pulpos_emu_init()
{
1c00cc32:	1141                	addi	sp,sp,-16
  int nb_cluster = rt_nb_cluster();

  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00cc34:	45b1                	li	a1,12
1c00cc36:	4505                	li	a0,1
{
1c00cc38:	c606                	sw	ra,12(sp)
  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00cc3a:	9feff0ef          	jal	ra,1c00be38 <rt_alloc>
1c00cc3e:	1c0117b7          	lui	a5,0x1c011
1c00cc42:	c6a7ac23          	sw	a0,-904(a5) # 1c010c78 <__rt_fc_cluster_device>
  if (__rt_fc_cluster_device == NULL) {
1c00cc46:	e10d                	bnez	a0,1c00cc68 <__rt_cluster_pulpos_emu_init+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00cc48:	01402673          	csrr	a2,uhartid
    rt_fatal("Unable to allocate cluster control structure\n");
1c00cc4c:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00cc50:	40565593          	srai	a1,a2,0x5
1c00cc54:	f265b5b3          	p.bclr	a1,a1,25,6
1c00cc58:	f4563633          	p.bclr	a2,a2,26,5
1c00cc5c:	3f450513          	addi	a0,a0,1012 # 1c0103f4 <__himax_reg_init+0x218>
1c00cc60:	062020ef          	jal	ra,1c00ecc2 <printf>
1c00cc64:	7e3010ef          	jal	ra,1c00ec46 <abort>
    return;
  }
}
1c00cc68:	40b2                	lw	ra,12(sp)
1c00cc6a:	0141                	addi	sp,sp,16
1c00cc6c:	8082                	ret

1c00cc6e <rt_cluster_call>:

int rt_cluster_call(rt_cluster_call_t *_call, int cid, void (*entry)(void *arg), void *arg, void *stacks, int master_stack_size, int slave_stack_size, int nb_pe, rt_event_t *event)
{
1c00cc6e:	7139                	addi	sp,sp,-64
1c00cc70:	d84a                	sw	s2,48(sp)
1c00cc72:	4906                	lw	s2,64(sp)
1c00cc74:	dc22                	sw	s0,56(sp)
1c00cc76:	842e                	mv	s0,a1
1c00cc78:	de06                	sw	ra,60(sp)
1c00cc7a:	da26                	sw	s1,52(sp)
1c00cc7c:	d64e                	sw	s3,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00cc7e:	300479f3          	csrrci	s3,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00cc82:	84ca                	mv	s1,s2
  if (likely(event != NULL)) return event;
1c00cc84:	02091163          	bnez	s2,1c00cca6 <rt_cluster_call+0x38>
  return __rt_wait_event_prepare_blocking();
1c00cc88:	ce32                	sw	a2,28(sp)
1c00cc8a:	cc36                	sw	a3,24(sp)
1c00cc8c:	ca3a                	sw	a4,20(sp)
1c00cc8e:	c83e                	sw	a5,16(sp)
1c00cc90:	c642                	sw	a6,12(sp)
1c00cc92:	c446                	sw	a7,8(sp)
1c00cc94:	f3bfe0ef          	jal	ra,1c00bbce <__rt_wait_event_prepare_blocking>
1c00cc98:	48a2                	lw	a7,8(sp)
1c00cc9a:	4832                	lw	a6,12(sp)
1c00cc9c:	47c2                	lw	a5,16(sp)
1c00cc9e:	4752                	lw	a4,20(sp)
1c00cca0:	46e2                	lw	a3,24(sp)
1c00cca2:	4672                	lw	a2,28(sp)
1c00cca4:	84aa                	mv	s1,a0
static inline struct pi_cluster_task *pi_cluster_task(struct pi_cluster_task *task, void (*entry)(void*), void *arg)
{
    #if defined(PMSIS_DRIVERS)
    memset(task, 0, sizeof(struct pi_cluster_task));
    #endif  /* PMSIS_DRIVERS */
    task->entry = entry;
1c00cca6:	1c0115b7          	lui	a1,0x1c011
1c00ccaa:	a1c58513          	addi	a0,a1,-1508 # 1c010a1c <__rt_pulpos_emu_global_cluster_task>
  struct pi_cluster_task *task = &__rt_pulpos_emu_global_cluster_task;

  pi_cluster_task(task, entry, arg);

  task->stacks = stacks;
  task->stack_size = master_stack_size;
1c00ccae:	c55c                	sw	a5,12(a0)
  task->slave_stack_size = slave_stack_size;
  task->nb_cores = nb_pe;

  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00ccb0:	1c0117b7          	lui	a5,0x1c011
1c00ccb4:	c110                	sw	a2,0(a0)
    task->arg = arg;
1c00ccb6:	c154                	sw	a3,4(a0)
  task->stacks = stacks;
1c00ccb8:	c518                	sw	a4,8(a0)
  task->slave_stack_size = slave_stack_size;
1c00ccba:	01052823          	sw	a6,16(a0)
  task->nb_cores = nb_pe;
1c00ccbe:	01152a23          	sw	a7,20(a0)
  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00ccc2:	c787a503          	lw	a0,-904(a5) # 1c010c78 <__rt_fc_cluster_device>
1c00ccc6:	47b1                	li	a5,12
1c00ccc8:	8626                	mv	a2,s1
1c00ccca:	42f40533          	p.mac	a0,s0,a5
1c00ccce:	a1c58593          	addi	a1,a1,-1508
1c00ccd2:	2061                	jal	1c00cd5a <pi_cluster_send_task_to_cl_async>
1c00ccd4:	842a                	mv	s0,a0
1c00ccd6:	cd01                	beqz	a0,1c00ccee <rt_cluster_call+0x80>
  __builtin_pulp_spr_write(reg, val);
1c00ccd8:	30099073          	csrw	mstatus,s3
  {
  	rt_irq_restore(irq);
  	return -1;
1c00ccdc:	547d                	li	s0,-1
  __rt_wait_event_check(event, call_event);

  rt_irq_restore(irq);

  return 0;
}
1c00ccde:	8522                	mv	a0,s0
1c00cce0:	50f2                	lw	ra,60(sp)
1c00cce2:	5462                	lw	s0,56(sp)
1c00cce4:	54d2                	lw	s1,52(sp)
1c00cce6:	5942                	lw	s2,48(sp)
1c00cce8:	59b2                	lw	s3,44(sp)
1c00ccea:	6121                	addi	sp,sp,64
1c00ccec:	8082                	ret
  if (event == NULL) __rt_wait_event(call_event);
1c00ccee:	00091563          	bnez	s2,1c00ccf8 <rt_cluster_call+0x8a>
1c00ccf2:	8526                	mv	a0,s1
1c00ccf4:	82cff0ef          	jal	ra,1c00bd20 <__rt_wait_event>
1c00ccf8:	30099073          	csrw	mstatus,s3
  return 0;
1c00ccfc:	b7cd                	j	1c00ccde <rt_cluster_call+0x70>

1c00ccfe <rt_cluster_mount>:

void rt_cluster_mount(int mount, int cid, int flags, rt_event_t *event)
{
1c00ccfe:	7139                	addi	sp,sp,-64
1c00cd00:	dc22                	sw	s0,56(sp)
1c00cd02:	da26                	sw	s1,52(sp)
1c00cd04:	d84a                	sw	s2,48(sp)
1c00cd06:	4431                	li	s0,12
1c00cd08:	1c0114b7          	lui	s1,0x1c011
1c00cd0c:	de06                	sw	ra,60(sp)
1c00cd0e:	d64e                	sw	s3,44(sp)
1c00cd10:	8936                	mv	s2,a3
1c00cd12:	02858433          	mul	s0,a1,s0
1c00cd16:	c7848493          	addi	s1,s1,-904 # 1c010c78 <__rt_fc_cluster_device>
  if (mount)
1c00cd1a:	c91d                	beqz	a0,1c00cd50 <rt_cluster_mount+0x52>
  {
    struct pi_cluster_conf conf;
    pi_cluster_conf_init(&conf);
1c00cd1c:	0028                	addi	a0,sp,8
1c00cd1e:	89ae                	mv	s3,a1
1c00cd20:	d57ff0ef          	jal	ra,1c00ca76 <pi_cluster_conf_init>
    pi_open_from_conf(&__rt_fc_cluster_device[cid], &conf);
1c00cd24:	4088                	lw	a0,0(s1)
1c00cd26:	002c                	addi	a1,sp,8
1c00cd28:	9522                	add	a0,a0,s0
1c00cd2a:	913fe0ef          	jal	ra,1c00b63c <pi_open_from_conf>
    conf.id = cid;
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00cd2e:	4088                	lw	a0,0(s1)
    conf.id = cid;
1c00cd30:	c64e                	sw	s3,12(sp)
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00cd32:	9522                	add	a0,a0,s0
1c00cd34:	d49ff0ef          	jal	ra,1c00ca7c <pi_cluster_open>
  else
  {
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
  }

  if (event)
1c00cd38:	00090563          	beqz	s2,1c00cd42 <rt_cluster_mount+0x44>
    rt_event_push(event);
1c00cd3c:	854a                	mv	a0,s2
1c00cd3e:	f5bfe0ef          	jal	ra,1c00bc98 <rt_event_push>
}
1c00cd42:	50f2                	lw	ra,60(sp)
1c00cd44:	5462                	lw	s0,56(sp)
1c00cd46:	54d2                	lw	s1,52(sp)
1c00cd48:	5942                	lw	s2,48(sp)
1c00cd4a:	59b2                	lw	s3,44(sp)
1c00cd4c:	6121                	addi	sp,sp,64
1c00cd4e:	8082                	ret
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
1c00cd50:	4088                	lw	a0,0(s1)
1c00cd52:	9522                	add	a0,a0,s0
1c00cd54:	e01ff0ef          	jal	ra,1c00cb54 <pi_cluster_close>
1c00cd58:	b7c5                	j	1c00cd38 <rt_cluster_mount+0x3a>

1c00cd5a <pi_cluster_send_task_to_cl_async>:
  }
}
#endif

int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *task, pi_task_t *async_task)
{
1c00cd5a:	1101                	addi	sp,sp,-32
1c00cd5c:	ca26                	sw	s1,20(sp)
  rt_fc_cluster_data_t *data = (rt_fc_cluster_data_t *)device->data;
1c00cd5e:	4504                	lw	s1,8(a0)
{
1c00cd60:	cc22                	sw	s0,24(sp)
1c00cd62:	c256                	sw	s5,4(sp)
1c00cd64:	842e                	mv	s0,a1
1c00cd66:	8ab2                	mv	s5,a2
1c00cd68:	ce06                	sw	ra,28(sp)
1c00cd6a:	c84a                	sw	s2,16(sp)
1c00cd6c:	c64e                	sw	s3,12(sp)
1c00cd6e:	c452                	sw	s4,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00cd70:	30047a73          	csrrci	s4,mstatus,8

  int lock = __rt_cluster_lock(data);

  __rt_task_init(async_task);
  
  task->implem.pending = 1;
1c00cd74:	4785                	li	a5,1
  task->done = 0;
1c00cd76:	00060a23          	sb	zero,20(a2)
1c00cd7a:	d1dc                	sw	a5,36(a1)

  rt_cluster_call_pool_t *cl_data = data->pool;

  if (task->nb_cores == 0)
1c00cd7c:	49dc                	lw	a5,20(a1)
  rt_cluster_call_pool_t *cl_data = data->pool;
1c00cd7e:	0144a983          	lw	s3,20(s1)
  if (task->nb_cores == 0)
1c00cd82:	e399                	bnez	a5,1c00cd88 <pi_cluster_send_task_to_cl_async+0x2e>
    task->nb_cores = pi_cl_cluster_nb_cores();
1c00cd84:	47a1                	li	a5,8
1c00cd86:	c9dc                	sw	a5,20(a1)

  if (task->stacks == NULL)
1c00cd88:	441c                	lw	a5,8(s0)
1c00cd8a:	ef85                	bnez	a5,1c00cdc2 <pi_cluster_send_task_to_cl_async+0x68>
  {
    if (task->stack_size == 0)
1c00cd8c:	445c                	lw	a5,12(s0)
1c00cd8e:	eb81                	bnez	a5,1c00cd9e <pi_cluster_send_task_to_cl_async+0x44>
    {
      task->stack_size = 0x800;
1c00cd90:	6785                	lui	a5,0x1
1c00cd92:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00cd96:	c45c                	sw	a5,12(s0)
      task->slave_stack_size = 0x400;
1c00cd98:	40000793          	li	a5,1024
1c00cd9c:	c81c                	sw	a5,16(s0)
    }

    if (task->slave_stack_size == 0)
1c00cd9e:	481c                	lw	a5,16(s0)
1c00cda0:	00c42903          	lw	s2,12(s0)
1c00cda4:	e399                	bnez	a5,1c00cdaa <pi_cluster_send_task_to_cl_async+0x50>
      task->slave_stack_size = task->stack_size;
1c00cda6:	01242823          	sw	s2,16(s0)

    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00cdaa:	485c                	lw	a5,20(s0)
1c00cdac:	4818                	lw	a4,16(s0)

    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00cdae:	448c                	lw	a1,8(s1)
    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00cdb0:	17fd                	addi	a5,a5,-1
1c00cdb2:	42e78933          	p.mac	s2,a5,a4
    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00cdb6:	c9b5                	beqz	a1,1c00ce2a <pi_cluster_send_task_to_cl_async+0xd0>
1c00cdb8:	44d0                	lw	a2,12(s1)
1c00cdba:	05261f63          	bne	a2,s2,1c00ce18 <pi_cluster_send_task_to_cl_async+0xbe>

      if (data->stacks == NULL)
        goto error;
    }

    task->stacks = data->stacks;
1c00cdbe:	449c                	lw	a5,8(s1)
1c00cdc0:	c41c                	sw	a5,8(s0)

  task->completion_callback = async_task;
#ifdef ARCHI_HAS_CC
  task->implem.core_mask = (1<<(task->nb_cores-1)) - 1;
#else
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00cdc2:	4858                	lw	a4,20(s0)
1c00cdc4:	4785                	li	a5,1
  task->completion_callback = async_task;
1c00cdc6:	01542c23          	sw	s5,24(s0)
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00cdca:	00e797b3          	sll	a5,a5,a4
1c00cdce:	17fd                	addi	a5,a5,-1
1c00cdd0:	d41c                	sw	a5,40(s0)
#endif

  task->next = NULL;
1c00cdd2:	02042023          	sw	zero,32(s0)

  rt_compiler_barrier();

  if (cl_data->last_call_fc)
1c00cdd6:	0089a783          	lw	a5,8(s3)
1c00cdda:	cbb5                	beqz	a5,1c00ce4e <pi_cluster_send_task_to_cl_async+0xf4>
  {
    cl_data->last_call_fc->next = task;
1c00cddc:	d380                	sw	s0,32(a5)
  else
  {
    cl_data->first_call_fc = task;
  }

  cl_data->last_call_fc = task;
1c00cdde:	0089a423          	sw	s0,8(s3)

  rt_compiler_barrier();
  
  if (cl_data->first_call_fc_for_cl == NULL)
1c00cde2:	0009a783          	lw	a5,0(s3)
1c00cde6:	e399                	bnez	a5,1c00cdec <pi_cluster_send_task_to_cl_async+0x92>
    cl_data->first_call_fc_for_cl = task;
1c00cde8:	0089a023          	sw	s0,0(s3)
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00cdec:	509c                	lw	a5,32(s1)
  pulp_write32(evtAddr, coreSet);
1c00cdee:	00201737          	lui	a4,0x201
1c00cdf2:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00cdf6:	04078793          	addi	a5,a5,64
1c00cdfa:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c00cdfc:	0007e723          	p.sw	zero,a4(a5)
  __builtin_pulp_spr_write(reg, val);
1c00ce00:	300a1073          	csrw	mstatus,s4
  rt_compiler_barrier();
  eu_evt_trig(eu_evt_trig_cluster_addr(data->cid, RT_CLUSTER_CALL_EVT), 0);

  __rt_cluster_unlock(data, lock);

  return 0;
1c00ce04:	4501                	li	a0,0

error:
  __rt_cluster_unlock(data, lock);
  return -1;
}
1c00ce06:	40f2                	lw	ra,28(sp)
1c00ce08:	4462                	lw	s0,24(sp)
1c00ce0a:	44d2                	lw	s1,20(sp)
1c00ce0c:	4942                	lw	s2,16(sp)
1c00ce0e:	49b2                	lw	s3,12(sp)
1c00ce10:	4a22                	lw	s4,8(sp)
1c00ce12:	4a92                	lw	s5,4(sp)
1c00ce14:	6105                	addi	sp,sp,32
1c00ce16:	8082                	ret

#if defined(ARCHI_HAS_L1)

extern rt_alloc_t *__rt_alloc_l1;

static inline rt_alloc_t *rt_alloc_l1(int cid) { return &__rt_alloc_l1[cid]; }
1c00ce18:	509c                	lw	a5,32(s1)
1c00ce1a:	1c011737          	lui	a4,0x1c011
1c00ce1e:	cc072503          	lw	a0,-832(a4) # 1c010cc0 <__rt_alloc_l1>
1c00ce22:	078a                	slli	a5,a5,0x2
        rt_user_free(rt_alloc_l1(data->cid), data->stacks, data->stacks_size);
1c00ce24:	953e                	add	a0,a0,a5
1c00ce26:	fc7fe0ef          	jal	ra,1c00bdec <rt_user_free>
1c00ce2a:	509c                	lw	a5,32(s1)
1c00ce2c:	1c011737          	lui	a4,0x1c011
1c00ce30:	cc072503          	lw	a0,-832(a4) # 1c010cc0 <__rt_alloc_l1>
1c00ce34:	078a                	slli	a5,a5,0x2
      data->stacks_size = stacks_size;
1c00ce36:	0124a623          	sw	s2,12(s1)
      data->stacks = rt_user_alloc(rt_alloc_l1(data->cid), stacks_size);
1c00ce3a:	85ca                	mv	a1,s2
1c00ce3c:	953e                	add	a0,a0,a5
1c00ce3e:	f67fe0ef          	jal	ra,1c00bda4 <rt_user_alloc>
1c00ce42:	c488                	sw	a0,8(s1)
      if (data->stacks == NULL)
1c00ce44:	fd2d                	bnez	a0,1c00cdbe <pi_cluster_send_task_to_cl_async+0x64>
1c00ce46:	300a1073          	csrw	mstatus,s4
  return -1;
1c00ce4a:	557d                	li	a0,-1
1c00ce4c:	bf6d                	j	1c00ce06 <pi_cluster_send_task_to_cl_async+0xac>
    cl_data->first_call_fc = task;
1c00ce4e:	0089a223          	sw	s0,4(s3)
1c00ce52:	b771                	j	1c00cdde <pi_cluster_send_task_to_cl_async+0x84>

1c00ce54 <pi_cluster_send_task_to_cl>:



int pi_cluster_send_task_to_cl(struct pi_device *device, struct pi_cluster_task *task)
{
1c00ce54:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00ce56:	4785                	li	a5,1
  pi_task_t fc_task;

  pi_task_block(&fc_task);

  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00ce58:	860a                	mv	a2,sp
{
1c00ce5a:	c522                	sw	s0,136(sp)
1c00ce5c:	c706                	sw	ra,140(sp)
1c00ce5e:	c326                	sw	s1,132(sp)
1c00ce60:	c14a                	sw	s2,128(sp)
1c00ce62:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
1c00ce64:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c00ce66:	d43e                	sw	a5,40(sp)
1c00ce68:	00010a23          	sb	zero,20(sp)
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00ce6c:	eefff0ef          	jal	ra,1c00cd5a <pi_cluster_send_task_to_cl_async>
  {
    return -1;
1c00ce70:	547d                	li	s0,-1
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00ce72:	e509                	bnez	a0,1c00ce7c <pi_cluster_send_task_to_cl+0x28>
1c00ce74:	842a                	mv	s0,a0
  while(!task->done)
1c00ce76:	01410783          	lb	a5,20(sp)
1c00ce7a:	cb81                	beqz	a5,1c00ce8a <pi_cluster_send_task_to_cl+0x36>
  }

  pi_task_wait_on(&fc_task);

  return 0;
}
1c00ce7c:	8522                	mv	a0,s0
1c00ce7e:	40ba                	lw	ra,140(sp)
1c00ce80:	442a                	lw	s0,136(sp)
1c00ce82:	449a                	lw	s1,132(sp)
1c00ce84:	490a                	lw	s2,128(sp)
1c00ce86:	6149                	addi	sp,sp,144
1c00ce88:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ce8a:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ce8e:	4585                	li	a1,1
1c00ce90:	01c00513          	li	a0,28
1c00ce94:	e29fe0ef          	jal	ra,1c00bcbc <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00ce98:	30091073          	csrw	mstatus,s2
1c00ce9c:	bfe9                	j	1c00ce76 <pi_cluster_send_task_to_cl+0x22>

1c00ce9e <pi_pad_set_function>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ce9e:	300476f3          	csrrci	a3,mstatus,8
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00cea2:	068417b7          	lui	a5,0x6841
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00cea6:	00151713          	slli	a4,a0,0x1
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00ceaa:	05078793          	addi	a5,a5,80 # 6841050 <__L2+0x67c1050>
  unsigned int padfunId = APB_SOC_PADFUN_NO(pad);
1c00ceae:	8111                	srli	a0,a0,0x4
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00ceb0:	953e                	add	a0,a0,a5
1c00ceb2:	050a                	slli	a0,a0,0x2
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00ceb4:	8b79                	andi	a4,a4,30
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00ceb6:	4110                	lw	a2,0(a0)
  unsigned int oldval = hal_apb_soc_padfun_get(padfunId) & ~(((1<<APB_SOC_PADFUN_SIZE)-1) << padBit);
1c00ceb8:	478d                	li	a5,3
1c00ceba:	00e797b3          	sll	a5,a5,a4
1c00cebe:	fff7c793          	not	a5,a5
1c00cec2:	8ff1                	and	a5,a5,a2
  unsigned int newVal = oldval | (func << padBit);
1c00cec4:	00e595b3          	sll	a1,a1,a4
1c00cec8:	8ddd                	or	a1,a1,a5
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id), value);
1c00ceca:	c10c                	sw	a1,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c00cecc:	30069073          	csrw	mstatus,a3
void pi_pad_set_function(pi_pad_e pad, pi_pad_func_e function)
{
  int irq = rt_irq_disable();
  hal_apb_soc_pad_set_function(pad, function);
  rt_irq_restore(irq);
}
1c00ced0:	8082                	ret

1c00ced2 <pi_pad_init>:

void pi_pad_init(uint32_t pad_values[])
{
  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, pad_values[i]);
1c00ced2:	4114                	lw	a3,0(a0)
1c00ced4:	1a1047b7          	lui	a5,0x1a104
1c00ced8:	14078713          	addi	a4,a5,320 # 1a104140 <__l1_end+0xa1040fc>
1c00cedc:	c314                	sw	a3,0(a4)
1c00cede:	4154                	lw	a3,4(a0)
1c00cee0:	14478713          	addi	a4,a5,324
1c00cee4:	14878793          	addi	a5,a5,328
1c00cee8:	c314                	sw	a3,0(a4)
1c00ceea:	4518                	lw	a4,8(a0)
1c00ceec:	c398                	sw	a4,0(a5)
  }  
}
1c00ceee:	8082                	ret

1c00cef0 <l2_memcpy>:
  req = __pi_hyper_cluster_reqs_first;
  if (req)
  {
    __pi_hyper_cluster_req_exec(req);
  }
}
1c00cef0:	87aa                	mv	a5,a0
1c00cef2:	962e                	add	a2,a2,a1
1c00cef4:	00c59363          	bne	a1,a2,1c00cefa <l2_memcpy+0xa>
1c00cef8:	8082                	ret
1c00cefa:	0015c70b          	p.lbu	a4,1(a1!)
1c00cefe:	00e780ab          	p.sb	a4,1(a5!)
1c00cf02:	bfcd                	j	1c00cef4 <l2_memcpy+0x4>

1c00cf04 <rt_event_enqueue>:
1c00cf04:	300476f3          	csrrci	a3,mstatus,8
1c00cf08:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00cf0c:	00052023          	sw	zero,0(a0)
1c00cf10:	01c00713          	li	a4,28
1c00cf14:	c619                	beqz	a2,1c00cf22 <rt_event_enqueue+0x1e>
1c00cf16:	435c                	lw	a5,4(a4)
1c00cf18:	c388                	sw	a0,0(a5)
1c00cf1a:	c348                	sw	a0,4(a4)
1c00cf1c:	30069073          	csrw	mstatus,a3
1c00cf20:	8082                	ret
1c00cf22:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00cf26:	bfd5                	j	1c00cf1a <rt_event_enqueue+0x16>

1c00cf28 <pi_task_wait_on.isra.4>:
1c00cf28:	1141                	addi	sp,sp,-16
1c00cf2a:	c422                	sw	s0,8(sp)
1c00cf2c:	c226                	sw	s1,4(sp)
1c00cf2e:	c606                	sw	ra,12(sp)
1c00cf30:	c04a                	sw	s2,0(sp)
1c00cf32:	842a                	mv	s0,a0
1c00cf34:	00040783          	lb	a5,0(s0)
1c00cf38:	c799                	beqz	a5,1c00cf46 <pi_task_wait_on.isra.4+0x1e>
1c00cf3a:	40b2                	lw	ra,12(sp)
1c00cf3c:	4422                	lw	s0,8(sp)
1c00cf3e:	4492                	lw	s1,4(sp)
1c00cf40:	4902                	lw	s2,0(sp)
1c00cf42:	0141                	addi	sp,sp,16
1c00cf44:	8082                	ret
1c00cf46:	30047973          	csrrci	s2,mstatus,8
1c00cf4a:	4585                	li	a1,1
1c00cf4c:	01c00513          	li	a0,28
1c00cf50:	d6dfe0ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00cf54:	30091073          	csrw	mstatus,s2
1c00cf58:	bff1                	j	1c00cf34 <pi_task_wait_on.isra.4+0xc>

1c00cf5a <__pi_hyper_pin_settings>:
1c00cf5a:	1141                	addi	sp,sp,-16
1c00cf5c:	c422                	sw	s0,8(sp)
1c00cf5e:	1c010437          	lui	s0,0x1c010
1c00cf62:	44840413          	addi	s0,s0,1096 # 1c010448 <__hyper_pad>
1c00cf66:	c226                	sw	s1,4(sp)
1c00cf68:	c606                	sw	ra,12(sp)
1c00cf6a:	03440493          	addi	s1,s0,52
1c00cf6e:	0044250b          	p.lw	a0,4(s0!)
1c00cf72:	458d                	li	a1,3
1c00cf74:	f2bff0ef          	jal	ra,1c00ce9e <pi_pad_set_function>
1c00cf78:	fe941be3          	bne	s0,s1,1c00cf6e <__pi_hyper_pin_settings+0x14>
1c00cf7c:	40b2                	lw	ra,12(sp)
1c00cf7e:	4422                	lw	s0,8(sp)
1c00cf80:	4492                	lw	s1,4(sp)
1c00cf82:	0141                	addi	sp,sp,16
1c00cf84:	8082                	ret

1c00cf86 <__pi_hyper_pin_reset_settings>:
1c00cf86:	1141                	addi	sp,sp,-16
1c00cf88:	c422                	sw	s0,8(sp)
1c00cf8a:	1c010437          	lui	s0,0x1c010
1c00cf8e:	44840413          	addi	s0,s0,1096 # 1c010448 <__hyper_pad>
1c00cf92:	c226                	sw	s1,4(sp)
1c00cf94:	c606                	sw	ra,12(sp)
1c00cf96:	03440493          	addi	s1,s0,52
1c00cf9a:	0044250b          	p.lw	a0,4(s0!)
1c00cf9e:	4581                	li	a1,0
1c00cfa0:	effff0ef          	jal	ra,1c00ce9e <pi_pad_set_function>
1c00cfa4:	fe941be3          	bne	s0,s1,1c00cf9a <__pi_hyper_pin_reset_settings+0x14>
1c00cfa8:	40b2                	lw	ra,12(sp)
1c00cfaa:	4422                	lw	s0,8(sp)
1c00cfac:	4492                	lw	s1,4(sp)
1c00cfae:	0141                	addi	sp,sp,16
1c00cfb0:	8082                	ret

1c00cfb2 <pi_hyper_conf_init>:
1c00cfb2:	57fd                	li	a5,-1
1c00cfb4:	00f50223          	sb	a5,4(a0)
1c00cfb8:	4785                	li	a5,1
1c00cfba:	c55c                	sw	a5,12(a0)
1c00cfbc:	00052423          	sw	zero,8(a0)
1c00cfc0:	8082                	ret

1c00cfc2 <pi_hyper_open>:
1c00cfc2:	1141                	addi	sp,sp,-16
1c00cfc4:	c422                	sw	s0,8(sp)
1c00cfc6:	c04a                	sw	s2,0(sp)
1c00cfc8:	842a                	mv	s0,a0
1c00cfca:	00452903          	lw	s2,4(a0)
1c00cfce:	4541                	li	a0,16
1c00cfd0:	c606                	sw	ra,12(sp)
1c00cfd2:	c226                	sw	s1,4(sp)
1c00cfd4:	f89fe0ef          	jal	ra,1c00bf5c <pi_l2_malloc>
1c00cfd8:	c115                	beqz	a0,1c00cffc <pi_hyper_open+0x3a>
1c00cfda:	00c92783          	lw	a5,12(s2)
1c00cfde:	84aa                	mv	s1,a0
1c00cfe0:	0217b063          	p.bneimm	a5,1,1c00d000 <pi_hyper_open+0x3e>
1c00cfe4:	000f4637          	lui	a2,0xf4
1c00cfe8:	24060613          	addi	a2,a2,576 # f4240 <__L2+0x74240>
1c00cfec:	4581                	li	a1,0
1c00cfee:	154010ef          	jal	ra,1c00e142 <rt_extern_alloc_init>
1c00cff2:	c519                	beqz	a0,1c00d000 <pi_hyper_open+0x3e>
1c00cff4:	45c1                	li	a1,16
1c00cff6:	8526                	mv	a0,s1
1c00cff8:	f73fe0ef          	jal	ra,1c00bf6a <pi_l2_free>
1c00cffc:	557d                	li	a0,-1
1c00cffe:	a0f1                	j	1c00d0ca <pi_hyper_open+0x108>
1c00d000:	478d                	li	a5,3
1c00d002:	c0dc                	sw	a5,4(s1)
1c00d004:	00892783          	lw	a5,8(s2)
1c00d008:	c49c                	sw	a5,8(s1)
1c00d00a:	00c92783          	lw	a5,12(s2)
1c00d00e:	c4dc                	sw	a5,12(s1)
1c00d010:	1c0117b7          	lui	a5,0x1c011
1c00d014:	c8078793          	addi	a5,a5,-896 # 1c010c80 <__rt_hyper_open_count>
1c00d018:	4398                	lw	a4,0(a5)
1c00d01a:	00170693          	addi	a3,a4,1
1c00d01e:	c394                	sw	a3,0(a5)
1c00d020:	e739                	bnez	a4,1c00d06e <pi_hyper_open+0xac>
1c00d022:	1a1067b7          	lui	a5,0x1a106
1c00d026:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fc4>
1c00d02a:	c0673733          	p.bclr	a4,a4,0,6
1c00d02e:	00e7a423          	sw	a4,8(a5)
1c00d032:	0087a703          	lw	a4,8(a5)
1c00d036:	c0773733          	p.bclr	a4,a4,0,7
1c00d03a:	00e7a423          	sw	a4,8(a5)
1c00d03e:	1a1027b7          	lui	a5,0x1a102
1c00d042:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa10273c>
1c00d046:	4398                	lw	a4,0(a5)
1c00d048:	c0374733          	p.bset	a4,a4,0,3
1c00d04c:	c398                	sw	a4,0(a5)
1c00d04e:	1c0007b7          	lui	a5,0x1c000
1c00d052:	54878793          	addi	a5,a5,1352 # 1c000548 <__rt_hyper_handle_copy>
1c00d056:	10f02623          	sw	a5,268(zero) # 10c <_l1_preload_size+0xcc>
1c00d05a:	0e002823          	sw	zero,240(zero) # f0 <_l1_preload_size+0xb0>
1c00d05e:	12f02623          	sw	a5,300(zero) # 12c <_l1_preload_size+0xec>
1c00d062:	10002823          	sw	zero,272(zero) # 110 <_l1_preload_size+0xd0>
1c00d066:	30f02423          	sw	a5,776(zero) # 308 <__rt_hyper_udma_handle>
1c00d06a:	ef1ff0ef          	jal	ra,1c00cf5a <__pi_hyper_pin_settings>
1c00d06e:	00c92783          	lw	a5,12(s2)
1c00d072:	00892703          	lw	a4,8(s2)
1c00d076:	17fd                	addi	a5,a5,-1
1c00d078:	0017b793          	seqz	a5,a5
1c00d07c:	078a                	slli	a5,a5,0x2
1c00d07e:	ef21                	bnez	a4,1c00d0d6 <pi_hyper_open+0x114>
1c00d080:	1a102737          	lui	a4,0x1a102
1c00d084:	1b470613          	addi	a2,a4,436 # 1a1021b4 <__l1_end+0xa102170>
1c00d088:	4214                	lw	a3,0(a2)
1c00d08a:	6591                	lui	a1,0x4
1c00d08c:	fff58513          	addi	a0,a1,-1 # 3fff <__rt_stack_size+0x37ff>
1c00d090:	73b6f693          	andi	a3,a3,1851
1c00d094:	8fd5                	or	a5,a5,a3
1c00d096:	c21c                	sw	a5,0(a2)
1c00d098:	1a870793          	addi	a5,a4,424
1c00d09c:	4394                	lw	a3,0(a5)
1c00d09e:	f0058593          	addi	a1,a1,-256
1c00d0a2:	8ee9                	and	a3,a3,a0
1c00d0a4:	8eed                	and	a3,a3,a1
1c00d0a6:	1006c6b3          	p.exths	a3,a3
1c00d0aa:	c394                	sw	a3,0(a5)
1c00d0ac:	4214                	lw	a3,0(a2)
1c00d0ae:	7376f693          	andi	a3,a3,1847
1c00d0b2:	c214                	sw	a3,0(a2)
1c00d0b4:	4398                	lw	a4,0(a5)
1c00d0b6:	668d                	lui	a3,0x3
1c00d0b8:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00d0bc:	8f69                	and	a4,a4,a0
1c00d0be:	8f75                	and	a4,a4,a3
1c00d0c0:	c4874733          	p.bset	a4,a4,2,8
1c00d0c4:	c398                	sw	a4,0(a5)
1c00d0c6:	c404                	sw	s1,8(s0)
1c00d0c8:	4501                	li	a0,0
1c00d0ca:	40b2                	lw	ra,12(sp)
1c00d0cc:	4422                	lw	s0,8(sp)
1c00d0ce:	4492                	lw	s1,4(sp)
1c00d0d0:	4902                	lw	s2,0(sp)
1c00d0d2:	0141                	addi	sp,sp,16
1c00d0d4:	8082                	ret
1c00d0d6:	1a102737          	lui	a4,0x1a102
1c00d0da:	1c470613          	addi	a2,a4,452 # 1a1021c4 <__l1_end+0xa102180>
1c00d0de:	4214                	lw	a3,0(a2)
1c00d0e0:	1b870713          	addi	a4,a4,440
1c00d0e4:	03b6f693          	andi	a3,a3,59
1c00d0e8:	8fd5                	or	a5,a5,a3
1c00d0ea:	c21c                	sw	a5,0(a2)
1c00d0ec:	431c                	lw	a5,0(a4)
1c00d0ee:	6691                	lui	a3,0x4
1c00d0f0:	fff68593          	addi	a1,a3,-1 # 3fff <__rt_stack_size+0x37ff>
1c00d0f4:	8fed                	and	a5,a5,a1
1c00d0f6:	f0068693          	addi	a3,a3,-256
1c00d0fa:	8ff5                	and	a5,a5,a3
1c00d0fc:	c007c7b3          	p.bset	a5,a5,0,0
1c00d100:	1007c7b3          	p.exths	a5,a5
1c00d104:	c31c                	sw	a5,0(a4)
1c00d106:	4214                	lw	a3,0(a2)
1c00d108:	0376f693          	andi	a3,a3,55
1c00d10c:	c214                	sw	a3,0(a2)
1c00d10e:	431c                	lw	a5,0(a4)
1c00d110:	668d                	lui	a3,0x3
1c00d112:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00d116:	8fed                	and	a5,a5,a1
1c00d118:	8ff5                	and	a5,a5,a3
1c00d11a:	c487c7b3          	p.bset	a5,a5,2,8
1c00d11e:	c31c                	sw	a5,0(a4)
1c00d120:	b75d                	j	1c00d0c6 <pi_hyper_open+0x104>

1c00d122 <pi_hyper_close>:
1c00d122:	1c011737          	lui	a4,0x1c011
1c00d126:	c8070713          	addi	a4,a4,-896 # 1c010c80 <__rt_hyper_open_count>
1c00d12a:	431c                	lw	a5,0(a4)
1c00d12c:	1141                	addi	sp,sp,-16
1c00d12e:	c422                	sw	s0,8(sp)
1c00d130:	c606                	sw	ra,12(sp)
1c00d132:	17fd                	addi	a5,a5,-1
1c00d134:	c31c                	sw	a5,0(a4)
1c00d136:	4500                	lw	s0,8(a0)
1c00d138:	e7ad                	bnez	a5,1c00d1a2 <pi_hyper_close+0x80>
1c00d13a:	404c                	lw	a1,4(s0)
1c00d13c:	47fd                	li	a5,31
1c00d13e:	00159693          	slli	a3,a1,0x1
1c00d142:	06d7dd63          	ble	a3,a5,1c00d1bc <pi_hyper_close+0x9a>
1c00d146:	fe068513          	addi	a0,a3,-32
1c00d14a:	4611                	li	a2,4
1c00d14c:	1a1067b7          	lui	a5,0x1a106
1c00d150:	20c7f803          	p.lw	a6,a2(a5)
1c00d154:	4705                	li	a4,1
1c00d156:	00a71733          	sll	a4,a4,a0
1c00d15a:	01076733          	or	a4,a4,a6
1c00d15e:	00e7e623          	p.sw	a4,a2(a5)
1c00d162:	00168713          	addi	a4,a3,1
1c00d166:	47fd                	li	a5,31
1c00d168:	4621                	li	a2,8
1c00d16a:	00e7d563          	ble	a4,a5,1c00d174 <pi_hyper_close+0x52>
1c00d16e:	fe168713          	addi	a4,a3,-31
1c00d172:	4611                	li	a2,4
1c00d174:	1a1066b7          	lui	a3,0x1a106
1c00d178:	20c6f503          	p.lw	a0,a2(a3)
1c00d17c:	4785                	li	a5,1
1c00d17e:	00e79733          	sll	a4,a5,a4
1c00d182:	8f49                	or	a4,a4,a0
1c00d184:	00e6e623          	p.sw	a4,a2(a3)
1c00d188:	1a102737          	lui	a4,0x1a102
1c00d18c:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00d190:	4314                	lw	a3,0(a4)
1c00d192:	00b797b3          	sll	a5,a5,a1
1c00d196:	fff7c793          	not	a5,a5
1c00d19a:	8ff5                	and	a5,a5,a3
1c00d19c:	c31c                	sw	a5,0(a4)
1c00d19e:	de9ff0ef          	jal	ra,1c00cf86 <__pi_hyper_pin_reset_settings>
1c00d1a2:	445c                	lw	a5,12(s0)
1c00d1a4:	0017b563          	p.bneimm	a5,1,1c00d1ae <pi_hyper_close+0x8c>
1c00d1a8:	8522                	mv	a0,s0
1c00d1aa:	7f1000ef          	jal	ra,1c00e19a <rt_extern_alloc_deinit>
1c00d1ae:	8522                	mv	a0,s0
1c00d1b0:	4422                	lw	s0,8(sp)
1c00d1b2:	40b2                	lw	ra,12(sp)
1c00d1b4:	45c1                	li	a1,16
1c00d1b6:	0141                	addi	sp,sp,16
1c00d1b8:	db3fe06f          	j	1c00bf6a <pi_l2_free>
1c00d1bc:	8536                	mv	a0,a3
1c00d1be:	4621                	li	a2,8
1c00d1c0:	b771                	j	1c00d14c <pi_hyper_close+0x2a>

1c00d1c2 <__pi_hyper_copy_aligned>:
1c00d1c2:	40155793          	srai	a5,a0,0x1
1c00d1c6:	1a102837          	lui	a6,0x1a102
1c00d1ca:	079e                	slli	a5,a5,0x7
1c00d1cc:	0512                	slli	a0,a0,0x4
1c00d1ce:	97c2                	add	a5,a5,a6
1c00d1d0:	8941                	andi	a0,a0,16
1c00d1d2:	953e                	add	a0,a0,a5
1c00d1d4:	20000813          	li	a6,512
1c00d1d8:	30800793          	li	a5,776
1c00d1dc:	02d87c63          	bleu	a3,a6,1c00d214 <__pi_hyper_copy_aligned+0x52>
1c00d1e0:	cbd4                	sw	a3,20(a5)
1c00d1e2:	1c0006b7          	lui	a3,0x1c000
1c00d1e6:	5e068693          	addi	a3,a3,1504 # 1c0005e0 <__rt_hyper_handle_burst>
1c00d1ea:	c394                	sw	a3,0(a5)
1c00d1ec:	c3c8                	sw	a0,4(a5)
1c00d1ee:	c790                	sw	a2,8(a5)
1c00d1f0:	c7cc                	sw	a1,12(a5)
1c00d1f2:	0107a823          	sw	a6,16(a5) # 1a106010 <__l1_end+0xa105fcc>
1c00d1f6:	20000693          	li	a3,512
1c00d1fa:	cf98                	sw	a4,24(a5)
1c00d1fc:	1a1027b7          	lui	a5,0x1a102
1c00d200:	1ac7a023          	sw	a2,416(a5) # 1a1021a0 <__l1_end+0xa10215c>
1c00d204:	00b52023          	sw	a1,0(a0)
1c00d208:	00d52223          	sw	a3,4(a0)
1c00d20c:	47c1                	li	a5,16
1c00d20e:	00f52423          	sw	a5,8(a0)
1c00d212:	8082                	ret
1c00d214:	0007a823          	sw	zero,16(a5)
1c00d218:	b7cd                	j	1c00d1fa <__pi_hyper_copy_aligned+0x38>

1c00d21a <__pi_hyper_copy_exec>:
1c00d21a:	30800813          	li	a6,776
1c00d21e:	00e82e23          	sw	a4,28(a6) # 1a10201c <__l1_end+0xa101fd8>
1c00d222:	fa25b833          	p.bclr	a6,a1,29,2
1c00d226:	30800793          	li	a5,776
1c00d22a:	02081463          	bnez	a6,1c00d252 <__pi_hyper_copy_exec+0x38>
1c00d22e:	fc163833          	p.bclr	a6,a2,30,1
1c00d232:	02081063          	bnez	a6,1c00d252 <__pi_hyper_copy_exec+0x38>
1c00d236:	fa26b833          	p.bclr	a6,a3,29,2
1c00d23a:	00080a63          	beqz	a6,1c00d24e <__pi_hyper_copy_exec+0x34>
1c00d23e:	fc153833          	p.bclr	a6,a0,30,1
1c00d242:	00080863          	beqz	a6,1c00d252 <__pi_hyper_copy_exec+0x38>
1c00d246:	fc16b833          	p.bclr	a6,a3,30,1
1c00d24a:	00081463          	bnez	a6,1c00d252 <__pi_hyper_copy_exec+0x38>
1c00d24e:	f75ff06f          	j	1c00d1c2 <__pi_hyper_copy_aligned>
1c00d252:	d388                	sw	a0,32(a5)
1c00d254:	853a                	mv	a0,a4
1c00d256:	d3d0                	sw	a2,36(a5)
1c00d258:	d78c                	sw	a1,40(a5)
1c00d25a:	d7d4                	sw	a3,44(a5)
1c00d25c:	02078823          	sb	zero,48(a5)
1c00d260:	dbd8                	sw	a4,52(a5)
1c00d262:	aa31                	j	1c00d37e <__pi_hyper_copy_misaligned>

1c00d264 <__pi_hyper_copy>:
1c00d264:	1141                	addi	sp,sp,-16
1c00d266:	c606                	sw	ra,12(sp)
1c00d268:	c422                	sw	s0,8(sp)
1c00d26a:	30047473          	csrrci	s0,mstatus,8
1c00d26e:	c781                	beqz	a5,1c00d276 <__pi_hyper_copy+0x12>
1c00d270:	010007b7          	lui	a5,0x1000
1c00d274:	963e                	add	a2,a2,a5
1c00d276:	30800813          	li	a6,776
1c00d27a:	01c82803          	lw	a6,28(a6)
1c00d27e:	30800793          	li	a5,776
1c00d282:	02080963          	beqz	a6,1c00d2b4 <__pi_hyper_copy+0x50>
1c00d286:	0387a803          	lw	a6,56(a5) # 1000038 <__L2+0xf80038>
1c00d28a:	02080363          	beqz	a6,1c00d2b0 <__pi_hyper_copy+0x4c>
1c00d28e:	03c7a803          	lw	a6,60(a5)
1c00d292:	00e82e23          	sw	a4,28(a6)
1c00d296:	dfd8                	sw	a4,60(a5)
1c00d298:	00072e23          	sw	zero,28(a4)
1c00d29c:	df08                	sw	a0,56(a4)
1c00d29e:	df4c                	sw	a1,60(a4)
1c00d2a0:	c330                	sw	a2,64(a4)
1c00d2a2:	c374                	sw	a3,68(a4)
1c00d2a4:	30041073          	csrw	mstatus,s0
1c00d2a8:	40b2                	lw	ra,12(sp)
1c00d2aa:	4422                	lw	s0,8(sp)
1c00d2ac:	0141                	addi	sp,sp,16
1c00d2ae:	8082                	ret
1c00d2b0:	df98                	sw	a4,56(a5)
1c00d2b2:	b7d5                	j	1c00d296 <__pi_hyper_copy+0x32>
1c00d2b4:	f67ff0ef          	jal	ra,1c00d21a <__pi_hyper_copy_exec>
1c00d2b8:	b7f5                	j	1c00d2a4 <__pi_hyper_copy+0x40>

1c00d2ba <pi_hyper_read_async>:
1c00d2ba:	451c                	lw	a5,8(a0)
1c00d2bc:	00070a23          	sb	zero,20(a4)
1c00d2c0:	8832                	mv	a6,a2
1c00d2c2:	43c8                	lw	a0,4(a5)
1c00d2c4:	479c                	lw	a5,8(a5)
1c00d2c6:	862e                	mv	a2,a1
1c00d2c8:	0506                	slli	a0,a0,0x1
1c00d2ca:	85c2                	mv	a1,a6
1c00d2cc:	f99ff06f          	j	1c00d264 <__pi_hyper_copy>

1c00d2d0 <pi_hyper_read>:
1c00d2d0:	7175                	addi	sp,sp,-144
1c00d2d2:	4785                	li	a5,1
1c00d2d4:	870a                	mv	a4,sp
1c00d2d6:	c706                	sw	ra,140(sp)
1c00d2d8:	cc3e                	sw	a5,24(sp)
1c00d2da:	d43e                	sw	a5,40(sp)
1c00d2dc:	c202                	sw	zero,4(sp)
1c00d2de:	00010a23          	sb	zero,20(sp)
1c00d2e2:	fd9ff0ef          	jal	ra,1c00d2ba <pi_hyper_read_async>
1c00d2e6:	0848                	addi	a0,sp,20
1c00d2e8:	c41ff0ef          	jal	ra,1c00cf28 <pi_task_wait_on.isra.4>
1c00d2ec:	40ba                	lw	ra,140(sp)
1c00d2ee:	6149                	addi	sp,sp,144
1c00d2f0:	8082                	ret

1c00d2f2 <pi_hyper_write_async>:
1c00d2f2:	451c                	lw	a5,8(a0)
1c00d2f4:	00070a23          	sb	zero,20(a4)
1c00d2f8:	8832                	mv	a6,a2
1c00d2fa:	43c8                	lw	a0,4(a5)
1c00d2fc:	479c                	lw	a5,8(a5)
1c00d2fe:	862e                	mv	a2,a1
1c00d300:	0506                	slli	a0,a0,0x1
1c00d302:	85c2                	mv	a1,a6
1c00d304:	0505                	addi	a0,a0,1
1c00d306:	f5fff06f          	j	1c00d264 <__pi_hyper_copy>

1c00d30a <pi_hyper_write>:
1c00d30a:	7175                	addi	sp,sp,-144
1c00d30c:	4785                	li	a5,1
1c00d30e:	870a                	mv	a4,sp
1c00d310:	c706                	sw	ra,140(sp)
1c00d312:	cc3e                	sw	a5,24(sp)
1c00d314:	d43e                	sw	a5,40(sp)
1c00d316:	c202                	sw	zero,4(sp)
1c00d318:	00010a23          	sb	zero,20(sp)
1c00d31c:	fd7ff0ef          	jal	ra,1c00d2f2 <pi_hyper_write_async>
1c00d320:	0848                	addi	a0,sp,20
1c00d322:	c07ff0ef          	jal	ra,1c00cf28 <pi_task_wait_on.isra.4>
1c00d326:	40ba                	lw	ra,140(sp)
1c00d328:	6149                	addi	sp,sp,144
1c00d32a:	8082                	ret

1c00d32c <exec_pending_task>:
1c00d32c:	30800793          	li	a5,776
1c00d330:	5f98                	lw	a4,56(a5)
1c00d332:	c729                	beqz	a4,1c00d37c <exec_pending_task+0x50>
1c00d334:	4f54                	lw	a3,28(a4)
1c00d336:	03872803          	lw	a6,56(a4)
1c00d33a:	5f4c                	lw	a1,60(a4)
1c00d33c:	df94                	sw	a3,56(a5)
1c00d33e:	ee883533          	p.bclr	a0,a6,23,8
1c00d342:	ce881833          	p.extractu	a6,a6,7,8
1c00d346:	4330                	lw	a2,64(a4)
1c00d348:	4374                	lw	a3,68(a4)
1c00d34a:	00081463          	bnez	a6,1c00d352 <exec_pending_task+0x26>
1c00d34e:	ecdff06f          	j	1c00d21a <__pi_hyper_copy_exec>
1c00d352:	04c72803          	lw	a6,76(a4)
1c00d356:	04872883          	lw	a7,72(a4)
1c00d35a:	d388                	sw	a0,32(a5)
1c00d35c:	d3d0                	sw	a2,36(a5)
1c00d35e:	853a                	mv	a0,a4
1c00d360:	0506d633          	p.minu	a2,a3,a6
1c00d364:	cfd8                	sw	a4,28(a5)
1c00d366:	d78c                	sw	a1,40(a5)
1c00d368:	d7d0                	sw	a2,44(a5)
1c00d36a:	02078823          	sb	zero,48(a5)
1c00d36e:	dbd8                	sw	a4,52(a5)
1c00d370:	c3b4                	sw	a3,64(a5)
1c00d372:	0507a223          	sw	a6,68(a5)
1c00d376:	0517a423          	sw	a7,72(a5)
1c00d37a:	a011                	j	1c00d37e <__pi_hyper_copy_misaligned>
1c00d37c:	8082                	ret

1c00d37e <__pi_hyper_copy_misaligned>:
1c00d37e:	7179                	addi	sp,sp,-48
1c00d380:	d422                	sw	s0,40(sp)
1c00d382:	30800793          	li	a5,776
1c00d386:	ce4e                	sw	s3,28(sp)
1c00d388:	89aa                	mv	s3,a0
1c00d38a:	5388                	lw	a0,32(a5)
1c00d38c:	d606                	sw	ra,44(sp)
1c00d38e:	d226                	sw	s1,36(sp)
1c00d390:	d04a                	sw	s2,32(sp)
1c00d392:	cc52                	sw	s4,24(sp)
1c00d394:	ca56                	sw	s5,20(sp)
1c00d396:	c85a                	sw	s6,16(sp)
1c00d398:	c65e                	sw	s7,12(sp)
1c00d39a:	c462                	sw	s8,8(sp)
1c00d39c:	fc1537b3          	p.bclr	a5,a0,30,1
1c00d3a0:	30800413          	li	s0,776
1c00d3a4:	e7a1                	bnez	a5,1c00d3ec <__pi_hyper_copy_misaligned+0x6e>
1c00d3a6:	1c011c37          	lui	s8,0x1c011
1c00d3aa:	a48c0913          	addi	s2,s8,-1464 # 1c010a48 <__pi_hyper_temp_buffer>
1c00d3ae:	4a0d                	li	s4,3
1c00d3b0:	07c00a93          	li	s5,124
1c00d3b4:	00190b13          	addi	s6,s2,1
1c00d3b8:	5408                	lw	a0,40(s0)
1c00d3ba:	5444                	lw	s1,44(s0)
1c00d3bc:	5050                	lw	a2,36(s0)
1c00d3be:	00350793          	addi	a5,a0,3
1c00d3c2:	c207b7b3          	p.bclr	a5,a5,1,0
1c00d3c6:	8f89                	sub	a5,a5,a0
1c00d3c8:	8bbe                	mv	s7,a5
1c00d3ca:	009a6363          	bltu	s4,s1,1c00d3d0 <__pi_hyper_copy_misaligned+0x52>
1c00d3ce:	8ba6                	mv	s7,s1
1c00d3d0:	1c0b8663          	beqz	s7,1c00d59c <__pi_hyper_copy_misaligned+0x21e>
1c00d3d4:	03044783          	lbu	a5,48(s0)
1c00d3d8:	16079f63          	bnez	a5,1c00d556 <__pi_hyper_copy_misaligned+0x1d8>
1c00d3dc:	4701                	li	a4,0
1c00d3de:	4691                	li	a3,4
1c00d3e0:	c0063633          	p.bclr	a2,a2,0,0
1c00d3e4:	a48c0593          	addi	a1,s8,-1464
1c00d3e8:	5008                	lw	a0,32(s0)
1c00d3ea:	a889                	j	1c00d43c <__pi_hyper_copy_misaligned+0xbe>
1c00d3ec:	540c                	lw	a1,40(s0)
1c00d3ee:	04442883          	lw	a7,68(s0)
1c00d3f2:	04842303          	lw	t1,72(s0)
1c00d3f6:	00358793          	addi	a5,a1,3
1c00d3fa:	5050                	lw	a2,36(s0)
1c00d3fc:	5454                	lw	a3,44(s0)
1c00d3fe:	4038                	lw	a4,64(s0)
1c00d400:	c207b7b3          	p.bclr	a5,a5,1,0
1c00d404:	8f8d                	sub	a5,a5,a1
1c00d406:	41130333          	sub	t1,t1,a7
1c00d40a:	4801                	li	a6,0
1c00d40c:	4e0d                	li	t3,3
1c00d40e:	84be                	mv	s1,a5
1c00d410:	00de6363          	bltu	t3,a3,1c00d416 <__pi_hyper_copy_misaligned+0x98>
1c00d414:	84b6                	mv	s1,a3
1c00d416:	c4b5                	beqz	s1,1c00d482 <__pi_hyper_copy_misaligned+0x104>
1c00d418:	00080563          	beqz	a6,1c00d422 <__pi_hyper_copy_misaligned+0xa4>
1c00d41c:	d050                	sw	a2,36(s0)
1c00d41e:	d454                	sw	a3,44(s0)
1c00d420:	c038                	sw	a4,64(s0)
1c00d422:	03044703          	lbu	a4,48(s0)
1c00d426:	1c011937          	lui	s2,0x1c011
1c00d42a:	a4890793          	addi	a5,s2,-1464 # 1c010a48 <__pi_hyper_temp_buffer>
1c00d42e:	ef09                	bnez	a4,1c00d448 <__pi_hyper_copy_misaligned+0xca>
1c00d430:	4691                	li	a3,4
1c00d432:	c0063633          	p.bclr	a2,a2,0,0
1c00d436:	a4890593          	addi	a1,s2,-1464
1c00d43a:	157d                	addi	a0,a0,-1
1c00d43c:	d87ff0ef          	jal	ra,1c00d1c2 <__pi_hyper_copy_aligned>
1c00d440:	4785                	li	a5,1
1c00d442:	02f40823          	sb	a5,48(s0)
1c00d446:	aa3d                	j	1c00d584 <__pi_hyper_copy_misaligned+0x206>
1c00d448:	fc163533          	p.bclr	a0,a2,30,1
1c00d44c:	953e                	add	a0,a0,a5
1c00d44e:	8626                	mv	a2,s1
1c00d450:	02040823          	sb	zero,48(s0)
1c00d454:	a9dff0ef          	jal	ra,1c00cef0 <l2_memcpy>
1c00d458:	5050                	lw	a2,36(s0)
1c00d45a:	5008                	lw	a0,32(s0)
1c00d45c:	4701                	li	a4,0
1c00d45e:	4691                	li	a3,4
1c00d460:	c0063633          	p.bclr	a2,a2,0,0
1c00d464:	a4890593          	addi	a1,s2,-1464
1c00d468:	d5bff0ef          	jal	ra,1c00d1c2 <__pi_hyper_copy_aligned>
1c00d46c:	505c                	lw	a5,36(s0)
1c00d46e:	97a6                	add	a5,a5,s1
1c00d470:	d05c                	sw	a5,36(s0)
1c00d472:	541c                	lw	a5,40(s0)
1c00d474:	97a6                	add	a5,a5,s1
1c00d476:	d41c                	sw	a5,40(s0)
1c00d478:	545c                	lw	a5,44(s0)
1c00d47a:	409784b3          	sub	s1,a5,s1
1c00d47e:	d444                	sw	s1,44(s0)
1c00d480:	a211                	j	1c00d584 <__pi_hyper_copy_misaligned+0x206>
1c00d482:	c2d1                	beqz	a3,1c00d506 <__pi_hyper_copy_misaligned+0x188>
1c00d484:	00080563          	beqz	a6,1c00d48e <__pi_hyper_copy_misaligned+0x110>
1c00d488:	d050                	sw	a2,36(s0)
1c00d48a:	d454                	sw	a3,44(s0)
1c00d48c:	c038                	sw	a4,64(s0)
1c00d48e:	97b2                	add	a5,a5,a2
1c00d490:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00d494:	c206b4b3          	p.bclr	s1,a3,1,0
1c00d498:	ef89                	bnez	a5,1c00d4b2 <__pi_hyper_copy_misaligned+0x134>
1c00d49a:	4701                	li	a4,0
1c00d49c:	86a6                	mv	a3,s1
1c00d49e:	d25ff0ef          	jal	ra,1c00d1c2 <__pi_hyper_copy_aligned>
1c00d4a2:	505c                	lw	a5,36(s0)
1c00d4a4:	5454                	lw	a3,44(s0)
1c00d4a6:	97a6                	add	a5,a5,s1
1c00d4a8:	d05c                	sw	a5,36(s0)
1c00d4aa:	541c                	lw	a5,40(s0)
1c00d4ac:	97a6                	add	a5,a5,s1
1c00d4ae:	d41c                	sw	a5,40(s0)
1c00d4b0:	a881                	j	1c00d500 <__pi_hyper_copy_misaligned+0x182>
1c00d4b2:	03044703          	lbu	a4,48(s0)
1c00d4b6:	1c011937          	lui	s2,0x1c011
1c00d4ba:	a4890793          	addi	a5,s2,-1464 # 1c010a48 <__pi_hyper_temp_buffer>
1c00d4be:	db2d                	beqz	a4,1c00d430 <__pi_hyper_copy_misaligned+0xb2>
1c00d4c0:	07c00693          	li	a3,124
1c00d4c4:	04d4d4b3          	p.minu	s1,s1,a3
1c00d4c8:	00178513          	addi	a0,a5,1
1c00d4cc:	fff48613          	addi	a2,s1,-1
1c00d4d0:	02040823          	sb	zero,48(s0)
1c00d4d4:	a1dff0ef          	jal	ra,1c00cef0 <l2_memcpy>
1c00d4d8:	5050                	lw	a2,36(s0)
1c00d4da:	5008                	lw	a0,32(s0)
1c00d4dc:	86a6                	mv	a3,s1
1c00d4de:	4701                	li	a4,0
1c00d4e0:	c0063633          	p.bclr	a2,a2,0,0
1c00d4e4:	a4890593          	addi	a1,s2,-1464
1c00d4e8:	cdbff0ef          	jal	ra,1c00d1c2 <__pi_hyper_copy_aligned>
1c00d4ec:	505c                	lw	a5,36(s0)
1c00d4ee:	5454                	lw	a3,44(s0)
1c00d4f0:	17fd                	addi	a5,a5,-1
1c00d4f2:	97a6                	add	a5,a5,s1
1c00d4f4:	d05c                	sw	a5,36(s0)
1c00d4f6:	541c                	lw	a5,40(s0)
1c00d4f8:	0685                	addi	a3,a3,1
1c00d4fa:	17fd                	addi	a5,a5,-1
1c00d4fc:	97a6                	add	a5,a5,s1
1c00d4fe:	d41c                	sw	a5,40(s0)
1c00d500:	409684b3          	sub	s1,a3,s1
1c00d504:	bfad                	j	1c00d47e <__pi_hyper_copy_misaligned+0x100>
1c00d506:	e719                	bnez	a4,1c00d514 <__pi_hyper_copy_misaligned+0x196>
1c00d508:	00080c63          	beqz	a6,1c00d520 <__pi_hyper_copy_misaligned+0x1a2>
1c00d50c:	d050                	sw	a2,36(s0)
1c00d50e:	02042623          	sw	zero,44(s0)
1c00d512:	a029                	j	1c00d51c <__pi_hyper_copy_misaligned+0x19e>
1c00d514:	02e8ea63          	bltu	a7,a4,1c00d548 <__pi_hyper_copy_misaligned+0x1ca>
1c00d518:	fe081ae3          	bnez	a6,1c00d50c <__pi_hyper_copy_misaligned+0x18e>
1c00d51c:	04042023          	sw	zero,64(s0)
1c00d520:	854e                	mv	a0,s3
1c00d522:	02042a23          	sw	zero,52(s0)
1c00d526:	00042e23          	sw	zero,28(s0)
1c00d52a:	9dbff0ef          	jal	ra,1c00cf04 <rt_event_enqueue>
1c00d52e:	5422                	lw	s0,40(sp)
1c00d530:	50b2                	lw	ra,44(sp)
1c00d532:	5492                	lw	s1,36(sp)
1c00d534:	5902                	lw	s2,32(sp)
1c00d536:	49f2                	lw	s3,28(sp)
1c00d538:	4a62                	lw	s4,24(sp)
1c00d53a:	4ad2                	lw	s5,20(sp)
1c00d53c:	4b42                	lw	s6,16(sp)
1c00d53e:	4bb2                	lw	s7,12(sp)
1c00d540:	4c22                	lw	s8,8(sp)
1c00d542:	6145                	addi	sp,sp,48
1c00d544:	de9ff06f          	j	1c00d32c <exec_pending_task>
1c00d548:	41170733          	sub	a4,a4,a7
1c00d54c:	961a                	add	a2,a2,t1
1c00d54e:	4805                	li	a6,1
1c00d550:	04e8d6b3          	p.minu	a3,a7,a4
1c00d554:	bd6d                	j	1c00d40e <__pi_hyper_copy_misaligned+0x90>
1c00d556:	fc1635b3          	p.bclr	a1,a2,30,1
1c00d55a:	95ca                	add	a1,a1,s2
1c00d55c:	865e                	mv	a2,s7
1c00d55e:	02040823          	sb	zero,48(s0)
1c00d562:	98fff0ef          	jal	ra,1c00cef0 <l2_memcpy>
1c00d566:	505c                	lw	a5,36(s0)
1c00d568:	97de                	add	a5,a5,s7
1c00d56a:	d05c                	sw	a5,36(s0)
1c00d56c:	541c                	lw	a5,40(s0)
1c00d56e:	97de                	add	a5,a5,s7
1c00d570:	d41c                	sw	a5,40(s0)
1c00d572:	545c                	lw	a5,44(s0)
1c00d574:	41778bb3          	sub	s7,a5,s7
1c00d578:	03742623          	sw	s7,44(s0)
1c00d57c:	e20b9ee3          	bnez	s7,1c00d3b8 <__pi_hyper_copy_misaligned+0x3a>
1c00d580:	545c                	lw	a5,44(s0)
1c00d582:	c7a5                	beqz	a5,1c00d5ea <__pi_hyper_copy_misaligned+0x26c>
1c00d584:	50b2                	lw	ra,44(sp)
1c00d586:	5422                	lw	s0,40(sp)
1c00d588:	5492                	lw	s1,36(sp)
1c00d58a:	5902                	lw	s2,32(sp)
1c00d58c:	49f2                	lw	s3,28(sp)
1c00d58e:	4a62                	lw	s4,24(sp)
1c00d590:	4ad2                	lw	s5,20(sp)
1c00d592:	4b42                	lw	s6,16(sp)
1c00d594:	4bb2                	lw	s7,12(sp)
1c00d596:	4c22                	lw	s8,8(sp)
1c00d598:	6145                	addi	sp,sp,48
1c00d59a:	8082                	ret
1c00d59c:	d0f5                	beqz	s1,1c00d580 <__pi_hyper_copy_misaligned+0x202>
1c00d59e:	97b2                	add	a5,a5,a2
1c00d5a0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00d5a4:	c204b4b3          	p.bclr	s1,s1,1,0
1c00d5a8:	e791                	bnez	a5,1c00d5b4 <__pi_hyper_copy_misaligned+0x236>
1c00d5aa:	85aa                	mv	a1,a0
1c00d5ac:	4701                	li	a4,0
1c00d5ae:	86a6                	mv	a3,s1
1c00d5b0:	5008                	lw	a0,32(s0)
1c00d5b2:	b5f5                	j	1c00d49e <__pi_hyper_copy_misaligned+0x120>
1c00d5b4:	03044783          	lbu	a5,48(s0)
1c00d5b8:	0554d4b3          	p.minu	s1,s1,s5
1c00d5bc:	e789                	bnez	a5,1c00d5c6 <__pi_hyper_copy_misaligned+0x248>
1c00d5be:	4701                	li	a4,0
1c00d5c0:	00448693          	addi	a3,s1,4
1c00d5c4:	bd31                	j	1c00d3e0 <__pi_hyper_copy_misaligned+0x62>
1c00d5c6:	8626                	mv	a2,s1
1c00d5c8:	85da                	mv	a1,s6
1c00d5ca:	02040823          	sb	zero,48(s0)
1c00d5ce:	923ff0ef          	jal	ra,1c00cef0 <l2_memcpy>
1c00d5d2:	505c                	lw	a5,36(s0)
1c00d5d4:	5454                	lw	a3,44(s0)
1c00d5d6:	97a6                	add	a5,a5,s1
1c00d5d8:	d05c                	sw	a5,36(s0)
1c00d5da:	541c                	lw	a5,40(s0)
1c00d5dc:	97a6                	add	a5,a5,s1
1c00d5de:	409684b3          	sub	s1,a3,s1
1c00d5e2:	d41c                	sw	a5,40(s0)
1c00d5e4:	d444                	sw	s1,44(s0)
1c00d5e6:	dcc9                	beqz	s1,1c00d580 <__pi_hyper_copy_misaligned+0x202>
1c00d5e8:	bbc1                	j	1c00d3b8 <__pi_hyper_copy_misaligned+0x3a>
1c00d5ea:	4038                	lw	a4,64(s0)
1c00d5ec:	db15                	beqz	a4,1c00d520 <__pi_hyper_copy_misaligned+0x1a2>
1c00d5ee:	407c                	lw	a5,68(s0)
1c00d5f0:	00e7ff63          	bleu	a4,a5,1c00d60e <__pi_hyper_copy_misaligned+0x290>
1c00d5f4:	8f1d                	sub	a4,a4,a5
1c00d5f6:	c038                	sw	a4,64(s0)
1c00d5f8:	4034                	lw	a3,64(s0)
1c00d5fa:	d29d                	beqz	a3,1c00d520 <__pi_hyper_copy_misaligned+0x1a2>
1c00d5fc:	5058                	lw	a4,36(s0)
1c00d5fe:	4430                	lw	a2,72(s0)
1c00d600:	9732                	add	a4,a4,a2
1c00d602:	8f1d                	sub	a4,a4,a5
1c00d604:	04d7d7b3          	p.minu	a5,a5,a3
1c00d608:	d058                	sw	a4,36(s0)
1c00d60a:	d45c                	sw	a5,44(s0)
1c00d60c:	b375                	j	1c00d3b8 <__pi_hyper_copy_misaligned+0x3a>
1c00d60e:	04042023          	sw	zero,64(s0)
1c00d612:	b7dd                	j	1c00d5f8 <__pi_hyper_copy_misaligned+0x27a>

1c00d614 <__pi_hyper_copy_2d>:
1c00d614:	1141                	addi	sp,sp,-16
1c00d616:	c606                	sw	ra,12(sp)
1c00d618:	c422                	sw	s0,8(sp)
1c00d61a:	30047473          	csrrci	s0,mstatus,8
1c00d61e:	00088563          	beqz	a7,1c00d628 <__pi_hyper_copy_2d+0x14>
1c00d622:	010008b7          	lui	a7,0x1000
1c00d626:	9646                	add	a2,a2,a7
1c00d628:	30800893          	li	a7,776
1c00d62c:	01c8ae03          	lw	t3,28(a7) # 100001c <__L2+0xf8001c>
1c00d630:	30800313          	li	t1,776
1c00d634:	040e0563          	beqz	t3,1c00d67e <__pi_hyper_copy_2d+0x6a>
1c00d638:	03832883          	lw	a7,56(t1) # 80000038 <pulp__FC+0x80000039>
1c00d63c:	02088e63          	beqz	a7,1c00d678 <__pi_hyper_copy_2d+0x64>
1c00d640:	03c32883          	lw	a7,60(t1)
1c00d644:	0108ae23          	sw	a6,28(a7)
1c00d648:	c0854533          	p.bset	a0,a0,0,8
1c00d64c:	03032e23          	sw	a6,60(t1)
1c00d650:	00082e23          	sw	zero,28(a6)
1c00d654:	02a82c23          	sw	a0,56(a6)
1c00d658:	02b82e23          	sw	a1,60(a6)
1c00d65c:	04c82023          	sw	a2,64(a6)
1c00d660:	04d82223          	sw	a3,68(a6)
1c00d664:	04e82423          	sw	a4,72(a6)
1c00d668:	04f82623          	sw	a5,76(a6)
1c00d66c:	30041073          	csrw	mstatus,s0
1c00d670:	40b2                	lw	ra,12(sp)
1c00d672:	4422                	lw	s0,8(sp)
1c00d674:	0141                	addi	sp,sp,16
1c00d676:	8082                	ret
1c00d678:	03032c23          	sw	a6,56(t1)
1c00d67c:	b7f1                	j	1c00d648 <__pi_hyper_copy_2d+0x34>
1c00d67e:	02a8a023          	sw	a0,32(a7)
1c00d682:	02c8a223          	sw	a2,36(a7)
1c00d686:	8542                	mv	a0,a6
1c00d688:	04f6d633          	p.minu	a2,a3,a5
1c00d68c:	0108ae23          	sw	a6,28(a7)
1c00d690:	02b8a423          	sw	a1,40(a7)
1c00d694:	02c8a623          	sw	a2,44(a7)
1c00d698:	02088823          	sb	zero,48(a7)
1c00d69c:	0308aa23          	sw	a6,52(a7)
1c00d6a0:	04d8a023          	sw	a3,64(a7)
1c00d6a4:	04f8a223          	sw	a5,68(a7)
1c00d6a8:	04e8a423          	sw	a4,72(a7)
1c00d6ac:	cd3ff0ef          	jal	ra,1c00d37e <__pi_hyper_copy_misaligned>
1c00d6b0:	bf75                	j	1c00d66c <__pi_hyper_copy_2d+0x58>

1c00d6b2 <pi_hyper_read_2d_async>:
1c00d6b2:	8332                	mv	t1,a2
1c00d6b4:	4510                	lw	a2,8(a0)
1c00d6b6:	00080a23          	sb	zero,20(a6)
1c00d6ba:	4248                	lw	a0,4(a2)
1c00d6bc:	00862883          	lw	a7,8(a2)
1c00d6c0:	862e                	mv	a2,a1
1c00d6c2:	0506                	slli	a0,a0,0x1
1c00d6c4:	859a                	mv	a1,t1
1c00d6c6:	f4fff06f          	j	1c00d614 <__pi_hyper_copy_2d>

1c00d6ca <pi_hyper_write_2d_async>:
1c00d6ca:	8332                	mv	t1,a2
1c00d6cc:	4510                	lw	a2,8(a0)
1c00d6ce:	00080a23          	sb	zero,20(a6)
1c00d6d2:	4248                	lw	a0,4(a2)
1c00d6d4:	00862883          	lw	a7,8(a2)
1c00d6d8:	862e                	mv	a2,a1
1c00d6da:	0506                	slli	a0,a0,0x1
1c00d6dc:	859a                	mv	a1,t1
1c00d6de:	0505                	addi	a0,a0,1
1c00d6e0:	f35ff06f          	j	1c00d614 <__pi_hyper_copy_2d>

1c00d6e4 <__rt_hyper_resume_emu_task>:
  __pi_hyper_copy_misaligned(__rt_hyper_pending_emu_task);
1c00d6e4:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
1c00d6e8:	c97ff06f          	j	1c00d37e <__pi_hyper_copy_misaligned>

1c00d6ec <__rt_hyper_resume_copy>:
  exec_pending_task();
1c00d6ec:	c41ff06f          	j	1c00d32c <exec_pending_task>

1c00d6f0 <__rt_hyper_init>:
  __pi_hyper_cluster_reqs_first = NULL;
1c00d6f0:	1c011737          	lui	a4,0x1c011
  __rt_hyper_end_task = NULL;
1c00d6f4:	30800793          	li	a5,776
  __pi_hyper_cluster_reqs_first = NULL;
1c00d6f8:	c6072e23          	sw	zero,-900(a4) # 1c010c7c <__pi_hyper_cluster_reqs_first>
  __rt_hyper_pending_emu_channel = -1;
1c00d6fc:	577d                	li	a4,-1
1c00d6fe:	d398                	sw	a4,32(a5)
  __rt_hyper_open_count = 0;
1c00d700:	1c011737          	lui	a4,0x1c011
  __rt_hyper_end_task = NULL;
1c00d704:	0007ac23          	sw	zero,24(a5)
  __rt_hyper_current_task = NULL;
1c00d708:	0007ae23          	sw	zero,28(a5)
  __rt_hyper_pending_tasks = NULL;
1c00d70c:	0207ac23          	sw	zero,56(a5)
  __rt_hyper_open_count = 0;
1c00d710:	c8072023          	sw	zero,-896(a4) # 1c010c80 <__rt_hyper_open_count>
  __rt_hyper_pending_emu_size = 0;
1c00d714:	0207a623          	sw	zero,44(a5)
  __rt_hyper_pending_emu_size_2d = 0;
1c00d718:	0407a023          	sw	zero,64(a5)
}
1c00d71c:	8082                	ret

1c00d71e <pi_cpi_conf_init>:
1c00d71e:	20000793          	li	a5,512
1c00d722:	00f51223          	sh	a5,4(a0)
1c00d726:	8082                	ret

1c00d728 <pi_cpi_open>:
1c00d728:	414c                	lw	a1,4(a0)
1c00d72a:	1c011737          	lui	a4,0x1c011
1c00d72e:	ac870713          	addi	a4,a4,-1336 # 1c010ac8 <__rt_cpi>
1c00d732:	0045c783          	lbu	a5,4(a1)
1c00d736:	00579693          	slli	a3,a5,0x5
1c00d73a:	96ba                	add	a3,a3,a4
1c00d73c:	c514                	sw	a3,8(a0)
1c00d73e:	0796                	slli	a5,a5,0x5
1c00d740:	4525                	li	a0,9
1c00d742:	00a767a3          	p.sw	a0,a5(a4)
1c00d746:	42d8                	lw	a4,4(a3)
1c00d748:	00170793          	addi	a5,a4,1
1c00d74c:	c2dc                	sw	a5,4(a3)
1c00d74e:	1a1027b7          	lui	a5,0x1a102
1c00d752:	48078513          	addi	a0,a5,1152 # 1a102480 <__l1_end+0xa10243c>
1c00d756:	c688                	sw	a0,8(a3)
1c00d758:	0055c583          	lbu	a1,5(a1)
1c00d75c:	00b68e23          	sb	a1,28(a3)
1c00d760:	e71d                	bnez	a4,1c00d78e <pi_cpi_open+0x66>
1c00d762:	1a106637          	lui	a2,0x1a106
1c00d766:	00862703          	lw	a4,8(a2) # 1a106008 <__l1_end+0xa105fc4>
1c00d76a:	c1273733          	p.bclr	a4,a4,0,18
1c00d76e:	00e62423          	sw	a4,8(a2)
1c00d772:	78078793          	addi	a5,a5,1920
1c00d776:	4398                	lw	a4,0(a5)
1c00d778:	c0974733          	p.bset	a4,a4,0,9
1c00d77c:	c398                	sw	a4,0(a5)
1c00d77e:	1c0007b7          	lui	a5,0x1c000
1c00d782:	52078793          	addi	a5,a5,1312 # 1c000520 <__rt_udma_handle_copy>
1c00d786:	28f02623          	sw	a5,652(zero) # 28c <__cluster_text_size+0x80>
1c00d78a:	26d02823          	sw	a3,624(zero) # 270 <__cluster_text_size+0x64>
1c00d78e:	4501                	li	a0,0
1c00d790:	8082                	ret

1c00d792 <pi_cpi_close>:
1c00d792:	4514                	lw	a3,8(a0)
1c00d794:	42d8                	lw	a4,4(a3)
1c00d796:	4290                	lw	a2,0(a3)
1c00d798:	177d                	addi	a4,a4,-1
1c00d79a:	c2d8                	sw	a4,4(a3)
1c00d79c:	ef15                	bnez	a4,1c00d7d8 <pi_cpi_close+0x46>
1c00d79e:	00161713          	slli	a4,a2,0x1
1c00d7a2:	47fd                	li	a5,31
1c00d7a4:	46a1                	li	a3,8
1c00d7a6:	00e7d463          	ble	a4,a5,1c00d7ae <pi_cpi_close+0x1c>
1c00d7aa:	1701                	addi	a4,a4,-32
1c00d7ac:	4691                	li	a3,4
1c00d7ae:	1a1065b7          	lui	a1,0x1a106
1c00d7b2:	20d5f503          	p.lw	a0,a3(a1)
1c00d7b6:	4785                	li	a5,1
1c00d7b8:	00e79733          	sll	a4,a5,a4
1c00d7bc:	8f49                	or	a4,a4,a0
1c00d7be:	00e5e6a3          	p.sw	a4,a3(a1)
1c00d7c2:	1a102737          	lui	a4,0x1a102
1c00d7c6:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00d7ca:	4314                	lw	a3,0(a4)
1c00d7cc:	00c797b3          	sll	a5,a5,a2
1c00d7d0:	fff7c793          	not	a5,a5
1c00d7d4:	8ff5                	and	a5,a5,a3
1c00d7d6:	c31c                	sw	a5,0(a4)
1c00d7d8:	8082                	ret

1c00d7da <pi_cpi_capture_async>:
1c00d7da:	8732                	mv	a4,a2
1c00d7dc:	4510                	lw	a2,8(a0)
1c00d7de:	1141                	addi	sp,sp,-16
1c00d7e0:	8836                	mv	a6,a3
1c00d7e2:	c606                	sw	ra,12(sp)
1c00d7e4:	c422                	sw	s0,8(sp)
1c00d7e6:	30047473          	csrrci	s0,mstatus,8
1c00d7ea:	00068a23          	sb	zero,20(a3)
1c00d7ee:	00062883          	lw	a7,0(a2)
1c00d7f2:	01c64783          	lbu	a5,28(a2)
1c00d7f6:	86ae                	mv	a3,a1
1c00d7f8:	0631                	addi	a2,a2,12
1c00d7fa:	00189593          	slli	a1,a7,0x1
1c00d7fe:	8542                	mv	a0,a6
1c00d800:	1a5000ef          	jal	ra,1c00e1a4 <__rt_udma_copy_enqueue>
1c00d804:	30041073          	csrw	mstatus,s0
1c00d808:	40b2                	lw	ra,12(sp)
1c00d80a:	4422                	lw	s0,8(sp)
1c00d80c:	0141                	addi	sp,sp,16
1c00d80e:	8082                	ret

1c00d810 <__rt_cpi_init>:

static void __attribute__((constructor)) __rt_cpi_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_CAM; i++)
  {
    __rt_cpi[i].open_count = 0;
1c00d810:	1c0115b7          	lui	a1,0x1c011
1c00d814:	ac858593          	addi	a1,a1,-1336 # 1c010ac8 <__rt_cpi>
1c00d818:	0005a223          	sw	zero,4(a1)
    __rt_udma_channel_init(UDMA_EVENT_ID(ARCHI_UDMA_CAM_ID(0) + i), &__rt_cpi[i].channel);
1c00d81c:	4549                	li	a0,18
1c00d81e:	05b1                	addi	a1,a1,12
1c00d820:	1d90006f          	j	1c00e1f8 <__rt_udma_channel_init>

1c00d824 <soc_eu_fcEventMask_setEvent>:
  unsigned int reg;
  if (evt >= 32) {
    reg = msbReg;
    evt -= 32;
  } else {
    reg = lsbReg;
1c00d824:	47fd                	li	a5,31
1c00d826:	4721                	li	a4,8
1c00d828:	00a7d463          	ble	a0,a5,1c00d830 <soc_eu_fcEventMask_setEvent+0xc>
1c00d82c:	1501                	addi	a0,a0,-32
1c00d82e:	4711                	li	a4,4
1c00d830:	1a1066b7          	lui	a3,0x1a106
1c00d834:	20e6f603          	p.lw	a2,a4(a3)
1c00d838:	4785                	li	a5,1
1c00d83a:	00a79533          	sll	a0,a5,a0
1c00d83e:	fff54513          	not	a0,a0
1c00d842:	8d71                	and	a0,a0,a2
1c00d844:	00a6e723          	p.sw	a0,a4(a3)
1c00d848:	8082                	ret

1c00d84a <pi_task_wait_on.isra.3>:
1c00d84a:	1141                	addi	sp,sp,-16
1c00d84c:	c422                	sw	s0,8(sp)
1c00d84e:	c226                	sw	s1,4(sp)
1c00d850:	c606                	sw	ra,12(sp)
1c00d852:	c04a                	sw	s2,0(sp)
1c00d854:	842a                	mv	s0,a0
1c00d856:	00040783          	lb	a5,0(s0)
1c00d85a:	c799                	beqz	a5,1c00d868 <pi_task_wait_on.isra.3+0x1e>
1c00d85c:	40b2                	lw	ra,12(sp)
1c00d85e:	4422                	lw	s0,8(sp)
1c00d860:	4492                	lw	s1,4(sp)
1c00d862:	4902                	lw	s2,0(sp)
1c00d864:	0141                	addi	sp,sp,16
1c00d866:	8082                	ret
1c00d868:	30047973          	csrrci	s2,mstatus,8
1c00d86c:	4585                	li	a1,1
1c00d86e:	01c00513          	li	a0,28
1c00d872:	c4afe0ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00d876:	30091073          	csrw	mstatus,s2
1c00d87a:	bff1                	j	1c00d856 <pi_task_wait_on.isra.3+0xc>

1c00d87c <pi_i2c_write_async>:
1c00d87c:	30047873          	csrrci	a6,mstatus,8
1c00d880:	00070a23          	sb	zero,20(a4)
1c00d884:	451c                	lw	a5,8(a0)
1c00d886:	4388                	lw	a0,0(a5)
1c00d888:	c105                	beqz	a0,1c00d8a8 <pi_i2c_write_async+0x2c>
1c00d88a:	c334                	sw	a3,64(a4)
1c00d88c:	43d4                	lw	a3,4(a5)
1c00d88e:	df0c                	sw	a1,56(a4)
1c00d890:	df50                	sw	a2,60(a4)
1c00d892:	ca89                	beqz	a3,1c00d8a4 <pi_i2c_write_async+0x28>
1c00d894:	4794                	lw	a3,8(a5)
1c00d896:	ced8                	sw	a4,28(a3)
1c00d898:	c798                	sw	a4,8(a5)
1c00d89a:	00072e23          	sw	zero,28(a4)
1c00d89e:	30081073          	csrw	mstatus,a6
1c00d8a2:	8082                	ret
1c00d8a4:	c3d8                	sw	a4,4(a5)
1c00d8a6:	bfcd                	j	1c00d898 <pi_i2c_write_async+0x1c>
1c00d8a8:	c398                	sw	a4,0(a5)
1c00d8aa:	1c000737          	lui	a4,0x1c000
1c00d8ae:	0ac70713          	addi	a4,a4,172 # 1c0000ac <__rt_i2c_step1>
1c00d8b2:	cf98                	sw	a4,24(a5)
1c00d8b4:	fc16b733          	p.bclr	a4,a3,30,1
1c00d8b8:	c759                	beqz	a4,1c00d946 <pi_i2c_write_async+0xca>
1c00d8ba:	1c000737          	lui	a4,0x1c000
1c00d8be:	0e070713          	addi	a4,a4,224 # 1c0000e0 <__rt_i2c_step3>
1c00d8c2:	cfd8                	sw	a4,28(a5)
1c00d8c4:	5701                	li	a4,-32
1c00d8c6:	02e78223          	sb	a4,36(a5)
1c00d8ca:	43b8                	lw	a4,64(a5)
1c00d8cc:	8a89                	andi	a3,a3,2
1c00d8ce:	00875513          	srli	a0,a4,0x8
1c00d8d2:	02a782a3          	sb	a0,37(a5)
1c00d8d6:	02e78323          	sb	a4,38(a5)
1c00d8da:	450d                	li	a0,3
1c00d8dc:	ea89                	bnez	a3,1c00d8ee <pi_i2c_write_async+0x72>
1c00d8de:	7761                	lui	a4,0xffff8
1c00d8e0:	02e793a3          	sh	a4,39(a5)
1c00d8e4:	0397c703          	lbu	a4,57(a5)
1c00d8e8:	4519                	li	a0,6
1c00d8ea:	02e784a3          	sb	a4,41(a5)
1c00d8ee:	4705                	li	a4,1
1c00d8f0:	00c75c63          	ble	a2,a4,1c00d908 <pi_i2c_write_async+0x8c>
1c00d8f4:	00a78733          	add	a4,a5,a0
1c00d8f8:	fc000693          	li	a3,-64
1c00d8fc:	02d70223          	sb	a3,36(a4) # ffff8024 <pulp__FC+0xffff8025>
1c00d900:	86b2                	mv	a3,a2
1c00d902:	02d702a3          	sb	a3,37(a4)
1c00d906:	0509                	addi	a0,a0,2
1c00d908:	00a78733          	add	a4,a5,a0
1c00d90c:	f8000693          	li	a3,-128
1c00d910:	02d70223          	sb	a3,36(a4)
1c00d914:	5bd4                	lw	a3,52(a5)
1c00d916:	1a1028b7          	lui	a7,0x1a102
1c00d91a:	cb8c                	sw	a1,16(a5)
1c00d91c:	0685                	addi	a3,a3,1
1c00d91e:	4016d713          	srai	a4,a3,0x1
1c00d922:	071e                	slli	a4,a4,0x7
1c00d924:	0692                	slli	a3,a3,0x4
1c00d926:	9746                	add	a4,a4,a7
1c00d928:	8ac1                	andi	a3,a3,16
1c00d92a:	9736                	add	a4,a4,a3
1c00d92c:	c7d8                	sw	a4,12(a5)
1c00d92e:	cbd0                	sw	a2,20(a5)
1c00d930:	02478793          	addi	a5,a5,36
1c00d934:	00f72023          	sw	a5,0(a4)
1c00d938:	0505                	addi	a0,a0,1
1c00d93a:	00a72223          	sw	a0,4(a4)
1c00d93e:	47c1                	li	a5,16
1c00d940:	00f72423          	sw	a5,8(a4)
1c00d944:	bfa9                	j	1c00d89e <pi_i2c_write_async+0x22>
1c00d946:	1c000737          	lui	a4,0x1c000
1c00d94a:	0c270713          	addi	a4,a4,194 # 1c0000c2 <__rt_i2c_step2>
1c00d94e:	bf95                	j	1c00d8c2 <pi_i2c_write_async+0x46>

1c00d950 <pi_i2c_write>:
1c00d950:	7175                	addi	sp,sp,-144
1c00d952:	4785                	li	a5,1
1c00d954:	870a                	mv	a4,sp
1c00d956:	c706                	sw	ra,140(sp)
1c00d958:	cc3e                	sw	a5,24(sp)
1c00d95a:	d43e                	sw	a5,40(sp)
1c00d95c:	c202                	sw	zero,4(sp)
1c00d95e:	00010a23          	sb	zero,20(sp)
1c00d962:	f1bff0ef          	jal	ra,1c00d87c <pi_i2c_write_async>
1c00d966:	0848                	addi	a0,sp,20
1c00d968:	ee3ff0ef          	jal	ra,1c00d84a <pi_task_wait_on.isra.3>
1c00d96c:	40ba                	lw	ra,140(sp)
1c00d96e:	4501                	li	a0,0
1c00d970:	6149                	addi	sp,sp,144
1c00d972:	8082                	ret

1c00d974 <pi_i2c_read_async>:
1c00d974:	300478f3          	csrrci	a7,mstatus,8
1c00d978:	00070a23          	sb	zero,20(a4)
1c00d97c:	451c                	lw	a5,8(a0)
1c00d97e:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00d982:	c398                	sw	a4,0(a5)
1c00d984:	1c000737          	lui	a4,0x1c000
1c00d988:	4fc70713          	addi	a4,a4,1276 # 1c0004fc <udma_event_handler_end>
1c00d98c:	cf98                	sw	a4,24(a5)
1c00d98e:	5701                	li	a4,-32
1c00d990:	02e78223          	sb	a4,36(a5)
1c00d994:	43b8                	lw	a4,64(a5)
1c00d996:	00875513          	srli	a0,a4,0x8
1c00d99a:	02e78323          	sb	a4,38(a5)
1c00d99e:	7761                	lui	a4,0xffff8
1c00d9a0:	02e793a3          	sh	a4,39(a5)
1c00d9a4:	0397c703          	lbu	a4,57(a5)
1c00d9a8:	02a782a3          	sb	a0,37(a5)
1c00d9ac:	c0074733          	p.bset	a4,a4,0,0
1c00d9b0:	02e784a3          	sb	a4,41(a5)
1c00d9b4:	4505                	li	a0,1
1c00d9b6:	4719                	li	a4,6
1c00d9b8:	00c55f63          	ble	a2,a0,1c00d9d6 <pi_i2c_read_async+0x62>
1c00d9bc:	fc000713          	li	a4,-64
1c00d9c0:	02e78523          	sb	a4,42(a5)
1c00d9c4:	fff60713          	addi	a4,a2,-1
1c00d9c8:	02e785a3          	sb	a4,43(a5)
1c00d9cc:	04000713          	li	a4,64
1c00d9d0:	02e78623          	sb	a4,44(a5)
1c00d9d4:	4725                	li	a4,9
1c00d9d6:	00e78833          	add	a6,a5,a4
1c00d9da:	06000313          	li	t1,96
1c00d9de:	02680223          	sb	t1,36(a6)
1c00d9e2:	00170513          	addi	a0,a4,1 # ffff8001 <pulp__FC+0xffff8002>
1c00d9e6:	ea81                	bnez	a3,1c00d9f6 <pi_i2c_read_async+0x82>
1c00d9e8:	953e                	add	a0,a0,a5
1c00d9ea:	02000693          	li	a3,32
1c00d9ee:	02d50223          	sb	a3,36(a0)
1c00d9f2:	00270513          	addi	a0,a4,2
1c00d9f6:	5bd4                	lw	a3,52(a5)
1c00d9f8:	1a102837          	lui	a6,0x1a102
1c00d9fc:	4016d713          	srai	a4,a3,0x1
1c00da00:	071e                	slli	a4,a4,0x7
1c00da02:	0692                	slli	a3,a3,0x4
1c00da04:	9742                	add	a4,a4,a6
1c00da06:	8ac1                	andi	a3,a3,16
1c00da08:	9736                	add	a4,a4,a3
1c00da0a:	00b72023          	sw	a1,0(a4)
1c00da0e:	00c72223          	sw	a2,4(a4)
1c00da12:	46c1                	li	a3,16
1c00da14:	00d72423          	sw	a3,8(a4)
1c00da18:	0741                	addi	a4,a4,16
1c00da1a:	02478793          	addi	a5,a5,36
1c00da1e:	00f72023          	sw	a5,0(a4)
1c00da22:	00a72223          	sw	a0,4(a4)
1c00da26:	00d72423          	sw	a3,8(a4)
1c00da2a:	30089073          	csrw	mstatus,a7
1c00da2e:	8082                	ret

1c00da30 <pi_i2c_read>:
1c00da30:	7175                	addi	sp,sp,-144
1c00da32:	4785                	li	a5,1
1c00da34:	870a                	mv	a4,sp
1c00da36:	c706                	sw	ra,140(sp)
1c00da38:	cc3e                	sw	a5,24(sp)
1c00da3a:	d43e                	sw	a5,40(sp)
1c00da3c:	c202                	sw	zero,4(sp)
1c00da3e:	00010a23          	sb	zero,20(sp)
1c00da42:	f33ff0ef          	jal	ra,1c00d974 <pi_i2c_read_async>
1c00da46:	0848                	addi	a0,sp,20
1c00da48:	e03ff0ef          	jal	ra,1c00d84a <pi_task_wait_on.isra.3>
1c00da4c:	40ba                	lw	ra,140(sp)
1c00da4e:	4501                	li	a0,0
1c00da50:	6149                	addi	sp,sp,144
1c00da52:	8082                	ret

1c00da54 <pi_i2c_open>:
1c00da54:	7179                	addi	sp,sp,-48
1c00da56:	d606                	sw	ra,44(sp)
1c00da58:	d422                	sw	s0,40(sp)
1c00da5a:	d226                	sw	s1,36(sp)
1c00da5c:	d04a                	sw	s2,32(sp)
1c00da5e:	ce4e                	sw	s3,28(sp)
1c00da60:	cc52                	sw	s4,24(sp)
1c00da62:	ca56                	sw	s5,20(sp)
1c00da64:	c85a                	sw	s6,16(sp)
1c00da66:	c65e                	sw	s7,12(sp)
1c00da68:	c462                	sw	s8,8(sp)
1c00da6a:	30047b73          	csrrci	s6,mstatus,8
1c00da6e:	00452b83          	lw	s7,4(a0)
1c00da72:	1c0109b7          	lui	s3,0x1c010
1c00da76:	7f498913          	addi	s2,s3,2036 # 1c0107f4 <__rt_i2c>
1c00da7a:	004bca03          	lbu	s4,4(s7)
1c00da7e:	7f498993          	addi	s3,s3,2036
1c00da82:	100a57b3          	p.exthz	a5,s4
1c00da86:	00479413          	slli	s0,a5,0x4
1c00da8a:	943e                	add	s0,s0,a5
1c00da8c:	040a                	slli	s0,s0,0x2
1c00da8e:	04400793          	li	a5,68
1c00da92:	944a                	add	s0,s0,s2
1c00da94:	42fa0933          	p.mac	s2,s4,a5
1c00da98:	c500                	sw	s0,8(a0)
1c00da9a:	005a0493          	addi	s1,s4,5
1c00da9e:	00149c13          	slli	s8,s1,0x1
1c00daa2:	03894783          	lbu	a5,56(s2)
1c00daa6:	0785                	addi	a5,a5,1
1c00daa8:	0ff7f793          	andi	a5,a5,255
1c00daac:	02f90c23          	sb	a5,56(s2)
1c00dab0:	0417bb63          	p.bneimm	a5,1,1c00db06 <pi_i2c_open+0xb2>
1c00dab4:	1a102737          	lui	a4,0x1a102
1c00dab8:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00dabc:	4314                	lw	a3,0(a4)
1c00dabe:	009797b3          	sll	a5,a5,s1
1c00dac2:	8562                	mv	a0,s8
1c00dac4:	8fd5                	or	a5,a5,a3
1c00dac6:	c31c                	sw	a5,0(a4)
1c00dac8:	d5dff0ef          	jal	ra,1c00d824 <soc_eu_fcEventMask_setEvent>
1c00dacc:	001c0a93          	addi	s5,s8,1
1c00dad0:	8556                	mv	a0,s5
1c00dad2:	d53ff0ef          	jal	ra,1c00d824 <soc_eu_fcEventMask_setEvent>
1c00dad6:	e3ff2517          	auipc	a0,0xe3ff2
1c00dada:	55a50513          	addi	a0,a0,1370 # 30 <periph_channels>
1c00dade:	049a                	slli	s1,s1,0x6
1c00dae0:	1c0007b7          	lui	a5,0x1c000
1c00dae4:	94aa                	add	s1,s1,a0
1c00dae6:	0ee78793          	addi	a5,a5,238 # 1c0000ee <__rt_i2c_handle_rx_copy>
1c00daea:	ccdc                	sw	a5,28(s1)
1c00daec:	0a96                	slli	s5,s5,0x5
1c00daee:	1c0007b7          	lui	a5,0x1c000
1c00daf2:	c080                	sw	s0,0(s1)
1c00daf4:	9556                	add	a0,a0,s5
1c00daf6:	0a078793          	addi	a5,a5,160 # 1c0000a0 <__rt_i2c_handle_tx_copy>
1c00dafa:	cd5c                	sw	a5,28(a0)
1c00dafc:	c100                	sw	s0,0(a0)
1c00dafe:	00092023          	sw	zero,0(s2)
1c00db02:	00092223          	sw	zero,4(s2)
1c00db06:	04400793          	li	a5,68
1c00db0a:	874e                	mv	a4,s3
1c00db0c:	42fa0733          	p.mac	a4,s4,a5
1c00db10:	4685                	li	a3,1
1c00db12:	87ba                	mv	a5,a4
1c00db14:	03872a23          	sw	s8,52(a4)
1c00db18:	006bd703          	lhu	a4,6(s7)
1c00db1c:	02e78ca3          	sb	a4,57(a5)
1c00db20:	00cba703          	lw	a4,12(s7)
1c00db24:	dfd8                	sw	a4,60(a5)
1c00db26:	1c0117b7          	lui	a5,0x1c011
1c00db2a:	cd07a783          	lw	a5,-816(a5) # 1c010cd0 <__rt_freq_domains>
1c00db2e:	17fd                	addi	a5,a5,-1
1c00db30:	97ba                	add	a5,a5,a4
1c00db32:	070a                	slli	a4,a4,0x2
1c00db34:	02e7d7b3          	divu	a5,a5,a4
1c00db38:	4701                	li	a4,0
1c00db3a:	00f6d463          	ble	a5,a3,1c00db42 <pi_i2c_open+0xee>
1c00db3e:	fff78713          	addi	a4,a5,-1
1c00db42:	04400793          	li	a5,68
1c00db46:	42fa09b3          	p.mac	s3,s4,a5
1c00db4a:	04e9a023          	sw	a4,64(s3)
1c00db4e:	300b1073          	csrw	mstatus,s6
1c00db52:	50b2                	lw	ra,44(sp)
1c00db54:	5422                	lw	s0,40(sp)
1c00db56:	5492                	lw	s1,36(sp)
1c00db58:	5902                	lw	s2,32(sp)
1c00db5a:	49f2                	lw	s3,28(sp)
1c00db5c:	4a62                	lw	s4,24(sp)
1c00db5e:	4ad2                	lw	s5,20(sp)
1c00db60:	4b42                	lw	s6,16(sp)
1c00db62:	4bb2                	lw	s7,12(sp)
1c00db64:	4c22                	lw	s8,8(sp)
1c00db66:	4501                	li	a0,0
1c00db68:	6145                	addi	sp,sp,48
1c00db6a:	8082                	ret

1c00db6c <pi_i2c_conf_init>:


void pi_i2c_conf_init(pi_i2c_conf_t *conf)
{
  conf->cs = 0;
  conf->max_baudrate = 200000;
1c00db6c:	000317b7          	lui	a5,0x31
1c00db70:	d4078793          	addi	a5,a5,-704 # 30d40 <__L1Cl+0x20d40>
  conf->cs = 0;
1c00db74:	00051323          	sh	zero,6(a0)
  conf->max_baudrate = 200000;
1c00db78:	c55c                	sw	a5,12(a0)
  conf->itf = 0;
1c00db7a:	00050223          	sb	zero,4(a0)
}
1c00db7e:	8082                	ret

1c00db80 <__rt_i2c_init>:

static void __attribute__((constructor)) __rt_i2c_init()
{
1c00db80:	1141                	addi	sp,sp,-16
1c00db82:	c226                	sw	s1,4(sp)
  for (int i=0; i<ARCHI_UDMA_NB_I2C; i++)
  {
    __rt_i2c[i].open_count = 0;
1c00db84:	1c0104b7          	lui	s1,0x1c010
{
1c00db88:	c606                	sw	ra,12(sp)
1c00db8a:	c422                	sw	s0,8(sp)
1c00db8c:	c04a                	sw	s2,0(sp)
    __rt_i2c[i].open_count = 0;
1c00db8e:	7f448413          	addi	s0,s1,2036 # 1c0107f4 <__rt_i2c>
    __rt_i2c[i].udma_stop_cmd = I2C_CMD_STOP;
1c00db92:	02000913          	li	s2,32
1c00db96:	03242023          	sw	s2,32(s0)
    __rt_i2c[i].open_count = 0;
1c00db9a:	02040c23          	sb	zero,56(s0)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i), &__rt_i2c[i]);
1c00db9e:	7f448593          	addi	a1,s1,2036
1c00dba2:	4529                	li	a0,10
1c00dba4:	25b5                	jal	1c00e210 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c00dba6:	7f448593          	addi	a1,s1,2036
1c00dbaa:	452d                	li	a0,11
1c00dbac:	2595                	jal	1c00e210 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i), &__rt_i2c[i]);
1c00dbae:	04440413          	addi	s0,s0,68
    __rt_i2c[i].udma_stop_cmd = I2C_CMD_STOP;
1c00dbb2:	03242023          	sw	s2,32(s0)
    __rt_i2c[i].open_count = 0;
1c00dbb6:	02040c23          	sb	zero,56(s0)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i), &__rt_i2c[i]);
1c00dbba:	4531                	li	a0,12
1c00dbbc:	85a2                	mv	a1,s0
1c00dbbe:	2d89                	jal	1c00e210 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c00dbc0:	85a2                	mv	a1,s0
  }
}
1c00dbc2:	4422                	lw	s0,8(sp)
1c00dbc4:	40b2                	lw	ra,12(sp)
1c00dbc6:	4492                	lw	s1,4(sp)
1c00dbc8:	4902                	lw	s2,0(sp)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c00dbca:	4535                	li	a0,13
}
1c00dbcc:	0141                	addi	sp,sp,16
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c00dbce:	a589                	j	1c00e210 <__rt_udma_channel_reg_data>

1c00dbd0 <__pi_uart_flow_control_enable>:
}

static inline void plp_uart_tx_enable(int channel)
{
  unsigned int setup = plp_uart_reg_read(channel, UART_SETUP_OFFSET);
  setup |= UART_TX_ENA;
1c00dbd0:	7179                	addi	sp,sp,-48
1c00dbd2:	d422                	sw	s0,40(sp)
1c00dbd4:	d04a                	sw	s2,32(sp)
1c00dbd6:	03850413          	addi	s0,a0,56
1c00dbda:	892a                	mv	s2,a0
1c00dbdc:	0808                	addi	a0,sp,16
1c00dbde:	d606                	sw	ra,44(sp)
1c00dbe0:	d226                	sw	s1,36(sp)
1c00dbe2:	c802                	sw	zero,16(sp)
1c00dbe4:	ca02                	sw	zero,20(sp)
1c00dbe6:	cc02                	sw	zero,24(sp)
1c00dbe8:	00011e23          	sh	zero,28(sp)
1c00dbec:	00010f23          	sb	zero,30(sp)
1c00dbf0:	2535                	jal	1c00e21c <pi_pwm_conf_init>
1c00dbf2:	4789                	li	a5,2
1c00dbf4:	00f12aa3          	sw	a5,21(sp)
1c00dbf8:	080c                	addi	a1,sp,16
1c00dbfa:	40000793          	li	a5,1024
1c00dbfe:	8522                	mv	a0,s0
1c00dc00:	00f12d23          	sw	a5,26(sp)
1c00dc04:	00010a23          	sb	zero,20(sp)
1c00dc08:	a35fd0ef          	jal	ra,1c00b63c <pi_open_from_conf>
1c00dc0c:	8522                	mv	a0,s0
1c00dc0e:	2d31                	jal	1c00e22a <pi_pwm_open>
1c00dc10:	84aa                	mv	s1,a0
1c00dc12:	c105                	beqz	a0,1c00dc32 <__pi_uart_flow_control_enable+0x62>
1c00dc14:	85aa                	mv	a1,a0
1c00dc16:	1c010537          	lui	a0,0x1c010
1c00dc1a:	47c50513          	addi	a0,a0,1148 # 1c01047c <__hyper_pad+0x34>
1c00dc1e:	0a4010ef          	jal	ra,1c00ecc2 <printf>
1c00dc22:	54d5                	li	s1,-11
1c00dc24:	50b2                	lw	ra,44(sp)
1c00dc26:	5422                	lw	s0,40(sp)
1c00dc28:	8526                	mv	a0,s1
1c00dc2a:	5902                	lw	s2,32(sp)
1c00dc2c:	5492                	lw	s1,36(sp)
1c00dc2e:	6145                	addi	sp,sp,48
1c00dc30:	8082                	ret
1c00dc32:	4601                	li	a2,0
1c00dc34:	4589                	li	a1,2
1c00dc36:	8522                	mv	a0,s0
1c00dc38:	2551                	jal	1c00e2bc <pi_pwm_ioctl>
1c00dc3a:	57fd                	li	a5,-1
1c00dc3c:	00f11223          	sh	a5,4(sp)
1c00dc40:	01512783          	lw	a5,21(sp)
1c00dc44:	0050                	addi	a2,sp,4
1c00dc46:	458d                	li	a1,3
1c00dc48:	8522                	mv	a0,s0
1c00dc4a:	00f12323          	sw	a5,6(sp)
1c00dc4e:	00012523          	sw	zero,10(sp)
1c00dc52:	25ad                	jal	1c00e2bc <pi_pwm_ioctl>
1c00dc54:	4611                	li	a2,4
1c00dc56:	4581                	li	a1,0
1c00dc58:	8522                	mv	a0,s0
1c00dc5a:	258d                	jal	1c00e2bc <pi_pwm_ioctl>
1c00dc5c:	4641                	li	a2,16
1c00dc5e:	4581                	li	a1,0
1c00dc60:	8522                	mv	a0,s0
1c00dc62:	2da9                	jal	1c00e2bc <pi_pwm_ioctl>
1c00dc64:	4605                	li	a2,1
1c00dc66:	4581                	li	a1,0
1c00dc68:	8522                	mv	a0,s0
1c00dc6a:	2d89                	jal	1c00e2bc <pi_pwm_ioctl>
1c00dc6c:	4581                	li	a1,0
1c00dc6e:	4565                	li	a0,25
1c00dc70:	a2eff0ef          	jal	ra,1c00ce9e <pi_pad_set_function>
1c00dc74:	800005b7          	lui	a1,0x80000
1c00dc78:	4601                	li	a2,0
1c00dc7a:	10158593          	addi	a1,a1,257 # 80000101 <pulp__FC+0x80000102>
1c00dc7e:	4501                	li	a0,0
1c00dc80:	7a6000ef          	jal	ra,1c00e426 <pi_gpio_pin_configure>
1c00dc84:	4601                	li	a2,0
1c00dc86:	800005b7          	lui	a1,0x80000
1c00dc8a:	4501                	li	a0,0
1c00dc8c:	79a000ef          	jal	ra,1c00e426 <pi_gpio_pin_configure>
1c00dc90:	4785                	li	a5,1
1c00dc92:	00f90b23          	sb	a5,22(s2)
1c00dc96:	b779                	j	1c00dc24 <__pi_uart_flow_control_enable+0x54>

1c00dc98 <__rt_uart_setup>:
1c00dc98:	01254783          	lbu	a5,18(a0)
1c00dc9c:	01054683          	lbu	a3,16(a0)
1c00dca0:	01154703          	lbu	a4,17(a0)
1c00dca4:	4550                	lw	a2,12(a0)
1c00dca6:	068e                	slli	a3,a3,0x3
1c00dca8:	0786                	slli	a5,a5,0x1
1c00dcaa:	8fd5                	or	a5,a5,a3
1c00dcac:	8fd9                	or	a5,a5,a4
1c00dcae:	4709                	li	a4,2
1c00dcb0:	02e64733          	div	a4,a2,a4
1c00dcb4:	01454683          	lbu	a3,20(a0)
1c00dcb8:	06a2                	slli	a3,a3,0x8
1c00dcba:	8fd5                	or	a5,a5,a3
1c00dcbc:	01354683          	lbu	a3,19(a0)
1c00dcc0:	06a6                	slli	a3,a3,0x9
1c00dcc2:	8fd5                	or	a5,a5,a3
1c00dcc4:	1c0116b7          	lui	a3,0x1c011
1c00dcc8:	cd06a683          	lw	a3,-816(a3) # 1c010cd0 <__rt_freq_domains>
1c00dccc:	9736                	add	a4,a4,a3
1c00dcce:	02c75733          	divu	a4,a4,a2
1c00dcd2:	177d                	addi	a4,a4,-1
1c00dcd4:	0742                	slli	a4,a4,0x10
1c00dcd6:	8fd9                	or	a5,a5,a4
1c00dcd8:	1a102737          	lui	a4,0x1a102
1c00dcdc:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00dce0:	8082                	ret

1c00dce2 <__rt_uart_setfreq_after>:
1c00dce2:	1c011537          	lui	a0,0x1c011
1c00dce6:	87c52783          	lw	a5,-1924(a0) # 1c01087c <__rt_uart>
1c00dcea:	cb99                	beqz	a5,1c00dd00 <__rt_uart_setfreq_after+0x1e>
1c00dcec:	1141                	addi	sp,sp,-16
1c00dcee:	87c50513          	addi	a0,a0,-1924
1c00dcf2:	c606                	sw	ra,12(sp)
1c00dcf4:	fa5ff0ef          	jal	ra,1c00dc98 <__rt_uart_setup>
1c00dcf8:	40b2                	lw	ra,12(sp)
1c00dcfa:	4501                	li	a0,0
1c00dcfc:	0141                	addi	sp,sp,16
1c00dcfe:	8082                	ret
1c00dd00:	4501                	li	a0,0
1c00dd02:	8082                	ret

1c00dd04 <__pi_uart_copy_enqueue_exec_flow_control>:
1c00dd04:	7179                	addi	sp,sp,-48
1c00dd06:	ce4e                	sw	s3,28(sp)
1c00dd08:	45bc                	lw	a5,72(a1)
1c00dd0a:	0385a983          	lw	s3,56(a1) # 80000038 <pulp__FC+0x80000039>
1c00dd0e:	d422                	sw	s0,40(sp)
1c00dd10:	d04a                	sw	s2,32(sp)
1c00dd12:	cc52                	sw	s4,24(sp)
1c00dd14:	d606                	sw	ra,44(sp)
1c00dd16:	d226                	sw	s1,36(sp)
1c00dd18:	842a                	mv	s0,a0
1c00dd1a:	0405a903          	lw	s2,64(a1)
1c00dd1e:	99be                	add	s3,s3,a5
1c00dd20:	04c5aa03          	lw	s4,76(a1)
1c00dd24:	45bc                	lw	a5,72(a1)
1c00dd26:	0785                	addi	a5,a5,1
1c00dd28:	c5bc                	sw	a5,72(a1)
1c00dd2a:	41fc                	lw	a5,68(a1)
1c00dd2c:	17fd                	addi	a5,a5,-1
1c00dd2e:	c1fc                	sw	a5,68(a1)
1c00dd30:	021a3063          	p.bneimm	s4,1,1c00dd50 <__pi_uart_copy_enqueue_exec_flow_control+0x4c>
1c00dd34:	800004b7          	lui	s1,0x80000
1c00dd38:	10148593          	addi	a1,s1,257 # 80000101 <pulp__FC+0x80000102>
1c00dd3c:	0070                	addi	a2,sp,12
1c00dd3e:	4501                	li	a0,0
1c00dd40:	c602                	sw	zero,12(sp)
1c00dd42:	2db1                	jal	1c00e39e <pi_gpio_pin_read>
1c00dd44:	c62a                	sw	a0,12(sp)
1c00dd46:	10148493          	addi	s1,s1,257
1c00dd4a:	47b2                	lw	a5,12(sp)
1c00dd4c:	0217ae63          	p.beqimm	a5,1,1c00dd88 <__pi_uart_copy_enqueue_exec_flow_control+0x84>
1c00dd50:	01392023          	sw	s3,0(s2)
1c00dd54:	4785                	li	a5,1
1c00dd56:	00f92223          	sw	a5,4(s2)
1c00dd5a:	47c1                	li	a5,16
1c00dd5c:	00f92423          	sw	a5,8(s2)
1c00dd60:	000a1c63          	bnez	s4,1c00dd78 <__pi_uart_copy_enqueue_exec_flow_control+0x74>
1c00dd64:	03840413          	addi	s0,s0,56
1c00dd68:	4609                	li	a2,2
1c00dd6a:	4581                	li	a1,0
1c00dd6c:	8522                	mv	a0,s0
1c00dd6e:	23b9                	jal	1c00e2bc <pi_pwm_ioctl>
1c00dd70:	4605                	li	a2,1
1c00dd72:	4581                	li	a1,0
1c00dd74:	8522                	mv	a0,s0
1c00dd76:	2399                	jal	1c00e2bc <pi_pwm_ioctl>
1c00dd78:	50b2                	lw	ra,44(sp)
1c00dd7a:	5422                	lw	s0,40(sp)
1c00dd7c:	5492                	lw	s1,36(sp)
1c00dd7e:	5902                	lw	s2,32(sp)
1c00dd80:	49f2                	lw	s3,28(sp)
1c00dd82:	4a62                	lw	s4,24(sp)
1c00dd84:	6145                	addi	sp,sp,48
1c00dd86:	8082                	ret
1c00dd88:	0070                	addi	a2,sp,12
1c00dd8a:	85a6                	mv	a1,s1
1c00dd8c:	4501                	li	a0,0
1c00dd8e:	2d01                	jal	1c00e39e <pi_gpio_pin_read>
1c00dd90:	c62a                	sw	a0,12(sp)
1c00dd92:	bf65                	j	1c00dd4a <__pi_uart_copy_enqueue_exec_flow_control+0x46>

1c00dd94 <__pi_uart_copy_enqueue_exec.isra.14>:
1c00dd94:	5d58                	lw	a4,60(a0)
1c00dd96:	000206b7          	lui	a3,0x20
1c00dd9a:	16ed                	addi	a3,a3,-5
1c00dd9c:	413c                	lw	a5,64(a0)
1c00dd9e:	5d10                	lw	a2,56(a0)
1c00dda0:	04d75733          	p.minu	a4,a4,a3
1c00dda4:	5d14                	lw	a3,56(a0)
1c00dda6:	96ba                	add	a3,a3,a4
1c00dda8:	dd14                	sw	a3,56(a0)
1c00ddaa:	5d54                	lw	a3,60(a0)
1c00ddac:	8e99                	sub	a3,a3,a4
1c00ddae:	c174                	sw	a3,68(a0)
1c00ddb0:	dd54                	sw	a3,60(a0)
1c00ddb2:	00c7a023          	sw	a2,0(a5)
1c00ddb6:	00e7a223          	sw	a4,4(a5)
1c00ddba:	4741                	li	a4,16
1c00ddbc:	00e7a423          	sw	a4,8(a5)
1c00ddc0:	8082                	ret

1c00ddc2 <__pi_uart_copy_enqueue>:
1c00ddc2:	1141                	addi	sp,sp,-16
1c00ddc4:	c606                	sw	ra,12(sp)
1c00ddc6:	c422                	sw	s0,8(sp)
1c00ddc8:	30047473          	csrrci	s0,mstatus,8
1c00ddcc:	df0c                	sw	a1,56(a4)
1c00ddce:	01654803          	lbu	a6,22(a0)
1c00ddd2:	4785                	li	a5,1
1c00ddd4:	00081363          	bnez	a6,1c00ddda <__pi_uart_copy_enqueue+0x18>
1c00ddd8:	87b2                	mv	a5,a2
1c00ddda:	df5c                	sw	a5,60(a4)
1c00dddc:	415c                	lw	a5,4(a0)
1c00ddde:	1a1028b7          	lui	a7,0x1a102
1c00dde2:	97b6                	add	a5,a5,a3
1c00dde4:	4017d593          	srai	a1,a5,0x1
1c00dde8:	059e                	slli	a1,a1,0x7
1c00ddea:	0792                	slli	a5,a5,0x4
1c00ddec:	95c6                	add	a1,a1,a7
1c00ddee:	8bc1                	andi	a5,a5,16
1c00ddf0:	97ae                	add	a5,a5,a1
1c00ddf2:	c33c                	sw	a5,64(a4)
1c00ddf4:	00081363          	bnez	a6,1c00ddfa <__pi_uart_copy_enqueue+0x38>
1c00ddf8:	4601                	li	a2,0
1c00ddfa:	c370                	sw	a2,68(a4)
1c00ddfc:	04072423          	sw	zero,72(a4)
1c00de00:	c774                	sw	a3,76(a4)
1c00de02:	00072e23          	sw	zero,28(a4)
1c00de06:	01850793          	addi	a5,a0,24
1c00de0a:	c299                	beqz	a3,1c00de10 <__pi_uart_copy_enqueue+0x4e>
1c00de0c:	02850793          	addi	a5,a0,40
1c00de10:	4394                	lw	a3,0(a5)
1c00de12:	e295                	bnez	a3,1c00de36 <__pi_uart_copy_enqueue+0x74>
1c00de14:	c398                	sw	a4,0(a5)
1c00de16:	01654783          	lbu	a5,22(a0)
1c00de1a:	cb91                	beqz	a5,1c00de2e <__pi_uart_copy_enqueue+0x6c>
1c00de1c:	85ba                	mv	a1,a4
1c00de1e:	ee7ff0ef          	jal	ra,1c00dd04 <__pi_uart_copy_enqueue_exec_flow_control>
1c00de22:	30041073          	csrw	mstatus,s0
1c00de26:	40b2                	lw	ra,12(sp)
1c00de28:	4422                	lw	s0,8(sp)
1c00de2a:	0141                	addi	sp,sp,16
1c00de2c:	8082                	ret
1c00de2e:	853a                	mv	a0,a4
1c00de30:	f65ff0ef          	jal	ra,1c00dd94 <__pi_uart_copy_enqueue_exec.isra.14>
1c00de34:	b7fd                	j	1c00de22 <__pi_uart_copy_enqueue+0x60>
1c00de36:	4794                	lw	a3,8(a5)
1c00de38:	e681                	bnez	a3,1c00de40 <__pi_uart_copy_enqueue+0x7e>
1c00de3a:	c798                	sw	a4,8(a5)
1c00de3c:	c7d8                	sw	a4,12(a5)
1c00de3e:	b7d5                	j	1c00de22 <__pi_uart_copy_enqueue+0x60>
1c00de40:	47d4                	lw	a3,12(a5)
1c00de42:	ced8                	sw	a4,28(a3)
1c00de44:	bfe5                	j	1c00de3c <__pi_uart_copy_enqueue+0x7a>

1c00de46 <__rt_uart_wait_tx_done.isra.17>:
1c00de46:	1a102737          	lui	a4,0x1a102
1c00de4a:	1141                	addi	sp,sp,-16
1c00de4c:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021d4>
1c00de50:	002046b7          	lui	a3,0x204
1c00de54:	431c                	lw	a5,0(a4)
1c00de56:	8bc1                	andi	a5,a5,16
1c00de58:	e38d                	bnez	a5,1c00de7a <__rt_uart_wait_tx_done.isra.17+0x34>
1c00de5a:	1a102737          	lui	a4,0x1a102
1c00de5e:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021dc>
1c00de62:	431c                	lw	a5,0(a4)
1c00de64:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00de68:	ffed                	bnez	a5,1c00de62 <__rt_uart_wait_tx_done.isra.17+0x1c>
1c00de6a:	c602                	sw	zero,12(sp)
1c00de6c:	7cf00713          	li	a4,1999
1c00de70:	47b2                	lw	a5,12(sp)
1c00de72:	00f75763          	ble	a5,a4,1c00de80 <__rt_uart_wait_tx_done.isra.17+0x3a>
1c00de76:	0141                	addi	sp,sp,16
1c00de78:	8082                	ret
1c00de7a:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c00de7e:	bfd9                	j	1c00de54 <__rt_uart_wait_tx_done.isra.17+0xe>
1c00de80:	47b2                	lw	a5,12(sp)
1c00de82:	0785                	addi	a5,a5,1
1c00de84:	c63e                	sw	a5,12(sp)
1c00de86:	b7ed                	j	1c00de70 <__rt_uart_wait_tx_done.isra.17+0x2a>

1c00de88 <__rt_uart_setfreq_before>:
1c00de88:	1c0117b7          	lui	a5,0x1c011
1c00de8c:	87c7a783          	lw	a5,-1924(a5) # 1c01087c <__rt_uart>
1c00de90:	c385                	beqz	a5,1c00deb0 <__rt_uart_setfreq_before+0x28>
1c00de92:	1141                	addi	sp,sp,-16
1c00de94:	c606                	sw	ra,12(sp)
1c00de96:	fb1ff0ef          	jal	ra,1c00de46 <__rt_uart_wait_tx_done.isra.17>
1c00de9a:	40b2                	lw	ra,12(sp)
1c00de9c:	005007b7          	lui	a5,0x500
1c00dea0:	1a102737          	lui	a4,0x1a102
1c00dea4:	0799                	addi	a5,a5,6
1c00dea6:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00deaa:	4501                	li	a0,0
1c00deac:	0141                	addi	sp,sp,16
1c00deae:	8082                	ret
1c00deb0:	4501                	li	a0,0
1c00deb2:	8082                	ret

1c00deb4 <pi_task_wait_on.isra.20>:
1c00deb4:	1141                	addi	sp,sp,-16
1c00deb6:	c422                	sw	s0,8(sp)
1c00deb8:	c226                	sw	s1,4(sp)
1c00deba:	c606                	sw	ra,12(sp)
1c00debc:	c04a                	sw	s2,0(sp)
1c00debe:	842a                	mv	s0,a0
1c00dec0:	00040783          	lb	a5,0(s0)
1c00dec4:	c799                	beqz	a5,1c00ded2 <pi_task_wait_on.isra.20+0x1e>
1c00dec6:	40b2                	lw	ra,12(sp)
1c00dec8:	4422                	lw	s0,8(sp)
1c00deca:	4492                	lw	s1,4(sp)
1c00decc:	4902                	lw	s2,0(sp)
1c00dece:	0141                	addi	sp,sp,16
1c00ded0:	8082                	ret
1c00ded2:	30047973          	csrrci	s2,mstatus,8
1c00ded6:	4585                	li	a1,1
1c00ded8:	01c00513          	li	a0,28
1c00dedc:	de1fd0ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00dee0:	30091073          	csrw	mstatus,s2
1c00dee4:	bff1                	j	1c00dec0 <pi_task_wait_on.isra.20+0xc>

1c00dee6 <__pi_uart_handle_copy>:
1c00dee6:	fc153533          	p.bclr	a0,a0,30,1
1c00deea:	872e                	mv	a4,a1
1c00deec:	01858793          	addi	a5,a1,24
1c00def0:	c119                	beqz	a0,1c00def6 <__pi_uart_handle_copy+0x10>
1c00def2:	02858793          	addi	a5,a1,40
1c00def6:	438c                	lw	a1,0(a5)
1c00def8:	41f4                	lw	a3,68(a1)
1c00defa:	c699                	beqz	a3,1c00df08 <__pi_uart_handle_copy+0x22>
1c00defc:	01674783          	lbu	a5,22(a4)
1c00df00:	c3a1                	beqz	a5,1c00df40 <__pi_uart_handle_copy+0x5a>
1c00df02:	853a                	mv	a0,a4
1c00df04:	e01ff06f          	j	1c00dd04 <__pi_uart_copy_enqueue_exec_flow_control>
1c00df08:	30047573          	csrrci	a0,mstatus,8
1c00df0c:	01c02803          	lw	a6,28(zero) # 1c <__rt_sched>
1c00df10:	0005a023          	sw	zero,0(a1)
1c00df14:	01c00613          	li	a2,28
1c00df18:	02080163          	beqz	a6,1c00df3a <__pi_uart_handle_copy+0x54>
1c00df1c:	4254                	lw	a3,4(a2)
1c00df1e:	c28c                	sw	a1,0(a3)
1c00df20:	c24c                	sw	a1,4(a2)
1c00df22:	30051073          	csrw	mstatus,a0
1c00df26:	478c                	lw	a1,8(a5)
1c00df28:	c38c                	sw	a1,0(a5)
1c00df2a:	cd91                	beqz	a1,1c00df46 <__pi_uart_handle_copy+0x60>
1c00df2c:	4794                	lw	a3,8(a5)
1c00df2e:	4ed4                	lw	a3,28(a3)
1c00df30:	c794                	sw	a3,8(a5)
1c00df32:	f6e9                	bnez	a3,1c00defc <__pi_uart_handle_copy+0x16>
1c00df34:	0007a623          	sw	zero,12(a5) # 50000c <__L2+0x48000c>
1c00df38:	b7d1                	j	1c00defc <__pi_uart_handle_copy+0x16>
1c00df3a:	00b02e23          	sw	a1,28(zero) # 1c <__rt_sched>
1c00df3e:	b7cd                	j	1c00df20 <__pi_uart_handle_copy+0x3a>
1c00df40:	852e                	mv	a0,a1
1c00df42:	e53ff06f          	j	1c00dd94 <__pi_uart_copy_enqueue_exec.isra.14>
1c00df46:	8082                	ret

1c00df48 <pi_uart_conf_init>:
1c00df48:	67f1                	lui	a5,0x1c
1c00df4a:	20078793          	addi	a5,a5,512 # 1c200 <__L1Cl+0xc200>
1c00df4e:	c11c                	sw	a5,0(a0)
1c00df50:	010307b7          	lui	a5,0x1030
1c00df54:	c15c                	sw	a5,4(a0)
1c00df56:	4785                	li	a5,1
1c00df58:	00f51423          	sh	a5,8(a0)
1c00df5c:	00050523          	sb	zero,10(a0)
1c00df60:	8082                	ret

1c00df62 <pi_uart_open>:
1c00df62:	1101                	addi	sp,sp,-32
1c00df64:	ce06                	sw	ra,28(sp)
1c00df66:	cc22                	sw	s0,24(sp)
1c00df68:	ca26                	sw	s1,20(sp)
1c00df6a:	c84a                	sw	s2,16(sp)
1c00df6c:	c64e                	sw	s3,12(sp)
1c00df6e:	30047973          	csrrci	s2,mstatus,8
1c00df72:	4158                	lw	a4,4(a0)
1c00df74:	04400593          	li	a1,68
1c00df78:	00974603          	lbu	a2,9(a4)
1c00df7c:	100657b3          	p.exthz	a5,a2
1c00df80:	00479693          	slli	a3,a5,0x4
1c00df84:	96be                	add	a3,a3,a5
1c00df86:	1c0117b7          	lui	a5,0x1c011
1c00df8a:	87c78793          	addi	a5,a5,-1924 # 1c01087c <__rt_uart>
1c00df8e:	843e                	mv	s0,a5
1c00df90:	42b60433          	p.mac	s0,a2,a1
1c00df94:	068a                	slli	a3,a3,0x2
1c00df96:	00d784b3          	add	s1,a5,a3
1c00df9a:	c504                	sw	s1,8(a0)
1c00df9c:	00042983          	lw	s3,0(s0)
1c00dfa0:	0a099863          	bnez	s3,1c00e050 <pi_uart_open+0xee>
1c00dfa4:	4605                	li	a2,1
1c00dfa6:	c010                	sw	a2,0(s0)
1c00dfa8:	0047260b          	p.lw	a2,4(a4!)
1c00dfac:	06b1                	addi	a3,a3,12
1c00dfae:	97b6                	add	a5,a5,a3
1c00dfb0:	00c7a22b          	p.sw	a2,4(a5!)
1c00dfb4:	0047268b          	p.lw	a3,4(a4!)
1c00dfb8:	00d7a22b          	p.sw	a3,4(a5!)
1c00dfbc:	4318                	lw	a4,0(a4)
1c00dfbe:	c398                	sw	a4,0(a5)
1c00dfc0:	47a1                	li	a5,8
1c00dfc2:	c05c                	sw	a5,4(s0)
1c00dfc4:	1a1027b7          	lui	a5,0x1a102
1c00dfc8:	02042423          	sw	zero,40(s0)
1c00dfcc:	02042623          	sw	zero,44(s0)
1c00dfd0:	02042823          	sw	zero,48(s0)
1c00dfd4:	02042a23          	sw	zero,52(s0)
1c00dfd8:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa10273c>
1c00dfdc:	4398                	lw	a4,0(a5)
1c00dfde:	c0474733          	p.bset	a4,a4,0,4
1c00dfe2:	c398                	sw	a4,0(a5)
1c00dfe4:	1a1067b7          	lui	a5,0x1a106
1c00dfe8:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fc4>
1c00dfec:	c0873733          	p.bclr	a4,a4,0,8
1c00dff0:	00e7a423          	sw	a4,8(a5)
1c00dff4:	0087a703          	lw	a4,8(a5)
1c00dff8:	c0973733          	p.bclr	a4,a4,0,9
1c00dffc:	00e7a423          	sw	a4,8(a5)
1c00e000:	1c0007b7          	lui	a5,0x1c000
1c00e004:	65a78793          	addi	a5,a5,1626 # 1c00065a <__pi_uart_handle_copy_asm>
1c00e008:	8526                	mv	a0,s1
1c00e00a:	14f02623          	sw	a5,332(zero) # 14c <_l1_preload_size+0x10c>
1c00e00e:	16f02623          	sw	a5,364(zero) # 16c <_l1_preload_size+0x12c>
1c00e012:	12902823          	sw	s1,304(zero) # 130 <_l1_preload_size+0xf0>
1c00e016:	14902823          	sw	s1,336(zero) # 150 <_l1_preload_size+0x110>
1c00e01a:	c7fff0ef          	jal	ra,1c00dc98 <__rt_uart_setup>
1c00e01e:	01644783          	lbu	a5,22(s0)
1c00e022:	c785                	beqz	a5,1c00e04a <pi_uart_open+0xe8>
1c00e024:	8526                	mv	a0,s1
1c00e026:	babff0ef          	jal	ra,1c00dbd0 <__pi_uart_flow_control_enable>
1c00e02a:	c105                	beqz	a0,1c00e04a <pi_uart_open+0xe8>
1c00e02c:	1c010537          	lui	a0,0x1c010
1c00e030:	4e450513          	addi	a0,a0,1252 # 1c0104e4 <__hyper_pad+0x9c>
1c00e034:	2f9000ef          	jal	ra,1c00eb2c <puts>
1c00e038:	59f9                	li	s3,-2
1c00e03a:	40f2                	lw	ra,28(sp)
1c00e03c:	4462                	lw	s0,24(sp)
1c00e03e:	854e                	mv	a0,s3
1c00e040:	44d2                	lw	s1,20(sp)
1c00e042:	4942                	lw	s2,16(sp)
1c00e044:	49b2                	lw	s3,12(sp)
1c00e046:	6105                	addi	sp,sp,32
1c00e048:	8082                	ret
1c00e04a:	30091073          	csrw	mstatus,s2
1c00e04e:	b7f5                	j	1c00e03a <pi_uart_open+0xd8>
1c00e050:	59fd                	li	s3,-1
1c00e052:	b7e5                	j	1c00e03a <pi_uart_open+0xd8>

1c00e054 <pi_uart_write_async>:
1c00e054:	1141                	addi	sp,sp,-16
1c00e056:	c606                	sw	ra,12(sp)
1c00e058:	00068a23          	sb	zero,20(a3)
1c00e05c:	4508                	lw	a0,8(a0)
1c00e05e:	8736                	mv	a4,a3
1c00e060:	4685                	li	a3,1
1c00e062:	d61ff0ef          	jal	ra,1c00ddc2 <__pi_uart_copy_enqueue>
1c00e066:	40b2                	lw	ra,12(sp)
1c00e068:	4501                	li	a0,0
1c00e06a:	0141                	addi	sp,sp,16
1c00e06c:	8082                	ret

1c00e06e <pi_uart_write>:
1c00e06e:	7175                	addi	sp,sp,-144
1c00e070:	4785                	li	a5,1
1c00e072:	868a                	mv	a3,sp
1c00e074:	c522                	sw	s0,136(sp)
1c00e076:	c706                	sw	ra,140(sp)
1c00e078:	cc3e                	sw	a5,24(sp)
1c00e07a:	c202                	sw	zero,4(sp)
1c00e07c:	d43e                	sw	a5,40(sp)
1c00e07e:	00010a23          	sb	zero,20(sp)
1c00e082:	fd3ff0ef          	jal	ra,1c00e054 <pi_uart_write_async>
1c00e086:	547d                	li	s0,-1
1c00e088:	e509                	bnez	a0,1c00e092 <pi_uart_write+0x24>
1c00e08a:	842a                	mv	s0,a0
1c00e08c:	0848                	addi	a0,sp,20
1c00e08e:	e27ff0ef          	jal	ra,1c00deb4 <pi_task_wait_on.isra.20>
1c00e092:	8522                	mv	a0,s0
1c00e094:	40ba                	lw	ra,140(sp)
1c00e096:	442a                	lw	s0,136(sp)
1c00e098:	6149                	addi	sp,sp,144
1c00e09a:	8082                	ret

1c00e09c <__pi_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e09c:	1c00e5b7          	lui	a1,0x1c00e
{
1c00e0a0:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e0a2:	4601                	li	a2,0
1c00e0a4:	e8858593          	addi	a1,a1,-376 # 1c00de88 <__rt_uart_setfreq_before>
1c00e0a8:	4511                	li	a0,4
{
1c00e0aa:	c606                	sw	ra,12(sp)
1c00e0ac:	c422                	sw	s0,8(sp)
1c00e0ae:	c226                	sw	s1,4(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e0b0:	efcfd0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e0b4:	1c00e5b7          	lui	a1,0x1c00e
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e0b8:	84aa                	mv	s1,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e0ba:	4601                	li	a2,0
1c00e0bc:	ce258593          	addi	a1,a1,-798 # 1c00dce2 <__rt_uart_setfreq_after>
1c00e0c0:	4515                	li	a0,5


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c00e0c2:	1c011437          	lui	s0,0x1c011
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e0c6:	ee6fd0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>
    __rt_uart[i].open_count = 0;
1c00e0ca:	87c40413          	addi	s0,s0,-1924 # 1c01087c <__rt_uart>
1c00e0ce:	85a2                	mv	a1,s0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e0d0:	8cc9                	or	s1,s1,a0
    __rt_uart[i].open_count = 0;
1c00e0d2:	0205a42b          	p.sw	zero,40(a1!)
    __rt_udma_channel_init(UDMA_EVENT_ID(ARCHI_UDMA_UART_ID(i))+1, &__rt_uart[i].tx_channel);
1c00e0d6:	4525                	li	a0,9
1c00e0d8:	2205                	jal	1c00e1f8 <__rt_udma_channel_init>
    __rt_udma_channel_init(UDMA_EVENT_ID(ARCHI_UDMA_UART_ID(i)), &__rt_uart[i].rx_channel);
1c00e0da:	01840593          	addi	a1,s0,24
1c00e0de:	4521                	li	a0,8
1c00e0e0:	2a21                	jal	1c00e1f8 <__rt_udma_channel_init>
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c00e0e2:	c08d                	beqz	s1,1c00e104 <__pi_uart_init+0x68>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00e0e4:	01402673          	csrr	a2,uhartid
1c00e0e8:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00e0ec:	40565593          	srai	a1,a2,0x5
1c00e0f0:	f265b5b3          	p.bclr	a1,a1,25,6
1c00e0f4:	f4563633          	p.bclr	a2,a2,26,5
1c00e0f8:	49c50513          	addi	a0,a0,1180 # 1c01049c <__hyper_pad+0x54>
1c00e0fc:	3c7000ef          	jal	ra,1c00ecc2 <printf>
1c00e100:	347000ef          	jal	ra,1c00ec46 <abort>
}
1c00e104:	40b2                	lw	ra,12(sp)
1c00e106:	4422                	lw	s0,8(sp)
1c00e108:	4492                	lw	s1,4(sp)
1c00e10a:	0141                	addi	sp,sp,16
1c00e10c:	8082                	ret

1c00e10e <rt_padframe_set>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00e10e:	300476f3          	csrrci	a3,mstatus,8

void rt_padframe_set(rt_padframe_profile_t *profile)
{
  int irq = rt_irq_disable();

  unsigned int *config = profile->config;
1c00e112:	4158                	lw	a4,4(a0)
1c00e114:	1a1047b7          	lui	a5,0x1a104
1c00e118:	14078613          	addi	a2,a5,320 # 1a104140 <__l1_end+0xa1040fc>

  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, config[i]);
1c00e11c:	430c                	lw	a1,0(a4)
1c00e11e:	c20c                	sw	a1,0(a2)
1c00e120:	434c                	lw	a1,4(a4)
1c00e122:	14478613          	addi	a2,a5,324
1c00e126:	14878793          	addi	a5,a5,328
1c00e12a:	c20c                	sw	a1,0(a2)
1c00e12c:	4718                	lw	a4,8(a4)
1c00e12e:	c398                	sw	a4,0(a5)
  __builtin_pulp_spr_write(reg, val);
1c00e130:	30069073          	csrw	mstatus,a3
  }

  rt_irq_restore(irq);
}
1c00e134:	8082                	ret

1c00e136 <__rt_padframe_init>:
  rt_padframe_set(&__rt_padframe_profiles[0]);
1c00e136:	1c010537          	lui	a0,0x1c010
1c00e13a:	6c850513          	addi	a0,a0,1736 # 1c0106c8 <__rt_padframe_profiles>
1c00e13e:	fd1ff06f          	j	1c00e10e <rt_padframe_set>

1c00e142 <rt_extern_alloc_init>:
  }
  printf("=============================================\n");
}

int rt_extern_alloc_init(rt_extern_alloc_t *a, void *addr, int size)
{
1c00e142:	1101                	addi	sp,sp,-32
1c00e144:	c84a                	sw	s2,16(sp)
1c00e146:	ce06                	sw	ra,28(sp)
1c00e148:	cc22                	sw	s0,24(sp)
1c00e14a:	ca26                	sw	s1,20(sp)
1c00e14c:	892a                	mv	s2,a0
  if (size)
1c00e14e:	c229                	beqz	a2,1c00e190 <rt_extern_alloc_init+0x4e>
  {
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00e150:	00758493          	addi	s1,a1,7
1c00e154:	842e                	mv	s0,a1
  return (rt_alloc_chunk_extern_t *)rt_alloc(RT_ALLOC_FC_DATA, sizeof(rt_alloc_chunk_extern_t));
1c00e156:	4505                	li	a0,1
1c00e158:	45b1                	li	a1,12
1c00e15a:	c632                	sw	a2,12(sp)
1c00e15c:	cddfd0ef          	jal	ra,1c00be38 <rt_alloc>
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00e160:	c404b4b3          	p.bclr	s1,s1,2,0
    rt_alloc_chunk_extern_t *chunk = __rt_alloc_chunk();
    if (chunk == NULL) return -1;
1c00e164:	4632                	lw	a2,12(sp)
1c00e166:	c905                	beqz	a0,1c00e196 <rt_extern_alloc_init+0x54>
    size = size - (start_addr - (unsigned int)addr);
1c00e168:	9432                	add	s0,s0,a2
1c00e16a:	8c05                	sub	s0,s0,s1
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c00e16c:	4601                	li	a2,0
    if (size > 0) {
1c00e16e:	00805a63          	blez	s0,1c00e182 <rt_extern_alloc_init+0x40>
      a->first_free = chunk;
1c00e172:	00a92023          	sw	a0,0(s2)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c00e176:	c4043433          	p.bclr	s0,s0,2,0
1c00e17a:	c100                	sw	s0,0(a0)
      chunk->next = NULL;
1c00e17c:	00052223          	sw	zero,4(a0)
      chunk->addr = start_addr;
1c00e180:	c504                	sw	s1,8(a0)
}
1c00e182:	40f2                	lw	ra,28(sp)
1c00e184:	4462                	lw	s0,24(sp)
1c00e186:	44d2                	lw	s1,20(sp)
1c00e188:	4942                	lw	s2,16(sp)
1c00e18a:	8532                	mv	a0,a2
1c00e18c:	6105                	addi	sp,sp,32
1c00e18e:	8082                	ret
    a->first_free = NULL;
1c00e190:	00052023          	sw	zero,0(a0)
1c00e194:	b7fd                	j	1c00e182 <rt_extern_alloc_init+0x40>
    if (chunk == NULL) return -1;
1c00e196:	567d                	li	a2,-1
1c00e198:	b7ed                	j	1c00e182 <rt_extern_alloc_init+0x40>

1c00e19a <rt_extern_alloc_deinit>:
  rt_free(RT_ALLOC_FC_DATA, (void *)pt, sizeof(rt_alloc_chunk_extern_t));
1c00e19a:	410c                	lw	a1,0(a0)
1c00e19c:	4631                	li	a2,12
1c00e19e:	4505                	li	a0,1
1c00e1a0:	cc9fd06f          	j	1c00be68 <rt_free>

1c00e1a4 <__rt_udma_copy_enqueue>:
1c00e1a4:	4015d813          	srai	a6,a1,0x1
1c00e1a8:	081e                	slli	a6,a6,0x7
1c00e1aa:	1a1028b7          	lui	a7,0x1a102
1c00e1ae:	0592                	slli	a1,a1,0x4
1c00e1b0:	9846                	add	a6,a6,a7
1c00e1b2:	89c1                	andi	a1,a1,16
1c00e1b4:	95c2                	add	a1,a1,a6
{
  unsigned int base = hal_udma_channel_base(channel_id);

  // A UDMA channel has 2 slots, enqueue the copy to the UDMA if one of them is available, otherwise
  // put the transfer on hold.
  if (channel->pendings[0] == NULL)
1c00e1b6:	00062803          	lw	a6,0(a2)
1c00e1ba:	00081c63          	bnez	a6,1c00e1d2 <__rt_udma_copy_enqueue+0x2e>
  {
    channel->pendings[0] = task;
1c00e1be:	c208                	sw	a0,0(a2)
  ARCHI_WRITE(channelBase, UDMA_CHANNEL_SADDR_OFFSET, l2Addr);
1c00e1c0:	00d5a023          	sw	a3,0(a1)
  ARCHI_WRITE(channelBase, UDMA_CHANNEL_SIZE_OFFSET, size);
1c00e1c4:	00e5a223          	sw	a4,4(a1)
    plp_udma_enqueue(base, buffer, size, UDMA_CHANNEL_CFG_EN | cfg);
  }
  else if (channel->pendings[1] == NULL)
  {
    channel->pendings[1] = task;
    plp_udma_enqueue(base, buffer, size, UDMA_CHANNEL_CFG_EN | cfg);
1c00e1c8:	c047c7b3          	p.bset	a5,a5,0,4
  ARCHI_WRITE(channelBase, UDMA_CHANNEL_CFG_OFFSET, cfg | UDMA_CHANNEL_CFG_EN);
1c00e1cc:	00f5a423          	sw	a5,8(a1)
1c00e1d0:	8082                	ret
  else if (channel->pendings[1] == NULL)
1c00e1d2:	00462803          	lw	a6,4(a2)
1c00e1d6:	00081463          	bnez	a6,1c00e1de <__rt_udma_copy_enqueue+0x3a>
    channel->pendings[1] = task;
1c00e1da:	c248                	sw	a0,4(a2)
1c00e1dc:	b7d5                	j	1c00e1c0 <__rt_udma_copy_enqueue+0x1c>
  }
  else
  {
    task->implem.data[0] = buffer;
    task->implem.data[1] = size;
    task->implem.data[2] = cfg;
1c00e1de:	c13c                	sw	a5,64(a0)

    if (channel->waitings_first == NULL)
1c00e1e0:	461c                	lw	a5,8(a2)
    task->implem.data[0] = buffer;
1c00e1e2:	dd14                	sw	a3,56(a0)
    task->implem.data[1] = size;
1c00e1e4:	dd58                	sw	a4,60(a0)
    if (channel->waitings_first == NULL)
1c00e1e6:	e791                	bnez	a5,1c00e1f2 <__rt_udma_copy_enqueue+0x4e>
      channel->waitings_first = task;
1c00e1e8:	c608                	sw	a0,8(a2)
    else
      channel->waitings_last->implem.next = task;

    channel->waitings_last = task;
1c00e1ea:	c648                	sw	a0,12(a2)
    task->implem.next = NULL;
1c00e1ec:	00052e23          	sw	zero,28(a0)
  }
}
1c00e1f0:	8082                	ret
      channel->waitings_last->implem.next = task;
1c00e1f2:	465c                	lw	a5,12(a2)
1c00e1f4:	cfc8                	sw	a0,28(a5)
1c00e1f6:	bfd5                	j	1c00e1ea <__rt_udma_copy_enqueue+0x46>

1c00e1f8 <__rt_udma_channel_init>:



void __rt_udma_channel_init(int channel_id, rt_udma_channel_t *channel)
{
  channel->pendings[0] = NULL;
1c00e1f8:	0005a023          	sw	zero,0(a1)
  channel->pendings[1] = NULL;
1c00e1fc:	0005a223          	sw	zero,4(a1)
  channel->waitings_first = NULL;
1c00e200:	0005a423          	sw	zero,8(a1)
  __rt_udma_channels[channel_id] = channel;
1c00e204:	050a                	slli	a0,a0,0x2
1c00e206:	35400793          	li	a5,852
1c00e20a:	00b7e523          	p.sw	a1,a0(a5)
}
1c00e20e:	8082                	ret

1c00e210 <__rt_udma_channel_reg_data>:

#ifndef __ZEPHYR__

void __rt_udma_channel_reg_data(int channel_id, void *data)
{
  __rt_udma_channels[channel_id] = data;
1c00e210:	050a                	slli	a0,a0,0x2
1c00e212:	35400793          	li	a5,852
1c00e216:	00b7e523          	p.sw	a1,a0(a5)
}
1c00e21a:	8082                	ret

1c00e21c <pi_pwm_conf_init>:
    {
        th_timer = 0;
    }
    else if (duty_cycle != 100)
    {
        th_timer = (th_hi * (100 - duty_cycle)) / 100;
1c00e21c:	479d                	li	a5,7
1c00e21e:	c11c                	sw	a5,0(a0)
1c00e220:	00050223          	sb	zero,4(a0)
1c00e224:	000522a3          	sw	zero,5(a0)
1c00e228:	8082                	ret

1c00e22a <pi_pwm_open>:
1c00e22a:	30047873          	csrrci	a6,mstatus,8
1c00e22e:	414c                	lw	a1,4(a0)
1c00e230:	1c0116b7          	lui	a3,0x1c011
1c00e234:	ae868693          	addi	a3,a3,-1304 # 1c010ae8 <__pos_pwm>
1c00e238:	0045c783          	lbu	a5,4(a1)
1c00e23c:	0027d613          	srli	a2,a5,0x2
1c00e240:	fa27b7b3          	p.bclr	a5,a5,29,2
1c00e244:	1007d8b3          	p.exthz	a7,a5
1c00e248:	00289713          	slli	a4,a7,0x2
1c00e24c:	9746                	add	a4,a4,a7
1c00e24e:	070a                	slli	a4,a4,0x2
1c00e250:	05800893          	li	a7,88
1c00e254:	43160733          	p.mac	a4,a2,a7
1c00e258:	0711                	addi	a4,a4,4
1c00e25a:	9736                	add	a4,a4,a3
1c00e25c:	c518                	sw	a4,8(a0)
1c00e25e:	05800713          	li	a4,88
1c00e262:	02e60633          	mul	a2,a2,a4
1c00e266:	4751                	li	a4,20
1c00e268:	8532                	mv	a0,a2
1c00e26a:	42e78533          	p.mac	a0,a5,a4
1c00e26e:	00a68733          	add	a4,a3,a0
1c00e272:	4b08                	lw	a0,16(a4)
1c00e274:	00150893          	addi	a7,a0,1
1c00e278:	01172823          	sw	a7,16(a4)
1c00e27c:	ed05                	bnez	a0,1c00e2b4 <pi_pwm_open+0x8a>
1c00e27e:	96b2                	add	a3,a3,a2
1c00e280:	4af0                	lw	a2,84(a3)
1c00e282:	0605                	addi	a2,a2,1
1c00e284:	caf0                	sw	a2,84(a3)
1c00e286:	1a105637          	lui	a2,0x1a105
1c00e28a:	10462503          	lw	a0,260(a2) # 1a105104 <__l1_end+0xa1050c0>
1c00e28e:	4685                	li	a3,1
1c00e290:	00f696b3          	sll	a3,a3,a5
1c00e294:	8ec9                	or	a3,a3,a0
1c00e296:	10d62223          	sw	a3,260(a2)
1c00e29a:	006846b7          	lui	a3,0x684
1c00e29e:	14068693          	addi	a3,a3,320 # 684140 <__L2+0x604140>
1c00e2a2:	97b6                	add	a5,a5,a3
1c00e2a4:	0055a683          	lw	a3,5(a1)
1c00e2a8:	079a                	slli	a5,a5,0x6
1c00e2aa:	cb5c                	sw	a5,20(a4)
1c00e2ac:	c754                	sw	a3,12(a4)
1c00e2ae:	6705                	lui	a4,0x1
1c00e2b0:	00e7a223          	sw	a4,4(a5)
1c00e2b4:	30081073          	csrw	mstatus,a6
1c00e2b8:	4501                	li	a0,0
1c00e2ba:	8082                	ret

1c00e2bc <pi_pwm_ioctl>:
1c00e2bc:	451c                	lw	a5,8(a0)
1c00e2be:	0025aa63          	p.beqimm	a1,2,1c00e2d2 <pi_pwm_ioctl+0x16>
1c00e2c2:	0035ac63          	p.beqimm	a1,3,1c00e2da <pi_pwm_ioctl+0x1e>
1c00e2c6:	e19d                	bnez	a1,1c00e2ec <pi_pwm_ioctl+0x30>
1c00e2c8:	4b9c                	lw	a5,16(a5)
1c00e2ca:	00c7a023          	sw	a2,0(a5)
1c00e2ce:	4501                	li	a0,0
1c00e2d0:	8082                	ret
1c00e2d2:	4b9c                	lw	a5,16(a5)
1c00e2d4:	00c7a423          	sw	a2,8(a5)
1c00e2d8:	bfdd                	j	1c00e2ce <pi_pwm_ioctl+0x12>
1c00e2da:	4b94                	lw	a3,16(a5)
1c00e2dc:	479c                	lw	a5,8(a5)
1c00e2de:	6741                	lui	a4,0x10
1c00e2e0:	177d                	addi	a4,a4,-1
1c00e2e2:	078d                	addi	a5,a5,3
1c00e2e4:	078a                	slli	a5,a5,0x2
1c00e2e6:	00e6e7a3          	p.sw	a4,a5(a3)
1c00e2ea:	b7d5                	j	1c00e2ce <pi_pwm_ioctl+0x12>
1c00e2ec:	557d                	li	a0,-1
1c00e2ee:	8082                	ret

1c00e2f0 <__pos_pwm_init>:
static void __attribute__((constructor)) __pos_pwm_init()
{
    for (int i=0; i<ARCHI_PWM_NB; i++)
    {
        pos_pwm_t *pwm = &__pos_pwm[i];
        pwm->open_count = 0;
1c00e2f0:	1c011737          	lui	a4,0x1c011
1c00e2f4:	ae870793          	addi	a5,a4,-1304 # 1c010ae8 <__pos_pwm>
1c00e2f8:	0407aa23          	sw	zero,84(a5)
        pwm->id = i;

        for (int j=0; j<ARCHI_PWM_NB_TIMERS; j++)
1c00e2fc:	4601                	li	a2,0
        pwm->id = i;
1c00e2fe:	0007a22b          	p.sw	zero,4(a5!)
1c00e302:	ae870713          	addi	a4,a4,-1304
1c00e306:	0043d0fb          	lp.setupi	x1,4,1c00e314 <__pos_pwm_init+0x24>
        {
            pos_pwm_timer_t *timer = &pwm->timers[j];
            timer->open_count = 0;
            timer->pwm = pwm;
            timer->id = j;
1c00e30a:	c3d0                	sw	a2,4(a5)
            timer->open_count = 0;
1c00e30c:	0007a623          	sw	zero,12(a5)
            timer->pwm = pwm;
1c00e310:	c398                	sw	a4,0(a5)
        for (int j=0; j<ARCHI_PWM_NB_TIMERS; j++)
1c00e312:	0605                	addi	a2,a2,1
1c00e314:	07d1                	addi	a5,a5,20
        }
    }
}
1c00e316:	8082                	ret

1c00e318 <__pi_gpio_handler>:
  pin = (pin & PI_GPIO_NUM_MASK);
  uint32_t mask = (1 << pin);

  gpio->event_task[pin] = NULL;
  return 0;
}
1c00e318:	1141                	addi	sp,sp,-16
1c00e31a:	1a1017b7          	lui	a5,0x1a101
1c00e31e:	1c0116b7          	lui	a3,0x1c011
1c00e322:	c422                	sw	s0,8(sp)
1c00e324:	4f80                	lw	s0,24(a5)
1c00e326:	b4068793          	addi	a5,a3,-1216 # 1c010b40 <__rt_gpio>
1c00e32a:	c226                	sw	s1,4(sp)
1c00e32c:	4bc4                	lw	s1,20(a5)
1c00e32e:	c606                	sw	ra,12(sp)
1c00e330:	c780                	sw	s0,8(a5)
1c00e332:	cc91                	beqz	s1,1c00e34e <__pi_gpio_handler+0x36>
1c00e334:	409c                	lw	a5,0(s1)
1c00e336:	8fe1                	and	a5,a5,s0
1c00e338:	c781                	beqz	a5,1c00e340 <__pi_gpio_handler+0x28>
1c00e33a:	40dc                	lw	a5,4(s1)
1c00e33c:	4488                	lw	a0,8(s1)
1c00e33e:	9782                	jalr	a5
1c00e340:	44c4                	lw	s1,12(s1)
1c00e342:	f8ed                	bnez	s1,1c00e334 <__pi_gpio_handler+0x1c>
1c00e344:	40b2                	lw	ra,12(sp)
1c00e346:	4422                	lw	s0,8(sp)
1c00e348:	4492                	lw	s1,4(sp)
1c00e34a:	0141                	addi	sp,sp,16
1c00e34c:	8082                	ret
1c00e34e:	b4068693          	addi	a3,a3,-1216
1c00e352:	46dc                	lw	a5,12(a3)
1c00e354:	4701                	li	a4,0
1c00e356:	8fe1                	and	a5,a5,s0
1c00e358:	01c00513          	li	a0,28
1c00e35c:	d7e5                	beqz	a5,1c00e344 <__pi_gpio_handler+0x2c>
1c00e35e:	fc17b633          	p.bclr	a2,a5,30,1
1c00e362:	c615                	beqz	a2,1c00e38e <__pi_gpio_handler+0x76>
1c00e364:	00470613          	addi	a2,a4,4
1c00e368:	060a                	slli	a2,a2,0x2
1c00e36a:	9636                	add	a2,a2,a3
1c00e36c:	4610                	lw	a2,8(a2)
1c00e36e:	c205                	beqz	a2,1c00e38e <__pi_gpio_handler+0x76>
1c00e370:	30047873          	csrrci	a6,mstatus,8
1c00e374:	01c02883          	lw	a7,28(zero) # 1c <__rt_sched>
1c00e378:	00062023          	sw	zero,0(a2)
1c00e37c:	00088e63          	beqz	a7,1c00e398 <__pi_gpio_handler+0x80>
1c00e380:	00452883          	lw	a7,4(a0)
1c00e384:	00c8a023          	sw	a2,0(a7) # 1a102000 <__l1_end+0xa101fbc>
1c00e388:	c150                	sw	a2,4(a0)
1c00e38a:	30081073          	csrw	mstatus,a6
1c00e38e:	0705                	addi	a4,a4,1
1c00e390:	8385                	srli	a5,a5,0x1
1c00e392:	0ff77713          	andi	a4,a4,255
1c00e396:	b7d9                	j	1c00e35c <__pi_gpio_handler+0x44>
1c00e398:	00c02e23          	sw	a2,28(zero) # 1c <__rt_sched>
1c00e39c:	b7f5                	j	1c00e388 <__pi_gpio_handler+0x70>

1c00e39e <pi_gpio_pin_read>:
1c00e39e:	4508                	lw	a0,8(a0)
1c00e3a0:	0ff5f693          	andi	a3,a1,255
1c00e3a4:	4785                	li	a5,1
1c00e3a6:	4558                	lw	a4,12(a0)
1c00e3a8:	00d797b3          	sll	a5,a5,a3
1c00e3ac:	8f7d                	and	a4,a4,a5
1c00e3ae:	00f70763          	beq	a4,a5,1c00e3bc <pi_gpio_pin_read+0x1e>
1c00e3b2:	490c                	lw	a1,16(a0)
1c00e3b4:	5555                	li	a0,-11
1c00e3b6:	8dfd                	and	a1,a1,a5
1c00e3b8:	00f59c63          	bne	a1,a5,1c00e3d0 <pi_gpio_pin_read+0x32>
1c00e3bc:	1a1017b7          	lui	a5,0x1a101
1c00e3c0:	cb09                	beqz	a4,1c00e3d2 <pi_gpio_pin_read+0x34>
1c00e3c2:	43cc                	lw	a1,4(a5)
1c00e3c4:	00d5d5b3          	srl	a1,a1,a3
1c00e3c8:	fc15b5b3          	p.bclr	a1,a1,30,1
1c00e3cc:	c20c                	sw	a1,0(a2)
1c00e3ce:	4501                	li	a0,0
1c00e3d0:	8082                	ret
1c00e3d2:	438c                	lw	a1,0(a5)
1c00e3d4:	bfc5                	j	1c00e3c4 <pi_gpio_pin_read+0x26>

1c00e3d6 <pi_gpio_mask_configure>:
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR, value);
}

static inline unsigned int hal_gpio_paddir_get()
{
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR);
1c00e3d6:	1a1017b7          	lui	a5,0x1a101
1c00e3da:	439c                	lw	a5,0(a5)
1c00e3dc:	fff5c713          	not	a4,a1

int pi_gpio_mask_configure(struct pi_device *device, uint32_t mask, pi_gpio_flags_e flags)
{
  pi_gpio_t *gpio = (pi_gpio_t *) device->data;
  int is_out = flags & PI_GPIO_OUTPUT;
1c00e3e0:	8a11                	andi	a2,a2,4
  pi_gpio_t *gpio = (pi_gpio_t *) device->data;
1c00e3e2:	4514                	lw	a3,8(a0)
  {
    current |= mask;
  }
  else
  {
    current &= ~mask;
1c00e3e4:	00f77533          	and	a0,a4,a5
  if (is_out)
1c00e3e8:	c219                	beqz	a2,1c00e3ee <pi_gpio_mask_configure+0x18>
    current |= mask;
1c00e3ea:	00f5e533          	or	a0,a1,a5
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR, value);
1c00e3ee:	1a1017b7          	lui	a5,0x1a101
1c00e3f2:	c388                	sw	a0,0(a5)
1c00e3f4:	0106a803          	lw	a6,16(a3)
1c00e3f8:	46c8                	lw	a0,12(a3)
  hal_gpio_set_dir(mask, is_out);

  if (is_out)
1c00e3fa:	ce01                	beqz	a2,1c00e412 <pi_gpio_mask_configure+0x3c>
  {
    gpio->input_mask &= ~mask;
    gpio->output_mask |= mask;
1c00e3fc:	0105e5b3          	or	a1,a1,a6
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN);
1c00e400:	07f1                	addi	a5,a5,28
1c00e402:	ca8c                	sw	a1,16(a3)
1c00e404:	438c                	lw	a1,0(a5)
    gpio->input_mask &= ~mask;
1c00e406:	8d79                	and	a0,a0,a4
1c00e408:	c6c8                	sw	a0,12(a3)
    hal_gpio_en_set(hal_gpio_en_get() & ~mask);
1c00e40a:	8f6d                	and	a4,a4,a1
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN, value);
1c00e40c:	c398                	sw	a4,0(a5)
    gpio->output_mask &= ~mask;
    hal_gpio_en_set(hal_gpio_en_get() | mask);
  }

  return 0;
}
1c00e40e:	4501                	li	a0,0
1c00e410:	8082                	ret
    gpio->output_mask &= ~mask;
1c00e412:	01077733          	and	a4,a4,a6
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN);
1c00e416:	07f1                	addi	a5,a5,28
1c00e418:	ca98                	sw	a4,16(a3)
1c00e41a:	4398                	lw	a4,0(a5)
    gpio->input_mask |= mask;
1c00e41c:	8d4d                	or	a0,a0,a1
1c00e41e:	c6c8                	sw	a0,12(a3)
    hal_gpio_en_set(hal_gpio_en_get() | mask);
1c00e420:	8dd9                	or	a1,a1,a4
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN, value);
1c00e422:	c38c                	sw	a1,0(a5)
1c00e424:	b7ed                	j	1c00e40e <pi_gpio_mask_configure+0x38>

1c00e426 <pi_gpio_pin_configure>:
{
1c00e426:	1101                	addi	sp,sp,-32
1c00e428:	cc22                	sw	s0,24(sp)
1c00e42a:	ca26                	sw	s1,20(sp)
1c00e42c:	ce06                	sw	ra,28(sp)
1c00e42e:	84aa                	mv	s1,a0
1c00e430:	842e                	mv	s0,a1
  if (pin & PI_GPIO_IS_GPIO_MASK)
1c00e432:	0005db63          	bgez	a1,1c00e448 <pi_gpio_pin_configure+0x22>
    pi_pad_e pad = ((pin & PI_GPIO_PAD_MASK) >> PI_GPIO_PAD_SHIFT);
1c00e436:	4085d513          	srai	a0,a1,0x8
    pi_pad_set_function(pad, PI_PAD_FUNC1);
1c00e43a:	0ff57513          	andi	a0,a0,255
1c00e43e:	4585                	li	a1,1
1c00e440:	c632                	sw	a2,12(sp)
1c00e442:	a5dfe0ef          	jal	ra,1c00ce9e <pi_pad_set_function>
1c00e446:	4632                	lw	a2,12(sp)
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c00e448:	4585                	li	a1,1
1c00e44a:	008595b3          	sll	a1,a1,s0
}
1c00e44e:	4462                	lw	s0,24(sp)
1c00e450:	40f2                	lw	ra,28(sp)
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c00e452:	8526                	mv	a0,s1
}
1c00e454:	44d2                	lw	s1,20(sp)
1c00e456:	6105                	addi	sp,sp,32
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c00e458:	f7fff06f          	j	1c00e3d6 <pi_gpio_mask_configure>

1c00e45c <__rt_i2s_resume>:
  conf->pdm = 1;
  conf->dual = 0;
  conf->width = 16;
  conf->id = -1;
  conf->flags = 0;
}
1c00e45c:	1c0117b7          	lui	a5,0x1c011
1c00e460:	4d18                	lw	a4,24(a0)
1c00e462:	cd07a783          	lw	a5,-816(a5) # 1c010cd0 <__rt_freq_domains>
1c00e466:	068416b7          	lui	a3,0x6841
1c00e46a:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00e46e:	02e7c7b3          	div	a5,a5,a4
1c00e472:	02954703          	lbu	a4,41(a0)
1c00e476:	177d                	addi	a4,a4,-1
1c00e478:	c0874733          	p.bset	a4,a4,0,8
1c00e47c:	17fd                	addi	a5,a5,-1
1c00e47e:	8785                	srai	a5,a5,0x1
1c00e480:	07c2                	slli	a5,a5,0x10
1c00e482:	8fd9                	or	a5,a5,a4
1c00e484:	02554703          	lbu	a4,37(a0)
1c00e488:	9736                	add	a4,a4,a3
1c00e48a:	070a                	slli	a4,a4,0x2
1c00e48c:	c31c                	sw	a5,0(a4)
1c00e48e:	8082                	ret

1c00e490 <__rt_i2s_setfreq_after>:
1c00e490:	1141                	addi	sp,sp,-16
1c00e492:	1c0117b7          	lui	a5,0x1c011
1c00e496:	c422                	sw	s0,8(sp)
1c00e498:	c847a403          	lw	s0,-892(a5) # 1c010c84 <__rt_i2s_first>
1c00e49c:	c606                	sw	ra,12(sp)
1c00e49e:	e411                	bnez	s0,1c00e4aa <__rt_i2s_setfreq_after+0x1a>
1c00e4a0:	40b2                	lw	ra,12(sp)
1c00e4a2:	4422                	lw	s0,8(sp)
1c00e4a4:	4501                	li	a0,0
1c00e4a6:	0141                	addi	sp,sp,16
1c00e4a8:	8082                	ret
1c00e4aa:	02844783          	lbu	a5,40(s0)
1c00e4ae:	c781                	beqz	a5,1c00e4b6 <__rt_i2s_setfreq_after+0x26>
1c00e4b0:	8522                	mv	a0,s0
1c00e4b2:	fabff0ef          	jal	ra,1c00e45c <__rt_i2s_resume>
1c00e4b6:	4c40                	lw	s0,28(s0)
1c00e4b8:	b7dd                	j	1c00e49e <__rt_i2s_setfreq_after+0xe>

1c00e4ba <__rt_i2s_setfreq_before>:
1c00e4ba:	1c0117b7          	lui	a5,0x1c011
1c00e4be:	c847a783          	lw	a5,-892(a5) # 1c010c84 <__rt_i2s_first>
1c00e4c2:	068416b7          	lui	a3,0x6841
1c00e4c6:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00e4ca:	e399                	bnez	a5,1c00e4d0 <__rt_i2s_setfreq_before+0x16>
1c00e4cc:	4501                	li	a0,0
1c00e4ce:	8082                	ret
1c00e4d0:	0287c703          	lbu	a4,40(a5)
1c00e4d4:	c719                	beqz	a4,1c00e4e2 <__rt_i2s_setfreq_before+0x28>
1c00e4d6:	0257c703          	lbu	a4,37(a5)
1c00e4da:	9736                	add	a4,a4,a3
1c00e4dc:	070a                	slli	a4,a4,0x2
1c00e4de:	00072023          	sw	zero,0(a4)
1c00e4e2:	4fdc                	lw	a5,28(a5)
1c00e4e4:	b7dd                	j	1c00e4ca <__rt_i2s_setfreq_before+0x10>

1c00e4e6 <__rt_i2s_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that the I2S channels are stopped and resumed
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00e4e6:	1c00e5b7          	lui	a1,0x1c00e
{
1c00e4ea:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00e4ec:	4601                	li	a2,0
1c00e4ee:	4ba58593          	addi	a1,a1,1210 # 1c00e4ba <__rt_i2s_setfreq_before>
1c00e4f2:	4511                	li	a0,4
{
1c00e4f4:	c606                	sw	ra,12(sp)
1c00e4f6:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00e4f8:	ab4fd0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00e4fc:	1c00e5b7          	lui	a1,0x1c00e
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00e500:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00e502:	4601                	li	a2,0
1c00e504:	49058593          	addi	a1,a1,1168 # 1c00e490 <__rt_i2s_setfreq_after>
1c00e508:	4515                	li	a0,5
1c00e50a:	aa2fd0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>
1c00e50e:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize i2s driver\n");
1c00e510:	c10d                	beqz	a0,1c00e532 <__rt_i2s_init+0x4c>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00e512:	01402673          	csrr	a2,uhartid
1c00e516:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00e51a:	40565593          	srai	a1,a2,0x5
1c00e51e:	f265b5b3          	p.bclr	a1,a1,25,6
1c00e522:	f4563633          	p.bclr	a2,a2,26,5
1c00e526:	51c50513          	addi	a0,a0,1308 # 1c01051c <__hyper_pad+0xd4>
1c00e52a:	798000ef          	jal	ra,1c00ecc2 <printf>
1c00e52e:	718000ef          	jal	ra,1c00ec46 <abort>
}
1c00e532:	40b2                	lw	ra,12(sp)
1c00e534:	4422                	lw	s0,8(sp)
1c00e536:	0141                	addi	sp,sp,16
1c00e538:	8082                	ret

1c00e53a <__rt_himax_init>:
    .capture   = &__rt_himax_capture
};

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_himax_init()
{
  camera_isAwaked = 0;
1c00e53a:	1b0017b7          	lui	a5,0x1b001
1c00e53e:	c0078423          	sb	zero,-1016(a5) # 1b000c08 <camera_isAwaked>
}
1c00e542:	8082                	ret

1c00e544 <__rt_i2c_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_i2c_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_I2C; i++)
  {
    __rt_i2c[i].open_count = 0;
1c00e544:	1c0117b7          	lui	a5,0x1c011
1c00e548:	8c078793          	addi	a5,a5,-1856 # 1c0108c0 <__rt_i2c>
1c00e54c:	00078223          	sb	zero,4(a5)
1c00e550:	00078a23          	sb	zero,20(a5)
  }
}
1c00e554:	8082                	ret

1c00e556 <__rt_rtc_init>:
}


RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_rtc_init()
{
  __rtc_handler = NULL;
1c00e556:	3a800793          	li	a5,936
1c00e55a:	0207ac23          	sw	zero,56(a5)
  dev_rtc.open_count = 0;
1c00e55e:	02078823          	sb	zero,48(a5)
  __rt_rtc_init_done = 0;
1c00e562:	0207aa23          	sw	zero,52(a5)
}
1c00e566:	8082                	ret

1c00e568 <__rt_spim_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_spim_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim_open_count[i] = 0;
1c00e568:	1c0117b7          	lui	a5,0x1c011
1c00e56c:	c8878793          	addi	a5,a5,-888 # 1c010c88 <__rt_spim_open_count>
1c00e570:	0007a023          	sw	zero,0(a5)
1c00e574:	0007a223          	sw	zero,4(a5)
  }
}
1c00e578:	8082                	ret

1c00e57a <__rt_io_end_of_flush>:
  if (rt_iodev() == RT_IODEV_UART)
  {
    __rt_io_start(NULL);
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
1c00e57a:	1c0117b7          	lui	a5,0x1c011
1c00e57e:	c807aa23          	sw	zero,-876(a5) # 1c010c94 <__rt_io_pending_flush>
1c00e582:	00052c23          	sw	zero,24(a0)
1c00e586:	8082                	ret

1c00e588 <__rt_io_uart_wait_req>:
1c00e588:	1141                	addi	sp,sp,-16
1c00e58a:	c226                	sw	s1,4(sp)
1c00e58c:	84aa                	mv	s1,a0
1c00e58e:	c606                	sw	ra,12(sp)
1c00e590:	c422                	sw	s0,8(sp)
1c00e592:	c04a                	sw	s2,0(sp)
1c00e594:	30047973          	csrrci	s2,mstatus,8
1c00e598:	1c011437          	lui	s0,0x1c011
1c00e59c:	c9040413          	addi	s0,s0,-880 # 1c010c90 <__rt_io_event_current>
1c00e5a0:	4008                	lw	a0,0(s0)
1c00e5a2:	c509                	beqz	a0,1c00e5ac <__rt_io_uart_wait_req+0x24>
1c00e5a4:	fa8fd0ef          	jal	ra,1c00bd4c <rt_event_wait>
1c00e5a8:	00042023          	sw	zero,0(s0)
1c00e5ac:	4785                	li	a5,1
1c00e5ae:	08f48023          	sb	a5,128(s1)
1c00e5b2:	0814c783          	lbu	a5,129(s1)
1c00e5b6:	00201737          	lui	a4,0x201
1c00e5ba:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00e5be:	04078793          	addi	a5,a5,64
1c00e5c2:	07da                	slli	a5,a5,0x16
1c00e5c4:	0007e723          	p.sw	zero,a4(a5)
1c00e5c8:	30091073          	csrw	mstatus,s2
1c00e5cc:	40b2                	lw	ra,12(sp)
1c00e5ce:	4422                	lw	s0,8(sp)
1c00e5d0:	4492                	lw	s1,4(sp)
1c00e5d2:	4902                	lw	s2,0(sp)
1c00e5d4:	0141                	addi	sp,sp,16
1c00e5d6:	8082                	ret

1c00e5d8 <__rt_do_putc_host>:
1c00e5d8:	1c011737          	lui	a4,0x1c011
1c00e5dc:	c9870793          	addi	a5,a4,-872 # 1c010c98 <__rt_putc_host_buffer_index>
1c00e5e0:	4390                	lw	a2,0(a5)
1c00e5e2:	c9870713          	addi	a4,a4,-872
1c00e5e6:	00160693          	addi	a3,a2,1
1c00e5ea:	c394                	sw	a3,0(a5)
1c00e5ec:	1c0117b7          	lui	a5,0x1c011
1c00e5f0:	8e078593          	addi	a1,a5,-1824 # 1c0108e0 <__rt_putc_host_buffer>
1c00e5f4:	00a5c623          	p.sb	a0,a2(a1)
1c00e5f8:	07f00593          	li	a1,127
1c00e5fc:	8e078613          	addi	a2,a5,-1824
1c00e600:	00b68463          	beq	a3,a1,1c00e608 <__rt_do_putc_host+0x30>
1c00e604:	00a53a63          	p.bneimm	a0,10,1c00e618 <__rt_do_putc_host+0x40>
1c00e608:	8e078513          	addi	a0,a5,-1824
1c00e60c:	000646a3          	p.sb	zero,a3(a2)
1c00e610:	00072023          	sw	zero,0(a4)
1c00e614:	d35fc06f          	j	1c00b348 <semihost_write0>
1c00e618:	8082                	ret

1c00e61a <__rt_io_start>:
1c00e61a:	1101                	addi	sp,sp,-32
1c00e61c:	0028                	addi	a0,sp,8
1c00e61e:	ce06                	sw	ra,28(sp)
1c00e620:	cc22                	sw	s0,24(sp)
1c00e622:	3ee010ef          	jal	ra,1c00fa10 <rt_uart_conf_init>
1c00e626:	4585                	li	a1,1
1c00e628:	4501                	li	a0,0
1c00e62a:	dbcfd0ef          	jal	ra,1c00bbe6 <rt_event_alloc>
1c00e62e:	547d                	li	s0,-1
1c00e630:	ed0d                	bnez	a0,1c00e66a <__rt_io_start+0x50>
1c00e632:	1c0107b7          	lui	a5,0x1c010
1c00e636:	7ac7a783          	lw	a5,1964(a5) # 1c0107ac <__rt_iodev_uart_baudrate>
1c00e63a:	842a                	mv	s0,a0
1c00e63c:	1c011537          	lui	a0,0x1c011
1c00e640:	01c00593          	li	a1,28
1c00e644:	bd850513          	addi	a0,a0,-1064 # 1c010bd8 <__rt_io_event>
1c00e648:	c43e                	sw	a5,8(sp)
1c00e64a:	d5cfd0ef          	jal	ra,1c00bba6 <__rt_event_init>
1c00e64e:	1c0117b7          	lui	a5,0x1c011
1c00e652:	c6c7a503          	lw	a0,-916(a5) # 1c010c6c <__rt_iodev_uart_channel>
1c00e656:	4681                	li	a3,0
1c00e658:	4601                	li	a2,0
1c00e65a:	002c                	addi	a1,sp,8
1c00e65c:	0511                	addi	a0,a0,4
1c00e65e:	3c2010ef          	jal	ra,1c00fa20 <__rt_uart_open>
1c00e662:	1c0117b7          	lui	a5,0x1c011
1c00e666:	c8a7ae23          	sw	a0,-868(a5) # 1c010c9c <_rt_io_uart>
1c00e66a:	8522                	mv	a0,s0
1c00e66c:	40f2                	lw	ra,28(sp)
1c00e66e:	4462                	lw	s0,24(sp)
1c00e670:	6105                	addi	sp,sp,32
1c00e672:	8082                	ret

1c00e674 <rt_event_execute.isra.4.constprop.12>:
1c00e674:	1141                	addi	sp,sp,-16
1c00e676:	c606                	sw	ra,12(sp)
1c00e678:	c422                	sw	s0,8(sp)
1c00e67a:	30047473          	csrrci	s0,mstatus,8
1c00e67e:	4585                	li	a1,1
1c00e680:	01c00513          	li	a0,28
1c00e684:	e38fd0ef          	jal	ra,1c00bcbc <__rt_event_execute>
1c00e688:	30041073          	csrw	mstatus,s0
1c00e68c:	40b2                	lw	ra,12(sp)
1c00e68e:	4422                	lw	s0,8(sp)
1c00e690:	0141                	addi	sp,sp,16
1c00e692:	8082                	ret

1c00e694 <__rt_io_lock>:
1c00e694:	1c0107b7          	lui	a5,0x1c010
1c00e698:	6f07a783          	lw	a5,1776(a5) # 1c0106f0 <__hal_debug_struct+0x10>
1c00e69c:	cf81                	beqz	a5,1c00e6b4 <__rt_io_lock+0x20>
1c00e69e:	1c0117b7          	lui	a5,0x1c011
1c00e6a2:	c9c7a783          	lw	a5,-868(a5) # 1c010c9c <_rt_io_uart>
1c00e6a6:	e799                	bnez	a5,1c00e6b4 <__rt_io_lock+0x20>
1c00e6a8:	1c0107b7          	lui	a5,0x1c010
1c00e6ac:	7a87a783          	lw	a5,1960(a5) # 1c0107a8 <__rt_iodev>
1c00e6b0:	0427b963          	p.bneimm	a5,2,1c00e702 <__rt_io_lock+0x6e>
1c00e6b4:	7135                	addi	sp,sp,-160
1c00e6b6:	014027f3          	csrr	a5,uhartid
1c00e6ba:	cf06                	sw	ra,156(sp)
1c00e6bc:	ca5797b3          	p.extractu	a5,a5,5,5
1c00e6c0:	02000713          	li	a4,32
1c00e6c4:	1b001537          	lui	a0,0x1b001
1c00e6c8:	00e79963          	bne	a5,a4,1c00e6da <__rt_io_lock+0x46>
1c00e6cc:	c0c50513          	addi	a0,a0,-1012 # 1b000c0c <__rt_io_fc_lock>
1c00e6d0:	96cfd0ef          	jal	ra,1c00b83c <__rt_fc_lock>
1c00e6d4:	40fa                	lw	ra,156(sp)
1c00e6d6:	610d                	addi	sp,sp,160
1c00e6d8:	8082                	ret
1c00e6da:	004c                	addi	a1,sp,4
1c00e6dc:	c0c50513          	addi	a0,a0,-1012
1c00e6e0:	9c2fd0ef          	jal	ra,1c00b8a2 <__rt_fc_cluster_lock>
1c00e6e4:	4689                	li	a3,2
1c00e6e6:	00204737          	lui	a4,0x204
1c00e6ea:	08c14783          	lbu	a5,140(sp)
1c00e6ee:	0ff7f793          	andi	a5,a5,255
1c00e6f2:	f3ed                	bnez	a5,1c00e6d4 <__rt_io_lock+0x40>
1c00e6f4:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00e6f8:	03c76783          	p.elw	a5,60(a4)
1c00e6fc:	00d72223          	sw	a3,4(a4)
1c00e700:	b7ed                	j	1c00e6ea <__rt_io_lock+0x56>
1c00e702:	8082                	ret

1c00e704 <__rt_putc_host_cluster_req>:
1c00e704:	1141                	addi	sp,sp,-16
1c00e706:	c422                	sw	s0,8(sp)
1c00e708:	c606                	sw	ra,12(sp)
1c00e70a:	842a                	mv	s0,a0
1c00e70c:	08954503          	lbu	a0,137(a0)
1c00e710:	ec9ff0ef          	jal	ra,1c00e5d8 <__rt_do_putc_host>
1c00e714:	08844783          	lbu	a5,136(s0)
1c00e718:	4705                	li	a4,1
1c00e71a:	08e42223          	sw	a4,132(s0)
1c00e71e:	00201737          	lui	a4,0x201
1c00e722:	40b2                	lw	ra,12(sp)
1c00e724:	4422                	lw	s0,8(sp)
1c00e726:	04078793          	addi	a5,a5,64
1c00e72a:	07da                	slli	a5,a5,0x16
1c00e72c:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00e730:	0007e723          	p.sw	zero,a4(a5)
1c00e734:	0141                	addi	sp,sp,16
1c00e736:	8082                	ret

1c00e738 <__rt_io_unlock>:
1c00e738:	1c0107b7          	lui	a5,0x1c010
1c00e73c:	6f07a783          	lw	a5,1776(a5) # 1c0106f0 <__hal_debug_struct+0x10>
1c00e740:	cf81                	beqz	a5,1c00e758 <__rt_io_unlock+0x20>
1c00e742:	1c0117b7          	lui	a5,0x1c011
1c00e746:	c9c7a783          	lw	a5,-868(a5) # 1c010c9c <_rt_io_uart>
1c00e74a:	e799                	bnez	a5,1c00e758 <__rt_io_unlock+0x20>
1c00e74c:	1c0107b7          	lui	a5,0x1c010
1c00e750:	7a87a783          	lw	a5,1960(a5) # 1c0107a8 <__rt_iodev>
1c00e754:	0427b963          	p.bneimm	a5,2,1c00e7a6 <__rt_io_unlock+0x6e>
1c00e758:	7135                	addi	sp,sp,-160
1c00e75a:	014027f3          	csrr	a5,uhartid
1c00e75e:	cf06                	sw	ra,156(sp)
1c00e760:	ca5797b3          	p.extractu	a5,a5,5,5
1c00e764:	02000713          	li	a4,32
1c00e768:	1b001537          	lui	a0,0x1b001
1c00e76c:	00e79963          	bne	a5,a4,1c00e77e <__rt_io_unlock+0x46>
1c00e770:	c0c50513          	addi	a0,a0,-1012 # 1b000c0c <__rt_io_fc_lock>
1c00e774:	8fafd0ef          	jal	ra,1c00b86e <__rt_fc_unlock>
1c00e778:	40fa                	lw	ra,156(sp)
1c00e77a:	610d                	addi	sp,sp,160
1c00e77c:	8082                	ret
1c00e77e:	004c                	addi	a1,sp,4
1c00e780:	c0c50513          	addi	a0,a0,-1012
1c00e784:	956fd0ef          	jal	ra,1c00b8da <__rt_fc_cluster_unlock>
1c00e788:	4689                	li	a3,2
1c00e78a:	00204737          	lui	a4,0x204
1c00e78e:	08c14783          	lbu	a5,140(sp)
1c00e792:	0ff7f793          	andi	a5,a5,255
1c00e796:	f3ed                	bnez	a5,1c00e778 <__rt_io_unlock+0x40>
1c00e798:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00e79c:	03c76783          	p.elw	a5,60(a4)
1c00e7a0:	00d72223          	sw	a3,4(a4)
1c00e7a4:	b7ed                	j	1c00e78e <__rt_io_unlock+0x56>
1c00e7a6:	8082                	ret

1c00e7a8 <__rt_io_uart_flush.constprop.11>:
1c00e7a8:	7171                	addi	sp,sp,-176
1c00e7aa:	d522                	sw	s0,168(sp)
1c00e7ac:	d706                	sw	ra,172(sp)
1c00e7ae:	d326                	sw	s1,164(sp)
1c00e7b0:	d14a                	sw	s2,160(sp)
1c00e7b2:	cf4e                	sw	s3,156(sp)
1c00e7b4:	cd52                	sw	s4,152(sp)
1c00e7b6:	1c011437          	lui	s0,0x1c011
1c00e7ba:	c9442783          	lw	a5,-876(s0) # 1c010c94 <__rt_io_pending_flush>
1c00e7be:	c9440993          	addi	s3,s0,-876
1c00e7c2:	efad                	bnez	a5,1c00e83c <__rt_io_uart_flush.constprop.11+0x94>
1c00e7c4:	1c010637          	lui	a2,0x1c010
1c00e7c8:	6e060793          	addi	a5,a2,1760 # 1c0106e0 <__hal_debug_struct>
1c00e7cc:	4f80                	lw	s0,24(a5)
1c00e7ce:	6e060a13          	addi	s4,a2,1760
1c00e7d2:	cc29                	beqz	s0,1c00e82c <__rt_io_uart_flush.constprop.11+0x84>
1c00e7d4:	1c011737          	lui	a4,0x1c011
1c00e7d8:	014027f3          	csrr	a5,uhartid
1c00e7dc:	c9c72483          	lw	s1,-868(a4) # 1c010c9c <_rt_io_uart>
1c00e7e0:	ca5797b3          	p.extractu	a5,a5,5,5
1c00e7e4:	02000713          	li	a4,32
1c00e7e8:	1c010937          	lui	s2,0x1c010
1c00e7ec:	06e79263          	bne	a5,a4,1c00e850 <__rt_io_uart_flush.constprop.11+0xa8>
1c00e7f0:	1c00e5b7          	lui	a1,0x1c00e
1c00e7f4:	4785                	li	a5,1
1c00e7f6:	6e060613          	addi	a2,a2,1760
1c00e7fa:	57a58593          	addi	a1,a1,1402 # 1c00e57a <__rt_io_end_of_flush>
1c00e7fe:	4501                	li	a0,0
1c00e800:	00f9a023          	sw	a5,0(s3)
1c00e804:	c58fd0ef          	jal	ra,1c00bc5c <rt_event_get>
1c00e808:	40cc                	lw	a1,4(s1)
1c00e80a:	87aa                	mv	a5,a0
1c00e80c:	4701                	li	a4,0
1c00e80e:	0586                	slli	a1,a1,0x1
1c00e810:	86a2                	mv	a3,s0
1c00e812:	6fc90613          	addi	a2,s2,1788 # 1c0106fc <__hal_debug_struct+0x1c>
1c00e816:	0585                	addi	a1,a1,1
1c00e818:	4501                	li	a0,0
1c00e81a:	9b1fd0ef          	jal	ra,1c00c1ca <rt_periph_copy>
1c00e81e:	f1bff0ef          	jal	ra,1c00e738 <__rt_io_unlock>
1c00e822:	0009a783          	lw	a5,0(s3)
1c00e826:	e395                	bnez	a5,1c00e84a <__rt_io_uart_flush.constprop.11+0xa2>
1c00e828:	e6dff0ef          	jal	ra,1c00e694 <__rt_io_lock>
1c00e82c:	50ba                	lw	ra,172(sp)
1c00e82e:	542a                	lw	s0,168(sp)
1c00e830:	549a                	lw	s1,164(sp)
1c00e832:	590a                	lw	s2,160(sp)
1c00e834:	49fa                	lw	s3,156(sp)
1c00e836:	4a6a                	lw	s4,152(sp)
1c00e838:	614d                	addi	sp,sp,176
1c00e83a:	8082                	ret
1c00e83c:	efdff0ef          	jal	ra,1c00e738 <__rt_io_unlock>
1c00e840:	e35ff0ef          	jal	ra,1c00e674 <rt_event_execute.isra.4.constprop.12>
1c00e844:	e51ff0ef          	jal	ra,1c00e694 <__rt_io_lock>
1c00e848:	bf8d                	j	1c00e7ba <__rt_io_uart_flush.constprop.11+0x12>
1c00e84a:	e2bff0ef          	jal	ra,1c00e674 <rt_event_execute.isra.4.constprop.12>
1c00e84e:	bfd1                	j	1c00e822 <__rt_io_uart_flush.constprop.11+0x7a>
1c00e850:	868a                	mv	a3,sp
1c00e852:	8622                	mv	a2,s0
1c00e854:	6fc90593          	addi	a1,s2,1788
1c00e858:	8526                	mv	a0,s1
1c00e85a:	2a2010ef          	jal	ra,1c00fafc <rt_uart_cluster_write>
1c00e85e:	4689                	li	a3,2
1c00e860:	00204737          	lui	a4,0x204
1c00e864:	08c14783          	lbu	a5,140(sp)
1c00e868:	0ff7f793          	andi	a5,a5,255
1c00e86c:	c781                	beqz	a5,1c00e874 <__rt_io_uart_flush.constprop.11+0xcc>
1c00e86e:	000a2c23          	sw	zero,24(s4)
1c00e872:	bf6d                	j	1c00e82c <__rt_io_uart_flush.constprop.11+0x84>
1c00e874:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00e878:	03c76783          	p.elw	a5,60(a4)
1c00e87c:	00d72223          	sw	a3,4(a4)
1c00e880:	b7d5                	j	1c00e864 <__rt_io_uart_flush.constprop.11+0xbc>

1c00e882 <__rt_io_uart_wait_pending>:
1c00e882:	7135                	addi	sp,sp,-160
1c00e884:	cd22                	sw	s0,152(sp)
1c00e886:	cf06                	sw	ra,156(sp)
1c00e888:	1c011437          	lui	s0,0x1c011
1c00e88c:	c9442783          	lw	a5,-876(s0) # 1c010c94 <__rt_io_pending_flush>
1c00e890:	eb85                	bnez	a5,1c00e8c0 <__rt_io_uart_wait_pending+0x3e>
1c00e892:	1c011437          	lui	s0,0x1c011
1c00e896:	c9040413          	addi	s0,s0,-880 # 1c010c90 <__rt_io_event_current>
1c00e89a:	4008                	lw	a0,0(s0)
1c00e89c:	cd11                	beqz	a0,1c00e8b8 <__rt_io_uart_wait_pending+0x36>
1c00e89e:	014027f3          	csrr	a5,uhartid
1c00e8a2:	8795                	srai	a5,a5,0x5
1c00e8a4:	f267b7b3          	p.bclr	a5,a5,25,6
1c00e8a8:	02000713          	li	a4,32
1c00e8ac:	02e79163          	bne	a5,a4,1c00e8ce <__rt_io_uart_wait_pending+0x4c>
1c00e8b0:	c9cfd0ef          	jal	ra,1c00bd4c <rt_event_wait>
1c00e8b4:	00042023          	sw	zero,0(s0)
1c00e8b8:	40fa                	lw	ra,156(sp)
1c00e8ba:	446a                	lw	s0,152(sp)
1c00e8bc:	610d                	addi	sp,sp,160
1c00e8be:	8082                	ret
1c00e8c0:	e79ff0ef          	jal	ra,1c00e738 <__rt_io_unlock>
1c00e8c4:	db1ff0ef          	jal	ra,1c00e674 <rt_event_execute.isra.4.constprop.12>
1c00e8c8:	dcdff0ef          	jal	ra,1c00e694 <__rt_io_lock>
1c00e8cc:	b7c1                	j	1c00e88c <__rt_io_uart_wait_pending+0xa>
1c00e8ce:	08f106a3          	sb	a5,141(sp)
1c00e8d2:	1c00e7b7          	lui	a5,0x1c00e
1c00e8d6:	58878793          	addi	a5,a5,1416 # 1c00e588 <__rt_io_uart_wait_req>
1c00e8da:	4705                	li	a4,1
1c00e8dc:	c83e                	sw	a5,16(sp)
1c00e8de:	0068                	addi	a0,sp,12
1c00e8e0:	1c0117b7          	lui	a5,0x1c011
1c00e8e4:	bee7ae23          	sw	a4,-1028(a5) # 1c010bfc <__rt_io_event+0x24>
1c00e8e8:	08010623          	sb	zero,140(sp)
1c00e8ec:	d802                	sw	zero,48(sp)
1c00e8ee:	da02                	sw	zero,52(sp)
1c00e8f0:	ca2a                	sw	a0,20(sp)
1c00e8f2:	a94fe0ef          	jal	ra,1c00cb86 <__rt_cluster_push_fc_event>
1c00e8f6:	4689                	li	a3,2
1c00e8f8:	00204737          	lui	a4,0x204
1c00e8fc:	08c14783          	lbu	a5,140(sp)
1c00e900:	0ff7f793          	andi	a5,a5,255
1c00e904:	fbd5                	bnez	a5,1c00e8b8 <__rt_io_uart_wait_pending+0x36>
1c00e906:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00e90a:	03c76783          	p.elw	a5,60(a4)
1c00e90e:	00d72223          	sw	a3,4(a4)
1c00e912:	b7ed                	j	1c00e8fc <__rt_io_uart_wait_pending+0x7a>

1c00e914 <__rt_io_stop>:
1c00e914:	1141                	addi	sp,sp,-16
1c00e916:	c422                	sw	s0,8(sp)
1c00e918:	1c011437          	lui	s0,0x1c011
1c00e91c:	c606                	sw	ra,12(sp)
1c00e91e:	c9c40413          	addi	s0,s0,-868 # 1c010c9c <_rt_io_uart>
1c00e922:	f61ff0ef          	jal	ra,1c00e882 <__rt_io_uart_wait_pending>
1c00e926:	4008                	lw	a0,0(s0)
1c00e928:	4581                	li	a1,0
1c00e92a:	184010ef          	jal	ra,1c00faae <rt_uart_close>
1c00e92e:	40b2                	lw	ra,12(sp)
1c00e930:	00042023          	sw	zero,0(s0)
1c00e934:	4422                	lw	s0,8(sp)
1c00e936:	4501                	li	a0,0
1c00e938:	0141                	addi	sp,sp,16
1c00e93a:	8082                	ret

1c00e93c <strcmp>:
1c00e93c:	0015478b          	p.lbu	a5,1(a0!)
1c00e940:	0015c70b          	p.lbu	a4,1(a1!)
1c00e944:	c399                	beqz	a5,1c00e94a <strcmp+0xe>
1c00e946:	fee78be3          	beq	a5,a4,1c00e93c <strcmp>
1c00e94a:	40e78533          	sub	a0,a5,a4
1c00e94e:	8082                	ret

1c00e950 <strncmp>:
1c00e950:	ce11                	beqz	a2,1c00e96c <strncmp+0x1c>
1c00e952:	962a                	add	a2,a2,a0
1c00e954:	0015478b          	p.lbu	a5,1(a0!)
1c00e958:	0015c70b          	p.lbu	a4,1(a1!)
1c00e95c:	00e79563          	bne	a5,a4,1c00e966 <strncmp+0x16>
1c00e960:	00c50363          	beq	a0,a2,1c00e966 <strncmp+0x16>
1c00e964:	fbe5                	bnez	a5,1c00e954 <strncmp+0x4>
1c00e966:	40e78533          	sub	a0,a5,a4
1c00e96a:	8082                	ret
1c00e96c:	4501                	li	a0,0
1c00e96e:	8082                	ret

1c00e970 <strlen>:
1c00e970:	87aa                	mv	a5,a0
1c00e972:	0007c703          	lbu	a4,0(a5)
1c00e976:	00178693          	addi	a3,a5,1
1c00e97a:	e701                	bnez	a4,1c00e982 <strlen+0x12>
1c00e97c:	40a78533          	sub	a0,a5,a0
1c00e980:	8082                	ret
1c00e982:	87b6                	mv	a5,a3
1c00e984:	b7fd                	j	1c00e972 <strlen+0x2>

1c00e986 <memset>:
1c00e986:	962a                	add	a2,a2,a0
1c00e988:	87aa                	mv	a5,a0
1c00e98a:	00c79363          	bne	a5,a2,1c00e990 <memset+0xa>
1c00e98e:	8082                	ret
1c00e990:	00b780ab          	p.sb	a1,1(a5!)
1c00e994:	bfdd                	j	1c00e98a <memset+0x4>

1c00e996 <memcpy>:
1c00e996:	00a5e733          	or	a4,a1,a0
1c00e99a:	fa273733          	p.bclr	a4,a4,29,2
1c00e99e:	87aa                	mv	a5,a0
1c00e9a0:	c709                	beqz	a4,1c00e9aa <memcpy+0x14>
1c00e9a2:	962e                	add	a2,a2,a1
1c00e9a4:	00c59f63          	bne	a1,a2,1c00e9c2 <memcpy+0x2c>
1c00e9a8:	8082                	ret
1c00e9aa:	fa263733          	p.bclr	a4,a2,29,2
1c00e9ae:	fb75                	bnez	a4,1c00e9a2 <memcpy+0xc>
1c00e9b0:	962e                	add	a2,a2,a1
1c00e9b2:	00c59363          	bne	a1,a2,1c00e9b8 <memcpy+0x22>
1c00e9b6:	8082                	ret
1c00e9b8:	0045a70b          	p.lw	a4,4(a1!)
1c00e9bc:	00e7a22b          	p.sw	a4,4(a5!)
1c00e9c0:	bfcd                	j	1c00e9b2 <memcpy+0x1c>
1c00e9c2:	0015c70b          	p.lbu	a4,1(a1!)
1c00e9c6:	00e780ab          	p.sb	a4,1(a5!)
1c00e9ca:	bfe9                	j	1c00e9a4 <memcpy+0xe>

1c00e9cc <strchr>:
1c00e9cc:	0ff5f593          	andi	a1,a1,255
1c00e9d0:	00054703          	lbu	a4,0(a0)
1c00e9d4:	87aa                	mv	a5,a0
1c00e9d6:	0505                	addi	a0,a0,1
1c00e9d8:	00b70563          	beq	a4,a1,1c00e9e2 <strchr+0x16>
1c00e9dc:	fb75                	bnez	a4,1c00e9d0 <strchr+0x4>
1c00e9de:	c191                	beqz	a1,1c00e9e2 <strchr+0x16>
1c00e9e0:	4781                	li	a5,0
1c00e9e2:	853e                	mv	a0,a5
1c00e9e4:	8082                	ret

1c00e9e6 <__rt_putc_debug_bridge>:
1c00e9e6:	1141                	addi	sp,sp,-16
1c00e9e8:	c422                	sw	s0,8(sp)
1c00e9ea:	1c010437          	lui	s0,0x1c010
1c00e9ee:	c226                	sw	s1,4(sp)
1c00e9f0:	c606                	sw	ra,12(sp)
1c00e9f2:	84aa                	mv	s1,a0
1c00e9f4:	6e040413          	addi	s0,s0,1760 # 1c0106e0 <__hal_debug_struct>
1c00e9f8:	485c                	lw	a5,20(s0)
1c00e9fa:	c791                	beqz	a5,1c00ea06 <__rt_putc_debug_bridge+0x20>
1c00e9fc:	06400513          	li	a0,100
1c00ea00:	e24fd0ef          	jal	ra,1c00c024 <rt_time_wait_us>
1c00ea04:	bfd5                	j	1c00e9f8 <__rt_putc_debug_bridge+0x12>
1c00ea06:	4c1c                	lw	a5,24(s0)
1c00ea08:	00178713          	addi	a4,a5,1
1c00ea0c:	97a2                	add	a5,a5,s0
1c00ea0e:	00978e23          	sb	s1,28(a5)
1c00ea12:	cc18                	sw	a4,24(s0)
1c00ea14:	4c14                	lw	a3,24(s0)
1c00ea16:	08000793          	li	a5,128
1c00ea1a:	00f68463          	beq	a3,a5,1c00ea22 <__rt_putc_debug_bridge+0x3c>
1c00ea1e:	00a4b663          	p.bneimm	s1,10,1c00ea2a <__rt_putc_debug_bridge+0x44>
1c00ea22:	c701                	beqz	a4,1c00ea2a <__rt_putc_debug_bridge+0x44>
1c00ea24:	c858                	sw	a4,20(s0)
1c00ea26:	00042c23          	sw	zero,24(s0)
1c00ea2a:	4c1c                	lw	a5,24(s0)
1c00ea2c:	e799                	bnez	a5,1c00ea3a <__rt_putc_debug_bridge+0x54>
1c00ea2e:	4422                	lw	s0,8(sp)
1c00ea30:	40b2                	lw	ra,12(sp)
1c00ea32:	4492                	lw	s1,4(sp)
1c00ea34:	0141                	addi	sp,sp,16
1c00ea36:	882fd06f          	j	1c00bab8 <__rt_bridge_printf_flush>
1c00ea3a:	40b2                	lw	ra,12(sp)
1c00ea3c:	4422                	lw	s0,8(sp)
1c00ea3e:	4492                	lw	s1,4(sp)
1c00ea40:	0141                	addi	sp,sp,16
1c00ea42:	8082                	ret

1c00ea44 <__rt_putc_uart>:
1c00ea44:	1101                	addi	sp,sp,-32
1c00ea46:	c62a                	sw	a0,12(sp)
1c00ea48:	ce06                	sw	ra,28(sp)
1c00ea4a:	e39ff0ef          	jal	ra,1c00e882 <__rt_io_uart_wait_pending>
1c00ea4e:	1c0107b7          	lui	a5,0x1c010
1c00ea52:	6e078793          	addi	a5,a5,1760 # 1c0106e0 <__hal_debug_struct>
1c00ea56:	4f94                	lw	a3,24(a5)
1c00ea58:	4532                	lw	a0,12(sp)
1c00ea5a:	00168713          	addi	a4,a3,1
1c00ea5e:	cf98                	sw	a4,24(a5)
1c00ea60:	97b6                	add	a5,a5,a3
1c00ea62:	00a78e23          	sb	a0,28(a5)
1c00ea66:	08000793          	li	a5,128
1c00ea6a:	00f70463          	beq	a4,a5,1c00ea72 <__rt_putc_uart+0x2e>
1c00ea6e:	00a53663          	p.bneimm	a0,10,1c00ea7a <__rt_putc_uart+0x36>
1c00ea72:	40f2                	lw	ra,28(sp)
1c00ea74:	6105                	addi	sp,sp,32
1c00ea76:	d33ff06f          	j	1c00e7a8 <__rt_io_uart_flush.constprop.11>
1c00ea7a:	40f2                	lw	ra,28(sp)
1c00ea7c:	6105                	addi	sp,sp,32
1c00ea7e:	8082                	ret

1c00ea80 <tfp_putc.isra.9>:
1c00ea80:	1c0107b7          	lui	a5,0x1c010
1c00ea84:	7a87a783          	lw	a5,1960(a5) # 1c0107a8 <__rt_iodev>
1c00ea88:	7135                	addi	sp,sp,-160
1c00ea8a:	cf06                	sw	ra,156(sp)
1c00ea8c:	0427bf63          	p.bneimm	a5,2,1c00eaea <tfp_putc.isra.9+0x6a>
1c00ea90:	014027f3          	csrr	a5,uhartid
1c00ea94:	8795                	srai	a5,a5,0x5
1c00ea96:	f267b7b3          	p.bclr	a5,a5,25,6
1c00ea9a:	02000713          	li	a4,32
1c00ea9e:	00e79763          	bne	a5,a4,1c00eaac <tfp_putc.isra.9+0x2c>
1c00eaa2:	b37ff0ef          	jal	ra,1c00e5d8 <__rt_do_putc_host>
1c00eaa6:	40fa                	lw	ra,156(sp)
1c00eaa8:	610d                	addi	sp,sp,160
1c00eaaa:	8082                	ret
1c00eaac:	08f10623          	sb	a5,140(sp)
1c00eab0:	1c00e7b7          	lui	a5,0x1c00e
1c00eab4:	4705                	li	a4,1
1c00eab6:	70478793          	addi	a5,a5,1796 # 1c00e704 <__rt_putc_host_cluster_req>
1c00eaba:	08a106a3          	sb	a0,141(sp)
1c00eabe:	0048                	addi	a0,sp,4
1c00eac0:	d63a                	sw	a4,44(sp)
1c00eac2:	c43e                	sw	a5,8(sp)
1c00eac4:	c502                	sw	zero,136(sp)
1c00eac6:	ce02                	sw	zero,28(sp)
1c00eac8:	c62a                	sw	a0,12(sp)
1c00eaca:	00010c23          	sb	zero,24(sp)
1c00eace:	8b8fe0ef          	jal	ra,1c00cb86 <__rt_cluster_push_fc_event>
1c00ead2:	4709                	li	a4,2
1c00ead4:	002047b7          	lui	a5,0x204
1c00ead8:	46aa                	lw	a3,136(sp)
1c00eada:	f6f1                	bnez	a3,1c00eaa6 <tfp_putc.isra.9+0x26>
1c00eadc:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00eae0:	03c7e683          	p.elw	a3,60(a5)
1c00eae4:	00e7a223          	sw	a4,4(a5)
1c00eae8:	bfc5                	j	1c00ead8 <tfp_putc.isra.9+0x58>
1c00eaea:	1c0117b7          	lui	a5,0x1c011
1c00eaee:	c9c7a783          	lw	a5,-868(a5) # 1c010c9c <_rt_io_uart>
1c00eaf2:	c781                	beqz	a5,1c00eafa <tfp_putc.isra.9+0x7a>
1c00eaf4:	f51ff0ef          	jal	ra,1c00ea44 <__rt_putc_uart>
1c00eaf8:	b77d                	j	1c00eaa6 <tfp_putc.isra.9+0x26>
1c00eafa:	1c0107b7          	lui	a5,0x1c010
1c00eafe:	6f07a783          	lw	a5,1776(a5) # 1c0106f0 <__hal_debug_struct+0x10>
1c00eb02:	c395                	beqz	a5,1c00eb26 <tfp_putc.isra.9+0xa6>
1c00eb04:	014027f3          	csrr	a5,uhartid
1c00eb08:	00379713          	slli	a4,a5,0x3
1c00eb0c:	1a1106b7          	lui	a3,0x1a110
1c00eb10:	ee873733          	p.bclr	a4,a4,23,8
1c00eb14:	9736                	add	a4,a4,a3
1c00eb16:	6689                	lui	a3,0x2
1c00eb18:	078a                	slli	a5,a5,0x2
1c00eb1a:	f8068693          	addi	a3,a3,-128 # 1f80 <__rt_stack_size+0x1780>
1c00eb1e:	8ff5                	and	a5,a5,a3
1c00eb20:	00a767a3          	p.sw	a0,a5(a4)
1c00eb24:	b749                	j	1c00eaa6 <tfp_putc.isra.9+0x26>
1c00eb26:	ec1ff0ef          	jal	ra,1c00e9e6 <__rt_putc_debug_bridge>
1c00eb2a:	bfb5                	j	1c00eaa6 <tfp_putc.isra.9+0x26>

1c00eb2c <puts>:
1c00eb2c:	1141                	addi	sp,sp,-16
1c00eb2e:	c422                	sw	s0,8(sp)
1c00eb30:	c606                	sw	ra,12(sp)
1c00eb32:	842a                	mv	s0,a0
1c00eb34:	b61ff0ef          	jal	ra,1c00e694 <__rt_io_lock>
1c00eb38:	0014450b          	p.lbu	a0,1(s0!)
1c00eb3c:	c501                	beqz	a0,1c00eb44 <puts+0x18>
1c00eb3e:	f43ff0ef          	jal	ra,1c00ea80 <tfp_putc.isra.9>
1c00eb42:	bfdd                	j	1c00eb38 <puts+0xc>
1c00eb44:	4529                	li	a0,10
1c00eb46:	f3bff0ef          	jal	ra,1c00ea80 <tfp_putc.isra.9>
1c00eb4a:	befff0ef          	jal	ra,1c00e738 <__rt_io_unlock>
1c00eb4e:	40b2                	lw	ra,12(sp)
1c00eb50:	4422                	lw	s0,8(sp)
1c00eb52:	4501                	li	a0,0
1c00eb54:	0141                	addi	sp,sp,16
1c00eb56:	8082                	ret

1c00eb58 <fputc_locked>:
1c00eb58:	1141                	addi	sp,sp,-16
1c00eb5a:	c422                	sw	s0,8(sp)
1c00eb5c:	842a                	mv	s0,a0
1c00eb5e:	0ff57513          	andi	a0,a0,255
1c00eb62:	c606                	sw	ra,12(sp)
1c00eb64:	f1dff0ef          	jal	ra,1c00ea80 <tfp_putc.isra.9>
1c00eb68:	8522                	mv	a0,s0
1c00eb6a:	40b2                	lw	ra,12(sp)
1c00eb6c:	4422                	lw	s0,8(sp)
1c00eb6e:	0141                	addi	sp,sp,16
1c00eb70:	8082                	ret

1c00eb72 <fputc>:
1c00eb72:	1141                	addi	sp,sp,-16
1c00eb74:	c606                	sw	ra,12(sp)
1c00eb76:	c422                	sw	s0,8(sp)
1c00eb78:	842a                	mv	s0,a0
1c00eb7a:	b1bff0ef          	jal	ra,1c00e694 <__rt_io_lock>
1c00eb7e:	0ff47513          	andi	a0,s0,255
1c00eb82:	effff0ef          	jal	ra,1c00ea80 <tfp_putc.isra.9>
1c00eb86:	1c0107b7          	lui	a5,0x1c010
1c00eb8a:	6f07a783          	lw	a5,1776(a5) # 1c0106f0 <__hal_debug_struct+0x10>
1c00eb8e:	e399                	bnez	a5,1c00eb94 <fputc+0x22>
1c00eb90:	f29fc0ef          	jal	ra,1c00bab8 <__rt_bridge_printf_flush>
1c00eb94:	ba5ff0ef          	jal	ra,1c00e738 <__rt_io_unlock>
1c00eb98:	8522                	mv	a0,s0
1c00eb9a:	40b2                	lw	ra,12(sp)
1c00eb9c:	4422                	lw	s0,8(sp)
1c00eb9e:	0141                	addi	sp,sp,16
1c00eba0:	8082                	ret

1c00eba2 <putchar>:
1c00eba2:	4589                	li	a1,2
1c00eba4:	fcfff06f          	j	1c00eb72 <fputc>

1c00eba8 <_prf_locked>:
1c00eba8:	1101                	addi	sp,sp,-32
1c00ebaa:	ce06                	sw	ra,28(sp)
1c00ebac:	c02a                	sw	a0,0(sp)
1c00ebae:	c62e                	sw	a1,12(sp)
1c00ebb0:	c432                	sw	a2,8(sp)
1c00ebb2:	c236                	sw	a3,4(sp)
1c00ebb4:	ae1ff0ef          	jal	ra,1c00e694 <__rt_io_lock>
1c00ebb8:	4692                	lw	a3,4(sp)
1c00ebba:	4622                	lw	a2,8(sp)
1c00ebbc:	45b2                	lw	a1,12(sp)
1c00ebbe:	4502                	lw	a0,0(sp)
1c00ebc0:	2ca1                	jal	1c00ee18 <_prf>
1c00ebc2:	c02a                	sw	a0,0(sp)
1c00ebc4:	b75ff0ef          	jal	ra,1c00e738 <__rt_io_unlock>
1c00ebc8:	40f2                	lw	ra,28(sp)
1c00ebca:	4502                	lw	a0,0(sp)
1c00ebcc:	6105                	addi	sp,sp,32
1c00ebce:	8082                	ret

1c00ebd0 <exit>:
1c00ebd0:	1101                	addi	sp,sp,-32
1c00ebd2:	cc22                	sw	s0,24(sp)
1c00ebd4:	c84a                	sw	s2,16(sp)
1c00ebd6:	c62a                	sw	a0,12(sp)
1c00ebd8:	ce06                	sw	ra,28(sp)
1c00ebda:	ca26                	sw	s1,20(sp)
1c00ebdc:	a39fc0ef          	jal	ra,1c00b614 <__rt_deinit>
1c00ebe0:	4532                	lw	a0,12(sp)
1c00ebe2:	1a104437          	lui	s0,0x1a104
1c00ebe6:	0a040793          	addi	a5,s0,160 # 1a1040a0 <__l1_end+0xa10405c>
1c00ebea:	c1f54933          	p.bset	s2,a0,0,31
1c00ebee:	0127a023          	sw	s2,0(a5)
1c00ebf2:	1c0107b7          	lui	a5,0x1c010
1c00ebf6:	7a87a783          	lw	a5,1960(a5) # 1c0107a8 <__rt_iodev>
1c00ebfa:	0027bf63          	p.bneimm	a5,2,1c00ec18 <exit+0x48>
1c00ebfe:	c901                	beqz	a0,1c00ec0e <exit+0x3e>
1c00ec00:	00020537          	lui	a0,0x20
1c00ec04:	02350513          	addi	a0,a0,35 # 20023 <__L1Cl+0x10023>
1c00ec08:	fcefc0ef          	jal	ra,1c00b3d6 <semihost_exit>
1c00ec0c:	a001                	j	1c00ec0c <exit+0x3c>
1c00ec0e:	00020537          	lui	a0,0x20
1c00ec12:	02650513          	addi	a0,a0,38 # 20026 <__L1Cl+0x10026>
1c00ec16:	bfcd                	j	1c00ec08 <exit+0x38>
1c00ec18:	1c0104b7          	lui	s1,0x1c010
1c00ec1c:	6e048493          	addi	s1,s1,1760 # 1c0106e0 <__hal_debug_struct>
1c00ec20:	e99fc0ef          	jal	ra,1c00bab8 <__rt_bridge_printf_flush>
1c00ec24:	0124a623          	sw	s2,12(s1)
1c00ec28:	e4dfc0ef          	jal	ra,1c00ba74 <__rt_bridge_send_notif>
1c00ec2c:	449c                	lw	a5,8(s1)
1c00ec2e:	dff9                	beqz	a5,1c00ec0c <exit+0x3c>
1c00ec30:	07440413          	addi	s0,s0,116
1c00ec34:	401c                	lw	a5,0(s0)
1c00ec36:	83a5                	srli	a5,a5,0x9
1c00ec38:	f837b7b3          	p.bclr	a5,a5,28,3
1c00ec3c:	fe77bce3          	p.bneimm	a5,7,1c00ec34 <exit+0x64>
1c00ec40:	e57fc0ef          	jal	ra,1c00ba96 <__rt_bridge_clear_notif>
1c00ec44:	b7e1                	j	1c00ec0c <exit+0x3c>

1c00ec46 <abort>:
1c00ec46:	1141                	addi	sp,sp,-16
1c00ec48:	557d                	li	a0,-1
1c00ec4a:	c606                	sw	ra,12(sp)
1c00ec4c:	f85ff0ef          	jal	ra,1c00ebd0 <exit>

1c00ec50 <__rt_io_init>:
#endif
}

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_io_init()
{
  __rt_putc_host_buffer_index = 0;
1c00ec50:	1c0117b7          	lui	a5,0x1c011
1c00ec54:	c807ac23          	sw	zero,-872(a5) # 1c010c98 <__rt_putc_host_buffer_index>
void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req);

static inline void __rt_fc_lock_init(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_FC)
  lock->waiting = NULL;
1c00ec58:	1b0017b7          	lui	a5,0x1b001
1c00ec5c:	c0c78793          	addi	a5,a5,-1012 # 1b000c0c <__rt_io_fc_lock>
1c00ec60:	0007a223          	sw	zero,4(a5)
  lock->locked = 0;
1c00ec64:	0007a023          	sw	zero,0(a5)
  lock->fc_wait = NULL;
1c00ec68:	0007a623          	sw	zero,12(a5)
  __rt_fc_lock_init(&__rt_io_fc_lock);

#if defined(__RT_USE_UART)
  _rt_io_uart = NULL;
1c00ec6c:	1c0117b7          	lui	a5,0x1c011
1c00ec70:	c807ae23          	sw	zero,-868(a5) # 1c010c9c <_rt_io_uart>
  __rt_io_event_current = NULL;
1c00ec74:	1c0117b7          	lui	a5,0x1c011
1c00ec78:	c807a823          	sw	zero,-880(a5) # 1c010c90 <__rt_io_event_current>
  return __rt_iodev;
1c00ec7c:	1c0107b7          	lui	a5,0x1c010

  if (rt_iodev() == RT_IODEV_UART)
1c00ec80:	7a87a783          	lw	a5,1960(a5) # 1c0107a8 <__rt_iodev>
1c00ec84:	0217be63          	p.bneimm	a5,1,1c00ecc0 <__rt_io_init+0x70>
  {
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00ec88:	1c00e5b7          	lui	a1,0x1c00e
{
1c00ec8c:	1141                	addi	sp,sp,-16
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00ec8e:	4601                	li	a2,0
1c00ec90:	61a58593          	addi	a1,a1,1562 # 1c00e61a <__rt_io_start>
1c00ec94:	4501                	li	a0,0
{
1c00ec96:	c606                	sw	ra,12(sp)
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00ec98:	b15fc0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
1c00ec9c:	1c00f5b7          	lui	a1,0x1c00f
1c00eca0:	91458593          	addi	a1,a1,-1772 # 1c00e914 <__rt_io_stop>
1c00eca4:	4601                	li	a2,0
1c00eca6:	4505                	li	a0,1
1c00eca8:	b05fc0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
  }
#endif

}
1c00ecac:	40b2                	lw	ra,12(sp)
    __rt_io_pending_flush = 0;
1c00ecae:	1c0117b7          	lui	a5,0x1c011
1c00ecb2:	c807aa23          	sw	zero,-876(a5) # 1c010c94 <__rt_io_pending_flush>
    rt_event_alloc(NULL, 1);
1c00ecb6:	4585                	li	a1,1
1c00ecb8:	4501                	li	a0,0
}
1c00ecba:	0141                	addi	sp,sp,16
    rt_event_alloc(NULL, 1);
1c00ecbc:	f2bfc06f          	j	1c00bbe6 <rt_event_alloc>
1c00ecc0:	8082                	ret

1c00ecc2 <printf>:

	return r;
}

int printf(const char *format, ...)
{
1c00ecc2:	7139                	addi	sp,sp,-64
1c00ecc4:	d432                	sw	a2,40(sp)
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00ecc6:	862a                	mv	a2,a0
1c00ecc8:	1c00f537          	lui	a0,0x1c00f
{
1c00eccc:	d22e                	sw	a1,36(sp)
1c00ecce:	d636                	sw	a3,44(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00ecd0:	4589                	li	a1,2
	va_start(vargs, format);
1c00ecd2:	1054                	addi	a3,sp,36
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00ecd4:	b5850513          	addi	a0,a0,-1192 # 1c00eb58 <fputc_locked>
{
1c00ecd8:	ce06                	sw	ra,28(sp)
1c00ecda:	d83a                	sw	a4,48(sp)
1c00ecdc:	da3e                	sw	a5,52(sp)
1c00ecde:	dc42                	sw	a6,56(sp)
1c00ece0:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c00ece2:	c636                	sw	a3,12(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00ece4:	ec5ff0ef          	jal	ra,1c00eba8 <_prf_locked>
	va_end(vargs);

	return r;
}
1c00ece8:	40f2                	lw	ra,28(sp)
1c00ecea:	6121                	addi	sp,sp,64
1c00ecec:	8082                	ret

1c00ecee <_to_x>:
 * Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes).
 */
static int _to_x(char *buf, unsigned VALTYPE n, unsigned int base)
{
1c00ecee:	7179                	addi	sp,sp,-48
1c00ecf0:	d422                	sw	s0,40(sp)
1c00ecf2:	d226                	sw	s1,36(sp)
1c00ecf4:	ce4e                	sw	s3,28(sp)
1c00ecf6:	cc52                	sw	s4,24(sp)
1c00ecf8:	ca56                	sw	s5,20(sp)
1c00ecfa:	c85a                	sw	s6,16(sp)
1c00ecfc:	d606                	sw	ra,44(sp)
1c00ecfe:	d04a                	sw	s2,32(sp)
1c00ed00:	c65e                	sw	s7,12(sp)
1c00ed02:	84aa                	mv	s1,a0
1c00ed04:	89ae                	mv	s3,a1
1c00ed06:	8a32                	mv	s4,a2
1c00ed08:	8ab6                	mv	s5,a3
1c00ed0a:	842a                	mv	s0,a0

	do {
		unsigned int d = n % base;

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00ed0c:	4b25                	li	s6,9
		unsigned int d = n % base;
1c00ed0e:	8656                	mv	a2,s5
1c00ed10:	4681                	li	a3,0
1c00ed12:	854e                	mv	a0,s3
1c00ed14:	85d2                	mv	a1,s4
1c00ed16:	cb1f10ef          	jal	ra,1c0009c6 <__umoddi3>
		n /= base;
1c00ed1a:	85d2                	mv	a1,s4
		unsigned int d = n % base;
1c00ed1c:	892a                	mv	s2,a0
		n /= base;
1c00ed1e:	8656                	mv	a2,s5
1c00ed20:	854e                	mv	a0,s3
1c00ed22:	4681                	li	a3,0
1c00ed24:	967f10ef          	jal	ra,1c00068a <__udivdi3>
1c00ed28:	89aa                	mv	s3,a0
1c00ed2a:	8a2e                	mv	s4,a1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00ed2c:	02700713          	li	a4,39
1c00ed30:	012b6363          	bltu	s6,s2,1c00ed36 <_to_x+0x48>
1c00ed34:	4701                	li	a4,0
1c00ed36:	03090913          	addi	s2,s2,48
1c00ed3a:	974a                	add	a4,a4,s2
1c00ed3c:	00e40023          	sb	a4,0(s0)
	} while (n);
1c00ed40:	8dc9                	or	a1,a1,a0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00ed42:	00140793          	addi	a5,s0,1
	} while (n);
1c00ed46:	e195                	bnez	a1,1c00ed6a <_to_x+0x7c>

	*buf = 0;
1c00ed48:	00078023          	sb	zero,0(a5)
	len = buf - start;
1c00ed4c:	40978533          	sub	a0,a5,s1

	for (buf--; buf > start; buf--, start++) {
1c00ed50:	0084ef63          	bltu	s1,s0,1c00ed6e <_to_x+0x80>
		*buf = *start;
		*start = tmp;
	}

	return len;
}
1c00ed54:	50b2                	lw	ra,44(sp)
1c00ed56:	5422                	lw	s0,40(sp)
1c00ed58:	5492                	lw	s1,36(sp)
1c00ed5a:	5902                	lw	s2,32(sp)
1c00ed5c:	49f2                	lw	s3,28(sp)
1c00ed5e:	4a62                	lw	s4,24(sp)
1c00ed60:	4ad2                	lw	s5,20(sp)
1c00ed62:	4b42                	lw	s6,16(sp)
1c00ed64:	4bb2                	lw	s7,12(sp)
1c00ed66:	6145                	addi	sp,sp,48
1c00ed68:	8082                	ret
1c00ed6a:	843e                	mv	s0,a5
1c00ed6c:	b74d                	j	1c00ed0e <_to_x+0x20>
		*buf = *start;
1c00ed6e:	0004c703          	lbu	a4,0(s1)
		char tmp = *buf;
1c00ed72:	00044783          	lbu	a5,0(s0)
		*buf = *start;
1c00ed76:	fee40fab          	p.sb	a4,-1(s0!)
		*start = tmp;
1c00ed7a:	00f480ab          	p.sb	a5,1(s1!)
1c00ed7e:	bfc9                	j	1c00ed50 <_to_x+0x62>

1c00ed80 <_rlrshift>:
	return (buf + _to_udec(buf, value)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
1c00ed80:	411c                	lw	a5,0(a0)
1c00ed82:	4154                	lw	a3,4(a0)
1c00ed84:	fc17b733          	p.bclr	a4,a5,30,1
1c00ed88:	01f69613          	slli	a2,a3,0x1f
1c00ed8c:	8385                	srli	a5,a5,0x1
1c00ed8e:	8fd1                	or	a5,a5,a2
1c00ed90:	97ba                	add	a5,a5,a4
1c00ed92:	8285                	srli	a3,a3,0x1
1c00ed94:	00e7b733          	sltu	a4,a5,a4
1c00ed98:	9736                	add	a4,a4,a3
1c00ed9a:	c11c                	sw	a5,0(a0)
1c00ed9c:	c158                	sw	a4,4(a0)
}
1c00ed9e:	8082                	ret

1c00eda0 <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
1c00eda0:	4118                	lw	a4,0(a0)
1c00eda2:	4154                	lw	a3,4(a0)
	 */
	rem += 2U;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00eda4:	4615                	li	a2,5
	rem += 2U;
1c00eda6:	00270793          	addi	a5,a4,2
1c00edaa:	00e7b733          	sltu	a4,a5,a4
1c00edae:	9736                	add	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00edb0:	02c755b3          	divu	a1,a4,a2
		rem -= q * 5U;
1c00edb4:	42b61733          	p.msu	a4,a2,a1
		hi = rem >> shifts[i];
1c00edb8:	01d71693          	slli	a3,a4,0x1d
1c00edbc:	0037d713          	srli	a4,a5,0x3
1c00edc0:	8f55                	or	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00edc2:	02c75733          	divu	a4,a4,a2
1c00edc6:	01d75693          	srli	a3,a4,0x1d
1c00edca:	070e                	slli	a4,a4,0x3
		rem -= q * 5U;
1c00edcc:	42e617b3          	p.msu	a5,a2,a4
		quot += q;
1c00edd0:	95b6                	add	a1,a1,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00edd2:	02c7d7b3          	divu	a5,a5,a2
		quot += q;
1c00edd6:	973e                	add	a4,a4,a5
1c00edd8:	00f737b3          	sltu	a5,a4,a5
1c00eddc:	97ae                	add	a5,a5,a1
	}

	*v = quot;
1c00edde:	c118                	sw	a4,0(a0)
1c00ede0:	c15c                	sw	a5,4(a0)
}
1c00ede2:	8082                	ret

1c00ede4 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	char rval;

	if (*digit_count > 0) {
1c00ede4:	419c                	lw	a5,0(a1)
		*digit_count -= 1;
		*fr = *fr * 10U;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else {
		rval = '0';
1c00ede6:	03000713          	li	a4,48
	if (*digit_count > 0) {
1c00edea:	02f05563          	blez	a5,1c00ee14 <_get_digit+0x30>
		*digit_count -= 1;
1c00edee:	17fd                	addi	a5,a5,-1
1c00edf0:	c19c                	sw	a5,0(a1)
		*fr = *fr * 10U;
1c00edf2:	411c                	lw	a5,0(a0)
1c00edf4:	4729                	li	a4,10
1c00edf6:	4150                	lw	a2,4(a0)
1c00edf8:	02f706b3          	mul	a3,a4,a5
1c00edfc:	02f737b3          	mulhu	a5,a4,a5
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00ee00:	c114                	sw	a3,0(a0)
		*fr = *fr * 10U;
1c00ee02:	42c707b3          	p.mac	a5,a4,a2
		rval = ((*fr >> 60) & 0xF) + '0';
1c00ee06:	01c7d713          	srli	a4,a5,0x1c
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00ee0a:	c7c7b7b3          	p.bclr	a5,a5,3,28
		rval = ((*fr >> 60) & 0xF) + '0';
1c00ee0e:	03070713          	addi	a4,a4,48
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00ee12:	c15c                	sw	a5,4(a0)
	}

	return rval;
}
1c00ee14:	853a                	mv	a0,a4
1c00ee16:	8082                	ret

1c00ee18 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
1c00ee18:	7135                	addi	sp,sp,-160
1c00ee1a:	c94a                	sw	s2,144(sp)
1c00ee1c:	c74e                	sw	s3,140(sp)
1c00ee1e:	c15a                	sw	s6,128(sp)
1c00ee20:	dede                	sw	s7,124(sp)
1c00ee22:	cf06                	sw	ra,156(sp)
1c00ee24:	cd22                	sw	s0,152(sp)
1c00ee26:	cb26                	sw	s1,148(sp)
1c00ee28:	c552                	sw	s4,136(sp)
1c00ee2a:	c356                	sw	s5,132(sp)
1c00ee2c:	dce2                	sw	s8,120(sp)
1c00ee2e:	dae6                	sw	s9,116(sp)
1c00ee30:	d8ea                	sw	s10,112(sp)
1c00ee32:	d6ee                	sw	s11,108(sp)
1c00ee34:	8b2a                	mv	s6,a0
1c00ee36:	8bae                	mv	s7,a1
1c00ee38:	8936                	mv	s2,a3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
1c00ee3a:	4981                	li	s3,0

	while ((c = *format++)) {
1c00ee3c:	00064503          	lbu	a0,0(a2)
1c00ee40:	00160c13          	addi	s8,a2,1
1c00ee44:	c911                	beqz	a0,1c00ee58 <_prf+0x40>
		if (c != '%') {
1c00ee46:	02500793          	li	a5,37
1c00ee4a:	14f50563          	beq	a0,a5,1c00ef94 <_prf+0x17c>
			PUTC(c);
1c00ee4e:	85de                	mv	a1,s7
1c00ee50:	9b02                	jalr	s6
1c00ee52:	13f53fe3          	p.bneimm	a0,-1,1c00f790 <_prf+0x978>
1c00ee56:	59fd                	li	s3,-1
		}
	}
	return count;

#undef PUTC
}
1c00ee58:	40fa                	lw	ra,156(sp)
1c00ee5a:	446a                	lw	s0,152(sp)
1c00ee5c:	854e                	mv	a0,s3
1c00ee5e:	44da                	lw	s1,148(sp)
1c00ee60:	494a                	lw	s2,144(sp)
1c00ee62:	49ba                	lw	s3,140(sp)
1c00ee64:	4a2a                	lw	s4,136(sp)
1c00ee66:	4a9a                	lw	s5,132(sp)
1c00ee68:	4b0a                	lw	s6,128(sp)
1c00ee6a:	5bf6                	lw	s7,124(sp)
1c00ee6c:	5c66                	lw	s8,120(sp)
1c00ee6e:	5cd6                	lw	s9,116(sp)
1c00ee70:	5d46                	lw	s10,112(sp)
1c00ee72:	5db6                	lw	s11,108(sp)
1c00ee74:	610d                	addi	sp,sp,160
1c00ee76:	8082                	ret
				switch (c) {
1c00ee78:	108d8663          	beq	s11,s0,1c00ef84 <_prf+0x16c>
1c00ee7c:	0fb46863          	bltu	s0,s11,1c00ef6c <_prf+0x154>
1c00ee80:	fc0d8ce3          	beqz	s11,1c00ee58 <_prf+0x40>
1c00ee84:	0ecd8d63          	beq	s11,a2,1c00ef7e <_prf+0x166>
					fplus = true;
1c00ee88:	8c52                	mv	s8,s4
			while (strchr("-+ #0", (c = *format++)) != NULL) {
1c00ee8a:	000c4d83          	lbu	s11,0(s8)
1c00ee8e:	1c010737          	lui	a4,0x1c010
1c00ee92:	56470513          	addi	a0,a4,1380 # 1c010564 <__hyper_pad+0x11c>
1c00ee96:	85ee                	mv	a1,s11
1c00ee98:	c232                	sw	a2,4(sp)
1c00ee9a:	b33ff0ef          	jal	ra,1c00e9cc <strchr>
1c00ee9e:	001c0a13          	addi	s4,s8,1
1c00eea2:	4612                	lw	a2,4(sp)
1c00eea4:	f971                	bnez	a0,1c00ee78 <_prf+0x60>
			if (c == '*') {
1c00eea6:	02a00713          	li	a4,42
1c00eeaa:	10ed9563          	bne	s11,a4,1c00efb4 <_prf+0x19c>
				width = va_arg(vargs, int);
1c00eeae:	00092c83          	lw	s9,0(s2)
1c00eeb2:	00490713          	addi	a4,s2,4
				if (width < 0) {
1c00eeb6:	000cd663          	bgez	s9,1c00eec2 <_prf+0xaa>
					fminus = true;
1c00eeba:	4785                	li	a5,1
					width = -width;
1c00eebc:	41900cb3          	neg	s9,s9
					fminus = true;
1c00eec0:	cc3e                	sw	a5,24(sp)
				c = *format++;
1c00eec2:	000a4d83          	lbu	s11,0(s4)
				width = va_arg(vargs, int);
1c00eec6:	893a                	mv	s2,a4
				c = *format++;
1c00eec8:	002c0a13          	addi	s4,s8,2
			if (c == '.') {
1c00eecc:	02e00713          	li	a4,46
			precision = -1;
1c00eed0:	547d                	li	s0,-1
			if (c == '.') {
1c00eed2:	00ed9f63          	bne	s11,a4,1c00eef0 <_prf+0xd8>
				if (c == '*') {
1c00eed6:	000a4703          	lbu	a4,0(s4)
1c00eeda:	02a00793          	li	a5,42
1c00eede:	10f71e63          	bne	a4,a5,1c00effa <_prf+0x1e2>
					precision = va_arg(vargs, int);
1c00eee2:	00092403          	lw	s0,0(s2)
				c = *format++;
1c00eee6:	0a05                	addi	s4,s4,1
					precision = va_arg(vargs, int);
1c00eee8:	0911                	addi	s2,s2,4
				c = *format++;
1c00eeea:	000a4d83          	lbu	s11,0(s4)
1c00eeee:	0a05                	addi	s4,s4,1
			if (strchr("hlz", c) != NULL) {
1c00eef0:	1c010737          	lui	a4,0x1c010
1c00eef4:	85ee                	mv	a1,s11
1c00eef6:	56c70513          	addi	a0,a4,1388 # 1c01056c <__hyper_pad+0x124>
1c00eefa:	84ee                	mv	s1,s11
1c00eefc:	ad1ff0ef          	jal	ra,1c00e9cc <strchr>
1c00ef00:	10050e63          	beqz	a0,1c00f01c <_prf+0x204>
				if (i == 'l' && c == 'l') {
1c00ef04:	06c00693          	li	a3,108
				c = *format++;
1c00ef08:	001a0c13          	addi	s8,s4,1
1c00ef0c:	000a4d83          	lbu	s11,0(s4)
				if (i == 'l' && c == 'l') {
1c00ef10:	0ed49963          	bne	s1,a3,1c00f002 <_prf+0x1ea>
1c00ef14:	009d9863          	bne	s11,s1,1c00ef24 <_prf+0x10c>
					c = *format++;
1c00ef18:	001a4d83          	lbu	s11,1(s4)
1c00ef1c:	002a0c13          	addi	s8,s4,2
					i = 'L';
1c00ef20:	04c00493          	li	s1,76
			switch (c) {
1c00ef24:	06700693          	li	a3,103
1c00ef28:	17b6e263          	bltu	a3,s11,1c00f08c <_prf+0x274>
1c00ef2c:	06500693          	li	a3,101
1c00ef30:	32ddfc63          	bleu	a3,s11,1c00f268 <_prf+0x450>
1c00ef34:	04700693          	li	a3,71
1c00ef38:	0fb6e563          	bltu	a3,s11,1c00f022 <_prf+0x20a>
1c00ef3c:	04500713          	li	a4,69
1c00ef40:	32edf463          	bleu	a4,s11,1c00f268 <_prf+0x450>
1c00ef44:	f00d8ae3          	beqz	s11,1c00ee58 <_prf+0x40>
1c00ef48:	02500713          	li	a4,37
1c00ef4c:	02ed8de3          	beq	s11,a4,1c00f786 <_prf+0x96e>
				PUTC('%');
1c00ef50:	85de                	mv	a1,s7
1c00ef52:	02500513          	li	a0,37
1c00ef56:	9b02                	jalr	s6
1c00ef58:	eff52fe3          	p.beqimm	a0,-1,1c00ee56 <_prf+0x3e>
				PUTC(c);
1c00ef5c:	85de                	mv	a1,s7
1c00ef5e:	856e                	mv	a0,s11
1c00ef60:	9b02                	jalr	s6
1c00ef62:	eff52ae3          	p.beqimm	a0,-1,1c00ee56 <_prf+0x3e>
				count += 2;
1c00ef66:	0989                	addi	s3,s3,2
1c00ef68:	02b0006f          	j	1c00f792 <_prf+0x97a>
				switch (c) {
1c00ef6c:	039d8163          	beq	s11,s9,1c00ef8e <_prf+0x176>
1c00ef70:	009d8c63          	beq	s11,s1,1c00ef88 <_prf+0x170>
1c00ef74:	f1ad9ae3          	bne	s11,s10,1c00ee88 <_prf+0x70>
					fplus = true;
1c00ef78:	4705                	li	a4,1
1c00ef7a:	c63a                	sw	a4,12(sp)
					break;
1c00ef7c:	b731                	j	1c00ee88 <_prf+0x70>
					fspace = true;
1c00ef7e:	4785                	li	a5,1
1c00ef80:	c83e                	sw	a5,16(sp)
					break;
1c00ef82:	b719                	j	1c00ee88 <_prf+0x70>
					falt = true;
1c00ef84:	4a85                	li	s5,1
					break;
1c00ef86:	b709                	j	1c00ee88 <_prf+0x70>
					fzero = true;
1c00ef88:	4705                	li	a4,1
1c00ef8a:	ce3a                	sw	a4,28(sp)
					break;
1c00ef8c:	bdf5                	j	1c00ee88 <_prf+0x70>
					fminus = true;
1c00ef8e:	4785                	li	a5,1
1c00ef90:	cc3e                	sw	a5,24(sp)
1c00ef92:	bddd                	j	1c00ee88 <_prf+0x70>
			fminus = fplus = fspace = falt = fzero = false;
1c00ef94:	ce02                	sw	zero,28(sp)
1c00ef96:	c802                	sw	zero,16(sp)
1c00ef98:	c602                	sw	zero,12(sp)
1c00ef9a:	cc02                	sw	zero,24(sp)
1c00ef9c:	4a81                	li	s5,0
				switch (c) {
1c00ef9e:	02300413          	li	s0,35
1c00efa2:	02d00c93          	li	s9,45
1c00efa6:	03000493          	li	s1,48
1c00efaa:	02b00d13          	li	s10,43
1c00efae:	02000613          	li	a2,32
1c00efb2:	bde1                	j	1c00ee8a <_prf+0x72>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
1c00efb4:	fd0d8713          	addi	a4,s11,-48
			} else if (!isdigit(c)) {
1c00efb8:	46a5                	li	a3,9
				width = 0;
1c00efba:	4c81                	li	s9,0
			} else if (!isdigit(c)) {
1c00efbc:	f0e6e8e3          	bltu	a3,a4,1c00eecc <_prf+0xb4>
	while (isdigit(*p)) {
1c00efc0:	4725                	li	a4,9
		i = 10 * i + *p++ - '0';
1c00efc2:	4629                	li	a2,10
	while (isdigit(*p)) {
1c00efc4:	8a62                	mv	s4,s8
1c00efc6:	001a4d8b          	p.lbu	s11,1(s4!)
1c00efca:	fd0d8693          	addi	a3,s11,-48
1c00efce:	eed76fe3          	bltu	a4,a3,1c00eecc <_prf+0xb4>
		i = 10 * i + *p++ - '0';
1c00efd2:	87ee                	mv	a5,s11
1c00efd4:	42cc87b3          	p.mac	a5,s9,a2
1c00efd8:	8c52                	mv	s8,s4
1c00efda:	fd078c93          	addi	s9,a5,-48
1c00efde:	b7dd                	j	1c00efc4 <_prf+0x1ac>
1c00efe0:	42b407b3          	p.mac	a5,s0,a1
1c00efe4:	8a3a                	mv	s4,a4
1c00efe6:	fd078413          	addi	s0,a5,-48
	while (isdigit(*p)) {
1c00efea:	8752                	mv	a4,s4
1c00efec:	0017478b          	p.lbu	a5,1(a4!)
1c00eff0:	fd078613          	addi	a2,a5,-48
1c00eff4:	fec6f6e3          	bleu	a2,a3,1c00efe0 <_prf+0x1c8>
1c00eff8:	bdcd                	j	1c00eeea <_prf+0xd2>
	int i = 0;
1c00effa:	4401                	li	s0,0
	while (isdigit(*p)) {
1c00effc:	46a5                	li	a3,9
		i = 10 * i + *p++ - '0';
1c00effe:	45a9                	li	a1,10
1c00f000:	b7ed                	j	1c00efea <_prf+0x1d2>
				} else if (i == 'h' && c == 'h') {
1c00f002:	06800693          	li	a3,104
1c00f006:	f0d49fe3          	bne	s1,a3,1c00ef24 <_prf+0x10c>
1c00f00a:	f09d9de3          	bne	s11,s1,1c00ef24 <_prf+0x10c>
					c = *format++;
1c00f00e:	002a0c13          	addi	s8,s4,2
1c00f012:	001a4d83          	lbu	s11,1(s4)
					i = 'H';
1c00f016:	04800493          	li	s1,72
1c00f01a:	b729                	j	1c00ef24 <_prf+0x10c>
1c00f01c:	8c52                	mv	s8,s4
			i = 0;
1c00f01e:	4481                	li	s1,0
1c00f020:	b711                	j	1c00ef24 <_prf+0x10c>
			switch (c) {
1c00f022:	06300693          	li	a3,99
1c00f026:	12dd8a63          	beq	s11,a3,1c00f15a <_prf+0x342>
1c00f02a:	09b6e163          	bltu	a3,s11,1c00f0ac <_prf+0x294>
1c00f02e:	05800693          	li	a3,88
1c00f032:	f0dd9fe3          	bne	s11,a3,1c00ef50 <_prf+0x138>
				switch (i) {
1c00f036:	06c00693          	li	a3,108
1c00f03a:	6cd48363          	beq	s1,a3,1c00f700 <_prf+0x8e8>
1c00f03e:	07a00693          	li	a3,122
1c00f042:	6ad48f63          	beq	s1,a3,1c00f700 <_prf+0x8e8>
1c00f046:	04c00693          	li	a3,76
1c00f04a:	6ad49b63          	bne	s1,a3,1c00f700 <_prf+0x8e8>
					val = va_arg(vargs, unsigned long long);
1c00f04e:	091d                	addi	s2,s2,7
1c00f050:	c4093933          	p.bclr	s2,s2,2,0
1c00f054:	00092583          	lw	a1,0(s2)
1c00f058:	00492603          	lw	a2,4(s2)
1c00f05c:	00890a13          	addi	s4,s2,8
				if (c == 'o') {
1c00f060:	06f00713          	li	a4,111
1c00f064:	00c4                	addi	s1,sp,68
1c00f066:	6aed9d63          	bne	s11,a4,1c00f720 <_prf+0x908>
	if (alt_form) {
1c00f06a:	6a0a8163          	beqz	s5,1c00f70c <_prf+0x8f4>
		*buf++ = '0';
1c00f06e:	03000793          	li	a5,48
1c00f072:	04f10223          	sb	a5,68(sp)
		if (!value) {
1c00f076:	00c5e7b3          	or	a5,a1,a2
		*buf++ = '0';
1c00f07a:	04510513          	addi	a0,sp,69
		if (!value) {
1c00f07e:	68079863          	bnez	a5,1c00f70e <_prf+0x8f6>
			*buf++ = 0;
1c00f082:	040102a3          	sb	zero,69(sp)
			prefix = 0;
1c00f086:	4901                	li	s2,0
			return 1;
1c00f088:	4d85                	li	s11,1
1c00f08a:	a069                	j	1c00f114 <_prf+0x2fc>
			switch (c) {
1c00f08c:	07000693          	li	a3,112
1c00f090:	62dd8f63          	beq	s11,a3,1c00f6ce <_prf+0x8b6>
1c00f094:	09b6e663          	bltu	a3,s11,1c00f120 <_prf+0x308>
1c00f098:	06e00693          	li	a3,110
1c00f09c:	5edd8463          	beq	s11,a3,1c00f684 <_prf+0x86c>
1c00f0a0:	f9b6ebe3          	bltu	a3,s11,1c00f036 <_prf+0x21e>
1c00f0a4:	06900693          	li	a3,105
1c00f0a8:	eadd94e3          	bne	s11,a3,1c00ef50 <_prf+0x138>
				switch (i) {
1c00f0ac:	06c00793          	li	a5,108
1c00f0b0:	18f48563          	beq	s1,a5,1c00f23a <_prf+0x422>
1c00f0b4:	07a00793          	li	a5,122
1c00f0b8:	18f48163          	beq	s1,a5,1c00f23a <_prf+0x422>
1c00f0bc:	04c00793          	li	a5,76
1c00f0c0:	16f49d63          	bne	s1,a5,1c00f23a <_prf+0x422>
					val = va_arg(vargs, long long);
1c00f0c4:	091d                	addi	s2,s2,7
1c00f0c6:	c4093933          	p.bclr	s2,s2,2,0
1c00f0ca:	00092583          	lw	a1,0(s2)
1c00f0ce:	00492a83          	lw	s5,4(s2)
1c00f0d2:	00890a13          	addi	s4,s2,8
1c00f0d6:	04410d93          	addi	s11,sp,68
	if (value < 0) {
1c00f0da:	160ad763          	bgez	s5,1c00f248 <_prf+0x430>
		*buf++ = '-';
1c00f0de:	02d00793          	li	a5,45
		value = -value;
1c00f0e2:	40b005b3          	neg	a1,a1
		*buf++ = '-';
1c00f0e6:	04f10223          	sb	a5,68(sp)
		value = -value;
1c00f0ea:	41500633          	neg	a2,s5
1c00f0ee:	00b037b3          	snez	a5,a1
1c00f0f2:	8e1d                	sub	a2,a2,a5
		*buf++ = ' ';
1c00f0f4:	04510913          	addi	s2,sp,69
	return _to_x(buf, value, 10);
1c00f0f8:	854a                	mv	a0,s2
1c00f0fa:	46a9                	li	a3,10
1c00f0fc:	bf3ff0ef          	jal	ra,1c00ecee <_to_x>
				if (fplus || fspace || val < 0) {
1c00f100:	47b2                	lw	a5,12(sp)
	return (buf + _to_udec(buf, value)) - start;
1c00f102:	954a                	add	a0,a0,s2
1c00f104:	41b50db3          	sub	s11,a0,s11
					prefix = 1;
1c00f108:	4905                	li	s2,1
				if (fplus || fspace || val < 0) {
1c00f10a:	e789                	bnez	a5,1c00f114 <_prf+0x2fc>
1c00f10c:	4742                	lw	a4,16(sp)
1c00f10e:	e319                	bnez	a4,1c00f114 <_prf+0x2fc>
1c00f110:	01fad913          	srli	s2,s5,0x1f
			if (precision >= 0) {
1c00f114:	04045c63          	bgez	s0,1c00f16c <_prf+0x354>
			zero.predot = zero.postdot = zero.trail = 0;
1c00f118:	4401                	li	s0,0
1c00f11a:	4a81                	li	s5,0
1c00f11c:	4681                	li	a3,0
1c00f11e:	a401                	j	1c00f31e <_prf+0x506>
			switch (c) {
1c00f120:	07500693          	li	a3,117
1c00f124:	f0dd89e3          	beq	s11,a3,1c00f036 <_prf+0x21e>
1c00f128:	07800693          	li	a3,120
1c00f12c:	f0dd85e3          	beq	s11,a3,1c00f036 <_prf+0x21e>
1c00f130:	07300713          	li	a4,115
1c00f134:	e0ed9ee3          	bne	s11,a4,1c00ef50 <_prf+0x138>
				cptr = va_arg(vargs, char *);
1c00f138:	00490a13          	addi	s4,s2,4
1c00f13c:	00092783          	lw	a5,0(s2)
				if (precision < 0) {
1c00f140:	00045663          	bgez	s0,1c00f14c <_prf+0x334>
					precision = INT_MAX;
1c00f144:	80000737          	lui	a4,0x80000
1c00f148:	fff74413          	not	s0,a4
1c00f14c:	86be                	mv	a3,a5
				for (clen = 0; clen < precision; clen++) {
1c00f14e:	4d81                	li	s11,0
1c00f150:	5bb41263          	bne	s0,s11,1c00f6f4 <_prf+0x8dc>
1c00f154:	4901                	li	s2,0
1c00f156:	4401                	li	s0,0
1c00f158:	a819                	j	1c00f16e <_prf+0x356>
				buf[0] = va_arg(vargs, int);
1c00f15a:	00092783          	lw	a5,0(s2)
1c00f15e:	00490a13          	addi	s4,s2,4
				clen = 1;
1c00f162:	4d85                	li	s11,1
				buf[0] = va_arg(vargs, int);
1c00f164:	04f10223          	sb	a5,68(sp)
				break;
1c00f168:	4901                	li	s2,0
1c00f16a:	4401                	li	s0,0
1c00f16c:	00dc                	addi	a5,sp,68
				zero_head = precision - clen + prefix;
1c00f16e:	41b40d33          	sub	s10,s0,s11
1c00f172:	9d4a                	add	s10,s10,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00f174:	4401                	li	s0,0
1c00f176:	4a81                	li	s5,0
1c00f178:	4681                	li	a3,0
1c00f17a:	040d6d33          	p.max	s10,s10,zero
			if (!fminus && width > 0) {
1c00f17e:	4762                	lw	a4,24(sp)
			width -= clen + zero_head;
1c00f180:	01bd0633          	add	a2,s10,s11
1c00f184:	40cc8cb3          	sub	s9,s9,a2
			if (!fminus && width > 0) {
1c00f188:	e701                	bnez	a4,1c00f190 <_prf+0x378>
1c00f18a:	84e6                	mv	s1,s9
1c00f18c:	63904263          	bgtz	s9,1c00f7b0 <_prf+0x998>
1c00f190:	012784b3          	add	s1,a5,s2
			while (prefix-- > 0) {
1c00f194:	62979463          	bne	a5,s1,1c00f7bc <_prf+0x9a4>
1c00f198:	84ea                	mv	s1,s10
			while (zero_head-- > 0) {
1c00f19a:	14fd                	addi	s1,s1,-1
1c00f19c:	63f4bc63          	p.bneimm	s1,-1,1c00f7d4 <_prf+0x9bc>
			clen -= prefix;
1c00f1a0:	412d84b3          	sub	s1,s11,s2
1c00f1a4:	8726                	mv	a4,s1
			if (zero.predot) {
1c00f1a6:	c295                	beqz	a3,1c00f1ca <_prf+0x3b2>
				c = *cptr;
1c00f1a8:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c)) {
1c00f1ac:	8dbe                	mv	s11,a5
1c00f1ae:	00978833          	add	a6,a5,s1
1c00f1b2:	4625                	li	a2,9
1c00f1b4:	fd050593          	addi	a1,a0,-48
1c00f1b8:	41b80733          	sub	a4,a6,s11
1c00f1bc:	62b67863          	bleu	a1,a2,1c00f7ec <_prf+0x9d4>
1c00f1c0:	8636                	mv	a2,a3
				while (zero.predot-- > 0) {
1c00f1c2:	64061363          	bnez	a2,1c00f808 <_prf+0x9f0>
				clen -= zero.predot;
1c00f1c6:	8f15                	sub	a4,a4,a3
1c00f1c8:	87ee                	mv	a5,s11
			if (zero.postdot) {
1c00f1ca:	020a8e63          	beqz	s5,1c00f206 <_prf+0x3ee>
1c00f1ce:	8dbe                	mv	s11,a5
1c00f1d0:	00e78833          	add	a6,a5,a4
				} while (c != '.');
1c00f1d4:	02e00613          	li	a2,46
					c = *cptr++;
1c00f1d8:	001dc68b          	p.lbu	a3,1(s11!)
					PUTC(c);
1c00f1dc:	85de                	mv	a1,s7
1c00f1de:	c232                	sw	a2,4(sp)
1c00f1e0:	8536                	mv	a0,a3
1c00f1e2:	c036                	sw	a3,0(sp)
1c00f1e4:	c442                	sw	a6,8(sp)
1c00f1e6:	9b02                	jalr	s6
1c00f1e8:	4612                	lw	a2,4(sp)
1c00f1ea:	4682                	lw	a3,0(sp)
1c00f1ec:	4822                	lw	a6,8(sp)
1c00f1ee:	c7f524e3          	p.beqimm	a0,-1,1c00ee56 <_prf+0x3e>
1c00f1f2:	41b80733          	sub	a4,a6,s11
				} while (c != '.');
1c00f1f6:	fec691e3          	bne	a3,a2,1c00f1d8 <_prf+0x3c0>
1c00f1fa:	86d6                	mv	a3,s5
				while (zero.postdot-- > 0) {
1c00f1fc:	62d04563          	bgtz	a3,1c00f826 <_prf+0xa0e>
				clen -= zero.postdot;
1c00f200:	41570733          	sub	a4,a4,s5
					c = *cptr++;
1c00f204:	87ee                	mv	a5,s11
			if (zero.trail) {
1c00f206:	c415                	beqz	s0,1c00f232 <_prf+0x41a>
				c = *cptr;
1c00f208:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c) || c == '.') {
1c00f20c:	8dbe                	mv	s11,a5
1c00f20e:	973e                	add	a4,a4,a5
1c00f210:	4625                	li	a2,9
1c00f212:	02e00693          	li	a3,46
1c00f216:	fd050593          	addi	a1,a0,-48
1c00f21a:	41b70ab3          	sub	s5,a4,s11
1c00f21e:	62b67163          	bleu	a1,a2,1c00f840 <_prf+0xa28>
1c00f222:	60d50f63          	beq	a0,a3,1c00f840 <_prf+0xa28>
1c00f226:	8722                	mv	a4,s0
				while (zero.trail-- > 0) {
1c00f228:	62e04a63          	bgtz	a4,1c00f85c <_prf+0xa44>
				clen -= zero.trail;
1c00f22c:	408a8733          	sub	a4,s5,s0
1c00f230:	87ee                	mv	a5,s11
1c00f232:	843e                	mv	s0,a5
1c00f234:	00e78ab3          	add	s5,a5,a4
1c00f238:	a599                	j	1c00f87e <_prf+0xa66>
					val = va_arg(vargs, int);
1c00f23a:	00092583          	lw	a1,0(s2)
1c00f23e:	00490a13          	addi	s4,s2,4
1c00f242:	41f5da93          	srai	s5,a1,0x1f
					break;
1c00f246:	bd41                	j	1c00f0d6 <_prf+0x2be>
	} else if (fplus) {
1c00f248:	47b2                	lw	a5,12(sp)
1c00f24a:	c799                	beqz	a5,1c00f258 <_prf+0x440>
		*buf++ = '+';
1c00f24c:	02b00793          	li	a5,43
		*buf++ = ' ';
1c00f250:	04f10223          	sb	a5,68(sp)
1c00f254:	8656                	mv	a2,s5
1c00f256:	bd79                	j	1c00f0f4 <_prf+0x2dc>
	} else if (fspace) {
1c00f258:	4742                	lw	a4,16(sp)
1c00f25a:	c701                	beqz	a4,1c00f262 <_prf+0x44a>
		*buf++ = ' ';
1c00f25c:	02000793          	li	a5,32
1c00f260:	bfc5                	j	1c00f250 <_prf+0x438>
	} else if (fspace) {
1c00f262:	8656                	mv	a2,s5
1c00f264:	896e                	mv	s2,s11
1c00f266:	bd49                	j	1c00f0f8 <_prf+0x2e0>
				u.d = va_arg(vargs, double);
1c00f268:	091d                	addi	s2,s2,7
1c00f26a:	c4093933          	p.bclr	s2,s2,2,0
				double_val = u.i;
1c00f26e:	00092583          	lw	a1,0(s2)
1c00f272:	00492683          	lw	a3,4(s2)
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00f276:	800007b7          	lui	a5,0x80000
1c00f27a:	0155d613          	srli	a2,a1,0x15
1c00f27e:	00b69713          	slli	a4,a3,0xb
1c00f282:	8f51                	or	a4,a4,a2
1c00f284:	fff7c793          	not	a5,a5
1c00f288:	05ae                	slli	a1,a1,0xb
1c00f28a:	8f7d                	and	a4,a4,a5
				u.d = va_arg(vargs, double);
1c00f28c:	00890a13          	addi	s4,s2,8
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00f290:	d82e                	sw	a1,48(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00f292:	0146d913          	srli	s2,a3,0x14
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00f296:	da3a                	sw	a4,52(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00f298:	e8b93933          	p.bclr	s2,s2,20,11
	if (sign) {
1c00f29c:	0806d863          	bgez	a3,1c00f32c <_prf+0x514>
		*buf++ = '-';
1c00f2a0:	02d00693          	li	a3,45
		*buf++ = ' ';
1c00f2a4:	04d10223          	sb	a3,68(sp)
1c00f2a8:	04510493          	addi	s1,sp,69
	if (exp == 0x7ff) {
1c00f2ac:	7ff00693          	li	a3,2047
1c00f2b0:	0cd91363          	bne	s2,a3,1c00f376 <_prf+0x55e>
		if (!fract) {
1c00f2b4:	8f4d                	or	a4,a4,a1
1c00f2b6:	fbfd8793          	addi	a5,s11,-65
1c00f2ba:	00348513          	addi	a0,s1,3
1c00f2be:	eb49                	bnez	a4,1c00f350 <_prf+0x538>
			if (isupper(c)) {
1c00f2c0:	4765                	li	a4,25
1c00f2c2:	06f76f63          	bltu	a4,a5,1c00f340 <_prf+0x528>
				*buf++ = 'I';
1c00f2c6:	6795                	lui	a5,0x5
1c00f2c8:	e4978793          	addi	a5,a5,-439 # 4e49 <__rt_stack_size+0x4649>
1c00f2cc:	00f49023          	sh	a5,0(s1)
				*buf++ = 'N';
1c00f2d0:	04600793          	li	a5,70
		return buf - start;
1c00f2d4:	04410913          	addi	s2,sp,68
				*buf++ = 'a';
1c00f2d8:	00f48123          	sb	a5,2(s1)
		*buf = 0;
1c00f2dc:	000481a3          	sb	zero,3(s1)
		return buf - start;
1c00f2e0:	41250533          	sub	a0,a0,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00f2e4:	4401                	li	s0,0
1c00f2e6:	4a81                	li	s5,0
1c00f2e8:	4681                	li	a3,0
				if (fplus || fspace || (buf[0] == '-')) {
1c00f2ea:	4732                	lw	a4,12(sp)
					prefix = 1;
1c00f2ec:	4905                	li	s2,1
				if (fplus || fspace || (buf[0] == '-')) {
1c00f2ee:	eb09                	bnez	a4,1c00f300 <_prf+0x4e8>
1c00f2f0:	47c2                	lw	a5,16(sp)
1c00f2f2:	e799                	bnez	a5,1c00f300 <_prf+0x4e8>
1c00f2f4:	04414903          	lbu	s2,68(sp)
1c00f2f8:	fd390913          	addi	s2,s2,-45
1c00f2fc:	00193913          	seqz	s2,s2
				if (!isdigit(buf[prefix])) {
1c00f300:	1098                	addi	a4,sp,96
1c00f302:	012707b3          	add	a5,a4,s2
1c00f306:	fe47c783          	lbu	a5,-28(a5)
				clen += zero.predot + zero.postdot + zero.trail;
1c00f30a:	015684b3          	add	s1,a3,s5
1c00f30e:	94a2                	add	s1,s1,s0
1c00f310:	fd078793          	addi	a5,a5,-48
				if (!isdigit(buf[prefix])) {
1c00f314:	4625                	li	a2,9
				clen += zero.predot + zero.postdot + zero.trail;
1c00f316:	00a48db3          	add	s11,s1,a0
				if (!isdigit(buf[prefix])) {
1c00f31a:	46f66e63          	bltu	a2,a5,1c00f796 <_prf+0x97e>
			} else if (fzero) {
1c00f31e:	47f2                	lw	a5,28(sp)
1c00f320:	46078b63          	beqz	a5,1c00f796 <_prf+0x97e>
				zero_head = width - clen;
1c00f324:	41bc8d33          	sub	s10,s9,s11
1c00f328:	00dc                	addi	a5,sp,68
1c00f32a:	bd81                	j	1c00f17a <_prf+0x362>
	} else if (fplus) {
1c00f32c:	47b2                	lw	a5,12(sp)
		*buf++ = '+';
1c00f32e:	02b00693          	li	a3,43
	} else if (fplus) {
1c00f332:	fbad                	bnez	a5,1c00f2a4 <_prf+0x48c>
	} else if (fspace) {
1c00f334:	47c2                	lw	a5,16(sp)
1c00f336:	00c4                	addi	s1,sp,68
1c00f338:	dbb5                	beqz	a5,1c00f2ac <_prf+0x494>
		*buf++ = ' ';
1c00f33a:	02000693          	li	a3,32
1c00f33e:	b79d                	j	1c00f2a4 <_prf+0x48c>
				*buf++ = 'i';
1c00f340:	679d                	lui	a5,0x7
1c00f342:	e6978793          	addi	a5,a5,-407 # 6e69 <__rt_stack_size+0x6669>
1c00f346:	00f49023          	sh	a5,0(s1)
				*buf++ = 'n';
1c00f34a:	06600793          	li	a5,102
1c00f34e:	b759                	j	1c00f2d4 <_prf+0x4bc>
			if (isupper(c)) {
1c00f350:	4765                	li	a4,25
1c00f352:	00f76a63          	bltu	a4,a5,1c00f366 <_prf+0x54e>
				*buf++ = 'N';
1c00f356:	6791                	lui	a5,0x4
1c00f358:	14e78793          	addi	a5,a5,334 # 414e <__rt_stack_size+0x394e>
1c00f35c:	00f49023          	sh	a5,0(s1)
				*buf++ = 'A';
1c00f360:	04e00793          	li	a5,78
1c00f364:	bf85                	j	1c00f2d4 <_prf+0x4bc>
				*buf++ = 'n';
1c00f366:	6799                	lui	a5,0x6
1c00f368:	16e78793          	addi	a5,a5,366 # 616e <__rt_stack_size+0x596e>
1c00f36c:	00f49023          	sh	a5,0(s1)
				*buf++ = 'a';
1c00f370:	06e00793          	li	a5,110
1c00f374:	b785                	j	1c00f2d4 <_prf+0x4bc>
	if (c == 'F') {
1c00f376:	04600693          	li	a3,70
1c00f37a:	00dd9463          	bne	s11,a3,1c00f382 <_prf+0x56a>
		c = 'f';
1c00f37e:	06600d93          	li	s11,102
	if ((exp | fract) != 0) {
1c00f382:	41f95613          	srai	a2,s2,0x1f
1c00f386:	00b966b3          	or	a3,s2,a1
1c00f38a:	8e59                	or	a2,a2,a4
1c00f38c:	8ed1                	or	a3,a3,a2
1c00f38e:	1c068263          	beqz	a3,1c00f552 <_prf+0x73a>
		if (exp == 0) {
1c00f392:	10090d63          	beqz	s2,1c00f4ac <_prf+0x694>
		fract |= HIGHBIT64;
1c00f396:	5752                	lw	a4,52(sp)
1c00f398:	800007b7          	lui	a5,0x80000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
1c00f39c:	c0290913          	addi	s2,s2,-1022
		fract |= HIGHBIT64;
1c00f3a0:	8f5d                	or	a4,a4,a5
1c00f3a2:	da3a                	sw	a4,52(sp)
1c00f3a4:	4d01                	li	s10,0
	while (exp <= -3) {
1c00f3a6:	5779                	li	a4,-2
1c00f3a8:	10e94f63          	blt	s2,a4,1c00f4c6 <_prf+0x6ae>
	while (exp > 0) {
1c00f3ac:	17204663          	bgtz	s2,1c00f518 <_prf+0x700>
		_rlrshift(&fract);
1c00f3b0:	1808                	addi	a0,sp,48
		exp++;
1c00f3b2:	0905                	addi	s2,s2,1
		_rlrshift(&fract);
1c00f3b4:	9cdff0ef          	jal	ra,1c00ed80 <_rlrshift>
	while (exp < (0 + 4)) {
1c00f3b8:	fe493ce3          	p.bneimm	s2,4,1c00f3b0 <_prf+0x598>
	if (precision < 0) {
1c00f3bc:	00045363          	bgez	s0,1c00f3c2 <_prf+0x5aa>
		precision = 6;		/* Default precision if none given */
1c00f3c0:	4419                	li	s0,6
	if ((c == 'g') || (c == 'G')) {
1c00f3c2:	0dfdf713          	andi	a4,s11,223
1c00f3c6:	04700693          	li	a3,71
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00f3ca:	ca02                	sw	zero,20(sp)
	if ((c == 'g') || (c == 'G')) {
1c00f3cc:	02d71563          	bne	a4,a3,1c00f3f6 <_prf+0x5de>
		if (decexp < (-4 + 1) || decexp > precision) {
1c00f3d0:	5775                	li	a4,-3
1c00f3d2:	00ed4463          	blt	s10,a4,1c00f3da <_prf+0x5c2>
1c00f3d6:	19a45163          	ble	s10,s0,1c00f558 <_prf+0x740>
			c += 'e' - 'g';
1c00f3da:	ffed8793          	addi	a5,s11,-2
1c00f3de:	0ff7fd93          	andi	s11,a5,255
			if (precision > 0) {
1c00f3e2:	4c040e63          	beqz	s0,1c00f8be <_prf+0xaa6>
				precision--;
1c00f3e6:	147d                	addi	s0,s0,-1
		if (!falt && (precision > 0)) {
1c00f3e8:	4c0a9b63          	bnez	s5,1c00f8be <_prf+0xaa6>
1c00f3ec:	00802933          	sgtz	s2,s0
1c00f3f0:	0ff97913          	andi	s2,s2,255
1c00f3f4:	ca4a                	sw	s2,20(sp)
	if (c == 'f') {
1c00f3f6:	06600713          	li	a4,102
1c00f3fa:	4ced9363          	bne	s11,a4,1c00f8c0 <_prf+0xaa8>
		exp = precision + decexp;
1c00f3fe:	008d0733          	add	a4,s10,s0
		if (exp < 0) {
1c00f402:	06600d93          	li	s11,102
1c00f406:	4a075f63          	bgez	a4,1c00f8c4 <_prf+0xaac>
	digit_count = 16;
1c00f40a:	4741                	li	a4,16
1c00f40c:	d63a                	sw	a4,44(sp)
			exp = 0;
1c00f40e:	4901                	li	s2,0
	ltemp = 0x0800000000000000;
1c00f410:	4601                	li	a2,0
1c00f412:	080006b7          	lui	a3,0x8000
1c00f416:	dc32                	sw	a2,56(sp)
1c00f418:	de36                	sw	a3,60(sp)
	while (exp--) {
1c00f41a:	197d                	addi	s2,s2,-1
1c00f41c:	15f93563          	p.bneimm	s2,-1,1c00f566 <_prf+0x74e>
	fract += ltemp;
1c00f420:	5742                	lw	a4,48(sp)
1c00f422:	56e2                	lw	a3,56(sp)
1c00f424:	5652                	lw	a2,52(sp)
1c00f426:	55f2                	lw	a1,60(sp)
1c00f428:	96ba                	add	a3,a3,a4
1c00f42a:	00e6b733          	sltu	a4,a3,a4
1c00f42e:	962e                	add	a2,a2,a1
1c00f430:	9732                	add	a4,a4,a2
1c00f432:	da3a                	sw	a4,52(sp)
1c00f434:	d836                	sw	a3,48(sp)
	if ((fract >> 32) & 0xF0000000) {
1c00f436:	f6073733          	p.bclr	a4,a4,27,0
1c00f43a:	cb01                	beqz	a4,1c00f44a <_prf+0x632>
		_ldiv5(&fract);
1c00f43c:	1808                	addi	a0,sp,48
1c00f43e:	963ff0ef          	jal	ra,1c00eda0 <_ldiv5>
		_rlrshift(&fract);
1c00f442:	1808                	addi	a0,sp,48
1c00f444:	93dff0ef          	jal	ra,1c00ed80 <_rlrshift>
		decexp++;
1c00f448:	0d05                	addi	s10,s10,1
	if (c == 'f') {
1c00f44a:	06600713          	li	a4,102
1c00f44e:	16ed9163          	bne	s11,a4,1c00f5b0 <_prf+0x798>
		if (decexp > 0) {
1c00f452:	8926                	mv	s2,s1
1c00f454:	13a04963          	bgtz	s10,1c00f586 <_prf+0x76e>
			*buf++ = '0';
1c00f458:	03000713          	li	a4,48
1c00f45c:	00e48023          	sb	a4,0(s1)
1c00f460:	00148913          	addi	s2,s1,1
			zero.predot = zero.postdot = zero.trail = 0;
1c00f464:	4681                	li	a3,0
		if (falt || (precision > 0)) {
1c00f466:	120a8763          	beqz	s5,1c00f594 <_prf+0x77c>
			*buf++ = '.';
1c00f46a:	02e00593          	li	a1,46
1c00f46e:	00b90023          	sb	a1,0(s2)
1c00f472:	00190713          	addi	a4,s2,1
		if (decexp < 0 && precision > 0) {
1c00f476:	440d0263          	beqz	s10,1c00f8ba <_prf+0xaa2>
1c00f47a:	12805863          	blez	s0,1c00f5aa <_prf+0x792>
			zp->postdot = -decexp;
1c00f47e:	41a00ab3          	neg	s5,s10
1c00f482:	048acab3          	p.min	s5,s5,s0
			precision -= zp->postdot;
1c00f486:	41540433          	sub	s0,s0,s5
			zero.predot = zero.postdot = zero.trail = 0;
1c00f48a:	893a                	mv	s2,a4
		while (precision > 0 && digit_count > 0) {
1c00f48c:	10805763          	blez	s0,1c00f59a <_prf+0x782>
1c00f490:	5732                	lw	a4,44(sp)
1c00f492:	10e05463          	blez	a4,1c00f59a <_prf+0x782>
			*buf++ = _get_digit(&fract, &digit_count);
1c00f496:	106c                	addi	a1,sp,44
1c00f498:	1808                	addi	a0,sp,48
1c00f49a:	c036                	sw	a3,0(sp)
1c00f49c:	949ff0ef          	jal	ra,1c00ede4 <_get_digit>
1c00f4a0:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00f4a4:	147d                	addi	s0,s0,-1
1c00f4a6:	4682                	lw	a3,0(sp)
1c00f4a8:	b7d5                	j	1c00f48c <_prf+0x674>
				exp--;
1c00f4aa:	197d                	addi	s2,s2,-1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
1c00f4ac:	01f5d693          	srli	a3,a1,0x1f
1c00f4b0:	0706                	slli	a4,a4,0x1
1c00f4b2:	8f55                	or	a4,a4,a3
1c00f4b4:	0586                	slli	a1,a1,0x1
1c00f4b6:	fe075ae3          	bgez	a4,1c00f4aa <_prf+0x692>
1c00f4ba:	d82e                	sw	a1,48(sp)
1c00f4bc:	da3a                	sw	a4,52(sp)
1c00f4be:	bde1                	j	1c00f396 <_prf+0x57e>
			_rlrshift(&fract);
1c00f4c0:	1808                	addi	a0,sp,48
1c00f4c2:	8bfff0ef          	jal	ra,1c00ed80 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
1c00f4c6:	55d2                	lw	a1,52(sp)
1c00f4c8:	33333737          	lui	a4,0x33333
1c00f4cc:	33270713          	addi	a4,a4,818 # 33333332 <__l2_end+0x173225ea>
1c00f4d0:	5642                	lw	a2,48(sp)
1c00f4d2:	0905                	addi	s2,s2,1
1c00f4d4:	feb766e3          	bltu	a4,a1,1c00f4c0 <_prf+0x6a8>
		fract *= 5U;
1c00f4d8:	4695                	li	a3,5
1c00f4da:	02c6b733          	mulhu	a4,a3,a2
		decexp--;
1c00f4de:	1d7d                	addi	s10,s10,-1
		fract *= 5U;
1c00f4e0:	02c68633          	mul	a2,a3,a2
1c00f4e4:	42b68733          	p.mac	a4,a3,a1
1c00f4e8:	d832                	sw	a2,48(sp)
		decexp--;
1c00f4ea:	4681                	li	a3,0
		fract *= 5U;
1c00f4ec:	da3a                	sw	a4,52(sp)
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00f4ee:	800007b7          	lui	a5,0x80000
1c00f4f2:	fff7c793          	not	a5,a5
1c00f4f6:	00e7f763          	bleu	a4,a5,1c00f504 <_prf+0x6ec>
1c00f4fa:	ea0686e3          	beqz	a3,1c00f3a6 <_prf+0x58e>
1c00f4fe:	d832                	sw	a2,48(sp)
1c00f500:	da3a                	sw	a4,52(sp)
1c00f502:	b555                	j	1c00f3a6 <_prf+0x58e>
			fract <<= 1;
1c00f504:	01f65593          	srli	a1,a2,0x1f
1c00f508:	00171693          	slli	a3,a4,0x1
1c00f50c:	00d5e733          	or	a4,a1,a3
1c00f510:	0606                	slli	a2,a2,0x1
			exp--;
1c00f512:	197d                	addi	s2,s2,-1
1c00f514:	4685                	li	a3,1
1c00f516:	bfe1                	j	1c00f4ee <_prf+0x6d6>
		_ldiv5(&fract);
1c00f518:	1808                	addi	a0,sp,48
1c00f51a:	887ff0ef          	jal	ra,1c00eda0 <_ldiv5>
1c00f51e:	5642                	lw	a2,48(sp)
1c00f520:	5752                	lw	a4,52(sp)
		exp--;
1c00f522:	197d                	addi	s2,s2,-1
		decexp++;
1c00f524:	0d05                	addi	s10,s10,1
1c00f526:	4681                	li	a3,0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00f528:	800007b7          	lui	a5,0x80000
1c00f52c:	fff7c793          	not	a5,a5
1c00f530:	00e7f763          	bleu	a4,a5,1c00f53e <_prf+0x726>
1c00f534:	e6068ce3          	beqz	a3,1c00f3ac <_prf+0x594>
1c00f538:	d832                	sw	a2,48(sp)
1c00f53a:	da3a                	sw	a4,52(sp)
1c00f53c:	bd85                	j	1c00f3ac <_prf+0x594>
			fract <<= 1;
1c00f53e:	01f65593          	srli	a1,a2,0x1f
1c00f542:	00171693          	slli	a3,a4,0x1
1c00f546:	00d5e733          	or	a4,a1,a3
1c00f54a:	0606                	slli	a2,a2,0x1
			exp--;
1c00f54c:	197d                	addi	s2,s2,-1
1c00f54e:	4685                	li	a3,1
1c00f550:	bfe1                	j	1c00f528 <_prf+0x710>
	if ((exp | fract) != 0) {
1c00f552:	4d01                	li	s10,0
1c00f554:	4901                	li	s2,0
1c00f556:	bda9                	j	1c00f3b0 <_prf+0x598>
			precision -= decexp;
1c00f558:	41a40433          	sub	s0,s0,s10
		if (!falt && (precision > 0)) {
1c00f55c:	ea0a91e3          	bnez	s5,1c00f3fe <_prf+0x5e6>
			c = 'f';
1c00f560:	06600d93          	li	s11,102
1c00f564:	b561                	j	1c00f3ec <_prf+0x5d4>
		_ldiv5(&ltemp);
1c00f566:	1828                	addi	a0,sp,56
1c00f568:	839ff0ef          	jal	ra,1c00eda0 <_ldiv5>
		_rlrshift(&ltemp);
1c00f56c:	1828                	addi	a0,sp,56
1c00f56e:	813ff0ef          	jal	ra,1c00ed80 <_rlrshift>
1c00f572:	b565                	j	1c00f41a <_prf+0x602>
				*buf++ = _get_digit(&fract, &digit_count);
1c00f574:	106c                	addi	a1,sp,44
1c00f576:	1808                	addi	a0,sp,48
1c00f578:	86dff0ef          	jal	ra,1c00ede4 <_get_digit>
1c00f57c:	00a900ab          	p.sb	a0,1(s2!)
				decexp--;
1c00f580:	1d7d                	addi	s10,s10,-1
			while (decexp > 0 && digit_count > 0) {
1c00f582:	000d0563          	beqz	s10,1c00f58c <_prf+0x774>
1c00f586:	5732                	lw	a4,44(sp)
1c00f588:	fee046e3          	bgtz	a4,1c00f574 <_prf+0x75c>
		if (falt || (precision > 0)) {
1c00f58c:	300a9f63          	bnez	s5,1c00f8aa <_prf+0xa92>
			zp->predot = decexp;
1c00f590:	86ea                	mv	a3,s10
			decexp = 0;
1c00f592:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00f594:	4a81                	li	s5,0
		if (falt || (precision > 0)) {
1c00f596:	ec804ae3          	bgtz	s0,1c00f46a <_prf+0x652>
	if (prune_zero) {
1c00f59a:	4752                	lw	a4,20(sp)
1c00f59c:	eb31                	bnez	a4,1c00f5f0 <_prf+0x7d8>
	return buf - start;
1c00f59e:	00c8                	addi	a0,sp,68
	*buf = 0;
1c00f5a0:	00090023          	sb	zero,0(s2)
	return buf - start;
1c00f5a4:	40a90533          	sub	a0,s2,a0
1c00f5a8:	b389                	j	1c00f2ea <_prf+0x4d2>
			*buf++ = '.';
1c00f5aa:	893a                	mv	s2,a4
			zero.predot = zero.postdot = zero.trail = 0;
1c00f5ac:	4a81                	li	s5,0
1c00f5ae:	b7f5                	j	1c00f59a <_prf+0x782>
		*buf = _get_digit(&fract, &digit_count);
1c00f5b0:	106c                	addi	a1,sp,44
1c00f5b2:	1808                	addi	a0,sp,48
1c00f5b4:	831ff0ef          	jal	ra,1c00ede4 <_get_digit>
1c00f5b8:	00a48023          	sb	a0,0(s1)
		if (*buf++ != '0') {
1c00f5bc:	03000713          	li	a4,48
1c00f5c0:	00e50363          	beq	a0,a4,1c00f5c6 <_prf+0x7ae>
			decexp--;
1c00f5c4:	1d7d                	addi	s10,s10,-1
		if (falt || (precision > 0)) {
1c00f5c6:	000a9663          	bnez	s5,1c00f5d2 <_prf+0x7ba>
		if (*buf++ != '0') {
1c00f5ca:	00148913          	addi	s2,s1,1
		if (falt || (precision > 0)) {
1c00f5ce:	00805d63          	blez	s0,1c00f5e8 <_prf+0x7d0>
			*buf++ = '.';
1c00f5d2:	02e00713          	li	a4,46
1c00f5d6:	00248913          	addi	s2,s1,2
1c00f5da:	00e480a3          	sb	a4,1(s1)
		while (precision > 0 && digit_count > 0) {
1c00f5de:	00805563          	blez	s0,1c00f5e8 <_prf+0x7d0>
1c00f5e2:	5732                	lw	a4,44(sp)
1c00f5e4:	08e04663          	bgtz	a4,1c00f670 <_prf+0x858>
	if (prune_zero) {
1c00f5e8:	47d2                	lw	a5,20(sp)
			zero.predot = zero.postdot = zero.trail = 0;
1c00f5ea:	4a81                	li	s5,0
1c00f5ec:	4681                	li	a3,0
	if (prune_zero) {
1c00f5ee:	cf99                	beqz	a5,1c00f60c <_prf+0x7f4>
		while (*--buf == '0')
1c00f5f0:	03000513          	li	a0,48
1c00f5f4:	fff90713          	addi	a4,s2,-1
1c00f5f8:	00074583          	lbu	a1,0(a4)
1c00f5fc:	08a58263          	beq	a1,a0,1c00f680 <_prf+0x868>
		if (*buf != '.') {
1c00f600:	02e00513          	li	a0,46
		zp->trail = 0;
1c00f604:	4401                	li	s0,0
		if (*buf != '.') {
1c00f606:	00a59363          	bne	a1,a0,1c00f60c <_prf+0x7f4>
		while (*--buf == '0')
1c00f60a:	893a                	mv	s2,a4
	if ((c == 'e') || (c == 'E')) {
1c00f60c:	0dfdf713          	andi	a4,s11,223
1c00f610:	04500593          	li	a1,69
1c00f614:	f8b715e3          	bne	a4,a1,1c00f59e <_prf+0x786>
		*buf++ = c;
1c00f618:	85ca                	mv	a1,s2
1c00f61a:	01b5812b          	p.sb	s11,2(a1!)
			*buf++ = '+';
1c00f61e:	02b00793          	li	a5,43
		if (decexp < 0) {
1c00f622:	000d5663          	bgez	s10,1c00f62e <_prf+0x816>
			decexp = -decexp;
1c00f626:	41a00d33          	neg	s10,s10
			*buf++ = '-';
1c00f62a:	02d00793          	li	a5,45
			*buf++ = '+';
1c00f62e:	00f900a3          	sb	a5,1(s2)
		if (decexp >= 100) {
1c00f632:	06300793          	li	a5,99
1c00f636:	01a7de63          	ble	s10,a5,1c00f652 <_prf+0x83a>
			*buf++ = (decexp / 100) + '0';
1c00f63a:	06400713          	li	a4,100
1c00f63e:	02ed47b3          	div	a5,s10,a4
1c00f642:	00390593          	addi	a1,s2,3
			decexp %= 100;
1c00f646:	02ed6d33          	rem	s10,s10,a4
			*buf++ = (decexp / 100) + '0';
1c00f64a:	03078793          	addi	a5,a5,48 # 80000030 <pulp__FC+0x80000031>
1c00f64e:	00f90123          	sb	a5,2(s2)
		*buf++ = (decexp / 10) + '0';
1c00f652:	47a9                	li	a5,10
1c00f654:	892e                	mv	s2,a1
1c00f656:	02fd4733          	div	a4,s10,a5
		decexp %= 10;
1c00f65a:	02fd68b3          	rem	a7,s10,a5
		*buf++ = (decexp / 10) + '0';
1c00f65e:	03070713          	addi	a4,a4,48
1c00f662:	00e9012b          	p.sb	a4,2(s2!)
		*buf++ = decexp + '0';
1c00f666:	03088893          	addi	a7,a7,48
1c00f66a:	011580a3          	sb	a7,1(a1)
1c00f66e:	bf05                	j	1c00f59e <_prf+0x786>
			*buf++ = _get_digit(&fract, &digit_count);
1c00f670:	106c                	addi	a1,sp,44
1c00f672:	1808                	addi	a0,sp,48
1c00f674:	f70ff0ef          	jal	ra,1c00ede4 <_get_digit>
1c00f678:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00f67c:	147d                	addi	s0,s0,-1
1c00f67e:	b785                	j	1c00f5de <_prf+0x7c6>
		while (*--buf == '0')
1c00f680:	893a                	mv	s2,a4
1c00f682:	bf8d                	j	1c00f5f4 <_prf+0x7dc>
1c00f684:	8a4a                	mv	s4,s2
				switch (i) {
1c00f686:	04c00693          	li	a3,76
1c00f68a:	004a278b          	p.lw	a5,4(s4!)
1c00f68e:	02d48a63          	beq	s1,a3,1c00f6c2 <_prf+0x8aa>
1c00f692:	0096c963          	blt	a3,s1,1c00f6a4 <_prf+0x88c>
1c00f696:	04800693          	li	a3,72
1c00f69a:	02d48063          	beq	s1,a3,1c00f6ba <_prf+0x8a2>
					*va_arg(vargs, int *) = count;
1c00f69e:	0137a023          	sw	s3,0(a5)
					break;
1c00f6a2:	a801                	j	1c00f6b2 <_prf+0x89a>
				switch (i) {
1c00f6a4:	06800693          	li	a3,104
1c00f6a8:	fed49be3          	bne	s1,a3,1c00f69e <_prf+0x886>
					*va_arg(vargs, short *) = count;
1c00f6ac:	874e                	mv	a4,s3
1c00f6ae:	00e79023          	sh	a4,0(a5)
				continue;
1c00f6b2:	8952                	mv	s2,s4
1c00f6b4:	8662                	mv	a2,s8
1c00f6b6:	f86ff06f          	j	1c00ee3c <_prf+0x24>
					*va_arg(vargs, char *) = count;
1c00f6ba:	874e                	mv	a4,s3
1c00f6bc:	00e78023          	sb	a4,0(a5)
					break;
1c00f6c0:	bfcd                	j	1c00f6b2 <_prf+0x89a>
					*va_arg(vargs, long long *) = count;
1c00f6c2:	41f9d713          	srai	a4,s3,0x1f
1c00f6c6:	0137a023          	sw	s3,0(a5)
1c00f6ca:	c3d8                	sw	a4,4(a5)
					break;
1c00f6cc:	b7dd                	j	1c00f6b2 <_prf+0x89a>
				clen = _to_hex(buf, val, true, 'x');
1c00f6ce:	00092583          	lw	a1,0(s2)
		*buf++ = '0';
1c00f6d2:	77e1                	lui	a5,0xffff8
1c00f6d4:	8307c793          	xori	a5,a5,-2000
	len = _to_x(buf, value, 16);
1c00f6d8:	46c1                	li	a3,16
1c00f6da:	4601                	li	a2,0
1c00f6dc:	04610513          	addi	a0,sp,70
		*buf++ = '0';
1c00f6e0:	04f11223          	sh	a5,68(sp)
	len = _to_x(buf, value, 16);
1c00f6e4:	e0aff0ef          	jal	ra,1c00ecee <_to_x>
				val = (uintptr_t) va_arg(vargs, void *);
1c00f6e8:	00490a13          	addi	s4,s2,4
	return len + (buf - buf0);
1c00f6ec:	00250d93          	addi	s11,a0,2
				prefix = 2;
1c00f6f0:	4909                	li	s2,2
				break;
1c00f6f2:	b40d                	j	1c00f114 <_prf+0x2fc>
					if (cptr[clen] == '\0') {
1c00f6f4:	0016c60b          	p.lbu	a2,1(a3!) # 8000001 <__L2+0x7f80001>
1c00f6f8:	a4060ee3          	beqz	a2,1c00f154 <_prf+0x33c>
				for (clen = 0; clen < precision; clen++) {
1c00f6fc:	0d85                	addi	s11,s11,1
1c00f6fe:	bc89                	j	1c00f150 <_prf+0x338>
					val = va_arg(vargs, unsigned int);
1c00f700:	00490a13          	addi	s4,s2,4
1c00f704:	00092583          	lw	a1,0(s2)
1c00f708:	4601                	li	a2,0
					break;
1c00f70a:	ba99                	j	1c00f060 <_prf+0x248>
	if (alt_form) {
1c00f70c:	8526                	mv	a0,s1
	return (buf - buf0) + _to_x(buf, value, 8);
1c00f70e:	46a1                	li	a3,8
1c00f710:	409504b3          	sub	s1,a0,s1
1c00f714:	ddaff0ef          	jal	ra,1c00ecee <_to_x>
1c00f718:	00a48db3          	add	s11,s1,a0
			prefix = 0;
1c00f71c:	4901                	li	s2,0
1c00f71e:	badd                	j	1c00f114 <_prf+0x2fc>
				} else if (c == 'u') {
1c00f720:	07500713          	li	a4,117
1c00f724:	00ed9863          	bne	s11,a4,1c00f734 <_prf+0x91c>
	return _to_x(buf, value, 10);
1c00f728:	46a9                	li	a3,10
1c00f72a:	8526                	mv	a0,s1
1c00f72c:	dc2ff0ef          	jal	ra,1c00ecee <_to_x>
1c00f730:	8daa                	mv	s11,a0
1c00f732:	b7ed                	j	1c00f71c <_prf+0x904>
	if (alt_form) {
1c00f734:	8d26                	mv	s10,s1
1c00f736:	000a8963          	beqz	s5,1c00f748 <_prf+0x930>
		*buf++ = '0';
1c00f73a:	7761                	lui	a4,0xffff8
1c00f73c:	83074713          	xori	a4,a4,-2000
1c00f740:	04e11223          	sh	a4,68(sp)
		*buf++ = 'x';
1c00f744:	04610d13          	addi	s10,sp,70
	len = _to_x(buf, value, 16);
1c00f748:	46c1                	li	a3,16
1c00f74a:	856a                	mv	a0,s10
1c00f74c:	da2ff0ef          	jal	ra,1c00ecee <_to_x>
	if (prefix == 'X') {
1c00f750:	05800713          	li	a4,88
1c00f754:	02ed9263          	bne	s11,a4,1c00f778 <_prf+0x960>
1c00f758:	87a6                	mv	a5,s1
		if (*buf >= 'a' && *buf <= 'z') {
1c00f75a:	45e5                	li	a1,25
1c00f75c:	0017c68b          	p.lbu	a3,1(a5!) # ffff8001 <pulp__FC+0xffff8002>
1c00f760:	f9f68613          	addi	a2,a3,-97
1c00f764:	0ff67613          	andi	a2,a2,255
1c00f768:	00c5e563          	bltu	a1,a2,1c00f772 <_prf+0x95a>
			*buf += 'A' - 'a';
1c00f76c:	1681                	addi	a3,a3,-32
1c00f76e:	fed78fa3          	sb	a3,-1(a5)
	} while (*buf++);
1c00f772:	fff7c703          	lbu	a4,-1(a5)
1c00f776:	f37d                	bnez	a4,1c00f75c <_prf+0x944>
	return len + (buf - buf0);
1c00f778:	409d0733          	sub	a4,s10,s1
1c00f77c:	00a70db3          	add	s11,a4,a0
			prefix = 0;
1c00f780:	001a9913          	slli	s2,s5,0x1
1c00f784:	ba41                	j	1c00f114 <_prf+0x2fc>
				PUTC('%');
1c00f786:	85de                	mv	a1,s7
1c00f788:	02500513          	li	a0,37
1c00f78c:	ec4ff06f          	j	1c00ee50 <_prf+0x38>
				count++;
1c00f790:	0985                	addi	s3,s3,1
				continue;
1c00f792:	8a4a                	mv	s4,s2
1c00f794:	bf39                	j	1c00f6b2 <_prf+0x89a>
1c00f796:	00dc                	addi	a5,sp,68
				zero_head = 0;
1c00f798:	4d01                	li	s10,0
1c00f79a:	b2d5                	j	1c00f17e <_prf+0x366>
					PUTC(' ');
1c00f79c:	85de                	mv	a1,s7
1c00f79e:	02000513          	li	a0,32
1c00f7a2:	c036                	sw	a3,0(sp)
1c00f7a4:	c43e                	sw	a5,8(sp)
1c00f7a6:	9b02                	jalr	s6
1c00f7a8:	4682                	lw	a3,0(sp)
1c00f7aa:	47a2                	lw	a5,8(sp)
1c00f7ac:	ebf52563          	p.beqimm	a0,-1,1c00ee56 <_prf+0x3e>
				while (width-- > 0) {
1c00f7b0:	14fd                	addi	s1,s1,-1
1c00f7b2:	fff4b5e3          	p.bneimm	s1,-1,1c00f79c <_prf+0x984>
				count += width;
1c00f7b6:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00f7b8:	5cfd                	li	s9,-1
1c00f7ba:	bad9                	j	1c00f190 <_prf+0x378>
				PUTC(*cptr++);
1c00f7bc:	0017c50b          	p.lbu	a0,1(a5!)
1c00f7c0:	85de                	mv	a1,s7
1c00f7c2:	c036                	sw	a3,0(sp)
1c00f7c4:	c43e                	sw	a5,8(sp)
1c00f7c6:	9b02                	jalr	s6
1c00f7c8:	4682                	lw	a3,0(sp)
1c00f7ca:	47a2                	lw	a5,8(sp)
1c00f7cc:	9df534e3          	p.bneimm	a0,-1,1c00f194 <_prf+0x37c>
1c00f7d0:	e86ff06f          	j	1c00ee56 <_prf+0x3e>
				PUTC('0');
1c00f7d4:	85de                	mv	a1,s7
1c00f7d6:	03000513          	li	a0,48
1c00f7da:	c036                	sw	a3,0(sp)
1c00f7dc:	c43e                	sw	a5,8(sp)
1c00f7de:	9b02                	jalr	s6
1c00f7e0:	4682                	lw	a3,0(sp)
1c00f7e2:	47a2                	lw	a5,8(sp)
1c00f7e4:	9bf53be3          	p.bneimm	a0,-1,1c00f19a <_prf+0x382>
1c00f7e8:	e6eff06f          	j	1c00ee56 <_prf+0x3e>
					PUTC(c);
1c00f7ec:	85de                	mv	a1,s7
1c00f7ee:	c232                	sw	a2,4(sp)
1c00f7f0:	c036                	sw	a3,0(sp)
1c00f7f2:	c442                	sw	a6,8(sp)
1c00f7f4:	9b02                	jalr	s6
1c00f7f6:	4612                	lw	a2,4(sp)
1c00f7f8:	4682                	lw	a3,0(sp)
1c00f7fa:	4822                	lw	a6,8(sp)
1c00f7fc:	e5f52d63          	p.beqimm	a0,-1,1c00ee56 <_prf+0x3e>
					c = *++cptr;
1c00f800:	0d85                	addi	s11,s11,1
1c00f802:	000dc503          	lbu	a0,0(s11)
1c00f806:	b27d                	j	1c00f1b4 <_prf+0x39c>
					PUTC('0');
1c00f808:	85de                	mv	a1,s7
1c00f80a:	03000513          	li	a0,48
1c00f80e:	c232                	sw	a2,4(sp)
1c00f810:	c036                	sw	a3,0(sp)
1c00f812:	c43a                	sw	a4,8(sp)
1c00f814:	9b02                	jalr	s6
1c00f816:	4612                	lw	a2,4(sp)
1c00f818:	4682                	lw	a3,0(sp)
1c00f81a:	4722                	lw	a4,8(sp)
1c00f81c:	167d                	addi	a2,a2,-1
1c00f81e:	9bf532e3          	p.bneimm	a0,-1,1c00f1c2 <_prf+0x3aa>
1c00f822:	e34ff06f          	j	1c00ee56 <_prf+0x3e>
					PUTC('0');
1c00f826:	85de                	mv	a1,s7
1c00f828:	03000513          	li	a0,48
1c00f82c:	c036                	sw	a3,0(sp)
1c00f82e:	c43a                	sw	a4,8(sp)
1c00f830:	9b02                	jalr	s6
1c00f832:	4682                	lw	a3,0(sp)
1c00f834:	4722                	lw	a4,8(sp)
1c00f836:	16fd                	addi	a3,a3,-1
1c00f838:	9df532e3          	p.bneimm	a0,-1,1c00f1fc <_prf+0x3e4>
1c00f83c:	e1aff06f          	j	1c00ee56 <_prf+0x3e>
					PUTC(c);
1c00f840:	85de                	mv	a1,s7
1c00f842:	c232                	sw	a2,4(sp)
1c00f844:	c036                	sw	a3,0(sp)
1c00f846:	c43a                	sw	a4,8(sp)
1c00f848:	9b02                	jalr	s6
1c00f84a:	4612                	lw	a2,4(sp)
1c00f84c:	4682                	lw	a3,0(sp)
1c00f84e:	4722                	lw	a4,8(sp)
1c00f850:	e1f52363          	p.beqimm	a0,-1,1c00ee56 <_prf+0x3e>
					c = *++cptr;
1c00f854:	0d85                	addi	s11,s11,1
1c00f856:	000dc503          	lbu	a0,0(s11)
1c00f85a:	ba75                	j	1c00f216 <_prf+0x3fe>
					PUTC('0');
1c00f85c:	85de                	mv	a1,s7
1c00f85e:	03000513          	li	a0,48
1c00f862:	c43a                	sw	a4,8(sp)
1c00f864:	9b02                	jalr	s6
1c00f866:	4722                	lw	a4,8(sp)
1c00f868:	177d                	addi	a4,a4,-1
1c00f86a:	9bf53fe3          	p.bneimm	a0,-1,1c00f228 <_prf+0x410>
1c00f86e:	de8ff06f          	j	1c00ee56 <_prf+0x3e>
				PUTC(*cptr++);
1c00f872:	0014450b          	p.lbu	a0,1(s0!)
1c00f876:	85de                	mv	a1,s7
1c00f878:	9b02                	jalr	s6
1c00f87a:	ddf52e63          	p.beqimm	a0,-1,1c00ee56 <_prf+0x3e>
1c00f87e:	408a87b3          	sub	a5,s5,s0
			while (clen-- > 0) {
1c00f882:	fef048e3          	bgtz	a5,1c00f872 <_prf+0xa5a>
			count += prefix;
1c00f886:	994e                	add	s2,s2,s3
			count += zero_head;
1c00f888:	012d09b3          	add	s3,s10,s2
			count += clen;
1c00f88c:	99a6                	add	s3,s3,s1
			if (width > 0) {
1c00f88e:	e39052e3          	blez	s9,1c00f6b2 <_prf+0x89a>
				count += width;
1c00f892:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00f894:	1cfd                	addi	s9,s9,-1
1c00f896:	e1fcaee3          	p.beqimm	s9,-1,1c00f6b2 <_prf+0x89a>
					PUTC(' ');
1c00f89a:	85de                	mv	a1,s7
1c00f89c:	02000513          	li	a0,32
1c00f8a0:	9b02                	jalr	s6
1c00f8a2:	fff539e3          	p.bneimm	a0,-1,1c00f894 <_prf+0xa7c>
1c00f8a6:	db0ff06f          	j	1c00ee56 <_prf+0x3e>
			*buf++ = '.';
1c00f8aa:	02e00693          	li	a3,46
1c00f8ae:	00d90023          	sb	a3,0(s2)
1c00f8b2:	00190713          	addi	a4,s2,1
			zp->predot = decexp;
1c00f8b6:	86ea                	mv	a3,s10
			decexp = 0;
1c00f8b8:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00f8ba:	4a81                	li	s5,0
1c00f8bc:	b6f9                	j	1c00f48a <_prf+0x672>
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00f8be:	ca02                	sw	zero,20(sp)
		exp = precision + 1;
1c00f8c0:	00140713          	addi	a4,s0,1
	digit_count = 16;
1c00f8c4:	46c1                	li	a3,16
1c00f8c6:	d636                	sw	a3,44(sp)
1c00f8c8:	04d74933          	p.min	s2,a4,a3
1c00f8cc:	b691                	j	1c00f410 <_prf+0x5f8>

1c00f8ce <__rt_uart_cluster_req_done>:
  }

  return __rt_uart_open(channel, conf, event, dev_name);
  
error:
  rt_warning("[UART] Failed to open uart device\n");
1c00f8ce:	300476f3          	csrrci	a3,mstatus,8
1c00f8d2:	4785                	li	a5,1
1c00f8d4:	08f50623          	sb	a5,140(a0)
1c00f8d8:	08d54783          	lbu	a5,141(a0)
1c00f8dc:	00201737          	lui	a4,0x201
1c00f8e0:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00f8e4:	04078793          	addi	a5,a5,64
1c00f8e8:	07da                	slli	a5,a5,0x16
1c00f8ea:	0007e723          	p.sw	zero,a4(a5)
1c00f8ee:	30069073          	csrw	mstatus,a3
1c00f8f2:	8082                	ret

1c00f8f4 <__rt_uart_setup.isra.5>:
1c00f8f4:	1c011737          	lui	a4,0x1c011
1c00f8f8:	cd072703          	lw	a4,-816(a4) # 1c010cd0 <__rt_freq_domains>
1c00f8fc:	00155793          	srli	a5,a0,0x1
1c00f900:	97ba                	add	a5,a5,a4
1c00f902:	02a7d7b3          	divu	a5,a5,a0
1c00f906:	1a102737          	lui	a4,0x1a102
1c00f90a:	17fd                	addi	a5,a5,-1
1c00f90c:	07c2                	slli	a5,a5,0x10
1c00f90e:	3067e793          	ori	a5,a5,774
1c00f912:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00f916:	8082                	ret

1c00f918 <__rt_uart_setfreq_after>:
1c00f918:	1c0117b7          	lui	a5,0x1c011
1c00f91c:	c5878793          	addi	a5,a5,-936 # 1c010c58 <__rt_uart>
1c00f920:	4398                	lw	a4,0(a5)
1c00f922:	cb11                	beqz	a4,1c00f936 <__rt_uart_setfreq_after+0x1e>
1c00f924:	4788                	lw	a0,8(a5)
1c00f926:	1141                	addi	sp,sp,-16
1c00f928:	c606                	sw	ra,12(sp)
1c00f92a:	fcbff0ef          	jal	ra,1c00f8f4 <__rt_uart_setup.isra.5>
1c00f92e:	40b2                	lw	ra,12(sp)
1c00f930:	4501                	li	a0,0
1c00f932:	0141                	addi	sp,sp,16
1c00f934:	8082                	ret
1c00f936:	4501                	li	a0,0
1c00f938:	8082                	ret

1c00f93a <__rt_uart_wait_tx_done.isra.6>:
1c00f93a:	1a102737          	lui	a4,0x1a102
1c00f93e:	1141                	addi	sp,sp,-16
1c00f940:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021d4>
1c00f944:	002046b7          	lui	a3,0x204
1c00f948:	431c                	lw	a5,0(a4)
1c00f94a:	8bc1                	andi	a5,a5,16
1c00f94c:	e38d                	bnez	a5,1c00f96e <__rt_uart_wait_tx_done.isra.6+0x34>
1c00f94e:	1a102737          	lui	a4,0x1a102
1c00f952:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021dc>
1c00f956:	431c                	lw	a5,0(a4)
1c00f958:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00f95c:	ffed                	bnez	a5,1c00f956 <__rt_uart_wait_tx_done.isra.6+0x1c>
1c00f95e:	c602                	sw	zero,12(sp)
1c00f960:	7cf00713          	li	a4,1999
1c00f964:	47b2                	lw	a5,12(sp)
1c00f966:	00f75763          	ble	a5,a4,1c00f974 <__rt_uart_wait_tx_done.isra.6+0x3a>
1c00f96a:	0141                	addi	sp,sp,16
1c00f96c:	8082                	ret
1c00f96e:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c00f972:	bfd9                	j	1c00f948 <__rt_uart_wait_tx_done.isra.6+0xe>
1c00f974:	47b2                	lw	a5,12(sp)
1c00f976:	0785                	addi	a5,a5,1
1c00f978:	c63e                	sw	a5,12(sp)
1c00f97a:	b7ed                	j	1c00f964 <__rt_uart_wait_tx_done.isra.6+0x2a>

1c00f97c <__rt_uart_setfreq_before>:
1c00f97c:	1c0117b7          	lui	a5,0x1c011
1c00f980:	c587a783          	lw	a5,-936(a5) # 1c010c58 <__rt_uart>
1c00f984:	c385                	beqz	a5,1c00f9a4 <__rt_uart_setfreq_before+0x28>
1c00f986:	1141                	addi	sp,sp,-16
1c00f988:	c606                	sw	ra,12(sp)
1c00f98a:	fb1ff0ef          	jal	ra,1c00f93a <__rt_uart_wait_tx_done.isra.6>
1c00f98e:	40b2                	lw	ra,12(sp)
1c00f990:	005007b7          	lui	a5,0x500
1c00f994:	1a102737          	lui	a4,0x1a102
1c00f998:	0799                	addi	a5,a5,6
1c00f99a:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00f99e:	4501                	li	a0,0
1c00f9a0:	0141                	addi	sp,sp,16
1c00f9a2:	8082                	ret
1c00f9a4:	4501                	li	a0,0
1c00f9a6:	8082                	ret

1c00f9a8 <__rt_uart_cluster_req>:
1c00f9a8:	1141                	addi	sp,sp,-16
1c00f9aa:	c606                	sw	ra,12(sp)
1c00f9ac:	c422                	sw	s0,8(sp)
1c00f9ae:	30047473          	csrrci	s0,mstatus,8
1c00f9b2:	1c0107b7          	lui	a5,0x1c010
1c00f9b6:	8ce78793          	addi	a5,a5,-1842 # 1c00f8ce <__rt_uart_cluster_req_done>
1c00f9ba:	c91c                	sw	a5,16(a0)
1c00f9bc:	4785                	li	a5,1
1c00f9be:	d91c                	sw	a5,48(a0)
1c00f9c0:	411c                	lw	a5,0(a0)
1c00f9c2:	02052a23          	sw	zero,52(a0)
1c00f9c6:	c948                	sw	a0,20(a0)
1c00f9c8:	43cc                	lw	a1,4(a5)
1c00f9ca:	4514                	lw	a3,8(a0)
1c00f9cc:	4150                	lw	a2,4(a0)
1c00f9ce:	0586                	slli	a1,a1,0x1
1c00f9d0:	00c50793          	addi	a5,a0,12
1c00f9d4:	4701                	li	a4,0
1c00f9d6:	0585                	addi	a1,a1,1
1c00f9d8:	4501                	li	a0,0
1c00f9da:	ff0fc0ef          	jal	ra,1c00c1ca <rt_periph_copy>
1c00f9de:	30041073          	csrw	mstatus,s0
1c00f9e2:	40b2                	lw	ra,12(sp)
1c00f9e4:	4422                	lw	s0,8(sp)
1c00f9e6:	0141                	addi	sp,sp,16
1c00f9e8:	8082                	ret

1c00f9ea <soc_eu_fcEventMask_setEvent>:
1c00f9ea:	47fd                	li	a5,31
1c00f9ec:	4721                	li	a4,8
1c00f9ee:	00a7d463          	ble	a0,a5,1c00f9f6 <soc_eu_fcEventMask_setEvent+0xc>
1c00f9f2:	1501                	addi	a0,a0,-32
1c00f9f4:	4711                	li	a4,4
1c00f9f6:	1a1066b7          	lui	a3,0x1a106
1c00f9fa:	20e6f603          	p.lw	a2,a4(a3)
1c00f9fe:	4785                	li	a5,1
1c00fa00:	00a79533          	sll	a0,a5,a0
1c00fa04:	fff54513          	not	a0,a0
1c00fa08:	8d71                	and	a0,a0,a2
1c00fa0a:	00a6e723          	p.sw	a0,a4(a3)
1c00fa0e:	8082                	ret

1c00fa10 <rt_uart_conf_init>:
1c00fa10:	000997b7          	lui	a5,0x99
1c00fa14:	96878793          	addi	a5,a5,-1688 # 98968 <__L2+0x18968>
1c00fa18:	c11c                	sw	a5,0(a0)
1c00fa1a:	57fd                	li	a5,-1
1c00fa1c:	c15c                	sw	a5,4(a0)
1c00fa1e:	8082                	ret

1c00fa20 <__rt_uart_open>:
1c00fa20:	1141                	addi	sp,sp,-16
1c00fa22:	c606                	sw	ra,12(sp)
1c00fa24:	c422                	sw	s0,8(sp)
1c00fa26:	c226                	sw	s1,4(sp)
1c00fa28:	c04a                	sw	s2,0(sp)
1c00fa2a:	30047973          	csrrci	s2,mstatus,8
1c00fa2e:	cd8d                	beqz	a1,1c00fa68 <__rt_uart_open+0x48>
1c00fa30:	4198                	lw	a4,0(a1)
1c00fa32:	1c0116b7          	lui	a3,0x1c011
1c00fa36:	ffc50793          	addi	a5,a0,-4
1c00fa3a:	c5868413          	addi	s0,a3,-936 # 1c010c58 <__rt_uart>
1c00fa3e:	0792                	slli	a5,a5,0x4
1c00fa40:	943e                	add	s0,s0,a5
1c00fa42:	4010                	lw	a2,0(s0)
1c00fa44:	c5868693          	addi	a3,a3,-936
1c00fa48:	c60d                	beqz	a2,1c00fa72 <__rt_uart_open+0x52>
1c00fa4a:	c589                	beqz	a1,1c00fa54 <__rt_uart_open+0x34>
1c00fa4c:	418c                	lw	a1,0(a1)
1c00fa4e:	4418                	lw	a4,8(s0)
1c00fa50:	04e59d63          	bne	a1,a4,1c00faaa <__rt_uart_open+0x8a>
1c00fa54:	0605                	addi	a2,a2,1
1c00fa56:	00c6e7a3          	p.sw	a2,a5(a3)
1c00fa5a:	8522                	mv	a0,s0
1c00fa5c:	40b2                	lw	ra,12(sp)
1c00fa5e:	4422                	lw	s0,8(sp)
1c00fa60:	4492                	lw	s1,4(sp)
1c00fa62:	4902                	lw	s2,0(sp)
1c00fa64:	0141                	addi	sp,sp,16
1c00fa66:	8082                	ret
1c00fa68:	00099737          	lui	a4,0x99
1c00fa6c:	96870713          	addi	a4,a4,-1688 # 98968 <__L2+0x18968>
1c00fa70:	b7c9                	j	1c00fa32 <__rt_uart_open+0x12>
1c00fa72:	c418                	sw	a4,8(s0)
1c00fa74:	4785                	li	a5,1
1c00fa76:	1a102737          	lui	a4,0x1a102
1c00fa7a:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00fa7e:	c01c                	sw	a5,0(s0)
1c00fa80:	c048                	sw	a0,4(s0)
1c00fa82:	4314                	lw	a3,0(a4)
1c00fa84:	00a797b3          	sll	a5,a5,a0
1c00fa88:	00151493          	slli	s1,a0,0x1
1c00fa8c:	8fd5                	or	a5,a5,a3
1c00fa8e:	c31c                	sw	a5,0(a4)
1c00fa90:	8526                	mv	a0,s1
1c00fa92:	f59ff0ef          	jal	ra,1c00f9ea <soc_eu_fcEventMask_setEvent>
1c00fa96:	00148513          	addi	a0,s1,1
1c00fa9a:	f51ff0ef          	jal	ra,1c00f9ea <soc_eu_fcEventMask_setEvent>
1c00fa9e:	4408                	lw	a0,8(s0)
1c00faa0:	e55ff0ef          	jal	ra,1c00f8f4 <__rt_uart_setup.isra.5>
1c00faa4:	30091073          	csrw	mstatus,s2
1c00faa8:	bf4d                	j	1c00fa5a <__rt_uart_open+0x3a>
1c00faaa:	4401                	li	s0,0
1c00faac:	b77d                	j	1c00fa5a <__rt_uart_open+0x3a>

1c00faae <rt_uart_close>:
}



void rt_uart_close(rt_uart_t *uart, rt_event_t *event)
{
1c00faae:	1141                	addi	sp,sp,-16
1c00fab0:	c606                	sw	ra,12(sp)
1c00fab2:	c422                	sw	s0,8(sp)
1c00fab4:	c226                	sw	s1,4(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00fab6:	300474f3          	csrrci	s1,mstatus,8
  int irq = rt_irq_disable();

  rt_trace(RT_TRACE_DEV_CTRL, "[UART] Closing uart device (handle: %p)\n", uart);

  uart->open_count--;
1c00faba:	411c                	lw	a5,0(a0)
1c00fabc:	17fd                	addi	a5,a5,-1
1c00fabe:	c11c                	sw	a5,0(a0)

  if (uart->open_count == 0)
1c00fac0:	e79d                	bnez	a5,1c00faee <rt_uart_close+0x40>
1c00fac2:	842a                	mv	s0,a0
  {
      // First wait for pending transfers to finish before stoppping uart in case
      // some printf are still pending
      __rt_uart_wait_tx_done(uart);
1c00fac4:	e77ff0ef          	jal	ra,1c00f93a <__rt_uart_wait_tx_done.isra.6>
  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, 0x00500006);
1c00fac8:	1a102737          	lui	a4,0x1a102
1c00facc:	005007b7          	lui	a5,0x500
1c00fad0:	22470693          	addi	a3,a4,548 # 1a102224 <__l1_end+0xa1021e0>
1c00fad4:	0799                	addi	a5,a5,6
1c00fad6:	c29c                	sw	a5,0(a3)
      // Set enable bits for uart channel back to 0 
      // This is needed to be able to propagate new configs when re-opening
      plp_uart_disable(uart->channel - ARCHI_UDMA_UART_ID(0));      

      // Then stop the uart
      plp_udma_cg_set(plp_udma_cg_get() & ~(1<<uart->channel));
1c00fad8:	4050                	lw	a2,4(s0)
  return pulp_read32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET);
1c00fada:	78070713          	addi	a4,a4,1920
1c00fade:	4314                	lw	a3,0(a4)
1c00fae0:	4785                	li	a5,1
1c00fae2:	00c797b3          	sll	a5,a5,a2
1c00fae6:	fff7c793          	not	a5,a5
1c00faea:	8ff5                	and	a5,a5,a3
  pulp_write32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET, value);
1c00faec:	c31c                	sw	a5,0(a4)
  __builtin_pulp_spr_write(reg, val);
1c00faee:	30049073          	csrw	mstatus,s1
  }

  rt_irq_restore(irq);
}
1c00faf2:	40b2                	lw	ra,12(sp)
1c00faf4:	4422                	lw	s0,8(sp)
1c00faf6:	4492                	lw	s1,4(sp)
1c00faf8:	0141                	addi	sp,sp,16
1c00fafa:	8082                	ret

1c00fafc <rt_uart_cluster_write>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00fafc:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00fb00:	8795                	srai	a5,a5,0x5
1c00fb02:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_uart_cluster_write(rt_uart_t *handle, void *buffer, size_t size, rt_uart_req_t *req)
{
  req->uart = handle;
  req->buffer = buffer;
  req->size = size;
  req->cid = rt_cluster_id();
1c00fb06:	08f686a3          	sb	a5,141(a3)
  event->arg[0] = (uintptr_t)callback;
1c00fb0a:	1c0107b7          	lui	a5,0x1c010
1c00fb0e:	9a878793          	addi	a5,a5,-1624 # 1c00f9a8 <__rt_uart_cluster_req>
1c00fb12:	ca9c                	sw	a5,16(a3)
  event->implem.pending = 1;  
1c00fb14:	4785                	li	a5,1
  req->uart = handle;
1c00fb16:	c288                	sw	a0,0(a3)
  req->buffer = buffer;
1c00fb18:	c2cc                	sw	a1,4(a3)
  req->size = size;
1c00fb1a:	c690                	sw	a2,8(a3)
  req->done = 0;
1c00fb1c:	08068623          	sb	zero,140(a3)
  event->implem.keep = 0;
1c00fb20:	0206aa23          	sw	zero,52(a3)
  event->arg[1] = (uintptr_t)arg;
1c00fb24:	cad4                	sw	a3,20(a3)
  event->implem.pending = 1;  
1c00fb26:	da9c                	sw	a5,48(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_uart_cluster_req, (void *)req);
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c00fb28:	00c68513          	addi	a0,a3,12
1c00fb2c:	85afd06f          	j	1c00cb86 <__rt_cluster_push_fc_event>

1c00fb30 <__rt_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00fb30:	1c0105b7          	lui	a1,0x1c010
{
1c00fb34:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00fb36:	4601                	li	a2,0
1c00fb38:	97c58593          	addi	a1,a1,-1668 # 1c00f97c <__rt_uart_setfreq_before>
1c00fb3c:	4511                	li	a0,4
{
1c00fb3e:	c606                	sw	ra,12(sp)
1c00fb40:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00fb42:	c6bfb0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00fb46:	1c0105b7          	lui	a1,0x1c010
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00fb4a:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00fb4c:	4601                	li	a2,0
1c00fb4e:	91858593          	addi	a1,a1,-1768 # 1c00f918 <__rt_uart_setfreq_after>
1c00fb52:	4515                	li	a0,5
1c00fb54:	c59fb0ef          	jal	ra,1c00b7ac <__rt_cbsys_add>


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c00fb58:	1c0117b7          	lui	a5,0x1c011
1c00fb5c:	c407ac23          	sw	zero,-936(a5) # 1c010c58 <__rt_uart>
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00fb60:	8d41                	or	a0,a0,s0
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c00fb62:	c10d                	beqz	a0,1c00fb84 <__rt_uart_init+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00fb64:	01402673          	csrr	a2,uhartid
1c00fb68:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00fb6c:	40565593          	srai	a1,a2,0x5
1c00fb70:	f265b5b3          	p.bclr	a1,a1,25,6
1c00fb74:	f4563633          	p.bclr	a2,a2,26,5
1c00fb78:	49c50513          	addi	a0,a0,1180 # 1c01049c <__hyper_pad+0x54>
1c00fb7c:	946ff0ef          	jal	ra,1c00ecc2 <printf>
1c00fb80:	8c6ff0ef          	jal	ra,1c00ec46 <abort>
}
1c00fb84:	40b2                	lw	ra,12(sp)
1c00fb86:	4422                	lw	s0,8(sp)
1c00fb88:	0141                	addi	sp,sp,16
1c00fb8a:	8082                	ret

1c00fb8c <__cluster_text_start>:
  .global __rt_pe_start
__rt_pe_start:

#endif

    csrr    a0, 0xF14
1c00fb8c:	f1402573          	csrr	a0,mhartid
    andi    a1, a0, 0x1f
1c00fb90:	01f57593          	andi	a1,a0,31
    srli    a0, a0, 5
1c00fb94:	8115                	srli	a0,a0,0x5
    
    // Activate a few events
    li      t0, (1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT)
1c00fb96:	000702b7          	lui	t0,0x70
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00fb9a:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK(t1)
1c00fb9e:	00532023          	sw	t0,0(t1) # 204000 <__L2+0x184000>

#ifndef ARCHI_NO_L1_TINY
    sw      x0, %tiny(__rt_dma_first_pending)(x0)
1c00fba2:	00002a23          	sw	zero,20(zero) # 14 <__rt_bridge_eeprom_handle>

#ifdef ARCHI_HAS_CC
    li      t2, ARCHI_CC_CORE_ID
    bne     a1, t2, __rt_slave_start
#else
    bne     a1, x0, __rt_slave_start
1c00fba6:	10059063          	bnez	a1,1c00fca6 <__rt_slave_start>
#endif

    li      t0, (1<<ARCHI_CL_EVT_DMA1)
1c00fbaa:	20000293          	li	t0,512
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00fbae:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK_IRQ_OR(t1)
1c00fbb2:	00532a23          	sw	t0,20(t1) # 204014 <__L2+0x184014>



    // Prepare few values that will be kept in saved registers to optimize the loop
    la      s0, __rt_cluster_pool
1c00fbb6:	e3ff0417          	auipc	s0,0xe3ff0
1c00fbba:	44e40413          	addi	s0,s0,1102 # 4 <__rt_bridge_flash_handle>
    li      s3, ARCHI_EU_DEMUX_ADDR
1c00fbbe:	002049b7          	lui	s3,0x204
    li      s4, 1<<RT_CLUSTER_CALL_EVT
1c00fbc2:	4a09                	li	s4,2
    la      s5, __rt_master_event
1c00fbc4:	00000a97          	auipc	s5,0x0
1c00fbc8:	038a8a93          	addi	s5,s5,56 # 1c00fbfc <__rt_master_event>
    la      s7, __rt_fc_cluster_data
1c00fbcc:	00001b97          	auipc	s7,0x1
1c00fbd0:	114b8b93          	addi	s7,s7,276 # 1c010ce0 <__rt_fc_cluster_data>
    li      t2, RT_FC_CLUSTER_DATA_T_SIZEOF
1c00fbd4:	02800393          	li	t2,40
    mul     t2, t2, a0
1c00fbd8:	02a383b3          	mul	t2,t2,a0
    add     s7, s7, t2
1c00fbdc:	9b9e                	add	s7,s7,t2
    addi    s7, s7, RT_FC_CLUSTER_DATA_T_EVENTS
1c00fbde:	0b91                	addi	s7,s7,4
#if defined(ARCHI_HAS_FC)
#if defined(ITC_VERSION)
    li      s9, ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET
    li      s8, 1<<RT_FC_ENQUEUE_EVENT
#else
    li      s9, ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
1c00fbe0:	1b201cb7          	lui	s9,0x1b201
1c00fbe4:	e04c8c93          	addi	s9,s9,-508 # 1b200e04 <__fc_tcdm_end+0x1ff9e4>
    li      s8, 1
1c00fbe8:	4c05                	li	s8,1
    // In case there is no FC, the event must be sent to cluster 0 event unit
    li      s9, ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(0) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
    li      s8, 1    
#endif
#ifndef ARCHI_HAS_NO_DISPATCH
    la      s10, __rt_set_slave_stack
1c00fbea:	00000d17          	auipc	s10,0x0
1c00fbee:	0fad0d13          	addi	s10,s10,250 # 1c00fce4 <__rt_set_slave_stack>
    ori     s10, s10, 1
1c00fbf2:	001d6d13          	ori	s10,s10,1
#endif

    csrwi   0x300, 0x8
1c00fbf6:	30045073          	csrwi	mstatus,8

    j       __rt_master_loop
1c00fbfa:	a819                	j	1c00fc10 <__rt_master_loop>

1c00fbfc <__rt_master_event>:



__rt_master_event:
    beq     s6, x0, __rt_master_loop
1c00fbfc:	000b0a63          	beqz	s6,1c00fc10 <__rt_master_loop>

1c00fc00 <__rt_push_event_to_fc_retry>:

__rt_push_event_to_fc_retry:
    // Now we have to push the termination event to FC side
    // First wait until the slot for posting events is free
    lw      t0, 0(s7)
1c00fc00:	000ba283          	lw	t0,0(s7)
    bne     t0, x0, __rt_push_event_to_fc_wait
1c00fc04:	08029a63          	bnez	t0,1c00fc98 <__rt_push_event_to_fc_wait>

    // Push it
    sw      s6, 0(s7)
1c00fc08:	016ba023          	sw	s6,0(s7)

    // And notify the FC side with a HW event in case it is sleeping
    sw      s8, 0(s9)
1c00fc0c:	018ca023          	sw	s8,0(s9)

1c00fc10 <__rt_master_loop>:


__rt_master_loop:
    // Check if a task is ready in the pool
    lw      t3, 0(s0)
1c00fc10:	00042e03          	lw	t3,0(s0)
    // Check if a call is ready, e.g. if nb_pe is not zero
    // otherwise go to sleep
    beq     t3, x0, __rt_master_sleep
1c00fc14:	060e0b63          	beqz	t3,1c00fc8a <__rt_master_sleep>

1c00fc18 <__rt_master_loop_update_next>:

__rt_master_loop_update_next:
    lw      t4, RT_CLUSTER_TASK_NEXT(t3)
1c00fc18:	020e2e83          	lw	t4,32(t3)
    sw      x0, RT_CLUSTER_TASK_PENDING(t3)
1c00fc1c:	020e2223          	sw	zero,36(t3)
    sw      t4, 0(s0)
1c00fc20:	01d42023          	sw	t4,0(s0)

    // Check again next pointer in case it was updated by the FC.
    // If so, do it it again as this will ensure that either we see the new
    // value or the FC sees our write
    lw      t5, RT_CLUSTER_TASK_NEXT(t3)
1c00fc24:	020e2f03          	lw	t5,32(t3)
    bne     t4, t5, __rt_master_loop_update_next
1c00fc28:	ffee98e3          	bne	t4,t5,1c00fc18 <__rt_master_loop_update_next>
    li      a4, 0
    ebreak
#endif

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00fc2c:	7d005073          	csrwi	0x7d0,0
#endif

    // Reads entry point information
    lw      a0, RT_CLUSTER_TASK_ARG(t3)
1c00fc30:	004e2503          	lw	a0,4(t3)
    lw      t0, RT_CLUSTER_TASK_ENTRY(t3)
1c00fc34:	000e2283          	lw	t0,0(t3)
    lw      sp, RT_CLUSTER_TASK_STACKS(t3)
1c00fc38:	008e2103          	lw	sp,8(t3)
    lw      t1, RT_CLUSTER_TASK_STACK_SIZE(t3)
1c00fc3c:	00ce2303          	lw	t1,12(t3)
    lw      t2, RT_CLUSTER_TASK_SLAVE_STACK_SIZE(t3)
1c00fc40:	010e2383          	lw	t2,16(t3)
    lw      t5, RT_CLUSTER_TASK_CORE_MASK(t3)
1c00fc44:	028e2f03          	lw	t5,40(t3)
    lw      s6, RT_CLUSTER_TASK_COMPLETION_CALLBACK(t3)
1c00fc48:	018e2b03          	lw	s6,24(t3)
    lw      t6, RT_CLUSTER_TASK_NB_CORES(t3)
1c00fc4c:	014e2f83          	lw	t6,20(t3)
    mv      ra, s5
1c00fc50:	80d6                	mv	ra,s5

    add     sp, sp, t1
1c00fc52:	911a                	add	sp,sp,t1

#ifdef ARCHI_NO_L1_TINY
    la      t4, __rt_cluster_nb_active_pe
    sw      t6, 0(t4)
#else
    sw      t6, %tiny(__rt_cluster_nb_active_pe)(x0)
1c00fc54:	01f02c23          	sw	t6,24(zero) # 18 <__rt_first_free>
#endif

#ifdef __RT_USE_ASSERT
    // Update stack checking information
    beqz    t1, __rt_no_stack_check
1c00fc58:	00030a63          	beqz	t1,1c00fc6c <__rt_no_stack_check>
    sub     t4, sp, t1
1c00fc5c:	40610eb3          	sub	t4,sp,t1
    csrw    0x7D1, t4
1c00fc60:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00fc64:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00fc68:	7d00d073          	csrwi	0x7d0,1

1c00fc6c <__rt_no_stack_check>:
#endif

__rt_no_stack_check:
    // Whatever the number of cores, we need to setup the barrier as the master code is compiled to use it
    sw      t5, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG(s3)
1c00fc6c:	09e9a223          	sw	t5,132(s3) # 204084 <__L2+0x184084>
#ifdef ARCHI_HAS_CC
    // When we have a cluster controller, don't configure the slave barrier
    // if we don't have have any slave
    beqz    t5, __rt_master_no_slave_barrier
#endif
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_MASK(s3)
1c00fc70:	21e9a023          	sw	t5,512(s3)
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK(s3)
1c00fc74:	21e9a623          	sw	t5,524(s3)

1c00fc78 <__rt_master_no_slave_barrier>:
    sw      t6, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK + EU_BARRIER_SIZE(s3)
#endif

    // Set stack on slaves
    // For that we push first the function for setting stack, then the stack size and the base
    p.beqimm t5, 0, __rt_master_loop_no_slave
1c00fc78:	000f2863          	p.beqimm	t5,0,1c00fc88 <__rt_master_loop_no_slave>
    sw      s10, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00fc7c:	09a9a023          	sw	s10,128(s3)
    sw      t2, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00fc80:	0879a023          	sw	t2,128(s3)
    sw      sp, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00fc84:	0829a023          	sw	sp,128(s3)

1c00fc88 <__rt_master_loop_no_slave>:

__rt_master_loop_no_slave:

    // Call the entry point, this will directly come back to the master loop
    jr      t0
1c00fc88:	8282                	jr	t0

1c00fc8a <__rt_master_sleep>:
    lw      a1, %tiny(__rt_pe_trace)(x0)
    li      a2, 1
    ebreak
#endif

    sw      s4, EU_CORE_MASK_OR(s3)
1c00fc8a:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00fc8e:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00fc92:	0149a223          	sw	s4,4(s3)
    j       __rt_master_loop
1c00fc96:	bfad                	j	1c00fc10 <__rt_master_loop>

1c00fc98 <__rt_push_event_to_fc_wait>:




__rt_push_event_to_fc_wait:
    sw      s4, EU_CORE_MASK_OR(s3)
1c00fc98:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00fc9c:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00fca0:	0149a223          	sw	s4,4(s3)
    j       __rt_push_event_to_fc_retry
1c00fca4:	bfb1                	j	1c00fc00 <__rt_push_event_to_fc_retry>

1c00fca6 <__rt_slave_start>:
__rt_slave_start:


#ifndef ARCHI_HAS_NO_DISPATCH

    li      s2, ARCHI_EU_DEMUX_ADDR
1c00fca6:	00204937          	lui	s2,0x204
    csrr    s3, 0xF14
1c00fcaa:	f14029f3          	csrr	s3,mhartid
    and     s3, s3, 0x1f
1c00fcae:	01f9f993          	andi	s3,s3,31
    la      s4, __rt_fork_return
1c00fcb2:	00000a17          	auipc	s4,0x0
1c00fcb6:	012a0a13          	addi	s4,s4,18 # 1c00fcc4 <__rt_fork_return>
    la      s5, __rt_wait_for_dispatch
1c00fcba:	00000a97          	auipc	s5,0x0
1c00fcbe:	00ea8a93          	addi	s5,s5,14 # 1c00fcc8 <__rt_wait_for_dispatch>
    j       __rt_wait_for_dispatch
1c00fcc2:	a019                	j	1c00fcc8 <__rt_wait_for_dispatch>

1c00fcc4 <__rt_fork_return>:
    // When the cluster has a controller barrier 0 is used for normal team barrier
    // and barrier 1 is used for end of offload
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR + EU_BARRIER_SIZE(s2)
#else
#ifndef ARCHI_HAS_NO_BARRIER
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR(s2)
1c00fcc4:	21c96283          	p.elw	t0,540(s2) # 20421c <__L2+0x18421c>

1c00fcc8 <__rt_wait_for_dispatch>:
    li      a2, 1
    ebreak
#endif

    // Wait for PC + arg information from dispatcher
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00fcc8:	08096283          	p.elw	t0,128(s2)
    p.elw   a0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00fccc:	08096503          	p.elw	a0,128(s2)
    ebreak
    mv      a0, t1
#endif

    // Check if this is an entry with a barrier at the end (fork entry)
    andi    t1, t0, 1
1c00fcd0:	0012f313          	andi	t1,t0,1
    bne     t1, zero, __rt_other_entry
1c00fcd4:	00031563          	bnez	t1,1c00fcde <__rt_other_entry>

1c00fcd8 <__rt_fork_entry>:

__rt_fork_entry:

    // Jump to the handler and prepare r9 to jump back just before the main loop
    add     ra, s4, x0
1c00fcd8:	000a00b3          	add	ra,s4,zero
    jr      t0
1c00fcdc:	8282                	jr	t0

1c00fcde <__rt_other_entry>:

__rt_other_entry:

  // Jump to the handler and prepare r9 to jump back directly to the main loop
    add     ra, s5, x0
1c00fcde:	000a80b3          	add	ra,s5,zero
    jr      t0
1c00fce2:	8282                	jr	t0

1c00fce4 <__rt_set_slave_stack>:

  .global __rt_set_slave_stack
__rt_set_slave_stack:

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00fce4:	7d005073          	csrwi	0x7d0,0
#endif

    // Multiply the stack size by the core ID and add the stack base to get our stack
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00fce8:	08096283          	p.elw	t0,128(s2)
    // If the cluster has a cluster controller, the first slave has core ID 0
    // and thus we need to take the next stack
    addi     t5, s3, 1
    p.mul   t4, t5, a0
#else
    p.mul   t4, s3, a0
1c00fcec:	02a98eb3          	mul	t4,s3,a0
#endif
    add     sp, t4, t0
1c00fcf0:	005e8133          	add	sp,t4,t0

#ifdef __RT_USE_ASSERT
    beqz    a0, __rt_no_stack_check_end
1c00fcf4:	c909                	beqz	a0,1c00fd06 <__rt_no_stack_check_end>
    sub     t4, sp, a0
1c00fcf6:	40a10eb3          	sub	t4,sp,a0
    csrw    0x7D1, t4
1c00fcfa:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00fcfe:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00fd02:	7d00d073          	csrwi	0x7d0,1

1c00fd06 <__rt_no_stack_check_end>:
#endif
__rt_no_stack_check_end:
    ret
1c00fd06:	8082                	ret

1c00fd08 <__rt_dma_2d>:
#if defined(ARCHI_HAS_CLUSTER)
#ifndef ARCHI_NO_L1_TINY
    .global __rt_dma_2d
__rt_dma_2d:

    sw  x8, -4(sp)
1c00fd08:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c00fd0c:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00fd10:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c00fd14:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00fd18:	fec12623          	sw	a2,-20(sp)

    li  a2, ARCHI_MCHAN_DEMUX_ADDR
1c00fd1c:	00204637          	lui	a2,0x204
1c00fd20:	40060613          	addi	a2,a2,1024 # 204400 <__L2+0x184400>

    lw  x8, %tiny(__rt_dma_first_pending)(x0)
1c00fd24:	01402403          	lw	s0,20(zero) # 14 <__rt_bridge_eeprom_handle>

    lw  a1, CL_DMA_CMD_T_ID(x8)
1c00fd28:	400c                	lw	a1,0(s0)
    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00fd2a:	4408                	lw	a0,8(s0)
    p.bsetr a1, x0, a1
1c00fd2c:	80b045b3          	p.bsetr	a1,zero,a1
    sw  a1, MCHAN_STATUS_OFFSET(a2)
1c00fd30:	c24c                	sw	a1,4(a2)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00fd32:	480c                	lw	a1,16(s0)

    beqz a0, __rt_dma_2d_done
1c00fd34:	c131                	beqz	a0,1c00fd78 <__rt_dma_2d_done>

1c00fd36 <__rt_dma_2d_redo>:

__rt_dma_2d_redo:
    lw  x9, CL_DMA_CMD_T_CMD(x8)
1c00fd36:	4044                	lw	s1,4(s0)
    
    bgt a0, a1, __rt_dma_2d_not_last
1c00fd38:	00a5c363          	blt	a1,a0,1c00fd3e <__rt_dma_2d_not_last>
    mv  a1, a0
1c00fd3c:	85aa                	mv	a1,a0

1c00fd3e <__rt_dma_2d_not_last>:

__rt_dma_2d_not_last:
    lw  a0, MCHAN_CMD_OFFSET(a2)
1c00fd3e:	4208                	lw	a0,0(a2)
    sw  a0, CL_DMA_CMD_T_ID(x8)
1c00fd40:	c008                	sw	a0,0(s0)

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00fd42:	4408                	lw	a0,8(s0)

    p.inserti x9, a1, MCHAN_CMD_CMD_LEN_WIDTH-1, MCHAN_CMD_CMD_LEN_BIT
1c00fd44:	de05a4b3          	p.insert	s1,a1,15,0

    sw  x9, MCHAN_CMD_OFFSET(a2)   // cmd
1c00fd48:	c204                	sw	s1,0(a2)

    sub a0, a0, a1
1c00fd4a:	8d0d                	sub	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00fd4c:	c408                	sw	a0,8(s0)

    lw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00fd4e:	4848                	lw	a0,20(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // local address
1c00fd50:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00fd52:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00fd54:	c848                	sw	a0,20(s0)


    lw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00fd56:	4c08                	lw	a0,24(s0)
    lw  a1, CL_DMA_CMD_T_STRIDE(x8)
1c00fd58:	444c                	lw	a1,12(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // external address
1c00fd5a:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00fd5c:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00fd5e:	cc08                	sw	a0,24(s0)

1c00fd60 <__rt_dma_2d_exit>:

__rt_dma_2d_exit:
    lw  x8, -4(sp)
1c00fd60:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c00fd64:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c00fd68:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c00fd6c:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00fd70:	fec12603          	lw	a2,-20(sp)

    mret
1c00fd74:	30200073          	mret

1c00fd78 <__rt_dma_2d_done>:

__rt_dma_2d_done:
    sw  x0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00fd78:	00042c23          	sw	zero,24(s0)

    lw  x9, CL_DMA_CMD_T_NEXT(x8)
1c00fd7c:	4c44                	lw	s1,28(s0)
    sw  x9, %tiny(__rt_dma_first_pending)(x0)
1c00fd7e:	00902a23          	sw	s1,20(zero) # 14 <__rt_bridge_eeprom_handle>

    li  x8, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + (RT_DMA_EVENT<<2)
1c00fd82:	00204437          	lui	s0,0x204
1c00fd86:	11440413          	addi	s0,s0,276 # 204114 <__L2+0x184114>
    sw  x0, EU_CORE_TRIGG_SW_EVENT(x8)
1c00fd8a:	00042023          	sw	zero,0(s0)

    beqz x9, __rt_dma_2d_exit
1c00fd8e:	d8e9                	beqz	s1,1c00fd60 <__rt_dma_2d_exit>

    mv  x8, x9
1c00fd90:	8426                	mv	s0,s1

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00fd92:	4408                	lw	a0,8(s0)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00fd94:	480c                	lw	a1,16(s0)

    j   __rt_dma_2d_redo
1c00fd96:	b745                	j	1c00fd36 <__rt_dma_2d_redo>


/module/data/BUILD/GAP8_V2/GCC_RISCV/model:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc 00000390  00000004  1b000004  00001004  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .stack        00001038  1b000398  1b000398  00001398  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .vectors      000000a0  1c000000  1c000000  00003000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000e9a0  1c0000a0  1c0000a0  000030a0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .init_array   00000040  1c00ea40  1c00ea40  00011a40  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  1c00ea80  1c00ea80  00011a80  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .init         00000000  1c00ea8c  1c00ea8c  00013044  2**0  CONTENTS, ALLOC, LOAD, CODE
  7 .fini         00000000  1c00ea8c  1c00ea8c  00013044  2**0  CONTENTS, ALLOC, LOAD, CODE
  8 .preinit_array 00000000  1c00ea8c  1c00ea8c  00013044  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .boot         00000000  1c00ea8c  1c00ea8c  00013044  2**0  CONTENTS
 10 .got          00000000  1c00ea8c  1c00ea8c  00013044  2**0  CONTENTS, ALLOC, LOAD, DATA
 11 .shbss        00000000  1c00ea8c  1c00ea8c  00013044  2**0  CONTENTS
 12 .gnu.offload_funcs 00000000  1c00ea8c  1c00ea8c  00013044  2**0  CONTENTS
 13 .gnu.offload_vars 00000000  1c00ea8c  1c00ea8c  00013044  2**0  CONTENTS
 14 .rodata       000008d8  1c00ea8c  1c00ea8c  00011a8c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .data         000002e4  1c00f364  1c00f364  00012364  2**2  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          00000324  1c00f648  1c00f648  00012648  2**2  ALLOC
 17 .data_tiny_l1 00000018  00000004  1c00f96c  00013004  2**2  CONTENTS, ALLOC, LOAD, DATA
 18 .l1cluster_g  00000028  1000001c  1c00f984  0001301c  2**2  CONTENTS, ALLOC, LOAD, DATA
 19 .bss_l1       00000000  10000044  10000044  00013044  2**0  CONTENTS
 20 .debug_frame  0000bec0  00000000  00000000  00013044  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   000d061d  00000000  00000000  0001ef04  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 0000ea6d  00000000  00000000  000ef521  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00069e5e  00000000  00000000  000fdf8e  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 00001e70  00000000  00000000  00167df0  2**3  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 0000a0b8  00000000  00000000  00169c60  2**3  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   00035c33  00000000  00000000  00173d18  2**0  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    0000f48e  00000000  00000000  001a994b  2**0  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000001a  00000000  00000000  001b8dd9  2**0  CONTENTS, READONLY
 29 .Pulp_Chip.Info 0000004e  00000000  00000000  001b8df3  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1b000398 l    d  .stack	00000000 .stack
1c000000 l    d  .vectors	00000000 .vectors
1c0000a0 l    d  .text	00000000 .text
1c00ea40 l    d  .init_array	00000000 .init_array
1c00ea80 l    d  .fini_array	00000000 .fini_array
1c00ea8c l    d  .init	00000000 .init
1c00ea8c l    d  .fini	00000000 .fini
1c00ea8c l    d  .preinit_array	00000000 .preinit_array
1c00ea8c l    d  .boot	00000000 .boot
1c00ea8c l    d  .got	00000000 .got
1c00ea8c l    d  .shbss	00000000 .shbss
1c00ea8c l    d  .gnu.offload_funcs	00000000 .gnu.offload_funcs
1c00ea8c l    d  .gnu.offload_vars	00000000 .gnu.offload_vars
1c00ea8c l    d  .rodata	00000000 .rodata
1c00f364 l    d  .data	00000000 .data
1c00f648 l    d  .bss	00000000 .bss
00000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
1000001c l    d  .l1cluster_g	00000000 .l1cluster_g
10000044 l    d  .bss_l1	00000000 .bss_l1
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .Pulp_Chip.Info	00000000 .Pulp_Chip.Info
00000000 l    df *ABS*	00000000 bridge.c
1c00b1d2 l     F .text	0000001c __rt_event_enqueue
1c00b1ee l     F .text	00000020 __rt_bridge_check_bridge_req.part.5
1c00b20e l     F .text	00000046 __rt_bridge_wait
00000004 l     O .data_tiny_fc	00000004 __rt_bridge_flash_handle
00000008 l     O .data_tiny_fc	00000004 __rt_bridge_flash_type
0000000c l     O .data_tiny_fc	00000004 __rt_bridge_flash_itf
00000010 l     O .data_tiny_fc	00000004 __rt_bridge_flash_cs
00000014 l     O .data_tiny_fc	00000004 __rt_bridge_eeprom_handle
00000000 l    df *ABS*	00000000 events.c
00000000 l    df *ABS*	00000000 periph-v2.c
00000000 l    df *ABS*	00000000 hyperram-v1.c
1c00c7ba l     F .text	00000014 l2_memcpy
1c00c7ce l     F .text	00000024 rt_event_enqueue
1c00c7f2 l     F .text	00000032 pi_task_wait_on.isra.4
1c00cae2 l     F .text	0000004a __pi_hyper_copy_exec
1c00cc46 l     F .text	00000296 __pi_hyper_copy_misaligned
1c00cb2c l     F .text	00000056 __pi_hyper_copy
1c00cbf4 l     F .text	00000052 exec_pending_task
1c00cedc l     F .text	0000009e __pi_hyper_copy_2d
1c00cfb8 l     F .text	0000002e __rt_hyper_init
1c00f724 l     O .bss	00000080 __pi_hyper_temp_buffer
1c00f228 l     O .rodata	00000034 __hyper_pad
1c00f8e0 l     O .bss	00000004 __pi_hyper_cluster_reqs_first
1c00f8e4 l     O .bss	00000004 __rt_hyper_open_count
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 conf.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 utils.c
1c00aff2 l     F .text	0000007c __rt_fc_cluster_lock_req
1b000ba0 l     O .stack	00000018 cbsys_first
00000000 l    df *ABS*	00000000 himax.c
00000000 l    df *ABS*	00000000 io.c
1c00d220 l     F .text	0000000e __rt_io_end_of_flush
1c00d22e l     F .text	00000050 __rt_io_uart_wait_req
1c00d27e l     F .text	00000042 __rt_do_putc_host
1c00d2c0 l     F .text	0000005a __rt_io_start
1c00d31a l     F .text	00000020 rt_event_execute.isra.4.constprop.12
1c00d33a l     F .text	00000070 __rt_io_lock
1c00d3aa l     F .text	00000034 __rt_putc_host_cluster_req
1c00d3de l     F .text	00000070 __rt_io_unlock
1c00d44e l     F .text	000000da __rt_io_uart_flush.constprop.11
1c00d528 l     F .text	00000092 __rt_io_uart_wait_pending
1c00d5ba l     F .text	00000028 __rt_io_stop
1c00d726 l     F .text	000000ac tfp_putc.isra.9
1c00f83c l     O .bss	00000080 __rt_io_event
1b000bbc l     O .stack	00000010 __rt_io_fc_lock
1c00f5c8 l     O .data	00000080 __rt_putc_host_buffer
1c00f8f4 l     O .bss	00000004 __rt_io_event_current
1c00f8f8 l     O .bss	00000004 __rt_io_pending_flush
1c00f8fc l     O .bss	00000004 __rt_putc_host_buffer_index
1c00f900 l     O .bss	00000004 _rt_io_uart
00000000 l    df *ABS*	00000000 crt0.o
1c000094 l       .vectors	00000000 __rt_no_irq_handler
00000000 l    df *ABS*	00000000 sched.o
1c000132 l       .text	00000000 __rt_handle_special_event
1c00012c l       .text	00000000 __rt_no_first
1c00012e l       .text	00000000 __rt_common
1c000130 l       .text	00000000 enqueue_end
1c000192 l       .text	00000000 __rt_remote_enqueue_event_loop_cluster
1c0001ce l       .text	00000000 __rt_remote_enqueue_event_loop_cluster_continue
1c0001b8 l       .text	00000000 __rt_cluster_pool_update_end
1c0001a0 l       .text	00000000 __rt_cluster_pool_update_loop
1c0001a8 l       .text	00000000 __rt_cluster_pool_update_loop_end
1c0001b0 l       .text	00000000 __rt_cluster_pool_update_no_current
1c0001ec l       .text	00000000 __rt_remote_enqueue_event_loop_next_cluster
00000000 l    df *ABS*	00000000 vectors.o
1c000266 l       .text	00000000 __rt_call_c_function
00000000 l    df *ABS*	00000000 udma-v2.o
1c000356 l       .text	00000000 __rt_udma_no_copy
1c00031e l       .text	00000000 repeat_transfer
1c00036e l       .text	00000000 handle_special_end
1c0002ca l       .text	00000000 resume_after_special_end
1c000308 l       .text	00000000 checkTask
1c0002de l       .text	00000000 __rt_udma_call_enqueue_callback_resume
1c000304 l       .text	00000000 transfer_resume
1c0002fc l       .text	00000000 hyper
1c0002fc l       .text	00000000 fc_tcdm
1c0002fc l       .text	00000000 dual
1c00031e l       .text	00000000 dmaCmd
1c000346 l       .text	00000000 not_last
1c0003b6 l       .text	00000000 i2c_step1
1c0003d2 l       .text	00000000 i2c_step2
1c000378 l       .text	00000000 spim_step3
1c000394 l       .text	00000000 spim_step2
00000000 l    df *ABS*	00000000 soc_event_eu.o
1c000426 l       .text	00000000 __rt_fc_socevents_not_hyper_rx
1c00042c l       .text	00000000 __rt_fc_socevents_not_hyper_tx
1c000446 l       .text	00000000 __rt_soc_evt_no_udma_channel
1c0004b4 l       .text	00000000 rtc_event_handler
1c000472 l       .text	00000000 __rt_soc_evt_pwm
1c000486 l       .text	00000000 __rt_soc_evt_store
1c00049a l       .text	00000000 socevents_set
00000000 l    df *ABS*	00000000 hyperram-v1_asm.o
1c000514 l       .text	00000000 __rt_hyper_handle_copy_end
1c0004ce l       .text	00000000 __rt_hyper_repeat_copy
1c000500 l       .text	00000000 __rt_hyper_repeat_copy_not_last
1c000526 l       .text	00000000 __rt_hyper_handle_emu_task
1c000540 l       .text	00000000 __rt_hyper_handle_pending_tasks
1c0005a2 l       .text	00000000 __rt_hyper_repeat_copy_not_last2
00000000 l    df *ABS*	00000000 gpio.o
1c0005f0 l       .text	00000000 __rt_gpio_handler_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 model.c
1c000f74 l     F .text	000000c0 cluster
00000000 l    df *ABS*	00000000 modelKernels.c
1c00f648 l     O .bss	0000001c HyperFlash
1c00f664 l     O .bss	0000000c HyperRam
00000000 l    df *ABS*	00000000 ImgIO.c
00000000 l    df *ABS*	00000000 CNN_Activation_SQ8.c
1c0065e8 l     F .text	0000012e KerReductIO_Compact_SQ8_1
00000000 l    df *ABS*	00000000 CNN_Bias_Linear_SQ8.c
00000000 l    df *ABS*	00000000 CNN_Conv_SQ8.c
1c006bc0 l     F .text	0000001a LastDefinedOutput
1c006bda l     F .text	00000120 KerConv3x3Stride1_Body_2Out_SQ8
1c006cfa l     F .text	00000138 KerConv2x3from3x3Stride1_V_2Out_SQ8
1c006e32 l     F .text	0000009a KerConv3x2from3x3Stride1_H_2Out_SQ8
1c006ecc l     F .text	000000fe KerConv3x3BorderStride1_2Out_SQ8
1c006fca l     F .text	000000cc KerConv3x3Stride1_Body_SQ8
1c007096 l     F .text	000000c8 KerConv2x3from3x3Stride1_V_SQ8
1c00715e l     F .text	00000056 KerConv3x2from3x3Stride1_H_SQ8
1c0071b4 l     F .text	000000f0 KerConv3x3BorderStride1_SQ8
1c0072a4 l     F .text	000000d4 KerConv3x3Stride2_Body_SQ8
1c007378 l     F .text	000000d2 KerConv2x3from3x3Stride2_V_SQ8
1c00744a l     F .text	0000005c KerConv3x2from3x3Stride2_H_SQ8
1c0074a6 l     F .text	000000f8 KerConv3x3BorderStride2_SQ8
00000000 l    df *ABS*	00000000 CNN_Pooling_SQ8.c
1c007980 l     F .text	0000001a LastDefinedOutput
1c00799a l     F .text	000003c8 KerMaxPool2x2Stride2_SQ8
1c007d62 l     F .text	0000028e KerAvgPool2x2Stride2_SQ8
1c007ff0 l     F .text	0000007c Ker_ActivationScale1_SQ8
1c00806c l     F .text	00000220 Ker_Activation_SQ8
1c00828c l     F .text	000000d8 KerParPoolActivation
00000000 l    df *ABS*	00000000 CNN_SoftMax_SQ8.c
10000020 l     O .l1cluster_g	00000020 Reduct.15734
1c00f094 l     O .rodata	00000012 ExpCoeffLUT
1c00f0a8 l     O .rodata	00000018 FractionExpLUT
1c00f0c0 l     O .rodata	00000018 IntegerExpLUT
00000000 l    df *ABS*	00000000 norm_transpose.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 fs.c
1c008834 l     F .text	00000032 pi_task_wait_on.isra.3
00000000 l    df *ABS*	00000000 read_fs.c
1c00892a l     F .text	00000008 pi_flash_read_async
1c008932 l     F .text	0000003e __pi_read_fs_write
1c008970 l     F .text	00000010 __pi_read_fs_seek
1c008980 l     F .text	00000040 __pi_read_fs_direct_read_async
1c0089c0 l     F .text	00000018 __pi_read_fs_copy_async
1c0089d8 l     F .text	00000018 __pi_read_fs_copy_2d_async
1c0089f0 l     F .text	00000024 rt_event_enqueue
1c008a14 l     F .text	00000038 __pi_fs_free
1c008a4c l     F .text	00000004 __pi_read_fs_unmount
1c008a50 l     F .text	00000126 __pi_read_fs_open
1c008b76 l     F .text	00000126 __pi_fs_mount_step
1c008c9c l     F .text	0000004e __pi_read_fs_close
1c008cea l     F .text	0000009a __pi_read_fs_mount
1c008d84 l     F .text	00000072 __pi_fs_read_cached
1c008ed6 l     F .text	00000092 __pi_read_fs_try_read
1c008f68 l     F .text	00000040 __pi_read_fs_read_async
00000000 l    df *ABS*	00000000 host_fs.c
1c008fa8 l     F .text	0000000c __pi_host_fs_mount
1c008fb4 l     F .text	00000002 __pi_host_fs_unmount
1c008fb6 l     F .text	00000024 rt_event_enqueue
1c008fda l     F .text	00000006 __pi_host_fs_seek
1c008fe0 l     F .text	0000007e __pi_host_fs_copy_2d_async
1c00905e l     F .text	00000028 __pi_host_fs_write_async
1c009086 l     F .text	00000024 __pi_host_fs_read_async
1c0090aa l     F .text	00000042 __pi_host_fs_copy_async
1c0090ec l     F .text	00000002 __pi_host_fs_direct_read_async
1c0090ee l     F .text	0000001c __pi_host_fs_close
1c00910a l     F .text	0000005c __pi_host_fs_open
1c00f670 l     O .bss	00000088 bsp_fs_data
00000000 l    df *ABS*	00000000 hyperflash.c
1c009166 l     F .text	0000001c __rt_event_enqueue
1c009182 l     F .text	0000000e hyperflash_ioctl
1c009190 l     F .text	00000040 hyperflash_stall_task
1c0091d0 l     F .text	00000088 hyperflash_read_2d_async
1c00944a l     F .text	00000102 hyperflash_handle_pending_task
1c009258 l     F .text	00000018 hyperflash_copy_2d_async
1c009270 l     F .text	0000000e hyperflash_set_reg_exec
1c00927e l     F .text	000000b0 hyperflash_erase_sector_async
1c009a6e l     F .text	00000052 hyperflash_check_erase
1c00932e l     F .text	000000a6 hyperflash_erase_chip_async
1c0093d4 l     F .text	00000076 hyperflash_read_async
1c0096b2 l     F .text	0000005c hyperflash_program_async
1c0095aa l     F .text	00000056 hyperflash_reg_set_async
1c00954c l     F .text	0000005e hyperflash_reg_get_async
1c009600 l     F .text	000000b2 hyperflash_program_resume
1c009ac0 l     F .text	00000050 hyperflash_check_program
1c00970e l     F .text	0000001a hyperflash_copy_async
1c009728 l     F .text	0000001e hyperflash_close
1c009746 l     F .text	00000090 hyperflash_open
1c0097d6 l     F .text	00000032 pi_task_wait_on.isra.3
1c009808 l     F .text	0000002a hyperflash_copy_2d
1c009832 l     F .text	00000022 hyperflash_erase_sector
1c009854 l     F .text	00000022 hyperflash_erase_chip
1c009876 l     F .text	00000022 hyperflash_read
1c009898 l     F .text	00000022 hyperflash_reg_get
1c0098ba l     F .text	00000022 hyperflash_reg_set
1c0098dc l     F .text	00000024 hyperflash_program
1c009900 l     F .text	0000002e hyperflash_copy
1c00992e l     F .text	000000aa hyperflash_erase_resume
1c0099d8 l     F .text	00000044 hyperflash_erase_async
1c009a1c l     F .text	00000022 hyperflash_erase
1c009a3e l     F .text	00000030 hyperflash_get_status_reg
1c00f3ec l     O .data	00000054 hyperflash_api
00000000 l    df *ABS*	00000000 hyperram.c
1c009b62 l     F .text	00000012 hyperram_copy_2d_async
1c009b74 l     F .text	00000010 hyperram_copy_async
1c009b84 l     F .text	00000022 hyperram_close
1c009ba6 l     F .text	0000009a hyperram_open
1c00f440 l     O .data	00000018 hyperram_api
00000000 l    df *ABS*	00000000 ram.c
1c009c5a l     F .text	00000070 __pi_ram_cluster_req
1c009cca l     F .text	0000001e __pi_ram_cluster_req_done
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 flash_partition.c
00000000 l    df *ABS*	00000000 md5.c
1c00a14a l     F .text	000008d6 body
00000000 l    df *ABS*	00000000 semihost.c
1c00ac26 l     F .text	0000000e __internal_semihost
00000000 l    df *ABS*	00000000 ai_deck.c
1c00acca l     F .text	0000003c __bsp_init_pads
1c00f8d4 l     O .bss	00000004 __bsp_init_pads_done
00000000 l    df *ABS*	00000000 init.c
1c00ad48 l     F .text	00000026 cluster_start
1c00ea44 l     O .init_array	00000004 ctor_list
1c00ea84 l     O .fini_array	00000004 dtor_list
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 alloc.c
00000000 l    df *ABS*	00000000 time.c
1c00b848 l     F .text	00000018 __rt_time_poweroff
1c00b860 l     F .text	00000018 __rt_time_poweron
1c00f8d8 l     O .bss	00000004 timer_count
00000000 l    df *ABS*	00000000 time_irq.c
00000000 l    df *ABS*	00000000 freq.c
00000000 l    df *ABS*	00000000 pmu_driver.c
1c00bd04 l     F .text	0000002c SetFllMultDivFactors
1c00bd30 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00f57c l     O .data	00000007 SystemStateToSCUFastSeq
1c00f594 l     O .data	00000003 ToHWDCDC_Pos
1c00f5a4 l     O .data	00000004 RetPMUStateToPMUState
00000000 l    df *ABS*	00000000 cluster.c
1c00c150 l     F .text	00000062 __rt_init_cluster_data
1c00c1b2 l     F .text	00000064 __rt_cluster_init
1c00c216 l     F .text	0000012a __rt_cluster_mount_step
00000000 l    df *ABS*	00000000 pulpos_emu.c
1c00c4fc l     F .text	0000003c __rt_cluster_pulpos_emu_init
1c00f6f8 l     O .bss	0000002c __rt_pulpos_emu_global_cluster_task
1c00f8dc l     O .bss	00000004 __rt_fc_cluster_device
00000000 l    df *ABS*	00000000 cluster_call.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 gpio-v2.c
1c00f7a4 l     O .bss	00000098 __rt_gpio
00000000 l    df *ABS*	00000000 i2s-v1.c
1c00d102 l     F .text	00000034 __rt_i2s_resume
1c00d136 l     F .text	0000002a __rt_i2s_setfreq_after
1c00d160 l     F .text	0000002c __rt_i2s_setfreq_before
1c00f8e8 l     O .bss	00000004 __rt_i2s_first
00000000 l    df *ABS*	00000000 i2c-v2.c
1c00f5a8 l     O .data	00000020 __rt_i2c
00000000 l    df *ABS*	00000000 spim-v2.c
1c00f8ec l     O .bss	00000008 __rt_spim_open_count
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 prf.c
1c00d994 l     F .text	00000092 _to_x
1c00da26 l     F .text	00000020 _rlrshift
1c00da46 l     F .text	00000044 _ldiv5
1c00da8a l     F .text	00000034 _get_digit
00000000 l    df *ABS*	00000000 uart.c
1c00e59a l     F .text	00000024 __rt_uart_setup.isra.5
1c00e5be l     F .text	00000022 __rt_uart_setfreq_after
1c00e5e0 l     F .text	00000042 __rt_uart_wait_tx_done.isra.6
1c00e622 l     F .text	0000002c __rt_uart_setfreq_before
1c00e64e l     F .text	00000042 __rt_uart_cluster_req
1c00e690 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00f8bc l     O .bss	00000010 __rt_uart
00000000 l    df *ABS*	00000000 pe-eu-v3.o
1c00e94e l       .text	00000000 __rt_slave_start
1c00e8a4 l       .text	00000000 __rt_master_event
1c00e8b8 l       .text	00000000 __rt_master_loop
1c00e8a8 l       .text	00000000 __rt_push_event_to_fc_retry
1c00e940 l       .text	00000000 __rt_push_event_to_fc_wait
1c00e932 l       .text	00000000 __rt_master_sleep
1c00e8c0 l       .text	00000000 __rt_master_loop_update_next
1c00e914 l       .text	00000000 __rt_no_stack_check
1c00e920 l       .text	00000000 __rt_master_no_slave_barrier
1c00e930 l       .text	00000000 __rt_master_loop_no_slave
1c00e96c l       .text	00000000 __rt_fork_return
1c00e970 l       .text	00000000 __rt_wait_for_dispatch
1c00e986 l       .text	00000000 __rt_other_entry
1c00e980 l       .text	00000000 __rt_fork_entry
1c00e9ae l       .text	00000000 __rt_no_stack_check_end
1c00ea20 l       .text	00000000 __rt_dma_2d_done
1c00e9de l       .text	00000000 __rt_dma_2d_redo
1c00e9e6 l       .text	00000000 __rt_dma_2d_not_last
1c00ea08 l       .text	00000000 __rt_dma_2d_exit
00000000 l    df *ABS*	00000000 libgcc2.c
1c00cb82 g     F .text	00000016 pi_hyper_read_async
1c00d848 g     F .text	00000006 putchar
1c008826 g     F .text	0000000c pi_flash_open
00000000 g       *ABS*	00000000 __rt_debug_init_config_trace
00000350 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_stride
1c00b82a g     F .text	0000000e pi_l2_malloc
1c00b164 g     F .text	00000038 __rt_fc_cluster_lock
1c00bec6 g     F .text	000000a4 InitOneFll
1c00b838 g     F .text	00000010 pi_l2_free
00000000 g       *ABS*	00000000 __RT_DEBUG_CONFIG
1c00f940 g     O .bss	00000004 __rt_cluster_tasks
1c00b336 g     F .text	00000022 __rt_bridge_send_notif
1c006912 g     F .text	00000140 KerParLinearLayer_SQ8
1c00b4a8 g     F .text	00000076 rt_event_alloc
00000338 g     O .data_tiny_fc	00000001 __rt_hyper_pending_emu_do_memcpy
1c00cf7a g     F .text	00000018 pi_hyper_read_2d_async
1c00ac8e g     F .text	0000001e semihost_write
1c00b57e g     F .text	00000064 __rt_event_execute
1c00afa0 g     F .text	00000052 __rt_irq_init
1c00b666 g     F .text	00000048 rt_user_alloc
00000310 g     O .data_tiny_fc	00000004 __rt_hyper_pending_hyper_addr
1c00c346 g     F .text	000000d8 pi_cluster_open
1c00d968 g     F .text	0000002c printf
ffffffff g       *ABS*	00000000 pulp__L2
1c00b7a6 g     F .text	00000072 __rt_allocs_init
1c00f924 g     O .bss	00000004 __rt_alloc_l1
1c00c340 g     F .text	00000006 pi_cluster_conf_init
ffffffff g       *ABS*	00000000 pulp__PE
1c00c9ec g     F .text	0000009e pi_hyper_close
1c00af02 g     F .text	0000004c rt_irq_set_handler
00000314 g     O .data_tiny_fc	00000004 __rt_hyper_pending_addr
1c008878 g     F .text	0000002c pi_fs_mount
00000308 g     O .data_tiny_fc	00000004 __rt_hyper_udma_handle
1c00c034 g     F .text	00000044 InitFlls
00000018 g     O .data_tiny_fc	00000004 __rt_first_free
1c009ed4 g     F .text	0000000a pi_partition_get_flash_offset
1c00ad06 g     F .text	00000018 bsp_hyperram_conf_init
00000001 g       *ABS*	00000000 __ACTIVE_FC
1c000c5e g     F .text	000001fe .hidden __divsf3
1c00b72a g     F .text	0000002e rt_free
1c009ee0 g     F .text	00000004 pi_partition_table_load
00000400 g       *ABS*	00000000 __rt_cl_slave_stack_size
1c00bcc6 g     F .text	0000003e __rt_freq_init
1c00ad6e g     F .text	00000168 __rt_init
00000001 g       *ABS*	00000000 __FC
1c00c134 g     F .text	00000012 __rt_fll_init
1c00f578 g     O .data	00000004 model_L2_Memory
1b0013d0 g       .stack	00000000 __fc_tcdm_end
1c00d01a g     F .text	00000058 rt_extern_alloc_init
1c00b434 g     F .text	00000034 __rt_bridge_init
00000018 g     O .data_tiny_l1	00000004 __rt_cluster_nb_active_pe
1c002342 g     F .text	00000bd2 S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu
0000032c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_hyper_addr
1c0017aa g     F .text	00000b98 S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu
1c00d1ea g     F .text	00000012 __rt_i2c_init
1c001034 g     F .text	00000222 test_model
1c00ea40 g       .text	00000000 _etext
0000030c g     O .data_tiny_fc	00000004 __rt_hyper_pending_base
1c00f364 g       .data	00000000 sdata
1c00ac70 g     F .text	0000001e semihost_read
00000001 g       *ABS*	00000000 __rt_nb_cluster
1c00ad38 g     F .text	00000010 bsp_hyperflash_open
1c009b10 g     F .text	00000028 pi_hyperflash_conf_init
1c009d90 g     F .text	00000052 extern_alloc_init
00000390 g     O .data_tiny_fc	00000004 __rtc_handler
1c00b6fa g     F .text	00000030 rt_alloc
1c00f364 g     O .data	0000001c AT_GraphNodeNames
1c00e574 g     F .text	00000026 __rt_uart_cluster_req_done
1c00aed6 g     F .text	00000028 __rt_deinit
1b000bb8 g     O .stack	00000001 camera_isAwaked
1c00010e g       .text	00000000 __rt_event_enqueue
1c00b8f2 g     F .text	00000024 rt_time_wait_us
1c00d63c g     F .text	00000036 memcpy
1c0005da g       .text	00000000 __rt_gpio_handler
1c000246 g       .text	00000000 __rt_illegal_instr
1c00b77c g     F .text	0000002a __rt_alloc_init_l1_for_fc
1c00cf92 g     F .text	0000001a pi_hyper_write_2d_async
1c008364 g     F .text	0000018e KerParPool2x2Stride2_ReLU_SQ8
1c0088f2 g     F .text	00000026 pi_fs_write
1c00d00e g     F .text	0000000c __rt_padframe_init
1c00ea8c g       .fini_array	00000000 __DTOR_END__
0000020c g       *ABS*	00000000 __cluster_text_size
1c0004c8 g       .text	00000000 __rt_hyper_handle_copy
1c00d7d2 g     F .text	0000002c puts
1c00f488  w    O .data	00000018 __rt_padframe_profiles
00000330 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_addr
00000344 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks_last
1c00b538 g     F .text	00000022 rt_event_get_blocking
1c00f648 g       .bss	00000000 _bss_start
1c00f648 g       .data	00000000 edata
1c00b758 g     F .text	00000024 __rt_alloc_init_l1
1c00f568  w    O .data	00000004 __rt_iodev_uart_baudrate
1c000174 g       .text	00000000 __rt_remote_enqueue_event
1c00f584 g     O .data	00000010 PMUState
1c009d36 g     F .text	0000005a pi_cl_ram_copy_2d
1c00f364 g       .data	00000000 _sdata
1c00b63e g     F .text	00000008 pi_cl_send_task_to_fc
1c009b38 g     F .text	0000001e hyperram_alloc
10000044 g       .l1cluster_g	00000000 __l1_end
1c000560 g       .text	00000000 __rt_hyper_handle_burst
1c00ba94 g     F .text	00000134 rt_periph_copy
1c00d6ea g     F .text	0000003c __rt_putc_uart
1b000398 g     O .stack	00000800 __rt_fc_stack
1c009de2 g     F .text	00000008 extern_alloc_deinit
00000010 g     O .data_tiny_l1	00000004 __rt_dma_last_pending
1c00013c g       .text	00000000 __rt_bridge_enqueue_event
1c000eec g     F .text	00000088 .hidden __extendsfdf2
1c00dabe g     F .text	00000ab6 _prf
1c006716 g     F .text	0000009a KerParReduct_CC_SQ8
10000044 g       .l1cluster_g	00000000 _libgomp_start
1c000930 g     F .text	0000032e .hidden __umoddi3
1c005ca0 g     F .text	000000a2 SkipCommentAndWhiteSpace
1c00b9a2 g     F .text	000000f2 __rt_timer_handler
1c00f928 g     O .bss	00000004 __rt_alloc_l2
1c005a4e g     F .text	00000252 modelCNN
1b0013d0 g       .stack	00000000 stack
1c0005f4 g     F .text	0000033c .hidden __udivdi3
1c009cf4 g     F .text	00000042 pi_cl_ram_copy
1c00d8ec g     F .text	0000000a abort
1c0088ac g     F .text	00000008 pi_fs_open
1c00b51e g     F .text	0000001a rt_event_get
1c00f934 g     O .bss	00000008 __rt_freq_domains
00000040 g       *ABS*	00000000 _l1_preload_size
1c00010c g       .text	00000000 _init
1c009e48 g     F .text	0000008c extern_free
1c00f96c g       .bss	00000000 _bss_end
1c00a0de g     F .text	0000006c flash_partition_find_first
1c00f468  w    O .data	00000010 __rt_padframe_hyper
1c00b318 g     F .text	0000001e __rt_bridge_set_available
1c005d42 g     F .text	000000b2 ReadValue
1c00e9b0 g       .text	00000000 __rt_dma_2d
1c00e834 g       .text	00000000 __rt_pe_start
1c00f930 g     O .bss	00000004 first_delayed
1c00f380 g     O .data	0000001c AT_GraphOperInfosNames
0000038c g     O .data_tiny_fc	00000004 __rt_rtc_init_done
00000008 g       *ABS*	00000000 __NB_ACTIVE_PE
1c0067b0 g     F .text	000000ae KerParReductIO_CC_SQ8
1c00c71e g     F .text	0000004a pi_cluster_send_task_to_cl
1c00bf6a g     F .text	000000ca __rt_pmu_cluster_power_up
1b000bd0 g       .stack	00000000 stack_start
00000004 g     O .data_tiny_l1	0000000c __rt_cluster_pool
00010000 g       *ABS*	00000000 __L1Cl
1c0077e2 g     F .text	0000019e KerParConv3x3Stride2_SQ8
1c00e6c6 g     F .text	0000008e __rt_uart_open
1c00cbd2 g     F .text	00000022 pi_hyper_write
1c004546 g     F .text	000005a0 S6_Linear_2x64
1c00b0dc g     F .text	00000022 __rt_utils_init
1c00c624 g     F .text	000000fa pi_cluster_send_task_to_cl_async
1c008df6 g     F .text	000000e0 __pi_fs_read
1c00f458  w    O .data	00000010 __rt_padframe_default
1c00d7fe g     F .text	0000001a fputc_locked
1c00b81e g     F .text	0000000c pi_cl_l1_free
1c008922 g     F .text	00000008 pi_fs_seek
1c0087d0 g     F .text	00000056 CNN_NormBW_offset_fps
1c00e754 g     F .text	0000004e rt_uart_close
1c00c88c g     F .text	00000160 pi_hyper_open
1c00b6ae g     F .text	0000004c rt_user_free
1c0088c4 g     F .text	00000026 pi_fs_read
1c00ea40 g       .init_array	00000000 __CTOR_LIST__
1c00bbc8 g     F .text	00000056 __rt_periph_wait_event
1c00bc7c g     F .text	0000004a rt_freq_set_and_get
1c009c40 g     F .text	0000001a pi_hyperram_conf_init
1c00ac34 g     F .text	00000008 semihost_write0
1c00af4e  w    F .text	00000002 illegal_insn_handler_c
0000033c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_task
1c00c450 g     F .text	00000070 __rt_cluster_push_fc_event
1c00f8cc g     O .bss	00000004 model_L3_Flash
00000320 g     O .data_tiny_fc	00000004 __rt_hyper_end_task
1c00e834 g       .text	00000000 __cluster_text_start
1c004ae6 g     F .text	00000290 S7_SoftMax
1c00cbba g     F .text	00000018 pi_hyper_write_async
1c000080 g       .vectors	00000000 _start
1c00cb98 g     F .text	00000022 pi_hyper_read
1c00b646 g     F .text	00000020 rt_user_alloc_init
1c00f904 g     O .bss	0000001c AT_GraphPerf
1c00f920 g     O .bss	00000004 model_L3_Memory
00000000 g       *ABS*	00000000 __rt_config
1c00aa20 g     F .text	00000032 MD5_Init
00000334 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size
1c00d5f6 g     F .text	00000020 strncmp
1c00f96c g       .bss	00000000 _l1_preload_start_inL2
1c00b0fe g     F .text	00000032 __rt_fc_lock
10000044 g       .l1cluster_g	00000000 __l1_heap_start
1c00b490 g     F .text	00000018 __rt_wait_event_prepare_blocking
1c00b254 g     F .text	00000078 __rt_bridge_handle_notif
1c00045e g       .text	00000000 __rt_soc_evt_no_udma
1c0088b4 g     F .text	00000008 pi_fs_close
10000040 g     O .l1cluster_g	00000004 __rt_cluster_fc_task_lock
00000340 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks
1c00b55a g     F .text	00000024 rt_event_push
1c0059c6 g     F .text	00000088 modelCNN_Destruct
1c00b358 g     F .text	00000022 __rt_bridge_clear_notif
1c009fb6 g     F .text	00000104 flash_partition_table_load
00000014 g     O .data_tiny_l1	00000004 __rt_dma_first_pending
1c00f4a0 g     O .data	000000c0 __hal_debug_struct
1c008866 g     F .text	00000012 pi_fs_conf_init
1c00aaee g     F .text	00000138 MD5_Final
1c00b916 g     F .text	0000008c __rt_time_init
1c00c850 g     F .text	0000002c __pi_hyper_pin_reset_settings
00080000 g       *ABS*	00000000 __L2
00000008 g       *ABS*	00000000 __rt_nb_pe
1c0000a0 g       .text	00000000 _entry
1c009ee4 g     F .text	0000005e pi_partition_find_first
1c00b5e2 g     F .text	0000002c __rt_wait_event
1c00c078 g     F .text	000000bc __rt_pmu_init
1c006a52 g     F .text	0000016e KerParLinearLayerFullFeatB32_SQ8
1c00ad2e g     F .text	0000000a bsp_hyperflash_conf_init
1c0088bc g     F .text	00000008 pi_fs_read_async
1c00af50 g     F .text	00000050 __rt_handle_illegal_instr
1c00d62c g     F .text	00000010 memset
1c00ca8a g     F .text	00000058 __pi_hyper_copy_aligned
1c001256 g     F .text	00000012 main
1c00c146 g     F .text	00000002 __rt_fll_deinit
1c0004a4 g       .text	00000000 udma_event_handler_end
1c00f92c g     O .bss	00000004 __rt_alloc_fc_tcdm
1c00d1e0 g     F .text	0000000a __rt_himax_init
1c00f570 g     O .data	00000004 ResOut
1c00b19c g     F .text	00000036 __rt_fc_cluster_unlock
00000318 g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat
1c00d8f6 g     F .text	00000072 __rt_io_init
1c00f478  w    O .data	00000010 __rt_padframe_hyper_gpio
00000000 g       *ABS*	00000000 __FETCH_ALL
1c00ad1e g     F .text	00000010 bsp_hyperram_open
1c004d76 g     F .text	00000c50 modelCNN_Construct
1c008832 g     F .text	00000002 __flash_conf_init
1c00f56c  w    O .data	00000004 __rt_platform
1c00ea80 g       .init_array	00000000 __CTOR_END__
1c00f39c g     O .data	00000028 __pi_read_fs_api
1c00c824 g     F .text	0000002c __pi_hyper_pin_settings
1c00d5e2 g     F .text	00000014 strcmp
1000001c g     O .l1cluster_g	00000004 model_L1_Memory
1c00acc2 g     F .text	00000008 semihost_exit
1c00ea80 g       .fini_array	00000000 __DTOR_LIST__
1c00b468 g     F .text	00000028 __rt_event_init
000002e0 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback_arg
1c0005b6 g       .text	00000000 pwm_event_handler
00000348 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size_2d
1c00d84e g     F .text	00000028 _prf_locked
00000000 g       *ABS*	00000000 __USE_UART
1c00cfac g     F .text	00000008 __rt_hyper_resume_emu_task
1c00bde6 g     F .text	000000e0 SetFllFrequency
1c00759e g     F .text	00000244 KerParConv3x3Stride1_SQ8
1c00c148 g     F .text	00000002 __rt_flls_constructor
1c00b878 g     F .text	0000007a rt_event_push_delayed
1c00010c g       .text	00000000 _fini
1c009dea g     F .text	0000005e extern_alloc
1c00b60e g     F .text	0000001a rt_event_wait
1c000090 g       .vectors	00000000 __rt_debug_struct_ptr
1c00eac8 g     O .rodata	00000100 .hidden __clz_tab
00000328 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_channel
1c00e98c g       .text	00000000 __rt_set_slave_stack
1c00b63c g     F .text	00000002 pi_task_push_delayed_us
1c00b818 g     F .text	00000006 pi_cl_l1_malloc
1c00f560  w    O .data	00000004 __rt_fc_stack_size
1c009f42 g     F .text	00000074 flash_partition_table_verify
1c0003f4 g       .text	00000000 __rt_fc_socevents_handler
000002b8 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback
00000358 g     O .data_tiny_fc	00000034 dev_rtc
1c0088ea g     F .text	00000008 pi_fs_write_async
1c00f3c4 g     O .data	00000028 __pi_host_fs_api
1c00d818 g     F .text	00000030 fputc
1c00d072 g     F .text	0000000a rt_extern_alloc_deinit
1c00c79c g     F .text	0000001e pi_pad_init
1c008918 g     F .text	0000000a pi_fs_copy_async
1c001268 g     F .text	00000542 S1_Op_input_1_formatter
1c000200 g       .text	00000000 __rt_call_external_c_function
1c00b130 g     F .text	00000034 __rt_fc_unlock
1c009ce8 g     F .text	0000000c pi_ram_open
00000004 g       .data_tiny_l1	00000000 _l1_preload_start
1c00d07c g     F .text	00000086 __pi_gpio_handler
000002b0 g     O .data_tiny_fc	00000008 __rt_socevents_status
1c00b37a g     F .text	00000042 __rt_bridge_printf_flush
1c00c87c g     F .text	00000010 pi_hyper_conf_init
1c00f564  w    O .data	00000004 __rt_iodev
0000001c g     O .data_tiny_fc	00000014 __rt_sched
1c000000 g       .vectors	00000000 __irq_vector_base
1c005df4 g     F .text	000007f4 ReadImageFromFile
1c00f648 g       .data	00000000 _edata
1c002f14 g     F .text	00000c72 S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu
00000000 g       *ABS*	00000000 __ZERO
1c00bc1e g     F .text	0000005e __rt_periph_init
1c009ede g     F .text	00000002 pi_partition_table_free
1c00d20e g     F .text	00000012 __rt_spim_init
1c00b2cc g     F .text	0000004c __rt_bridge_check_connection
1c00c538 g     F .text	00000090 rt_cluster_call
00000800 g       *ABS*	00000000 __rt_stack_size
1c00aefe g     F .text	00000004 pi_open_from_conf
ffffffff g       *ABS*	00000000 pulp__FC
1c00d18c g     F .text	00000054 __rt_i2s_init
00000003 g       *ABS*	00000000 __rt_debug_init_config
1c00a0ba g     F .text	00000024 flash_partition_table_free
1c00f944 g     O .bss	00000028 __rt_fc_cluster_data
1c00d876 g     F .text	00000076 exit
1c00b628 g     F .text	00000014 __rt_event_sched_init
1c000e5c g     F .text	00000090 .hidden __floatunsisf
0000034c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_length
1c0002b4 g       .text	00000000 udma_event_handler
1c00c41e g     F .text	00000032 pi_cluster_close
1c00cfb4 g     F .text	00000004 __rt_hyper_resume_copy
00000354 g     O .data_tiny_fc	00000004 pwmEventsStatus
1c0088a4 g     F .text	00000008 pi_fs_unmount
1c00acac g     F .text	00000016 semihost_seek
1c00b0ac g     F .text	00000030 __rt_cbsys_exec
0000ffbc g       .l1cluster_g	00000000 __l1_heap_size
1c00f574 g     O .data	00000004 Img_In
1c00bd56 g     F .text	00000090 __rt_pmu_cluster_power_down
0000031c g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat_size
1b000b98 g     O .stack	00000004 __rt_debug_config_trace
1c00685e g     F .text	000000b4 KerParSetBiasB32_SQ8
1c00f8d0  w    O .bss	00000004 __rt_iodev_uart_channel
1c0000a0 g       .text	00000000 _stext
1c00f598 g     O .data	00000004 PMURetentionState
ffffffff g       *ABS*	00000000 pulp__L1CL
1c00d616 g     F .text	00000016 strlen
1c00cfe6 g     F .text	00000028 rt_padframe_set
1c00ac68 g     F .text	00000008 semihost_close
1c00c768 g     F .text	00000034 pi_pad_set_function
1c00f93c g     O .bss	00000004 __rt_wakeup_use_fast
00000400 g       *ABS*	00000000 __rt_cl_master_stack_size
1c00d672 g     F .text	0000001a strchr
1c00b3bc g     F .text	00000078 __rt_bridge_req_shutdown
1c00e6b6 g     F .text	00000010 rt_uart_conf_init
1c00ea40 g       .text	00000000 __cluster_text_end
1c00e7d6 g     F .text	0000005c __rt_uart_init
1c00f9ac g       *ABS*	00000000 __l2_end
1c00c5c8 g     F .text	0000005c rt_cluster_mount
1c00d1fc g     F .text	00000012 __rt_rtc_init
1c00e7a2 g     F .text	00000034 rt_uart_cluster_write
1c009b56 g     F .text	0000000c hyperram_free
1c000098 g       .vectors	00000000 __rt_semihosting_call
1c00aa52 g     F .text	0000009c MD5_Update
1b000b9c g     O .stack	00000004 __rt_debug_config
1c003b86 g     F .text	000009c0 S5_Linear_64x13x18x128
1c00c14a g     F .text	00000006 __rt_fll_set_freq
1c00b06e g     F .text	0000003e __rt_cbsys_add
1c00c4c0 g     F .text	0000003c __rt_cluster_new
1c00d68c g     F .text	0000005e __rt_putc_debug_bridge
1c0084f2 g     F .text	000002de KerParSoftMax_SQ8
1c00ea40 g       .text	00000000 _endtext
00000324 g     O .data_tiny_fc	00000004 __rt_hyper_current_task
1c00ac3c g     F .text	0000002c semihost_open
ffffffff g       *ABS*	00000000 pulp__L1FC
1c00f59c g     O .data	00000008 FllsFrequency
00000030 g     O .data_tiny_fc	00000280 periph_channels



Disassembly of section .vectors:

1c000000 <__irq_vector_base>:


#ifdef ARCHI_CORE_HAS_1_10
  j __rt_illegal_instr
#else
  j __rt_no_irq_handler
1c000000:	0940006f          	j	1c000094 <__rt_no_irq_handler>
#endif

  j __rt_no_irq_handler
1c000004:	0900006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000008:	08c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00000c:	0880006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000010:	0840006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000014:	0800006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000018:	07c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00001c:	0780006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000020:	0740006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000024:	0700006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000028:	06c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00002c:	0680006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000030:	0640006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000034:	0600006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000038:	05c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00003c:	0580006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000040:	0540006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000044:	0500006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000048:	04c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00004c:	0480006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000050:	0440006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000054:	0400006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000058:	03c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00005c:	0380006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000060:	0340006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000064:	0300006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000068:	02c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00006c:	0280006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000070:	0240006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000074:	0200006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000078:	01c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00007c:	0180006f          	j	1c000094 <__rt_no_irq_handler>

1c000080 <_start>:


  .org 0x80
  .global _start
_start:
  jal x0, _entry
1c000080:	0200006f          	j	1c0000a0 <_entry>


#ifndef __RT_MODE_BARE

  jal x0, __rt_illegal_instr
1c000084:	1c20006f          	j	1c000246 <__rt_illegal_instr>
	...

1c000090 <__rt_debug_struct_ptr>:
1c000090:	f4a0                	fsw	fs0,104(s1)
1c000092:	1c00                	addi	s0,sp,560

1c000094 <__rt_no_irq_handler>:
  .word __hal_debug_struct

#endif

__rt_no_irq_handler:
  j __rt_no_irq_handler
1c000094:	0000006f          	j	1c000094 <__rt_no_irq_handler>

1c000098 <__rt_semihosting_call>:

#endif

  .global __rt_semihosting_call
__rt_semihosting_call:
  ebreak
1c000098:	00100073          	ebreak
  jr          ra
1c00009c:	00008067          	ret

Disassembly of section .text:

1c0000a0 <_entry>:
  csrw    0x7A1, x0
1c0000a0:	7a101073          	csrw	pcmr,zero
  csrr    a0, 0xF14
1c0000a4:	f1402573          	csrr	a0,mhartid
  andi    a1, a0, 0x1f
1c0000a8:	01f57593          	andi	a1,a0,31
  srli    a0, a0, 5
1c0000ac:	8115                	srli	a0,a0,0x5
  li      a2, ARCHI_FC_CID
1c0000ae:	02000613          	li	a2,32
  bne     a0, a2, __rt_pe_start
1c0000b2:	00c50463          	beq	a0,a2,1c0000ba <_entry+0x1a>
1c0000b6:	77e0e06f          	j	1c00e834 <__cluster_text_start>
  la      t0, _bss_start
1c0000ba:	0000f297          	auipc	t0,0xf
1c0000be:	58e28293          	addi	t0,t0,1422 # 1c00f648 <_edata>
  la      t1, _bss_end
1c0000c2:	00010317          	auipc	t1,0x10
1c0000c6:	8aa30313          	addi	t1,t1,-1878 # 1c00f96c <_bss_end>
  sw      zero,0(t0)
1c0000ca:	0002a023          	sw	zero,0(t0)
  addi    t0, t0, 4
1c0000ce:	0291                	addi	t0,t0,4
  bltu    t0, t1, 1b
1c0000d0:	fe62ede3          	bltu	t0,t1,1c0000ca <_entry+0x2a>
  la   a0, __rt_fc_stack_size
1c0000d4:	0000f517          	auipc	a0,0xf
1c0000d8:	48c50513          	addi	a0,a0,1164 # 1c00f560 <__rt_fc_stack_size>
  lw   a0, 0(a0)
1c0000dc:	4108                	lw	a0,0(a0)
  la   x2, __rt_fc_stack
1c0000de:	ff000117          	auipc	sp,0xff000
1c0000e2:	2ba10113          	addi	sp,sp,698 # 1b000398 <__rt_fc_stack>
  add  x2, x2, a0
1c0000e6:	912a                	add	sp,sp,a0
  jal  x1, __rt_init
1c0000e8:	4870a0ef          	jal	ra,1c00ad6e <__rt_init>
  addi  a0, x0, 0
1c0000ec:	00000513          	li	a0,0
  addi  a1, x0, 0
1c0000f0:	00000593          	li	a1,0
  la    t2, main
1c0000f4:	00001397          	auipc	t2,0x1
1c0000f8:	16238393          	addi	t2,t2,354 # 1c001256 <main>
  jalr  x1, t2
1c0000fc:	000380e7          	jalr	t2
  mv    s0, a0
1c000100:	842a                	mv	s0,a0
  jal  x1, __rt_deinit
1c000102:	5d50a0ef          	jal	ra,1c00aed6 <__rt_deinit>
  mv   a0, s0
1c000106:	8522                	mv	a0,s0
  jal  x1, exit
1c000108:	76e0d0ef          	jal	ra,1c00d876 <exit>

1c00010c <_fini>:
  ret
1c00010c:	8082                	ret

1c00010e <__rt_event_enqueue>:
  //   x10/a0: temporary register
  //   x11/a1: the event
  //   x12/a2: temporary register

  // First check if it is a normal event
  andi    x10, x11, 0x3
1c00010e:	0035f513          	andi	a0,a1,3
  bne     x10, x0, __rt_handle_special_event
1c000112:	02051063          	bnez	a0,1c000132 <__rt_handle_special_event>

  // Enqueue normal event
  la      x10, __rt_sched
1c000116:	e4000517          	auipc	a0,0xe4000
1c00011a:	f0650513          	addi	a0,a0,-250 # 1c <__rt_sched>
  sw      x0, RT_EVENT_T_NEXT(x11)
1c00011e:	0005a023          	sw	zero,0(a1)
  lw      x12, RT_SCHED_T_FIRST(x10)
1c000122:	4110                	lw	a2,0(a0)
  beqz    x12, __rt_no_first
1c000124:	c601                	beqz	a2,1c00012c <__rt_no_first>
  lw      x12, RT_SCHED_T_LAST(x10)
1c000126:	4150                	lw	a2,4(a0)
  sw      x11, RT_EVENT_T_NEXT(x12)
1c000128:	c20c                	sw	a1,0(a2)
  j       __rt_common
1c00012a:	a011                	j	1c00012e <__rt_common>

1c00012c <__rt_no_first>:

__rt_no_first:
  sw      x11, RT_SCHED_T_FIRST(x10)
1c00012c:	c10c                	sw	a1,0(a0)

1c00012e <__rt_common>:

__rt_common:
  sw      x11, RT_SCHED_T_LAST(x10)
1c00012e:	c14c                	sw	a1,4(a0)

1c000130 <enqueue_end>:

enqueue_end:
  jr          x9
1c000130:	8482                	jr	s1

1c000132 <__rt_handle_special_event>:

__rt_handle_special_event:
  li      x10, ~0x3
1c000132:	5571                	li	a0,-4
  and     x11, x11, x10
1c000134:	8de9                	and	a1,a1,a0
  lw      x12, PI_CALLBACK_T_ENTRY(x11)
1c000136:	41d0                	lw	a2,4(a1)
  lw      x10, PI_CALLBACK_T_ARG(x11)
1c000138:	4588                	lw	a0,8(a1)
  j       __rt_call_external_c_function
1c00013a:	a0d9                	j	1c000200 <__rt_call_external_c_function>

1c00013c <__rt_bridge_enqueue_event>:
    // to enqueue an event to the FC scheduler.

    .global __rt_bridge_enqueue_event
__rt_bridge_enqueue_event:

    sw  x8, -4(sp)
1c00013c:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000140:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c000144:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000148:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00014c:	fec12623          	sw	a2,-20(sp)

    // Everything is done from C code
    la      x12, __rt_bridge_handle_notif
1c000150:	0000b617          	auipc	a2,0xb
1c000154:	10460613          	addi	a2,a2,260 # 1c00b254 <__rt_bridge_handle_notif>
    jal     x9, __rt_call_external_c_function
1c000158:	0a8004ef          	jal	s1,1c000200 <__rt_call_external_c_function>

    lw  x8, -4(sp)
1c00015c:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c000160:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c000164:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c000168:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00016c:	fec12603          	lw	a2,-20(sp)

    mret
1c000170:	30200073          	mret

1c000174 <__rt_remote_enqueue_event>:
    // The FC must get it and push it to the scheduler

    .global __rt_remote_enqueue_event
__rt_remote_enqueue_event:

    sw  x8, -4(sp)
1c000174:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000178:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00017c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000180:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c000184:	fec12623          	sw	a2,-20(sp)

#ifndef ARCHI_NB_CLUSTER
    li   x8, 1
1c000188:	4405                	li	s0,1
#else
    li   x8, ARCHI_NB_CLUSTER
#endif
    la   x9, __rt_fc_cluster_data
1c00018a:	0000f497          	auipc	s1,0xf
1c00018e:	7ba48493          	addi	s1,s1,1978 # 1c00f944 <__rt_fc_cluster_data>

1c000192 <__rt_remote_enqueue_event_loop_cluster>:

    // Loop over the clusters to see if there is an event to push
__rt_remote_enqueue_event_loop_cluster:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000192:	40cc                	lw	a1,4(s1)
    beq  a1, x0, __rt_remote_enqueue_event_loop_cluster_continue
1c000194:	02058d63          	beqz	a1,1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>

    // Everytime a task is finished, first check if we can update the queue head
    // as it is not updated by cluster side to avoid race conditions.
    // At least this task won t be there anymore after we update, and maybe even
    // more tasks, which is not an issue, as we compare against the head.
    lw   a1, RT_FC_CLUSTER_DATA_T_CLUSTER_POOL(x9)
1c000198:	48cc                	lw	a1,20(s1)
    lw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c00019a:	41c8                	lw	a0,4(a1)

    beq  a0, x0, __rt_cluster_pool_update_end
1c00019c:	00050e63          	beqz	a0,1c0001b8 <__rt_cluster_pool_update_end>

1c0001a0 <__rt_cluster_pool_update_loop>:

__rt_cluster_pool_update_loop:
    lw    a2, RT_CLUSTER_TASK_PENDING(a0)
1c0001a0:	5150                	lw	a2,36(a0)
    bnez  a2, __rt_cluster_pool_update_loop_end
1c0001a2:	e219                	bnez	a2,1c0001a8 <__rt_cluster_pool_update_loop_end>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001a4:	5108                	lw	a0,32(a0)
    bnez a0, __rt_cluster_pool_update_loop
1c0001a6:	fd6d                	bnez	a0,1c0001a0 <__rt_cluster_pool_update_loop>

1c0001a8 <__rt_cluster_pool_update_loop_end>:


__rt_cluster_pool_update_loop_end:
    
    beqz a0, __rt_cluster_pool_update_no_current
1c0001a8:	c501                	beqz	a0,1c0001b0 <__rt_cluster_pool_update_no_current>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001aa:	5108                	lw	a0,32(a0)
    sw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001ac:	c1c8                	sw	a0,4(a1)

    j    __rt_cluster_pool_update_end
1c0001ae:	a029                	j	1c0001b8 <__rt_cluster_pool_update_end>

1c0001b0 <__rt_cluster_pool_update_no_current>:

__rt_cluster_pool_update_no_current:

    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001b0:	0005a223          	sw	zero,4(a1)
    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_LAST_FC(a1)
1c0001b4:	0005a423          	sw	zero,8(a1)

1c0001b8 <__rt_cluster_pool_update_end>:




__rt_cluster_pool_update_end:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001b8:	40cc                	lw	a1,4(s1)

    lw   a2, RT_FC_CLUSTER_DATA_T_TRIG_ADDR(x9)
1c0001ba:	4890                	lw	a2,16(s1)
    sw   x0, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001bc:	0004a223          	sw	zero,4(s1)

    sw   x0, 0(a2)
1c0001c0:	00062023          	sw	zero,0(a2)

    la   x9, __rt_remote_enqueue_event_loop_cluster_continue
1c0001c4:	00000497          	auipc	s1,0x0
1c0001c8:	00a48493          	addi	s1,s1,10 # 1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>
    j    __rt_event_enqueue
1c0001cc:	b789                	j	1c00010e <__rt_event_enqueue>

1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>:

__rt_remote_enqueue_event_loop_cluster_continue:
    addi x8, x8, -1
1c0001ce:	147d                	addi	s0,s0,-1
    bgt  x8, x0, __rt_remote_enqueue_event_loop_next_cluster
1c0001d0:	00804e63          	bgtz	s0,1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>



    lw  x8, -4(sp)
1c0001d4:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c0001d8:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c0001dc:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c0001e0:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c0001e4:	fec12603          	lw	a2,-20(sp)

    mret
1c0001e8:	30200073          	mret

1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>:

__rt_remote_enqueue_event_loop_next_cluster:
    la   x9, __rt_fc_cluster_data
1c0001ec:	0000f497          	auipc	s1,0xf
1c0001f0:	75848493          	addi	s1,s1,1880 # 1c00f944 <__rt_fc_cluster_data>
    li   a1, RT_FC_CLUSTER_DATA_T_SIZEOF
1c0001f4:	02800593          	li	a1,40
    mul  a1, x8, a1
1c0001f8:	02b405b3          	mul	a1,s0,a1
    add  x9, x9, a1
1c0001fc:	94ae                	add	s1,s1,a1
    j __rt_remote_enqueue_event_loop_cluster
1c0001fe:	bf51                	j	1c000192 <__rt_remote_enqueue_event_loop_cluster>

1c000200 <__rt_call_external_c_function>:
#endif

  .global __rt_call_external_c_function
__rt_call_external_c_function:

    add  sp, sp, -128
1c000200:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000202:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c000204:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c000206:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c000208:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c00020a:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c00020c:	ca1e                	sw	t2,20(sp)
    sw   a3, 0x24(sp)
1c00020e:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c000210:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c000212:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c000214:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000216:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000218:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c00021a:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c00021c:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c00021e:	c6fe                	sw	t6,76(sp)

    jalr ra, a2
1c000220:	000600e7          	jalr	a2

    lw   ra, 0x00(sp)
1c000224:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000226:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000228:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c00022a:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c00022c:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c00022e:	43d2                	lw	t2,20(sp)
    lw   a3, 0x24(sp)
1c000230:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c000232:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c000234:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c000236:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c000238:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c00023a:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c00023c:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c00023e:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000240:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c000242:	6109                	addi	sp,sp,128

    jr   x9
1c000244:	8482                	jr	s1

1c000246 <__rt_illegal_instr>:

  .section .text
  
    .global __rt_illegal_instr
__rt_illegal_instr:
    sw   ra, -4(sp)
1c000246:	fe112e23          	sw	ra,-4(sp)
    sw   a0, -8(sp)
1c00024a:	fea12c23          	sw	a0,-8(sp)
    la   a0, __rt_handle_illegal_instr
1c00024e:	0000b517          	auipc	a0,0xb
1c000252:	d0250513          	addi	a0,a0,-766 # 1c00af50 <__rt_handle_illegal_instr>
    jal  ra, __rt_call_c_function
1c000256:	010000ef          	jal	ra,1c000266 <__rt_call_c_function>
    lw   ra, -4(sp)
1c00025a:	ffc12083          	lw	ra,-4(sp)
    lw   a0, -8(sp)
1c00025e:	ff812503          	lw	a0,-8(sp)
#if PULP_CORE == CORE_RISCV_V4
    mret
1c000262:	30200073          	mret

1c000266 <__rt_call_c_function>:
#endif


__rt_call_c_function:

    add  sp, sp, -128
1c000266:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000268:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c00026a:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c00026c:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c00026e:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c000270:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c000272:	ca1e                	sw	t2,20(sp)
    sw   a1, 0x1C(sp)
1c000274:	ce2e                	sw	a1,28(sp)
    sw   a2, 0x20(sp)
1c000276:	d032                	sw	a2,32(sp)
    sw   a3, 0x24(sp)
1c000278:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c00027a:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c00027c:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c00027e:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000280:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000282:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c000284:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c000286:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c000288:	c6fe                	sw	t6,76(sp)

    jalr ra, a0
1c00028a:	000500e7          	jalr	a0

    lw   ra, 0x00(sp)
1c00028e:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000290:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000292:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c000294:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c000296:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c000298:	43d2                	lw	t2,20(sp)
    lw   a1, 0x1C(sp)
1c00029a:	45f2                	lw	a1,28(sp)
    lw   a2, 0x20(sp)
1c00029c:	5602                	lw	a2,32(sp)
    lw   a3, 0x24(sp)
1c00029e:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c0002a0:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c0002a2:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c0002a4:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c0002a6:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c0002a8:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c0002aa:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c0002ac:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c0002ae:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c0002b0:	6109                	addi	sp,sp,128

    jr   ra
1c0002b2:	8082                	ret

1c0002b4 <udma_event_handler>:

  .global udma_event_handler
udma_event_handler:

  // Dequeue the transfer which have just finished and mark it as done
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002b4:	4080                	lw	s0,0(s1)
  lw   x11, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)   // This is used later on, just put here to fill the slot
1c0002b6:	448c                	lw	a1,8(s1)
  beq  x8, x0, __rt_udma_no_copy                       // Special case where there is no copy, just register the event in the bitfield
1c0002b8:	08040f63          	beqz	s0,1c000356 <__rt_udma_no_copy>
  lw   x12, RT_PERIPH_COPY_T_REPEAT(x8)
1c0002bc:	4c50                	lw	a2,28(s0)
  lw   x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0002be:	4848                	lw	a0,20(s0)
  bne  x12, x0, repeat_transfer
1c0002c0:	04061f63          	bnez	a2,1c00031e <dmaCmd>
  sw   x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002c4:	c088                	sw	a0,0(s1)
  
  // Handle any special end-of-transfer control
  lw       x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0002c6:	4448                	lw	a0,12(s0)
  bnez     x10, handle_special_end
1c0002c8:	e15d                	bnez	a0,1c00036e <handle_special_end>

1c0002ca <resume_after_special_end>:
resume_after_special_end:


  // Now check if there are some transfers enqueued in the SW FIFO to be enqueued to the UDMA
  beq x11, x0, checkTask
1c0002ca:	02058f63          	beqz	a1,1c000308 <checkTask>

  // x9 contains the pointer to the channel and x11 the first copy

  // Update the FIFO pointers and just copy from node to UDMA
  lw  x12, RT_PERIPH_COPY_T_ENQUEUE_CALLBACK(x11)
1c0002ce:	4990                	lw	a2,16(a1)
  lw  x10, RT_PERIPH_COPY_T_NEXT(x11)
1c0002d0:	49c8                	lw	a0,20(a1)
  beqz x12, __rt_udma_call_enqueue_callback_resume
1c0002d2:	c611                	beqz	a2,1c0002de <__rt_udma_call_enqueue_callback_resume>

  la  x9, __rt_udma_call_enqueue_callback_resume
1c0002d4:	00000497          	auipc	s1,0x0
1c0002d8:	00a48493          	addi	s1,s1,10 # 1c0002de <__rt_udma_call_enqueue_callback_resume>
  jr  x12
1c0002dc:	8602                	jr	a2

1c0002de <__rt_udma_call_enqueue_callback_resume>:

__rt_udma_call_enqueue_callback_resume:
  lw  x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0002de:	44d0                	lw	a2,12(s1)
  sw  x10, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)
1c0002e0:	c488                	sw	a0,8(s1)
  lw  x10, RT_PERIPH_COPY_T_ADDR(x11)
1c0002e2:	4188                	lw	a0,0(a1)
  lw  x9, RT_PERIPH_COPY_T_SIZE(x11)
1c0002e4:	41c4                	lw	s1,4(a1)
  sw  x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0002e6:	c208                	sw	a0,0(a2)
  sw  x9, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0002e8:	c244                	sw	s1,4(a2)

  lw  x9, RT_PERIPH_COPY_T_CTRL(x11)
1c0002ea:	45c4                	lw	s1,12(a1)
  andi x9, x9, (1<<RT_PERIPH_COPY_CTRL_TYPE_WIDTH)-1
1c0002ec:	88bd                	andi	s1,s1,15
  li  x10, RT_PERIPH_COPY_SPECIAL_ENQUEUE_THRESHOLD
1c0002ee:	4515                	li	a0,5
  blt x9, x10, transfer_resume
1c0002f0:	00a4ca63          	blt	s1,a0,1c000304 <transfer_resume>
  li          x10, RT_PERIPH_COPY_HYPER
  beq         x9, x10, hyper
  li          x10, RT_PERIPH_COPY_FC_TCDM
  beq         x9, x10, fc_tcdm
#else
  p.beqimm      x9, RT_PERIPH_COPY_HYPER, hyper
1c0002f4:	0064a463          	p.beqimm	s1,6,1c0002fc <dual>
  p.beqimm      x9, RT_PERIPH_COPY_FC_TCDM, fc_tcdm
1c0002f8:	0074a263          	p.beqimm	s1,7,1c0002fc <dual>

1c0002fc <dual>:
#ifdef RV_ISA_RV32
  li    x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and   x9, x12, x10
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
#else
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
1c0002fc:	51c8                	lw	a0,36(a1)
  p.bclr  x9, x12, 0, UDMA_CHANNEL_SIZE_LOG2
1c0002fe:	c04634b3          	p.bclr	s1,a2,0,4
#endif
  sw    x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000302:	d088                	sw	a0,32(s1)

1c000304 <transfer_resume>:
#endif

transfer_resume:
  lw  x10, RT_PERIPH_COPY_T_CFG(x11)
1c000304:	4588                	lw	a0,8(a1)
  sw  x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000306:	c608                	sw	a0,8(a2)

1c000308 <checkTask>:

checkTask:

  // Check if we have a DMA transfer from L2 to L1   
  //lw          x10, RT_PERIPH_COPY_T_DMACMD(x8)           // Not null if we must transfer
  lw          x11, RT_PERIPH_COPY_T_EVENT(x8)             // Read this in advance to fill the slot, it is used later on in case there is no DMA command
1c000308:	4c0c                	lw	a1,24(s0)

  //bne         x10, zero, dmaCmd
  la          x9, udma_event_handler_end
1c00030a:	00000497          	auipc	s1,0x0
1c00030e:	19a48493          	addi	s1,s1,410 # 1c0004a4 <udma_event_handler_end>
  bne         x11, zero, __rt_event_enqueue
1c000312:	00058463          	beqz	a1,1c00031a <checkTask+0x12>
1c000316:	df9ff06f          	j	1c00010e <__rt_event_enqueue>

  // Loop again in case there are still events in the FIFO
  j udma_event_handler_end
1c00031a:	18a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00031e <dmaCmd>:
//   x12 : number of bytes to repeat
repeat_transfer:

#ifdef ARCHI_UDMA_HAS_HYPER

  lw      x11, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00031e:	44cc                	lw	a1,12(s1)
#ifdef RV_ISA_RV32
  li      x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and     x9, x11, x10
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
#else
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000320:	5048                	lw	a0,36(s0)
  p.bclr  x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c000322:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add     x10, x10, x12
1c000326:	9532                	add	a0,a0,a2
  sw      x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000328:	d088                	sw	a0,32(s1)
  sw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c00032a:	d048                	sw	a0,36(s0)

  lw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00032c:	4008                	lw	a0,0(s0)
  lw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c00032e:	5004                	lw	s1,32(s0)
  add     x10, x10, x12
1c000330:	9532                	add	a0,a0,a2
  sub     x9, x9, x12
1c000332:	8c91                	sub	s1,s1,a2
  blt     x12, x9, not_last
1c000334:	00964963          	blt	a2,s1,1c000346 <not_last>
  mv      x12, x9
1c000338:	8626                	mv	a2,s1
  sw      x0, RT_PERIPH_COPY_T_REPEAT(x8)
1c00033a:	00042e23          	sw	zero,28(s0)
  beq     x12, x0, udma_event_handler_end
1c00033e:	00061463          	bnez	a2,1c000346 <not_last>
1c000342:	1620006f          	j	1c0004a4 <udma_event_handler_end>

1c000346 <not_last>:

not_last:
  sw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c000346:	c008                	sw	a0,0(s0)
  sw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c000348:	d004                	sw	s1,32(s0)
  sw      x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c00034a:	c188                	sw	a0,0(a1)
  sw      x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00034c:	c1d0                	sw	a2,4(a1)

  li      x10, UDMA_CHANNEL_CFG_EN
1c00034e:	4541                	li	a0,16
  sw      x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c000350:	c588                	sw	a0,8(a1)

#endif

  j           udma_event_handler_end
1c000352:	1520006f          	j	1c0004a4 <udma_event_handler_end>

1c000356 <__rt_udma_no_copy>:




__rt_udma_no_copy:
  la      x9, __rt_socevents_status
1c000356:	e4000497          	auipc	s1,0xe4000
1c00035a:	f5a48493          	addi	s1,s1,-166 # 2b0 <__rt_socevents_status>
  lw      x8, 0(x9)
1c00035e:	4080                	lw	s0,0(s1)
  li      x11, 1
1c000360:	4585                	li	a1,1
  sll     x10, x11, x10
1c000362:	00a59533          	sll	a0,a1,a0
  or      x8, x8, x10
1c000366:	8c49                	or	s0,s0,a0
  sw      x8, 0(x9)
1c000368:	c080                	sw	s0,0(s1)
  j udma_event_handler_end
1c00036a:	13a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00036e <handle_special_end>:
  li          x12, RT_PERIPH_COPY_I2C_STEP1
  beq         x10, x12, i2c_step1
  li          x12, RT_PERIPH_COPY_I2C_STEP2
  beq         x10, x12, i2c_step2
#else
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP1, i2c_step1  
1c00036e:	04352463          	p.beqimm	a0,3,1c0003b6 <i2c_step1>
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP2, i2c_step2
1c000372:	06452063          	p.beqimm	a0,4,1c0003d2 <i2c_step2>
#endif

  j           resume_after_special_end
1c000376:	bf91                	j	1c0002ca <resume_after_special_end>

1c000378 <spim_step3>:


spim_step3:
  // The current copy was enqueued to configure spi, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c000378:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c00037a:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00037c:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00037e:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000380:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000382:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL2(x8)
1c000384:	5448                	lw	a0,44(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c000386:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c000388:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c00038a:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c00038c:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00038e:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000390:	1140006f          	j	1c0004a4 <udma_event_handler_end>

1c000394 <spim_step2>:

spim_step2:
  // Now that the user data has been pushed, we must push an EOT command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c000394:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000398:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00039a:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00039c:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c00039e:	4060                	lw	s0,68(s0)
  li          x12, SPI_CMD_EOT(0)
1c0003a0:	90000637          	lui	a2,0x90000
  sw          x12, 0(x8)
1c0003a4:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003a6:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003a8:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 4
1c0003aa:	4511                	li	a0,4
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ac:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ae:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003b0:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003b2:	0f20006f          	j	1c0004a4 <udma_event_handler_end>

1c0003b6 <i2c_step1>:
 */

i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c0003b6:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0003b8:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003ba:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003bc:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003be:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003c0:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_ADDR(x8)
1c0003c2:	4008                	lw	a0,0(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003c4:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c0003c6:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003c8:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c0003ca:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003cc:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003ce:	0d60006f          	j	1c0004a4 <udma_event_handler_end>

1c0003d2 <i2c_step2>:

i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c0003d2:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d6:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003d8:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003da:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c0003dc:	4060                	lw	s0,68(s0)
  li          x12, I2C_CMD_STOP
1c0003de:	02000613          	li	a2,32
  sw          x12, 0(x8)
1c0003e2:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003e4:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003e6:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 1
1c0003e8:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ea:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ec:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003ee:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003f0:	0b40006f          	j	1c0004a4 <udma_event_handler_end>

1c0003f4 <__rt_fc_socevents_handler>:

  .global __rt_fc_socevents_handler
  .extern pwm_event_handler
__rt_fc_socevents_handler:
// The stack is first adjusted to have stack-based load/store compressed
  add sp, sp, -128
1c0003f4:	7119                	addi	sp,sp,-128
  sw  x8, 0(sp)
1c0003f6:	c022                	sw	s0,0(sp)
  sw  x9, 4(sp)
1c0003f8:	c226                	sw	s1,4(sp)
  sw  x10, 8(sp)
1c0003fa:	c42a                	sw	a0,8(sp)
  sw  x11, 12(sp)
1c0003fc:	c62e                	sw	a1,12(sp)
  sw  x12, 16(sp)
1c0003fe:	c832                	sw	a2,16(sp)


  // Pop one element from the FIFO
  li  x8, ARCHI_EU_ADDR + EU_SOC_EVENTS_AREA_OFFSET + EU_SOC_EVENTS_CURRENT_EVENT
1c000400:	00201437          	lui	s0,0x201
1c000404:	f0040413          	addi	s0,s0,-256 # 200f00 <__L2+0x180f00>
  lw  x8, 0(x8)
1c000408:	4000                	lw	s0,0(s0)

  // Now that we popped the element, we can clear the soc event FIFO event as the FIFO is generating
  // an event as soon as the FIFO is not empty
  li  x9, 1<<PULP_SOC_EVENTS_EVENT
1c00040a:	080004b7          	lui	s1,0x8000
  li  x10, ARCHI_EU_DEMUX_ADDR + EU_CORE_BUFFER_CLEAR
1c00040e:	00204537          	lui	a0,0x204
1c000412:	02850513          	addi	a0,a0,40 # 204028 <__L2+0x184028>
  sw  x9, 0(x10)
1c000416:	c104                	sw	s1,0(a0)
  // Due to a HW bug in the core on Gap, we have to load this value early
#ifdef CONFIG_NO_FC_TINY
  la    x12, __rt_hyper_udma_handle
  lw    x12, 0(x12)
#else
  lw    x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000418:	30802603          	lw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif
#endif

  // Extract ID part
  p.extractu x10, x8, EU_SOC_EVENTS_EVENT_MASK_BITS-1, EU_SOC_EVENTS_EVENT_MASK_OFFSET
1c00041c:	ce041533          	p.extractu	a0,s0,7,0

#ifdef ARCHI_UDMA_HAS_HYPER
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0)), __rt_fc_socevents_not_hyper_rx
1c000420:	00653363          	p.bneimm	a0,6,1c000426 <__rt_fc_socevents_not_hyper_rx>
  jr x12
1c000424:	8602                	jr	a2

1c000426 <__rt_fc_socevents_not_hyper_rx>:

__rt_fc_socevents_not_hyper_rx:
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0))+1, __rt_fc_socevents_not_hyper_tx
1c000426:	00753363          	p.bneimm	a0,7,1c00042c <__rt_fc_socevents_not_hyper_tx>
  jr x12
1c00042a:	8602                	jr	a2

1c00042c <__rt_fc_socevents_not_hyper_tx>:
#endif

__rt_fc_socevents_not_hyper_tx:

  // UDMA CHANNEL EVENTS
  li x9, ARCHI_SOC_EVENT_UDMA_NB_EVT
1c00042c:	44cd                	li	s1,19
  bge x10, x9, __rt_soc_evt_no_udma_channel
1c00042e:	00955c63          	ble	s1,a0,1c000446 <__rt_soc_evt_no_udma_channel>
  andi   x8, x10, 1
  srli   x10, x10, 1
  or     x10, x10, x8
#endif

  la     x8, periph_channels
1c000432:	e4000417          	auipc	s0,0xe4000
1c000436:	bfe40413          	addi	s0,s0,-1026 # 30 <periph_channels>
  slli   x9, x10, RT_PERIPH_CHANNEL_T_SIZEOF_LOG2
1c00043a:	00551493          	slli	s1,a0,0x5
  add    x9, x9, x8
1c00043e:	94a2                	add	s1,s1,s0

  lw   x11, RT_PERIPH_CHANNEL_T_CALLBACK(x9)
1c000440:	4ccc                	lw	a1,28(s1)
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000442:	4080                	lw	s0,0(s1)

  jr   x11
1c000444:	8582                	jr	a1

1c000446 <__rt_soc_evt_no_udma_channel>:


__rt_soc_evt_no_udma_channel:

  li x9, ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT + ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT
1c000446:	44f9                	li	s1,30
  bge x10, x9, __rt_soc_evt_no_udma
1c000448:	00955b63          	ble	s1,a0,1c00045e <__rt_soc_evt_no_udma>

  addi x8, x10, -ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT
1c00044c:	fec50413          	addi	s0,a0,-20
  slli x11, x8, 2
1c000450:	00241593          	slli	a1,s0,0x2
  la   x12, __rt_udma_extra_callback
  p.lw x12, x12(x11)
  la   x9, __rt_udma_extra_callback_arg
  p.lw x11, x9(x11)
#else
  lw   x12, %tiny(__rt_udma_extra_callback)(x11)
1c000454:	2b85a603          	lw	a2,696(a1)
  lw   x11, %tiny(__rt_udma_extra_callback_arg)(x11)
1c000458:	2e05a583          	lw	a1,736(a1)
#endif

  jr   x12
1c00045c:	8602                	jr	a2

1c00045e <__rt_soc_evt_no_udma>:

  .global __rt_soc_evt_no_udma
__rt_soc_evt_no_udma:
#ifdef RT_CONFIG_GPIO_ENABLED
  // GPIO EVENT
  li      x9, ARCHI_SOC_EVENT_GPIO
1c00045e:	02a00493          	li	s1,42
  beq     x10, x9, __rt_gpio_handler
1c000462:	00951463          	bne	a0,s1,1c00046a <__rt_soc_evt_no_udma+0xc>
1c000466:	1740006f          	j	1c0005da <__rt_gpio_handler>
#endif

  li      x9, ARCHI_SOC_EVENT_RTC_IRQ
1c00046a:	02c00493          	li	s1,44
  beq     x9, x10, rtc_event_handler
1c00046e:	04a48363          	beq	s1,a0,1c0004b4 <rtc_event_handler>

1c000472 <__rt_soc_evt_pwm>:


// pwm event handler
//x9 : nb of event that will be used by handler
__rt_soc_evt_pwm:
  li x11, ARCHI_SOC_EVENT_ADV_TIMER_NB_EVT-1 // 3
1c000472:	458d                	li	a1,3
  addi x9, x11, ARCHI_SOC_EVENT_ADV_TIMER_FIRST_EVT //3+38=41
1c000474:	02658493          	addi	s1,a1,38
  sub x9, x9, x10 // 41 - 56
1c000478:	8c89                	sub	s1,s1,a0
  bgt x9, x11, __rt_soc_evt_store // if > 3 not for pwm
1c00047a:	0095c663          	blt	a1,s1,1c000486 <__rt_soc_evt_store>
  blt x9, x0,  __rt_soc_evt_store // if > 3 not for pwm
1c00047e:	0004c463          	bltz	s1,1c000486 <__rt_soc_evt_store>
  j pwm_event_handler
1c000482:	1340006f          	j	1c0005b6 <pwm_event_handler>

1c000486 <__rt_soc_evt_store>:


__rt_soc_evt_store:
  // If the event is not handled, store it in the soc event status mask
  la      x9, __rt_socevents_status
1c000486:	e4000497          	auipc	s1,0xe4000
1c00048a:	e2a48493          	addi	s1,s1,-470 # 2b0 <__rt_socevents_status>
  li      x11, 32
1c00048e:	02000593          	li	a1,32
  blt     x10, x11, socevents_set
1c000492:	00b54463          	blt	a0,a1,1c00049a <socevents_set>
  addi    x9, x9, 4
1c000496:	0491                	addi	s1,s1,4
  addi    x10, x10, -32
1c000498:	1501                	addi	a0,a0,-32

1c00049a <socevents_set>:

socevents_set:
  lw      x11, 0(x9)
1c00049a:	408c                	lw	a1,0(s1)
  p.bsetr x12, x11, x10
1c00049c:	80a5c633          	p.bsetr	a2,a1,a0
  sw      x12, 0(x9)
1c0004a0:	c090                	sw	a2,0(s1)
  j       udma_event_handler_end
1c0004a2:	a009                	j	1c0004a4 <udma_event_handler_end>

1c0004a4 <udma_event_handler_end>:

  .global udma_event_handler_end
udma_event_handler_end:
  lw  x8, 0(sp)
1c0004a4:	4402                	lw	s0,0(sp)
  lw  x9, 4(sp)
1c0004a6:	4492                	lw	s1,4(sp)
  lw  x10, 8(sp)
1c0004a8:	4522                	lw	a0,8(sp)
  lw  x11, 12(sp)
1c0004aa:	45b2                	lw	a1,12(sp)
  lw  x12, 16(sp)
1c0004ac:	4642                	lw	a2,16(sp)
  add sp, sp, 128
1c0004ae:	6109                	addi	sp,sp,128
  mret
1c0004b0:	30200073          	mret

1c0004b4 <rtc_event_handler>:


rtc_event_handler:
  lw    x11, __rtc_handler
1c0004b4:	e4000597          	auipc	a1,0xe4000
1c0004b8:	edc5a583          	lw	a1,-292(a1) # 390 <__rtc_handler>
  la    x9, udma_event_handler_end
1c0004bc:	00000497          	auipc	s1,0x0
1c0004c0:	fe848493          	addi	s1,s1,-24 # 1c0004a4 <udma_event_handler_end>
  j   __rt_event_enqueue
1c0004c4:	c4bff06f          	j	1c00010e <__rt_event_enqueue>

1c0004c8 <__rt_hyper_handle_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  lw    x12, 0(x8)
#else
  lw    x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004c8:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beqz      x12, __rt_hyper_handle_copy_end
1c0004cc:	c621                	beqz	a2,1c000514 <__rt_hyper_handle_copy_end>

1c0004ce <__rt_hyper_repeat_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c0004ce:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004d2:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c0004d6:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c0004da:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c0004dc:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004de:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0004e2:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0004e6:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c0004ea:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c0004ec:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last
1c0004ee:	00964963          	blt	a2,s1,1c000500 <__rt_hyper_repeat_copy_not_last>
  mv        x12, x9
1c0004f2:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004f4:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c0004f8:	00061463          	bnez	a2,1c000500 <__rt_hyper_repeat_copy_not_last>
1c0004fc:	fa9ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000500 <__rt_hyper_repeat_copy_not_last>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000500:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000504:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c000508:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00050a:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00050c:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c00050e:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000510:	f95ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000514 <__rt_hyper_handle_copy_end>:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_end_task
  lw        x11, 0(x8)
  sw        x0, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_end_task)(x0)
1c000514:	32002583          	lw	a1,800(zero) # 320 <__rt_hyper_end_task>
  sw        x0, %tiny(__rt_hyper_end_task)(x0)
1c000518:	32002023          	sw	zero,800(zero) # 320 <__rt_hyper_end_task>
#endif
  beqz      x11, __rt_hyper_handle_emu_task
1c00051c:	c589                	beqz	a1,1c000526 <__rt_hyper_handle_emu_task>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_current_task
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_current_task)(x0)
1c00051e:	32002223          	sw	zero,804(zero) # 324 <__rt_hyper_current_task>
#endif
  jal       x9, __rt_event_enqueue
1c000522:	bedff4ef          	jal	s1,1c00010e <__rt_event_enqueue>

1c000526 <__rt_hyper_handle_emu_task>:
__rt_hyper_handle_emu_task:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_emu_task
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_emu_task)(x0)
1c000526:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
#endif
  beqz      x10, __rt_hyper_handle_pending_tasks
1c00052a:	c919                	beqz	a0,1c000540 <__rt_hyper_handle_pending_tasks>

  la      x12, __rt_hyper_resume_emu_task
1c00052c:	0000d617          	auipc	a2,0xd
1c000530:	a8060613          	addi	a2,a2,-1408 # 1c00cfac <__rt_hyper_resume_emu_task>
  la        x9, udma_event_handler_end
1c000534:	00000497          	auipc	s1,0x0
1c000538:	f7048493          	addi	s1,s1,-144 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00053c:	cc5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000540 <__rt_hyper_handle_pending_tasks>:
__rt_hyper_handle_pending_tasks:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_tasks
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_tasks)(x0)
1c000540:	34002503          	lw	a0,832(zero) # 340 <__rt_hyper_pending_tasks>
#endif
  beqz      x10, udma_event_handler_end
1c000544:	00051463          	bnez	a0,1c00054c <__rt_hyper_handle_pending_tasks+0xc>
1c000548:	f5dff06f          	j	1c0004a4 <udma_event_handler_end>

  la      x12, __rt_hyper_resume_copy
1c00054c:	0000d617          	auipc	a2,0xd
1c000550:	a6860613          	addi	a2,a2,-1432 # 1c00cfb4 <__rt_hyper_resume_copy>
  la        x9, udma_event_handler_end
1c000554:	00000497          	auipc	s1,0x0
1c000558:	f5048493          	addi	s1,s1,-176 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00055c:	ca5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000560 <__rt_hyper_handle_burst>:
  la        x8, __rt_hyper_pending_repeat
  lw        x12, 0(x8)
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c000560:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>

  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c000564:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000568:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c00056c:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c000570:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000572:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000574:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000578:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c00057c:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c000580:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c000582:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last2
1c000584:	00964f63          	blt	a2,s1,1c0005a2 <__rt_hyper_repeat_copy_not_last2>

  la        x12, __rt_hyper_handle_copy
1c000588:	00000617          	auipc	a2,0x0
1c00058c:	f4060613          	addi	a2,a2,-192 # 1c0004c8 <__rt_hyper_handle_copy>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_udma_handle
  sw        x12, 0(x8)
#else
  sw        x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000590:	30c02423          	sw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif

  mv        x12, x9
1c000594:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000596:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c00059a:	00061463          	bnez	a2,1c0005a2 <__rt_hyper_repeat_copy_not_last2>
1c00059e:	f07ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005a2 <__rt_hyper_repeat_copy_not_last2>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0005a2:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0005a6:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c0005aa:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c0005ac:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c0005ae:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c0005b0:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c0005b2:	ef3ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005b6 <pwm_event_handler>:
#include "archi/eu/eu_v3.h"

  .global pwm_event_handler
  .extern pwmEventsStatus
pwm_event_handler:
  la   x10, pwmEventsStatus
1c0005b6:	e4000517          	auipc	a0,0xe4000
1c0005ba:	d9e50513          	addi	a0,a0,-610 # 354 <pwmEventsStatus>
  addi  x11, x0, 1
1c0005be:	00100593          	li	a1,1
  lw   x8, 0(x10)
1c0005c2:	4100                	lw	s0,0(a0)
  p.insertr x8, x11, x9
1c0005c4:	8095a433          	p.insertr	s0,a1,s1
  sw   x8, 0(x10)
1c0005c8:	c100                	sw	s0,0(a0)

  // continue with sw event raising
  li   x9, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (PLP_RT_NOTIF_EVENT << 2)
1c0005ca:	002044b7          	lui	s1,0x204
1c0005ce:	10c48493          	addi	s1,s1,268 # 20410c <__L2+0x18410c>
  li   x10, -1
1c0005d2:	557d                	li	a0,-1
  sw   x10, 0(x9)
1c0005d4:	c088                	sw	a0,0(s1)

  j udma_event_handler_end
1c0005d6:	ecfff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005da <__rt_gpio_handler>:
  bnez     x8, __rt_gpio_ff1_loop
#endif

#else
  .extern __pi_gpio_handler
  mv        x11, x8
1c0005da:	85a2                	mv	a1,s0
  la        x12, __pi_gpio_handler
1c0005dc:	0000d617          	auipc	a2,0xd
1c0005e0:	aa060613          	addi	a2,a2,-1376 # 1c00d07c <__pi_gpio_handler>
  la        x9, __rt_gpio_handler_end
1c0005e4:	00000497          	auipc	s1,0x0
1c0005e8:	00c48493          	addi	s1,s1,12 # 1c0005f0 <__rt_gpio_handler_end>
  j         __rt_call_external_c_function
1c0005ec:	c15ff06f          	j	1c000200 <__rt_call_external_c_function>

1c0005f0 <__rt_gpio_handler_end>:

  mret

#else

  j udma_event_handler_end
1c0005f0:	eb5ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005f4 <__udivdi3>:
1c0005f4:	87b2                	mv	a5,a2
1c0005f6:	8736                	mv	a4,a3
1c0005f8:	88aa                	mv	a7,a0
1c0005fa:	882e                	mv	a6,a1
1c0005fc:	1e069d63          	bnez	a3,1c0007f6 <__udivdi3+0x202>
1c000600:	1c00f337          	lui	t1,0x1c00f
1c000604:	ac830313          	addi	t1,t1,-1336 # 1c00eac8 <__clz_tab>
1c000608:	0ac5fd63          	bleu	a2,a1,1c0006c2 <__udivdi3+0xce>
1c00060c:	6741                	lui	a4,0x10
1c00060e:	0ae67363          	bleu	a4,a2,1c0006b4 <__udivdi3+0xc0>
1c000612:	0ff00693          	li	a3,255
1c000616:	00c6b6b3          	sltu	a3,a3,a2
1c00061a:	068e                	slli	a3,a3,0x3
1c00061c:	00d65733          	srl	a4,a2,a3
1c000620:	933a                	add	t1,t1,a4
1c000622:	00034703          	lbu	a4,0(t1)
1c000626:	02000313          	li	t1,32
1c00062a:	96ba                	add	a3,a3,a4
1c00062c:	40d30333          	sub	t1,t1,a3
1c000630:	00030c63          	beqz	t1,1c000648 <__udivdi3+0x54>
1c000634:	00659733          	sll	a4,a1,t1
1c000638:	00d556b3          	srl	a3,a0,a3
1c00063c:	006617b3          	sll	a5,a2,t1
1c000640:	00e6e833          	or	a6,a3,a4
1c000644:	006518b3          	sll	a7,a0,t1
1c000648:	0107d513          	srli	a0,a5,0x10
1c00064c:	02a85733          	divu	a4,a6,a0
1c000650:	1007d5b3          	p.exthz	a1,a5
1c000654:	0108d693          	srli	a3,a7,0x10
1c000658:	02a87633          	remu	a2,a6,a0
1c00065c:	02e58833          	mul	a6,a1,a4
1c000660:	0642                	slli	a2,a2,0x10
1c000662:	8ed1                	or	a3,a3,a2
1c000664:	863a                	mv	a2,a4
1c000666:	0106fc63          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c00066a:	96be                	add	a3,a3,a5
1c00066c:	fff70613          	addi	a2,a4,-1 # ffff <__l1_heap_size+0x43>
1c000670:	00f6e763          	bltu	a3,a5,1c00067e <__udivdi3+0x8a>
1c000674:	0106f563          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c000678:	ffe70613          	addi	a2,a4,-2
1c00067c:	96be                	add	a3,a3,a5
1c00067e:	410686b3          	sub	a3,a3,a6
1c000682:	02a6f833          	remu	a6,a3,a0
1c000686:	02a6d6b3          	divu	a3,a3,a0
1c00068a:	df0828b3          	p.insert	a7,a6,15,16
1c00068e:	02d58733          	mul	a4,a1,a3
1c000692:	8536                	mv	a0,a3
1c000694:	00e8fb63          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c000698:	98be                	add	a7,a7,a5
1c00069a:	fff68513          	addi	a0,a3,-1
1c00069e:	00f8e663          	bltu	a7,a5,1c0006aa <__udivdi3+0xb6>
1c0006a2:	00e8f463          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c0006a6:	ffe68513          	addi	a0,a3,-2
1c0006aa:	01061793          	slli	a5,a2,0x10
1c0006ae:	8fc9                	or	a5,a5,a0
1c0006b0:	4801                	li	a6,0
1c0006b2:	a06d                	j	1c00075c <__udivdi3+0x168>
1c0006b4:	01000737          	lui	a4,0x1000
1c0006b8:	46c1                	li	a3,16
1c0006ba:	f6e661e3          	bltu	a2,a4,1c00061c <__udivdi3+0x28>
1c0006be:	46e1                	li	a3,24
1c0006c0:	bfb1                	j	1c00061c <__udivdi3+0x28>
1c0006c2:	e601                	bnez	a2,1c0006ca <__udivdi3+0xd6>
1c0006c4:	4685                	li	a3,1
1c0006c6:	02c6d7b3          	divu	a5,a3,a2
1c0006ca:	66c1                	lui	a3,0x10
1c0006cc:	08d7fb63          	bleu	a3,a5,1c000762 <__udivdi3+0x16e>
1c0006d0:	0ff00693          	li	a3,255
1c0006d4:	00f6f363          	bleu	a5,a3,1c0006da <__udivdi3+0xe6>
1c0006d8:	4721                	li	a4,8
1c0006da:	00e7d6b3          	srl	a3,a5,a4
1c0006de:	9336                	add	t1,t1,a3
1c0006e0:	00034683          	lbu	a3,0(t1)
1c0006e4:	02000613          	li	a2,32
1c0006e8:	96ba                	add	a3,a3,a4
1c0006ea:	8e15                	sub	a2,a2,a3
1c0006ec:	e251                	bnez	a2,1c000770 <__udivdi3+0x17c>
1c0006ee:	40f58733          	sub	a4,a1,a5
1c0006f2:	4805                	li	a6,1
1c0006f4:	0107d513          	srli	a0,a5,0x10
1c0006f8:	1007d5b3          	p.exthz	a1,a5
1c0006fc:	0108d693          	srli	a3,a7,0x10
1c000700:	02a77633          	remu	a2,a4,a0
1c000704:	02a75733          	divu	a4,a4,a0
1c000708:	0642                	slli	a2,a2,0x10
1c00070a:	8ed1                	or	a3,a3,a2
1c00070c:	02e58333          	mul	t1,a1,a4
1c000710:	863a                	mv	a2,a4
1c000712:	0066fc63          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000716:	96be                	add	a3,a3,a5
1c000718:	fff70613          	addi	a2,a4,-1 # ffffff <__L2+0xf7ffff>
1c00071c:	00f6e763          	bltu	a3,a5,1c00072a <__udivdi3+0x136>
1c000720:	0066f563          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000724:	ffe70613          	addi	a2,a4,-2
1c000728:	96be                	add	a3,a3,a5
1c00072a:	406686b3          	sub	a3,a3,t1
1c00072e:	02a6f333          	remu	t1,a3,a0
1c000732:	02a6d6b3          	divu	a3,a3,a0
1c000736:	df0328b3          	p.insert	a7,t1,15,16
1c00073a:	02d58733          	mul	a4,a1,a3
1c00073e:	8536                	mv	a0,a3
1c000740:	00e8fb63          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000744:	98be                	add	a7,a7,a5
1c000746:	fff68513          	addi	a0,a3,-1 # ffff <__l1_heap_size+0x43>
1c00074a:	00f8e663          	bltu	a7,a5,1c000756 <__udivdi3+0x162>
1c00074e:	00e8f463          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000752:	ffe68513          	addi	a0,a3,-2
1c000756:	01061793          	slli	a5,a2,0x10
1c00075a:	8fc9                	or	a5,a5,a0
1c00075c:	853e                	mv	a0,a5
1c00075e:	85c2                	mv	a1,a6
1c000760:	8082                	ret
1c000762:	010006b7          	lui	a3,0x1000
1c000766:	4741                	li	a4,16
1c000768:	f6d7e9e3          	bltu	a5,a3,1c0006da <__udivdi3+0xe6>
1c00076c:	4761                	li	a4,24
1c00076e:	b7b5                	j	1c0006da <__udivdi3+0xe6>
1c000770:	00c797b3          	sll	a5,a5,a2
1c000774:	00d5d333          	srl	t1,a1,a3
1c000778:	0107de13          	srli	t3,a5,0x10
1c00077c:	00c59733          	sll	a4,a1,a2
1c000780:	00c518b3          	sll	a7,a0,a2
1c000784:	00d555b3          	srl	a1,a0,a3
1c000788:	03c35533          	divu	a0,t1,t3
1c00078c:	8dd9                	or	a1,a1,a4
1c00078e:	1007d733          	p.exthz	a4,a5
1c000792:	0105d693          	srli	a3,a1,0x10
1c000796:	03c37633          	remu	a2,t1,t3
1c00079a:	882a                	mv	a6,a0
1c00079c:	02a70333          	mul	t1,a4,a0
1c0007a0:	0642                	slli	a2,a2,0x10
1c0007a2:	8ed1                	or	a3,a3,a2
1c0007a4:	0066fc63          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007a8:	96be                	add	a3,a3,a5
1c0007aa:	fff50813          	addi	a6,a0,-1
1c0007ae:	00f6e763          	bltu	a3,a5,1c0007bc <__udivdi3+0x1c8>
1c0007b2:	0066f563          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007b6:	ffe50813          	addi	a6,a0,-2
1c0007ba:	96be                	add	a3,a3,a5
1c0007bc:	406686b3          	sub	a3,a3,t1
1c0007c0:	03c6f633          	remu	a2,a3,t3
1c0007c4:	03c6d6b3          	divu	a3,a3,t3
1c0007c8:	df0625b3          	p.insert	a1,a2,15,16
1c0007cc:	02d70733          	mul	a4,a4,a3
1c0007d0:	8636                	mv	a2,a3
1c0007d2:	00e5fc63          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007d6:	95be                	add	a1,a1,a5
1c0007d8:	fff68613          	addi	a2,a3,-1 # ffffff <__L2+0xf7ffff>
1c0007dc:	00f5e763          	bltu	a1,a5,1c0007ea <__udivdi3+0x1f6>
1c0007e0:	00e5f563          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007e4:	ffe68613          	addi	a2,a3,-2
1c0007e8:	95be                	add	a1,a1,a5
1c0007ea:	0842                	slli	a6,a6,0x10
1c0007ec:	40e58733          	sub	a4,a1,a4
1c0007f0:	00c86833          	or	a6,a6,a2
1c0007f4:	b701                	j	1c0006f4 <__udivdi3+0x100>
1c0007f6:	12d5ea63          	bltu	a1,a3,1c00092a <__udivdi3+0x336>
1c0007fa:	67c1                	lui	a5,0x10
1c0007fc:	02f6fd63          	bleu	a5,a3,1c000836 <__udivdi3+0x242>
1c000800:	0ff00793          	li	a5,255
1c000804:	00d7b8b3          	sltu	a7,a5,a3
1c000808:	088e                	slli	a7,a7,0x3
1c00080a:	1c00f737          	lui	a4,0x1c00f
1c00080e:	0116d7b3          	srl	a5,a3,a7
1c000812:	ac870713          	addi	a4,a4,-1336 # 1c00eac8 <__clz_tab>
1c000816:	97ba                	add	a5,a5,a4
1c000818:	0007c783          	lbu	a5,0(a5) # 10000 <__L1Cl>
1c00081c:	02000813          	li	a6,32
1c000820:	97c6                	add	a5,a5,a7
1c000822:	40f80833          	sub	a6,a6,a5
1c000826:	00081f63          	bnez	a6,1c000844 <__udivdi3+0x250>
1c00082a:	4785                	li	a5,1
1c00082c:	f2b6e8e3          	bltu	a3,a1,1c00075c <__udivdi3+0x168>
1c000830:	04a637b3          	p.sletu	a5,a2,a0
1c000834:	b725                	j	1c00075c <__udivdi3+0x168>
1c000836:	010007b7          	lui	a5,0x1000
1c00083a:	48c1                	li	a7,16
1c00083c:	fcf6e7e3          	bltu	a3,a5,1c00080a <__udivdi3+0x216>
1c000840:	48e1                	li	a7,24
1c000842:	b7e1                	j	1c00080a <__udivdi3+0x216>
1c000844:	00f658b3          	srl	a7,a2,a5
1c000848:	010696b3          	sll	a3,a3,a6
1c00084c:	00d8e6b3          	or	a3,a7,a3
1c000850:	00f5d333          	srl	t1,a1,a5
1c000854:	0106de13          	srli	t3,a3,0x10
1c000858:	00f55733          	srl	a4,a0,a5
1c00085c:	03c377b3          	remu	a5,t1,t3
1c000860:	1006d8b3          	p.exthz	a7,a3
1c000864:	010595b3          	sll	a1,a1,a6
1c000868:	8f4d                	or	a4,a4,a1
1c00086a:	01075593          	srli	a1,a4,0x10
1c00086e:	01061633          	sll	a2,a2,a6
1c000872:	03c35333          	divu	t1,t1,t3
1c000876:	07c2                	slli	a5,a5,0x10
1c000878:	8ddd                	or	a1,a1,a5
1c00087a:	02688eb3          	mul	t4,a7,t1
1c00087e:	879a                	mv	a5,t1
1c000880:	01d5fc63          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000884:	95b6                	add	a1,a1,a3
1c000886:	fff30793          	addi	a5,t1,-1
1c00088a:	00d5e763          	bltu	a1,a3,1c000898 <__udivdi3+0x2a4>
1c00088e:	01d5f563          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000892:	ffe30793          	addi	a5,t1,-2
1c000896:	95b6                	add	a1,a1,a3
1c000898:	41d585b3          	sub	a1,a1,t4
1c00089c:	03c5f333          	remu	t1,a1,t3
1c0008a0:	03c5d5b3          	divu	a1,a1,t3
1c0008a4:	df032733          	p.insert	a4,t1,15,16
1c0008a8:	02b888b3          	mul	a7,a7,a1
1c0008ac:	832e                	mv	t1,a1
1c0008ae:	01177c63          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008b2:	9736                	add	a4,a4,a3
1c0008b4:	fff58313          	addi	t1,a1,-1
1c0008b8:	00d76763          	bltu	a4,a3,1c0008c6 <__udivdi3+0x2d2>
1c0008bc:	01177563          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008c0:	ffe58313          	addi	t1,a1,-2
1c0008c4:	9736                	add	a4,a4,a3
1c0008c6:	07c2                	slli	a5,a5,0x10
1c0008c8:	6e41                	lui	t3,0x10
1c0008ca:	0067e7b3          	or	a5,a5,t1
1c0008ce:	fffe0593          	addi	a1,t3,-1 # ffff <__l1_heap_size+0x43>
1c0008d2:	00b7f6b3          	and	a3,a5,a1
1c0008d6:	41170733          	sub	a4,a4,a7
1c0008da:	8df1                	and	a1,a1,a2
1c0008dc:	0107d893          	srli	a7,a5,0x10
1c0008e0:	02b68333          	mul	t1,a3,a1
1c0008e4:	8241                	srli	a2,a2,0x10
1c0008e6:	02b885b3          	mul	a1,a7,a1
1c0008ea:	8eae                	mv	t4,a1
1c0008ec:	42c68eb3          	p.mac	t4,a3,a2
1c0008f0:	01035693          	srli	a3,t1,0x10
1c0008f4:	96f6                	add	a3,a3,t4
1c0008f6:	02c888b3          	mul	a7,a7,a2
1c0008fa:	00b6f363          	bleu	a1,a3,1c000900 <__udivdi3+0x30c>
1c0008fe:	98f2                	add	a7,a7,t3
1c000900:	0106d613          	srli	a2,a3,0x10
1c000904:	98b2                	add	a7,a7,a2
1c000906:	03176063          	bltu	a4,a7,1c000926 <__udivdi3+0x332>
1c00090a:	db1713e3          	bne	a4,a7,1c0006b0 <__udivdi3+0xbc>
1c00090e:	6741                	lui	a4,0x10
1c000910:	177d                	addi	a4,a4,-1
1c000912:	8ef9                	and	a3,a3,a4
1c000914:	06c2                	slli	a3,a3,0x10
1c000916:	00e37333          	and	t1,t1,a4
1c00091a:	01051533          	sll	a0,a0,a6
1c00091e:	969a                	add	a3,a3,t1
1c000920:	4801                	li	a6,0
1c000922:	e2d57de3          	bleu	a3,a0,1c00075c <__udivdi3+0x168>
1c000926:	17fd                	addi	a5,a5,-1
1c000928:	b361                	j	1c0006b0 <__udivdi3+0xbc>
1c00092a:	4801                	li	a6,0
1c00092c:	4781                	li	a5,0
1c00092e:	b53d                	j	1c00075c <__udivdi3+0x168>

1c000930 <__umoddi3>:
1c000930:	88b2                	mv	a7,a2
1c000932:	8736                	mv	a4,a3
1c000934:	87aa                	mv	a5,a0
1c000936:	882e                	mv	a6,a1
1c000938:	1a069963          	bnez	a3,1c000aea <__umoddi3+0x1ba>
1c00093c:	1c00f6b7          	lui	a3,0x1c00f
1c000940:	ac868693          	addi	a3,a3,-1336 # 1c00eac8 <__clz_tab>
1c000944:	0ac5f463          	bleu	a2,a1,1c0009ec <__umoddi3+0xbc>
1c000948:	6341                	lui	t1,0x10
1c00094a:	08667a63          	bleu	t1,a2,1c0009de <__umoddi3+0xae>
1c00094e:	0ff00313          	li	t1,255
1c000952:	00c37363          	bleu	a2,t1,1c000958 <__umoddi3+0x28>
1c000956:	4721                	li	a4,8
1c000958:	00e65333          	srl	t1,a2,a4
1c00095c:	969a                	add	a3,a3,t1
1c00095e:	0006c683          	lbu	a3,0(a3)
1c000962:	02000313          	li	t1,32
1c000966:	9736                	add	a4,a4,a3
1c000968:	40e30333          	sub	t1,t1,a4
1c00096c:	00030c63          	beqz	t1,1c000984 <__umoddi3+0x54>
1c000970:	006595b3          	sll	a1,a1,t1
1c000974:	00e55733          	srl	a4,a0,a4
1c000978:	006618b3          	sll	a7,a2,t1
1c00097c:	00b76833          	or	a6,a4,a1
1c000980:	006517b3          	sll	a5,a0,t1
1c000984:	0108d613          	srli	a2,a7,0x10
1c000988:	02c87733          	remu	a4,a6,a2
1c00098c:	1008d533          	p.exthz	a0,a7
1c000990:	0107d693          	srli	a3,a5,0x10
1c000994:	02c85833          	divu	a6,a6,a2
1c000998:	0742                	slli	a4,a4,0x10
1c00099a:	8ed9                	or	a3,a3,a4
1c00099c:	03050833          	mul	a6,a0,a6
1c0009a0:	0106f863          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009a4:	96c6                	add	a3,a3,a7
1c0009a6:	0116e563          	bltu	a3,a7,1c0009b0 <__umoddi3+0x80>
1c0009aa:	0106f363          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009ae:	96c6                	add	a3,a3,a7
1c0009b0:	410686b3          	sub	a3,a3,a6
1c0009b4:	02c6f733          	remu	a4,a3,a2
1c0009b8:	02c6d6b3          	divu	a3,a3,a2
1c0009bc:	df0727b3          	p.insert	a5,a4,15,16
1c0009c0:	02d506b3          	mul	a3,a0,a3
1c0009c4:	00d7f863          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009c8:	97c6                	add	a5,a5,a7
1c0009ca:	0117e563          	bltu	a5,a7,1c0009d4 <__umoddi3+0xa4>
1c0009ce:	00d7f363          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009d2:	97c6                	add	a5,a5,a7
1c0009d4:	8f95                	sub	a5,a5,a3
1c0009d6:	0067d533          	srl	a0,a5,t1
1c0009da:	4581                	li	a1,0
1c0009dc:	8082                	ret
1c0009de:	01000337          	lui	t1,0x1000
1c0009e2:	4741                	li	a4,16
1c0009e4:	f6666ae3          	bltu	a2,t1,1c000958 <__umoddi3+0x28>
1c0009e8:	4761                	li	a4,24
1c0009ea:	b7bd                	j	1c000958 <__umoddi3+0x28>
1c0009ec:	e601                	bnez	a2,1c0009f4 <__umoddi3+0xc4>
1c0009ee:	4605                	li	a2,1
1c0009f0:	031658b3          	divu	a7,a2,a7
1c0009f4:	6641                	lui	a2,0x10
1c0009f6:	06c8ff63          	bleu	a2,a7,1c000a74 <__umoddi3+0x144>
1c0009fa:	0ff00613          	li	a2,255
1c0009fe:	01167363          	bleu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a02:	4721                	li	a4,8
1c000a04:	00e8d633          	srl	a2,a7,a4
1c000a08:	96b2                	add	a3,a3,a2
1c000a0a:	0006c603          	lbu	a2,0(a3)
1c000a0e:	02000313          	li	t1,32
1c000a12:	963a                	add	a2,a2,a4
1c000a14:	40c30333          	sub	t1,t1,a2
1c000a18:	06031563          	bnez	t1,1c000a82 <__umoddi3+0x152>
1c000a1c:	411585b3          	sub	a1,a1,a7
1c000a20:	0108d713          	srli	a4,a7,0x10
1c000a24:	1008d533          	p.exthz	a0,a7
1c000a28:	0107d613          	srli	a2,a5,0x10
1c000a2c:	02e5f6b3          	remu	a3,a1,a4
1c000a30:	02e5d5b3          	divu	a1,a1,a4
1c000a34:	06c2                	slli	a3,a3,0x10
1c000a36:	8ed1                	or	a3,a3,a2
1c000a38:	02b505b3          	mul	a1,a0,a1
1c000a3c:	00b6f863          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a40:	96c6                	add	a3,a3,a7
1c000a42:	0116e563          	bltu	a3,a7,1c000a4c <__umoddi3+0x11c>
1c000a46:	00b6f363          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a4a:	96c6                	add	a3,a3,a7
1c000a4c:	40b685b3          	sub	a1,a3,a1
1c000a50:	02e5f6b3          	remu	a3,a1,a4
1c000a54:	02e5d5b3          	divu	a1,a1,a4
1c000a58:	df06a7b3          	p.insert	a5,a3,15,16
1c000a5c:	02b505b3          	mul	a1,a0,a1
1c000a60:	00b7f863          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a64:	97c6                	add	a5,a5,a7
1c000a66:	0117e563          	bltu	a5,a7,1c000a70 <__umoddi3+0x140>
1c000a6a:	00b7f363          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a6e:	97c6                	add	a5,a5,a7
1c000a70:	8f8d                	sub	a5,a5,a1
1c000a72:	b795                	j	1c0009d6 <__umoddi3+0xa6>
1c000a74:	01000637          	lui	a2,0x1000
1c000a78:	4741                	li	a4,16
1c000a7a:	f8c8e5e3          	bltu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a7e:	4761                	li	a4,24
1c000a80:	b751                	j	1c000a04 <__umoddi3+0xd4>
1c000a82:	006898b3          	sll	a7,a7,t1
1c000a86:	00c5d733          	srl	a4,a1,a2
1c000a8a:	006517b3          	sll	a5,a0,t1
1c000a8e:	00c55633          	srl	a2,a0,a2
1c000a92:	006595b3          	sll	a1,a1,t1
1c000a96:	0108d513          	srli	a0,a7,0x10
1c000a9a:	8dd1                	or	a1,a1,a2
1c000a9c:	02a77633          	remu	a2,a4,a0
1c000aa0:	1008d833          	p.exthz	a6,a7
1c000aa4:	0105d693          	srli	a3,a1,0x10
1c000aa8:	02a75733          	divu	a4,a4,a0
1c000aac:	0642                	slli	a2,a2,0x10
1c000aae:	8ed1                	or	a3,a3,a2
1c000ab0:	02e80733          	mul	a4,a6,a4
1c000ab4:	00e6f863          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ab8:	96c6                	add	a3,a3,a7
1c000aba:	0116e563          	bltu	a3,a7,1c000ac4 <__umoddi3+0x194>
1c000abe:	00e6f363          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ac2:	96c6                	add	a3,a3,a7
1c000ac4:	8e99                	sub	a3,a3,a4
1c000ac6:	02a6f733          	remu	a4,a3,a0
1c000aca:	02a6d6b3          	divu	a3,a3,a0
1c000ace:	df0725b3          	p.insert	a1,a4,15,16
1c000ad2:	02d806b3          	mul	a3,a6,a3
1c000ad6:	00d5f863          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ada:	95c6                	add	a1,a1,a7
1c000adc:	0115e563          	bltu	a1,a7,1c000ae6 <__umoddi3+0x1b6>
1c000ae0:	00d5f363          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ae4:	95c6                	add	a1,a1,a7
1c000ae6:	8d95                	sub	a1,a1,a3
1c000ae8:	bf25                	j	1c000a20 <__umoddi3+0xf0>
1c000aea:	eed5e9e3          	bltu	a1,a3,1c0009dc <__umoddi3+0xac>
1c000aee:	6741                	lui	a4,0x10
1c000af0:	04e6f563          	bleu	a4,a3,1c000b3a <__umoddi3+0x20a>
1c000af4:	0ff00e93          	li	t4,255
1c000af8:	00deb733          	sltu	a4,t4,a3
1c000afc:	070e                	slli	a4,a4,0x3
1c000afe:	1c00f337          	lui	t1,0x1c00f
1c000b02:	00e6d8b3          	srl	a7,a3,a4
1c000b06:	ac830313          	addi	t1,t1,-1336 # 1c00eac8 <__clz_tab>
1c000b0a:	989a                	add	a7,a7,t1
1c000b0c:	0008ce83          	lbu	t4,0(a7)
1c000b10:	02000e13          	li	t3,32
1c000b14:	9eba                	add	t4,t4,a4
1c000b16:	41de0e33          	sub	t3,t3,t4
1c000b1a:	020e1763          	bnez	t3,1c000b48 <__umoddi3+0x218>
1c000b1e:	00b6e463          	bltu	a3,a1,1c000b26 <__umoddi3+0x1f6>
1c000b22:	00c56963          	bltu	a0,a2,1c000b34 <__umoddi3+0x204>
1c000b26:	40c507b3          	sub	a5,a0,a2
1c000b2a:	8d95                	sub	a1,a1,a3
1c000b2c:	00f53533          	sltu	a0,a0,a5
1c000b30:	40a58833          	sub	a6,a1,a0
1c000b34:	853e                	mv	a0,a5
1c000b36:	85c2                	mv	a1,a6
1c000b38:	b555                	j	1c0009dc <__umoddi3+0xac>
1c000b3a:	010008b7          	lui	a7,0x1000
1c000b3e:	4741                	li	a4,16
1c000b40:	fb16efe3          	bltu	a3,a7,1c000afe <__umoddi3+0x1ce>
1c000b44:	4761                	li	a4,24
1c000b46:	bf65                	j	1c000afe <__umoddi3+0x1ce>
1c000b48:	01d65733          	srl	a4,a2,t4
1c000b4c:	01c696b3          	sll	a3,a3,t3
1c000b50:	8ed9                	or	a3,a3,a4
1c000b52:	01d5d7b3          	srl	a5,a1,t4
1c000b56:	0106d813          	srli	a6,a3,0x10
1c000b5a:	0307f333          	remu	t1,a5,a6
1c000b5e:	1006d733          	p.exthz	a4,a3
1c000b62:	01d558b3          	srl	a7,a0,t4
1c000b66:	01c595b3          	sll	a1,a1,t3
1c000b6a:	00b8e5b3          	or	a1,a7,a1
1c000b6e:	0105d893          	srli	a7,a1,0x10
1c000b72:	01c61633          	sll	a2,a2,t3
1c000b76:	01c51533          	sll	a0,a0,t3
1c000b7a:	0307d7b3          	divu	a5,a5,a6
1c000b7e:	0342                	slli	t1,t1,0x10
1c000b80:	011368b3          	or	a7,t1,a7
1c000b84:	02f70f33          	mul	t5,a4,a5
1c000b88:	833e                	mv	t1,a5
1c000b8a:	01e8fc63          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b8e:	98b6                	add	a7,a7,a3
1c000b90:	fff78313          	addi	t1,a5,-1 # ffffff <__L2+0xf7ffff>
1c000b94:	00d8e763          	bltu	a7,a3,1c000ba2 <__umoddi3+0x272>
1c000b98:	01e8f563          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b9c:	ffe78313          	addi	t1,a5,-2
1c000ba0:	98b6                	add	a7,a7,a3
1c000ba2:	41e888b3          	sub	a7,a7,t5
1c000ba6:	0308f7b3          	remu	a5,a7,a6
1c000baa:	0308d8b3          	divu	a7,a7,a6
1c000bae:	df07a5b3          	p.insert	a1,a5,15,16
1c000bb2:	03170733          	mul	a4,a4,a7
1c000bb6:	87c6                	mv	a5,a7
1c000bb8:	00e5fc63          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bbc:	95b6                	add	a1,a1,a3
1c000bbe:	fff88793          	addi	a5,a7,-1 # ffffff <__L2+0xf7ffff>
1c000bc2:	00d5e763          	bltu	a1,a3,1c000bd0 <__umoddi3+0x2a0>
1c000bc6:	00e5f563          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bca:	ffe88793          	addi	a5,a7,-2
1c000bce:	95b6                	add	a1,a1,a3
1c000bd0:	0342                	slli	t1,t1,0x10
1c000bd2:	6f41                	lui	t5,0x10
1c000bd4:	00f36333          	or	t1,t1,a5
1c000bd8:	ffff0793          	addi	a5,t5,-1 # ffff <__l1_heap_size+0x43>
1c000bdc:	00f37833          	and	a6,t1,a5
1c000be0:	01035313          	srli	t1,t1,0x10
1c000be4:	8ff1                	and	a5,a5,a2
1c000be6:	02f808b3          	mul	a7,a6,a5
1c000bea:	8d99                	sub	a1,a1,a4
1c000bec:	01065713          	srli	a4,a2,0x10
1c000bf0:	02f307b3          	mul	a5,t1,a5
1c000bf4:	8fbe                	mv	t6,a5
1c000bf6:	42e80fb3          	p.mac	t6,a6,a4
1c000bfa:	0108d813          	srli	a6,a7,0x10
1c000bfe:	987e                	add	a6,a6,t6
1c000c00:	02e30333          	mul	t1,t1,a4
1c000c04:	00f87363          	bleu	a5,a6,1c000c0a <__umoddi3+0x2da>
1c000c08:	937a                	add	t1,t1,t5
1c000c0a:	01085713          	srli	a4,a6,0x10
1c000c0e:	933a                	add	t1,t1,a4
1c000c10:	6741                	lui	a4,0x10
1c000c12:	177d                	addi	a4,a4,-1
1c000c14:	00e87833          	and	a6,a6,a4
1c000c18:	0842                	slli	a6,a6,0x10
1c000c1a:	00e8f733          	and	a4,a7,a4
1c000c1e:	9742                	add	a4,a4,a6
1c000c20:	0065e663          	bltu	a1,t1,1c000c2c <__umoddi3+0x2fc>
1c000c24:	00659d63          	bne	a1,t1,1c000c3e <__umoddi3+0x30e>
1c000c28:	00e57b63          	bleu	a4,a0,1c000c3e <__umoddi3+0x30e>
1c000c2c:	40c70633          	sub	a2,a4,a2
1c000c30:	00c73733          	sltu	a4,a4,a2
1c000c34:	40d30333          	sub	t1,t1,a3
1c000c38:	40e30333          	sub	t1,t1,a4
1c000c3c:	8732                	mv	a4,a2
1c000c3e:	40e50733          	sub	a4,a0,a4
1c000c42:	00e53533          	sltu	a0,a0,a4
1c000c46:	406585b3          	sub	a1,a1,t1
1c000c4a:	8d89                	sub	a1,a1,a0
1c000c4c:	01d597b3          	sll	a5,a1,t4
1c000c50:	01c75733          	srl	a4,a4,t3
1c000c54:	00e7e533          	or	a0,a5,a4
1c000c58:	01c5d5b3          	srl	a1,a1,t3
1c000c5c:	b341                	j	1c0009dc <__umoddi3+0xac>

1c000c5e <__divsf3>:
1c000c5e:	cf751633          	p.extractu	a2,a0,7,23
1c000c62:	ec051333          	p.extractu	t1,a0,22,0
1c000c66:	817d                	srli	a0,a0,0x1f
1c000c68:	ce39                	beqz	a2,1c000cc6 <__divsf3+0x68>
1c000c6a:	0ff00793          	li	a5,255
1c000c6e:	06f60b63          	beq	a2,a5,1c000ce4 <__divsf3+0x86>
1c000c72:	030e                	slli	t1,t1,0x3
1c000c74:	c1a34333          	p.bset	t1,t1,0,26
1c000c78:	f8160613          	addi	a2,a2,-127 # ffff81 <__L2+0xf7ff81>
1c000c7c:	4681                	li	a3,0
1c000c7e:	cf759733          	p.extractu	a4,a1,7,23
1c000c82:	ec0597b3          	p.extractu	a5,a1,22,0
1c000c86:	81fd                	srli	a1,a1,0x1f
1c000c88:	cb25                	beqz	a4,1c000cf8 <__divsf3+0x9a>
1c000c8a:	0ff00813          	li	a6,255
1c000c8e:	09070463          	beq	a4,a6,1c000d16 <__divsf3+0xb8>
1c000c92:	078e                	slli	a5,a5,0x3
1c000c94:	c1a7c7b3          	p.bset	a5,a5,0,26
1c000c98:	f8170713          	addi	a4,a4,-127 # ff81 <__rt_stack_size+0xf781>
1c000c9c:	4801                	li	a6,0
1c000c9e:	40e60e33          	sub	t3,a2,a4
1c000ca2:	00269713          	slli	a4,a3,0x2
1c000ca6:	01076733          	or	a4,a4,a6
1c000caa:	177d                	addi	a4,a4,-1
1c000cac:	4639                	li	a2,14
1c000cae:	00b548b3          	xor	a7,a0,a1
1c000cb2:	06e66b63          	bltu	a2,a4,1c000d28 <__divsf3+0xca>
1c000cb6:	1c00f637          	lui	a2,0x1c00f
1c000cba:	070a                	slli	a4,a4,0x2
1c000cbc:	a8c60613          	addi	a2,a2,-1396 # 1c00ea8c <__DTOR_END__>
1c000cc0:	20e67703          	p.lw	a4,a4(a2)
1c000cc4:	8702                	jr	a4
1c000cc6:	02030663          	beqz	t1,1c000cf2 <__divsf3+0x94>
1c000cca:	10031733          	p.fl1	a4,t1
1c000cce:	47fd                	li	a5,31
1c000cd0:	40e78733          	sub	a4,a5,a4
1c000cd4:	ffb70793          	addi	a5,a4,-5
1c000cd8:	f8a00613          	li	a2,-118
1c000cdc:	00f31333          	sll	t1,t1,a5
1c000ce0:	8e19                	sub	a2,a2,a4
1c000ce2:	bf69                	j	1c000c7c <__divsf3+0x1e>
1c000ce4:	0ff00613          	li	a2,255
1c000ce8:	4689                	li	a3,2
1c000cea:	f8030ae3          	beqz	t1,1c000c7e <__divsf3+0x20>
1c000cee:	468d                	li	a3,3
1c000cf0:	b779                	j	1c000c7e <__divsf3+0x20>
1c000cf2:	4601                	li	a2,0
1c000cf4:	4685                	li	a3,1
1c000cf6:	b761                	j	1c000c7e <__divsf3+0x20>
1c000cf8:	c78d                	beqz	a5,1c000d22 <__divsf3+0xc4>
1c000cfa:	10079833          	p.fl1	a6,a5
1c000cfe:	477d                	li	a4,31
1c000d00:	41070833          	sub	a6,a4,a6
1c000d04:	ffb80713          	addi	a4,a6,-5
1c000d08:	00e797b3          	sll	a5,a5,a4
1c000d0c:	f8a00713          	li	a4,-118
1c000d10:	41070733          	sub	a4,a4,a6
1c000d14:	b761                	j	1c000c9c <__divsf3+0x3e>
1c000d16:	0ff00713          	li	a4,255
1c000d1a:	4809                	li	a6,2
1c000d1c:	d3c9                	beqz	a5,1c000c9e <__divsf3+0x40>
1c000d1e:	480d                	li	a6,3
1c000d20:	bfbd                	j	1c000c9e <__divsf3+0x40>
1c000d22:	4701                	li	a4,0
1c000d24:	4805                	li	a6,1
1c000d26:	bfa5                	j	1c000c9e <__divsf3+0x40>
1c000d28:	00579813          	slli	a6,a5,0x5
1c000d2c:	0af37a63          	bleu	a5,t1,1c000de0 <__divsf3+0x182>
1c000d30:	1e7d                	addi	t3,t3,-1
1c000d32:	4601                	li	a2,0
1c000d34:	01085793          	srli	a5,a6,0x10
1c000d38:	02f35eb3          	divu	t4,t1,a5
1c000d3c:	65c1                	lui	a1,0x10
1c000d3e:	15fd                	addi	a1,a1,-1
1c000d40:	00b87733          	and	a4,a6,a1
1c000d44:	8241                	srli	a2,a2,0x10
1c000d46:	02f376b3          	remu	a3,t1,a5
1c000d4a:	8576                	mv	a0,t4
1c000d4c:	03d705b3          	mul	a1,a4,t4
1c000d50:	06c2                	slli	a3,a3,0x10
1c000d52:	8ed1                	or	a3,a3,a2
1c000d54:	00b6fc63          	bleu	a1,a3,1c000d6c <__divsf3+0x10e>
1c000d58:	96c2                	add	a3,a3,a6
1c000d5a:	fffe8513          	addi	a0,t4,-1
1c000d5e:	0106e763          	bltu	a3,a6,1c000d6c <__divsf3+0x10e>
1c000d62:	00b6f563          	bleu	a1,a3,1c000d6c <__divsf3+0x10e>
1c000d66:	ffee8513          	addi	a0,t4,-2
1c000d6a:	96c2                	add	a3,a3,a6
1c000d6c:	8e8d                	sub	a3,a3,a1
1c000d6e:	02f6d633          	divu	a2,a3,a5
1c000d72:	02f6f6b3          	remu	a3,a3,a5
1c000d76:	87b2                	mv	a5,a2
1c000d78:	02c705b3          	mul	a1,a4,a2
1c000d7c:	01069713          	slli	a4,a3,0x10
1c000d80:	00b77c63          	bleu	a1,a4,1c000d98 <__divsf3+0x13a>
1c000d84:	9742                	add	a4,a4,a6
1c000d86:	fff60793          	addi	a5,a2,-1
1c000d8a:	01076763          	bltu	a4,a6,1c000d98 <__divsf3+0x13a>
1c000d8e:	00b77563          	bleu	a1,a4,1c000d98 <__divsf3+0x13a>
1c000d92:	ffe60793          	addi	a5,a2,-2
1c000d96:	9742                	add	a4,a4,a6
1c000d98:	0542                	slli	a0,a0,0x10
1c000d9a:	8f0d                	sub	a4,a4,a1
1c000d9c:	8d5d                	or	a0,a0,a5
1c000d9e:	00e03733          	snez	a4,a4
1c000da2:	00e567b3          	or	a5,a0,a4
1c000da6:	07fe0693          	addi	a3,t3,127
1c000daa:	04d05e63          	blez	a3,1c000e06 <__divsf3+0x1a8>
1c000dae:	f837b733          	p.bclr	a4,a5,28,3
1c000db2:	c711                	beqz	a4,1c000dbe <__divsf3+0x160>
1c000db4:	f647b733          	p.bclr	a4,a5,27,4
1c000db8:	00472363          	p.beqimm	a4,4,1c000dbe <__divsf3+0x160>
1c000dbc:	0791                	addi	a5,a5,4
1c000dbe:	00479713          	slli	a4,a5,0x4
1c000dc2:	00075663          	bgez	a4,1c000dce <__divsf3+0x170>
1c000dc6:	c1b7b7b3          	p.bclr	a5,a5,0,27
1c000dca:	080e0693          	addi	a3,t3,128
1c000dce:	0fe00713          	li	a4,254
1c000dd2:	838d                	srli	a5,a5,0x3
1c000dd4:	06d75c63          	ble	a3,a4,1c000e4c <__divsf3+0x1ee>
1c000dd8:	4781                	li	a5,0
1c000dda:	0ff00693          	li	a3,255
1c000dde:	a0bd                	j	1c000e4c <__divsf3+0x1ee>
1c000de0:	01f31613          	slli	a2,t1,0x1f
1c000de4:	00135313          	srli	t1,t1,0x1
1c000de8:	b7b1                	j	1c000d34 <__divsf3+0xd6>
1c000dea:	88aa                	mv	a7,a0
1c000dec:	879a                	mv	a5,t1
1c000dee:	8836                	mv	a6,a3
1c000df0:	fe2824e3          	p.beqimm	a6,2,1c000dd8 <__divsf3+0x17a>
1c000df4:	04382763          	p.beqimm	a6,3,1c000e42 <__divsf3+0x1e4>
1c000df8:	fa1837e3          	p.bneimm	a6,1,1c000da6 <__divsf3+0x148>
1c000dfc:	4781                	li	a5,0
1c000dfe:	4681                	li	a3,0
1c000e00:	a0b1                	j	1c000e4c <__divsf3+0x1ee>
1c000e02:	88ae                	mv	a7,a1
1c000e04:	b7f5                	j	1c000df0 <__divsf3+0x192>
1c000e06:	4705                	li	a4,1
1c000e08:	8f15                	sub	a4,a4,a3
1c000e0a:	46ed                	li	a3,27
1c000e0c:	fee6c8e3          	blt	a3,a4,1c000dfc <__divsf3+0x19e>
1c000e10:	09ee0613          	addi	a2,t3,158
1c000e14:	00e7d733          	srl	a4,a5,a4
1c000e18:	00c797b3          	sll	a5,a5,a2
1c000e1c:	00f037b3          	snez	a5,a5
1c000e20:	8fd9                	or	a5,a5,a4
1c000e22:	f837b733          	p.bclr	a4,a5,28,3
1c000e26:	c711                	beqz	a4,1c000e32 <__divsf3+0x1d4>
1c000e28:	f647b733          	p.bclr	a4,a5,27,4
1c000e2c:	00472363          	p.beqimm	a4,4,1c000e32 <__divsf3+0x1d4>
1c000e30:	0791                	addi	a5,a5,4
1c000e32:	00579713          	slli	a4,a5,0x5
1c000e36:	838d                	srli	a5,a5,0x3
1c000e38:	fc0753e3          	bgez	a4,1c000dfe <__divsf3+0x1a0>
1c000e3c:	4781                	li	a5,0
1c000e3e:	4685                	li	a3,1
1c000e40:	a031                	j	1c000e4c <__divsf3+0x1ee>
1c000e42:	004007b7          	lui	a5,0x400
1c000e46:	0ff00693          	li	a3,255
1c000e4a:	4881                	li	a7,0
1c000e4c:	4501                	li	a0,0
1c000e4e:	ec07a533          	p.insert	a0,a5,22,0
1c000e52:	cf76a533          	p.insert	a0,a3,7,23
1c000e56:	c1f8a533          	p.insert	a0,a7,0,31
1c000e5a:	8082                	ret

1c000e5c <__floatunsisf>:
1c000e5c:	4701                	li	a4,0
1c000e5e:	c11d                	beqz	a0,1c000e84 <__floatunsisf+0x28>
1c000e60:	477d                	li	a4,31
1c000e62:	100517b3          	p.fl1	a5,a0
1c000e66:	40f707b3          	sub	a5,a4,a5
1c000e6a:	09e00713          	li	a4,158
1c000e6e:	8f1d                	sub	a4,a4,a5
1c000e70:	09600693          	li	a3,150
1c000e74:	02e6c063          	blt	a3,a4,1c000e94 <__floatunsisf+0x38>
1c000e78:	46a1                	li	a3,8
1c000e7a:	00f6d563          	ble	a5,a3,1c000e84 <__floatunsisf+0x28>
1c000e7e:	17e1                	addi	a5,a5,-8
1c000e80:	00f51533          	sll	a0,a0,a5
1c000e84:	4781                	li	a5,0
1c000e86:	ec0527b3          	p.insert	a5,a0,22,0
1c000e8a:	cf7727b3          	p.insert	a5,a4,7,23
1c000e8e:	c1f7b533          	p.bclr	a0,a5,0,31
1c000e92:	8082                	ret
1c000e94:	09900693          	li	a3,153
1c000e98:	00e6dd63          	ble	a4,a3,1c000eb2 <__floatunsisf+0x56>
1c000e9c:	01b78693          	addi	a3,a5,27 # 40001b <__L2+0x38001b>
1c000ea0:	4615                	li	a2,5
1c000ea2:	00d516b3          	sll	a3,a0,a3
1c000ea6:	8e1d                	sub	a2,a2,a5
1c000ea8:	00d036b3          	snez	a3,a3
1c000eac:	00c55533          	srl	a0,a0,a2
1c000eb0:	8d55                	or	a0,a0,a3
1c000eb2:	4695                	li	a3,5
1c000eb4:	00f6d663          	ble	a5,a3,1c000ec0 <__floatunsisf+0x64>
1c000eb8:	ffb78693          	addi	a3,a5,-5
1c000ebc:	00d51533          	sll	a0,a0,a3
1c000ec0:	f8353633          	p.bclr	a2,a0,28,3
1c000ec4:	c1a536b3          	p.bclr	a3,a0,0,26
1c000ec8:	c611                	beqz	a2,1c000ed4 <__floatunsisf+0x78>
1c000eca:	f6453533          	p.bclr	a0,a0,27,4
1c000ece:	00452363          	p.beqimm	a0,4,1c000ed4 <__floatunsisf+0x78>
1c000ed2:	0691                	addi	a3,a3,4
1c000ed4:	00569613          	slli	a2,a3,0x5
1c000ed8:	00065763          	bgez	a2,1c000ee6 <__floatunsisf+0x8a>
1c000edc:	09f00713          	li	a4,159
1c000ee0:	c1a6b6b3          	p.bclr	a3,a3,0,26
1c000ee4:	8f1d                	sub	a4,a4,a5
1c000ee6:	0036d513          	srli	a0,a3,0x3
1c000eea:	bf69                	j	1c000e84 <__floatunsisf+0x28>

1c000eec <__extendsfdf2>:
1c000eec:	cf7516b3          	p.extractu	a3,a0,7,23
1c000ef0:	00168793          	addi	a5,a3,1
1c000ef4:	ee87b7b3          	p.bclr	a5,a5,23,8
1c000ef8:	4605                	li	a2,1
1c000efa:	ec051733          	p.extractu	a4,a0,22,0
1c000efe:	817d                	srli	a0,a0,0x1f
1c000f00:	02f65163          	ble	a5,a2,1c000f22 <__extendsfdf2+0x36>
1c000f04:	00375793          	srli	a5,a4,0x3
1c000f08:	38068693          	addi	a3,a3,896
1c000f0c:	0776                	slli	a4,a4,0x1d
1c000f0e:	4601                	li	a2,0
1c000f10:	e607a633          	p.insert	a2,a5,19,0
1c000f14:	d546a633          	p.insert	a2,a3,10,20
1c000f18:	c1f52633          	p.insert	a2,a0,0,31
1c000f1c:	85b2                	mv	a1,a2
1c000f1e:	853a                	mv	a0,a4
1c000f20:	8082                	ret
1c000f22:	ee85                	bnez	a3,1c000f5a <__extendsfdf2+0x6e>
1c000f24:	c729                	beqz	a4,1c000f6e <__extendsfdf2+0x82>
1c000f26:	47fd                	li	a5,31
1c000f28:	10071633          	p.fl1	a2,a4
1c000f2c:	40c78633          	sub	a2,a5,a2
1c000f30:	47a9                	li	a5,10
1c000f32:	00c7ce63          	blt	a5,a2,1c000f4e <__extendsfdf2+0x62>
1c000f36:	47ad                	li	a5,11
1c000f38:	8f91                	sub	a5,a5,a2
1c000f3a:	01560693          	addi	a3,a2,21
1c000f3e:	00f757b3          	srl	a5,a4,a5
1c000f42:	00d71733          	sll	a4,a4,a3
1c000f46:	38900693          	li	a3,905
1c000f4a:	8e91                	sub	a3,a3,a2
1c000f4c:	b7c9                	j	1c000f0e <__extendsfdf2+0x22>
1c000f4e:	ff560793          	addi	a5,a2,-11
1c000f52:	00f717b3          	sll	a5,a4,a5
1c000f56:	4701                	li	a4,0
1c000f58:	b7fd                	j	1c000f46 <__extendsfdf2+0x5a>
1c000f5a:	4781                	li	a5,0
1c000f5c:	c711                	beqz	a4,1c000f68 <__extendsfdf2+0x7c>
1c000f5e:	00375793          	srli	a5,a4,0x3
1c000f62:	c137c7b3          	p.bset	a5,a5,0,19
1c000f66:	0776                	slli	a4,a4,0x1d
1c000f68:	7ff00693          	li	a3,2047
1c000f6c:	b74d                	j	1c000f0e <__extendsfdf2+0x22>
1c000f6e:	4781                	li	a5,0
1c000f70:	4681                	li	a3,0
1c000f72:	bf71                	j	1c000f0e <__extendsfdf2+0x22>

1c000f74 <cluster>:
#define CLASS_NUM 2

//short int *class_num = NULL;

static void cluster()
{
1c000f74:	1101                	addi	sp,sp,-32
1c000f76:	ce06                	sw	ra,28(sp)
1c000f78:	cc22                	sw	s0,24(sp)
1c000f7a:	ca26                	sw	s1,20(sp)
1c000f7c:	c84a                	sw	s2,16(sp)
1c000f7e:	c64e                	sw	s3,12(sp)
  printf("Running on cluster\n");
1c000f80:	1c00f537          	lui	a0,0x1c00f
1c000f84:	bc850513          	addi	a0,a0,-1080 # 1c00ebc8 <__clz_tab+0x100>
1c000f88:	04b0c0ef          	jal	ra,1c00d7d2 <puts>
#ifdef PERF
  printf("Start timer\n");
1c000f8c:	1c00f537          	lui	a0,0x1c00f
1c000f90:	bdc50513          	addi	a0,a0,-1060 # 1c00ebdc <__clz_tab+0x114>
1c000f94:	03f0c0ef          	jal	ra,1c00d7d2 <puts>

/* Configure the active events. eventMask is an OR of events got through SPR_PCER_EVENT_MASK */
static inline void cpu_perf_conf_events(unsigned int eventMask)
{
#ifndef PLP_NO_PERF_COUNTERS
  asm volatile ("csrw 0x7A0, %0" : "+r" (eventMask));
1c000f98:	67c1                	lui	a5,0x10
1c000f9a:	7a079073          	csrw	pcer,a5

static inline uint32_t timer_cmp_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CMP_HI_OFFSET); }
static inline void timer_cmp_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_HI_OFFSET, value); }

static inline uint32_t timer_start_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_START_LO_OFFSET); }
static inline void timer_start_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_START_LO_OFFSET, value); }
1c000f9e:	102007b7          	lui	a5,0x10200
1c000fa2:	40078793          	addi	a5,a5,1024 # 10200400 <__l1_end+0x2003bc>
1c000fa6:	4705                	li	a4,1
1c000fa8:	00e7ac23          	sw	a4,24(a5)

/* Configure the mode. confMask is an OR of all SPR_PCMR_* macros */
static inline void cpu_perf_conf(unsigned int confMask)
{
#ifndef PLP_NO_PERF_COUNTERS
  asm volatile ("csrw 0x7A1, %0" :: "r" (confMask));
1c000fac:	470d                	li	a4,3
1c000fae:	7a171073          	csrw	pcmr,a4

static inline uint32_t timer_start_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_START_HI_OFFSET); }
static inline void timer_start_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_START_HI_OFFSET, value); }

static inline uint32_t timer_reset_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_RESET_LO_OFFSET); }
static inline void timer_reset_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_RESET_LO_OFFSET, value); }
1c000fb2:	4705                	li	a4,1
1c000fb4:	02e7a023          	sw	a4,32(a5)
}

/* Set all counters to the specified value */
static inline void cpu_perf_setall(unsigned int value) {
#ifndef PLP_NO_PERF_COUNTERS
  asm volatile ("csrw 0x79F, %0" :: "r" (value));
1c000fb8:	4781                	li	a5,0
1c000fba:	79f79073          	csrw	pccr31,a5
  gap_cl_starttimer();
  gap_cl_resethwtimer();
#endif
  modelCNN(Img_In, ResOut);
1c000fbe:	1c00f437          	lui	s0,0x1c00f
1c000fc2:	57040413          	addi	s0,s0,1392 # 1c00f570 <ResOut>
1c000fc6:	400c                	lw	a1,0(s0)
1c000fc8:	4048                	lw	a0,4(s0)
1c000fca:	285040ef          	jal	ra,1c005a4e <modelCNN>
  printf("Runner completed\n");
1c000fce:	1c00f537          	lui	a0,0x1c00f
1c000fd2:	be850513          	addi	a0,a0,-1048 # 1c00ebe8 <__clz_tab+0x120>
1c000fd6:	7fc0c0ef          	jal	ra,1c00d7d2 <puts>

  //Checki Results
  int rec_digit = 0;
  short int highest = ResOut[0];
1c000fda:	401c                	lw	a5,0(s0)
1c000fdc:	00079983          	lh	s3,0(a5)
  for(int i = 0; i < CLASS_NUM; i++) {
    printf("class %d: %d \n", i, ResOut[i]);
1c000fe0:	864e                	mv	a2,s3
1c000fe2:	4581                	li	a1,0
1c000fe4:	1c00f937          	lui	s2,0x1c00f
1c000fe8:	bfc90513          	addi	a0,s2,-1028 # 1c00ebfc <__clz_tab+0x134>
1c000fec:	17d0c0ef          	jal	ra,1c00d968 <printf>
    if(ResOut[i] > highest) {
1c000ff0:	401c                	lw	a5,0(s0)
1c000ff2:	00079483          	lh	s1,0(a5)
1c000ff6:	0534e4b3          	p.max	s1,s1,s3
    printf("class %d: %d \n", i, ResOut[i]);
1c000ffa:	00279603          	lh	a2,2(a5)
1c000ffe:	4585                	li	a1,1
1c001000:	bfc90513          	addi	a0,s2,-1028
1c001004:	1650c0ef          	jal	ra,1c00d968 <printf>
    if(ResOut[i] > highest) {
1c001008:	401c                	lw	a5,0(s0)
1c00100a:	00279403          	lh	s0,2(a5)
1c00100e:	0084a433          	slt	s0,s1,s0
      highest = ResOut[i];
      rec_digit = i;
    }
  }
  printf("\n");
1c001012:	4529                	li	a0,10
1c001014:	0350c0ef          	jal	ra,1c00d848 <putchar>

  printf("Recognized: %d\n", rec_digit);
1c001018:	85a2                	mv	a1,s0
1c00101a:	1c00f537          	lui	a0,0x1c00f
1c00101e:	c0c50513          	addi	a0,a0,-1012 # 1c00ec0c <__clz_tab+0x144>
1c001022:	1470c0ef          	jal	ra,1c00d968 <printf>
}
1c001026:	40f2                	lw	ra,28(sp)
1c001028:	4462                	lw	s0,24(sp)
1c00102a:	44d2                	lw	s1,20(sp)
1c00102c:	4942                	lw	s2,16(sp)
1c00102e:	49b2                	lw	s3,12(sp)
1c001030:	6105                	addi	sp,sp,32
1c001032:	8082                	ret

1c001034 <test_model>:

int test_model(void)
{
1c001034:	7119                	addi	sp,sp,-128
1c001036:	de86                	sw	ra,124(sp)
1c001038:	dca2                	sw	s0,120(sp)
1c00103a:	daa6                	sw	s1,116(sp)
1c00103c:	d8ca                	sw	s2,112(sp)
1c00103e:	d6ce                	sw	s3,108(sp)
1c001040:	d4d2                	sw	s4,104(sp)
1c001042:	d2d6                	sw	s5,100(sp)
1c001044:	d0da                	sw	s6,96(sp)
1c001046:	cede                	sw	s7,92(sp)
1c001048:	cce2                	sw	s8,88(sp)
1c00104a:	cae6                	sw	s9,84(sp)
1c00104c:	c8ea                	sw	s10,80(sp)
    printf("Entering main controller\n");
1c00104e:	1c00f537          	lui	a0,0x1c00f
1c001052:	c4050513          	addi	a0,a0,-960 # 1c00ec40 <__clz_tab+0x178>
1c001056:	77c0c0ef          	jal	ra,1c00d7d2 <puts>
    printf("Reading image\n");
1c00105a:	1c00f537          	lui	a0,0x1c00f
1c00105e:	c5c50513          	addi	a0,a0,-932 # 1c00ec5c <__clz_tab+0x194>
1c001062:	7700c0ef          	jal	ra,1c00d7d2 <puts>
    //Reading Image from Bridge
    /*------------------- Allocate Image Buffer ------------------------*/
    printf("Going to alloc the image buffer!\n");
1c001066:	1c00f537          	lui	a0,0x1c00f
1c00106a:	c6c50513          	addi	a0,a0,-916 # 1c00ec6c <__clz_tab+0x1a4>
1c00106e:	7640c0ef          	jal	ra,1c00d7d2 <puts>
    // Img_In 保存图像数据，为其分配图片字节数的资源
    Img_In = (unsigned char *) AT_L2_ALLOC(0, AT_INPUT_SIZE_BYTES);
1c001072:	654d                	lui	a0,0x13
1c001074:	4d050513          	addi	a0,a0,1232 # 134d0 <__L1Cl+0x34d0>
1c001078:	7b20a0ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c00107c:	1c00f7b7          	lui	a5,0x1c00f
1c001080:	56a7aa23          	sw	a0,1396(a5) # 1c00f574 <Img_In>
    //class_num (short int *) AT_L2_ALLOC(0,sizeof(short int));
    if(Img_In==NULL) {
1c001084:	c121                	beqz	a0,1c0010c4 <test_model+0x90>
      pmsis_exit(-1);
    } 

    char *ImageName = __XSTR(AT_IMAGE);

    if (ReadImageFromFile(ImageName, AT_INPUT_WIDTH, AT_INPUT_HEIGHT, AT_INPUT_COLORS, Img_In, AT_INPUT_SIZE_BYTES, IMGIO_OUTPUT_CHAR, 0))
1c001086:	4881                	li	a7,0
1c001088:	4801                	li	a6,0
1c00108a:	67cd                	lui	a5,0x13
1c00108c:	4d078793          	addi	a5,a5,1232 # 134d0 <__L1Cl+0x34d0>
1c001090:	872a                	mv	a4,a0
1c001092:	4685                	li	a3,1
1c001094:	0f400613          	li	a2,244
1c001098:	14400593          	li	a1,324
1c00109c:	1c00f537          	lui	a0,0x1c00f
1c0010a0:	cac50513          	addi	a0,a0,-852 # 1c00ecac <__clz_tab+0x1e4>
1c0010a4:	551040ef          	jal	ra,1c005df4 <ReadImageFromFile>
1c0010a8:	c51d                	beqz	a0,1c0010d6 <test_model+0xa2>
    {
        printf("Failed to load image %s\n", ImageName);
1c0010aa:	1c00f5b7          	lui	a1,0x1c00f
1c0010ae:	cac58593          	addi	a1,a1,-852 # 1c00ecac <__clz_tab+0x1e4>
1c0010b2:	1c00f537          	lui	a0,0x1c00f
1c0010b6:	cd450513          	addi	a0,a0,-812 # 1c00ecd4 <__clz_tab+0x20c>
1c0010ba:	0af0c0ef          	jal	ra,1c00d968 <printf>
        pmsis_exit(-2);
1c0010be:	5579                	li	a0,-2
1c0010c0:	7b60c0ef          	jal	ra,1c00d876 <exit>
      printf("Image buffer alloc Error!\n");
1c0010c4:	1c00f537          	lui	a0,0x1c00f
1c0010c8:	c9050513          	addi	a0,a0,-880 # 1c00ec90 <__clz_tab+0x1c8>
1c0010cc:	7060c0ef          	jal	ra,1c00d7d2 <puts>
      pmsis_exit(-1);
1c0010d0:	557d                	li	a0,-1
1c0010d2:	7a40c0ef          	jal	ra,1c00d876 <exit>
        }
        printf("\n");
    }
#endif  /* PRINT_IMAGE */

    ResOut = (short int *) AT_L2_ALLOC(0, CLASS_NUM * sizeof(short int));
1c0010d6:	4511                	li	a0,4
1c0010d8:	7520a0ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c0010dc:	1c00f7b7          	lui	a5,0x1c00f
1c0010e0:	56a7a823          	sw	a0,1392(a5) # 1c00f570 <ResOut>
    if (ResOut == NULL)
1c0010e4:	c11d                	beqz	a0,1c00110a <test_model+0xd6>
    }

    /* Configure And open cluster. */
    struct pi_device cluster_dev;
    struct pi_cluster_conf cl_conf;
    cl_conf.id = 0;
1c0010e6:	d802                	sw	zero,48(sp)
    pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c0010e8:	106c                	addi	a1,sp,44
1c0010ea:	00c8                	addi	a0,sp,68
1c0010ec:	613090ef          	jal	ra,1c00aefe <pi_open_from_conf>
    if (pi_cluster_open(&cluster_dev))
1c0010f0:	00c8                	addi	a0,sp,68
1c0010f2:	2540b0ef          	jal	ra,1c00c346 <pi_cluster_open>
1c0010f6:	c505                	beqz	a0,1c00111e <test_model+0xea>
    {
        printf("Cluster open failed !\n");
1c0010f8:	1c00f537          	lui	a0,0x1c00f
1c0010fc:	d2450513          	addi	a0,a0,-732 # 1c00ed24 <__clz_tab+0x25c>
1c001100:	6d20c0ef          	jal	ra,1c00d7d2 <puts>
        pmsis_exit(-4);
1c001104:	5571                	li	a0,-4
1c001106:	7700c0ef          	jal	ra,1c00d876 <exit>
        printf("Failed to allocate Memory for Result (%d bytes)\n", CLASS_NUM *sizeof(short int));
1c00110a:	4591                	li	a1,4
1c00110c:	1c00f537          	lui	a0,0x1c00f
1c001110:	cf050513          	addi	a0,a0,-784 # 1c00ecf0 <__clz_tab+0x228>
1c001114:	0550c0ef          	jal	ra,1c00d968 <printf>
        pmsis_exit(-3);
1c001118:	5575                	li	a0,-3
1c00111a:	75c0c0ef          	jal	ra,1c00d876 <exit>
    }

    printf("Constructor\n");
1c00111e:	1c00f537          	lui	a0,0x1c00f
1c001122:	d3c50513          	addi	a0,a0,-708 # 1c00ed3c <__clz_tab+0x274>
1c001126:	6ac0c0ef          	jal	ra,1c00d7d2 <puts>
    // IMPORTANT - MUST BE CALLED AFTER THE CLUSTER IS SWITCHED ON!!!!
    if (modelCNN_Construct())
1c00112a:	44d030ef          	jal	ra,1c004d76 <modelCNN_Construct>
1c00112e:	c911                	beqz	a0,1c001142 <test_model+0x10e>
    {
        printf("Graph constructor exited with an error\n");
1c001130:	1c00f537          	lui	a0,0x1c00f
1c001134:	d4850513          	addi	a0,a0,-696 # 1c00ed48 <__clz_tab+0x280>
1c001138:	69a0c0ef          	jal	ra,1c00d7d2 <puts>
        pmsis_exit(-5);
1c00113c:	556d                	li	a0,-5
1c00113e:	7380c0ef          	jal	ra,1c00d876 <exit>
    }

    printf("Call cluster\n");
1c001142:	1c00f537          	lui	a0,0x1c00f
1c001146:	d7050513          	addi	a0,a0,-656 # 1c00ed70 <__clz_tab+0x2a8>
1c00114a:	6880c0ef          	jal	ra,1c00d7d2 <puts>
    struct pi_cluster_task task = {0};
1c00114e:	02800613          	li	a2,40
1c001152:	4581                	li	a1,0
1c001154:	0048                	addi	a0,sp,4
1c001156:	4d60c0ef          	jal	ra,1c00d62c <memset>
    task.entry = cluster;
1c00115a:	1c0017b7          	lui	a5,0x1c001
1c00115e:	f7478793          	addi	a5,a5,-140 # 1c000f74 <cluster>
1c001162:	c03e                	sw	a5,0(sp)
    task.arg = NULL;
    task.stack_size = (unsigned int) STACK_SIZE;
1c001164:	6785                	lui	a5,0x1
1c001166:	fbc78793          	addi	a5,a5,-68 # fbc <__rt_stack_size+0x7bc>
1c00116a:	c63e                	sw	a5,12(sp)
    task.slave_stack_size = (unsigned int) SLAVE_STACK_SIZE;
1c00116c:	40000793          	li	a5,1024
1c001170:	c83e                	sw	a5,16(sp)

    pi_cluster_send_task_to_cl(&cluster_dev, &task);
1c001172:	858a                	mv	a1,sp
1c001174:	00c8                	addi	a0,sp,68
1c001176:	5a80b0ef          	jal	ra,1c00c71e <pi_cluster_send_task_to_cl>

    modelCNN_Destruct();
1c00117a:	04d040ef          	jal	ra,1c0059c6 <modelCNN_Destruct>

#ifdef PERF
    {
      unsigned int TotalCycles = 0, TotalOper = 0;
      printf("\n");
1c00117e:	4529                	li	a0,10
1c001180:	6c80c0ef          	jal	ra,1c00d848 <putchar>
1c001184:	1c00f437          	lui	s0,0x1c00f
1c001188:	36440413          	addi	s0,s0,868 # 1c00f364 <AT_GraphNodeNames>
1c00118c:	1c010937          	lui	s2,0x1c010
1c001190:	90490913          	addi	s2,s2,-1788 # 1c00f904 <AT_GraphPerf>
1c001194:	1c00f4b7          	lui	s1,0x1c00f
1c001198:	38048493          	addi	s1,s1,896 # 1c00f380 <AT_GraphOperInfosNames>
1c00119c:	01c40c93          	addi	s9,s0,28
      unsigned int TotalCycles = 0, TotalOper = 0;
1c0011a0:	4b01                	li	s6,0
1c0011a2:	4a81                	li	s5,0
      for (int i=0; i<(sizeof(AT_GraphPerf)/sizeof(unsigned int)); i++) {
        printf("%45s: Cycles: %10d, Operations: %10d, Operations/Cycle: %f\n", AT_GraphNodeNames[i], AT_GraphPerf[i], AT_GraphOperInfosNames[i], ((float) AT_GraphOperInfosNames[i])/ AT_GraphPerf[i]);
1c0011a4:	1c00fc37          	lui	s8,0x1c00f
1c0011a8:	00442b8b          	p.lw	s7,4(s0!)
1c0011ac:	00092983          	lw	s3,0(s2)
1c0011b0:	0004aa03          	lw	s4,0(s1)
1c0011b4:	8552                	mv	a0,s4
1c0011b6:	315d                	jal	1c000e5c <__floatunsisf>
1c0011b8:	8d2a                	mv	s10,a0
1c0011ba:	854e                	mv	a0,s3
1c0011bc:	3145                	jal	1c000e5c <__floatunsisf>
1c0011be:	85aa                	mv	a1,a0
1c0011c0:	856a                	mv	a0,s10
1c0011c2:	3c71                	jal	1c000c5e <__divsf3>
1c0011c4:	3325                	jal	1c000eec <__extendsfdf2>
1c0011c6:	872a                	mv	a4,a0
1c0011c8:	87ae                	mv	a5,a1
1c0011ca:	86d2                	mv	a3,s4
1c0011cc:	864e                	mv	a2,s3
1c0011ce:	85de                	mv	a1,s7
1c0011d0:	d80c0513          	addi	a0,s8,-640 # 1c00ed80 <__clz_tab+0x2b8>
1c0011d4:	7940c0ef          	jal	ra,1c00d968 <printf>
        TotalCycles += AT_GraphPerf[i]; TotalOper += AT_GraphOperInfosNames[i];
1c0011d8:	0049278b          	p.lw	a5,4(s2!)
1c0011dc:	9abe                	add	s5,s5,a5
1c0011de:	0044a78b          	p.lw	a5,4(s1!)
1c0011e2:	9b3e                	add	s6,s6,a5
      for (int i=0; i<(sizeof(AT_GraphPerf)/sizeof(unsigned int)); i++) {
1c0011e4:	fd9412e3          	bne	s0,s9,1c0011a8 <test_model+0x174>
      }
      printf("\n");
1c0011e8:	4529                	li	a0,10
1c0011ea:	65e0c0ef          	jal	ra,1c00d848 <putchar>
      printf("%45s: Cycles: %10d, Operations: %10d, Operations/Cycle: %f\n", "Total", TotalCycles, TotalOper, ((float) TotalOper)/ TotalCycles);
1c0011ee:	855a                	mv	a0,s6
1c0011f0:	31b5                	jal	1c000e5c <__floatunsisf>
1c0011f2:	842a                	mv	s0,a0
1c0011f4:	8556                	mv	a0,s5
1c0011f6:	319d                	jal	1c000e5c <__floatunsisf>
1c0011f8:	85aa                	mv	a1,a0
1c0011fa:	8522                	mv	a0,s0
1c0011fc:	348d                	jal	1c000c5e <__divsf3>
1c0011fe:	31fd                	jal	1c000eec <__extendsfdf2>
1c001200:	872a                	mv	a4,a0
1c001202:	87ae                	mv	a5,a1
1c001204:	86da                	mv	a3,s6
1c001206:	8656                	mv	a2,s5
1c001208:	1c00f5b7          	lui	a1,0x1c00f
1c00120c:	dbc58593          	addi	a1,a1,-580 # 1c00edbc <__clz_tab+0x2f4>
1c001210:	1c00f537          	lui	a0,0x1c00f
1c001214:	d8050513          	addi	a0,a0,-640 # 1c00ed80 <__clz_tab+0x2b8>
1c001218:	7500c0ef          	jal	ra,1c00d968 <printf>
      printf("\n");
1c00121c:	4529                	li	a0,10
1c00121e:	62a0c0ef          	jal	ra,1c00d848 <putchar>
    }
#endif

    // Close the cluster
    pi_cluster_close(&cluster_dev);
1c001222:	00c8                	addi	a0,sp,68
1c001224:	1fa0b0ef          	jal	ra,1c00c41e <pi_cluster_close>

    AT_L2_FREE(0, Img_In, AT_INPUT_SIZE_BYTES);
1c001228:	1c00f437          	lui	s0,0x1c00f
1c00122c:	57040413          	addi	s0,s0,1392 # 1c00f570 <ResOut>
1c001230:	65cd                	lui	a1,0x13
1c001232:	4d058593          	addi	a1,a1,1232 # 134d0 <__L1Cl+0x34d0>
1c001236:	4048                	lw	a0,4(s0)
1c001238:	6000a0ef          	jal	ra,1c00b838 <pi_l2_free>
    AT_L2_FREE(0, ResOut, CLASS_NUM * sizeof(short int));
1c00123c:	4591                	li	a1,4
1c00123e:	4008                	lw	a0,0(s0)
1c001240:	5f80a0ef          	jal	ra,1c00b838 <pi_l2_free>
    printf("Ended\n");
1c001244:	1c00f537          	lui	a0,0x1c00f
1c001248:	dc450513          	addi	a0,a0,-572 # 1c00edc4 <__clz_tab+0x2fc>
1c00124c:	5860c0ef          	jal	ra,1c00d7d2 <puts>

    pmsis_exit(0);
1c001250:	4501                	li	a0,0
1c001252:	6240c0ef          	jal	ra,1c00d876 <exit>

1c001256 <main>:
    return 0;
}

int main()
{
1c001256:	1141                	addi	sp,sp,-16
1c001258:	c606                	sw	ra,12(sp)
    printf("\n\n\t *** NNTOOL model Example ***\n\n");
1c00125a:	1c00f537          	lui	a0,0x1c00f
1c00125e:	c1c50513          	addi	a0,a0,-996 # 1c00ec1c <__clz_tab+0x154>
1c001262:	5700c0ef          	jal	ra,1c00d7d2 <puts>
{
}

static inline int pmsis_kickoff(void *arg)
{
  ((void (*)())arg)();
1c001266:	33f9                	jal	1c001034 <test_model>

1c001268 <S1_Op_input_1_formatter>:
static AT_HYPERFLASH_FS_T HyperFlash;
void S1_Op_input_1_formatter(
		unsigned char * __restrict__ In,
		signed char * __restrict__ Out)

{
1c001268:	714d                	addi	sp,sp,-336
1c00126a:	14112623          	sw	ra,332(sp)
1c00126e:	14812423          	sw	s0,328(sp)
1c001272:	14912223          	sw	s1,324(sp)
1c001276:	15212023          	sw	s2,320(sp)
1c00127a:	13312e23          	sw	s3,316(sp)
1c00127e:	13412c23          	sw	s4,312(sp)
1c001282:	13512a23          	sw	s5,308(sp)
1c001286:	13612823          	sw	s6,304(sp)
1c00128a:	13712623          	sw	s7,300(sp)
1c00128e:	13812423          	sw	s8,296(sp)
1c001292:	13912223          	sw	s9,292(sp)
1c001296:	13a12023          	sw	s10,288(sp)
1c00129a:	11b12e23          	sw	s11,284(sp)
1c00129e:	cc2e                	sw	a1,24(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 7:[324x37, 5:324x37, 324x22], 1]
		Tile0: [0, 11988, 11988], Tile1: [11988, 11988, 11988], Tile2; [23976, 11988, 11988]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->W = (unsigned short int) (324);
1c0012a0:	14400793          	li	a5,324
1c0012a4:	d43e                	sw	a5,40(sp)
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+0), 11988, 0, &DmaR_Evt1);
1c0012a6:	ce2a                	sw	a0,28(sp)
1c0012a8:	100007b7          	lui	a5,0x10000
1c0012ac:	01c7a603          	lw	a2,28(a5) # 1000001c <model_L1_Memory>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0012b0:	300476f3          	csrrci	a3,mstatus,8
#define DMA_WRITE(value, offset) pulp_write32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset), (value))
#define DMA_READ(offset) pulp_read32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset))
#endif

static inline int plp_dma_counter_alloc() {
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0012b4:	00204737          	lui	a4,0x204
1c0012b8:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
#if defined(__riscv__)
  unsigned int res;
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0012bc:	698d                	lui	s3,0x3
1c0012be:	ed498993          	addi	s3,s3,-300 # 2ed4 <__rt_stack_size+0x26d4>
1c0012c2:	000307b7          	lui	a5,0x30
1c0012c6:	de09a7b3          	p.insert	a5,s3,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0012ca:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0012ce:	c157c7b3          	p.bset	a5,a5,0,21
static inline unsigned int plp_dma_getStrides(unsigned short stride, unsigned short len) {
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
}

static inline void plp_dma_cmd_push(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr) {
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0012d2:	002045b7          	lui	a1,0x204
1c0012d6:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0012da:	002047b7          	lui	a5,0x204
1c0012de:	40c7a023          	sw	a2,1024(a5) # 204400 <__L2+0x184400>
#if defined(ARCHI_HAS_MCHAN_64) && ARCHI_HAS_MCHAN_64 == 1
  DMA_WRITE((int)extAddr, PLP_DMA_QUEUE_OFFSET);
  DMA_WRITE((int)(extAddr>>32), PLP_DMA_QUEUE_OFFSET);
#else
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0012e2:	40a7a023          	sw	a0,1024(a5)
        unsigned int cmd = plp_dma_getCmd(dir, size, PLP_DMA_1D, PLP_DMA_TRIG_EVT, PLP_DMA_NO_TRIG_IRQ, PLP_DMA_SHARED);
        // Prevent the compiler from pushing the transfer before all previous
        // stores are done
        __asm__ __volatile__ ("" : : : "memory");
        plp_dma_cmd_push(cmd, loc, ext);
        if (!merge) copy->id = id;
1c0012e6:	d9ba                	sw	a4,240(sp)

        copy->length = 0;
1c0012e8:	10012023          	sw	zero,256(sp)
  __builtin_pulp_spr_write(reg, val);
1c0012ec:	30069073          	csrw	mstatus,a3
	_N_In=0;
	_C_Out=0; _SC_Out=11988;
	_SPP_Out=0; _SP_Out=0;
1c0012f0:	4a81                	li	s5,0
1c0012f2:	c602                	sw	zero,12(sp)
	_N_In=0;
1c0012f4:	4b81                	li	s7,0
	/*============================= End Read Tiles Prolog ===============================*/
	for (T0Ind=0; T0Ind<7; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0012f6:	4901                	li	s2,0
		int T0Ind_Last = (T0Ind==6), T0Ind_NextLast = ((T0Ind+1)==6);
		/*================================= Prepare Tiles ===================================*/
		_SN_In = 0;
		if (!(T0Ind_Last)) {
			_N_In = _N_In + (11988); _SN_In = ((T0Ind_NextLast)?7128:11988); 
1c0012f8:	8a4e                	mv	s4,s3
#endif
  if (copy->length == 0)
  {
    int irq = rt_irq_disable();

    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0012fa:	00204437          	lui	s0,0x204
		}
		/*============================= End Prepare Tiles ===================================*/
		/*================================= Read Tiles ======================================*/
		AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
		if (_SN_In) {
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+11988*((T0Ind_Total+1)%2)),
1c0012fe:	10000cb7          	lui	s9,0x10000
  return evt_read32(barAddr, EU_HW_BARR_TRIGGER_WAIT_CLEAR);
}

static inline void eu_bar_setup_mask(unsigned int barAddr, unsigned int coreMask, unsigned int targetMask)
{
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001302:	20040d13          	addi	s10,s0,512 # 204200 <__L2+0x184200>
		AT_FORK(gap_ncore(), (void *) CNN_NormBW_offset_fps, (void *) KerArg0);
		__CALL(CNN_NormBW_offset_fps, KerArg0);
		/*================================= Write Tiles =====================================*/
		if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+20664+11988*((T0Ind_Total+-1)%2)),
1c001306:	1c00fdb7          	lui	s11,0x1c00f
1c00130a:	6795                	lui	a5,0x5
1c00130c:	0b878793          	addi	a5,a5,184 # 50b8 <__rt_stack_size+0x48b8>
1c001310:	c83e                	sw	a5,16(sp)
1c001312:	ac7d                	j	1c0015d0 <S1_Op_input_1_formatter+0x368>
1c001314:	c45e                	sw	s7,8(sp)
		_SN_In = 0;
1c001316:	4b01                	li	s6,0
1c001318:	a4e1                	j	1c0015e0 <S1_Op_input_1_formatter+0x378>
			_N_In = _N_In + (11988); _SN_In = ((T0Ind_NextLast)?7128:11988); 
1c00131a:	6b09                	lui	s6,0x2
1c00131c:	bd8b0b13          	addi	s6,s6,-1064 # 1bd8 <__rt_stack_size+0x13d8>
1c001320:	a4c1                	j	1c0015e0 <S1_Op_input_1_formatter+0x378>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001322:	300476f3          	csrrci	a3,mstatus,8
1c001326:	40442783          	lw	a5,1028(s0)
1c00132a:	574e                	lw	a4,240(sp)
1c00132c:	40e7d7b3          	sra	a5,a5,a4
1c001330:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001334:	c78d                	beqz	a5,1c00135e <S1_Op_input_1_formatter+0xf6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001336:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c00133a:	30069073          	csrw	mstatus,a3
1c00133e:	00c42423          	sw	a2,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001342:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001346:	00c42223          	sw	a2,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00134a:	300476f3          	csrrci	a3,mstatus,8
1c00134e:	40442783          	lw	a5,1028(s0)
1c001352:	574e                	lw	a4,240(sp)
1c001354:	40e7d7b3          	sra	a5,a5,a4
1c001358:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00135c:	fff9                	bnez	a5,1c00133a <S1_Op_input_1_formatter+0xd2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00135e:	4785                	li	a5,1
1c001360:	00e79733          	sll	a4,a5,a4
1c001364:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c001368:	30069073          	csrw	mstatus,a3
		if (_SN_In) {
1c00136c:	080b1f63          	bnez	s6,1c00140a <S1_Op_input_1_formatter+0x1a2>
		KerArg0->In = (unsigned char *__restrict__) (model_L1_Memory+0+11988*((T0Ind_Total)%2));
1c001370:	01cca783          	lw	a5,28(s9) # 1000001c <model_L1_Memory>
1c001374:	01f95713          	srli	a4,s2,0x1f
1c001378:	00e904b3          	add	s1,s2,a4
1c00137c:	fc14b4b3          	p.bclr	s1,s1,30,1
1c001380:	8c99                	sub	s1,s1,a4
1c001382:	034484b3          	mul	s1,s1,s4
1c001386:	00978733          	add	a4,a5,s1
1c00138a:	d03a                	sw	a4,32(sp)
		KerArg0->Out = (signed char *__restrict__) (model_L1_Memory+23976+11988*((T0Ind_Total)%2));
1c00138c:	6819                	lui	a6,0x6
1c00138e:	da880813          	addi	a6,a6,-600 # 5da8 <__rt_stack_size+0x55a8>
1c001392:	01048c33          	add	s8,s1,a6
1c001396:	97e2                	add	a5,a5,s8
1c001398:	d23e                	sw	a5,36(sp)
		KerArg0->H = (unsigned short int) (T0Ind_Last?22:37);
1c00139a:	12692c63          	p.beqimm	s2,6,1c0014d2 <S1_Op_input_1_formatter+0x26a>
1c00139e:	02500793          	li	a5,37
1c0013a2:	d63e                	sw	a5,44(sp)
  IP_WRITE_PTR(base, EU_DISPATCH_FIFO_ACCESS, value);
}

static inline void eu_dispatch_team_config(unsigned value)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0013a4:	0ff00793          	li	a5,255
1c0013a8:	08f42223          	sw	a5,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0013ac:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0013b0:	00204537          	lui	a0,0x204
1c0013b4:	20050513          	addi	a0,a0,512 # 204200 <__L2+0x184200>
1c0013b8:	00f52623          	sw	a5,12(a0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0013bc:	1c008737          	lui	a4,0x1c008
1c0013c0:	7d070713          	addi	a4,a4,2000 # 1c0087d0 <CNN_NormBW_offset_fps>
1c0013c4:	08e42023          	sw	a4,128(s0)
1c0013c8:	1008                	addi	a0,sp,32
1c0013ca:	08a42023          	sw	a0,128(s0)
#endif

  if (nb_cores) __rt_team_config(nb_cores);
  eu_dispatch_push((int)entry);
  eu_dispatch_push((int)arg);
  entry(arg);
1c0013ce:	402070ef          	jal	ra,1c0087d0 <CNN_NormBW_offset_fps>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0013d2:	01cd6783          	p.elw	a5,28(s10)
		if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c0013d6:	100a9063          	bnez	s5,1c0014d6 <S1_Op_input_1_formatter+0x26e>
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c0013da:	4732                	lw	a4,12(sp)
1c0013dc:	18070f63          	beqz	a4,1c00157a <S1_Op_input_1_formatter+0x312>

#ifdef ARCHI_HAS_CLUSTER

static inline void cl_wait_task(unsigned char *done)
{
    while ((*(volatile char *)done) == 0)
1c0013e0:	0cc14783          	lbu	a5,204(sp)
1c0013e4:	0ff7f793          	andi	a5,a5,255
1c0013e8:	18079963          	bnez	a5,1c00157a <S1_Op_input_1_formatter+0x312>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0013ec:	4709                	li	a4,2
1c0013ee:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0013f2:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0013f6:	00e42223          	sw	a4,4(s0)
1c0013fa:	0cc14783          	lbu	a5,204(sp)
1c0013fe:	0ff7f793          	andi	a5,a5,255
1c001402:	d7f5                	beqz	a5,1c0013ee <S1_Op_input_1_formatter+0x186>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+20664+11988*((T0Ind_Total+-1)%2)),
1c001404:	160a8b63          	beqz	s5,1c00157a <S1_Op_input_1_formatter+0x312>
1c001408:	aa35                	j	1c001544 <S1_Op_input_1_formatter+0x2dc>
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+11988*((T0Ind_Total+1)%2)),
1c00140a:	4772                	lw	a4,28(sp)
1c00140c:	47a2                	lw	a5,8(sp)
1c00140e:	00f706b3          	add	a3,a4,a5
1c001412:	00190793          	addi	a5,s2,1
1c001416:	01f7d713          	srli	a4,a5,0x1f
1c00141a:	97ba                	add	a5,a5,a4
1c00141c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001420:	8f99                	sub	a5,a5,a4
1c001422:	01cca703          	lw	a4,28(s9)
1c001426:	43478733          	p.mac	a4,a5,s4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00142a:	30047673          	csrrci	a2,mstatus,8
    if (size < max_len)
1c00142e:	020b4863          	bltz	s6,1c00145e <S1_Op_input_1_formatter+0x1f6>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001432:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c001436:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00143a:	de0b27b3          	p.insert	a5,s6,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00143e:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001442:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001446:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00144a:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00144e:	40d42023          	sw	a3,1024(s0)
        if (!merge) copy->id = id;
1c001452:	d9ae                	sw	a1,240(sp)
        copy->length = 0;
1c001454:	10012023          	sw	zero,256(sp)
  __builtin_pulp_spr_write(reg, val);
1c001458:	30061073          	csrw	mstatus,a2
1c00145c:	bf11                	j	1c001370 <S1_Op_input_1_formatter+0x108>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00145e:	67a1                	lui	a5,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001460:	003305b7          	lui	a1,0x330
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c001464:	dbae                	sw	a1,244(sp)
    cmd->loc_addr = loc;
1c001466:	10e12223          	sw	a4,260(sp)
    cmd->ext_addr = ext;
1c00146a:	10d12423          	sw	a3,264(sp)
    cmd->size = len;
1c00146e:	ddda                	sw	s6,248(sp)
    cmd->stride = stride;
1c001470:	dfbe                	sw	a5,252(sp)
    cmd->length = length;
1c001472:	10f12023          	sw	a5,256(sp)
    cmd->id = tid;
1c001476:	57fd                	li	a5,-1
1c001478:	d9be                	sw	a5,240(sp)
    cmd->next = NULL;
1c00147a:	10012623          	sw	zero,268(sp)
    if (__rt_dma_first_pending)
1c00147e:	01402783          	lw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c001482:	cb89                	beqz	a5,1c001494 <S1_Op_input_1_formatter+0x22c>
        __rt_dma_last_pending->next = cmd;
1c001484:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c001488:	1998                	addi	a4,sp,240
1c00148a:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c00148c:	199c                	addi	a5,sp,240
1c00148e:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c001492:	b7d9                	j	1c001458 <S1_Op_input_1_formatter+0x1f0>
    uint32_t iter_length = (len < length) ? len : length;
1c001494:	65a1                	lui	a1,0x8
1c001496:	04bb57b3          	p.minu	a5,s6,a1
        cmd->loc_addr += iter_length;
1c00149a:	00f70533          	add	a0,a4,a5
1c00149e:	10a12223          	sw	a0,260(sp)
        cmd->ext_addr += stride;
1c0014a2:	95b6                	add	a1,a1,a3
1c0014a4:	10b12423          	sw	a1,264(sp)
        cmd->size -= iter_length;
1c0014a8:	40fb07b3          	sub	a5,s6,a5
1c0014ac:	ddbe                	sw	a5,248(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0014ae:	40042783          	lw	a5,1024(s0)
        cmd->id = plp_dma_counter_alloc();
1c0014b2:	d9be                	sw	a5,240(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0014b4:	003387b7          	lui	a5,0x338
1c0014b8:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0014bc:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0014c0:	40d42023          	sw	a3,1024(s0)
        if (cmd->length != 0)
1c0014c4:	10012783          	lw	a5,256(sp)
1c0014c8:	d3f1                	beqz	a5,1c00148c <S1_Op_input_1_formatter+0x224>
            __rt_dma_first_pending = cmd;
1c0014ca:	199c                	addi	a5,sp,240
1c0014cc:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0014d0:	bf75                	j	1c00148c <S1_Op_input_1_formatter+0x224>
		KerArg0->H = (unsigned short int) (T0Ind_Last?22:37);
1c0014d2:	47d9                	li	a5,22
1c0014d4:	b5f9                	j	1c0013a2 <S1_Op_input_1_formatter+0x13a>
  if (copy->length == 0)
1c0014d6:	578e                	lw	a5,224(sp)
1c0014d8:	cf91                	beqz	a5,1c0014f4 <S1_Op_input_1_formatter+0x28c>

    rt_irq_restore(irq);
  }
  else
  {
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0014da:	572e                	lw	a4,232(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0014dc:	02000793          	li	a5,32
1c0014e0:	cf39                	beqz	a4,1c00153e <S1_Op_input_1_formatter+0x2d6>
1c0014e2:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0014e6:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0014ea:	00f42223          	sw	a5,4(s0)
1c0014ee:	572e                	lw	a4,232(sp)
1c0014f0:	fb6d                	bnez	a4,1c0014e2 <S1_Op_input_1_formatter+0x27a>
1c0014f2:	a0b1                	j	1c00153e <S1_Op_input_1_formatter+0x2d6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0014f4:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0014f8:	40442783          	lw	a5,1028(s0)
1c0014fc:	474e                	lw	a4,208(sp)
1c0014fe:	40e7d7b3          	sra	a5,a5,a4
1c001502:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001506:	c78d                	beqz	a5,1c001530 <S1_Op_input_1_formatter+0x2c8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001508:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c00150c:	30069073          	csrw	mstatus,a3
1c001510:	00c42423          	sw	a2,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001514:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001518:	00c42223          	sw	a2,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00151c:	300476f3          	csrrci	a3,mstatus,8
1c001520:	40442783          	lw	a5,1028(s0)
1c001524:	474e                	lw	a4,208(sp)
1c001526:	40e7d7b3          	sra	a5,a5,a4
1c00152a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00152e:	fff9                	bnez	a5,1c00150c <S1_Op_input_1_formatter+0x2a4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001530:	4785                	li	a5,1
1c001532:	00e79733          	sll	a4,a5,a4
1c001536:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c00153a:	30069073          	csrw	mstatus,a3
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c00153e:	47b2                	lw	a5,12(sp)
1c001540:	24079e63          	bnez	a5,1c00179c <S1_Op_input_1_formatter+0x534>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+20664+11988*((T0Ind_Total+-1)%2)),
1c001544:	fff90793          	addi	a5,s2,-1
1c001548:	01f7d713          	srli	a4,a5,0x1f
1c00154c:	97ba                	add	a5,a5,a4
1c00154e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001552:	8f99                	sub	a5,a5,a4
1c001554:	4642                	lw	a2,16(sp)
1c001556:	43478633          	p.mac	a2,a5,s4
1c00155a:	578da583          	lw	a1,1400(s11) # 1c00f578 <model_L2_Memory>
1c00155e:	181c                	addi	a5,sp,48
1c001560:	4701                	li	a4,0
1c001562:	86d6                	mv	a3,s5
1c001564:	962e                	add	a2,a2,a1
1c001566:	4862                	lw	a6,24(sp)
1c001568:	4552                	lw	a0,20(sp)
1c00156a:	00a805b3          	add	a1,a6,a0
1c00156e:	1c00f537          	lui	a0,0x1c00f
1c001572:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c001576:	77e080ef          	jal	ra,1c009cf4 <pi_cl_ram_copy>
					_SP_Out, 1, &UchanHR1);
		AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+20664+11988*((T0Ind_Total)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+23976+11988*((T0Ind_Total)%2)),
1c00157a:	578da783          	lw	a5,1400(s11)
1c00157e:	94be                	add	s1,s1,a5
1c001580:	47c2                	lw	a5,16(sp)
1c001582:	00f48733          	add	a4,s1,a5
1c001586:	01cca783          	lw	a5,28(s9)
1c00158a:	9c3e                	add	s8,s8,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00158c:	300476f3          	csrrci	a3,mstatus,8
    if (size < max_len)
1c001590:	01099813          	slli	a6,s3,0x10
1c001594:	06084a63          	bltz	a6,1c001608 <S1_Op_input_1_formatter+0x3a0>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001598:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00159c:	000207b7          	lui	a5,0x20
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0015a0:	de09a7b3          	p.insert	a5,s3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0015a4:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0015a8:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0015ac:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0015b0:	41842023          	sw	s8,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0015b4:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c0015b8:	c9b2                	sw	a2,208(sp)
        copy->length = 0;
1c0015ba:	d182                	sw	zero,224(sp)
  __builtin_pulp_spr_write(reg, val);
1c0015bc:	30069073          	csrw	mstatus,a3
	for (T0Ind=0; T0Ind<7; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0015c0:	0905                	addi	s2,s2,1
1c0015c2:	ca5e                	sw	s7,20(sp)
1c0015c4:	c656                	sw	s5,12(sp)
1c0015c6:	0a792763          	p.beqimm	s2,7,1c001674 <S1_Op_input_1_formatter+0x40c>
1c0015ca:	8ace                	mv	s5,s3
1c0015cc:	89da                	mv	s3,s6
1c0015ce:	4ba2                	lw	s7,8(sp)
		if (!(T0Ind_Last)) {
1c0015d0:	d46922e3          	p.beqimm	s2,6,1c001314 <S1_Op_input_1_formatter+0xac>
			_N_In = _N_In + (11988); _SN_In = ((T0Ind_NextLast)?7128:11988); 
1c0015d4:	014b8533          	add	a0,s7,s4
1c0015d8:	c42a                	sw	a0,8(sp)
1c0015da:	d45920e3          	p.beqimm	s2,5,1c00131a <S1_Op_input_1_formatter+0xb2>
1c0015de:	8b52                	mv	s6,s4
  if (copy->length == 0)
1c0015e0:	10012783          	lw	a5,256(sp)
1c0015e4:	d2078fe3          	beqz	a5,1c001322 <S1_Op_input_1_formatter+0xba>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0015e8:	10812703          	lw	a4,264(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0015ec:	02000793          	li	a5,32
1c0015f0:	d6070ee3          	beqz	a4,1c00136c <S1_Op_input_1_formatter+0x104>
1c0015f4:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0015f8:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0015fc:	00f42223          	sw	a5,4(s0)
1c001600:	10812703          	lw	a4,264(sp)
1c001604:	fb65                	bnez	a4,1c0015f4 <S1_Op_input_1_formatter+0x38c>
1c001606:	b39d                	j	1c00136c <S1_Op_input_1_formatter+0x104>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001608:	67a1                	lui	a5,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00160a:	00320637          	lui	a2,0x320
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c00160e:	cbb2                	sw	a2,212(sp)
    cmd->loc_addr = loc;
1c001610:	d3e2                	sw	s8,228(sp)
    cmd->ext_addr = ext;
1c001612:	d5ba                	sw	a4,232(sp)
    cmd->size = len;
1c001614:	cdce                	sw	s3,216(sp)
    cmd->stride = stride;
1c001616:	cfbe                	sw	a5,220(sp)
    cmd->length = length;
1c001618:	d1be                	sw	a5,224(sp)
    cmd->id = tid;
1c00161a:	57fd                	li	a5,-1
1c00161c:	c9be                	sw	a5,208(sp)
    cmd->next = NULL;
1c00161e:	d782                	sw	zero,236(sp)
    if (__rt_dma_first_pending)
1c001620:	01402783          	lw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c001624:	cb89                	beqz	a5,1c001636 <S1_Op_input_1_formatter+0x3ce>
        __rt_dma_last_pending->next = cmd;
1c001626:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00162a:	0998                	addi	a4,sp,208
1c00162c:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c00162e:	099c                	addi	a5,sp,208
1c001630:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c001634:	b761                	j	1c0015bc <S1_Op_input_1_formatter+0x354>
    uint32_t iter_length = (len < length) ? len : length;
1c001636:	67a1                	lui	a5,0x8
1c001638:	04f9d7b3          	p.minu	a5,s3,a5
        cmd->loc_addr += iter_length;
1c00163c:	00fc0633          	add	a2,s8,a5
1c001640:	d3b2                	sw	a2,228(sp)
        cmd->ext_addr += stride;
1c001642:	6635                	lui	a2,0xd
1c001644:	0b860613          	addi	a2,a2,184 # d0b8 <__rt_stack_size+0xc8b8>
1c001648:	94b2                	add	s1,s1,a2
1c00164a:	d5a6                	sw	s1,232(sp)
        cmd->size -= iter_length;
1c00164c:	40f987b3          	sub	a5,s3,a5
1c001650:	cdbe                	sw	a5,216(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001652:	40042783          	lw	a5,1024(s0)
        cmd->id = plp_dma_counter_alloc();
1c001656:	c9be                	sw	a5,208(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001658:	003287b7          	lui	a5,0x328
1c00165c:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001660:	41842023          	sw	s8,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001664:	40e42023          	sw	a4,1024(s0)
        if (cmd->length != 0)
1c001668:	578e                	lw	a5,224(sp)
1c00166a:	d3f1                	beqz	a5,1c00162e <S1_Op_input_1_formatter+0x3c6>
            __rt_dma_first_pending = cmd;
1c00166c:	099c                	addi	a5,sp,208
1c00166e:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c001672:	bf75                	j	1c00162e <S1_Op_input_1_formatter+0x3c6>
  if (copy->length == 0)
1c001674:	578e                	lw	a5,224(sp)
1c001676:	c385                	beqz	a5,1c001696 <S1_Op_input_1_formatter+0x42e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001678:	56ae                	lw	a3,232(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00167a:	02000713          	li	a4,32
1c00167e:	002047b7          	lui	a5,0x204
1c001682:	c6ad                	beqz	a3,1c0016ec <S1_Op_input_1_formatter+0x484>
1c001684:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001688:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00168c:	00e7a223          	sw	a4,4(a5)
1c001690:	56ae                	lw	a3,232(sp)
1c001692:	faed                	bnez	a3,1c001684 <S1_Op_input_1_formatter+0x41c>
1c001694:	a8a1                	j	1c0016ec <S1_Op_input_1_formatter+0x484>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001696:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00169a:	002047b7          	lui	a5,0x204
1c00169e:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0016a2:	46ce                	lw	a3,208(sp)
1c0016a4:	40d7d7b3          	sra	a5,a5,a3
1c0016a8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0016ac:	c79d                	beqz	a5,1c0016da <S1_Op_input_1_formatter+0x472>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0016ae:	10000593          	li	a1,256
1c0016b2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0016b6:	30061073          	csrw	mstatus,a2
1c0016ba:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0016be:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0016c2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0016c6:	30047673          	csrrci	a2,mstatus,8
1c0016ca:	40472783          	lw	a5,1028(a4)
1c0016ce:	46ce                	lw	a3,208(sp)
1c0016d0:	40d7d7b3          	sra	a5,a5,a3
1c0016d4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0016d8:	fff9                	bnez	a5,1c0016b6 <S1_Op_input_1_formatter+0x44e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0016da:	4785                	li	a5,1
1c0016dc:	00d796b3          	sll	a3,a5,a3
1c0016e0:	002047b7          	lui	a5,0x204
1c0016e4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0016e8:	30061073          	csrw	mstatus,a2
		}
		/*============================= End Prepare Tiles ===================================*/
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c0016ec:	020a8563          	beqz	s5,1c001716 <S1_Op_input_1_formatter+0x4ae>
1c0016f0:	0cc14783          	lbu	a5,204(sp)
1c0016f4:	0ff7f793          	andi	a5,a5,255
1c0016f8:	ef99                	bnez	a5,1c001716 <S1_Op_input_1_formatter+0x4ae>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0016fa:	4689                	li	a3,2
1c0016fc:	00204737          	lui	a4,0x204
1c001700:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001704:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001708:	00d72223          	sw	a3,4(a4)
1c00170c:	0cc14783          	lbu	a5,204(sp)
1c001710:	0ff7f793          	andi	a5,a5,255
1c001714:	d7f5                	beqz	a5,1c001700 <S1_Op_input_1_formatter+0x498>
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+20664+11988*((T0Ind_Total+-1)%2)), _SP_Out, 1, &UchanHR1);
1c001716:	1c00f7b7          	lui	a5,0x1c00f
1c00171a:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
1c00171e:	181c                	addi	a5,sp,48
1c001720:	4701                	li	a4,0
1c001722:	86ce                	mv	a3,s3
1c001724:	6615                	lui	a2,0x5
1c001726:	0b860613          	addi	a2,a2,184 # 50b8 <__rt_stack_size+0x48b8>
1c00172a:	962e                	add	a2,a2,a1
1c00172c:	4562                	lw	a0,24(sp)
1c00172e:	017505b3          	add	a1,a0,s7
1c001732:	1c00f537          	lui	a0,0x1c00f
1c001736:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c00173a:	5ba080ef          	jal	ra,1c009cf4 <pi_cl_ram_copy>
1c00173e:	0cc14783          	lbu	a5,204(sp)
1c001742:	0ff7f793          	andi	a5,a5,255
1c001746:	ef99                	bnez	a5,1c001764 <S1_Op_input_1_formatter+0x4fc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001748:	4689                	li	a3,2
1c00174a:	00204737          	lui	a4,0x204
1c00174e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001752:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001756:	00d72223          	sw	a3,4(a4)
1c00175a:	0cc14783          	lbu	a5,204(sp)
1c00175e:	0ff7f793          	andi	a5,a5,255
1c001762:	d7f5                	beqz	a5,1c00174e <S1_Op_input_1_formatter+0x4e6>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait current uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c001764:	14c12083          	lw	ra,332(sp)
1c001768:	14812403          	lw	s0,328(sp)
1c00176c:	14412483          	lw	s1,324(sp)
1c001770:	14012903          	lw	s2,320(sp)
1c001774:	13c12983          	lw	s3,316(sp)
1c001778:	13812a03          	lw	s4,312(sp)
1c00177c:	13412a83          	lw	s5,308(sp)
1c001780:	13012b03          	lw	s6,304(sp)
1c001784:	12c12b83          	lw	s7,300(sp)
1c001788:	12812c03          	lw	s8,296(sp)
1c00178c:	12412c83          	lw	s9,292(sp)
1c001790:	12012d03          	lw	s10,288(sp)
1c001794:	11c12d83          	lw	s11,284(sp)
1c001798:	6171                	addi	sp,sp,336
1c00179a:	8082                	ret
1c00179c:	0cc14783          	lbu	a5,204(sp)
1c0017a0:	0ff7f793          	andi	a5,a5,255
1c0017a4:	c40784e3          	beqz	a5,1c0013ec <S1_Op_input_1_formatter+0x184>
1c0017a8:	bb71                	j	1c001544 <S1_Op_input_1_formatter+0x2dc>

1c0017aa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c0017aa:	d7010113          	addi	sp,sp,-656
1c0017ae:	28112623          	sw	ra,652(sp)
1c0017b2:	28812423          	sw	s0,648(sp)
1c0017b6:	28912223          	sw	s1,644(sp)
1c0017ba:	29212023          	sw	s2,640(sp)
1c0017be:	27312e23          	sw	s3,636(sp)
1c0017c2:	27412c23          	sw	s4,632(sp)
1c0017c6:	27512a23          	sw	s5,628(sp)
1c0017ca:	27612823          	sw	s6,624(sp)
1c0017ce:	27712623          	sw	s7,620(sp)
1c0017d2:	27812423          	sw	s8,616(sp)
1c0017d6:	27912223          	sw	s9,612(sp)
1c0017da:	27a12023          	sw	s10,608(sp)
1c0017de:	25b12e23          	sw	s11,604(sp)
1c0017e2:	842a                	mv	s0,a0
1c0017e4:	d036                	sw	a3,32(sp)
1c0017e6:	84c2                	mv	s1,a6
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 60:[9x1, 58:9x1, 9x1], 1]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (model_L1_Memory+7704);
1c0017e8:	100006b7          	lui	a3,0x10000
1c0017ec:	01c6a803          	lw	a6,28(a3) # 1000001c <model_L1_Memory>
1c0017f0:	6689                	lui	a3,0x2
1c0017f2:	e1868693          	addi	a3,a3,-488 # 1e18 <__rt_stack_size+0x1618>
1c0017f6:	96c2                	add	a3,a3,a6
1c0017f8:	df36                	sw	a3,188(sp)
	KerArg0->W = (unsigned short int) (160);
1c0017fa:	0a000313          	li	t1,160
1c0017fe:	0c611023          	sh	t1,192(sp)
	KerArg0->H = (unsigned short int) (2);
1c001802:	4889                	li	a7,2
1c001804:	0d111123          	sh	a7,194(sp)
	KerArg1->W = (unsigned short int) (324);
1c001808:	14400513          	li	a0,324
1c00180c:	08a11823          	sh	a0,144(sp)
	KerArg1->UsedW = (unsigned short int) (321);
1c001810:	14100513          	li	a0,321
1c001814:	08a11923          	sh	a0,146(sp)
	KerArg1->H = (unsigned short int) (5);
1c001818:	4515                	li	a0,5
1c00181a:	08a11a23          	sh	a0,148(sp)
	KerArg1->UsedH = (unsigned short int) (5);
1c00181e:	08a11b23          	sh	a0,150(sp)
	KerArg1->InFeatures = (unsigned short int) (1);
1c001822:	4e05                	li	t3,1
1c001824:	09c11c23          	sh	t3,152(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (1);
1c001828:	09c11e23          	sh	t3,156(sp)
	KerArg1->Out = (int * __restrict__) (model_L1_Memory+7704);
1c00182c:	d536                	sw	a3,168(sp)
	KerArg1->Pad = (v4s) 0;
1c00182e:	00007557          	pv.add.sci.b	a0,zero,0
1c001832:	d72a                	sw	a0,172(sp)
	KerArg2->In = (int *__restrict__) (model_L1_Memory+7704);
1c001834:	d8b6                	sw	a3,112(sp)
	KerArg2->Out = (void *__restrict__) (model_L1_Memory+7704);
1c001836:	dab6                	sw	a3,116(sp)
	KerArg2->W = (unsigned short int) (160);
1c001838:	06611d23          	sh	t1,122(sp)
	KerArg2->H = (unsigned short int) (2);
1c00183c:	07111e23          	sh	a7,124(sp)
	KerArg2->Infos = (signed char *__restrict__) (model_L1_Memory+38424);
1c001840:	6525                	lui	a0,0x9
1c001842:	61850513          	addi	a0,a0,1560 # 9618 <__rt_stack_size+0x8e18>
1c001846:	9542                	add	a0,a0,a6
1c001848:	c52a                	sw	a0,136(sp)
	KerArg3->In = (signed char * __restrict__) (model_L1_Memory+7704);
1c00184a:	c4b6                	sw	a3,72(sp)
	KerArg3->W = (unsigned short int) (160);
1c00184c:	04611923          	sh	t1,82(sp)
	KerArg3->UsedW = (unsigned short int) (160);
1c001850:	04611a23          	sh	t1,84(sp)
	KerArg3->H = (unsigned short int) (2);
1c001854:	05111b23          	sh	a7,86(sp)
	KerArg3->UsedH = (unsigned short int) (2);
1c001858:	05111c23          	sh	a7,88(sp)
	KerArg3->Pad = (v4s) 0;
1c00185c:	000076d7          	pv.add.sci.b	a3,zero,0
1c001860:	d4b6                	sw	a3,104(sp)
	KerArg3->PoolMax = (unsigned char) (1);
1c001862:	05c10d23          	sb	t3,90(sp)
	KerArg3->DoScale = (unsigned char) (0);
1c001866:	060102a3          	sb	zero,101(sp)
	KerArg3->Infos = (signed char * __restrict__) (model_L1_Memory+38424);
1c00186a:	d6aa                	sw	a0,108(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00186c:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001870:	00204537          	lui	a0,0x204
1c001874:	40052503          	lw	a0,1024(a0) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001878:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00187c:	08068693          	addi	a3,a3,128 # b0080 <__L2+0x30080>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001880:	c156c6b3          	p.bset	a3,a3,0,21
1c001884:	00204337          	lui	t1,0x204
1c001888:	40d32023          	sw	a3,1024(t1) # 204400 <__L2+0x184400>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=1920; _LC_Out=80;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3240), 128, 0, &DmaR_Evt1);
1c00188c:	6685                	lui	a3,0x1
1c00188e:	ca868693          	addi	a3,a3,-856 # ca8 <__rt_stack_size+0x4a8>
1c001892:	9836                	add	a6,a6,a3
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001894:	002046b7          	lui	a3,0x204
1c001898:	4106a023          	sw	a6,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00189c:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c0018a0:	22a12823          	sw	a0,560(sp)
        copy->length = 0;
1c0018a4:	24012023          	sw	zero,576(sp)
  __builtin_pulp_spr_write(reg, val);
1c0018a8:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c0018ac:	24012683          	lw	a3,576(sp)
1c0018b0:	c295                	beqz	a3,1c0018d4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x12a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0018b2:	24812503          	lw	a0,584(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0018b6:	02000613          	li	a2,32
1c0018ba:	002046b7          	lui	a3,0x204
1c0018be:	c925                	beqz	a0,1c00192e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x184>
1c0018c0:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0018c4:	03c6e503          	p.elw	a0,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0018c8:	00c6a223          	sw	a2,4(a3)
1c0018cc:	24812503          	lw	a0,584(sp)
1c0018d0:	f965                	bnez	a0,1c0018c0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x116>
1c0018d2:	a8b1                	j	1c00192e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x184>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0018d4:	30047873          	csrrci	a6,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0018d8:	002046b7          	lui	a3,0x204
1c0018dc:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c0018e0:	23012503          	lw	a0,560(sp)
1c0018e4:	40a6d6b3          	sra	a3,a3,a0
1c0018e8:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0018ec:	ca85                	beqz	a3,1c00191c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x172>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0018ee:	10000893          	li	a7,256
1c0018f2:	00204637          	lui	a2,0x204
  __builtin_pulp_spr_write(reg, val);
1c0018f6:	30081073          	csrw	mstatus,a6
1c0018fa:	01162423          	sw	a7,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0018fe:	03c66683          	p.elw	a3,60(a2)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001902:	01162223          	sw	a7,4(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001906:	30047873          	csrrci	a6,mstatus,8
1c00190a:	40462683          	lw	a3,1028(a2)
1c00190e:	23012503          	lw	a0,560(sp)
1c001912:	40a6d6b3          	sra	a3,a3,a0
1c001916:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00191a:	fef1                	bnez	a3,1c0018f6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x14c>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00191c:	4685                	li	a3,1
1c00191e:	00a69533          	sll	a0,a3,a0
1c001922:	002046b7          	lui	a3,0x204
1c001926:	40a6a223          	sw	a0,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00192a:	30081073          	csrw	mstatus,a6
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3368), 32, 0, &DmaR_Evt2);
1c00192e:	100006b7          	lui	a3,0x10000
1c001932:	01c6a503          	lw	a0,28(a3) # 1000001c <model_L1_Memory>
1c001936:	6685                	lui	a3,0x1
1c001938:	d2868693          	addi	a3,a3,-728 # d28 <__rt_stack_size+0x528>
1c00193c:	9536                	add	a0,a0,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00193e:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001942:	00204637          	lui	a2,0x204
1c001946:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00194a:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00194e:	02068693          	addi	a3,a3,32 # b0020 <__L2+0x30020>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001952:	c156c6b3          	p.bset	a3,a3,0,21
1c001956:	002048b7          	lui	a7,0x204
1c00195a:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00195e:	002046b7          	lui	a3,0x204
1c001962:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001966:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c00196a:	20c12823          	sw	a2,528(sp)
        copy->length = 0;
1c00196e:	22012023          	sw	zero,544(sp)
  __builtin_pulp_spr_write(reg, val);
1c001972:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c001976:	22012703          	lw	a4,544(sp)
1c00197a:	c315                	beqz	a4,1c00199e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x1f4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00197c:	22812603          	lw	a2,552(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001980:	02000693          	li	a3,32
1c001984:	00204737          	lui	a4,0x204
1c001988:	ca25                	beqz	a2,1c0019f8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x24e>
1c00198a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00198e:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001992:	00d72223          	sw	a3,4(a4)
1c001996:	22812603          	lw	a2,552(sp)
1c00199a:	fa65                	bnez	a2,1c00198a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x1e0>
1c00199c:	a8b1                	j	1c0019f8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x24e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00199e:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0019a2:	00204737          	lui	a4,0x204
1c0019a6:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c0019aa:	21012603          	lw	a2,528(sp)
1c0019ae:	40c75733          	sra	a4,a4,a2
1c0019b2:	fc173733          	p.bclr	a4,a4,30,1
1c0019b6:	cb05                	beqz	a4,1c0019e6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x23c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0019b8:	10000813          	li	a6,256
1c0019bc:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0019c0:	30051073          	csrw	mstatus,a0
1c0019c4:	0106a423          	sw	a6,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0019c8:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0019cc:	0106a223          	sw	a6,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0019d0:	30047573          	csrrci	a0,mstatus,8
1c0019d4:	4046a703          	lw	a4,1028(a3)
1c0019d8:	21012603          	lw	a2,528(sp)
1c0019dc:	40c75733          	sra	a4,a4,a2
1c0019e0:	fc173733          	p.bclr	a4,a4,30,1
1c0019e4:	ff71                	bnez	a4,1c0019c0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x216>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0019e6:	4705                	li	a4,1
1c0019e8:	00c71633          	sll	a2,a4,a2
1c0019ec:	00204737          	lui	a4,0x204
1c0019f0:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0019f4:	30051073          	csrw	mstatus,a0
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3400), 32, 0, &DmaR_Evt3);
1c0019f8:	10000737          	lui	a4,0x10000
1c0019fc:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c001a00:	6705                	lui	a4,0x1
1c001a02:	d4870713          	addi	a4,a4,-696 # d48 <__rt_stack_size+0x548>
1c001a06:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a08:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001a0c:	002046b7          	lui	a3,0x204
1c001a10:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001a14:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001a18:	02070713          	addi	a4,a4,32 # b0020 <__L2+0x30020>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001a1c:	c1574733          	p.bset	a4,a4,0,21
1c001a20:	00204837          	lui	a6,0x204
1c001a24:	40e82023          	sw	a4,1024(a6) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001a28:	00204737          	lui	a4,0x204
1c001a2c:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001a30:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c001a34:	1ed12823          	sw	a3,496(sp)
        copy->length = 0;
1c001a38:	20012023          	sw	zero,512(sp)
  __builtin_pulp_spr_write(reg, val);
1c001a3c:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c001a40:	20012783          	lw	a5,512(sp)
1c001a44:	c395                	beqz	a5,1c001a68 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2be>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001a46:	20812683          	lw	a3,520(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a4a:	02000713          	li	a4,32
1c001a4e:	002047b7          	lui	a5,0x204
1c001a52:	caa5                	beqz	a3,1c001ac2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x318>
1c001a54:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a58:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001a5c:	00e7a223          	sw	a4,4(a5)
1c001a60:	20812683          	lw	a3,520(sp)
1c001a64:	fae5                	bnez	a3,1c001a54 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2aa>
1c001a66:	a8b1                	j	1c001ac2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x318>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a68:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001a6c:	002047b7          	lui	a5,0x204
1c001a70:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c001a74:	1f012683          	lw	a3,496(sp)
1c001a78:	40d7d7b3          	sra	a5,a5,a3
1c001a7c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001a80:	cb85                	beqz	a5,1c001ab0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x306>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a82:	10000513          	li	a0,256
1c001a86:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001a8a:	30061073          	csrw	mstatus,a2
1c001a8e:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a92:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001a96:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a9a:	30047673          	csrrci	a2,mstatus,8
1c001a9e:	40472783          	lw	a5,1028(a4)
1c001aa2:	1f012683          	lw	a3,496(sp)
1c001aa6:	40d7d7b3          	sra	a5,a5,a3
1c001aaa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001aae:	fff1                	bnez	a5,1c001a8a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2e0>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001ab0:	4785                	li	a5,1
1c001ab2:	00d796b3          	sll	a3,a5,a3
1c001ab6:	002047b7          	lui	a5,0x204
1c001aba:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001abe:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3432+0), 216, 0, &DmaR_Evt4);
1c001ac2:	de2e                	sw	a1,60(sp)
1c001ac4:	100007b7          	lui	a5,0x10000
1c001ac8:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c001acc:	6785                	lui	a5,0x1
1c001ace:	d6878793          	addi	a5,a5,-664 # d68 <__rt_stack_size+0x568>
1c001ad2:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ad4:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001ad8:	00204737          	lui	a4,0x204
1c001adc:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001ae0:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001ae4:	0d878793          	addi	a5,a5,216 # b00d8 <__L2+0x300d8>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001ae8:	c157c7b3          	p.bset	a5,a5,0,21
1c001aec:	00204537          	lui	a0,0x204
1c001af0:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001af4:	002047b7          	lui	a5,0x204
1c001af8:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001afc:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c001b00:	1ce12823          	sw	a4,464(sp)
        copy->length = 0;
1c001b04:	1e012023          	sw	zero,480(sp)
  __builtin_pulp_spr_write(reg, val);
1c001b08:	30061073          	csrw	mstatus,a2
	_N_Filter=0;
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+174264+0), 1620, 0, &UchanHR1);
1c001b0c:	d422                	sw	s0,40(sp)
1c001b0e:	1c00f7b7          	lui	a5,0x1c00f
1c001b12:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
1c001b16:	099c                	addi	a5,sp,208
1c001b18:	4705                	li	a4,1
1c001b1a:	65400693          	li	a3,1620
1c001b1e:	0002b637          	lui	a2,0x2b
1c001b22:	8b860613          	addi	a2,a2,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c001b26:	962e                	add	a2,a2,a1
1c001b28:	85a2                	mv	a1,s0
1c001b2a:	1c00f537          	lui	a0,0x1c00f
1c001b2e:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c001b32:	1c2080ef          	jal	ra,1c009cf4 <pi_cl_ram_copy>
1c001b36:	16c14783          	lbu	a5,364(sp)
1c001b3a:	0ff7f793          	andi	a5,a5,255
1c001b3e:	ef99                	bnez	a5,1c001b5c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x3b2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001b40:	4689                	li	a3,2
1c001b42:	00204737          	lui	a4,0x204
1c001b46:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001b4a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001b4e:	00d72223          	sw	a3,4(a4)
1c001b52:	16c14783          	lbu	a5,364(sp)
1c001b56:	0ff7f793          	andi	a5,a5,255
1c001b5a:	d7f5                	beqz	a5,1c001b46 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x39c>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+1296), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+174264+1620), 1620, 0, &UchanHR1);
1c001b5c:	1c00f9b7          	lui	s3,0x1c00f
1c001b60:	57898993          	addi	s3,s3,1400 # 1c00f578 <model_L2_Memory>
1c001b64:	0009a583          	lw	a1,0(s3)
1c001b68:	0002b937          	lui	s2,0x2b
1c001b6c:	f0c90613          	addi	a2,s2,-244 # 2af0c <__L1Cl+0x1af0c>
1c001b70:	099c                	addi	a5,sp,208
1c001b72:	4705                	li	a4,1
1c001b74:	65400693          	li	a3,1620
1c001b78:	962e                	add	a2,a2,a1
1c001b7a:	51040593          	addi	a1,s0,1296
1c001b7e:	1c00f537          	lui	a0,0x1c00f
1c001b82:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c001b86:	16e080ef          	jal	ra,1c009cf4 <pi_cl_ram_copy>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+174264+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+0), 1620, 0, &DmaR_Evt5);
1c001b8a:	0009a783          	lw	a5,0(s3)
1c001b8e:	8b890913          	addi	s2,s2,-1864
1c001b92:	993e                	add	s2,s2,a5
1c001b94:	10000637          	lui	a2,0x10000
1c001b98:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c001b9c:	00062803          	lw	a6,0(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ba0:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001ba4:	002046b7          	lui	a3,0x204
1c001ba8:	4006a503          	lw	a0,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c001bac:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001bb0:	6547e713          	ori	a4,a5,1620
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001bb4:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001bb8:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001bbc:	002048b7          	lui	a7,0x204
1c001bc0:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001bc4:	00204737          	lui	a4,0x204
1c001bc8:	41072023          	sw	a6,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001bcc:	41272023          	sw	s2,1024(a4)
        if (!merge) copy->id = id;
1c001bd0:	1aa12823          	sw	a0,432(sp)
        copy->length = 0;
1c001bd4:	1c012023          	sw	zero,448(sp)
  __builtin_pulp_spr_write(reg, val);
1c001bd8:	30059073          	csrw	mstatus,a1
	_NN_In=1296; _SN_In=1620;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+38424), 9, 0, &DmaR_Evt6);
1c001bdc:	4218                	lw	a4,0(a2)
1c001bde:	6625                	lui	a2,0x9
1c001be0:	61860613          	addi	a2,a2,1560 # 9618 <__rt_stack_size+0x8e18>
1c001be4:	9732                	add	a4,a4,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001be6:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001bea:	4006a683          	lw	a3,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001bee:	0097e793          	ori	a5,a5,9
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001bf2:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001bf6:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001bfa:	002045b7          	lui	a1,0x204
1c001bfe:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001c02:	002047b7          	lui	a5,0x204
1c001c06:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001c0a:	4097a023          	sw	s1,1024(a5)
        if (!merge) copy->id = id;
1c001c0e:	18d12823          	sw	a3,400(sp)
        copy->length = 0;
1c001c12:	1a012023          	sw	zero,416(sp)
  __builtin_pulp_spr_write(reg, val);
1c001c16:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c001c1a:	1a012783          	lw	a5,416(sp)
1c001c1e:	c395                	beqz	a5,1c001c42 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x498>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001c20:	1a812683          	lw	a3,424(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001c24:	02000713          	li	a4,32
1c001c28:	002047b7          	lui	a5,0x204
1c001c2c:	caa5                	beqz	a3,1c001c9c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4f2>
1c001c2e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001c32:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001c36:	00e7a223          	sw	a4,4(a5)
1c001c3a:	1a812683          	lw	a3,424(sp)
1c001c3e:	fae5                	bnez	a3,1c001c2e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x484>
1c001c40:	a8b1                	j	1c001c9c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4f2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001c42:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001c46:	002047b7          	lui	a5,0x204
1c001c4a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c001c4e:	19012683          	lw	a3,400(sp)
1c001c52:	40d7d7b3          	sra	a5,a5,a3
1c001c56:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001c5a:	cb85                	beqz	a5,1c001c8a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4e0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001c5c:	10000593          	li	a1,256
1c001c60:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001c64:	30061073          	csrw	mstatus,a2
1c001c68:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001c6c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001c70:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001c74:	30047673          	csrrci	a2,mstatus,8
1c001c78:	40472783          	lw	a5,1028(a4)
1c001c7c:	19012683          	lw	a3,400(sp)
1c001c80:	40d7d7b3          	sra	a5,a5,a3
1c001c84:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001c88:	fff1                	bnez	a5,1c001c64 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4ba>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001c8a:	4785                	li	a5,1
1c001c8c:	00d796b3          	sll	a3,a5,a3
1c001c90:	002047b7          	lui	a5,0x204
1c001c94:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001c98:	30061073          	csrw	mstatus,a2
{
1c001c9c:	6785                	lui	a5,0x1
1c001c9e:	d2878793          	addi	a5,a5,-728 # d28 <__rt_stack_size+0x528>
1c001ca2:	c83e                	sw	a5,16(sp)
1c001ca4:	65400713          	li	a4,1620
1c001ca8:	c03a                	sw	a4,0(sp)
1c001caa:	51000793          	li	a5,1296
1c001cae:	c43e                	sw	a5,8(sp)
1c001cb0:	d802                	sw	zero,48(sp)
1c001cb2:	78000613          	li	a2,1920
1c001cb6:	c202                	sw	zero,4(sp)
1c001cb8:	4a81                	li	s5,0
1c001cba:	4b01                	li	s6,0
1c001cbc:	4c81                	li	s9,0
1c001cbe:	d602                	sw	zero,44(sp)
1c001cc0:	00204bb7          	lui	s7,0x204
		}
		/*============================= End Prepare Tiles ===================================*/
		/*================================= Read Tiles ======================================*/
		AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
		if (_SN_Filter) {
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3432+216*((D1Ind_Total+1)%2)),
1c001cc4:	10000c37          	lui	s8,0x10000
1c001cc8:	6805                	lui	a6,0x1
1c001cca:	d6880813          	addi	a6,a6,-664 # d68 <__rt_stack_size+0x568>
1c001cce:	dc42                	sw	a6,56(sp)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001cd0:	200b8d93          	addi	s11,s7,512 # 204200 <__L2+0x184200>
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001cd4:	8d6e                	mv	s10,s11
1c001cd6:	a38d                	j	1c002238 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa8e>
		_SN_Filter = 0;
1c001cd8:	4501                	li	a0,0
1c001cda:	ab85                	j	1c00224a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xaa0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001cdc:	300476f3          	csrrci	a3,mstatus,8
1c001ce0:	404ba783          	lw	a5,1028(s7)
1c001ce4:	1d012703          	lw	a4,464(sp)
1c001ce8:	40e7d7b3          	sra	a5,a5,a4
1c001cec:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001cf0:	c795                	beqz	a5,1c001d1c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x572>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001cf2:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c001cf6:	30069073          	csrw	mstatus,a3
1c001cfa:	00bba423          	sw	a1,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001cfe:	03cbe783          	p.elw	a5,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001d02:	00bba223          	sw	a1,4(s7)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001d06:	300476f3          	csrrci	a3,mstatus,8
1c001d0a:	404ba783          	lw	a5,1028(s7)
1c001d0e:	1d012703          	lw	a4,464(sp)
1c001d12:	40e7d7b3          	sra	a5,a5,a4
1c001d16:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001d1a:	fff1                	bnez	a5,1c001cf6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x54c>
1c001d1c:	4785                	li	a5,1
1c001d1e:	00e79733          	sll	a4,a5,a4
1c001d22:	40eba223          	sw	a4,1028(s7)
  __builtin_pulp_spr_write(reg, val);
1c001d26:	30069073          	csrw	mstatus,a3
		if (_SN_Filter) {
1c001d2a:	e135                	bnez	a0,1c001d8e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x5e4>
1c001d2c:	49e1                	li	s3,24
1c001d2e:	56b2                	lw	a3,44(sp)
1c001d30:	0a16a963          	p.beqimm	a3,1,1c001de2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x638>
1c001d34:	1009d9b3          	p.exthz	s3,s3
1c001d38:	3ffff7b7          	lui	a5,0x3ffff
1c001d3c:	60278793          	addi	a5,a5,1538 # 3ffff602 <__l2_end+0x23fefc56>
1c001d40:	4742                	lw	a4,16(sp)
1c001d42:	97ba                	add	a5,a5,a4
1c001d44:	078a                	slli	a5,a5,0x2
1c001d46:	ca3e                	sw	a5,20(sp)
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+1620*((D0Ind_Total)%2));
				KerArg1->OutFeatures = (unsigned short int) (D1Ind_Last?8:24);
				KerArg1->Filter = (signed char * __restrict__) (model_L1_Memory+3432+216*((D1Ind_Total)%2));
1c001d48:	57b2                	lw	a5,44(sp)
1c001d4a:	01f7d713          	srli	a4,a5,0x1f
1c001d4e:	97ba                	add	a5,a5,a4
1c001d50:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001d54:	8f99                	sub	a5,a5,a4
1c001d56:	0d800713          	li	a4,216
1c001d5a:	5862                	lw	a6,56(sp)
1c001d5c:	42e78833          	p.mac	a6,a5,a4
1c001d60:	cc42                	sw	a6,24(sp)
				D0Ind_Total++;
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Feat = (unsigned short int) (D1Ind_Last?8:24);
			KerArg2->Scale = (unsigned char *__restrict__) (model_L1_Memory+3368+((D1Ind)*24));
			KerArg2->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+3400+((D1Ind)*24));
1c001d62:	4542                	lw	a0,16(sp)
1c001d64:	02050513          	addi	a0,a0,32
1c001d68:	ce2a                	sw	a0,28(sp)
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c001d6a:	4761                	li	a4,24
1c001d6c:	55b2                	lw	a1,44(sp)
1c001d6e:	0615ac63          	p.beqimm	a1,1,1c001de6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x63c>
1c001d72:	00271793          	slli	a5,a4,0x2
1c001d76:	97ba                	add	a5,a5,a4
1c001d78:	0792                	slli	a5,a5,0x4
1c001d7a:	da3e                	sw	a5,52(sp)
1c001d7c:	d23e                	sw	a5,36(sp)
1c001d7e:	4402                	lw	s0,0(sp)
1c001d80:	4692                	lw	a3,4(sp)
1c001d82:	c636                	sw	a3,12(sp)
1c001d84:	c232                	sw	a2,4(sp)
1c001d86:	4901                	li	s2,0
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001d88:	0ff00493          	li	s1,255
1c001d8c:	a4a5                	j	1c001ff4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x84a>
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3432+216*((D1Ind_Total+1)%2)),
1c001d8e:	56f2                	lw	a3,60(sp)
1c001d90:	57c2                	lw	a5,48(sp)
1c001d92:	00f68733          	add	a4,a3,a5
1c001d96:	5832                	lw	a6,44(sp)
1c001d98:	00180793          	addi	a5,a6,1
1c001d9c:	01f7d693          	srli	a3,a5,0x1f
1c001da0:	97b6                	add	a5,a5,a3
1c001da2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001da6:	8f95                	sub	a5,a5,a3
1c001da8:	0d800693          	li	a3,216
1c001dac:	55e2                	lw	a1,56(sp)
1c001dae:	42d785b3          	p.mac	a1,a5,a3
1c001db2:	01cc2783          	lw	a5,28(s8) # 1000001c <model_L1_Memory>
1c001db6:	97ae                	add	a5,a5,a1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001db8:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001dbc:	400ba583          	lw	a1,1024(s7)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c001dc0:	002b0837          	lui	a6,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001dc4:	01056533          	or	a0,a0,a6
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001dc8:	40aba023          	sw	a0,1024(s7)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001dcc:	40fba023          	sw	a5,1024(s7)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001dd0:	40eba023          	sw	a4,1024(s7)
        if (!merge) copy->id = id;
1c001dd4:	1cb12823          	sw	a1,464(sp)
        copy->length = 0;
1c001dd8:	1e012023          	sw	zero,480(sp)
  __builtin_pulp_spr_write(reg, val);
1c001ddc:	30069073          	csrw	mstatus,a3
1c001de0:	b7b1                	j	1c001d2c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x582>
1c001de2:	49a1                	li	s3,8
1c001de4:	bf81                	j	1c001d34 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x58a>
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c001de6:	4721                	li	a4,8
1c001de8:	b769                	j	1c001d72 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x5c8>
					} else if (!(D1Ind_Last)) {
1c001dea:	5632                	lw	a2,44(sp)
1c001dec:	54162163          	p.beqimm	a2,1,1c00232e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb84>
						_NN_In = _NN_In + (-76464); _SNN_In = (1620); 
1c001df0:	77b5                	lui	a5,0xfffed
1c001df2:	55078793          	addi	a5,a5,1360 # fffed550 <pulp__FC+0xfffed551>
1c001df6:	46a2                	lw	a3,8(sp)
1c001df8:	96be                	add	a3,a3,a5
1c001dfa:	c436                	sw	a3,8(sp)
1c001dfc:	ac89                	j	1c00204e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8a4>
				} else if (!((D1Ind_Last))) {
1c001dfe:	5732                	lw	a4,44(sp)
1c001e00:	52172763          	p.beqimm	a4,1,1c00232e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb84>
					_NN_In = _NN_In + (1296); _SNN_In = (1620); 
1c001e04:	47a2                	lw	a5,8(sp)
1c001e06:	51078793          	addi	a5,a5,1296
1c001e0a:	c43e                	sw	a5,8(sp)
1c001e0c:	a489                	j	1c00204e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8a4>
1c001e0e:	c002                	sw	zero,0(sp)
1c001e10:	ac81                	j	1c002060 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8b6>
					AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+_NN_In), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+174264+1620*((D0Ind_Total)%2)),
1c001e12:	01fb5713          	srli	a4,s6,0x1f
1c001e16:	00eb07b3          	add	a5,s6,a4
1c001e1a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001e1e:	8f99                	sub	a5,a5,a4
1c001e20:	65400713          	li	a4,1620
1c001e24:	0002b637          	lui	a2,0x2b
1c001e28:	8b860613          	addi	a2,a2,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c001e2c:	42e78633          	p.mac	a2,a5,a4
1c001e30:	1c00f7b7          	lui	a5,0x1c00f
1c001e34:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
1c001e38:	099c                	addi	a5,sp,208
1c001e3a:	4705                	li	a4,1
1c001e3c:	4682                	lw	a3,0(sp)
1c001e3e:	962e                	add	a2,a2,a1
1c001e40:	5522                	lw	a0,40(sp)
1c001e42:	4822                	lw	a6,8(sp)
1c001e44:	010505b3          	add	a1,a0,a6
1c001e48:	1c00f537          	lui	a0,0x1c00f
1c001e4c:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c001e50:	6a5070ef          	jal	ra,1c009cf4 <pi_cl_ram_copy>
1c001e54:	a42d                	j	1c00207e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001e56:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001e5a:	404ba783          	lw	a5,1028(s7)
1c001e5e:	1b012703          	lw	a4,432(sp)
1c001e62:	40e7d7b3          	sra	a5,a5,a4
1c001e66:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001e6a:	c795                	beqz	a5,1c001e96 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6ec>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001e6c:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c001e70:	30069073          	csrw	mstatus,a3
1c001e74:	00cba423          	sw	a2,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001e78:	03cbe783          	p.elw	a5,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001e7c:	00cba223          	sw	a2,4(s7)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001e80:	300476f3          	csrrci	a3,mstatus,8
1c001e84:	404ba783          	lw	a5,1028(s7)
1c001e88:	1b012703          	lw	a4,432(sp)
1c001e8c:	40e7d7b3          	sra	a5,a5,a4
1c001e90:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001e94:	fff1                	bnez	a5,1c001e70 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6c6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001e96:	4785                	li	a5,1
1c001e98:	00e79733          	sll	a4,a5,a4
1c001e9c:	40eba223          	sw	a4,1028(s7)
  __builtin_pulp_spr_write(reg, val);
1c001ea0:	30069073          	csrw	mstatus,a3
				if (_SN_In) {
1c001ea4:	20041163          	bnez	s0,1c0020a6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8fc>
				KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+1620*((D0Ind_Total)%2));
1c001ea8:	01cc0a13          	addi	s4,s8,28
1c001eac:	000a2703          	lw	a4,0(s4)
1c001eb0:	01fb5693          	srli	a3,s6,0x1f
1c001eb4:	00db07b3          	add	a5,s6,a3
1c001eb8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001ebc:	8f95                	sub	a5,a5,a3
1c001ebe:	65400693          	li	a3,1620
1c001ec2:	85ba                	mv	a1,a4
1c001ec4:	42d785b3          	p.mac	a1,a5,a3
1c001ec8:	c72e                	sw	a1,140(sp)
				KerArg1->OutFeatures = (unsigned short int) (D1Ind_Last?8:24);
1c001eca:	09311d23          	sh	s3,154(sp)
				KerArg1->Filter = (signed char * __restrict__) (model_L1_Memory+3432+216*((D1Ind_Total)%2));
1c001ece:	4662                	lw	a2,24(sp)
1c001ed0:	9732                	add	a4,a4,a2
1c001ed2:	d13a                	sw	a4,160(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001ed4:	089ba223          	sw	s1,132(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001ed8:	009da023          	sw	s1,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001edc:	009d2623          	sw	s1,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001ee0:	1c0076b7          	lui	a3,0x1c007
1c001ee4:	7e268693          	addi	a3,a3,2018 # 1c0077e2 <KerParConv3x3Stride2_SQ8>
1c001ee8:	08dba023          	sw	a3,128(s7)
1c001eec:	0168                	addi	a0,sp,140
1c001eee:	08aba023          	sw	a0,128(s7)
1c001ef2:	0f1050ef          	jal	ra,1c0077e2 <KerParConv3x3Stride2_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001ef6:	01cde783          	p.elw	a5,28(s11)
				D0Ind_Total++;
1c001efa:	0b05                	addi	s6,s6,1
			KerArg2->Feat = (unsigned short int) (D1Ind_Last?8:24);
1c001efc:	07311c23          	sh	s3,120(sp)
			KerArg2->Scale = (unsigned char *__restrict__) (model_L1_Memory+3368+((D1Ind)*24));
1c001f00:	000a2783          	lw	a5,0(s4)
1c001f04:	4842                	lw	a6,16(sp)
1c001f06:	01078733          	add	a4,a5,a6
1c001f0a:	c13a                	sw	a4,128(sp)
			KerArg2->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+3400+((D1Ind)*24));
1c001f0c:	4572                	lw	a0,28(sp)
1c001f0e:	97aa                	add	a5,a5,a0
1c001f10:	c33e                	sw	a5,132(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001f12:	089ba223          	sw	s1,132(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001f16:	009d2023          	sw	s1,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001f1a:	009d2623          	sw	s1,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001f1e:	1c0065b7          	lui	a1,0x1c006
1c001f22:	7b058593          	addi	a1,a1,1968 # 1c0067b0 <KerParReductIO_CC_SQ8>
1c001f26:	08bba023          	sw	a1,128(s7)
1c001f2a:	1888                	addi	a0,sp,112
1c001f2c:	08aba023          	sw	a0,128(s7)
1c001f30:	081040ef          	jal	ra,1c0067b0 <KerParReductIO_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f34:	01cde783          	p.elw	a5,28(s11)
			KerArg3->Feat = (unsigned short int) (D1Ind_Last?8:24);
1c001f38:	05311823          	sh	s3,80(sp)
			KerArg3->Out = (signed char * __restrict__) (model_L1_Memory+3864+1920*((T0Ind_Total)%2));
1c001f3c:	01fcd413          	srli	s0,s9,0x1f
1c001f40:	008c87b3          	add	a5,s9,s0
1c001f44:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001f48:	8f81                	sub	a5,a5,s0
1c001f4a:	00479413          	slli	s0,a5,0x4
1c001f4e:	8c1d                	sub	s0,s0,a5
1c001f50:	041e                	slli	s0,s0,0x7
1c001f52:	6605                	lui	a2,0x1
1c001f54:	f1860793          	addi	a5,a2,-232 # f18 <__rt_stack_size+0x718>
1c001f58:	943e                	add	s0,s0,a5
1c001f5a:	000a2783          	lw	a5,0(s4)
1c001f5e:	97a2                	add	a5,a5,s0
1c001f60:	c6be                	sw	a5,76(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001f62:	089ba223          	sw	s1,132(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001f66:	009d2023          	sw	s1,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001f6a:	009d2623          	sw	s1,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001f6e:	1c0087b7          	lui	a5,0x1c008
1c001f72:	36478793          	addi	a5,a5,868 # 1c008364 <KerParPool2x2Stride2_ReLU_SQ8>
1c001f76:	08fba023          	sw	a5,128(s7)
1c001f7a:	00a8                	addi	a0,sp,72
1c001f7c:	08aba023          	sw	a0,128(s7)
1c001f80:	3e4060ef          	jal	ra,1c008364 <KerParPool2x2Stride2_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f84:	01cde783          	p.elw	a5,28(s11)
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c001f88:	46b2                	lw	a3,12(sp)
1c001f8a:	20069863          	bnez	a3,1c00219a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9f0>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3864+1920*((T0Ind_Total)%2)),
1c001f8e:	01cc2783          	lw	a5,28(s8)
1c001f92:	943e                	add	s0,s0,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001f94:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001f98:	400ba683          	lw	a3,1024(s7)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001f9c:	4812                	lw	a6,4(sp)
1c001f9e:	100857b3          	p.exthz	a5,a6
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c001fa2:	c517c7b3          	p.bset	a5,a5,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001fa6:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001faa:	40fba023          	sw	a5,1024(s7)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001fae:	408ba023          	sw	s0,1024(s7)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001fb2:	5502                	lw	a0,32(sp)
1c001fb4:	015507b3          	add	a5,a0,s5
1c001fb8:	40fba023          	sw	a5,1024(s7)
#endif
}

static inline void plp_dma_cmd_push_2d(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr, unsigned int stride, unsigned int length) {
  plp_dma_cmd_push(cmd, locAddr, extAddr);
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c001fbc:	12c007b7          	lui	a5,0x12c00
1c001fc0:	05078793          	addi	a5,a5,80 # 12c00050 <__l1_end+0x2c0000c>
1c001fc4:	40fba023          	sw	a5,1024(s7)
        if (!merge) copy->id = id;
1c001fc8:	16d12823          	sw	a3,368(sp)
        copy->length = 0;
1c001fcc:	18012023          	sw	zero,384(sp)
  __builtin_pulp_spr_write(reg, val);
1c001fd0:	30071073          	csrw	mstatus,a4
			if (!(T0Ind_Last)) {
1c001fd4:	03b00793          	li	a5,59
1c001fd8:	22f90e63          	beq	s2,a5,1c002214 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa6a>
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c001fdc:	050a8a93          	addi	s5,s5,80
		for (T0Ind=0; T0Ind<60; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c001fe0:	0905                	addi	s2,s2,1
1c001fe2:	0c85                	addi	s9,s9,1
1c001fe4:	c642                	sw	a6,12(sp)
1c001fe6:	4402                	lw	s0,0(sp)
1c001fe8:	03c00793          	li	a5,60
1c001fec:	22f90263          	beq	s2,a5,1c002210 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa66>
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c001ff0:	5712                	lw	a4,36(sp)
1c001ff2:	c23a                	sw	a4,4(sp)
			KerArg0->Feat = (unsigned short int) (D1Ind_Last?8:24);
1c001ff4:	0d311223          	sh	s3,196(sp)
			KerArg0->Bias = (void * __restrict__) (model_L1_Memory+3240+((D1Ind)*96));
1c001ff8:	01cc2783          	lw	a5,28(s8)
1c001ffc:	4852                	lw	a6,20(sp)
1c001ffe:	01078733          	add	a4,a5,a6
1c002002:	c5ba                	sw	a4,200(sp)
			KerArg0->NormBias = (unsigned char) (((char *)(model_L1_Memory+38424))[5]);
1c002004:	6725                	lui	a4,0x9
1c002006:	97ba                	add	a5,a5,a4
1c002008:	61d7c783          	lbu	a5,1565(a5)
1c00200c:	0cf10623          	sb	a5,204(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002010:	089ba223          	sw	s1,132(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002014:	009da023          	sw	s1,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002018:	009d2623          	sw	s1,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00201c:	1c007537          	lui	a0,0x1c007
1c002020:	85e50513          	addi	a0,a0,-1954 # 1c00685e <KerParSetBiasB32_SQ8>
1c002024:	08aba023          	sw	a0,128(s7)
1c002028:	1968                	addi	a0,sp,188
1c00202a:	08aba023          	sw	a0,128(s7)
1c00202e:	031040ef          	jal	ra,1c00685e <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002032:	01cde783          	p.elw	a5,28(s11)
				if (!(T0Ind_Last)) {
1c002036:	03b00793          	li	a5,59
1c00203a:	dcf902e3          	beq	s2,a5,1c001dfe <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x654>
					if (!(T0Ind_NextLast)) {
1c00203e:	03a00793          	li	a5,58
1c002042:	daf904e3          	beq	s2,a5,1c001dea <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x640>
						_NN_In = _NN_In + (1296); _SNN_In = (1620); 
1c002046:	45a2                	lw	a1,8(sp)
1c002048:	51058593          	addi	a1,a1,1296
1c00204c:	c42e                	sw	a1,8(sp)
1c00204e:	16c14783          	lbu	a5,364(sp)
1c002052:	0ff7f793          	andi	a5,a5,255
1c002056:	65400813          	li	a6,1620
1c00205a:	c042                	sw	a6,0(sp)
1c00205c:	da079be3          	bnez	a5,1c001e12 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x668>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002060:	4709                	li	a4,2
1c002062:	00eba423          	sw	a4,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002066:	03cbe783          	p.elw	a5,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00206a:	00eba223          	sw	a4,4(s7)
1c00206e:	16c14783          	lbu	a5,364(sp)
1c002072:	0ff7f793          	andi	a5,a5,255
1c002076:	d7f5                	beqz	a5,1c002062 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8b8>
				if (_SNN_In) {
1c002078:	4802                	lw	a6,0(sp)
1c00207a:	d8081ce3          	bnez	a6,1c001e12 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x668>
  if (copy->length == 0)
1c00207e:	1c012783          	lw	a5,448(sp)
1c002082:	dc078ae3          	beqz	a5,1c001e56 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6ac>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002086:	1c812703          	lw	a4,456(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00208a:	02000793          	li	a5,32
1c00208e:	e0070be3          	beqz	a4,1c001ea4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fa>
1c002092:	00fba423          	sw	a5,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002096:	03cbe703          	p.elw	a4,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00209a:	00fba223          	sw	a5,4(s7)
1c00209e:	1c812703          	lw	a4,456(sp)
1c0020a2:	fb65                	bnez	a4,1c002092 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8e8>
1c0020a4:	b501                	j	1c001ea4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fa>
					AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+174264+1620*((D0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+1620*((D0Ind_Total+1)%2)),
1c0020a6:	001b0793          	addi	a5,s6,1
1c0020aa:	01f7d713          	srli	a4,a5,0x1f
1c0020ae:	97ba                	add	a5,a5,a4
1c0020b0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0020b4:	8f99                	sub	a5,a5,a4
1c0020b6:	65400713          	li	a4,1620
1c0020ba:	02e787b3          	mul	a5,a5,a4
1c0020be:	1c00f737          	lui	a4,0x1c00f
1c0020c2:	57872683          	lw	a3,1400(a4) # 1c00f578 <model_L2_Memory>
1c0020c6:	96be                	add	a3,a3,a5
1c0020c8:	0002b737          	lui	a4,0x2b
1c0020cc:	8b870713          	addi	a4,a4,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c0020d0:	9736                	add	a4,a4,a3
1c0020d2:	01cc2603          	lw	a2,28(s8)
1c0020d6:	97b2                	add	a5,a5,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0020d8:	30047673          	csrrci	a2,mstatus,8
    if (size < max_len)
1c0020dc:	01041513          	slli	a0,s0,0x10
1c0020e0:	02054963          	bltz	a0,1c002112 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x968>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0020e4:	400ba583          	lw	a1,1024(s7)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0020e8:	000306b7          	lui	a3,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0020ec:	de0426b3          	p.insert	a3,s0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0020f0:	c136c6b3          	p.bset	a3,a3,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0020f4:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0020f8:	40dba023          	sw	a3,1024(s7)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0020fc:	40fba023          	sw	a5,1024(s7)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002100:	40eba023          	sw	a4,1024(s7)
        if (!merge) copy->id = id;
1c002104:	1ab12823          	sw	a1,432(sp)
        copy->length = 0;
1c002108:	1c012023          	sw	zero,448(sp)
  __builtin_pulp_spr_write(reg, val);
1c00210c:	30061073          	csrw	mstatus,a2
1c002110:	bb61                	j	1c001ea8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fe>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002112:	65a1                	lui	a1,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002114:	00330537          	lui	a0,0x330
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c002118:	1aa12a23          	sw	a0,436(sp)
    cmd->loc_addr = loc;
1c00211c:	1cf12223          	sw	a5,452(sp)
    cmd->ext_addr = ext;
1c002120:	1ce12423          	sw	a4,456(sp)
    cmd->size = len;
1c002124:	1a812c23          	sw	s0,440(sp)
    cmd->stride = stride;
1c002128:	1ab12e23          	sw	a1,444(sp)
    cmd->length = length;
1c00212c:	1cb12023          	sw	a1,448(sp)
    cmd->id = tid;
1c002130:	55fd                	li	a1,-1
1c002132:	1ab12823          	sw	a1,432(sp)
    cmd->next = NULL;
1c002136:	1c012623          	sw	zero,460(sp)
    if (__rt_dma_first_pending)
1c00213a:	01402583          	lw	a1,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00213e:	c989                	beqz	a1,1c002150 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9a6>
        __rt_dma_last_pending->next = cmd;
1c002140:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002144:	1b18                	addi	a4,sp,432
1c002146:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c002148:	1b1c                	addi	a5,sp,432
1c00214a:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00214e:	bf7d                	j	1c00210c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x962>
    uint32_t iter_length = (len < length) ? len : length;
1c002150:	65a1                	lui	a1,0x8
1c002152:	04b455b3          	p.minu	a1,s0,a1
        cmd->loc_addr += iter_length;
1c002156:	00b78533          	add	a0,a5,a1
1c00215a:	1ca12223          	sw	a0,452(sp)
        cmd->ext_addr += stride;
1c00215e:	00033537          	lui	a0,0x33
1c002162:	8b850513          	addi	a0,a0,-1864 # 328b8 <__L1Cl+0x228b8>
1c002166:	96aa                	add	a3,a3,a0
1c002168:	1cd12423          	sw	a3,456(sp)
        cmd->size -= iter_length;
1c00216c:	40b405b3          	sub	a1,s0,a1
1c002170:	1ab12c23          	sw	a1,440(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002174:	400ba683          	lw	a3,1024(s7)
        cmd->id = plp_dma_counter_alloc();
1c002178:	1ad12823          	sw	a3,432(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00217c:	003386b7          	lui	a3,0x338
1c002180:	40dba023          	sw	a3,1024(s7)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002184:	40fba023          	sw	a5,1024(s7)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002188:	40eba023          	sw	a4,1024(s7)
        if (cmd->length != 0)
1c00218c:	1c012783          	lw	a5,448(sp)
1c002190:	dfc5                	beqz	a5,1c002148 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x99e>
            __rt_dma_first_pending = cmd;
1c002192:	1b1c                	addi	a5,sp,432
1c002194:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002198:	bf45                	j	1c002148 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x99e>
  if (copy->length == 0)
1c00219a:	18012783          	lw	a5,384(sp)
1c00219e:	c38d                	beqz	a5,1c0021c0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa16>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0021a0:	18812703          	lw	a4,392(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0021a4:	02000793          	li	a5,32
1c0021a8:	de0703e3          	beqz	a4,1c001f8e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e4>
1c0021ac:	00fba423          	sw	a5,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0021b0:	03cbe703          	p.elw	a4,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0021b4:	00fba223          	sw	a5,4(s7)
1c0021b8:	18812703          	lw	a4,392(sp)
1c0021bc:	fb65                	bnez	a4,1c0021ac <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa02>
1c0021be:	bbc1                	j	1c001f8e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0021c0:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0021c4:	404ba783          	lw	a5,1028(s7)
1c0021c8:	17012703          	lw	a4,368(sp)
1c0021cc:	40e7d7b3          	sra	a5,a5,a4
1c0021d0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0021d4:	c795                	beqz	a5,1c002200 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa56>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0021d6:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c0021da:	30069073          	csrw	mstatus,a3
1c0021de:	00cba423          	sw	a2,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0021e2:	03cbe783          	p.elw	a5,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0021e6:	00cba223          	sw	a2,4(s7)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0021ea:	300476f3          	csrrci	a3,mstatus,8
1c0021ee:	404ba783          	lw	a5,1028(s7)
1c0021f2:	17012703          	lw	a4,368(sp)
1c0021f6:	40e7d7b3          	sra	a5,a5,a4
1c0021fa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0021fe:	fff1                	bnez	a5,1c0021da <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa30>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002200:	4785                	li	a5,1
1c002202:	00e79733          	sll	a4,a5,a4
1c002206:	40eba223          	sw	a4,1028(s7)
  __builtin_pulp_spr_write(reg, val);
1c00220a:	30069073          	csrw	mstatus,a3
1c00220e:	b341                	j	1c001f8e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e4>
				_C_Out = _C_Out + (80); _LC_Out = (80); _SC_Out = (((D1Ind_Last)?8:24)*_LC_Out); 
1c002210:	5652                	lw	a2,52(sp)
1c002212:	a819                	j	1c002228 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa7e>
			} else if (!(D1Ind_Last)) {
1c002214:	55b2                	lw	a1,44(sp)
1c002216:	1215a463          	p.beqimm	a1,1,1c00233e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb94>
				_C_Out = _C_Out + (115200)+(-4720); _LC_Out = (80); _SC_Out = (((1)?8:24)*_LC_Out); 
1c00221a:	67ed                	lui	a5,0x1b
1c00221c:	f9078793          	addi	a5,a5,-112 # 1af90 <__L1Cl+0xaf90>
1c002220:	9abe                	add	s5,s5,a5
1c002222:	28000613          	li	a2,640
		for (T0Ind=0; T0Ind<60; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002226:	0c85                	addi	s9,s9,1
	for (D1Ind=0; D1Ind<2; D1Ind++, D1Ind_Total++) { /* Iteration on D1 */
1c002228:	56b2                	lw	a3,44(sp)
1c00222a:	0685                	addi	a3,a3,1
1c00222c:	d636                	sw	a3,44(sp)
1c00222e:	4742                	lw	a4,16(sp)
1c002230:	0761                	addi	a4,a4,24
1c002232:	c83a                	sw	a4,16(sp)
1c002234:	0226af63          	p.beqimm	a3,2,1c002272 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xac8>
		if (!(D1Ind_Last)) {
1c002238:	5532                	lw	a0,44(sp)
1c00223a:	a8152fe3          	p.beqimm	a0,1,1c001cd8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x52e>
			_N_Filter = _N_Filter + (216); _SN_Filter = ((1)?72:216); 
1c00223e:	55c2                	lw	a1,48(sp)
1c002240:	0d858593          	addi	a1,a1,216 # 80d8 <__rt_stack_size+0x78d8>
1c002244:	d82e                	sw	a1,48(sp)
1c002246:	04800513          	li	a0,72
  if (copy->length == 0)
1c00224a:	1e012783          	lw	a5,480(sp)
1c00224e:	a80787e3          	beqz	a5,1c001cdc <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x532>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002252:	1e812703          	lw	a4,488(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002256:	02000793          	li	a5,32
1c00225a:	ac0708e3          	beqz	a4,1c001d2a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x580>
1c00225e:	00fba423          	sw	a5,8(s7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002262:	03cbe703          	p.elw	a4,60(s7)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002266:	00fba223          	sw	a5,4(s7)
1c00226a:	1e812703          	lw	a4,488(sp)
1c00226e:	fb65                	bnez	a4,1c00225e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xab4>
1c002270:	bc6d                	j	1c001d2a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x580>
  if (copy->length == 0)
1c002272:	18012783          	lw	a5,384(sp)
1c002276:	c395                	beqz	a5,1c00229a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xaf0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002278:	18812683          	lw	a3,392(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00227c:	02000713          	li	a4,32
1c002280:	002047b7          	lui	a5,0x204
1c002284:	caa5                	beqz	a3,1c0022f4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb4a>
1c002286:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00228a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00228e:	00e7a223          	sw	a4,4(a5)
1c002292:	18812683          	lw	a3,392(sp)
1c002296:	fae5                	bnez	a3,1c002286 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xadc>
1c002298:	a8b1                	j	1c0022f4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb4a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00229a:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00229e:	002047b7          	lui	a5,0x204
1c0022a2:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0022a6:	17012683          	lw	a3,368(sp)
1c0022aa:	40d7d7b3          	sra	a5,a5,a3
1c0022ae:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0022b2:	cb85                	beqz	a5,1c0022e2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb38>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0022b4:	10000593          	li	a1,256
1c0022b8:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0022bc:	30061073          	csrw	mstatus,a2
1c0022c0:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0022c4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0022c8:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0022cc:	30047673          	csrrci	a2,mstatus,8
1c0022d0:	40472783          	lw	a5,1028(a4)
1c0022d4:	17012683          	lw	a3,368(sp)
1c0022d8:	40d7d7b3          	sra	a5,a5,a3
1c0022dc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0022e0:	fff1                	bnez	a5,1c0022bc <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb12>
1c0022e2:	4785                	li	a5,1
1c0022e4:	00d796b3          	sll	a3,a5,a3
1c0022e8:	002047b7          	lui	a5,0x204
1c0022ec:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0022f0:	30061073          	csrw	mstatus,a2
		/*============================= End Update Arg Pipeline =============================*/
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0022f4:	28c12083          	lw	ra,652(sp)
1c0022f8:	28812403          	lw	s0,648(sp)
1c0022fc:	28412483          	lw	s1,644(sp)
1c002300:	28012903          	lw	s2,640(sp)
1c002304:	27c12983          	lw	s3,636(sp)
1c002308:	27812a03          	lw	s4,632(sp)
1c00230c:	27412a83          	lw	s5,628(sp)
1c002310:	27012b03          	lw	s6,624(sp)
1c002314:	26c12b83          	lw	s7,620(sp)
1c002318:	26812c03          	lw	s8,616(sp)
1c00231c:	26412c83          	lw	s9,612(sp)
1c002320:	26012d03          	lw	s10,608(sp)
1c002324:	25c12d83          	lw	s11,604(sp)
1c002328:	29010113          	addi	sp,sp,656
1c00232c:	8082                	ret
1c00232e:	16c14783          	lbu	a5,364(sp)
1c002332:	0ff7f793          	andi	a5,a5,255
1c002336:	ac078ce3          	beqz	a5,1c001e0e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x664>
1c00233a:	c002                	sw	zero,0(sp)
1c00233c:	b389                	j	1c00207e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8d4>
			_SC_Out = 0;
1c00233e:	4601                	li	a2,0
1c002340:	b5dd                	j	1c002226 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa7c>

1c002342 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c002342:	d6010113          	addi	sp,sp,-672
1c002346:	28112e23          	sw	ra,668(sp)
1c00234a:	28812c23          	sw	s0,664(sp)
1c00234e:	28912a23          	sw	s1,660(sp)
1c002352:	29212823          	sw	s2,656(sp)
1c002356:	29312623          	sw	s3,652(sp)
1c00235a:	29412423          	sw	s4,648(sp)
1c00235e:	29512223          	sw	s5,644(sp)
1c002362:	29612023          	sw	s6,640(sp)
1c002366:	27712e23          	sw	s7,636(sp)
1c00236a:	27812c23          	sw	s8,632(sp)
1c00236e:	27912a23          	sw	s9,628(sp)
1c002372:	27a12823          	sw	s10,624(sp)
1c002376:	27b12623          	sw	s11,620(sp)
1c00237a:	dc36                	sw	a3,56(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 29:[9x1, 27:9x1, 9x1], 1]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (model_L1_Memory+26432);
1c00237c:	100006b7          	lui	a3,0x10000
1c002380:	01c6a303          	lw	t1,28(a3) # 1000001c <model_L1_Memory>
1c002384:	6699                	lui	a3,0x6
1c002386:	74068693          	addi	a3,a3,1856 # 6740 <__rt_stack_size+0x5f40>
1c00238a:	969a                	add	a3,a3,t1
1c00238c:	c7b6                	sw	a3,204(sp)
	KerArg0->W = (unsigned short int) (78);
1c00238e:	04e00f13          	li	t5,78
1c002392:	0de11823          	sh	t5,208(sp)
	KerArg0->H = (unsigned short int) (2);
1c002396:	4e89                	li	t4,2
1c002398:	0dd11923          	sh	t4,210(sp)
	KerArg0->Feat = (unsigned short int) (32);
1c00239c:	02000e13          	li	t3,32
1c0023a0:	0dc11a23          	sh	t3,212(sp)
	KerArg1->W = (unsigned short int) (80);
1c0023a4:	05000893          	li	a7,80
1c0023a8:	0b111023          	sh	a7,160(sp)
	KerArg1->UsedW = (unsigned short int) (80);
1c0023ac:	0b111123          	sh	a7,162(sp)
	KerArg1->H = (unsigned short int) (4);
1c0023b0:	4891                	li	a7,4
1c0023b2:	0b111223          	sh	a7,164(sp)
	KerArg1->UsedH = (unsigned short int) (4);
1c0023b6:	0b111323          	sh	a7,166(sp)
	KerArg1->InFeatures = (unsigned short int) (8);
1c0023ba:	48a1                	li	a7,8
1c0023bc:	0b111423          	sh	a7,168(sp)
	KerArg1->OutFeatures = (unsigned short int) (32);
1c0023c0:	0bc11523          	sh	t3,170(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (32);
1c0023c4:	0bc11623          	sh	t3,172(sp)
	KerArg1->Out = (int * __restrict__) (model_L1_Memory+26432);
1c0023c8:	dd36                	sw	a3,184(sp)
	KerArg1->Pad = (v4s) 0;
1c0023ca:	000078d7          	pv.add.sci.b	a7,zero,0
1c0023ce:	df46                	sw	a7,188(sp)
	KerArg2->In = (int *__restrict__) (model_L1_Memory+26432);
1c0023d0:	c136                	sw	a3,128(sp)
	KerArg2->Out = (void *__restrict__) (model_L1_Memory+26432);
1c0023d2:	c336                	sw	a3,132(sp)
	KerArg2->Feat = (unsigned short int) (32);
1c0023d4:	09c11423          	sh	t3,136(sp)
	KerArg2->W = (unsigned short int) (78);
1c0023d8:	09e11523          	sh	t5,138(sp)
	KerArg2->H = (unsigned short int) (2);
1c0023dc:	09d11623          	sh	t4,140(sp)
	KerArg2->Infos = (signed char *__restrict__) (model_L1_Memory+46400);
1c0023e0:	68ad                	lui	a7,0xb
1c0023e2:	54088893          	addi	a7,a7,1344 # b540 <__rt_stack_size+0xad40>
1c0023e6:	989a                	add	a7,a7,t1
1c0023e8:	cd46                	sw	a7,152(sp)
	KerArg3->In = (signed char * __restrict__) (model_L1_Memory+26432);
1c0023ea:	ccb6                	sw	a3,88(sp)
	KerArg3->W = (unsigned short int) (78);
1c0023ec:	07e11123          	sh	t5,98(sp)
	KerArg3->UsedW = (unsigned short int) (78);
1c0023f0:	07e11223          	sh	t5,100(sp)
	KerArg3->H = (unsigned short int) (2);
1c0023f4:	07d11323          	sh	t4,102(sp)
	KerArg3->UsedH = (unsigned short int) (2);
1c0023f8:	07d11423          	sh	t4,104(sp)
	KerArg3->Feat = (unsigned short int) (32);
1c0023fc:	07c11023          	sh	t3,96(sp)
	KerArg3->Pad = (v4s) 0;
1c002400:	00007f57          	pv.add.sci.b	t5,zero,0
1c002404:	dcfa                	sw	t5,120(sp)
	KerArg3->PoolMax = (unsigned char) (1);
1c002406:	4685                	li	a3,1
1c002408:	06d10523          	sb	a3,106(sp)
	KerArg3->DoScale = (unsigned char) (0);
1c00240c:	06010aa3          	sb	zero,117(sp)
	KerArg3->Infos = (signed char * __restrict__) (model_L1_Memory+46400);
1c002410:	dec6                	sw	a7,124(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002412:	30047e73          	csrrci	t3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002416:	002048b7          	lui	a7,0x204
1c00241a:	4008a883          	lw	a7,1024(a7) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00241e:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002422:	10068693          	addi	a3,a3,256 # b0100 <__L2+0x30100>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002426:	c156c6b3          	p.bset	a3,a3,0,21
1c00242a:	00204eb7          	lui	t4,0x204
1c00242e:	40dea023          	sw	a3,1024(t4) # 204400 <__L2+0x184400>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=1248; _LC_Out=39;
	_SPP_Out=0; _SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5120), 256, 0, &DmaR_Evt1);
1c002432:	6685                	lui	a3,0x1
1c002434:	40068693          	addi	a3,a3,1024 # 1400 <__rt_stack_size+0xc00>
1c002438:	9336                	add	t1,t1,a3
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00243a:	002046b7          	lui	a3,0x204
1c00243e:	4066a023          	sw	t1,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002442:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c002446:	25112023          	sw	a7,576(sp)
        copy->length = 0;
1c00244a:	24012823          	sw	zero,592(sp)
  __builtin_pulp_spr_write(reg, val);
1c00244e:	300e1073          	csrw	mstatus,t3
  if (copy->length == 0)
1c002452:	25012683          	lw	a3,592(sp)
1c002456:	c685                	beqz	a3,1c00247e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x13c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002458:	25812883          	lw	a7,600(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00245c:	02000613          	li	a2,32
1c002460:	002046b7          	lui	a3,0x204
1c002464:	06088a63          	beqz	a7,1c0024d8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x196>
1c002468:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00246c:	03c6e883          	p.elw	a7,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002470:	00c6a223          	sw	a2,4(a3)
1c002474:	25812883          	lw	a7,600(sp)
1c002478:	fe0898e3          	bnez	a7,1c002468 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x126>
1c00247c:	a8b1                	j	1c0024d8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x196>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00247e:	30047373          	csrrci	t1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002482:	002046b7          	lui	a3,0x204
1c002486:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c00248a:	24012883          	lw	a7,576(sp)
1c00248e:	4116d6b3          	sra	a3,a3,a7
1c002492:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002496:	ca85                	beqz	a3,1c0024c6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x184>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002498:	10000e13          	li	t3,256
1c00249c:	00204637          	lui	a2,0x204
  __builtin_pulp_spr_write(reg, val);
1c0024a0:	30031073          	csrw	mstatus,t1
1c0024a4:	01c62423          	sw	t3,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0024a8:	03c66683          	p.elw	a3,60(a2)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0024ac:	01c62223          	sw	t3,4(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0024b0:	30047373          	csrrci	t1,mstatus,8
1c0024b4:	40462683          	lw	a3,1028(a2)
1c0024b8:	24012883          	lw	a7,576(sp)
1c0024bc:	4116d6b3          	sra	a3,a3,a7
1c0024c0:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0024c4:	fef1                	bnez	a3,1c0024a0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x15e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0024c6:	4685                	li	a3,1
1c0024c8:	011698b3          	sll	a7,a3,a7
1c0024cc:	002046b7          	lui	a3,0x204
1c0024d0:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0024d4:	30031073          	csrw	mstatus,t1
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5376), 64, 0, &DmaR_Evt2);
1c0024d8:	100006b7          	lui	a3,0x10000
1c0024dc:	01c6a883          	lw	a7,28(a3) # 1000001c <model_L1_Memory>
1c0024e0:	6685                	lui	a3,0x1
1c0024e2:	50068693          	addi	a3,a3,1280 # 1500 <__rt_stack_size+0xd00>
1c0024e6:	98b6                	add	a7,a7,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0024e8:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0024ec:	00204637          	lui	a2,0x204
1c0024f0:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0024f4:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0024f8:	04068693          	addi	a3,a3,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0024fc:	c156c6b3          	p.bset	a3,a3,0,21
1c002500:	00204e37          	lui	t3,0x204
1c002504:	40de2023          	sw	a3,1024(t3) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002508:	002046b7          	lui	a3,0x204
1c00250c:	4116a023          	sw	a7,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002510:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c002514:	22c12023          	sw	a2,544(sp)
        copy->length = 0;
1c002518:	22012823          	sw	zero,560(sp)
  __builtin_pulp_spr_write(reg, val);
1c00251c:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c002520:	23012703          	lw	a4,560(sp)
1c002524:	c315                	beqz	a4,1c002548 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x206>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002526:	23812603          	lw	a2,568(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00252a:	02000693          	li	a3,32
1c00252e:	00204737          	lui	a4,0x204
1c002532:	ca25                	beqz	a2,1c0025a2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x260>
1c002534:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002538:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00253c:	00d72223          	sw	a3,4(a4)
1c002540:	23812603          	lw	a2,568(sp)
1c002544:	fa65                	bnez	a2,1c002534 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x1f2>
1c002546:	a8b1                	j	1c0025a2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x260>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002548:	300478f3          	csrrci	a7,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00254c:	00204737          	lui	a4,0x204
1c002550:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c002554:	22012603          	lw	a2,544(sp)
1c002558:	40c75733          	sra	a4,a4,a2
1c00255c:	fc173733          	p.bclr	a4,a4,30,1
1c002560:	cb05                	beqz	a4,1c002590 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x24e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002562:	10000313          	li	t1,256
1c002566:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c00256a:	30089073          	csrw	mstatus,a7
1c00256e:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002572:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002576:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00257a:	300478f3          	csrrci	a7,mstatus,8
1c00257e:	4046a703          	lw	a4,1028(a3)
1c002582:	22012603          	lw	a2,544(sp)
1c002586:	40c75733          	sra	a4,a4,a2
1c00258a:	fc173733          	p.bclr	a4,a4,30,1
1c00258e:	ff71                	bnez	a4,1c00256a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x228>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002590:	4705                	li	a4,1
1c002592:	00c71633          	sll	a2,a4,a2
1c002596:	00204737          	lui	a4,0x204
1c00259a:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00259e:	30089073          	csrw	mstatus,a7
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5440), 64, 0, &DmaR_Evt3);
1c0025a2:	10000737          	lui	a4,0x10000
1c0025a6:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c0025aa:	6705                	lui	a4,0x1
1c0025ac:	54070713          	addi	a4,a4,1344 # 1540 <__rt_stack_size+0xd40>
1c0025b0:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0025b2:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0025b6:	002046b7          	lui	a3,0x204
1c0025ba:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0025be:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0025c2:	04070713          	addi	a4,a4,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0025c6:	c1574733          	p.bset	a4,a4,0,21
1c0025ca:	00204337          	lui	t1,0x204
1c0025ce:	40e32023          	sw	a4,1024(t1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0025d2:	00204737          	lui	a4,0x204
1c0025d6:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0025da:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c0025de:	20d12023          	sw	a3,512(sp)
        copy->length = 0;
1c0025e2:	20012823          	sw	zero,528(sp)
  __builtin_pulp_spr_write(reg, val);
1c0025e6:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c0025ea:	21012783          	lw	a5,528(sp)
1c0025ee:	c395                	beqz	a5,1c002612 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2d0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0025f0:	21812683          	lw	a3,536(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0025f4:	02000713          	li	a4,32
1c0025f8:	002047b7          	lui	a5,0x204
1c0025fc:	caa5                	beqz	a3,1c00266c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x32a>
1c0025fe:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002602:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002606:	00e7a223          	sw	a4,4(a5)
1c00260a:	21812683          	lw	a3,536(sp)
1c00260e:	fae5                	bnez	a3,1c0025fe <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2bc>
1c002610:	a8b1                	j	1c00266c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x32a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002612:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002616:	002047b7          	lui	a5,0x204
1c00261a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00261e:	20012683          	lw	a3,512(sp)
1c002622:	40d7d7b3          	sra	a5,a5,a3
1c002626:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00262a:	cb85                	beqz	a5,1c00265a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x318>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00262c:	10000893          	li	a7,256
1c002630:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002634:	30061073          	csrw	mstatus,a2
1c002638:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00263c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002640:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002644:	30047673          	csrrci	a2,mstatus,8
1c002648:	40472783          	lw	a5,1028(a4)
1c00264c:	20012683          	lw	a3,512(sp)
1c002650:	40d7d7b3          	sra	a5,a5,a3
1c002654:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002658:	fff1                	bnez	a5,1c002634 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2f2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00265a:	4785                	li	a5,1
1c00265c:	00d796b3          	sll	a3,a5,a3
1c002660:	002047b7          	lui	a5,0x204
1c002664:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002668:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5504+0), 9216, 0, &DmaR_Evt4);
1c00266c:	c6ae                	sw	a1,76(sp)
1c00266e:	10000637          	lui	a2,0x10000
1c002672:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c002676:	00062303          	lw	t1,0(a2)
1c00267a:	6885                	lui	a7,0x1
1c00267c:	58088793          	addi	a5,a7,1408 # 1580 <__rt_stack_size+0xd80>
1c002680:	933e                	add	t1,t1,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002682:	30047e73          	csrrci	t3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002686:	002046b7          	lui	a3,0x204
1c00268a:	4006ae83          	lw	t4,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00268e:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002692:	6709                	lui	a4,0x2
1c002694:	40070713          	addi	a4,a4,1024 # 2400 <__rt_stack_size+0x1c00>
1c002698:	8f3e                	mv	t5,a5
1c00269a:	de072f33          	p.insert	t5,a4,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00269e:	c13f4733          	p.bset	a4,t5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0026a2:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0026a6:	00204f37          	lui	t5,0x204
1c0026aa:	40ef2023          	sw	a4,1024(t5) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0026ae:	00204737          	lui	a4,0x204
1c0026b2:	40672023          	sw	t1,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0026b6:	40b72023          	sw	a1,1024(a4)
        if (!merge) copy->id = id;
1c0026ba:	1fd12023          	sw	t4,480(sp)
        copy->length = 0;
1c0026be:	1e012823          	sw	zero,496(sp)
  __builtin_pulp_spr_write(reg, val);
1c0026c2:	300e1073          	csrw	mstatus,t3
	_N_Filter=0;
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+0), 2560, 4800, 320, 0, &DmaR_Evt5);
1c0026c6:	ca2a                	sw	a0,20(sp)
1c0026c8:	00062e03          	lw	t3,0(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0026cc:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0026d0:	4006a303          	lw	t1,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0026d4:	a0088893          	addi	a7,a7,-1536
1c0026d8:	00070737          	lui	a4,0x70
1c0026dc:	de08a733          	p.insert	a4,a7,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0026e0:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0026e4:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0026e8:	002048b7          	lui	a7,0x204
1c0026ec:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0026f0:	00204737          	lui	a4,0x204
1c0026f4:	41c72023          	sw	t3,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0026f8:	40a72023          	sw	a0,1024(a4)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0026fc:	12c00737          	lui	a4,0x12c00
1c002700:	14070713          	addi	a4,a4,320 # 12c00140 <__l1_end+0x2c000fc>
1c002704:	00204537          	lui	a0,0x204
1c002708:	40e52023          	sw	a4,1024(a0) # 204400 <__L2+0x184400>
        if (!merge) copy->id = id;
1c00270c:	1c612023          	sw	t1,448(sp)
        copy->length = 0;
1c002710:	1c012823          	sw	zero,464(sp)
  __builtin_pulp_spr_write(reg, val);
1c002714:	30059073          	csrw	mstatus,a1
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+46400), 9, 0, &DmaR_Evt6);
1c002718:	4218                	lw	a4,0(a2)
1c00271a:	662d                	lui	a2,0xb
1c00271c:	54060613          	addi	a2,a2,1344 # b540 <__rt_stack_size+0xad40>
1c002720:	9732                	add	a4,a4,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002722:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002726:	4006a683          	lw	a3,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00272a:	0097e793          	ori	a5,a5,9
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00272e:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002732:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002736:	002045b7          	lui	a1,0x204
1c00273a:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00273e:	002047b7          	lui	a5,0x204
1c002742:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002746:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c00274a:	1ad12023          	sw	a3,416(sp)
        copy->length = 0;
1c00274e:	1a012823          	sw	zero,432(sp)
  __builtin_pulp_spr_write(reg, val);
1c002752:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c002756:	1b012783          	lw	a5,432(sp)
1c00275a:	c395                	beqz	a5,1c00277e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x43c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00275c:	1b812683          	lw	a3,440(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002760:	02000713          	li	a4,32
1c002764:	002047b7          	lui	a5,0x204
1c002768:	caa5                	beqz	a3,1c0027d8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x496>
1c00276a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00276e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002772:	00e7a223          	sw	a4,4(a5)
1c002776:	1b812683          	lw	a3,440(sp)
1c00277a:	fae5                	bnez	a3,1c00276a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x428>
1c00277c:	a8b1                	j	1c0027d8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x496>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00277e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002782:	002047b7          	lui	a5,0x204
1c002786:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00278a:	1a012683          	lw	a3,416(sp)
1c00278e:	40d7d7b3          	sra	a5,a5,a3
1c002792:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002796:	cb85                	beqz	a5,1c0027c6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x484>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002798:	10000593          	li	a1,256
1c00279c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0027a0:	30061073          	csrw	mstatus,a2
1c0027a4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0027a8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0027ac:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0027b0:	30047673          	csrrci	a2,mstatus,8
1c0027b4:	40472783          	lw	a5,1028(a4)
1c0027b8:	1a012683          	lw	a3,416(sp)
1c0027bc:	40d7d7b3          	sra	a5,a5,a3
1c0027c0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0027c4:	fff1                	bnez	a5,1c0027a0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x45e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0027c6:	4785                	li	a5,1
1c0027c8:	00d796b3          	sll	a3,a5,a3
1c0027cc:	002047b7          	lui	a5,0x204
1c0027d0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0027d4:	30061073          	csrw	mstatus,a2
{
1c0027d8:	4c01                	li	s8,0
1c0027da:	c082                	sw	zero,64(sp)
1c0027dc:	4e000613          	li	a2,1248
1c0027e0:	c202                	sw	zero,4(sp)
1c0027e2:	c402                	sw	zero,8(sp)
1c0027e4:	4781                	li	a5,0
1c0027e6:	4c81                	li	s9,0
1c0027e8:	4d01                	li	s10,0
1c0027ea:	de02                	sw	zero,60(sp)
1c0027ec:	00204db7          	lui	s11,0x204
		}
		/*============================= End Prepare Tiles ===================================*/
		/*================================= Read Tiles ======================================*/
		AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
		if (_SN_Filter) {
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5504+9216*((D1Ind_Total+1)%2)),
1c0027f0:	10000ab7          	lui	s5,0x10000
1c0027f4:	6305                	lui	t1,0x1
1c0027f6:	58030313          	addi	t1,t1,1408 # 1580 <__rt_stack_size+0xd80>
1c0027fa:	c49a                	sw	t1,72(sp)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0027fc:	200d8b93          	addi	s7,s11,512 # 204200 <__L2+0x184200>
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002800:	8b5e                	mv	s6,s7
1c002802:	ab89                	j	1c002d54 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa12>
		_SN_Filter = 0;
1c002804:	4681                	li	a3,0
1c002806:	a385                	j	1c002d66 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa24>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002808:	30047573          	csrrci	a0,mstatus,8
1c00280c:	404da703          	lw	a4,1028(s11)
1c002810:	1e012583          	lw	a1,480(sp)
1c002814:	40b75733          	sra	a4,a4,a1
1c002818:	fc173733          	p.bclr	a4,a4,30,1
1c00281c:	c715                	beqz	a4,1c002848 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x506>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00281e:	10000813          	li	a6,256
  __builtin_pulp_spr_write(reg, val);
1c002822:	30051073          	csrw	mstatus,a0
1c002826:	010da423          	sw	a6,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00282a:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00282e:	010da223          	sw	a6,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002832:	30047573          	csrrci	a0,mstatus,8
1c002836:	404da703          	lw	a4,1028(s11)
1c00283a:	1e012583          	lw	a1,480(sp)
1c00283e:	40b75733          	sra	a4,a4,a1
1c002842:	fc173733          	p.bclr	a4,a4,30,1
1c002846:	ff71                	bnez	a4,1c002822 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4e0>
1c002848:	4705                	li	a4,1
1c00284a:	00b715b3          	sll	a1,a4,a1
1c00284e:	40bda223          	sw	a1,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c002852:	30051073          	csrw	mstatus,a0
		if (_SN_Filter) {
1c002856:	e2ad                	bnez	a3,1c0028b8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x576>
1c002858:	5572                	lw	a0,60(sp)
1c00285a:	02850713          	addi	a4,a0,40
1c00285e:	071e                	slli	a4,a4,0x7
1c002860:	d23a                	sw	a4,36(sp)
							_SN_In, 4800, _LN_In, 0, &DmaR_Evt5);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+2560*((D0Ind_Total)%2));
				KerArg1->Filter = (signed char * __restrict__) (model_L1_Memory+5504+((D0Ind)*72)+9216*((D1Ind_Total)%2));
1c002862:	01f55693          	srli	a3,a0,0x1f
1c002866:	00d50733          	add	a4,a0,a3
1c00286a:	fc173733          	p.bclr	a4,a4,30,1
1c00286e:	8f15                	sub	a4,a4,a3
1c002870:	00371693          	slli	a3,a4,0x3
1c002874:	9736                	add	a4,a4,a3
1c002876:	072a                	slli	a4,a4,0xa
1c002878:	45a6                	lw	a1,72(sp)
1c00287a:	972e                	add	a4,a4,a1
1c00287c:	d43a                	sw	a4,40(sp)
1c00287e:	0a850713          	addi	a4,a0,168
1c002882:	0716                	slli	a4,a4,0x5
1c002884:	ce3a                	sw	a4,28(sp)
1c002886:	04070693          	addi	a3,a4,64
1c00288a:	d636                	sw	a3,44(sp)
1c00288c:	c2ea                	sw	s10,68(sp)
1c00288e:	01dd0713          	addi	a4,s10,29
1c002892:	d83a                	sw	a4,48(sp)
1c002894:	01cd0893          	addi	a7,s10,28
1c002898:	d046                	sw	a7,32(sp)
1c00289a:	4f22                	lw	t5,8(sp)
1c00289c:	c87a                	sw	t5,16(sp)
1c00289e:	4312                	lw	t1,4(sp)
1c0028a0:	c41a                	sw	t1,8(sp)
1c0028a2:	c232                	sw	a2,4(sp)
1c0028a4:	4532                	lw	a0,12(sp)
1c0028a6:	cc2a                	sw	a0,24(sp)
1c0028a8:	c63e                	sw	a5,12(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0028aa:	0ff00493          	li	s1,255
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0028ae:	1c0077b7          	lui	a5,0x1c007
1c0028b2:	59e78a13          	addi	s4,a5,1438 # 1c00759e <KerParConv3x3Stride1_SQ8>
1c0028b6:	a4d9                	j	1c002b7c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x83a>
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+5504+9216*((D1Ind_Total+1)%2)),
1c0028b8:	4736                	lw	a4,76(sp)
1c0028ba:	4886                	lw	a7,64(sp)
1c0028bc:	01170533          	add	a0,a4,a7
1c0028c0:	5f72                	lw	t5,60(sp)
1c0028c2:	001f0713          	addi	a4,t5,1
1c0028c6:	01f75593          	srli	a1,a4,0x1f
1c0028ca:	972e                	add	a4,a4,a1
1c0028cc:	fc173733          	p.bclr	a4,a4,30,1
1c0028d0:	8f0d                	sub	a4,a4,a1
1c0028d2:	00371593          	slli	a1,a4,0x3
1c0028d6:	972e                	add	a4,a4,a1
1c0028d8:	072a                	slli	a4,a4,0xa
1c0028da:	4326                	lw	t1,72(sp)
1c0028dc:	971a                	add	a4,a4,t1
1c0028de:	01caa583          	lw	a1,28(s5) # 1000001c <model_L1_Memory>
1c0028e2:	972e                	add	a4,a4,a1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0028e4:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0028e8:	400da803          	lw	a6,1024(s11)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0028ec:	002b08b7          	lui	a7,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0028f0:	0116e6b3          	or	a3,a3,a7
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0028f4:	40dda023          	sw	a3,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0028f8:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0028fc:	40ada023          	sw	a0,1024(s11)
        if (!merge) copy->id = id;
1c002900:	1f012023          	sw	a6,480(sp)
        copy->length = 0;
1c002904:	1e012823          	sw	zero,496(sp)
  __builtin_pulp_spr_write(reg, val);
1c002908:	30059073          	csrw	mstatus,a1
1c00290c:	b7b1                	j	1c002858 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x516>
				} else if (!(T0Ind_Last)) {
1c00290e:	fe4d0793          	addi	a5,s10,-28
1c002912:	4896                	lw	a7,68(sp)
1c002914:	01178a63          	beq	a5,a7,1c002928 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5e6>
					_N_In = _N_In + (160)+(-115200); _LN_In = (320); _SN_In = (8*_LN_In); 
1c002918:	7791                	lui	a5,0xfffe4
1c00291a:	ea078793          	addi	a5,a5,-352 # fffe3ea0 <pulp__FC+0xfffe3ea1>
1c00291e:	9c3e                	add	s8,s8,a5
1c002920:	6f05                	lui	t5,0x1
1c002922:	a00f0813          	addi	a6,t5,-1536 # a00 <__rt_stack_size+0x200>
1c002926:	a0f1                	j	1c0029f2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
				} else if (!(D1Ind_Last)) {
1c002928:	5372                	lw	t1,60(sp)
1c00292a:	00132863          	p.beqimm	t1,1,1c00293a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5f8>
					_N_In = _N_In + (-4480)+(-115200); _LN_In = (320); _SN_In = (8*_LN_In); 
1c00292e:	55d2                	lw	a1,52(sp)
1c002930:	9c2e                	add	s8,s8,a1
1c002932:	6605                	lui	a2,0x1
1c002934:	a0060813          	addi	a6,a2,-1536 # a00 <__rt_stack_size+0x200>
1c002938:	a86d                	j	1c0029f2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
				_SN_In = 0;
1c00293a:	4801                	li	a6,0
1c00293c:	a85d                	j	1c0029f2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00293e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002942:	404da783          	lw	a5,1028(s11)
1c002946:	1c012683          	lw	a3,448(sp)
1c00294a:	40d7d7b3          	sra	a5,a5,a3
1c00294e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002952:	c795                	beqz	a5,1c00297e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x63c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002954:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c002958:	30061073          	csrw	mstatus,a2
1c00295c:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002960:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002964:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002968:	30047673          	csrrci	a2,mstatus,8
1c00296c:	404da783          	lw	a5,1028(s11)
1c002970:	1c012683          	lw	a3,448(sp)
1c002974:	40d7d7b3          	sra	a5,a5,a3
1c002978:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00297c:	fff1                	bnez	a5,1c002958 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x616>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00297e:	4785                	li	a5,1
1c002980:	00d796b3          	sll	a3,a5,a3
1c002984:	40dda223          	sw	a3,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c002988:	30061073          	csrw	mstatus,a2
				if (_SN_In) {
1c00298c:	08081563          	bnez	a6,1c002a16 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6d4>
				KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+2560*((D0Ind_Total)%2));
1c002990:	01caa683          	lw	a3,28(s5)
1c002994:	01f75613          	srli	a2,a4,0x1f
1c002998:	00c707b3          	add	a5,a4,a2
1c00299c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0029a0:	8f91                	sub	a5,a5,a2
1c0029a2:	00279713          	slli	a4,a5,0x2
1c0029a6:	97ba                	add	a5,a5,a4
1c0029a8:	07a6                	slli	a5,a5,0x9
1c0029aa:	97b6                	add	a5,a5,a3
1c0029ac:	cf3e                	sw	a5,156(sp)
				KerArg1->Filter = (signed char * __restrict__) (model_L1_Memory+5504+((D0Ind)*72)+9216*((D1Ind_Total)%2));
1c0029ae:	96ca                	add	a3,a3,s2
1c0029b0:	d936                	sw	a3,176(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0029b2:	089da223          	sw	s1,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0029b6:	009ba023          	sw	s1,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0029ba:	009b2623          	sw	s1,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0029be:	094da023          	sw	s4,128(s11)
1c0029c2:	0968                	addi	a0,sp,156
1c0029c4:	08ada023          	sw	a0,128(s11)
1c0029c8:	3d7040ef          	jal	ra,1c00759e <KerParConv3x3Stride1_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0029cc:	01cbe783          	p.elw	a5,28(s7)
			for (D0Ind=0; D0Ind<4; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0029d0:	0405                	addi	s0,s0,1
1c0029d2:	04890913          	addi	s2,s2,72
1c0029d6:	08442c63          	p.beqimm	s0,4,1c002a6e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x72c>
1c0029da:	8522                	mv	a0,s0
1c0029dc:	01940733          	add	a4,s0,s9
				if (!(D0Ind_Last)) {
1c0029e0:	f23427e3          	p.beqimm	s0,3,1c00290e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5cc>
					_N_In = _N_In + (38400); _LN_In = (320); _SN_In = (8*_LN_In); 
1c0029e4:	67a5                	lui	a5,0x9
1c0029e6:	60078793          	addi	a5,a5,1536 # 9600 <__rt_stack_size+0x8e00>
1c0029ea:	9c3e                	add	s8,s8,a5
1c0029ec:	6785                	lui	a5,0x1
1c0029ee:	a0078813          	addi	a6,a5,-1536 # a00 <__rt_stack_size+0x200>
  if (copy->length == 0)
1c0029f2:	1d012783          	lw	a5,464(sp)
1c0029f6:	d7a1                	beqz	a5,1c00293e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5fc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0029f8:	1d812683          	lw	a3,472(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0029fc:	02000793          	li	a5,32
1c002a00:	d6d1                	beqz	a3,1c00298c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64a>
1c002a02:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a06:	03cde683          	p.elw	a3,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002a0a:	00fda223          	sw	a5,4(s11)
1c002a0e:	1d812683          	lw	a3,472(sp)
1c002a12:	fae5                	bnez	a3,1c002a02 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6c0>
1c002a14:	bfa5                	j	1c00298c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64a>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+2560*((D0Ind_Total+1)%2)),
1c002a16:	954e                	add	a0,a0,s3
1c002a18:	01f55693          	srli	a3,a0,0x1f
1c002a1c:	9536                	add	a0,a0,a3
1c002a1e:	fc1537b3          	p.bclr	a5,a0,30,1
1c002a22:	8f95                	sub	a5,a5,a3
1c002a24:	00279693          	slli	a3,a5,0x2
1c002a28:	97b6                	add	a5,a5,a3
1c002a2a:	07a6                	slli	a5,a5,0x9
1c002a2c:	01caa683          	lw	a3,28(s5)
1c002a30:	97b6                	add	a5,a5,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a32:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002a36:	400da603          	lw	a2,1024(s11)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002a3a:	c7084833          	p.bset	a6,a6,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002a3e:	c1584833          	p.bset	a6,a6,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002a42:	410da023          	sw	a6,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002a46:	40fda023          	sw	a5,1024(s11)
1c002a4a:	48d2                	lw	a7,20(sp)
1c002a4c:	018887b3          	add	a5,a7,s8
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002a50:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c002a54:	12c007b7          	lui	a5,0x12c00
1c002a58:	14078793          	addi	a5,a5,320 # 12c00140 <__l1_end+0x2c000fc>
1c002a5c:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c002a60:	1cc12023          	sw	a2,448(sp)
        copy->length = 0;
1c002a64:	1c012823          	sw	zero,464(sp)
  __builtin_pulp_spr_write(reg, val);
1c002a68:	30069073          	csrw	mstatus,a3
1c002a6c:	b715                	j	1c002990 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64e>
1c002a6e:	0c91                	addi	s9,s9,4
				__CALL(KerParConv3x3Stride1_SQ8, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Scale = (unsigned char *__restrict__) (model_L1_Memory+5376+((D1Ind)*32));
1c002a70:	01ca8993          	addi	s3,s5,28
1c002a74:	0009a783          	lw	a5,0(s3)
1c002a78:	4f72                	lw	t5,28(sp)
1c002a7a:	01e78733          	add	a4,a5,t5
1c002a7e:	c93a                	sw	a4,144(sp)
			KerArg2->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+5440+((D1Ind)*32));
1c002a80:	5332                	lw	t1,44(sp)
1c002a82:	979a                	add	a5,a5,t1
1c002a84:	cb3e                	sw	a5,148(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002a86:	089da223          	sw	s1,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002a8a:	009ba023          	sw	s1,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002a8e:	009b2623          	sw	s1,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002a92:	1c0067b7          	lui	a5,0x1c006
1c002a96:	7b078793          	addi	a5,a5,1968 # 1c0067b0 <KerParReductIO_CC_SQ8>
1c002a9a:	08fda023          	sw	a5,128(s11)
1c002a9e:	0108                	addi	a0,sp,128
1c002aa0:	08ada023          	sw	a0,128(s11)
1c002aa4:	50d030ef          	jal	ra,1c0067b0 <KerParReductIO_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002aa8:	01cbe783          	p.elw	a5,28(s7)
			AT_FORK(gap_ncore(), (void *) KerParReductIO_CC_SQ8, (void *) KerArg2);
			__CALL(KerParReductIO_CC_SQ8, KerArg2);
			KerArg3->Out = (signed char * __restrict__) (model_L1_Memory+23936+1248*((T0Ind_Total)%2));
1c002aac:	01fd5793          	srli	a5,s10,0x1f
1c002ab0:	00fd0433          	add	s0,s10,a5
1c002ab4:	fc143433          	p.bclr	s0,s0,30,1
1c002ab8:	8c1d                	sub	s0,s0,a5
1c002aba:	4e000793          	li	a5,1248
1c002abe:	02f40433          	mul	s0,s0,a5
1c002ac2:	6919                	lui	s2,0x6
1c002ac4:	d8090913          	addi	s2,s2,-640 # 5d80 <__rt_stack_size+0x5580>
1c002ac8:	9922                	add	s2,s2,s0
1c002aca:	0009a783          	lw	a5,0(s3)
1c002ace:	97ca                	add	a5,a5,s2
1c002ad0:	cebe                	sw	a5,92(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002ad2:	089da223          	sw	s1,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002ad6:	009b2023          	sw	s1,0(s6)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002ada:	009b2623          	sw	s1,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002ade:	1c0087b7          	lui	a5,0x1c008
1c002ae2:	36478793          	addi	a5,a5,868 # 1c008364 <KerParPool2x2Stride2_ReLU_SQ8>
1c002ae6:	08fda023          	sw	a5,128(s11)
1c002aea:	08a8                	addi	a0,sp,88
1c002aec:	08ada023          	sw	a0,128(s11)
1c002af0:	075050ef          	jal	ra,1c008364 <KerParPool2x2Stride2_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002af4:	01cbe783          	p.elw	a5,28(s7)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_ReLU_SQ8, (void *) KerArg3);
			__CALL(KerParPool2x2Stride2_ReLU_SQ8, KerArg3);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c002af8:	4522                	lw	a0,8(sp)
1c002afa:	e969                	bnez	a0,1c002bcc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x88a>
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c002afc:	45c2                	lw	a1,16(sp)
1c002afe:	40059463          	bnez	a1,1c002f06 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xbc4>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+174264+1248*((T0Ind_Total+-1)%2)),
						_SP_Out, 1131, _LP_Out, 1, &UchanHR1);
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+174264+1248*((T0Ind_Total)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+23936+1248*((T0Ind_Total)%2)),
1c002b02:	1c00f7b7          	lui	a5,0x1c00f
1c002b06:	5787a783          	lw	a5,1400(a5) # 1c00f578 <model_L2_Memory>
1c002b0a:	943e                	add	s0,s0,a5
1c002b0c:	0002b7b7          	lui	a5,0x2b
1c002b10:	8b878793          	addi	a5,a5,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c002b14:	97a2                	add	a5,a5,s0
1c002b16:	01caa703          	lw	a4,28(s5)
1c002b1a:	993a                	add	s2,s2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b1c:	300476f3          	csrrci	a3,mstatus,8
    if (size < max_len)
1c002b20:	4512                	lw	a0,4(sp)
1c002b22:	01051593          	slli	a1,a0,0x10
1c002b26:	1805ca63          	bltz	a1,1c002cba <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x978>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002b2a:	400da603          	lw	a2,1024(s11)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c002b2e:	00020737          	lui	a4,0x20
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002b32:	de052733          	p.insert	a4,a0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002b36:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002b3a:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002b3e:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002b42:	412da023          	sw	s2,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002b46:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c002b4a:	18c12023          	sw	a2,384(sp)
        copy->length = 0;
1c002b4e:	18012823          	sw	zero,400(sp)
  __builtin_pulp_spr_write(reg, val);
1c002b52:	30069073          	csrw	mstatus,a3
			_SPP_Out = _SP_Out;_LPP_Out = _LP_Out;
			_P_Out = _C_Out;_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c002b56:	5f02                	lw	t5,32(sp)
1c002b58:	23af0b63          	beq	t5,s10,1c002d8e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa4c>
				_C_Out = _C_Out + (39); _LC_Out = (39); _SC_Out = (32*_LC_Out); 
1c002b5c:	4332                	lw	t1,12(sp)
1c002b5e:	02730793          	addi	a5,t1,39
		for (T0Ind=0; T0Ind<29; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002b62:	0d05                	addi	s10,s10,1
1c002b64:	cc1a                	sw	t1,24(sp)
1c002b66:	4522                	lw	a0,8(sp)
1c002b68:	c82a                	sw	a0,16(sp)
1c002b6a:	55c2                	lw	a1,48(sp)
1c002b6c:	1da58d63          	beq	a1,s10,1c002d46 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa04>
1c002b70:	4592                	lw	a1,4(sp)
1c002b72:	c42e                	sw	a1,8(sp)
				_C_Out = _C_Out + (39); _LC_Out = (39); _SC_Out = (32*_LC_Out); 
1c002b74:	4e000613          	li	a2,1248
1c002b78:	c232                	sw	a2,4(sp)
1c002b7a:	c63e                	sw	a5,12(sp)
			KerArg0->Bias = (void * __restrict__) (model_L1_Memory+5120+((D1Ind)*128));
1c002b7c:	01caa783          	lw	a5,28(s5)
1c002b80:	5692                	lw	a3,36(sp)
1c002b82:	00d78733          	add	a4,a5,a3
1c002b86:	cdba                	sw	a4,216(sp)
			KerArg0->NormBias = (unsigned char) (((char *)(model_L1_Memory+46400))[5]);
1c002b88:	672d                	lui	a4,0xb
1c002b8a:	97ba                	add	a5,a5,a4
1c002b8c:	5457c783          	lbu	a5,1349(a5)
1c002b90:	0cf10e23          	sb	a5,220(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002b94:	089da223          	sw	s1,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002b98:	009ba023          	sw	s1,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002b9c:	009b2623          	sw	s1,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002ba0:	1c007737          	lui	a4,0x1c007
1c002ba4:	85e70713          	addi	a4,a4,-1954 # 1c00685e <KerParSetBiasB32_SQ8>
1c002ba8:	08eda023          	sw	a4,128(s11)
1c002bac:	01e8                	addi	a0,sp,204
1c002bae:	08ada023          	sw	a0,128(s11)
1c002bb2:	4ad030ef          	jal	ra,1c00685e <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002bb6:	01cbe783          	p.elw	a5,28(s7)
1c002bba:	5922                	lw	s2,40(sp)
			for (D0Ind=0; D0Ind<4; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c002bbc:	4401                	li	s0,0
					_N_In = _N_In + (-4480)+(-115200); _LN_In = (320); _SN_In = (8*_LN_In); 
1c002bbe:	778d                	lui	a5,0xfffe3
1c002bc0:	c8078793          	addi	a5,a5,-896 # fffe2c80 <pulp__FC+0xfffe2c81>
1c002bc4:	da3e                	sw	a5,52(sp)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+2560*((D0Ind_Total+1)%2)),
1c002bc6:	001c8993          	addi	s3,s9,1
1c002bca:	bd01                	j	1c0029da <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x698>
  if (copy->length == 0)
1c002bcc:	19012783          	lw	a5,400(sp)
1c002bd0:	c385                	beqz	a5,1c002bf0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8ae>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002bd2:	19812703          	lw	a4,408(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002bd6:	02000793          	li	a5,32
1c002bda:	c335                	beqz	a4,1c002c3e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8fc>
1c002bdc:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002be0:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002be4:	00fda223          	sw	a5,4(s11)
1c002be8:	19812703          	lw	a4,408(sp)
1c002bec:	fb65                	bnez	a4,1c002bdc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x89a>
1c002bee:	a881                	j	1c002c3e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8fc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002bf0:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002bf4:	404da783          	lw	a5,1028(s11)
1c002bf8:	18012703          	lw	a4,384(sp)
1c002bfc:	40e7d7b3          	sra	a5,a5,a4
1c002c00:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002c04:	c795                	beqz	a5,1c002c30 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8ee>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c06:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c002c0a:	30069073          	csrw	mstatus,a3
1c002c0e:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c12:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002c16:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002c1a:	300476f3          	csrrci	a3,mstatus,8
1c002c1e:	404da783          	lw	a5,1028(s11)
1c002c22:	18012703          	lw	a4,384(sp)
1c002c26:	40e7d7b3          	sra	a5,a5,a4
1c002c2a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002c2e:	fff1                	bnez	a5,1c002c0a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8c8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002c30:	4785                	li	a5,1
1c002c32:	00e79733          	sll	a4,a5,a4
1c002c36:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c002c3a:	30069073          	csrw	mstatus,a3
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c002c3e:	4542                	lw	a0,16(sp)
1c002c40:	c50d                	beqz	a0,1c002c6a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x928>
1c002c42:	17c14783          	lbu	a5,380(sp)
1c002c46:	0ff7f793          	andi	a5,a5,255
1c002c4a:	e385                	bnez	a5,1c002c6a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x928>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c4c:	4709                	li	a4,2
1c002c4e:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c52:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002c56:	00eda223          	sw	a4,4(s11)
1c002c5a:	17c14783          	lbu	a5,380(sp)
1c002c5e:	0ff7f793          	andi	a5,a5,255
1c002c62:	d7f5                	beqz	a5,1c002c4e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x90c>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+174264+1248*((T0Ind_Total+-1)%2)),
1c002c64:	45a2                	lw	a1,8(sp)
1c002c66:	e8058ee3          	beqz	a1,1c002b02 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c002c6a:	fffd0793          	addi	a5,s10,-1
1c002c6e:	01f7d713          	srli	a4,a5,0x1f
1c002c72:	97ba                	add	a5,a5,a4
1c002c74:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002c78:	8f99                	sub	a5,a5,a4
1c002c7a:	4e000713          	li	a4,1248
1c002c7e:	0002b637          	lui	a2,0x2b
1c002c82:	8b860613          	addi	a2,a2,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c002c86:	42e78633          	p.mac	a2,a5,a4
1c002c8a:	1c00f7b7          	lui	a5,0x1c00f
1c002c8e:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
1c002c92:	0e010893          	addi	a7,sp,224
1c002c96:	4801                	li	a6,0
1c002c98:	02700793          	li	a5,39
1c002c9c:	46b00713          	li	a4,1131
1c002ca0:	46a2                	lw	a3,8(sp)
1c002ca2:	962e                	add	a2,a2,a1
1c002ca4:	5f62                	lw	t5,56(sp)
1c002ca6:	4362                	lw	t1,24(sp)
1c002ca8:	006f05b3          	add	a1,t5,t1
1c002cac:	1c00f537          	lui	a0,0x1c00f
1c002cb0:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c002cb4:	082070ef          	jal	ra,1c009d36 <pi_cl_ram_copy_2d>
1c002cb8:	b5a9                	j	1c002b02 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002cba:	6721                	lui	a4,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002cbc:	00320637          	lui	a2,0x320
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c002cc0:	18c12223          	sw	a2,388(sp)
    cmd->loc_addr = loc;
1c002cc4:	19212a23          	sw	s2,404(sp)
    cmd->ext_addr = ext;
1c002cc8:	18f12c23          	sw	a5,408(sp)
    cmd->size = len;
1c002ccc:	4612                	lw	a2,4(sp)
1c002cce:	18c12423          	sw	a2,392(sp)
    cmd->stride = stride;
1c002cd2:	18e12623          	sw	a4,396(sp)
    cmd->length = length;
1c002cd6:	18e12823          	sw	a4,400(sp)
    cmd->id = tid;
1c002cda:	577d                	li	a4,-1
1c002cdc:	18e12023          	sw	a4,384(sp)
    cmd->next = NULL;
1c002ce0:	18012e23          	sw	zero,412(sp)
    if (__rt_dma_first_pending)
1c002ce4:	01402703          	lw	a4,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002ce8:	cb09                	beqz	a4,1c002cfa <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b8>
        __rt_dma_last_pending->next = cmd;
1c002cea:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002cee:	0318                	addi	a4,sp,384
1c002cf0:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c002cf2:	031c                	addi	a5,sp,384
1c002cf4:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002cf8:	bda9                	j	1c002b52 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x810>
    uint32_t iter_length = (len < length) ? len : length;
1c002cfa:	6721                	lui	a4,0x8
1c002cfc:	4892                	lw	a7,4(sp)
1c002cfe:	04e8d733          	p.minu	a4,a7,a4
        cmd->loc_addr += iter_length;
1c002d02:	00e90633          	add	a2,s2,a4
1c002d06:	18c12a23          	sw	a2,404(sp)
        cmd->ext_addr += stride;
1c002d0a:	00033637          	lui	a2,0x33
1c002d0e:	8b860613          	addi	a2,a2,-1864 # 328b8 <__L1Cl+0x228b8>
1c002d12:	9432                	add	s0,s0,a2
1c002d14:	18812c23          	sw	s0,408(sp)
        cmd->size -= iter_length;
1c002d18:	40e88733          	sub	a4,a7,a4
1c002d1c:	18e12423          	sw	a4,392(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002d20:	400da703          	lw	a4,1024(s11)
        cmd->id = plp_dma_counter_alloc();
1c002d24:	18e12023          	sw	a4,384(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002d28:	00328737          	lui	a4,0x328
1c002d2c:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002d30:	412da023          	sw	s2,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002d34:	40fda023          	sw	a5,1024(s11)
        if (cmd->length != 0)
1c002d38:	19012783          	lw	a5,400(sp)
1c002d3c:	dbdd                	beqz	a5,1c002cf2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b0>
            __rt_dma_first_pending = cmd;
1c002d3e:	031c                	addi	a5,sp,384
1c002d40:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002d44:	b77d                	j	1c002cf2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b0>
				_C_Out = _C_Out + (39); _LC_Out = (39); _SC_Out = (32*_LC_Out); 
1c002d46:	4e000613          	li	a2,1248
	for (D1Ind=0; D1Ind<2; D1Ind++, D1Ind_Total++) { /* Iteration on D1 */
1c002d4a:	5772                	lw	a4,60(sp)
1c002d4c:	0705                	addi	a4,a4,1
1c002d4e:	de3a                	sw	a4,60(sp)
1c002d50:	04272b63          	p.beqimm	a4,2,1c002da6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa64>
		if (!(D1Ind_Last)) {
1c002d54:	5572                	lw	a0,60(sp)
1c002d56:	aa1527e3          	p.beqimm	a0,1,1c002804 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4c2>
			_N_Filter = _N_Filter + (9216); _SN_Filter = (9216); 
1c002d5a:	6689                	lui	a3,0x2
1c002d5c:	40068693          	addi	a3,a3,1024 # 2400 <__rt_stack_size+0x1c00>
1c002d60:	4586                	lw	a1,64(sp)
1c002d62:	95b6                	add	a1,a1,a3
1c002d64:	c0ae                	sw	a1,64(sp)
  if (copy->length == 0)
1c002d66:	1f012703          	lw	a4,496(sp)
1c002d6a:	a8070fe3          	beqz	a4,1c002808 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4c6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002d6e:	1f812583          	lw	a1,504(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002d72:	02000713          	li	a4,32
1c002d76:	ae0580e3          	beqz	a1,1c002856 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x514>
1c002d7a:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002d7e:	03cde583          	p.elw	a1,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002d82:	00eda223          	sw	a4,4(s11)
1c002d86:	1f812583          	lw	a1,504(sp)
1c002d8a:	f9e5                	bnez	a1,1c002d7a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa38>
1c002d8c:	b4e9                	j	1c002856 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x514>
			} else if (!(D1Ind_Last)) {
1c002d8e:	5672                	lw	a2,60(sp)
1c002d90:	16162863          	p.beqimm	a2,1,1c002f00 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xbbe>
				_C_Out = _C_Out + (36192)+(-1092); _LC_Out = (39); _SC_Out = (32*_LC_Out); 
1c002d94:	67a5                	lui	a5,0x9
1c002d96:	91c78793          	addi	a5,a5,-1764 # 891c <__rt_stack_size+0x811c>
1c002d9a:	46b2                	lw	a3,12(sp)
1c002d9c:	97b6                	add	a5,a5,a3
1c002d9e:	4e000613          	li	a2,1248
		for (T0Ind=0; T0Ind<29; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002da2:	0d05                	addi	s10,s10,1
1c002da4:	b75d                	j	1c002d4a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa08>
  if (copy->length == 0)
1c002da6:	19012783          	lw	a5,400(sp)
1c002daa:	c395                	beqz	a5,1c002dce <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa8c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002dac:	19812683          	lw	a3,408(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002db0:	02000713          	li	a4,32
1c002db4:	002047b7          	lui	a5,0x204
1c002db8:	caa5                	beqz	a3,1c002e28 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xae6>
1c002dba:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002dbe:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002dc2:	00e7a223          	sw	a4,4(a5)
1c002dc6:	19812683          	lw	a3,408(sp)
1c002dca:	fae5                	bnez	a3,1c002dba <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa78>
1c002dcc:	a8b1                	j	1c002e28 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xae6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002dce:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002dd2:	002047b7          	lui	a5,0x204
1c002dd6:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c002dda:	18012683          	lw	a3,384(sp)
1c002dde:	40d7d7b3          	sra	a5,a5,a3
1c002de2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002de6:	cb85                	beqz	a5,1c002e16 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xad4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002de8:	10000593          	li	a1,256
1c002dec:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002df0:	30061073          	csrw	mstatus,a2
1c002df4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002df8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002dfc:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002e00:	30047673          	csrrci	a2,mstatus,8
1c002e04:	40472783          	lw	a5,1028(a4)
1c002e08:	18012683          	lw	a3,384(sp)
1c002e0c:	40d7d7b3          	sra	a5,a5,a3
1c002e10:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002e14:	fff1                	bnez	a5,1c002df0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xaae>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002e16:	4785                	li	a5,1
1c002e18:	00d796b3          	sll	a3,a5,a3
1c002e1c:	002047b7          	lui	a5,0x204
1c002e20:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002e24:	30061073          	csrw	mstatus,a2
		/*================================= Update Arg Pipeline =============================*/
		/*============================= End Update Arg Pipeline =============================*/
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c002e28:	47a2                	lw	a5,8(sp)
1c002e2a:	c785                	beqz	a5,1c002e52 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb10>
1c002e2c:	17c14783          	lbu	a5,380(sp)
1c002e30:	0ff7f793          	andi	a5,a5,255
1c002e34:	ef99                	bnez	a5,1c002e52 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb10>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002e36:	4689                	li	a3,2
1c002e38:	00204737          	lui	a4,0x204
1c002e3c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002e40:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002e44:	00d72223          	sw	a3,4(a4)
1c002e48:	17c14783          	lbu	a5,380(sp)
1c002e4c:	0ff7f793          	andi	a5,a5,255
1c002e50:	d7f5                	beqz	a5,1c002e3c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xafa>
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+174264+1248*((T0Ind_Total+-1)%2)), _SP_Out, 1131, _LP_Out, 1, &UchanHR1);
1c002e52:	fffd0793          	addi	a5,s10,-1
1c002e56:	01f7d713          	srli	a4,a5,0x1f
1c002e5a:	97ba                	add	a5,a5,a4
1c002e5c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002e60:	8f99                	sub	a5,a5,a4
1c002e62:	4e000713          	li	a4,1248
1c002e66:	0002b637          	lui	a2,0x2b
1c002e6a:	8b860613          	addi	a2,a2,-1864 # 2a8b8 <__L1Cl+0x1a8b8>
1c002e6e:	42e78633          	p.mac	a2,a5,a4
1c002e72:	1c00f7b7          	lui	a5,0x1c00f
1c002e76:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
1c002e7a:	0e010893          	addi	a7,sp,224
1c002e7e:	4801                	li	a6,0
1c002e80:	02700793          	li	a5,39
1c002e84:	46b00713          	li	a4,1131
1c002e88:	4692                	lw	a3,4(sp)
1c002e8a:	962e                	add	a2,a2,a1
1c002e8c:	5f62                	lw	t5,56(sp)
1c002e8e:	4332                	lw	t1,12(sp)
1c002e90:	006f05b3          	add	a1,t5,t1
1c002e94:	1c00f537          	lui	a0,0x1c00f
1c002e98:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c002e9c:	69b060ef          	jal	ra,1c009d36 <pi_cl_ram_copy_2d>
1c002ea0:	17c14783          	lbu	a5,380(sp)
1c002ea4:	0ff7f793          	andi	a5,a5,255
1c002ea8:	ef99                	bnez	a5,1c002ec6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb84>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002eaa:	4689                	li	a3,2
1c002eac:	00204737          	lui	a4,0x204
1c002eb0:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002eb4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002eb8:	00d72223          	sw	a3,4(a4)
1c002ebc:	17c14783          	lbu	a5,380(sp)
1c002ec0:	0ff7f793          	andi	a5,a5,255
1c002ec4:	d7f5                	beqz	a5,1c002eb0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb6e>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait current uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c002ec6:	29c12083          	lw	ra,668(sp)
1c002eca:	29812403          	lw	s0,664(sp)
1c002ece:	29412483          	lw	s1,660(sp)
1c002ed2:	29012903          	lw	s2,656(sp)
1c002ed6:	28c12983          	lw	s3,652(sp)
1c002eda:	28812a03          	lw	s4,648(sp)
1c002ede:	28412a83          	lw	s5,644(sp)
1c002ee2:	28012b03          	lw	s6,640(sp)
1c002ee6:	27c12b83          	lw	s7,636(sp)
1c002eea:	27812c03          	lw	s8,632(sp)
1c002eee:	27412c83          	lw	s9,628(sp)
1c002ef2:	27012d03          	lw	s10,624(sp)
1c002ef6:	26c12d83          	lw	s11,620(sp)
1c002efa:	2a010113          	addi	sp,sp,672
1c002efe:	8082                	ret
1c002f00:	47b2                	lw	a5,12(sp)
			_SC_Out = 0;
1c002f02:	4601                	li	a2,0
1c002f04:	bd79                	j	1c002da2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa60>
1c002f06:	17c14783          	lbu	a5,380(sp)
1c002f0a:	0ff7f793          	andi	a5,a5,255
1c002f0e:	be079ae3          	bnez	a5,1c002b02 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c002f12:	bb2d                	j	1c002c4c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x90a>

1c002f14 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c002f14:	d6010113          	addi	sp,sp,-672
1c002f18:	28112e23          	sw	ra,668(sp)
1c002f1c:	28812c23          	sw	s0,664(sp)
1c002f20:	28912a23          	sw	s1,660(sp)
1c002f24:	29212823          	sw	s2,656(sp)
1c002f28:	29312623          	sw	s3,652(sp)
1c002f2c:	29412423          	sw	s4,648(sp)
1c002f30:	29512223          	sw	s5,644(sp)
1c002f34:	29612023          	sw	s6,640(sp)
1c002f38:	27712e23          	sw	s7,636(sp)
1c002f3c:	27812c23          	sw	s8,632(sp)
1c002f40:	27912a23          	sw	s9,628(sp)
1c002f44:	27a12823          	sw	s10,624(sp)
1c002f48:	27b12623          	sw	s11,620(sp)
1c002f4c:	84aa                	mv	s1,a0
1c002f4e:	c6b6                	sw	a3,76(sp)
1c002f50:	8442                	mv	s0,a6
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 4:[9x1, 2:9x1, 9x1], 1]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (model_L1_Memory+10800);
1c002f52:	100006b7          	lui	a3,0x10000
1c002f56:	01c6a803          	lw	a6,28(a3) # 1000001c <model_L1_Memory>
1c002f5a:	668d                	lui	a3,0x3
1c002f5c:	a3068693          	addi	a3,a3,-1488 # 2a30 <__rt_stack_size+0x2230>
1c002f60:	96c2                	add	a3,a3,a6
1c002f62:	c7b6                	sw	a3,204(sp)
	KerArg0->W = (unsigned short int) (36);
1c002f64:	02400313          	li	t1,36
1c002f68:	0c611823          	sh	t1,208(sp)
	KerArg0->Feat = (unsigned short int) (32);
1c002f6c:	02000893          	li	a7,32
1c002f70:	0d111a23          	sh	a7,212(sp)
	KerArg1->W = (unsigned short int) (39);
1c002f74:	02700513          	li	a0,39
1c002f78:	0aa11023          	sh	a0,160(sp)
	KerArg1->UsedW = (unsigned short int) (38);
1c002f7c:	02600513          	li	a0,38
1c002f80:	0aa11123          	sh	a0,162(sp)
	KerArg1->InFeatures = (unsigned short int) (4);
1c002f84:	4511                	li	a0,4
1c002f86:	0aa11423          	sh	a0,168(sp)
	KerArg1->OutFeatures = (unsigned short int) (32);
1c002f8a:	0b111523          	sh	a7,170(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (4);
1c002f8e:	0aa11623          	sh	a0,172(sp)
	KerArg1->Out = (int * __restrict__) (model_L1_Memory+10800);
1c002f92:	dd36                	sw	a3,184(sp)
	KerArg1->Pad = (v4s) 0;
1c002f94:	00007557          	pv.add.sci.b	a0,zero,0
1c002f98:	df2a                	sw	a0,188(sp)
	KerArg2->In = (int *__restrict__) (model_L1_Memory+10800);
1c002f9a:	c136                	sw	a3,128(sp)
	KerArg2->Out = (void *__restrict__) (model_L1_Memory+10800);
1c002f9c:	c336                	sw	a3,132(sp)
	KerArg2->Feat = (unsigned short int) (32);
1c002f9e:	09111423          	sh	a7,136(sp)
	KerArg2->W = (unsigned short int) (36);
1c002fa2:	08611523          	sh	t1,138(sp)
	KerArg2->Infos = (signed char *__restrict__) (model_L1_Memory+47664);
1c002fa6:	6531                	lui	a0,0xc
1c002fa8:	a3050513          	addi	a0,a0,-1488 # ba30 <__rt_stack_size+0xb230>
1c002fac:	9542                	add	a0,a0,a6
1c002fae:	cd2a                	sw	a0,152(sp)
	KerArg3->In = (signed char * __restrict__) (model_L1_Memory+10800);
1c002fb0:	ccb6                	sw	a3,88(sp)
	KerArg3->W = (unsigned short int) (36);
1c002fb2:	06611123          	sh	t1,98(sp)
	KerArg3->UsedW = (unsigned short int) (36);
1c002fb6:	06611223          	sh	t1,100(sp)
	KerArg3->Feat = (unsigned short int) (32);
1c002fba:	07111023          	sh	a7,96(sp)
	KerArg3->Pad = (v4s) 0;
1c002fbe:	000076d7          	pv.add.sci.b	a3,zero,0
1c002fc2:	dcb6                	sw	a3,120(sp)
	KerArg3->PoolMax = (unsigned char) (1);
1c002fc4:	4685                	li	a3,1
1c002fc6:	06d10523          	sb	a3,106(sp)
	KerArg3->DoScale = (unsigned char) (0);
1c002fca:	06010aa3          	sb	zero,117(sp)
	KerArg3->Infos = (signed char * __restrict__) (model_L1_Memory+47664);
1c002fce:	deaa                	sw	a0,124(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002fd0:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002fd4:	00204537          	lui	a0,0x204
1c002fd8:	40052503          	lw	a0,1024(a0) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002fdc:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002fe0:	20068693          	addi	a3,a3,512 # b0200 <__L2+0x30200>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002fe4:	c156c6b3          	p.bset	a3,a3,0,21
1c002fe8:	00204337          	lui	t1,0x204
1c002fec:	40d32023          	sw	a3,1024(t1) # 204400 <__L2+0x184400>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=2304; _LC_Out=72;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3120), 512, 0, &DmaR_Evt1);
1c002ff0:	6685                	lui	a3,0x1
1c002ff2:	c3068693          	addi	a3,a3,-976 # c30 <__rt_stack_size+0x430>
1c002ff6:	9836                	add	a6,a6,a3
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002ff8:	002046b7          	lui	a3,0x204
1c002ffc:	4106a023          	sw	a6,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003000:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c003004:	24a12023          	sw	a0,576(sp)
        copy->length = 0;
1c003008:	24012823          	sw	zero,592(sp)
  __builtin_pulp_spr_write(reg, val);
1c00300c:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c003010:	25012683          	lw	a3,592(sp)
1c003014:	c295                	beqz	a3,1c003038 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x124>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003016:	25812503          	lw	a0,600(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00301a:	02000613          	li	a2,32
1c00301e:	002046b7          	lui	a3,0x204
1c003022:	c925                	beqz	a0,1c003092 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x17e>
1c003024:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003028:	03c6e503          	p.elw	a0,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00302c:	00c6a223          	sw	a2,4(a3)
1c003030:	25812503          	lw	a0,600(sp)
1c003034:	f965                	bnez	a0,1c003024 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x110>
1c003036:	a8b1                	j	1c003092 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x17e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003038:	30047873          	csrrci	a6,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00303c:	002046b7          	lui	a3,0x204
1c003040:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c003044:	24012603          	lw	a2,576(sp)
1c003048:	40c6d6b3          	sra	a3,a3,a2
1c00304c:	fc16b6b3          	p.bclr	a3,a3,30,1
1c003050:	ca85                	beqz	a3,1c003080 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x16c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003052:	10000893          	li	a7,256
1c003056:	00204537          	lui	a0,0x204
  __builtin_pulp_spr_write(reg, val);
1c00305a:	30081073          	csrw	mstatus,a6
1c00305e:	01152423          	sw	a7,8(a0) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003062:	03c56683          	p.elw	a3,60(a0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003066:	01152223          	sw	a7,4(a0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00306a:	30047873          	csrrci	a6,mstatus,8
1c00306e:	40452683          	lw	a3,1028(a0)
1c003072:	24012603          	lw	a2,576(sp)
1c003076:	40c6d6b3          	sra	a3,a3,a2
1c00307a:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00307e:	fef1                	bnez	a3,1c00305a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x146>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003080:	4685                	li	a3,1
1c003082:	00c69633          	sll	a2,a3,a2
1c003086:	002046b7          	lui	a3,0x204
1c00308a:	40c6a223          	sw	a2,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00308e:	30081073          	csrw	mstatus,a6
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3632), 128, 0, &DmaR_Evt2);
1c003092:	100006b7          	lui	a3,0x10000
1c003096:	01c6a503          	lw	a0,28(a3) # 1000001c <model_L1_Memory>
1c00309a:	6685                	lui	a3,0x1
1c00309c:	e3068693          	addi	a3,a3,-464 # e30 <__rt_stack_size+0x630>
1c0030a0:	9536                	add	a0,a0,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0030a2:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0030a6:	00204637          	lui	a2,0x204
1c0030aa:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0030ae:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0030b2:	08068693          	addi	a3,a3,128 # b0080 <__L2+0x30080>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0030b6:	c156c6b3          	p.bset	a3,a3,0,21
1c0030ba:	002048b7          	lui	a7,0x204
1c0030be:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0030c2:	002046b7          	lui	a3,0x204
1c0030c6:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0030ca:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c0030ce:	22c12023          	sw	a2,544(sp)
        copy->length = 0;
1c0030d2:	22012823          	sw	zero,560(sp)
  __builtin_pulp_spr_write(reg, val);
1c0030d6:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c0030da:	23012703          	lw	a4,560(sp)
1c0030de:	c315                	beqz	a4,1c003102 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x1ee>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0030e0:	23812603          	lw	a2,568(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0030e4:	02000693          	li	a3,32
1c0030e8:	00204737          	lui	a4,0x204
1c0030ec:	ca25                	beqz	a2,1c00315c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x248>
1c0030ee:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0030f2:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0030f6:	00d72223          	sw	a3,4(a4)
1c0030fa:	23812603          	lw	a2,568(sp)
1c0030fe:	fa65                	bnez	a2,1c0030ee <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x1da>
1c003100:	a8b1                	j	1c00315c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x248>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003102:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003106:	00204737          	lui	a4,0x204
1c00310a:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c00310e:	22012683          	lw	a3,544(sp)
1c003112:	40d75733          	sra	a4,a4,a3
1c003116:	fc173733          	p.bclr	a4,a4,30,1
1c00311a:	cb05                	beqz	a4,1c00314a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x236>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00311c:	10000813          	li	a6,256
1c003120:	00204637          	lui	a2,0x204
  __builtin_pulp_spr_write(reg, val);
1c003124:	30051073          	csrw	mstatus,a0
1c003128:	01062423          	sw	a6,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00312c:	03c66703          	p.elw	a4,60(a2)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003130:	01062223          	sw	a6,4(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003134:	30047573          	csrrci	a0,mstatus,8
1c003138:	40462703          	lw	a4,1028(a2)
1c00313c:	22012683          	lw	a3,544(sp)
1c003140:	40d75733          	sra	a4,a4,a3
1c003144:	fc173733          	p.bclr	a4,a4,30,1
1c003148:	ff71                	bnez	a4,1c003124 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x210>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00314a:	4705                	li	a4,1
1c00314c:	00d716b3          	sll	a3,a4,a3
1c003150:	00204737          	lui	a4,0x204
1c003154:	40d72223          	sw	a3,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003158:	30051073          	csrw	mstatus,a0
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3760), 128, 0, &DmaR_Evt3);
1c00315c:	10000737          	lui	a4,0x10000
1c003160:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c003164:	6705                	lui	a4,0x1
1c003166:	eb070713          	addi	a4,a4,-336 # eb0 <__rt_stack_size+0x6b0>
1c00316a:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00316c:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003170:	002046b7          	lui	a3,0x204
1c003174:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003178:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00317c:	08070713          	addi	a4,a4,128 # b0080 <__L2+0x30080>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003180:	c1574733          	p.bset	a4,a4,0,21
1c003184:	00204837          	lui	a6,0x204
1c003188:	40e82023          	sw	a4,1024(a6) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00318c:	00204737          	lui	a4,0x204
1c003190:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003194:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c003198:	20d12023          	sw	a3,512(sp)
        copy->length = 0;
1c00319c:	20012823          	sw	zero,528(sp)
  __builtin_pulp_spr_write(reg, val);
1c0031a0:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0031a4:	21012783          	lw	a5,528(sp)
1c0031a8:	c395                	beqz	a5,1c0031cc <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x2b8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0031aa:	21812683          	lw	a3,536(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0031ae:	02000713          	li	a4,32
1c0031b2:	002047b7          	lui	a5,0x204
1c0031b6:	caa5                	beqz	a3,1c003226 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x312>
1c0031b8:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0031bc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0031c0:	00e7a223          	sw	a4,4(a5)
1c0031c4:	21812683          	lw	a3,536(sp)
1c0031c8:	fae5                	bnez	a3,1c0031b8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x2a4>
1c0031ca:	a8b1                	j	1c003226 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x312>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0031cc:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0031d0:	002047b7          	lui	a5,0x204
1c0031d4:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0031d8:	20012703          	lw	a4,512(sp)
1c0031dc:	40e7d7b3          	sra	a5,a5,a4
1c0031e0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0031e4:	cb85                	beqz	a5,1c003214 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x300>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0031e6:	10000513          	li	a0,256
1c0031ea:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0031ee:	30061073          	csrw	mstatus,a2
1c0031f2:	00a6a423          	sw	a0,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0031f6:	03c6e783          	p.elw	a5,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0031fa:	00a6a223          	sw	a0,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0031fe:	30047673          	csrrci	a2,mstatus,8
1c003202:	4046a783          	lw	a5,1028(a3)
1c003206:	20012703          	lw	a4,512(sp)
1c00320a:	40e7d7b3          	sra	a5,a5,a4
1c00320e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003212:	fff1                	bnez	a5,1c0031ee <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x2da>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003214:	4785                	li	a5,1
1c003216:	00e79733          	sll	a4,a5,a4
1c00321a:	002047b7          	lui	a5,0x204
1c00321e:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003222:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3888+0), 1152, 0, &DmaR_Evt4);
1c003226:	c82e                	sw	a1,16(sp)
1c003228:	100007b7          	lui	a5,0x10000
1c00322c:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c003230:	6785                	lui	a5,0x1
1c003232:	f3078793          	addi	a5,a5,-208 # f30 <__rt_stack_size+0x730>
1c003236:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003238:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00323c:	00204737          	lui	a4,0x204
1c003240:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003244:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003248:	48078793          	addi	a5,a5,1152 # b0480 <__L2+0x30480>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00324c:	c157c7b3          	p.bset	a5,a5,0,21
1c003250:	00204537          	lui	a0,0x204
1c003254:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003258:	002047b7          	lui	a5,0x204
1c00325c:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003260:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c003264:	1ee12023          	sw	a4,480(sp)
        copy->length = 0;
1c003268:	1e012823          	sw	zero,496(sp)
  __builtin_pulp_spr_write(reg, val);
1c00326c:	30061073          	csrw	mstatus,a2
	_N_Filter=0;
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+50616+0), 1560, 1131, 390, 0, &UchanHR1);
1c003270:	ca26                	sw	s1,20(sp)
1c003272:	1c00f7b7          	lui	a5,0x1c00f
1c003276:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
1c00327a:	0e010893          	addi	a7,sp,224
1c00327e:	4805                	li	a6,1
1c003280:	18600793          	li	a5,390
1c003284:	46b00713          	li	a4,1131
1c003288:	61800693          	li	a3,1560
1c00328c:	6631                	lui	a2,0xc
1c00328e:	5b860613          	addi	a2,a2,1464 # c5b8 <__rt_stack_size+0xbdb8>
1c003292:	962e                	add	a2,a2,a1
1c003294:	85a6                	mv	a1,s1
1c003296:	1c00f537          	lui	a0,0x1c00f
1c00329a:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c00329e:	299060ef          	jal	ra,1c009d36 <pi_cl_ram_copy_2d>
1c0032a2:	17c14783          	lbu	a5,380(sp)
1c0032a6:	0ff7f793          	andi	a5,a5,255
1c0032aa:	ef99                	bnez	a5,1c0032c8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x3b4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0032ac:	4689                	li	a3,2
1c0032ae:	00204737          	lui	a4,0x204
1c0032b2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0032b6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0032ba:	00d72223          	sw	a3,4(a4)
1c0032be:	17c14783          	lbu	a5,380(sp)
1c0032c2:	0ff7f793          	andi	a5,a5,255
1c0032c6:	d7f5                	beqz	a5,1c0032b2 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x39e>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+4524), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+50616+1560), 1560, 1131, 390, 0, &UchanHR1);
1c0032c8:	1c00f937          	lui	s2,0x1c00f
1c0032cc:	57890913          	addi	s2,s2,1400 # 1c00f578 <model_L2_Memory>
1c0032d0:	00092583          	lw	a1,0(s2)
1c0032d4:	0e010893          	addi	a7,sp,224
1c0032d8:	4805                	li	a6,1
1c0032da:	18600793          	li	a5,390
1c0032de:	46b00713          	li	a4,1131
1c0032e2:	61800693          	li	a3,1560
1c0032e6:	6635                	lui	a2,0xd
1c0032e8:	bd060613          	addi	a2,a2,-1072 # cbd0 <__rt_stack_size+0xc3d0>
1c0032ec:	962e                	add	a2,a2,a1
1c0032ee:	6585                	lui	a1,0x1
1c0032f0:	1ac58593          	addi	a1,a1,428 # 11ac <__rt_stack_size+0x9ac>
1c0032f4:	95a6                	add	a1,a1,s1
1c0032f6:	1c00f537          	lui	a0,0x1c00f
1c0032fa:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c0032fe:	239060ef          	jal	ra,1c009d36 <pi_cl_ram_copy_2d>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+50616+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+0), 1560, 0, &DmaR_Evt5);
1c003302:	00092503          	lw	a0,0(s2)
1c003306:	6631                	lui	a2,0xc
1c003308:	5b860793          	addi	a5,a2,1464 # c5b8 <__rt_stack_size+0xbdb8>
1c00330c:	953e                	add	a0,a0,a5
1c00330e:	100005b7          	lui	a1,0x10000
1c003312:	01c58593          	addi	a1,a1,28 # 1000001c <model_L1_Memory>
1c003316:	0005a303          	lw	t1,0(a1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00331a:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00331e:	002046b7          	lui	a3,0x204
1c003322:	4006a883          	lw	a7,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c003326:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00332a:	6187e713          	ori	a4,a5,1560
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00332e:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003332:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003336:	00204e37          	lui	t3,0x204
1c00333a:	40ee2023          	sw	a4,1024(t3) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00333e:	00204737          	lui	a4,0x204
1c003342:	40672023          	sw	t1,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003346:	40a72023          	sw	a0,1024(a4)
        if (!merge) copy->id = id;
1c00334a:	1d112023          	sw	a7,448(sp)
        copy->length = 0;
1c00334e:	1c012823          	sw	zero,464(sp)
  __builtin_pulp_spr_write(reg, val);
1c003352:	30081073          	csrw	mstatus,a6
	_NN_In=4524; _SN_In=1560;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+47664), 9, 0, &DmaR_Evt6);
1c003356:	4198                	lw	a4,0(a1)
1c003358:	a3060613          	addi	a2,a2,-1488
1c00335c:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00335e:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003362:	4006a683          	lw	a3,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003366:	0097e793          	ori	a5,a5,9
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00336a:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00336e:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003372:	002045b7          	lui	a1,0x204
1c003376:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00337a:	002047b7          	lui	a5,0x204
1c00337e:	40c7a023          	sw	a2,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003382:	4087a023          	sw	s0,1024(a5)
        if (!merge) copy->id = id;
1c003386:	1ad12023          	sw	a3,416(sp)
        copy->length = 0;
1c00338a:	1a012823          	sw	zero,432(sp)
  __builtin_pulp_spr_write(reg, val);
1c00338e:	30071073          	csrw	mstatus,a4
  if (copy->length == 0)
1c003392:	1b012783          	lw	a5,432(sp)
1c003396:	c395                	beqz	a5,1c0033ba <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x4a6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003398:	1b812683          	lw	a3,440(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00339c:	02000713          	li	a4,32
1c0033a0:	002047b7          	lui	a5,0x204
1c0033a4:	caa5                	beqz	a3,1c003414 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x500>
1c0033a6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0033aa:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0033ae:	00e7a223          	sw	a4,4(a5)
1c0033b2:	1b812683          	lw	a3,440(sp)
1c0033b6:	fae5                	bnez	a3,1c0033a6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x492>
1c0033b8:	a8b1                	j	1c003414 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x500>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0033ba:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0033be:	002047b7          	lui	a5,0x204
1c0033c2:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0033c6:	1a012703          	lw	a4,416(sp)
1c0033ca:	40e7d7b3          	sra	a5,a5,a4
1c0033ce:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0033d2:	cb85                	beqz	a5,1c003402 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x4ee>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0033d4:	10000593          	li	a1,256
1c0033d8:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0033dc:	30061073          	csrw	mstatus,a2
1c0033e0:	00b6a423          	sw	a1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0033e4:	03c6e783          	p.elw	a5,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0033e8:	00b6a223          	sw	a1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0033ec:	30047673          	csrrci	a2,mstatus,8
1c0033f0:	4046a783          	lw	a5,1028(a3)
1c0033f4:	1a012703          	lw	a4,416(sp)
1c0033f8:	40e7d7b3          	sra	a5,a5,a4
1c0033fc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003400:	fff1                	bnez	a5,1c0033dc <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x4c8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003402:	4785                	li	a5,1
1c003404:	00e79733          	sll	a4,a5,a4
1c003408:	002047b7          	lui	a5,0x204
1c00340c:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003410:	30061073          	csrw	mstatus,a2
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
				_C_Out = _C_Out + (72); _LC_Out = ((T0Ind_NextLast)?18:72); _SC_Out = (32*_LC_Out); 
1c003414:	61800c93          	li	s9,1560
1c003418:	6785                	lui	a5,0x1
1c00341a:	1ac78d93          	addi	s11,a5,428 # 11ac <__rt_stack_size+0x9ac>
1c00341e:	4b81                	li	s7,0
1c003420:	04800713          	li	a4,72
1c003424:	d63a                	sw	a4,44(sp)
1c003426:	90078793          	addi	a5,a5,-1792
1c00342a:	d802                	sw	zero,48(sp)
1c00342c:	d002                	sw	zero,32(sp)
1c00342e:	d202                	sw	zero,36(sp)
1c003430:	ce02                	sw	zero,28(sp)
1c003432:	da02                	sw	zero,52(sp)
			KerArg0->Bias = (void * __restrict__) (model_L1_Memory+3120+((D1Ind)*128));
1c003434:	10000c37          	lui	s8,0x10000
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003438:	00204d37          	lui	s10,0x204
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00343c:	200d0b13          	addi	s6,s10,512 # 204200 <__L2+0x184200>
1c003440:	8a5e                	mv	s4,s7
1c003442:	8bee                	mv	s7,s11
1c003444:	8de6                	mv	s11,s9
1c003446:	ad09                	j	1c003a58 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb44>
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:8);
1c003448:	4609                	li	a2,2
1c00344a:	cc32                	sw	a2,24(sp)
1c00344c:	a1fd                	j	1c00393a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa26>
1c00344e:	09c00793          	li	a5,156
1c003452:	a399                	j	1c003998 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa84>
1c003454:	09c00793          	li	a5,156
1c003458:	ab81                	j	1c0039a8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa94>
1c00345a:	4911                	li	s2,4
1c00345c:	aba9                	j	1c0039b6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xaa2>
				} else if (!((T0Ind_Last))) {
1c00345e:	45b2                	lw	a1,12(sp)
1c003460:	0235a063          	p.beqimm	a1,3,1c003480 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x56c>
					_N_Filter = _N_Filter + (-17280); _LN_Filter = (36); _SN_Filter = (32*_LN_Filter); 
1c003464:	77f1                	lui	a5,0xffffc
1c003466:	c8078793          	addi	a5,a5,-896 # ffffbc80 <pulp__FC+0xffffbc81>
1c00346a:	9a3e                	add	s4,s4,a5
					_NN_In = _NN_In + (4524); _LNN_In = ((T0Ind_NextLast)?156:390); _SNN_In = (4*_LNN_In); 
1c00346c:	6605                	lui	a2,0x1
1c00346e:	1ac60793          	addi	a5,a2,428 # 11ac <__rt_stack_size+0x9ac>
1c003472:	9bbe                	add	s7,s7,a5
1c003474:	4696                	lw	a3,68(sp)
1c003476:	c036                	sw	a3,0(sp)
1c003478:	4aa6                	lw	s5,72(sp)
					_N_Filter = _N_Filter + (-17280); _LN_Filter = (36); _SN_Filter = (32*_LN_Filter); 
1c00347a:	48000593          	li	a1,1152
1c00347e:	acbd                	j	1c0036fc <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
				} else if (!(D1Ind_Last)) {
1c003480:	5752                	lw	a4,52(sp)
1c003482:	04372c63          	p.beqimm	a4,3,1c0034da <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5c6>
					_N_Filter = _N_Filter + (18432)+(-17280); _LN_Filter = (36); _SN_Filter = (32*_LN_Filter); 
1c003486:	480a0a13          	addi	s4,s4,1152
					_NN_In = _NN_In + (4524); _LNN_In = (390); _SNN_In = (4*_LNN_In); 
1c00348a:	6505                	lui	a0,0x1
1c00348c:	1ac50793          	addi	a5,a0,428 # 11ac <__rt_stack_size+0x9ac>
1c003490:	9bbe                	add	s7,s7,a5
					_N_Filter = _N_Filter + (18432)+(-17280); _LN_Filter = (36); _SN_Filter = (32*_LN_Filter); 
1c003492:	48000593          	li	a1,1152
					_NN_In = _NN_In + (4524); _LNN_In = (390); _SNN_In = (4*_LNN_In); 
1c003496:	18600613          	li	a2,390
1c00349a:	c032                	sw	a2,0(sp)
1c00349c:	61800a93          	li	s5,1560
1c0034a0:	acb1                	j	1c0036fc <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
					} else if (!(T0Ind_Last)) {
1c0034a2:	47b2                	lw	a5,12(sp)
1c0034a4:	0037ac63          	p.beqimm	a5,3,1c0034bc <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5a8>
						_NN_In = _NN_In + (312)+(-67860); _LNN_In = ((T0Ind_NextLast)?156:390); _SNN_In = (4*_LNN_In); 
1c0034a8:	77c1                	lui	a5,0xffff0
1c0034aa:	82478793          	addi	a5,a5,-2012 # fffef824 <pulp__FC+0xfffef825>
1c0034ae:	9bbe                	add	s7,s7,a5
1c0034b0:	4516                	lw	a0,68(sp)
1c0034b2:	c02a                	sw	a0,0(sp)
1c0034b4:	4aa6                	lw	s5,72(sp)
					_N_Filter = _N_Filter + (1152); _LN_Filter = (36); _SN_Filter = (32*_LN_Filter); 
1c0034b6:	48000593          	li	a1,1152
1c0034ba:	a489                	j	1c0036fc <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
					} else if (!(D1Ind_Last)) {
1c0034bc:	55d2                	lw	a1,52(sp)
1c0034be:	0235a163          	p.beqimm	a1,3,1c0034e0 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5cc>
						_NN_In = _NN_In + (-936)+(-67860); _LNN_In = (390); _SNN_In = (4*_LNN_In); 
1c0034c2:	77bd                	lui	a5,0xfffef
1c0034c4:	34478793          	addi	a5,a5,836 # fffef344 <pulp__FC+0xfffef345>
1c0034c8:	9bbe                	add	s7,s7,a5
					_N_Filter = _N_Filter + (1152); _LN_Filter = (36); _SN_Filter = (32*_LN_Filter); 
1c0034ca:	48000593          	li	a1,1152
						_NN_In = _NN_In + (-936)+(-67860); _LNN_In = (390); _SNN_In = (4*_LNN_In); 
1c0034ce:	18600613          	li	a2,390
1c0034d2:	c032                	sw	a2,0(sp)
1c0034d4:	61800a93          	li	s5,1560
1c0034d8:	a415                	j	1c0036fc <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
				_SN_Filter = 0;
1c0034da:	4581                	li	a1,0
				_SNN_In = 0;
1c0034dc:	4a81                	li	s5,0
1c0034de:	ac39                	j	1c0036fc <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
					_N_Filter = _N_Filter + (1152); _LN_Filter = (36); _SN_Filter = (32*_LN_Filter); 
1c0034e0:	48000593          	li	a1,1152
				_SNN_In = 0;
1c0034e4:	4a81                	li	s5,0
1c0034e6:	ac19                	j	1c0036fc <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7e8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0034e8:	300476f3          	csrrci	a3,mstatus,8
1c0034ec:	404d2783          	lw	a5,1028(s10)
1c0034f0:	1e012703          	lw	a4,480(sp)
1c0034f4:	40e7d7b3          	sra	a5,a5,a4
1c0034f8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0034fc:	c795                	beqz	a5,1c003528 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x614>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0034fe:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c003502:	30069073          	csrw	mstatus,a3
1c003506:	00cd2423          	sw	a2,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00350a:	03cd6783          	p.elw	a5,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00350e:	00cd2223          	sw	a2,4(s10)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003512:	300476f3          	csrrci	a3,mstatus,8
1c003516:	404d2783          	lw	a5,1028(s10)
1c00351a:	1e012703          	lw	a4,480(sp)
1c00351e:	40e7d7b3          	sra	a5,a5,a4
1c003522:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003526:	fff1                	bnez	a5,1c003502 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5ee>
1c003528:	4785                	li	a5,1
1c00352a:	00e79733          	sll	a4,a5,a4
1c00352e:	40ed2223          	sw	a4,1028(s10)
  __builtin_pulp_spr_write(reg, val);
1c003532:	30069073          	csrw	mstatus,a3
				if (_SN_Filter) {
1c003536:	e5b9                	bnez	a1,1c003584 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x670>
1c003538:	17c14783          	lbu	a5,380(sp)
1c00353c:	0ff7f793          	andi	a5,a5,255
1c003540:	ef89                	bnez	a5,1c00355a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x646>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003542:	4709                	li	a4,2
1c003544:	00ed2423          	sw	a4,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003548:	03cd6783          	p.elw	a5,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00354c:	00ed2223          	sw	a4,4(s10)
1c003550:	17c14783          	lbu	a5,380(sp)
1c003554:	0ff7f793          	andi	a5,a5,255
1c003558:	d7f5                	beqz	a5,1c003544 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x630>
				if (_SNN_In) {
1c00355a:	060a9d63          	bnez	s5,1c0035d4 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x6c0>
  if (copy->length == 0)
1c00355e:	1d012783          	lw	a5,464(sp)
1c003562:	cfcd                	beqz	a5,1c00361c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x708>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003564:	1d812703          	lw	a4,472(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003568:	02000793          	li	a5,32
1c00356c:	0e070f63          	beqz	a4,1c00366a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x756>
1c003570:	00fd2423          	sw	a5,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003574:	03cd6703          	p.elw	a4,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003578:	00fd2223          	sw	a5,4(s10)
1c00357c:	1d812703          	lw	a4,472(sp)
1c003580:	fb65                	bnez	a4,1c003570 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x65c>
1c003582:	a0e5                	j	1c00366a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x756>
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3888+1152*((D0Ind_Total+1)%2)),
1c003584:	46c2                	lw	a3,16(sp)
1c003586:	01468633          	add	a2,a3,s4
1c00358a:	00140713          	addi	a4,s0,1
1c00358e:	01f75693          	srli	a3,a4,0x1f
1c003592:	00d707b3          	add	a5,a4,a3
1c003596:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00359a:	8f95                	sub	a5,a5,a3
1c00359c:	00379713          	slli	a4,a5,0x3
1c0035a0:	97ba                	add	a5,a5,a4
1c0035a2:	079e                	slli	a5,a5,0x7
1c0035a4:	97ce                	add	a5,a5,s3
1c0035a6:	01cc2703          	lw	a4,28(s8) # 1000001c <model_L1_Memory>
1c0035aa:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0035ac:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0035b0:	400d2503          	lw	a0,1024(s10)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0035b4:	002b07b7          	lui	a5,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0035b8:	8ddd                	or	a1,a1,a5
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0035ba:	40bd2023          	sw	a1,1024(s10)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0035be:	40ed2023          	sw	a4,1024(s10)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0035c2:	40cd2023          	sw	a2,1024(s10)
        if (!merge) copy->id = id;
1c0035c6:	1ea12023          	sw	a0,480(sp)
        copy->length = 0;
1c0035ca:	1e012823          	sw	zero,496(sp)
  __builtin_pulp_spr_write(reg, val);
1c0035ce:	30069073          	csrw	mstatus,a3
1c0035d2:	b79d                	j	1c003538 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x624>
					AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+_NN_In), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+50616+1560*((D0Ind_Total)%2)),
1c0035d4:	01f45713          	srli	a4,s0,0x1f
1c0035d8:	00e407b3          	add	a5,s0,a4
1c0035dc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0035e0:	8f99                	sub	a5,a5,a4
1c0035e2:	61800713          	li	a4,1560
1c0035e6:	6631                	lui	a2,0xc
1c0035e8:	5b860613          	addi	a2,a2,1464 # c5b8 <__rt_stack_size+0xbdb8>
1c0035ec:	42e78633          	p.mac	a2,a5,a4
1c0035f0:	1c00f737          	lui	a4,0x1c00f
1c0035f4:	57872583          	lw	a1,1400(a4) # 1c00f578 <model_L2_Memory>
1c0035f8:	0e010893          	addi	a7,sp,224
1c0035fc:	4805                	li	a6,1
1c0035fe:	4782                	lw	a5,0(sp)
1c003600:	46b00713          	li	a4,1131
1c003604:	86d6                	mv	a3,s5
1c003606:	962e                	add	a2,a2,a1
1c003608:	4552                	lw	a0,20(sp)
1c00360a:	017505b3          	add	a1,a0,s7
1c00360e:	1c00f537          	lui	a0,0x1c00f
1c003612:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c003616:	720060ef          	jal	ra,1c009d36 <pi_cl_ram_copy_2d>
1c00361a:	b791                	j	1c00355e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x64a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00361c:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003620:	404d2783          	lw	a5,1028(s10)
1c003624:	1c012703          	lw	a4,448(sp)
1c003628:	40e7d7b3          	sra	a5,a5,a4
1c00362c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003630:	c795                	beqz	a5,1c00365c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x748>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003632:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c003636:	30069073          	csrw	mstatus,a3
1c00363a:	00cd2423          	sw	a2,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00363e:	03cd6783          	p.elw	a5,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003642:	00cd2223          	sw	a2,4(s10)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003646:	300476f3          	csrrci	a3,mstatus,8
1c00364a:	404d2783          	lw	a5,1028(s10)
1c00364e:	1c012703          	lw	a4,448(sp)
1c003652:	40e7d7b3          	sra	a5,a5,a4
1c003656:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00365a:	fff1                	bnez	a5,1c003636 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x722>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00365c:	4785                	li	a5,1
1c00365e:	00e79733          	sll	a4,a5,a4
1c003662:	40ed2223          	sw	a4,1028(s10)
  __builtin_pulp_spr_write(reg, val);
1c003666:	30069073          	csrw	mstatus,a3
				if (_SN_In) {
1c00366a:	0a0d9d63          	bnez	s11,1c003724 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x810>
				KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+1560*((D0Ind_Total)%2));
1c00366e:	01cc2683          	lw	a3,28(s8)
1c003672:	01f45713          	srli	a4,s0,0x1f
1c003676:	00e407b3          	add	a5,s0,a4
1c00367a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00367e:	40e78733          	sub	a4,a5,a4
1c003682:	61800793          	li	a5,1560
1c003686:	85b6                	mv	a1,a3
1c003688:	42f705b3          	p.mac	a1,a4,a5
1c00368c:	cf2e                	sw	a1,156(sp)
				KerArg1->H = (unsigned short int) (T0Ind_Last?4:10);
1c00368e:	0b211223          	sh	s2,164(sp)
				KerArg1->UsedH = (unsigned short int) (T0Ind_Last?4:10);
1c003692:	0b211323          	sh	s2,166(sp)
				KerArg1->Filter = (signed char * __restrict__) (model_L1_Memory+3888+1152*((D0Ind_Total)%2));
1c003696:	00371793          	slli	a5,a4,0x3
1c00369a:	97ba                	add	a5,a5,a4
1c00369c:	079e                	slli	a5,a5,0x7
1c00369e:	97ce                	add	a5,a5,s3
1c0036a0:	97b6                	add	a5,a5,a3
1c0036a2:	d93e                	sw	a5,176(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0036a4:	099d2223          	sw	s9,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0036a8:	019b2023          	sw	s9,0(s6)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0036ac:	00204637          	lui	a2,0x204
1c0036b0:	20060613          	addi	a2,a2,512 # 204200 <__L2+0x184200>
1c0036b4:	01962623          	sw	s9,12(a2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0036b8:	1c0076b7          	lui	a3,0x1c007
1c0036bc:	59e68693          	addi	a3,a3,1438 # 1c00759e <KerParConv3x3Stride1_SQ8>
1c0036c0:	08dd2023          	sw	a3,128(s10)
1c0036c4:	0968                	addi	a0,sp,156
1c0036c6:	08ad2023          	sw	a0,128(s10)
1c0036ca:	6d5030ef          	jal	ra,1c00759e <KerParConv3x3Stride1_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0036ce:	01cb6783          	p.elw	a5,28(s6)
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0036d2:	0485                	addi	s1,s1,1
1c0036d4:	0405                	addi	s0,s0,1
1c0036d6:	8dd6                	mv	s11,s5
1c0036d8:	47c1                	li	a5,16
1c0036da:	12f48a63          	beq	s1,a5,1c00380e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x8fa>
				if (!(D0Ind_Last)) {
1c0036de:	d8f4a0e3          	p.beqimm	s1,15,1c00345e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x54a>
					_N_Filter = _N_Filter + (1152); _LN_Filter = (36); _SN_Filter = (32*_LN_Filter); 
1c0036e2:	480a0a13          	addi	s4,s4,1152
					if (!(D0Ind_NextLast)) {
1c0036e6:	dae4aee3          	p.beqimm	s1,14,1c0034a2 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x58e>
						_NN_In = _NN_In + (4524); _LNN_In = ((T0Ind_Last)?156:390); _SNN_In = (4*_LNN_In); 
1c0036ea:	6685                	lui	a3,0x1
1c0036ec:	1ac68793          	addi	a5,a3,428 # 11ac <__rt_stack_size+0x9ac>
1c0036f0:	9bbe                	add	s7,s7,a5
1c0036f2:	4712                	lw	a4,4(sp)
1c0036f4:	c03a                	sw	a4,0(sp)
1c0036f6:	4aa2                	lw	s5,8(sp)
					_N_Filter = _N_Filter + (1152); _LN_Filter = (36); _SN_Filter = (32*_LN_Filter); 
1c0036f8:	48000593          	li	a1,1152
  if (copy->length == 0)
1c0036fc:	1f012783          	lw	a5,496(sp)
1c003700:	de0784e3          	beqz	a5,1c0034e8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x5d4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003704:	1f812703          	lw	a4,504(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003708:	02000793          	li	a5,32
1c00370c:	e20705e3          	beqz	a4,1c003536 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x622>
1c003710:	00fd2423          	sw	a5,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003714:	03cd6703          	p.elw	a4,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003718:	00fd2223          	sw	a5,4(s10)
1c00371c:	1f812703          	lw	a4,504(sp)
1c003720:	fb65                	bnez	a4,1c003710 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7fc>
1c003722:	bd11                	j	1c003536 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x622>
					AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+50616+1560*((D0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+1560*((D0Ind_Total+1)%2)),
1c003724:	00140793          	addi	a5,s0,1
1c003728:	01f7d713          	srli	a4,a5,0x1f
1c00372c:	97ba                	add	a5,a5,a4
1c00372e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003732:	8f99                	sub	a5,a5,a4
1c003734:	61800713          	li	a4,1560
1c003738:	02e787b3          	mul	a5,a5,a4
1c00373c:	1c00f5b7          	lui	a1,0x1c00f
1c003740:	5785a683          	lw	a3,1400(a1) # 1c00f578 <model_L2_Memory>
1c003744:	96be                	add	a3,a3,a5
1c003746:	6731                	lui	a4,0xc
1c003748:	5b870713          	addi	a4,a4,1464 # c5b8 <__rt_stack_size+0xbdb8>
1c00374c:	9736                	add	a4,a4,a3
1c00374e:	01cc2603          	lw	a2,28(s8)
1c003752:	97b2                	add	a5,a5,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003754:	300475f3          	csrrci	a1,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c003758:	100dd633          	p.exthz	a2,s11
    if (size < max_len)
1c00375c:	010d9513          	slli	a0,s11,0x10
1c003760:	02054463          	bltz	a0,1c003788 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x874>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003764:	400d2503          	lw	a0,1024(s10)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c003768:	002b06b7          	lui	a3,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00376c:	8ed1                	or	a3,a3,a2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00376e:	40dd2023          	sw	a3,1024(s10)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003772:	40fd2023          	sw	a5,1024(s10)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003776:	40ed2023          	sw	a4,1024(s10)
        if (!merge) copy->id = id;
1c00377a:	1ca12023          	sw	a0,448(sp)
        copy->length = 0;
1c00377e:	1c012823          	sw	zero,464(sp)
  __builtin_pulp_spr_write(reg, val);
1c003782:	30059073          	csrw	mstatus,a1
1c003786:	b5e5                	j	1c00366e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x75a>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003788:	6521                	lui	a0,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00378a:	00330837          	lui	a6,0x330
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c00378e:	1d012223          	sw	a6,452(sp)
    cmd->loc_addr = loc;
1c003792:	1cf12a23          	sw	a5,468(sp)
    cmd->ext_addr = ext;
1c003796:	1ce12c23          	sw	a4,472(sp)
    cmd->size = len;
1c00379a:	1cc12423          	sw	a2,456(sp)
    cmd->stride = stride;
1c00379e:	1ca12623          	sw	a0,460(sp)
    cmd->length = length;
1c0037a2:	1ca12823          	sw	a0,464(sp)
    cmd->id = tid;
1c0037a6:	557d                	li	a0,-1
1c0037a8:	1ca12023          	sw	a0,448(sp)
    cmd->next = NULL;
1c0037ac:	1c012e23          	sw	zero,476(sp)
    if (__rt_dma_first_pending)
1c0037b0:	01402503          	lw	a0,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0037b4:	c909                	beqz	a0,1c0037c6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x8b2>
        __rt_dma_last_pending->next = cmd;
1c0037b6:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0037ba:	0398                	addi	a4,sp,448
1c0037bc:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c0037be:	039c                	addi	a5,sp,448
1c0037c0:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0037c4:	bf7d                	j	1c003782 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x86e>
    uint32_t iter_length = (len < length) ? len : length;
1c0037c6:	6521                	lui	a0,0x8
1c0037c8:	04a65533          	p.minu	a0,a2,a0
        cmd->loc_addr += iter_length;
1c0037cc:	00a78833          	add	a6,a5,a0
1c0037d0:	1d012a23          	sw	a6,468(sp)
        cmd->ext_addr += stride;
1c0037d4:	6851                	lui	a6,0x14
1c0037d6:	5b880813          	addi	a6,a6,1464 # 145b8 <__L1Cl+0x45b8>
1c0037da:	96c2                	add	a3,a3,a6
1c0037dc:	1cd12c23          	sw	a3,472(sp)
        cmd->size -= iter_length;
1c0037e0:	40a606b3          	sub	a3,a2,a0
1c0037e4:	1cd12423          	sw	a3,456(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0037e8:	400d2683          	lw	a3,1024(s10)
        cmd->id = plp_dma_counter_alloc();
1c0037ec:	1cd12023          	sw	a3,448(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0037f0:	003386b7          	lui	a3,0x338
1c0037f4:	40dd2023          	sw	a3,1024(s10)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0037f8:	40fd2023          	sw	a5,1024(s10)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0037fc:	40ed2023          	sw	a4,1024(s10)
        if (cmd->length != 0)
1c003800:	1d012783          	lw	a5,464(sp)
1c003804:	dfcd                	beqz	a5,1c0037be <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x8aa>
            __rt_dma_first_pending = cmd;
1c003806:	039c                	addi	a5,sp,448
1c003808:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00380c:	bf4d                	j	1c0037be <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x8aa>
1c00380e:	5712                	lw	a4,36(sp)
1c003810:	0741                	addi	a4,a4,16
1c003812:	d23a                	sw	a4,36(sp)
			KerArg2->H = (unsigned short int) (T0Ind_Last?2:8);
1c003814:	47e2                	lw	a5,24(sp)
1c003816:	08f11623          	sh	a5,140(sp)
			KerArg2->Scale = (unsigned char *__restrict__) (model_L1_Memory+3632+((D1Ind)*32));
1c00381a:	01cc0413          	addi	s0,s8,28
1c00381e:	401c                	lw	a5,0(s0)
1c003820:	4506                	lw	a0,64(sp)
1c003822:	00a78733          	add	a4,a5,a0
1c003826:	c93a                	sw	a4,144(sp)
			KerArg2->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+3760+((D1Ind)*32));
1c003828:	55f2                	lw	a1,60(sp)
1c00382a:	97ae                	add	a5,a5,a1
1c00382c:	cb3e                	sw	a5,148(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00382e:	099d2223          	sw	s9,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003832:	019b2023          	sw	s9,0(s6)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003836:	00204637          	lui	a2,0x204
1c00383a:	20060613          	addi	a2,a2,512 # 204200 <__L2+0x184200>
1c00383e:	01962623          	sw	s9,12(a2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003842:	1c0067b7          	lui	a5,0x1c006
1c003846:	7b078793          	addi	a5,a5,1968 # 1c0067b0 <KerParReductIO_CC_SQ8>
1c00384a:	08fd2023          	sw	a5,128(s10)
1c00384e:	0108                	addi	a0,sp,128
1c003850:	08ad2023          	sw	a0,128(s10)
1c003854:	75d020ef          	jal	ra,1c0067b0 <KerParReductIO_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003858:	01cb6783          	p.elw	a5,28(s6)
			KerArg3->H = (unsigned short int) (T0Ind_Last?2:8);
1c00385c:	46e2                	lw	a3,24(sp)
1c00385e:	06d11323          	sh	a3,102(sp)
			KerArg3->UsedH = (unsigned short int) (T0Ind_Last?2:8);
1c003862:	06d11423          	sh	a3,104(sp)
			KerArg3->Out = (signed char * __restrict__) (model_L1_Memory+6192+2304*((T0Ind_Total)%2));
1c003866:	47f2                	lw	a5,28(sp)
1c003868:	01f7d713          	srli	a4,a5,0x1f
1c00386c:	97ba                	add	a5,a5,a4
1c00386e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003872:	8f99                	sub	a5,a5,a4
1c003874:	00379493          	slli	s1,a5,0x3
1c003878:	94be                	add	s1,s1,a5
1c00387a:	04a2                	slli	s1,s1,0x8
1c00387c:	6789                	lui	a5,0x2
1c00387e:	83078793          	addi	a5,a5,-2000 # 1830 <__rt_stack_size+0x1030>
1c003882:	94be                	add	s1,s1,a5
1c003884:	401c                	lw	a5,0(s0)
1c003886:	97a6                	add	a5,a5,s1
1c003888:	cebe                	sw	a5,92(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00388a:	099d2223          	sw	s9,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00388e:	00204537          	lui	a0,0x204
1c003892:	20050513          	addi	a0,a0,512 # 204200 <__L2+0x184200>
1c003896:	01952023          	sw	s9,0(a0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00389a:	01952623          	sw	s9,12(a0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00389e:	1c0087b7          	lui	a5,0x1c008
1c0038a2:	36478793          	addi	a5,a5,868 # 1c008364 <KerParPool2x2Stride2_ReLU_SQ8>
1c0038a6:	08fd2023          	sw	a5,128(s10)
1c0038aa:	08a8                	addi	a0,sp,88
1c0038ac:	08ad2023          	sw	a0,128(s10)
1c0038b0:	2b5040ef          	jal	ra,1c008364 <KerParPool2x2Stride2_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0038b4:	01cb6783          	p.elw	a5,28(s6)
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c0038b8:	55c2                	lw	a1,48(sp)
1c0038ba:	10059663          	bnez	a1,1c0039c6 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xab2>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+6192+2304*((T0Ind_Total)%2)),
1c0038be:	01cc2783          	lw	a5,28(s8)
1c0038c2:	94be                	add	s1,s1,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0038c4:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0038c8:	400d2683          	lw	a3,1024(s10)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0038cc:	5622                	lw	a2,40(sp)
1c0038ce:	100657b3          	p.exthz	a5,a2
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0038d2:	c517c7b3          	p.bset	a5,a5,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0038d6:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0038da:	40fd2023          	sw	a5,1024(s10)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0038de:	409d2023          	sw	s1,1024(s10)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0038e2:	4536                	lw	a0,76(sp)
1c0038e4:	5582                	lw	a1,32(sp)
1c0038e6:	00b507b3          	add	a5,a0,a1
1c0038ea:	40fd2023          	sw	a5,1024(s10)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c0038ee:	00ea07b7          	lui	a5,0xea0
1c0038f2:	5632                	lw	a2,44(sp)
1c0038f4:	8fd1                	or	a5,a5,a2
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0038f6:	40fd2023          	sw	a5,1024(s10)
        if (!merge) copy->id = id;
1c0038fa:	18d12023          	sw	a3,384(sp)
        copy->length = 0;
1c0038fe:	18012823          	sw	zero,400(sp)
  __builtin_pulp_spr_write(reg, val);
1c003902:	30071073          	csrw	mstatus,a4
			if (!(T0Ind_Last)) {
1c003906:	46b2                	lw	a3,12(sp)
1c003908:	1836a163          	p.beqimm	a3,3,1c003a8a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb76>
				_C_Out = _C_Out + (72); _LC_Out = ((T0Ind_NextLast)?18:72); _SC_Out = (32*_LC_Out); 
1c00390c:	04858593          	addi	a1,a1,72
1c003910:	d02e                	sw	a1,32(sp)
1c003912:	2426af63          	p.beqimm	a3,2,1c003b70 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc5c>
		for (T0Ind=0; T0Ind<4; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c003916:	0685                	addi	a3,a3,1
1c003918:	c636                	sw	a3,12(sp)
1c00391a:	4772                	lw	a4,28(sp)
1c00391c:	0705                	addi	a4,a4,1
1c00391e:	ce3a                	sw	a4,28(sp)
1c003920:	1046ae63          	p.beqimm	a3,4,1c003a3c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb28>
				_C_Out = _C_Out + (72); _LC_Out = ((T0Ind_NextLast)?18:72); _SC_Out = (32*_LC_Out); 
1c003924:	04800793          	li	a5,72
1c003928:	d63e                	sw	a5,44(sp)
1c00392a:	6785                	lui	a5,0x1
1c00392c:	90078793          	addi	a5,a5,-1792 # 900 <__rt_stack_size+0x100>
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:8);
1c003930:	4532                	lw	a0,12(sp)
1c003932:	b0352be3          	p.beqimm	a0,3,1c003448 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x534>
1c003936:	45a1                	li	a1,8
1c003938:	cc2e                	sw	a1,24(sp)
1c00393a:	56a2                	lw	a3,40(sp)
1c00393c:	d836                	sw	a3,48(sp)
1c00393e:	d43e                	sw	a5,40(sp)
1c003940:	8dd6                	mv	s11,s5
1c003942:	4762                	lw	a4,24(sp)
1c003944:	0ce11923          	sh	a4,210(sp)
			KerArg0->Bias = (void * __restrict__) (model_L1_Memory+3120+((D1Ind)*128));
1c003948:	01cc2783          	lw	a5,28(s8)
1c00394c:	5562                	lw	a0,56(sp)
1c00394e:	00a78733          	add	a4,a5,a0
1c003952:	cdba                	sw	a4,216(sp)
			KerArg0->NormBias = (unsigned char) (((char *)(model_L1_Memory+47664))[5]);
1c003954:	6731                	lui	a4,0xc
1c003956:	97ba                	add	a5,a5,a4
1c003958:	a357c783          	lbu	a5,-1483(a5)
1c00395c:	0cf10e23          	sb	a5,220(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003960:	099d2223          	sw	s9,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003964:	019b2023          	sw	s9,0(s6)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003968:	002045b7          	lui	a1,0x204
1c00396c:	20058593          	addi	a1,a1,512 # 204200 <__L2+0x184200>
1c003970:	0195a623          	sw	s9,12(a1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003974:	1c007637          	lui	a2,0x1c007
1c003978:	85e60613          	addi	a2,a2,-1954 # 1c00685e <KerParSetBiasB32_SQ8>
1c00397c:	08cd2023          	sw	a2,128(s10)
1c003980:	01e8                	addi	a0,sp,204
1c003982:	08ad2023          	sw	a0,128(s10)
1c003986:	6d9020ef          	jal	ra,1c00685e <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00398a:	01cb6783          	p.elw	a5,28(s6)
1c00398e:	18600793          	li	a5,390
1c003992:	46b2                	lw	a3,12(sp)
1c003994:	aa26ade3          	p.beqimm	a3,2,1c00344e <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x53a>
1c003998:	c2be                	sw	a5,68(sp)
					_NN_In = _NN_In + (4524); _LNN_In = ((T0Ind_NextLast)?156:390); _SNN_In = (4*_LNN_In); 
1c00399a:	078a                	slli	a5,a5,0x2
1c00399c:	c4be                	sw	a5,72(sp)
1c00399e:	18600793          	li	a5,390
1c0039a2:	4732                	lw	a4,12(sp)
1c0039a4:	aa3728e3          	p.beqimm	a4,3,1c003454 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x540>
1c0039a8:	c23e                	sw	a5,4(sp)
						_NN_In = _NN_In + (4524); _LNN_In = ((T0Ind_Last)?156:390); _SNN_In = (4*_LNN_In); 
1c0039aa:	078a                	slli	a5,a5,0x2
1c0039ac:	c43e                	sw	a5,8(sp)
1c0039ae:	4929                	li	s2,10
1c0039b0:	47b2                	lw	a5,12(sp)
1c0039b2:	aa37a4e3          	p.beqimm	a5,3,1c00345a <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x546>
1c0039b6:	10095933          	p.exthz	s2,s2
1c0039ba:	5412                	lw	s0,36(sp)
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0039bc:	4481                	li	s1,0
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+3888+1152*((D0Ind_Total+1)%2)),
1c0039be:	6505                	lui	a0,0x1
1c0039c0:	f3050993          	addi	s3,a0,-208 # f30 <__rt_stack_size+0x730>
1c0039c4:	bb29                	j	1c0036de <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x7ca>
  if (copy->length == 0)
1c0039c6:	19012783          	lw	a5,400(sp)
1c0039ca:	c38d                	beqz	a5,1c0039ec <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xad8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0039cc:	19812703          	lw	a4,408(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0039d0:	02000793          	li	a5,32
1c0039d4:	ee0705e3          	beqz	a4,1c0038be <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x9aa>
1c0039d8:	00fd2423          	sw	a5,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0039dc:	03cd6703          	p.elw	a4,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0039e0:	00fd2223          	sw	a5,4(s10)
1c0039e4:	19812703          	lw	a4,408(sp)
1c0039e8:	fb65                	bnez	a4,1c0039d8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xac4>
1c0039ea:	bdd1                	j	1c0038be <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x9aa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0039ec:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0039f0:	404d2783          	lw	a5,1028(s10)
1c0039f4:	18012703          	lw	a4,384(sp)
1c0039f8:	40e7d7b3          	sra	a5,a5,a4
1c0039fc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003a00:	c795                	beqz	a5,1c003a2c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb18>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003a02:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c003a06:	30069073          	csrw	mstatus,a3
1c003a0a:	00cd2423          	sw	a2,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003a0e:	03cd6783          	p.elw	a5,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003a12:	00cd2223          	sw	a2,4(s10)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003a16:	300476f3          	csrrci	a3,mstatus,8
1c003a1a:	404d2783          	lw	a5,1028(s10)
1c003a1e:	18012703          	lw	a4,384(sp)
1c003a22:	40e7d7b3          	sra	a5,a5,a4
1c003a26:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003a2a:	fff1                	bnez	a5,1c003a06 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xaf2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003a2c:	4785                	li	a5,1
1c003a2e:	00e79733          	sll	a4,a5,a4
1c003a32:	40ed2223          	sw	a4,1028(s10)
  __builtin_pulp_spr_write(reg, val);
1c003a36:	30069073          	csrw	mstatus,a3
1c003a3a:	b551                	j	1c0038be <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0x9aa>
				_C_Out = _C_Out + (72); _LC_Out = ((T0Ind_NextLast)?18:72); _SC_Out = (32*_LC_Out); 
1c003a3c:	04800793          	li	a5,72
1c003a40:	d63e                	sw	a5,44(sp)
1c003a42:	6785                	lui	a5,0x1
1c003a44:	90078793          	addi	a5,a5,-1792 # 900 <__rt_stack_size+0x100>
	for (D1Ind=0; D1Ind<4; D1Ind++) { /* Iteration on D1 */
1c003a48:	56d2                	lw	a3,52(sp)
1c003a4a:	0685                	addi	a3,a3,1
1c003a4c:	da36                	sw	a3,52(sp)
1c003a4e:	5722                	lw	a4,40(sp)
1c003a50:	d83a                	sw	a4,48(sp)
1c003a52:	8dd6                	mv	s11,s5
1c003a54:	0446ae63          	p.beqimm	a3,4,1c003ab0 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb9c>
1c003a58:	5552                	lw	a0,52(sp)
1c003a5a:	00751693          	slli	a3,a0,0x7
1c003a5e:	6705                	lui	a4,0x1
1c003a60:	c3070613          	addi	a2,a4,-976 # c30 <__rt_stack_size+0x430>
1c003a64:	9636                	add	a2,a2,a3
1c003a66:	dc32                	sw	a2,56(sp)
1c003a68:	00551693          	slli	a3,a0,0x5
1c003a6c:	e3070613          	addi	a2,a4,-464
1c003a70:	9636                	add	a2,a2,a3
1c003a72:	c0b2                	sw	a2,64(sp)
1c003a74:	eb070713          	addi	a4,a4,-336
1c003a78:	9736                	add	a4,a4,a3
1c003a7a:	de3a                	sw	a4,60(sp)
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:8);
1c003a7c:	d43e                	sw	a5,40(sp)
		for (T0Ind=0; T0Ind<4; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c003a7e:	c602                	sw	zero,12(sp)
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:8);
1c003a80:	45a1                	li	a1,8
1c003a82:	cc2e                	sw	a1,24(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003a84:	0ff00c93          	li	s9,255
1c003a88:	bd6d                	j	1c003942 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa2e>
			} else if (!(D1Ind_Last)) {
1c003a8a:	5552                	lw	a0,52(sp)
1c003a8c:	0e352063          	p.beqimm	a0,3,1c003b6c <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc58>
				_C_Out = _C_Out + (7488)+(-216); _LC_Out = (72); _SC_Out = (32*_LC_Out); 
1c003a90:	6789                	lui	a5,0x2
1c003a92:	c6878793          	addi	a5,a5,-920 # 1c68 <__rt_stack_size+0x1468>
1c003a96:	5582                	lw	a1,32(sp)
1c003a98:	95be                	add	a1,a1,a5
1c003a9a:	d02e                	sw	a1,32(sp)
1c003a9c:	04800613          	li	a2,72
1c003aa0:	d632                	sw	a2,44(sp)
1c003aa2:	6785                	lui	a5,0x1
1c003aa4:	90078793          	addi	a5,a5,-1792 # 900 <__rt_stack_size+0x100>
		for (T0Ind=0; T0Ind<4; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c003aa8:	4672                	lw	a2,28(sp)
1c003aaa:	0605                	addi	a2,a2,1
1c003aac:	ce32                	sw	a2,28(sp)
1c003aae:	bf69                	j	1c003a48 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb34>
  if (copy->length == 0)
1c003ab0:	19012783          	lw	a5,400(sp)
1c003ab4:	c395                	beqz	a5,1c003ad8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xbc4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003ab6:	19812683          	lw	a3,408(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003aba:	02000713          	li	a4,32
1c003abe:	002047b7          	lui	a5,0x204
1c003ac2:	caa5                	beqz	a3,1c003b32 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc1e>
1c003ac4:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003ac8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003acc:	00e7a223          	sw	a4,4(a5)
1c003ad0:	19812683          	lw	a3,408(sp)
1c003ad4:	fae5                	bnez	a3,1c003ac4 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xbb0>
1c003ad6:	a8b1                	j	1c003b32 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc1e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ad8:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003adc:	002047b7          	lui	a5,0x204
1c003ae0:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003ae4:	18012703          	lw	a4,384(sp)
1c003ae8:	40e7d7b3          	sra	a5,a5,a4
1c003aec:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003af0:	cb85                	beqz	a5,1c003b20 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xc0c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003af2:	10000593          	li	a1,256
1c003af6:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c003afa:	30061073          	csrw	mstatus,a2
1c003afe:	00b6a423          	sw	a1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003b02:	03c6e783          	p.elw	a5,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003b06:	00b6a223          	sw	a1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003b0a:	30047673          	csrrci	a2,mstatus,8
1c003b0e:	4046a783          	lw	a5,1028(a3)
1c003b12:	18012703          	lw	a4,384(sp)
1c003b16:	40e7d7b3          	sra	a5,a5,a4
1c003b1a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003b1e:	fff1                	bnez	a5,1c003afa <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xbe6>
1c003b20:	4785                	li	a5,1
1c003b22:	00e79733          	sll	a4,a5,a4
1c003b26:	002047b7          	lui	a5,0x204
1c003b2a:	40e7a223          	sw	a4,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003b2e:	30061073          	csrw	mstatus,a2
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c003b32:	29c12083          	lw	ra,668(sp)
1c003b36:	29812403          	lw	s0,664(sp)
1c003b3a:	29412483          	lw	s1,660(sp)
1c003b3e:	29012903          	lw	s2,656(sp)
1c003b42:	28c12983          	lw	s3,652(sp)
1c003b46:	28812a03          	lw	s4,648(sp)
1c003b4a:	28412a83          	lw	s5,644(sp)
1c003b4e:	28012b03          	lw	s6,640(sp)
1c003b52:	27c12b83          	lw	s7,636(sp)
1c003b56:	27812c03          	lw	s8,632(sp)
1c003b5a:	27412c83          	lw	s9,628(sp)
1c003b5e:	27012d03          	lw	s10,624(sp)
1c003b62:	26c12d83          	lw	s11,620(sp)
1c003b66:	2a010113          	addi	sp,sp,672
1c003b6a:	8082                	ret
			_SC_Out = 0;
1c003b6c:	4781                	li	a5,0
1c003b6e:	bf2d                	j	1c003aa8 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xb94>
		for (T0Ind=0; T0Ind<4; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c003b70:	46b2                	lw	a3,12(sp)
1c003b72:	0685                	addi	a3,a3,1
1c003b74:	c636                	sw	a3,12(sp)
1c003b76:	4772                	lw	a4,28(sp)
1c003b78:	0705                	addi	a4,a4,1
1c003b7a:	ce3a                	sw	a4,28(sp)
				_C_Out = _C_Out + (72); _LC_Out = ((T0Ind_NextLast)?18:72); _SC_Out = (32*_LC_Out); 
1c003b7c:	47c9                	li	a5,18
1c003b7e:	d63e                	sw	a5,44(sp)
1c003b80:	24000793          	li	a5,576
1c003b84:	b375                	j	1c003930 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu+0xa1c>

1c003b86 <S5_Linear_64x13x18x128>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c003b86:	dd010113          	addi	sp,sp,-560
1c003b8a:	22112623          	sw	ra,556(sp)
1c003b8e:	22812423          	sw	s0,552(sp)
1c003b92:	22912223          	sw	s1,548(sp)
1c003b96:	23212023          	sw	s2,544(sp)
1c003b9a:	21312e23          	sw	s3,540(sp)
1c003b9e:	21412c23          	sw	s4,536(sp)
1c003ba2:	21512a23          	sw	s5,532(sp)
1c003ba6:	21612823          	sw	s6,528(sp)
1c003baa:	21712623          	sw	s7,524(sp)
1c003bae:	21812423          	sw	s8,520(sp)
1c003bb2:	21912223          	sw	s9,516(sp)
1c003bb6:	21a12023          	sw	s10,512(sp)
1c003bba:	1fb12e23          	sw	s11,508(sp)
1c003bbe:	8a2e                	mv	s4,a1
1c003bc0:	89b2                	mv	s3,a2
1c003bc2:	c636                	sw	a3,12(sp)
1c003bc4:	893a                	mv	s2,a4
1c003bc6:	84be                	mv	s1,a5
1c003bc8:	8442                	mv	s0,a6
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 82:[1x1, 80:1x1, 1x1], 9]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (model_L1_Memory+48096);
1c003bca:	100007b7          	lui	a5,0x10000
1c003bce:	01c7a803          	lw	a6,28(a5) # 1000001c <model_L1_Memory>
1c003bd2:	67b1                	lui	a5,0xc
1c003bd4:	be078713          	addi	a4,a5,-1056 # bbe0 <__rt_stack_size+0xb3e0>
1c003bd8:	9742                	add	a4,a4,a6
1c003bda:	ceba                	sw	a4,92(sp)
	KerArg0->W = (unsigned short int) (1);
1c003bdc:	4605                	li	a2,1
1c003bde:	06c11023          	sh	a2,96(sp)
	KerArg0->H = (unsigned short int) (1);
1c003be2:	06c11123          	sh	a2,98(sp)
	KerArg0->Feat = (unsigned short int) (64);
1c003be6:	04000893          	li	a7,64
1c003bea:	07111223          	sh	a7,100(sp)
	KerArg1->Out = (void * __restrict__) (model_L1_Memory+48096);
1c003bee:	c2ba                	sw	a4,68(sp)
	KerArg1->OutDim = (unsigned short int) (64);
1c003bf0:	05111623          	sh	a7,76(sp)
	KerArg1->Infos = (signed char *__restrict__) (model_L1_Memory+48736);
1c003bf4:	e6078693          	addi	a3,a5,-416
1c003bf8:	96c2                	add	a3,a3,a6
1c003bfa:	ccb6                	sw	a3,88(sp)
	KerArg2->In = (int *__restrict__) (model_L1_Memory+48096);
1c003bfc:	ce3a                	sw	a4,28(sp)
	KerArg2->Feat = (unsigned short int) (64);
1c003bfe:	03111223          	sh	a7,36(sp)
	KerArg2->W = (unsigned short int) (1);
1c003c02:	02c11323          	sh	a2,38(sp)
	KerArg2->H = (unsigned short int) (1);
1c003c06:	02c11423          	sh	a2,40(sp)
	KerArg2->Infos = (signed char *__restrict__) (model_L1_Memory+48736);
1c003c0a:	da36                	sw	a3,52(sp)
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+0), 366, 0, &DmaR_Evt1);
1c003c0c:	c42a                	sw	a0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003c0e:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003c12:	002046b7          	lui	a3,0x204
1c003c16:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003c1a:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003c1e:	16e70713          	addi	a4,a4,366 # b016e <__L2+0x3016e>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003c22:	c1574733          	p.bset	a4,a4,0,21
1c003c26:	002048b7          	lui	a7,0x204
1c003c2a:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003c2e:	00204737          	lui	a4,0x204
1c003c32:	41072023          	sw	a6,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003c36:	40a72023          	sw	a0,1024(a4)
        if (!merge) copy->id = id;
1c003c3a:	1cd12823          	sw	a3,464(sp)
        copy->length = 0;
1c003c3e:	1e012023          	sw	zero,480(sp)
  __builtin_pulp_spr_write(reg, val);
1c003c42:	30061073          	csrw	mstatus,a2
	_N_In=0;
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Filter+0), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+50680+0), 23424, 0, &UchanHR1);
1c003c46:	8dae                	mv	s11,a1
1c003c48:	1c00f737          	lui	a4,0x1c00f
1c003c4c:	57872503          	lw	a0,1400(a4) # 1c00f578 <model_L2_Memory>
1c003c50:	5f878613          	addi	a2,a5,1528
1c003c54:	189c                	addi	a5,sp,112
1c003c56:	4705                	li	a4,1
1c003c58:	6699                	lui	a3,0x6
1c003c5a:	b8068693          	addi	a3,a3,-1152 # 5b80 <__rt_stack_size+0x5380>
1c003c5e:	962a                	add	a2,a2,a0
1c003c60:	1c00f537          	lui	a0,0x1c00f
1c003c64:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c003c68:	08c060ef          	jal	ra,1c009cf4 <pi_cl_ram_copy>
1c003c6c:	10c14783          	lbu	a5,268(sp)
1c003c70:	0ff7f793          	andi	a5,a5,255
1c003c74:	ef99                	bnez	a5,1c003c92 <S5_Linear_64x13x18x128+0x10c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003c76:	4689                	li	a3,2
1c003c78:	00204737          	lui	a4,0x204
1c003c7c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003c80:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003c84:	00d72223          	sw	a3,4(a4)
1c003c88:	10c14783          	lbu	a5,268(sp)
1c003c8c:	0ff7f793          	andi	a5,a5,255
1c003c90:	d7f5                	beqz	a5,1c003c7c <S5_Linear_64x13x18x128+0xf6>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read Filter */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Filter+23424), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+50680+23424), 23424, 0, &UchanHR1);
1c003c92:	1c00fb37          	lui	s6,0x1c00f
1c003c96:	578b0b13          	addi	s6,s6,1400 # 1c00f578 <model_L2_Memory>
1c003c9a:	000b2583          	lw	a1,0(s6)
1c003c9e:	6a99                	lui	s5,0x6
1c003ca0:	b80a8a93          	addi	s5,s5,-1152 # 5b80 <__rt_stack_size+0x5380>
1c003ca4:	189c                	addi	a5,sp,112
1c003ca6:	4705                	li	a4,1
1c003ca8:	86d6                	mv	a3,s5
1c003caa:	6649                	lui	a2,0x12
1c003cac:	17860613          	addi	a2,a2,376 # 12178 <__L1Cl+0x2178>
1c003cb0:	962e                	add	a2,a2,a1
1c003cb2:	015a05b3          	add	a1,s4,s5
1c003cb6:	1c00f537          	lui	a0,0x1c00f
1c003cba:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c003cbe:	036060ef          	jal	ra,1c009cf4 <pi_cl_ram_copy>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+50680+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+736+0), 23424, 0, &DmaR_Evt2);
1c003cc2:	000b2503          	lw	a0,0(s6)
1c003cc6:	6631                	lui	a2,0xc
1c003cc8:	5f860793          	addi	a5,a2,1528 # c5f8 <__rt_stack_size+0xbdf8>
1c003ccc:	953e                	add	a0,a0,a5
1c003cce:	100005b7          	lui	a1,0x10000
1c003cd2:	01c58593          	addi	a1,a1,28 # 1000001c <model_L1_Memory>
1c003cd6:	0005a803          	lw	a6,0(a1)
1c003cda:	2e080813          	addi	a6,a6,736
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003cde:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003ce2:	002046b7          	lui	a3,0x204
1c003ce6:	4006a303          	lw	t1,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c003cea:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003cee:	873e                	mv	a4,a5
1c003cf0:	de0aa733          	p.insert	a4,s5,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003cf4:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003cf8:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003cfc:	00204e37          	lui	t3,0x204
1c003d00:	40ee2023          	sw	a4,1024(t3) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003d04:	00204737          	lui	a4,0x204
1c003d08:	41072023          	sw	a6,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003d0c:	40a72023          	sw	a0,1024(a4)
        if (!merge) copy->id = id;
1c003d10:	1a612823          	sw	t1,432(sp)
        copy->length = 0;
1c003d14:	1c012023          	sw	zero,448(sp)
  __builtin_pulp_spr_write(reg, val);
1c003d18:	30089073          	csrw	mstatus,a7
	_NN_Filter=23424; _SN_Filter=23424;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+47584+0), 256, 0, &DmaR_Evt3);
1c003d1c:	4188                	lw	a0,0(a1)
1c003d1e:	9e060713          	addi	a4,a2,-1568
1c003d22:	953a                	add	a0,a0,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003d24:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003d28:	4006a883          	lw	a7,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003d2c:	c087c733          	p.bset	a4,a5,0,8
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003d30:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003d34:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003d38:	00204337          	lui	t1,0x204
1c003d3c:	40e32023          	sw	a4,1024(t1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003d40:	00204737          	lui	a4,0x204
1c003d44:	40a72023          	sw	a0,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003d48:	41372023          	sw	s3,1024(a4)
        if (!merge) copy->id = id;
1c003d4c:	19112823          	sw	a7,400(sp)
        copy->length = 0;
1c003d50:	1a012023          	sw	zero,416(sp)
  __builtin_pulp_spr_write(reg, val);
1c003d54:	30081073          	csrw	mstatus,a6
	_N_Bias=0;
	_C_Out=0; _SC_Out=64;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48480+0), 64, 0, &DmaR_Evt4);
1c003d58:	4188                	lw	a0,0(a1)
1c003d5a:	d6060713          	addi	a4,a2,-672
1c003d5e:	953a                	add	a0,a0,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003d60:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003d64:	4006a883          	lw	a7,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003d68:	c067c733          	p.bset	a4,a5,0,6
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003d6c:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003d70:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003d74:	40e32023          	sw	a4,1024(t1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003d78:	40a32023          	sw	a0,1024(t1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003d7c:	00204537          	lui	a0,0x204
1c003d80:	41252023          	sw	s2,1024(a0) # 204400 <__L2+0x184400>
        if (!merge) copy->id = id;
1c003d84:	17112823          	sw	a7,368(sp)
        copy->length = 0;
1c003d88:	18012023          	sw	zero,384(sp)
  __builtin_pulp_spr_write(reg, val);
1c003d8c:	30081073          	csrw	mstatus,a6
	_N_Scale=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48608+0), 64, 0, &DmaR_Evt5);
1c003d90:	4188                	lw	a0,0(a1)
1c003d92:	de060813          	addi	a6,a2,-544
1c003d96:	9542                	add	a0,a0,a6
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003d98:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003d9c:	4006a883          	lw	a7,1024(a3)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003da0:	40e32023          	sw	a4,1024(t1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003da4:	00204737          	lui	a4,0x204
1c003da8:	40a72023          	sw	a0,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003dac:	40972023          	sw	s1,1024(a4)
        if (!merge) copy->id = id;
1c003db0:	15112823          	sw	a7,336(sp)
        copy->length = 0;
1c003db4:	16012023          	sw	zero,352(sp)
  __builtin_pulp_spr_write(reg, val);
1c003db8:	30081073          	csrw	mstatus,a6
	_N_ScaleN=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48736), 9, 0, &DmaR_Evt6);
1c003dbc:	4198                	lw	a4,0(a1)
1c003dbe:	e6060613          	addi	a2,a2,-416
1c003dc2:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003dc4:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003dc8:	4006a683          	lw	a3,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003dcc:	0097e793          	ori	a5,a5,9
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003dd0:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003dd4:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003dd8:	002045b7          	lui	a1,0x204
1c003ddc:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003de0:	002047b7          	lui	a5,0x204
1c003de4:	40c7a023          	sw	a2,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003de8:	4087a023          	sw	s0,1024(a5)
        if (!merge) copy->id = id;
1c003dec:	12d12823          	sw	a3,304(sp)
        copy->length = 0;
1c003df0:	14012023          	sw	zero,320(sp)
  __builtin_pulp_spr_write(reg, val);
1c003df4:	30071073          	csrw	mstatus,a4
  if (copy->length == 0)
1c003df8:	14012783          	lw	a5,320(sp)
1c003dfc:	c395                	beqz	a5,1c003e20 <S5_Linear_64x13x18x128+0x29a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003dfe:	14812683          	lw	a3,328(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003e02:	02000713          	li	a4,32
1c003e06:	002047b7          	lui	a5,0x204
1c003e0a:	caa5                	beqz	a3,1c003e7a <S5_Linear_64x13x18x128+0x2f4>
1c003e0c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003e10:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003e14:	00e7a223          	sw	a4,4(a5)
1c003e18:	14812683          	lw	a3,328(sp)
1c003e1c:	fae5                	bnez	a3,1c003e0c <S5_Linear_64x13x18x128+0x286>
1c003e1e:	a8b1                	j	1c003e7a <S5_Linear_64x13x18x128+0x2f4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e20:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003e24:	002047b7          	lui	a5,0x204
1c003e28:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003e2c:	13012683          	lw	a3,304(sp)
1c003e30:	40d7d7b3          	sra	a5,a5,a3
1c003e34:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003e38:	cb85                	beqz	a5,1c003e68 <S5_Linear_64x13x18x128+0x2e2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003e3a:	10000593          	li	a1,256
1c003e3e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003e42:	30061073          	csrw	mstatus,a2
1c003e46:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003e4a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003e4e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e52:	30047673          	csrrci	a2,mstatus,8
1c003e56:	40472783          	lw	a5,1028(a4)
1c003e5a:	13012683          	lw	a3,304(sp)
1c003e5e:	40d7d7b3          	sra	a5,a5,a3
1c003e62:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003e66:	fff1                	bnez	a5,1c003e42 <S5_Linear_64x13x18x128+0x2bc>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003e68:	4785                	li	a5,1
1c003e6a:	00d796b3          	sll	a3,a5,a3
1c003e6e:	002047b7          	lui	a5,0x204
1c003e72:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003e76:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c003e7a:	1a012783          	lw	a5,416(sp)
1c003e7e:	c395                	beqz	a5,1c003ea2 <S5_Linear_64x13x18x128+0x31c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003e80:	1a812683          	lw	a3,424(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003e84:	02000713          	li	a4,32
1c003e88:	002047b7          	lui	a5,0x204
1c003e8c:	caa5                	beqz	a3,1c003efc <S5_Linear_64x13x18x128+0x376>
1c003e8e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003e92:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003e96:	00e7a223          	sw	a4,4(a5)
1c003e9a:	1a812683          	lw	a3,424(sp)
1c003e9e:	fae5                	bnez	a3,1c003e8e <S5_Linear_64x13x18x128+0x308>
1c003ea0:	a8b1                	j	1c003efc <S5_Linear_64x13x18x128+0x376>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ea2:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003ea6:	002047b7          	lui	a5,0x204
1c003eaa:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003eae:	19012683          	lw	a3,400(sp)
1c003eb2:	40d7d7b3          	sra	a5,a5,a3
1c003eb6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003eba:	cb85                	beqz	a5,1c003eea <S5_Linear_64x13x18x128+0x364>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003ebc:	10000593          	li	a1,256
1c003ec0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003ec4:	30061073          	csrw	mstatus,a2
1c003ec8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003ecc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003ed0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ed4:	30047673          	csrrci	a2,mstatus,8
1c003ed8:	40472783          	lw	a5,1028(a4)
1c003edc:	19012683          	lw	a3,400(sp)
1c003ee0:	40d7d7b3          	sra	a5,a5,a3
1c003ee4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003ee8:	fff1                	bnez	a5,1c003ec4 <S5_Linear_64x13x18x128+0x33e>
1c003eea:	4785                	li	a5,1
1c003eec:	00d796b3          	sll	a3,a5,a3
1c003ef0:	002047b7          	lui	a5,0x204
1c003ef4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003ef8:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c003efc:	18012783          	lw	a5,384(sp)
1c003f00:	c395                	beqz	a5,1c003f24 <S5_Linear_64x13x18x128+0x39e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003f02:	18812683          	lw	a3,392(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003f06:	02000713          	li	a4,32
1c003f0a:	002047b7          	lui	a5,0x204
1c003f0e:	caa5                	beqz	a3,1c003f7e <S5_Linear_64x13x18x128+0x3f8>
1c003f10:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003f14:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003f18:	00e7a223          	sw	a4,4(a5)
1c003f1c:	18812683          	lw	a3,392(sp)
1c003f20:	fae5                	bnez	a3,1c003f10 <S5_Linear_64x13x18x128+0x38a>
1c003f22:	a8b1                	j	1c003f7e <S5_Linear_64x13x18x128+0x3f8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003f24:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003f28:	002047b7          	lui	a5,0x204
1c003f2c:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003f30:	17012683          	lw	a3,368(sp)
1c003f34:	40d7d7b3          	sra	a5,a5,a3
1c003f38:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003f3c:	cb85                	beqz	a5,1c003f6c <S5_Linear_64x13x18x128+0x3e6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003f3e:	10000593          	li	a1,256
1c003f42:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003f46:	30061073          	csrw	mstatus,a2
1c003f4a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003f4e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003f52:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003f56:	30047673          	csrrci	a2,mstatus,8
1c003f5a:	40472783          	lw	a5,1028(a4)
1c003f5e:	17012683          	lw	a3,368(sp)
1c003f62:	40d7d7b3          	sra	a5,a5,a3
1c003f66:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003f6a:	fff1                	bnez	a5,1c003f46 <S5_Linear_64x13x18x128+0x3c0>
1c003f6c:	4785                	li	a5,1
1c003f6e:	00d796b3          	sll	a3,a5,a3
1c003f72:	002047b7          	lui	a5,0x204
1c003f76:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003f7a:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c003f7e:	16012783          	lw	a5,352(sp)
1c003f82:	c395                	beqz	a5,1c003fa6 <S5_Linear_64x13x18x128+0x420>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003f84:	16812683          	lw	a3,360(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003f88:	02000713          	li	a4,32
1c003f8c:	002047b7          	lui	a5,0x204
1c003f90:	caa5                	beqz	a3,1c004000 <S5_Linear_64x13x18x128+0x47a>
1c003f92:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003f96:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003f9a:	00e7a223          	sw	a4,4(a5)
1c003f9e:	16812683          	lw	a3,360(sp)
1c003fa2:	fae5                	bnez	a3,1c003f92 <S5_Linear_64x13x18x128+0x40c>
1c003fa4:	a8b1                	j	1c004000 <S5_Linear_64x13x18x128+0x47a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003fa6:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003faa:	002047b7          	lui	a5,0x204
1c003fae:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003fb2:	15012683          	lw	a3,336(sp)
1c003fb6:	40d7d7b3          	sra	a5,a5,a3
1c003fba:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003fbe:	cb85                	beqz	a5,1c003fee <S5_Linear_64x13x18x128+0x468>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003fc0:	10000593          	li	a1,256
1c003fc4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003fc8:	30061073          	csrw	mstatus,a2
1c003fcc:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003fd0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003fd4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003fd8:	30047673          	csrrci	a2,mstatus,8
1c003fdc:	40472783          	lw	a5,1028(a4)
1c003fe0:	15012683          	lw	a3,336(sp)
1c003fe4:	40d7d7b3          	sra	a5,a5,a3
1c003fe8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003fec:	fff1                	bnez	a5,1c003fc8 <S5_Linear_64x13x18x128+0x442>
1c003fee:	4785                	li	a5,1
1c003ff0:	00d796b3          	sll	a3,a5,a3
1c003ff4:	002047b7          	lui	a5,0x204
1c003ff8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003ffc:	30061073          	csrw	mstatus,a2
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+_N_ScaleN), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48608+64*((D0Ind_Total+1)%2)),
					_SN_ScaleN, 0, &DmaR_Evt5);
		}
		/*============================= End Read Tiles ======================================*/
		/*====================== Call Kernel LOC_LOOP_PROLOG =========================*/
		KerArg0->Bias = (void * __restrict__) (model_L1_Memory+47584+256*((D0Ind_Total)%2));
1c004000:	100007b7          	lui	a5,0x10000
1c004004:	01c7a783          	lw	a5,28(a5) # 1000001c <model_L1_Memory>
1c004008:	66b1                	lui	a3,0xc
1c00400a:	9e068713          	addi	a4,a3,-1568 # b9e0 <__rt_stack_size+0xb1e0>
1c00400e:	973e                	add	a4,a4,a5
1c004010:	d4ba                	sw	a4,104(sp)
		KerArg0->NormBias = (unsigned char) (((char *)(model_L1_Memory+48736))[5]);
1c004012:	97b6                	add	a5,a5,a3
1c004014:	e657c783          	lbu	a5,-411(a5)
1c004018:	06f10623          	sb	a5,108(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00401c:	00204437          	lui	s0,0x204
1c004020:	0ff00793          	li	a5,255
1c004024:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004028:	20040413          	addi	s0,s0,512
1c00402c:	00f42023          	sw	a5,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c004030:	00f42623          	sw	a5,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004034:	1c0077b7          	lui	a5,0x1c007
1c004038:	85e78793          	addi	a5,a5,-1954 # 1c00685e <KerParSetBiasB32_SQ8>
1c00403c:	00204737          	lui	a4,0x204
1c004040:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c004044:	08e8                	addi	a0,sp,92
1c004046:	002047b7          	lui	a5,0x204
1c00404a:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c00404e:	011020ef          	jal	ra,1c00685e <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004052:	01c46783          	p.elw	a5,28(s0)
	_NN_Filter=23424; _SN_Filter=23424;
1c004056:	6999                	lui	s3,0x6
1c004058:	b8098993          	addi	s3,s3,-1152 # 5b80 <__rt_stack_size+0x5380>
1c00405c:	8b4e                	mv	s6,s3
	_N_In=0;
1c00405e:	4a81                	li	s5,0
		AT_FORK(gap_ncore(), (void *) KerParSetBiasB32_SQ8, (void *) KerArg0);
		__CALL(KerParSetBiasB32_SQ8, KerArg0);
		for (T0Ind=0; T0Ind<82; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c004060:	4481                	li	s1,0
				_N_In = _N_In + (-29646); _SN_In = (366); 
			}
			_SNN_Filter = 0;
			if (!(T0Ind_Last)) {
				if (!(T0Ind_NextLast)) {
					_NN_Filter = _NN_Filter + (23424); _LNN_Filter = ((T0Ind_NextNextLast)?306:366); _SNN_Filter = (64*_LNN_Filter); 
1c004062:	8a4e                	mv	s4,s3
1c004064:	00204437          	lui	s0,0x204
			}
			/*============================= End Prepare Tiles ===================================*/
			/*================================= Read Tiles ======================================*/
			AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
			if (_SN_In) {
				AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+368*((T0Ind_Total+1)%2)),
1c004068:	10000c37          	lui	s8,0x10000
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00406c:	20040b93          	addi	s7,s0,512 # 204200 <__L2+0x184200>
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c004070:	8d5e                	mv	s10,s7
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004072:	1c007cb7          	lui	s9,0x1c007
1c004076:	912c8c93          	addi	s9,s9,-1774 # 1c006912 <KerParLinearLayer_SQ8>
1c00407a:	aacd                	j	1c00426c <S5_Linear_64x13x18x128+0x6e6>
					_NN_Filter = _NN_Filter + (23424); _LNN_Filter = ((T0Ind_NextNextLast)?306:366); _SNN_Filter = (64*_LNN_Filter); 
1c00407c:	13200913          	li	s2,306
1c004080:	a439                	j	1c00428e <S5_Linear_64x13x18x128+0x708>
			_SN_In = 0;
1c004082:	4581                	li	a1,0
			_SNN_Filter = 0;
1c004084:	4901                	li	s2,0
1c004086:	a439                	j	1c004294 <S5_Linear_64x13x18x128+0x70e>
				_N_In = _N_In + (366); _SN_In = ((T0Ind_NextLast)?306:366); 
1c004088:	13200593          	li	a1,306
			_SNN_Filter = 0;
1c00408c:	4901                	li	s2,0
1c00408e:	a419                	j	1c004294 <S5_Linear_64x13x18x128+0x70e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004090:	300476f3          	csrrci	a3,mstatus,8
1c004094:	40442783          	lw	a5,1028(s0)
1c004098:	1d012703          	lw	a4,464(sp)
1c00409c:	40e7d7b3          	sra	a5,a5,a4
1c0040a0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0040a4:	c795                	beqz	a5,1c0040d0 <S5_Linear_64x13x18x128+0x54a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0040a6:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c0040aa:	30069073          	csrw	mstatus,a3
1c0040ae:	00c42423          	sw	a2,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0040b2:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0040b6:	00c42223          	sw	a2,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0040ba:	300476f3          	csrrci	a3,mstatus,8
1c0040be:	40442783          	lw	a5,1028(s0)
1c0040c2:	1d012703          	lw	a4,464(sp)
1c0040c6:	40e7d7b3          	sra	a5,a5,a4
1c0040ca:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0040ce:	fff1                	bnez	a5,1c0040aa <S5_Linear_64x13x18x128+0x524>
1c0040d0:	4785                	li	a5,1
1c0040d2:	00e79733          	sll	a4,a5,a4
1c0040d6:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c0040da:	30069073          	csrw	mstatus,a3
			if (_SN_In) {
1c0040de:	e5b1                	bnez	a1,1c00412a <S5_Linear_64x13x18x128+0x5a4>
1c0040e0:	10c14783          	lbu	a5,268(sp)
1c0040e4:	0ff7f793          	andi	a5,a5,255
1c0040e8:	ef89                	bnez	a5,1c004102 <S5_Linear_64x13x18x128+0x57c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0040ea:	4709                	li	a4,2
1c0040ec:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0040f0:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0040f4:	00e42223          	sw	a4,4(s0)
1c0040f8:	10c14783          	lbu	a5,268(sp)
1c0040fc:	0ff7f793          	andi	a5,a5,255
1c004100:	d7f5                	beqz	a5,1c0040ec <S5_Linear_64x13x18x128+0x566>
						_SN_In, 0, &DmaR_Evt1);
			}
			AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read Filter */
			if (_SNN_Filter) {
1c004102:	06091a63          	bnez	s2,1c004176 <S5_Linear_64x13x18x128+0x5f0>
  if (copy->length == 0)
1c004106:	1c012783          	lw	a5,448(sp)
1c00410a:	c3dd                	beqz	a5,1c0041b0 <S5_Linear_64x13x18x128+0x62a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00410c:	1c812703          	lw	a4,456(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004110:	02000793          	li	a5,32
1c004114:	c76d                	beqz	a4,1c0041fe <S5_Linear_64x13x18x128+0x678>
1c004116:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00411a:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00411e:	00f42223          	sw	a5,4(s0)
1c004122:	1c812703          	lw	a4,456(sp)
1c004126:	fb65                	bnez	a4,1c004116 <S5_Linear_64x13x18x128+0x590>
1c004128:	a8d9                	j	1c0041fe <S5_Linear_64x13x18x128+0x678>
				AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0+368*((T0Ind_Total+1)%2)),
1c00412a:	4522                	lw	a0,8(sp)
1c00412c:	01550733          	add	a4,a0,s5
1c004130:	00148793          	addi	a5,s1,1
1c004134:	01f7d693          	srli	a3,a5,0x1f
1c004138:	97b6                	add	a5,a5,a3
1c00413a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00413e:	8f95                	sub	a5,a5,a3
1c004140:	01cc2683          	lw	a3,28(s8) # 1000001c <model_L1_Memory>
1c004144:	17000613          	li	a2,368
1c004148:	42c786b3          	p.mac	a3,a5,a2
1c00414c:	87b6                	mv	a5,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00414e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004152:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c004156:	002b0537          	lui	a0,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00415a:	8dc9                	or	a1,a1,a0
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00415c:	40b42023          	sw	a1,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004160:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004164:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c004168:	1cc12823          	sw	a2,464(sp)
        copy->length = 0;
1c00416c:	1e012023          	sw	zero,480(sp)
  __builtin_pulp_spr_write(reg, val);
1c004170:	30069073          	csrw	mstatus,a3
1c004174:	b7b5                	j	1c0040e0 <S5_Linear_64x13x18x128+0x55a>
				AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Filter+_NN_Filter), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory+50680+23424*((T0Ind_Total)%2)),
1c004176:	01f4d713          	srli	a4,s1,0x1f
1c00417a:	00e487b3          	add	a5,s1,a4
1c00417e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004182:	8f99                	sub	a5,a5,a4
1c004184:	6631                	lui	a2,0xc
1c004186:	5f860613          	addi	a2,a2,1528 # c5f8 <__rt_stack_size+0xbdf8>
1c00418a:	43478633          	p.mac	a2,a5,s4
1c00418e:	1c00f7b7          	lui	a5,0x1c00f
1c004192:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
1c004196:	189c                	addi	a5,sp,112
1c004198:	4705                	li	a4,1
1c00419a:	86ca                	mv	a3,s2
1c00419c:	962e                	add	a2,a2,a1
1c00419e:	016d85b3          	add	a1,s11,s6
1c0041a2:	1c00f537          	lui	a0,0x1c00f
1c0041a6:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c0041aa:	34b050ef          	jal	ra,1c009cf4 <pi_cl_ram_copy>
1c0041ae:	bfa1                	j	1c004106 <S5_Linear_64x13x18x128+0x580>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0041b0:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0041b4:	40442783          	lw	a5,1028(s0)
1c0041b8:	1b012703          	lw	a4,432(sp)
1c0041bc:	40e7d7b3          	sra	a5,a5,a4
1c0041c0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0041c4:	c795                	beqz	a5,1c0041f0 <S5_Linear_64x13x18x128+0x66a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0041c6:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c0041ca:	30069073          	csrw	mstatus,a3
1c0041ce:	00c42423          	sw	a2,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0041d2:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0041d6:	00c42223          	sw	a2,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0041da:	300476f3          	csrrci	a3,mstatus,8
1c0041de:	40442783          	lw	a5,1028(s0)
1c0041e2:	1b012703          	lw	a4,432(sp)
1c0041e6:	40e7d7b3          	sra	a5,a5,a4
1c0041ea:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0041ee:	fff1                	bnez	a5,1c0041ca <S5_Linear_64x13x18x128+0x644>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0041f0:	4785                	li	a5,1
1c0041f2:	00e79733          	sll	a4,a5,a4
1c0041f6:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c0041fa:	30069073          	csrw	mstatus,a3
						_SNN_Filter, 0, &UchanHR1);
			}
			AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
			if (_SN_Filter) {
1c0041fe:	0a099f63          	bnez	s3,1c0042bc <S5_Linear_64x13x18x128+0x736>
				AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+50680+23424*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+736+23424*((T0Ind_Total+1)%2)),
						_SN_Filter, 0, &DmaR_Evt2);
			}
			/*============================= End Read Tiles ======================================*/
			/*====================== Call Kernel LOC_LOOP =========================*/
			KerArg1->In = (signed char * __restrict__) (model_L1_Memory+0+368*((T0Ind_Total)%2));
1c004202:	01cc2783          	lw	a5,28(s8)
1c004206:	01f4d693          	srli	a3,s1,0x1f
1c00420a:	00d48733          	add	a4,s1,a3
1c00420e:	fc173733          	p.bclr	a4,a4,30,1
1c004212:	8f15                	sub	a4,a4,a3
1c004214:	17000693          	li	a3,368
1c004218:	863e                	mv	a2,a5
1c00421a:	42d70633          	p.mac	a2,a4,a3
1c00421e:	dc32                	sw	a2,56(sp)
			KerArg1->Weights = (signed char * __restrict__) (model_L1_Memory+736+23424*((T0Ind_Total)%2));
1c004220:	434707b3          	p.mac	a5,a4,s4
1c004224:	2e078793          	addi	a5,a5,736
1c004228:	de3e                	sw	a5,60(sp)
			KerArg1->InDim = (unsigned short int) (T0Ind_Last?306:366);
1c00422a:	05100793          	li	a5,81
1c00422e:	20f48663          	beq	s1,a5,1c00443a <S5_Linear_64x13x18x128+0x8b4>
1c004232:	16e00793          	li	a5,366
1c004236:	04f11423          	sh	a5,72(sp)
			KerArg1->TotalInDim = (unsigned short int) (T0Ind_Last?306:366);
1c00423a:	04f11523          	sh	a5,74(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00423e:	0ff00793          	li	a5,255
1c004242:	08f42223          	sw	a5,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004246:	00fba023          	sw	a5,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00424a:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00424e:	09942023          	sw	s9,128(s0)
1c004252:	1828                	addi	a0,sp,56
1c004254:	08a42023          	sw	a0,128(s0)
1c004258:	6ba020ef          	jal	ra,1c006912 <KerParLinearLayer_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00425c:	01cbe783          	p.elw	a5,28(s7)
		for (T0Ind=0; T0Ind<82; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c004260:	0485                	addi	s1,s1,1
			AT_FORK(gap_ncore(), (void *) KerParLinearLayer_SQ8, (void *) KerArg1);
			__CALL(KerParLinearLayer_SQ8, KerArg1);
			/*================================= Update Arg Pipeline =============================*/
			_SN_Filter = _SNN_Filter;_LN_Filter = _LNN_Filter;
1c004262:	89ca                	mv	s3,s2
		for (T0Ind=0; T0Ind<82; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c004264:	05200793          	li	a5,82
1c004268:	20f48c63          	beq	s1,a5,1c004480 <S5_Linear_64x13x18x128+0x8fa>
			if (!(T0Ind_Last)) {
1c00426c:	05100793          	li	a5,81
1c004270:	e0f489e3          	beq	s1,a5,1c004082 <S5_Linear_64x13x18x128+0x4fc>
				_N_In = _N_In + (366); _SN_In = ((T0Ind_NextLast)?306:366); 
1c004274:	16ea8a93          	addi	s5,s5,366
1c004278:	05000793          	li	a5,80
1c00427c:	e0f486e3          	beq	s1,a5,1c004088 <S5_Linear_64x13x18x128+0x502>
					_NN_Filter = _NN_Filter + (23424); _LNN_Filter = ((T0Ind_NextNextLast)?306:366); _SNN_Filter = (64*_LNN_Filter); 
1c004280:	9b52                	add	s6,s6,s4
1c004282:	04f00793          	li	a5,79
1c004286:	16e00913          	li	s2,366
1c00428a:	def489e3          	beq	s1,a5,1c00407c <S5_Linear_64x13x18x128+0x4f6>
1c00428e:	091a                	slli	s2,s2,0x6
				_N_In = _N_In + (366); _SN_In = ((T0Ind_NextLast)?306:366); 
1c004290:	16e00593          	li	a1,366
  if (copy->length == 0)
1c004294:	1e012783          	lw	a5,480(sp)
1c004298:	de078ce3          	beqz	a5,1c004090 <S5_Linear_64x13x18x128+0x50a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00429c:	1e812703          	lw	a4,488(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0042a0:	02000793          	li	a5,32
1c0042a4:	e2070de3          	beqz	a4,1c0040de <S5_Linear_64x13x18x128+0x558>
1c0042a8:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0042ac:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0042b0:	00f42223          	sw	a5,4(s0)
1c0042b4:	1e812703          	lw	a4,488(sp)
1c0042b8:	fb65                	bnez	a4,1c0042a8 <S5_Linear_64x13x18x128+0x722>
1c0042ba:	b515                	j	1c0040de <S5_Linear_64x13x18x128+0x558>
				AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L2_Memory+50680+23424*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+736+23424*((T0Ind_Total+1)%2)),
1c0042bc:	00148793          	addi	a5,s1,1
1c0042c0:	01f7d713          	srli	a4,a5,0x1f
1c0042c4:	97ba                	add	a5,a5,a4
1c0042c6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0042ca:	8f99                	sub	a5,a5,a4
1c0042cc:	034787b3          	mul	a5,a5,s4
1c0042d0:	1c00f737          	lui	a4,0x1c00f
1c0042d4:	57872683          	lw	a3,1400(a4) # 1c00f578 <model_L2_Memory>
1c0042d8:	96be                	add	a3,a3,a5
1c0042da:	6731                	lui	a4,0xc
1c0042dc:	5f870713          	addi	a4,a4,1528 # c5f8 <__rt_stack_size+0xbdf8>
1c0042e0:	9736                	add	a4,a4,a3
1c0042e2:	2e078793          	addi	a5,a5,736
1c0042e6:	01cc2603          	lw	a2,28(s8)
1c0042ea:	97b2                	add	a5,a5,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0042ec:	300475f3          	csrrci	a1,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c0042f0:	1009d633          	p.exthz	a2,s3
    if (size < max_len)
1c0042f4:	01099513          	slli	a0,s3,0x10
1c0042f8:	02054463          	bltz	a0,1c004320 <S5_Linear_64x13x18x128+0x79a>
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0042fc:	40042503          	lw	a0,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c004300:	002b06b7          	lui	a3,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c004304:	8ed1                	or	a3,a3,a2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004306:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00430a:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00430e:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c004312:	1aa12823          	sw	a0,432(sp)
        copy->length = 0;
1c004316:	1c012023          	sw	zero,448(sp)
  __builtin_pulp_spr_write(reg, val);
1c00431a:	30059073          	csrw	mstatus,a1
1c00431e:	b5d5                	j	1c004202 <S5_Linear_64x13x18x128+0x67c>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004320:	6521                	lui	a0,0x8
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c004322:	00330837          	lui	a6,0x330
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c004326:	1b012a23          	sw	a6,436(sp)
    cmd->loc_addr = loc;
1c00432a:	1cf12223          	sw	a5,452(sp)
    cmd->ext_addr = ext;
1c00432e:	1ce12423          	sw	a4,456(sp)
    cmd->size = len;
1c004332:	1ac12c23          	sw	a2,440(sp)
    cmd->stride = stride;
1c004336:	1aa12e23          	sw	a0,444(sp)
    cmd->length = length;
1c00433a:	1ca12023          	sw	a0,448(sp)
    cmd->id = tid;
1c00433e:	557d                	li	a0,-1
1c004340:	1aa12823          	sw	a0,432(sp)
    cmd->next = NULL;
1c004344:	1c012623          	sw	zero,460(sp)
    if (__rt_dma_first_pending)
1c004348:	01402503          	lw	a0,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00434c:	c909                	beqz	a0,1c00435e <S5_Linear_64x13x18x128+0x7d8>
        __rt_dma_last_pending->next = cmd;
1c00434e:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c004352:	1b18                	addi	a4,sp,432
1c004354:	cfd8                	sw	a4,28(a5)
    __rt_dma_last_pending = cmd;
1c004356:	1b1c                	addi	a5,sp,432
1c004358:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00435c:	bf7d                	j	1c00431a <S5_Linear_64x13x18x128+0x794>
    uint32_t iter_length = (len < length) ? len : length;
1c00435e:	6521                	lui	a0,0x8
1c004360:	04a65533          	p.minu	a0,a2,a0
        cmd->loc_addr += iter_length;
1c004364:	00a78833          	add	a6,a5,a0
1c004368:	1d012223          	sw	a6,452(sp)
        cmd->ext_addr += stride;
1c00436c:	6851                	lui	a6,0x14
1c00436e:	5f880813          	addi	a6,a6,1528 # 145f8 <__L1Cl+0x45f8>
1c004372:	96c2                	add	a3,a3,a6
1c004374:	1cd12423          	sw	a3,456(sp)
        cmd->size -= iter_length;
1c004378:	40a606b3          	sub	a3,a2,a0
1c00437c:	1ad12c23          	sw	a3,440(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004380:	40042683          	lw	a3,1024(s0)
        cmd->id = plp_dma_counter_alloc();
1c004384:	1ad12823          	sw	a3,432(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004388:	003386b7          	lui	a3,0x338
1c00438c:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004390:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004394:	40e42023          	sw	a4,1024(s0)
        if (cmd->length != 0)
1c004398:	1c012783          	lw	a5,448(sp)
1c00439c:	dfcd                	beqz	a5,1c004356 <S5_Linear_64x13x18x128+0x7d0>
            __rt_dma_first_pending = cmd;
1c00439e:	1b1c                	addi	a5,sp,432
1c0043a0:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0043a4:	bf4d                	j	1c004356 <S5_Linear_64x13x18x128+0x7d0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0043a6:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0043aa:	002047b7          	lui	a5,0x204
1c0043ae:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0043b2:	11012683          	lw	a3,272(sp)
1c0043b6:	40d7d7b3          	sra	a5,a5,a3
1c0043ba:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0043be:	cb85                	beqz	a5,1c0043ee <S5_Linear_64x13x18x128+0x868>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0043c0:	10000593          	li	a1,256
1c0043c4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0043c8:	30061073          	csrw	mstatus,a2
1c0043cc:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0043d0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0043d4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0043d8:	30047673          	csrrci	a2,mstatus,8
1c0043dc:	40472783          	lw	a5,1028(a4)
1c0043e0:	11012683          	lw	a3,272(sp)
1c0043e4:	40d7d7b3          	sra	a5,a5,a3
1c0043e8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0043ec:	fff1                	bnez	a5,1c0043c8 <S5_Linear_64x13x18x128+0x842>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0043ee:	4785                	li	a5,1
1c0043f0:	00d796b3          	sll	a3,a5,a3
1c0043f4:	002047b7          	lui	a5,0x204
1c0043f8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0043fc:	30061073          	csrw	mstatus,a2
		D0Ind_Total++;
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c004400:	22c12083          	lw	ra,556(sp)
1c004404:	22812403          	lw	s0,552(sp)
1c004408:	22412483          	lw	s1,548(sp)
1c00440c:	22012903          	lw	s2,544(sp)
1c004410:	21c12983          	lw	s3,540(sp)
1c004414:	21812a03          	lw	s4,536(sp)
1c004418:	21412a83          	lw	s5,532(sp)
1c00441c:	21012b03          	lw	s6,528(sp)
1c004420:	20c12b83          	lw	s7,524(sp)
1c004424:	20812c03          	lw	s8,520(sp)
1c004428:	20412c83          	lw	s9,516(sp)
1c00442c:	20012d03          	lw	s10,512(sp)
1c004430:	1fc12d83          	lw	s11,508(sp)
1c004434:	23010113          	addi	sp,sp,560
1c004438:	8082                	ret
			KerArg1->InDim = (unsigned short int) (T0Ind_Last?306:366);
1c00443a:	13200793          	li	a5,306
1c00443e:	04f11423          	sh	a5,72(sp)
			KerArg1->TotalInDim = (unsigned short int) (T0Ind_Last?306:366);
1c004442:	04f11523          	sh	a5,74(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004446:	00204437          	lui	s0,0x204
1c00444a:	0ff00793          	li	a5,255
1c00444e:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004452:	20040413          	addi	s0,s0,512
1c004456:	00f42023          	sw	a5,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00445a:	00f42623          	sw	a5,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00445e:	1c0077b7          	lui	a5,0x1c007
1c004462:	91278793          	addi	a5,a5,-1774 # 1c006912 <KerParLinearLayer_SQ8>
1c004466:	00204737          	lui	a4,0x204
1c00446a:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c00446e:	1828                	addi	a0,sp,56
1c004470:	002047b7          	lui	a5,0x204
1c004474:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c004478:	49a020ef          	jal	ra,1c006912 <KerParLinearLayer_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00447c:	01c46783          	p.elw	a5,28(s0)
		KerArg2->Out = (void *__restrict__) (model_L1_Memory+48352+64*((D0Ind_Total)%2));
1c004480:	100004b7          	lui	s1,0x10000
1c004484:	01c48493          	addi	s1,s1,28 # 1000001c <model_L1_Memory>
1c004488:	409c                	lw	a5,0(s1)
1c00448a:	6731                	lui	a4,0xc
1c00448c:	ce070993          	addi	s3,a4,-800 # bce0 <__rt_stack_size+0xb4e0>
1c004490:	013786b3          	add	a3,a5,s3
1c004494:	d036                	sw	a3,32(sp)
		KerArg2->Scale = (unsigned char *__restrict__) (model_L1_Memory+48480+64*((D0Ind_Total)%2));
1c004496:	d6070693          	addi	a3,a4,-672
1c00449a:	96be                	add	a3,a3,a5
1c00449c:	d636                	sw	a3,44(sp)
		KerArg2->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+48608+64*((D0Ind_Total)%2));
1c00449e:	de070713          	addi	a4,a4,-544
1c0044a2:	97ba                	add	a5,a5,a4
1c0044a4:	d83e                	sw	a5,48(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0044a6:	00204437          	lui	s0,0x204
1c0044aa:	0ff00793          	li	a5,255
1c0044ae:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0044b2:	20040913          	addi	s2,s0,512
1c0044b6:	00f92023          	sw	a5,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0044ba:	00f92623          	sw	a5,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0044be:	1c0067b7          	lui	a5,0x1c006
1c0044c2:	71678793          	addi	a5,a5,1814 # 1c006716 <KerParReduct_CC_SQ8>
1c0044c6:	00204737          	lui	a4,0x204
1c0044ca:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c0044ce:	0868                	addi	a0,sp,28
1c0044d0:	002047b7          	lui	a5,0x204
1c0044d4:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c0044d8:	23e020ef          	jal	ra,1c006716 <KerParReduct_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0044dc:	01c96783          	p.elw	a5,28(s2)
		AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+48352+64*((D0Ind_Total)%2)),
1c0044e0:	4098                	lw	a4,0(s1)
1c0044e2:	974e                	add	a4,a4,s3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0044e4:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0044e8:	40042403          	lw	s0,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0044ec:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0044f0:	04078793          	addi	a5,a5,64 # a0040 <__L2+0x20040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0044f4:	c157c7b3          	p.bset	a5,a5,0,21
1c0044f8:	00204637          	lui	a2,0x204
1c0044fc:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004500:	002047b7          	lui	a5,0x204
1c004504:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004508:	4732                	lw	a4,12(sp)
1c00450a:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00450e:	10812823          	sw	s0,272(sp)
        copy->length = 0;
1c004512:	12012023          	sw	zero,288(sp)
  __builtin_pulp_spr_write(reg, val);
1c004516:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00451a:	12012783          	lw	a5,288(sp)
1c00451e:	e80784e3          	beqz	a5,1c0043a6 <S5_Linear_64x13x18x128+0x820>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004522:	12812683          	lw	a3,296(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004526:	02000713          	li	a4,32
1c00452a:	002047b7          	lui	a5,0x204
1c00452e:	ec0689e3          	beqz	a3,1c004400 <S5_Linear_64x13x18x128+0x87a>
1c004532:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004536:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00453a:	00e7a223          	sw	a4,4(a5)
1c00453e:	12812683          	lw	a3,296(sp)
1c004542:	fae5                	bnez	a3,1c004532 <S5_Linear_64x13x18x128+0x9ac>
1c004544:	bd75                	j	1c004400 <S5_Linear_64x13x18x128+0x87a>

1c004546 <S6_Linear_2x64>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c004546:	712d                	addi	sp,sp,-288
1c004548:	10112e23          	sw	ra,284(sp)
1c00454c:	10812c23          	sw	s0,280(sp)
1c004550:	10912a23          	sw	s1,276(sp)
1c004554:	11212823          	sw	s2,272(sp)
1c004558:	8436                	mv	s0,a3
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[1x1], 9]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (signed char * __restrict__) (model_L1_Memory+0);
1c00455a:	100006b7          	lui	a3,0x10000
1c00455e:	01c6a683          	lw	a3,28(a3) # 1000001c <model_L1_Memory>
1c004562:	c636                	sw	a3,12(sp)
	KerArg0->Weights = (signed char * __restrict__) (model_L1_Memory+64);
1c004564:	04068893          	addi	a7,a3,64
1c004568:	c846                	sw	a7,16(sp)
	KerArg0->Bias = (void * __restrict__) (model_L1_Memory+192);
1c00456a:	0c068893          	addi	a7,a3,192
1c00456e:	ca46                	sw	a7,20(sp)
	KerArg0->Out = (void * __restrict__) (model_L1_Memory+200);
1c004570:	0c868893          	addi	a7,a3,200
1c004574:	cc46                	sw	a7,24(sp)
	KerArg0->InDim = (unsigned short int) (64);
1c004576:	04000893          	li	a7,64
1c00457a:	01111e23          	sh	a7,28(sp)
	KerArg0->TotalInDim = (unsigned short int) (64);
1c00457e:	01111f23          	sh	a7,30(sp)
	KerArg0->OutDim = (unsigned short int) (2);
1c004582:	4889                	li	a7,2
1c004584:	03111023          	sh	a7,32(sp)
	KerArg0->Scale = (unsigned char *__restrict__) (model_L1_Memory+204);
1c004588:	0cc68893          	addi	a7,a3,204
1c00458c:	d246                	sw	a7,36(sp)
	KerArg0->ScaleN = (unsigned char *__restrict__) (model_L1_Memory+208);
1c00458e:	0d068893          	addi	a7,a3,208
1c004592:	d446                	sw	a7,40(sp)
	KerArg0->Infos = (signed char *__restrict__) (model_L1_Memory+212);
1c004594:	0d468893          	addi	a7,a3,212
1c004598:	d646                	sw	a7,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00459a:	30047e73          	csrrci	t3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00459e:	00204337          	lui	t1,0x204
1c0045a2:	40032303          	lw	t1,1024(t1) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0045a6:	000b08b7          	lui	a7,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0045aa:	04088893          	addi	a7,a7,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0045ae:	c158c8b3          	p.bset	a7,a7,0,21
1c0045b2:	00204eb7          	lui	t4,0x204
1c0045b6:	411ea023          	sw	a7,1024(t4) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0045ba:	002048b7          	lui	a7,0x204
1c0045be:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0045c2:	002046b7          	lui	a3,0x204
1c0045c6:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
        if (!merge) copy->id = id;
1c0045ca:	d99a                	sw	t1,240(sp)
        copy->length = 0;
1c0045cc:	10012023          	sw	zero,256(sp)
  __builtin_pulp_spr_write(reg, val);
1c0045d0:	300e1073          	csrw	mstatus,t3
  if (copy->length == 0)
1c0045d4:	10012683          	lw	a3,256(sp)
1c0045d8:	c685                	beqz	a3,1c004600 <S6_Linear_2x64+0xba>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0045da:	10812883          	lw	a7,264(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0045de:	02000513          	li	a0,32
1c0045e2:	002046b7          	lui	a3,0x204
1c0045e6:	06088863          	beqz	a7,1c004656 <S6_Linear_2x64+0x110>
1c0045ea:	00a6a423          	sw	a0,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0045ee:	03c6e883          	p.elw	a7,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0045f2:	00a6a223          	sw	a0,4(a3)
1c0045f6:	10812883          	lw	a7,264(sp)
1c0045fa:	fe0898e3          	bnez	a7,1c0045ea <S6_Linear_2x64+0xa4>
1c0045fe:	a8a1                	j	1c004656 <S6_Linear_2x64+0x110>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004600:	30047373          	csrrci	t1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004604:	002046b7          	lui	a3,0x204
1c004608:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c00460c:	58ce                	lw	a7,240(sp)
1c00460e:	4116d6b3          	sra	a3,a3,a7
1c004612:	fc16b6b3          	p.bclr	a3,a3,30,1
1c004616:	c69d                	beqz	a3,1c004644 <S6_Linear_2x64+0xfe>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004618:	10000e13          	li	t3,256
1c00461c:	00204537          	lui	a0,0x204
  __builtin_pulp_spr_write(reg, val);
1c004620:	30031073          	csrw	mstatus,t1
1c004624:	01c52423          	sw	t3,8(a0) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004628:	03c56683          	p.elw	a3,60(a0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00462c:	01c52223          	sw	t3,4(a0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004630:	30047373          	csrrci	t1,mstatus,8
1c004634:	40452683          	lw	a3,1028(a0)
1c004638:	58ce                	lw	a7,240(sp)
1c00463a:	4116d6b3          	sra	a3,a3,a7
1c00463e:	fc16b6b3          	p.bclr	a3,a3,30,1
1c004642:	fef9                	bnez	a3,1c004620 <S6_Linear_2x64+0xda>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004644:	4685                	li	a3,1
1c004646:	011698b3          	sll	a7,a3,a7
1c00464a:	002046b7          	lui	a3,0x204
1c00464e:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004652:	30031073          	csrw	mstatus,t1
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+64), 128, 0, &DmaR_Evt2);
1c004656:	100006b7          	lui	a3,0x10000
1c00465a:	01c6a883          	lw	a7,28(a3) # 1000001c <model_L1_Memory>
1c00465e:	04088893          	addi	a7,a7,64
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004662:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004666:	00204537          	lui	a0,0x204
1c00466a:	40052503          	lw	a0,1024(a0) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00466e:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004672:	08068693          	addi	a3,a3,128 # b0080 <__L2+0x30080>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004676:	c156c6b3          	p.bset	a3,a3,0,21
1c00467a:	00204e37          	lui	t3,0x204
1c00467e:	40de2023          	sw	a3,1024(t3) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004682:	002046b7          	lui	a3,0x204
1c004686:	4116a023          	sw	a7,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00468a:	40b6a023          	sw	a1,1024(a3)
        if (!merge) copy->id = id;
1c00468e:	c9aa                	sw	a0,208(sp)
        copy->length = 0;
1c004690:	d182                	sw	zero,224(sp)
  __builtin_pulp_spr_write(reg, val);
1c004692:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c004696:	568e                	lw	a3,224(sp)
1c004698:	c285                	beqz	a3,1c0046b8 <S6_Linear_2x64+0x172>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00469a:	552e                	lw	a0,232(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00469c:	02000593          	li	a1,32
1c0046a0:	002046b7          	lui	a3,0x204
1c0046a4:	c52d                	beqz	a0,1c00470e <S6_Linear_2x64+0x1c8>
1c0046a6:	00b6a423          	sw	a1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0046aa:	03c6e503          	p.elw	a0,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0046ae:	00b6a223          	sw	a1,4(a3)
1c0046b2:	552e                	lw	a0,232(sp)
1c0046b4:	f96d                	bnez	a0,1c0046a6 <S6_Linear_2x64+0x160>
1c0046b6:	a8a1                	j	1c00470e <S6_Linear_2x64+0x1c8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0046b8:	300478f3          	csrrci	a7,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0046bc:	002046b7          	lui	a3,0x204
1c0046c0:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c0046c4:	454e                	lw	a0,208(sp)
1c0046c6:	40a6d6b3          	sra	a3,a3,a0
1c0046ca:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0046ce:	c69d                	beqz	a3,1c0046fc <S6_Linear_2x64+0x1b6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0046d0:	10000313          	li	t1,256
1c0046d4:	002045b7          	lui	a1,0x204
  __builtin_pulp_spr_write(reg, val);
1c0046d8:	30089073          	csrw	mstatus,a7
1c0046dc:	0065a423          	sw	t1,8(a1) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0046e0:	03c5e683          	p.elw	a3,60(a1)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0046e4:	0065a223          	sw	t1,4(a1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0046e8:	300478f3          	csrrci	a7,mstatus,8
1c0046ec:	4045a683          	lw	a3,1028(a1)
1c0046f0:	454e                	lw	a0,208(sp)
1c0046f2:	40a6d6b3          	sra	a3,a3,a0
1c0046f6:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0046fa:	fef9                	bnez	a3,1c0046d8 <S6_Linear_2x64+0x192>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0046fc:	4685                	li	a3,1
1c0046fe:	00a69533          	sll	a0,a3,a0
1c004702:	002046b7          	lui	a3,0x204
1c004706:	40a6a223          	sw	a0,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00470a:	30089073          	csrw	mstatus,a7
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+192), 8, 0, &DmaR_Evt3);
1c00470e:	100006b7          	lui	a3,0x10000
1c004712:	01c6a503          	lw	a0,28(a3) # 1000001c <model_L1_Memory>
1c004716:	0c050513          	addi	a0,a0,192
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00471a:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00471e:	002045b7          	lui	a1,0x204
1c004722:	4005a583          	lw	a1,1024(a1) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004726:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00472a:	06a1                	addi	a3,a3,8
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00472c:	c156c6b3          	p.bset	a3,a3,0,21
1c004730:	00204337          	lui	t1,0x204
1c004734:	40d32023          	sw	a3,1024(t1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004738:	002046b7          	lui	a3,0x204
1c00473c:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004740:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c004744:	d92e                	sw	a1,176(sp)
        copy->length = 0;
1c004746:	c182                	sw	zero,192(sp)
  __builtin_pulp_spr_write(reg, val);
1c004748:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c00474c:	468e                	lw	a3,192(sp)
1c00474e:	c285                	beqz	a3,1c00476e <S6_Linear_2x64+0x228>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004750:	45ae                	lw	a1,200(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004752:	02000613          	li	a2,32
1c004756:	002046b7          	lui	a3,0x204
1c00475a:	c5ad                	beqz	a1,1c0047c4 <S6_Linear_2x64+0x27e>
1c00475c:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004760:	03c6e583          	p.elw	a1,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004764:	00c6a223          	sw	a2,4(a3)
1c004768:	45ae                	lw	a1,200(sp)
1c00476a:	f9ed                	bnez	a1,1c00475c <S6_Linear_2x64+0x216>
1c00476c:	a8a1                	j	1c0047c4 <S6_Linear_2x64+0x27e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00476e:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004772:	002046b7          	lui	a3,0x204
1c004776:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c00477a:	55ca                	lw	a1,176(sp)
1c00477c:	40b6d6b3          	sra	a3,a3,a1
1c004780:	fc16b6b3          	p.bclr	a3,a3,30,1
1c004784:	c69d                	beqz	a3,1c0047b2 <S6_Linear_2x64+0x26c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004786:	10000893          	li	a7,256
1c00478a:	00204637          	lui	a2,0x204
  __builtin_pulp_spr_write(reg, val);
1c00478e:	30051073          	csrw	mstatus,a0
1c004792:	01162423          	sw	a7,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004796:	03c66683          	p.elw	a3,60(a2)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00479a:	01162223          	sw	a7,4(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00479e:	30047573          	csrrci	a0,mstatus,8
1c0047a2:	40462683          	lw	a3,1028(a2)
1c0047a6:	55ca                	lw	a1,176(sp)
1c0047a8:	40b6d6b3          	sra	a3,a3,a1
1c0047ac:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0047b0:	fef9                	bnez	a3,1c00478e <S6_Linear_2x64+0x248>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0047b2:	4685                	li	a3,1
1c0047b4:	00b695b3          	sll	a1,a3,a1
1c0047b8:	002046b7          	lui	a3,0x204
1c0047bc:	40b6a223          	sw	a1,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0047c0:	30051073          	csrw	mstatus,a0
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+204), 2, 0, &DmaR_Evt4);
1c0047c4:	100006b7          	lui	a3,0x10000
1c0047c8:	01c6a583          	lw	a1,28(a3) # 1000001c <model_L1_Memory>
1c0047cc:	0cc58593          	addi	a1,a1,204
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0047d0:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0047d4:	00204637          	lui	a2,0x204
1c0047d8:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0047dc:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0047e0:	0689                	addi	a3,a3,2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0047e2:	c156c6b3          	p.bset	a3,a3,0,21
1c0047e6:	002048b7          	lui	a7,0x204
1c0047ea:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0047ee:	002046b7          	lui	a3,0x204
1c0047f2:	40b6a023          	sw	a1,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0047f6:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c0047fa:	c932                	sw	a2,144(sp)
        copy->length = 0;
1c0047fc:	d102                	sw	zero,160(sp)
  __builtin_pulp_spr_write(reg, val);
1c0047fe:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c004802:	570a                	lw	a4,160(sp)
1c004804:	c305                	beqz	a4,1c004824 <S6_Linear_2x64+0x2de>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004806:	562a                	lw	a2,168(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004808:	02000693          	li	a3,32
1c00480c:	00204737          	lui	a4,0x204
1c004810:	c62d                	beqz	a2,1c00487a <S6_Linear_2x64+0x334>
1c004812:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004816:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00481a:	00d72223          	sw	a3,4(a4)
1c00481e:	562a                	lw	a2,168(sp)
1c004820:	fa6d                	bnez	a2,1c004812 <S6_Linear_2x64+0x2cc>
1c004822:	a8a1                	j	1c00487a <S6_Linear_2x64+0x334>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004824:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004828:	00204737          	lui	a4,0x204
1c00482c:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c004830:	464a                	lw	a2,144(sp)
1c004832:	40c75733          	sra	a4,a4,a2
1c004836:	fc173733          	p.bclr	a4,a4,30,1
1c00483a:	c71d                	beqz	a4,1c004868 <S6_Linear_2x64+0x322>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00483c:	10000513          	li	a0,256
1c004840:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c004844:	30059073          	csrw	mstatus,a1
1c004848:	00a6a423          	sw	a0,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00484c:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004850:	00a6a223          	sw	a0,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004854:	300475f3          	csrrci	a1,mstatus,8
1c004858:	4046a703          	lw	a4,1028(a3)
1c00485c:	464a                	lw	a2,144(sp)
1c00485e:	40c75733          	sra	a4,a4,a2
1c004862:	fc173733          	p.bclr	a4,a4,30,1
1c004866:	ff79                	bnez	a4,1c004844 <S6_Linear_2x64+0x2fe>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004868:	4705                	li	a4,1
1c00486a:	00c71633          	sll	a2,a4,a2
1c00486e:	00204737          	lui	a4,0x204
1c004872:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004876:	30059073          	csrw	mstatus,a1
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+208), 2, 0, &DmaR_Evt5);
1c00487a:	10000737          	lui	a4,0x10000
1c00487e:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c004882:	0d060613          	addi	a2,a2,208
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004886:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00488a:	002046b7          	lui	a3,0x204
1c00488e:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004892:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004896:	0709                	addi	a4,a4,2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004898:	c1574733          	p.bset	a4,a4,0,21
1c00489c:	00204537          	lui	a0,0x204
1c0048a0:	40e52023          	sw	a4,1024(a0) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0048a4:	00204737          	lui	a4,0x204
1c0048a8:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0048ac:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c0048b0:	d8b6                	sw	a3,112(sp)
        copy->length = 0;
1c0048b2:	c102                	sw	zero,128(sp)
  __builtin_pulp_spr_write(reg, val);
1c0048b4:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c0048b8:	478a                	lw	a5,128(sp)
1c0048ba:	c385                	beqz	a5,1c0048da <S6_Linear_2x64+0x394>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0048bc:	46aa                	lw	a3,136(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0048be:	02000713          	li	a4,32
1c0048c2:	002047b7          	lui	a5,0x204
1c0048c6:	c6ad                	beqz	a3,1c004930 <S6_Linear_2x64+0x3ea>
1c0048c8:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0048cc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0048d0:	00e7a223          	sw	a4,4(a5)
1c0048d4:	46aa                	lw	a3,136(sp)
1c0048d6:	faed                	bnez	a3,1c0048c8 <S6_Linear_2x64+0x382>
1c0048d8:	a8a1                	j	1c004930 <S6_Linear_2x64+0x3ea>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0048da:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0048de:	002047b7          	lui	a5,0x204
1c0048e2:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0048e6:	56c6                	lw	a3,112(sp)
1c0048e8:	40d7d7b3          	sra	a5,a5,a3
1c0048ec:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0048f0:	c79d                	beqz	a5,1c00491e <S6_Linear_2x64+0x3d8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0048f2:	10000593          	li	a1,256
1c0048f6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0048fa:	30061073          	csrw	mstatus,a2
1c0048fe:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004902:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004906:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00490a:	30047673          	csrrci	a2,mstatus,8
1c00490e:	40472783          	lw	a5,1028(a4)
1c004912:	56c6                	lw	a3,112(sp)
1c004914:	40d7d7b3          	sra	a5,a5,a3
1c004918:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00491c:	fff9                	bnez	a5,1c0048fa <S6_Linear_2x64+0x3b4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00491e:	4785                	li	a5,1
1c004920:	00d796b3          	sll	a3,a5,a3
1c004924:	002047b7          	lui	a5,0x204
1c004928:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00492c:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+212), 9, 0, &DmaR_Evt6);
1c004930:	100007b7          	lui	a5,0x10000
1c004934:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c004938:	0d468693          	addi	a3,a3,212
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00493c:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004940:	00204737          	lui	a4,0x204
1c004944:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004948:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00494c:	07a5                	addi	a5,a5,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00494e:	c157c7b3          	p.bset	a5,a5,0,21
1c004952:	002045b7          	lui	a1,0x204
1c004956:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00495a:	002047b7          	lui	a5,0x204
1c00495e:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004962:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c004966:	c8ba                	sw	a4,80(sp)
        copy->length = 0;
1c004968:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c00496a:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00496e:	5786                	lw	a5,96(sp)
1c004970:	c385                	beqz	a5,1c004990 <S6_Linear_2x64+0x44a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004972:	56a6                	lw	a3,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004974:	02000713          	li	a4,32
1c004978:	002047b7          	lui	a5,0x204
1c00497c:	c6ad                	beqz	a3,1c0049e6 <S6_Linear_2x64+0x4a0>
1c00497e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004982:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004986:	00e7a223          	sw	a4,4(a5)
1c00498a:	56a6                	lw	a3,104(sp)
1c00498c:	faed                	bnez	a3,1c00497e <S6_Linear_2x64+0x438>
1c00498e:	a8a1                	j	1c0049e6 <S6_Linear_2x64+0x4a0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004990:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004994:	002047b7          	lui	a5,0x204
1c004998:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00499c:	46c6                	lw	a3,80(sp)
1c00499e:	40d7d7b3          	sra	a5,a5,a3
1c0049a2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0049a6:	c79d                	beqz	a5,1c0049d4 <S6_Linear_2x64+0x48e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0049a8:	10000593          	li	a1,256
1c0049ac:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0049b0:	30061073          	csrw	mstatus,a2
1c0049b4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0049b8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0049bc:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0049c0:	30047673          	csrrci	a2,mstatus,8
1c0049c4:	40472783          	lw	a5,1028(a4)
1c0049c8:	46c6                	lw	a3,80(sp)
1c0049ca:	40d7d7b3          	sra	a5,a5,a3
1c0049ce:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0049d2:	fff9                	bnez	a5,1c0049b0 <S6_Linear_2x64+0x46a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0049d4:	4785                	li	a5,1
1c0049d6:	00d796b3          	sll	a3,a5,a3
1c0049da:	002047b7          	lui	a5,0x204
1c0049de:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0049e2:	30061073          	csrw	mstatus,a2
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0049e6:	002044b7          	lui	s1,0x204
1c0049ea:	0ff00793          	li	a5,255
1c0049ee:	08f4a223          	sw	a5,132(s1) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0049f2:	20048913          	addi	s2,s1,512
1c0049f6:	00f92023          	sw	a5,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0049fa:	00f92623          	sw	a5,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0049fe:	1c0077b7          	lui	a5,0x1c007
1c004a02:	a5278793          	addi	a5,a5,-1454 # 1c006a52 <KerParLinearLayerFullFeatB32_SQ8>
1c004a06:	00204737          	lui	a4,0x204
1c004a0a:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c004a0e:	0068                	addi	a0,sp,12
1c004a10:	002047b7          	lui	a5,0x204
1c004a14:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c004a18:	03a020ef          	jal	ra,1c006a52 <KerParLinearLayerFullFeatB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004a1c:	01c96783          	p.elw	a5,28(s2)
			AT_FORK(gap_ncore(), (void *) KerParLinearLayerFullFeatB32_SQ8, (void *) KerArg0);
			__CALL(KerParLinearLayerFullFeatB32_SQ8, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+200), 2, 1, &DmaW_Evt1);
1c004a20:	100007b7          	lui	a5,0x10000
1c004a24:	01c7a703          	lw	a4,28(a5) # 1000001c <model_L1_Memory>
1c004a28:	0c870713          	addi	a4,a4,200
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004a2c:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004a30:	4004a483          	lw	s1,1024(s1)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004a34:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004a38:	0789                	addi	a5,a5,2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004a3a:	c157c7b3          	p.bset	a5,a5,0,21
1c004a3e:	00204637          	lui	a2,0x204
1c004a42:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004a46:	002047b7          	lui	a5,0x204
1c004a4a:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004a4e:	4087a023          	sw	s0,1024(a5)
        if (!merge) copy->id = id;
1c004a52:	d826                	sw	s1,48(sp)
        copy->length = 0;
1c004a54:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c004a56:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c004a5a:	4786                	lw	a5,64(sp)
1c004a5c:	c385                	beqz	a5,1c004a7c <S6_Linear_2x64+0x536>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004a5e:	46a6                	lw	a3,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004a60:	02000713          	li	a4,32
1c004a64:	002047b7          	lui	a5,0x204
1c004a68:	c6ad                	beqz	a3,1c004ad2 <S6_Linear_2x64+0x58c>
1c004a6a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004a6e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004a72:	00e7a223          	sw	a4,4(a5)
1c004a76:	46a6                	lw	a3,72(sp)
1c004a78:	faed                	bnez	a3,1c004a6a <S6_Linear_2x64+0x524>
1c004a7a:	a8a1                	j	1c004ad2 <S6_Linear_2x64+0x58c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004a7c:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004a80:	002047b7          	lui	a5,0x204
1c004a84:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004a88:	56c2                	lw	a3,48(sp)
1c004a8a:	40d7d7b3          	sra	a5,a5,a3
1c004a8e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004a92:	c79d                	beqz	a5,1c004ac0 <S6_Linear_2x64+0x57a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004a94:	10000593          	li	a1,256
1c004a98:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004a9c:	30061073          	csrw	mstatus,a2
1c004aa0:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004aa4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004aa8:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004aac:	30047673          	csrrci	a2,mstatus,8
1c004ab0:	40472783          	lw	a5,1028(a4)
1c004ab4:	56c2                	lw	a3,48(sp)
1c004ab6:	40d7d7b3          	sra	a5,a5,a3
1c004aba:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004abe:	fff9                	bnez	a5,1c004a9c <S6_Linear_2x64+0x556>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004ac0:	4785                	li	a5,1
1c004ac2:	00d796b3          	sll	a3,a5,a3
1c004ac6:	002047b7          	lui	a5,0x204
1c004aca:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004ace:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c004ad2:	11c12083          	lw	ra,284(sp)
1c004ad6:	11812403          	lw	s0,280(sp)
1c004ada:	11412483          	lw	s1,276(sp)
1c004ade:	11012903          	lw	s2,272(sp)
1c004ae2:	6115                	addi	sp,sp,288
1c004ae4:	8082                	ret

1c004ae6 <S7_SoftMax>:
void S7_SoftMax(
		signed char * __restrict__ In,
		short int * __restrict__ Out,
		signed char * __restrict__ Infos)

{
1c004ae6:	7175                	addi	sp,sp,-144
1c004ae8:	c706                	sw	ra,140(sp)
1c004aea:	c522                	sw	s0,136(sp)
1c004aec:	c326                	sw	s1,132(sp)
1c004aee:	c14a                	sw	s2,128(sp)
1c004af0:	dece                	sw	s3,124(sp)
1c004af2:	842e                	mv	s0,a1
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[9x1], 1]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (signed char *__restrict__) (model_L1_Memory+0);
1c004af4:	100007b7          	lui	a5,0x10000
1c004af8:	01c7a703          	lw	a4,28(a5) # 1000001c <model_L1_Memory>
1c004afc:	c03a                	sw	a4,0(sp)
	KerArg0->N = (unsigned short int) (2);
1c004afe:	4789                	li	a5,2
1c004b00:	00f11223          	sh	a5,4(sp)
	KerArg0->Out = (short int *__restrict__) (model_L1_Memory+4);
1c004b04:	00470793          	addi	a5,a4,4
1c004b08:	c43e                	sw	a5,8(sp)
	KerArg0->Infos = (signed char *__restrict__) (model_L1_Memory+8);
1c004b0a:	00870793          	addi	a5,a4,8
1c004b0e:	c63e                	sw	a5,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b10:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004b14:	002046b7          	lui	a3,0x204
1c004b18:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004b1c:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004b20:	0789                	addi	a5,a5,2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004b22:	c157c7b3          	p.bset	a5,a5,0,21
1c004b26:	00204837          	lui	a6,0x204
1c004b2a:	40f82023          	sw	a5,1024(a6) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004b2e:	002047b7          	lui	a5,0x204
1c004b32:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004b36:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c004b3a:	c8b6                	sw	a3,80(sp)
        copy->length = 0;
1c004b3c:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c004b3e:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c004b42:	5786                	lw	a5,96(sp)
1c004b44:	c385                	beqz	a5,1c004b64 <S7_SoftMax+0x7e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004b46:	56a6                	lw	a3,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004b48:	02000713          	li	a4,32
1c004b4c:	002047b7          	lui	a5,0x204
1c004b50:	c6ad                	beqz	a3,1c004bba <S7_SoftMax+0xd4>
1c004b52:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004b56:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004b5a:	00e7a223          	sw	a4,4(a5)
1c004b5e:	56a6                	lw	a3,104(sp)
1c004b60:	faed                	bnez	a3,1c004b52 <S7_SoftMax+0x6c>
1c004b62:	a8a1                	j	1c004bba <S7_SoftMax+0xd4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b64:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004b68:	002047b7          	lui	a5,0x204
1c004b6c:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004b70:	46c6                	lw	a3,80(sp)
1c004b72:	40d7d7b3          	sra	a5,a5,a3
1c004b76:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004b7a:	c79d                	beqz	a5,1c004ba8 <S7_SoftMax+0xc2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004b7c:	10000513          	li	a0,256
1c004b80:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004b84:	30059073          	csrw	mstatus,a1
1c004b88:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004b8c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004b90:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b94:	300475f3          	csrrci	a1,mstatus,8
1c004b98:	40472783          	lw	a5,1028(a4)
1c004b9c:	46c6                	lw	a3,80(sp)
1c004b9e:	40d7d7b3          	sra	a5,a5,a3
1c004ba2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004ba6:	fff9                	bnez	a5,1c004b84 <S7_SoftMax+0x9e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004ba8:	4785                	li	a5,1
1c004baa:	00d796b3          	sll	a3,a5,a3
1c004bae:	002047b7          	lui	a5,0x204
1c004bb2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004bb6:	30059073          	csrw	mstatus,a1
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+0), 2, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+8), 9, 0, &DmaR_Evt2);
1c004bba:	100007b7          	lui	a5,0x10000
1c004bbe:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c004bc2:	06a1                	addi	a3,a3,8
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004bc4:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004bc8:	00204737          	lui	a4,0x204
1c004bcc:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004bd0:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004bd4:	07a5                	addi	a5,a5,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004bd6:	c157c7b3          	p.bset	a5,a5,0,21
1c004bda:	00204537          	lui	a0,0x204
1c004bde:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004be2:	002047b7          	lui	a5,0x204
1c004be6:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004bea:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c004bee:	d83a                	sw	a4,48(sp)
        copy->length = 0;
1c004bf0:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c004bf2:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c004bf6:	4786                	lw	a5,64(sp)
1c004bf8:	c385                	beqz	a5,1c004c18 <S7_SoftMax+0x132>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004bfa:	46a6                	lw	a3,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004bfc:	02000713          	li	a4,32
1c004c00:	002047b7          	lui	a5,0x204
1c004c04:	c6ad                	beqz	a3,1c004c6e <S7_SoftMax+0x188>
1c004c06:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004c0a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004c0e:	00e7a223          	sw	a4,4(a5)
1c004c12:	46a6                	lw	a3,72(sp)
1c004c14:	faed                	bnez	a3,1c004c06 <S7_SoftMax+0x120>
1c004c16:	a8a1                	j	1c004c6e <S7_SoftMax+0x188>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004c18:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004c1c:	002047b7          	lui	a5,0x204
1c004c20:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004c24:	56c2                	lw	a3,48(sp)
1c004c26:	40d7d7b3          	sra	a5,a5,a3
1c004c2a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004c2e:	c79d                	beqz	a5,1c004c5c <S7_SoftMax+0x176>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004c30:	10000593          	li	a1,256
1c004c34:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004c38:	30061073          	csrw	mstatus,a2
1c004c3c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004c40:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004c44:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004c48:	30047673          	csrrci	a2,mstatus,8
1c004c4c:	40472783          	lw	a5,1028(a4)
1c004c50:	56c2                	lw	a3,48(sp)
1c004c52:	40d7d7b3          	sra	a5,a5,a3
1c004c56:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004c5a:	fff9                	bnez	a5,1c004c38 <S7_SoftMax+0x152>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004c5c:	4785                	li	a5,1
1c004c5e:	00d796b3          	sll	a3,a5,a3
1c004c62:	002047b7          	lui	a5,0x204
1c004c66:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004c6a:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Infos */
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on Tile0 */
		int T0Ind_Last = 1;
		/*====================== Call Kernel LOC_LOOP =========================*/
		KerArg0->Norm = (unsigned short int) (((char *)(model_L1_Memory+8))[0]);
1c004c6e:	10000937          	lui	s2,0x10000
1c004c72:	01c90913          	addi	s2,s2,28 # 1000001c <model_L1_Memory>
1c004c76:	00092783          	lw	a5,0(s2)
1c004c7a:	0087c783          	lbu	a5,8(a5)
1c004c7e:	00f11323          	sh	a5,6(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004c82:	002044b7          	lui	s1,0x204
1c004c86:	0ff00793          	li	a5,255
1c004c8a:	08f4a223          	sw	a5,132(s1) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004c8e:	20048993          	addi	s3,s1,512
1c004c92:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c004c96:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004c9a:	1c0087b7          	lui	a5,0x1c008
1c004c9e:	4f278793          	addi	a5,a5,1266 # 1c0084f2 <KerParSoftMax_SQ8>
1c004ca2:	00204737          	lui	a4,0x204
1c004ca6:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c004caa:	850a                	mv	a0,sp
1c004cac:	002047b7          	lui	a5,0x204
1c004cb0:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c004cb4:	03f030ef          	jal	ra,1c0084f2 <KerParSoftMax_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004cb8:	01c9e783          	p.elw	a5,28(s3)
		AT_FORK(gap_ncore(), (void *) KerParSoftMax_SQ8, (void *) KerArg0);
		__CALL(KerParSoftMax_SQ8, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) model_L1_Memory+4), 4, 1, &DmaW_Evt1);
1c004cbc:	00092703          	lw	a4,0(s2)
1c004cc0:	0711                	addi	a4,a4,4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004cc2:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004cc6:	4004a483          	lw	s1,1024(s1)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004cca:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004cce:	0791                	addi	a5,a5,4
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004cd0:	c157c7b3          	p.bset	a5,a5,0,21
1c004cd4:	00204637          	lui	a2,0x204
1c004cd8:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004cdc:	002047b7          	lui	a5,0x204
1c004ce0:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004ce4:	4087a023          	sw	s0,1024(a5)
        if (!merge) copy->id = id;
1c004ce8:	c826                	sw	s1,16(sp)
        copy->length = 0;
1c004cea:	d002                	sw	zero,32(sp)
  __builtin_pulp_spr_write(reg, val);
1c004cec:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c004cf0:	5782                	lw	a5,32(sp)
1c004cf2:	c385                	beqz	a5,1c004d12 <S7_SoftMax+0x22c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004cf4:	56a2                	lw	a3,40(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004cf6:	02000713          	li	a4,32
1c004cfa:	002047b7          	lui	a5,0x204
1c004cfe:	c6ad                	beqz	a3,1c004d68 <S7_SoftMax+0x282>
1c004d00:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004d04:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004d08:	00e7a223          	sw	a4,4(a5)
1c004d0c:	56a2                	lw	a3,40(sp)
1c004d0e:	faed                	bnez	a3,1c004d00 <S7_SoftMax+0x21a>
1c004d10:	a8a1                	j	1c004d68 <S7_SoftMax+0x282>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004d12:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004d16:	002047b7          	lui	a5,0x204
1c004d1a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004d1e:	46c2                	lw	a3,16(sp)
1c004d20:	40d7d7b3          	sra	a5,a5,a3
1c004d24:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004d28:	c79d                	beqz	a5,1c004d56 <S7_SoftMax+0x270>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004d2a:	10000593          	li	a1,256
1c004d2e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004d32:	30061073          	csrw	mstatus,a2
1c004d36:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004d3a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004d3e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004d42:	30047673          	csrrci	a2,mstatus,8
1c004d46:	40472783          	lw	a5,1028(a4)
1c004d4a:	46c2                	lw	a3,16(sp)
1c004d4c:	40d7d7b3          	sra	a5,a5,a3
1c004d50:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004d54:	fff9                	bnez	a5,1c004d32 <S7_SoftMax+0x24c>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004d56:	4785                	li	a5,1
1c004d58:	00d796b3          	sll	a3,a5,a3
1c004d5c:	002047b7          	lui	a5,0x204
1c004d60:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004d64:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c004d68:	40ba                	lw	ra,140(sp)
1c004d6a:	442a                	lw	s0,136(sp)
1c004d6c:	449a                	lw	s1,132(sp)
1c004d6e:	490a                	lw	s2,128(sp)
1c004d70:	59f6                	lw	s3,124(sp)
1c004d72:	6149                	addi	sp,sp,144
1c004d74:	8082                	ret

1c004d76 <modelCNN_Construct>:
int modelCNN_Construct()

{
1c004d76:	7125                	addi	sp,sp,-416
1c004d78:	18112e23          	sw	ra,412(sp)
1c004d7c:	18812c23          	sw	s0,408(sp)
1c004d80:	18912a23          	sw	s1,404(sp)
1c004d84:	19212823          	sw	s2,400(sp)
1c004d88:	19312623          	sw	s3,396(sp)
1c004d8c:	19412423          	sw	s4,392(sp)
1c004d90:	19512223          	sw	s5,388(sp)
1c004d94:	19612023          	sw	s6,384(sp)
1c004d98:	17712e23          	sw	s7,380(sp)
1c004d9c:	17812c23          	sw	s8,376(sp)
1c004da0:	17912a23          	sw	s9,372(sp)
1c004da4:	17a12823          	sw	s10,368(sp)
1c004da8:	17b12623          	sw	s11,364(sp)
	AT_HYPERFLASH_FS_FC_EVENT UchanHF1;
	AT_HYPERRAM_FC_EVENT UchanHR2;
	AT_HYPERRAM_CONF_T HyperRamConf;
	AT_HYPERFLASH_FS_CONF_T HyperFlashConf;
	int Error;
	AT_HYPERRAM_CONF_INIT(&HyperRamConf, AT_MEM_L3_HRAM, 0);
1c004dac:	1868                	addi	a0,sp,60
1c004dae:	693040ef          	jal	ra,1c009c40 <pi_hyperram_conf_init>
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c004db2:	1028                	addi	a0,sp,40
1c004db4:	2b3030ef          	jal	ra,1c008866 <pi_fs_conf_init>
	AT_HYPERRAM_OPEN(&HyperRam, &HyperRamConf, &Error);
1c004db8:	1c00f437          	lui	s0,0x1c00f
1c004dbc:	186c                	addi	a1,sp,60
1c004dbe:	66440513          	addi	a0,s0,1636 # 1c00f664 <HyperRam>
1c004dc2:	13c060ef          	jal	ra,1c00aefe <pi_open_from_conf>
1c004dc6:	66440513          	addi	a0,s0,1636
1c004dca:	71f040ef          	jal	ra,1c009ce8 <pi_ram_open>
	if (Error) return 1;
1c004dce:	4a85                	li	s5,1
1c004dd0:	cd15                	beqz	a0,1c004e0c <modelCNN_Construct+0x96>
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	/* Moving S7_Infos, size 9 from HyperFlash at 2011292 to (size 9) L2 at 20636..20644 */
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011292), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20636), 9, 0, &UchanHF1);
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	return 0;
}
1c004dd2:	8556                	mv	a0,s5
1c004dd4:	19c12083          	lw	ra,412(sp)
1c004dd8:	19812403          	lw	s0,408(sp)
1c004ddc:	19412483          	lw	s1,404(sp)
1c004de0:	19012903          	lw	s2,400(sp)
1c004de4:	18c12983          	lw	s3,396(sp)
1c004de8:	18812a03          	lw	s4,392(sp)
1c004dec:	18412a83          	lw	s5,388(sp)
1c004df0:	18012b03          	lw	s6,384(sp)
1c004df4:	17c12b83          	lw	s7,380(sp)
1c004df8:	17812c03          	lw	s8,376(sp)
1c004dfc:	17412c83          	lw	s9,372(sp)
1c004e00:	17012d03          	lw	s10,368(sp)
1c004e04:	16c12d83          	lw	s11,364(sp)
1c004e08:	611d                	addi	sp,sp,416
1c004e0a:	8082                	ret
typedef pi_cl_fs_req_t AT_HYPERFLASH_FS_CL_EVENT;

static inline void __at_hyperflash_fs_open(AT_HYPERFLASH_FS_T *file, int is_write, struct pi_fs_conf *conf, const char *filename, int *err)
{
  struct pi_hyperflash_conf hyperflash_conf;
  pi_hyperflash_conf_init(&hyperflash_conf);
1c004e0c:	0848                	addi	a0,sp,20
1c004e0e:	503040ef          	jal	ra,1c009b10 <pi_hyperflash_conf_init>
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c004e12:	1c00f437          	lui	s0,0x1c00f
1c004e16:	65440413          	addi	s0,s0,1620 # 1c00f654 <_edata+0xc>
1c004e1a:	084c                	addi	a1,sp,20
1c004e1c:	8522                	mv	a0,s0
1c004e1e:	0e0060ef          	jal	ra,1c00aefe <pi_open_from_conf>
  if (pi_flash_open(&file->hyperflash))
1c004e22:	8522                	mv	a0,s0
1c004e24:	203030ef          	jal	ra,1c008826 <pi_flash_open>
1c004e28:	e905                	bnez	a0,1c004e58 <modelCNN_Construct+0xe2>
  {
    *err = -1;
    return;
  }
  conf->flash = &file->hyperflash;
1c004e2a:	1c00f437          	lui	s0,0x1c00f
1c004e2e:	64840793          	addi	a5,s0,1608 # 1c00f648 <_edata>
1c004e32:	07b1                	addi	a5,a5,12
1c004e34:	d63e                	sw	a5,44(sp)

  // Always force host FS for now in case we open for writing since readfs only supports reading
  if (is_write)
    conf->type = PI_FS_HOST;
  else
    conf->type = PI_FS_READ_ONLY;
1c004e36:	d402                	sw	zero,40(sp)

#ifdef __FLASH_FS_SEMIHOST__
  conf->type = PI_FS_HOST;
#endif

  pi_open_from_conf(&file->fs, conf);
1c004e38:	102c                	addi	a1,sp,40
1c004e3a:	64840513          	addi	a0,s0,1608
1c004e3e:	0c0060ef          	jal	ra,1c00aefe <pi_open_from_conf>
  if (pi_fs_mount(&file->fs))
1c004e42:	64840513          	addi	a0,s0,1608
1c004e46:	233030ef          	jal	ra,1c008878 <pi_fs_mount>
1c004e4a:	c909                	beqz	a0,1c004e5c <modelCNN_Construct+0xe6>


static inline void pi_flash_close(struct pi_device *device)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->close(device);
1c004e4c:	64840513          	addi	a0,s0,1608
1c004e50:	455c                	lw	a5,12(a0)
1c004e52:	43dc                	lw	a5,4(a5)
1c004e54:	0531                	addi	a0,a0,12
1c004e56:	9782                	jalr	a5
	if (Error) return 1;
1c004e58:	4a85                	li	s5,1
1c004e5a:	bfa5                	j	1c004dd2 <modelCNN_Construct+0x5c>
  {
    pi_flash_close(&file->hyperflash);
    *err = -1;
    return;
  }
  file->file = pi_fs_open(&file->fs, filename, is_write ? PI_FS_FLAGS_WRITE : 0);
1c004e5c:	1c00f537          	lui	a0,0x1c00f
1c004e60:	64850413          	addi	s0,a0,1608 # 1c00f648 <_edata>
1c004e64:	4601                	li	a2,0
1c004e66:	1c00f5b7          	lui	a1,0x1c00f
1c004e6a:	dcc58593          	addi	a1,a1,-564 # 1c00edcc <__clz_tab+0x304>
1c004e6e:	64850513          	addi	a0,a0,1608
1c004e72:	23b030ef          	jal	ra,1c0088ac <pi_fs_open>
1c004e76:	cc08                	sw	a0,24(s0)
  if (file->file == NULL)
1c004e78:	c515                	beqz	a0,1c004ea4 <modelCNN_Construct+0x12e>
}

static inline int pi_ram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
    pi_ram_api_t *api = (pi_ram_api_t *)device->api;
    return api->alloc(device, addr, size);
1c004e7a:	1c00f537          	lui	a0,0x1c00f
1c004e7e:	66452783          	lw	a5,1636(a0) # 1c00f664 <HyperRam>
1c004e82:	4b9c                	lw	a5,16(a5)
1c004e84:	001f9637          	lui	a2,0x1f9
1c004e88:	4d060613          	addi	a2,a2,1232 # 1f94d0 <__L2+0x1794d0>
1c004e8c:	084c                	addi	a1,sp,20
1c004e8e:	66450513          	addi	a0,a0,1636
1c004e92:	9782                	jalr	a5
1c004e94:	8a2a                	mv	s4,a0
	model_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 2069712);
1c004e96:	c11d                	beqz	a0,1c004ebc <modelCNN_Construct+0x146>
1c004e98:	1c0107b7          	lui	a5,0x1c010
1c004e9c:	9207a023          	sw	zero,-1760(a5) # 1c00f920 <model_L3_Memory>
	if (model_L3_Memory == 0) return 2;
1c004ea0:	4a89                	li	s5,2
1c004ea2:	bf05                	j	1c004dd2 <modelCNN_Construct+0x5c>
  {
    pi_fs_unmount(&file->fs);
1c004ea4:	1c00f537          	lui	a0,0x1c00f
1c004ea8:	64850513          	addi	a0,a0,1608 # 1c00f648 <_edata>
1c004eac:	1f9030ef          	jal	ra,1c0088a4 <pi_fs_unmount>
1c004eb0:	445c                	lw	a5,12(s0)
1c004eb2:	43dc                	lw	a5,4(a5)
1c004eb4:	00c40513          	addi	a0,s0,12
1c004eb8:	9782                	jalr	a5
1c004eba:	bf79                	j	1c004e58 <modelCNN_Construct+0xe2>
	model_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 2069712);
1c004ebc:	47d2                	lw	a5,20(sp)
1c004ebe:	2e079de3          	bnez	a5,1c0059b8 <modelCNN_Construct+0xc42>
1c004ec2:	1c00f537          	lui	a0,0x1c00f
1c004ec6:	66452783          	lw	a5,1636(a0) # 1c00f664 <HyperRam>
1c004eca:	4b9c                	lw	a5,16(a5)
1c004ecc:	001f9637          	lui	a2,0x1f9
1c004ed0:	4d060613          	addi	a2,a2,1232 # 1f94d0 <__L2+0x1794d0>
1c004ed4:	084c                	addi	a1,sp,20
1c004ed6:	66450513          	addi	a0,a0,1636
1c004eda:	9782                	jalr	a5
1c004edc:	fd55                	bnez	a0,1c004e98 <modelCNN_Construct+0x122>
1c004ede:	47d2                	lw	a5,20(sp)
1c004ee0:	1c010737          	lui	a4,0x1c010
1c004ee4:	92f72023          	sw	a5,-1760(a4) # 1c00f920 <model_L3_Memory>
	if (model_L3_Memory == 0) return 2;
1c004ee8:	4a89                	li	s5,2
1c004eea:	ee0784e3          	beqz	a5,1c004dd2 <modelCNN_Construct+0x5c>
	model_L2_Memory = (AT_L2_POINTER) AT_L2_ALLOC(0, 177502);
1c004eee:	0002b537          	lui	a0,0x2b
1c004ef2:	55e50513          	addi	a0,a0,1374 # 2b55e <__L1Cl+0x1b55e>
1c004ef6:	135060ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c004efa:	1c00f7b7          	lui	a5,0x1c00f
1c004efe:	56a7ac23          	sw	a0,1400(a5) # 1c00f578 <model_L2_Memory>
	if (model_L2_Memory == 0) return 3;
1c004f02:	4a8d                	li	s5,3
1c004f04:	ec0507e3          	beqz	a0,1c004dd2 <modelCNN_Construct+0x5c>
	model_L1_Memory = (AT_L1_POINTER) AT_L1_ALLOC(0, 48748);
1c004f08:	65b1                	lui	a1,0xc
1c004f0a:	e6c58593          	addi	a1,a1,-404 # be6c <__rt_stack_size+0xb66c>
1c004f0e:	4501                	li	a0,0
1c004f10:	109060ef          	jal	ra,1c00b818 <pi_cl_l1_malloc>
1c004f14:	100007b7          	lui	a5,0x10000
1c004f18:	00a7ae23          	sw	a0,28(a5) # 1000001c <model_L1_Memory>
	if (model_L1_Memory == 0) return 4;
1c004f1c:	28050be3          	beqz	a0,1c0059b2 <modelCNN_Construct+0xc3c>
		int Size = 73728, Base = 0;
1c004f20:	69c9                	lui	s3,0x12
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 1916928+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c004f22:	1c00fcb7          	lui	s9,0x1c00f
1c004f26:	648c8c93          	addi	s9,s9,1608 # 1c00f648 <_edata>
1c004f2a:	1c010db7          	lui	s11,0x1c010
1c004f2e:	001d4c37          	lui	s8,0x1d4
1c004f32:	1c00fbb7          	lui	s7,0x1c00f
  task->id = PI_TASK_NONE_ID;
1c004f36:	4405                	li	s0,1
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L3_Memory + 1916928+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c004f38:	1c010d37          	lui	s10,0x1c010
    api->copy_async(device, pi_ram_addr, data, size, ext2loc, task);
1c004f3c:	1c00fb37          	lui	s6,0x1c00f
			int Chunk = Min(Size, 1024);
1c004f40:	40000513          	li	a0,1024
1c004f44:	04a9cab3          	p.min	s5,s3,a0
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 1916928+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c004f48:	c652                	sw	s4,12(sp)
1c004f4a:	8ccda583          	lw	a1,-1844(s11) # 1c00f8cc <model_L3_Flash>
1c004f4e:	95e2                	add	a1,a1,s8
1c004f50:	dda2                	sw	s0,248(sp)
  task->arg[0] = (uint32_t)0;
1c004f52:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c004f54:	10812423          	sw	s0,264(sp)

void __rt_event_sched_init();

static inline void __rt_task_init(pi_task_t *task)
{
  task->done = 0;
1c004f58:	0e010a23          	sb	zero,244(sp)
1c004f5c:	119c                	addi	a5,sp,224
1c004f5e:	8722                	mv	a4,s0
1c004f60:	86d6                	mv	a3,s5
1c004f62:	578ba603          	lw	a2,1400(s7) # 1c00f578 <model_L2_Memory>
1c004f66:	95d2                	add	a1,a1,s4
1c004f68:	018ca503          	lw	a0,24(s9)
1c004f6c:	1ad030ef          	jal	ra,1c008918 <pi_fs_copy_async>

#endif

static inline void pi_task_wait_on(struct pi_task *task)
{
  while(!task->done)
1c004f70:	0f410783          	lb	a5,244(sp)
1c004f74:	ef89                	bnez	a5,1c004f8e <modelCNN_Construct+0x218>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004f76:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004f7a:	85a2                	mv	a1,s0
1c004f7c:	01c00513          	li	a0,28
1c004f80:	5fe060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004f84:	30091073          	csrw	mstatus,s2
1c004f88:	0f410783          	lb	a5,244(sp)
1c004f8c:	d7ed                	beqz	a5,1c004f76 <modelCNN_Construct+0x200>
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L3_Memory + 1916928+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c004f8e:	920d2583          	lw	a1,-1760(s10) # 1c00f920 <model_L3_Memory>
1c004f92:	95e2                	add	a1,a1,s8
  task->id = PI_TASK_NONE_ID;
1c004f94:	dca2                	sw	s0,120(sp)
  task->arg[0] = (uint32_t)0;
1c004f96:	d282                	sw	zero,100(sp)
  task->implem.keep = 1;
1c004f98:	c522                	sw	s0,136(sp)
  task->done = 0;
1c004f9a:	06010a23          	sb	zero,116(sp)
1c004f9e:	664b2783          	lw	a5,1636(s6) # 1c00f664 <HyperRam>
1c004fa2:	0087a803          	lw	a6,8(a5)
1c004fa6:	109c                	addi	a5,sp,96
1c004fa8:	4701                	li	a4,0
1c004faa:	86d6                	mv	a3,s5
1c004fac:	578ba603          	lw	a2,1400(s7)
1c004fb0:	4532                	lw	a0,12(sp)
1c004fb2:	95aa                	add	a1,a1,a0
1c004fb4:	664b0513          	addi	a0,s6,1636
1c004fb8:	9802                	jalr	a6
1c004fba:	07410783          	lb	a5,116(sp)
1c004fbe:	ef89                	bnez	a5,1c004fd8 <modelCNN_Construct+0x262>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004fc0:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004fc4:	85a2                	mv	a1,s0
1c004fc6:	01c00513          	li	a0,28
1c004fca:	5b4060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004fce:	30091073          	csrw	mstatus,s2
1c004fd2:	07410783          	lb	a5,116(sp)
1c004fd6:	d7ed                	beqz	a5,1c004fc0 <modelCNN_Construct+0x24a>
			Base += Chunk;
1c004fd8:	9a56                	add	s4,s4,s5
			Size -= Chunk;
1c004fda:	415989b3          	sub	s3,s3,s5
		while (Size) {
1c004fde:	f60991e3          	bnez	s3,1c004f40 <modelCNN_Construct+0x1ca>
		int Size = 1916928, Base = 0;
1c004fe2:	001d4ab7          	lui	s5,0x1d4
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 0+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c004fe6:	1c00fc37          	lui	s8,0x1c00f
1c004fea:	648c0c13          	addi	s8,s8,1608 # 1c00f648 <_edata>
1c004fee:	1c010d37          	lui	s10,0x1c010
1c004ff2:	1c00fbb7          	lui	s7,0x1c00f
  task->id = PI_TASK_NONE_ID;
1c004ff6:	4405                	li	s0,1
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L3_Memory + 0+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c004ff8:	1c010cb7          	lui	s9,0x1c010
1c004ffc:	1c00fb37          	lui	s6,0x1c00f
			int Chunk = Min(Size, 1024);
1c005000:	40000793          	li	a5,1024
1c005004:	04faca33          	p.min	s4,s5,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 0+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c005008:	894e                	mv	s2,s3
1c00500a:	8ccd2583          	lw	a1,-1844(s10) # 1c00f8cc <model_L3_Flash>
1c00500e:	dda2                	sw	s0,248(sp)
  task->arg[0] = (uint32_t)0;
1c005010:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c005012:	10812423          	sw	s0,264(sp)
  task->done = 0;
1c005016:	0e010a23          	sb	zero,244(sp)
1c00501a:	119c                	addi	a5,sp,224
1c00501c:	8722                	mv	a4,s0
1c00501e:	86d2                	mv	a3,s4
1c005020:	578ba603          	lw	a2,1400(s7) # 1c00f578 <model_L2_Memory>
1c005024:	95ce                	add	a1,a1,s3
1c005026:	018c2503          	lw	a0,24(s8)
1c00502a:	0ef030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c00502e:	0f410783          	lb	a5,244(sp)
1c005032:	ef89                	bnez	a5,1c00504c <modelCNN_Construct+0x2d6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005034:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005038:	85a2                	mv	a1,s0
1c00503a:	01c00513          	li	a0,28
1c00503e:	540060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005042:	300d9073          	csrw	mstatus,s11
1c005046:	0f410783          	lb	a5,244(sp)
1c00504a:	d7ed                	beqz	a5,1c005034 <modelCNN_Construct+0x2be>
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L3_Memory + 0+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00504c:	920ca583          	lw	a1,-1760(s9) # 1c00f920 <model_L3_Memory>
  task->id = PI_TASK_NONE_ID;
1c005050:	dca2                	sw	s0,120(sp)
  task->arg[0] = (uint32_t)0;
1c005052:	d282                	sw	zero,100(sp)
  task->implem.keep = 1;
1c005054:	c522                	sw	s0,136(sp)
  task->done = 0;
1c005056:	06010a23          	sb	zero,116(sp)
1c00505a:	664b2783          	lw	a5,1636(s6) # 1c00f664 <HyperRam>
1c00505e:	0087a803          	lw	a6,8(a5)
1c005062:	109c                	addi	a5,sp,96
1c005064:	4701                	li	a4,0
1c005066:	86d2                	mv	a3,s4
1c005068:	578ba603          	lw	a2,1400(s7)
1c00506c:	95ca                	add	a1,a1,s2
1c00506e:	664b0513          	addi	a0,s6,1636
1c005072:	9802                	jalr	a6
1c005074:	07410783          	lb	a5,116(sp)
1c005078:	ef89                	bnez	a5,1c005092 <modelCNN_Construct+0x31c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00507a:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00507e:	85a2                	mv	a1,s0
1c005080:	01c00513          	li	a0,28
1c005084:	4fa060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005088:	30091073          	csrw	mstatus,s2
1c00508c:	07410783          	lb	a5,116(sp)
1c005090:	d7ed                	beqz	a5,1c00507a <modelCNN_Construct+0x304>
			Base += Chunk;
1c005092:	99d2                	add	s3,s3,s4
			Size -= Chunk;
1c005094:	414a8ab3          	sub	s5,s5,s4
		while (Size) {
1c005098:	f60a94e3          	bnez	s5,1c005000 <modelCNN_Construct+0x28a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011232), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20576), 9, 0, &UchanHF1);
1c00509c:	1c00f7b7          	lui	a5,0x1c00f
1c0050a0:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c0050a4:	1c0107b7          	lui	a5,0x1c010
1c0050a8:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c0050ac:	1c00f7b7          	lui	a5,0x1c00f
1c0050b0:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0050b4:	4785                	li	a5,1
1c0050b6:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c0050b8:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c0050ba:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c0050be:	0e010a23          	sb	zero,244(sp)
1c0050c2:	119c                	addi	a5,sp,224
1c0050c4:	4705                	li	a4,1
1c0050c6:	46a5                	li	a3,9
1c0050c8:	6615                	lui	a2,0x5
1c0050ca:	06060613          	addi	a2,a2,96 # 5060 <__rt_stack_size+0x4860>
1c0050ce:	962e                	add	a2,a2,a1
1c0050d0:	001eb5b7          	lui	a1,0x1eb
1c0050d4:	06058593          	addi	a1,a1,96 # 1eb060 <__L2+0x16b060>
1c0050d8:	95c2                	add	a1,a1,a6
1c0050da:	03f030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c0050de:	0f410783          	lb	a5,244(sp)
1c0050e2:	ef89                	bnez	a5,1c0050fc <modelCNN_Construct+0x386>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0050e4:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0050e8:	4585                	li	a1,1
1c0050ea:	01c00513          	li	a0,28
1c0050ee:	490060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0050f2:	30041073          	csrw	mstatus,s0
1c0050f6:	0f410783          	lb	a5,244(sp)
1c0050fa:	d7ed                	beqz	a5,1c0050e4 <modelCNN_Construct+0x36e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2009600), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 18944), 288, 0, &UchanHF1);
1c0050fc:	1c00f7b7          	lui	a5,0x1c00f
1c005100:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005104:	1c0107b7          	lui	a5,0x1c010
1c005108:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c00510c:	1c00f7b7          	lui	a5,0x1c00f
1c005110:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005114:	4785                	li	a5,1
1c005116:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005118:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c00511a:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c00511e:	0e010a23          	sb	zero,244(sp)
1c005122:	119c                	addi	a5,sp,224
1c005124:	4705                	li	a4,1
1c005126:	12000693          	li	a3,288
1c00512a:	6615                	lui	a2,0x5
1c00512c:	a0060613          	addi	a2,a2,-1536 # 4a00 <__rt_stack_size+0x4200>
1c005130:	962e                	add	a2,a2,a1
1c005132:	001eb5b7          	lui	a1,0x1eb
1c005136:	a0058593          	addi	a1,a1,-1536 # 1eaa00 <__L2+0x16aa00>
1c00513a:	95c2                	add	a1,a1,a6
1c00513c:	7dc030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c005140:	0f410783          	lb	a5,244(sp)
1c005144:	ef89                	bnez	a5,1c00515e <modelCNN_Construct+0x3e8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005146:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00514a:	4585                	li	a1,1
1c00514c:	01c00513          	li	a0,28
1c005150:	42e060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005154:	30041073          	csrw	mstatus,s0
1c005158:	0f410783          	lb	a5,244(sp)
1c00515c:	d7ed                	beqz	a5,1c005146 <modelCNN_Construct+0x3d0>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2010400), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19744), 128, 0, &UchanHF1);
1c00515e:	1c00f7b7          	lui	a5,0x1c00f
1c005162:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005166:	1c0107b7          	lui	a5,0x1c010
1c00516a:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c00516e:	1c00f7b7          	lui	a5,0x1c00f
1c005172:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005176:	4785                	li	a5,1
1c005178:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c00517a:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c00517c:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c005180:	0e010a23          	sb	zero,244(sp)
1c005184:	119c                	addi	a5,sp,224
1c005186:	4705                	li	a4,1
1c005188:	08000693          	li	a3,128
1c00518c:	6615                	lui	a2,0x5
1c00518e:	d2060613          	addi	a2,a2,-736 # 4d20 <__rt_stack_size+0x4520>
1c005192:	962e                	add	a2,a2,a1
1c005194:	001eb5b7          	lui	a1,0x1eb
1c005198:	d2058593          	addi	a1,a1,-736 # 1ead20 <__L2+0x16ad20>
1c00519c:	95c2                	add	a1,a1,a6
1c00519e:	77a030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c0051a2:	0f410783          	lb	a5,244(sp)
1c0051a6:	ef89                	bnez	a5,1c0051c0 <modelCNN_Construct+0x44a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0051a8:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0051ac:	4585                	li	a1,1
1c0051ae:	01c00513          	li	a0,28
1c0051b2:	3cc060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0051b6:	30041073          	csrw	mstatus,s0
1c0051ba:	0f410783          	lb	a5,244(sp)
1c0051be:	d7ed                	beqz	a5,1c0051a8 <modelCNN_Construct+0x432>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011168), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20512), 32, 0, &UchanHF1);
1c0051c0:	1c00f7b7          	lui	a5,0x1c00f
1c0051c4:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c0051c8:	1c0107b7          	lui	a5,0x1c010
1c0051cc:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c0051d0:	1c00f7b7          	lui	a5,0x1c00f
1c0051d4:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0051d8:	4785                	li	a5,1
1c0051da:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c0051dc:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c0051de:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c0051e2:	0e010a23          	sb	zero,244(sp)
1c0051e6:	119c                	addi	a5,sp,224
1c0051e8:	4705                	li	a4,1
1c0051ea:	02000693          	li	a3,32
1c0051ee:	6615                	lui	a2,0x5
1c0051f0:	02060613          	addi	a2,a2,32 # 5020 <__rt_stack_size+0x4820>
1c0051f4:	962e                	add	a2,a2,a1
1c0051f6:	001eb5b7          	lui	a1,0x1eb
1c0051fa:	02058593          	addi	a1,a1,32 # 1eb020 <__L2+0x16b020>
1c0051fe:	95c2                	add	a1,a1,a6
1c005200:	718030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c005204:	0f410783          	lb	a5,244(sp)
1c005208:	ef89                	bnez	a5,1c005222 <modelCNN_Construct+0x4ac>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00520a:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00520e:	4585                	li	a1,1
1c005210:	01c00513          	li	a0,28
1c005214:	36a060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005218:	30041073          	csrw	mstatus,s0
1c00521c:	0f410783          	lb	a5,244(sp)
1c005220:	d7ed                	beqz	a5,1c00520a <modelCNN_Construct+0x494>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011200), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20544), 32, 0, &UchanHF1);
1c005222:	1c00f7b7          	lui	a5,0x1c00f
1c005226:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c00522a:	1c0107b7          	lui	a5,0x1c010
1c00522e:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c005232:	1c00f7b7          	lui	a5,0x1c00f
1c005236:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00523a:	4785                	li	a5,1
1c00523c:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c00523e:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c005240:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c005244:	0e010a23          	sb	zero,244(sp)
1c005248:	119c                	addi	a5,sp,224
1c00524a:	4705                	li	a4,1
1c00524c:	02000693          	li	a3,32
1c005250:	6615                	lui	a2,0x5
1c005252:	04060613          	addi	a2,a2,64 # 5040 <__rt_stack_size+0x4840>
1c005256:	962e                	add	a2,a2,a1
1c005258:	001eb5b7          	lui	a1,0x1eb
1c00525c:	04058593          	addi	a1,a1,64 # 1eb040 <__L2+0x16b040>
1c005260:	95c2                	add	a1,a1,a6
1c005262:	6b6030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c005266:	0f410783          	lb	a5,244(sp)
1c00526a:	ef89                	bnez	a5,1c005284 <modelCNN_Construct+0x50e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00526c:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005270:	4585                	li	a1,1
1c005272:	01c00513          	li	a0,28
1c005276:	308060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00527a:	30041073          	csrw	mstatus,s0
1c00527e:	0f410783          	lb	a5,244(sp)
1c005282:	d7ed                	beqz	a5,1c00526c <modelCNN_Construct+0x4f6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011244), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20588), 9, 0, &UchanHF1);
1c005284:	1c00f7b7          	lui	a5,0x1c00f
1c005288:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c00528c:	1c0107b7          	lui	a5,0x1c010
1c005290:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c005294:	1c00f7b7          	lui	a5,0x1c00f
1c005298:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00529c:	4785                	li	a5,1
1c00529e:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c0052a0:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c0052a2:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c0052a6:	0e010a23          	sb	zero,244(sp)
1c0052aa:	119c                	addi	a5,sp,224
1c0052ac:	4705                	li	a4,1
1c0052ae:	46a5                	li	a3,9
1c0052b0:	6615                	lui	a2,0x5
1c0052b2:	06c60613          	addi	a2,a2,108 # 506c <__rt_stack_size+0x486c>
1c0052b6:	962e                	add	a2,a2,a1
1c0052b8:	001eb5b7          	lui	a1,0x1eb
1c0052bc:	06c58593          	addi	a1,a1,108 # 1eb06c <__L2+0x16b06c>
1c0052c0:	95c2                	add	a1,a1,a6
1c0052c2:	656030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c0052c6:	0f410783          	lb	a5,244(sp)
1c0052ca:	ef89                	bnez	a5,1c0052e4 <modelCNN_Construct+0x56e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0052cc:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0052d0:	4585                	li	a1,1
1c0052d2:	01c00513          	li	a0,28
1c0052d6:	2a8060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0052da:	30041073          	csrw	mstatus,s0
1c0052de:	0f410783          	lb	a5,244(sp)
1c0052e2:	d7ed                	beqz	a5,1c0052cc <modelCNN_Construct+0x556>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 1990656), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 0), 18432, 0, &UchanHF1);
1c0052e4:	1c00f7b7          	lui	a5,0x1c00f
1c0052e8:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c0052ec:	1c0107b7          	lui	a5,0x1c010
1c0052f0:	8cc7a583          	lw	a1,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c0052f4:	1c00f7b7          	lui	a5,0x1c00f
1c0052f8:	5787a603          	lw	a2,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0052fc:	4785                	li	a5,1
1c0052fe:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005300:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c005302:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c005306:	0e010a23          	sb	zero,244(sp)
1c00530a:	119c                	addi	a5,sp,224
1c00530c:	4705                	li	a4,1
1c00530e:	6695                	lui	a3,0x5
1c005310:	80068693          	addi	a3,a3,-2048 # 4800 <__rt_stack_size+0x4000>
1c005314:	001e6837          	lui	a6,0x1e6
1c005318:	95c2                	add	a1,a1,a6
1c00531a:	5fe030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c00531e:	0f410783          	lb	a5,244(sp)
1c005322:	ef89                	bnez	a5,1c00533c <modelCNN_Construct+0x5c6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005324:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005328:	4585                	li	a1,1
1c00532a:	01c00513          	li	a0,28
1c00532e:	250060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005332:	30041073          	csrw	mstatus,s0
1c005336:	0f410783          	lb	a5,244(sp)
1c00533a:	d7ed                	beqz	a5,1c005324 <modelCNN_Construct+0x5ae>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2009888), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19232), 256, 0, &UchanHF1);
1c00533c:	1c00f7b7          	lui	a5,0x1c00f
1c005340:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005344:	1c0107b7          	lui	a5,0x1c010
1c005348:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c00534c:	1c00f7b7          	lui	a5,0x1c00f
1c005350:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005354:	4785                	li	a5,1
1c005356:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005358:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c00535a:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c00535e:	0e010a23          	sb	zero,244(sp)
1c005362:	119c                	addi	a5,sp,224
1c005364:	4705                	li	a4,1
1c005366:	10000693          	li	a3,256
1c00536a:	6615                	lui	a2,0x5
1c00536c:	b2060613          	addi	a2,a2,-1248 # 4b20 <__rt_stack_size+0x4320>
1c005370:	962e                	add	a2,a2,a1
1c005372:	001eb5b7          	lui	a1,0x1eb
1c005376:	b2058593          	addi	a1,a1,-1248 # 1eab20 <__L2+0x16ab20>
1c00537a:	95c2                	add	a1,a1,a6
1c00537c:	59c030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c005380:	0f410783          	lb	a5,244(sp)
1c005384:	ef89                	bnez	a5,1c00539e <modelCNN_Construct+0x628>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005386:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00538a:	4585                	li	a1,1
1c00538c:	01c00513          	li	a0,28
1c005390:	1ee060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005394:	30041073          	csrw	mstatus,s0
1c005398:	0f410783          	lb	a5,244(sp)
1c00539c:	d7ed                	beqz	a5,1c005386 <modelCNN_Construct+0x610>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2010912), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20256), 64, 0, &UchanHF1);
1c00539e:	1c00f7b7          	lui	a5,0x1c00f
1c0053a2:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c0053a6:	1c0107b7          	lui	a5,0x1c010
1c0053aa:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c0053ae:	1c00f7b7          	lui	a5,0x1c00f
1c0053b2:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0053b6:	4785                	li	a5,1
1c0053b8:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c0053ba:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c0053bc:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c0053c0:	0e010a23          	sb	zero,244(sp)
1c0053c4:	119c                	addi	a5,sp,224
1c0053c6:	4705                	li	a4,1
1c0053c8:	04000693          	li	a3,64
1c0053cc:	6615                	lui	a2,0x5
1c0053ce:	f2060613          	addi	a2,a2,-224 # 4f20 <__rt_stack_size+0x4720>
1c0053d2:	962e                	add	a2,a2,a1
1c0053d4:	001eb5b7          	lui	a1,0x1eb
1c0053d8:	f2058593          	addi	a1,a1,-224 # 1eaf20 <__L2+0x16af20>
1c0053dc:	95c2                	add	a1,a1,a6
1c0053de:	53a030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c0053e2:	0f410783          	lb	a5,244(sp)
1c0053e6:	ef89                	bnez	a5,1c005400 <modelCNN_Construct+0x68a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0053e8:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0053ec:	4585                	li	a1,1
1c0053ee:	01c00513          	li	a0,28
1c0053f2:	18c060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0053f6:	30041073          	csrw	mstatus,s0
1c0053fa:	0f410783          	lb	a5,244(sp)
1c0053fe:	d7ed                	beqz	a5,1c0053e8 <modelCNN_Construct+0x672>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2010976), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20320), 64, 0, &UchanHF1);
1c005400:	1c00f7b7          	lui	a5,0x1c00f
1c005404:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005408:	1c0107b7          	lui	a5,0x1c010
1c00540c:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c005410:	1c00f7b7          	lui	a5,0x1c00f
1c005414:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005418:	4785                	li	a5,1
1c00541a:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c00541c:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c00541e:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c005422:	0e010a23          	sb	zero,244(sp)
1c005426:	119c                	addi	a5,sp,224
1c005428:	4705                	li	a4,1
1c00542a:	04000693          	li	a3,64
1c00542e:	6615                	lui	a2,0x5
1c005430:	f6060613          	addi	a2,a2,-160 # 4f60 <__rt_stack_size+0x4760>
1c005434:	962e                	add	a2,a2,a1
1c005436:	001eb5b7          	lui	a1,0x1eb
1c00543a:	f6058593          	addi	a1,a1,-160 # 1eaf60 <__L2+0x16af60>
1c00543e:	95c2                	add	a1,a1,a6
1c005440:	4d8030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c005444:	0f410783          	lb	a5,244(sp)
1c005448:	ef89                	bnez	a5,1c005462 <modelCNN_Construct+0x6ec>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00544a:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00544e:	4585                	li	a1,1
1c005450:	01c00513          	li	a0,28
1c005454:	12a060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005458:	30041073          	csrw	mstatus,s0
1c00545c:	0f410783          	lb	a5,244(sp)
1c005460:	d7ed                	beqz	a5,1c00544a <modelCNN_Construct+0x6d4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011256), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20600), 9, 0, &UchanHF1);
1c005462:	1c00f7b7          	lui	a5,0x1c00f
1c005466:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c00546a:	1c0107b7          	lui	a5,0x1c010
1c00546e:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c005472:	1c00f7b7          	lui	a5,0x1c00f
1c005476:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00547a:	4785                	li	a5,1
1c00547c:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c00547e:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c005480:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c005484:	0e010a23          	sb	zero,244(sp)
1c005488:	119c                	addi	a5,sp,224
1c00548a:	4705                	li	a4,1
1c00548c:	46a5                	li	a3,9
1c00548e:	6615                	lui	a2,0x5
1c005490:	07860613          	addi	a2,a2,120 # 5078 <__rt_stack_size+0x4878>
1c005494:	962e                	add	a2,a2,a1
1c005496:	001eb5b7          	lui	a1,0x1eb
1c00549a:	07858593          	addi	a1,a1,120 # 1eb078 <__L2+0x16b078>
1c00549e:	95c2                	add	a1,a1,a6
1c0054a0:	478030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c0054a4:	0f410783          	lb	a5,244(sp)
1c0054a8:	ef89                	bnez	a5,1c0054c2 <modelCNN_Construct+0x74c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0054aa:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0054ae:	4585                	li	a1,1
1c0054b0:	01c00513          	li	a0,28
1c0054b4:	0ca060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0054b8:	30041073          	csrw	mstatus,s0
1c0054bc:	0f410783          	lb	a5,244(sp)
1c0054c0:	d7ed                	beqz	a5,1c0054aa <modelCNN_Construct+0x734>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2009088), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 18432), 512, 0, &UchanHF1);
1c0054c2:	1c00f7b7          	lui	a5,0x1c00f
1c0054c6:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c0054ca:	1c0107b7          	lui	a5,0x1c010
1c0054ce:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c0054d2:	1c00f7b7          	lui	a5,0x1c00f
1c0054d6:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0054da:	4785                	li	a5,1
1c0054dc:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c0054de:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c0054e0:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c0054e4:	0e010a23          	sb	zero,244(sp)
1c0054e8:	119c                	addi	a5,sp,224
1c0054ea:	4705                	li	a4,1
1c0054ec:	20000693          	li	a3,512
1c0054f0:	6615                	lui	a2,0x5
1c0054f2:	80060613          	addi	a2,a2,-2048 # 4800 <__rt_stack_size+0x4000>
1c0054f6:	962e                	add	a2,a2,a1
1c0054f8:	001eb5b7          	lui	a1,0x1eb
1c0054fc:	80058593          	addi	a1,a1,-2048 # 1ea800 <__L2+0x16a800>
1c005500:	95c2                	add	a1,a1,a6
1c005502:	416030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c005506:	0f410783          	lb	a5,244(sp)
1c00550a:	ef89                	bnez	a5,1c005524 <modelCNN_Construct+0x7ae>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00550c:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005510:	4585                	li	a1,1
1c005512:	01c00513          	li	a0,28
1c005516:	068060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00551a:	30041073          	csrw	mstatus,s0
1c00551e:	0f410783          	lb	a5,244(sp)
1c005522:	d7ed                	beqz	a5,1c00550c <modelCNN_Construct+0x796>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2010528), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19872), 128, 0, &UchanHF1);
1c005524:	1c00f7b7          	lui	a5,0x1c00f
1c005528:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c00552c:	1c0107b7          	lui	a5,0x1c010
1c005530:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c005534:	1c00f7b7          	lui	a5,0x1c00f
1c005538:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00553c:	4785                	li	a5,1
1c00553e:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005540:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c005542:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c005546:	0e010a23          	sb	zero,244(sp)
1c00554a:	119c                	addi	a5,sp,224
1c00554c:	4705                	li	a4,1
1c00554e:	08000693          	li	a3,128
1c005552:	6615                	lui	a2,0x5
1c005554:	da060613          	addi	a2,a2,-608 # 4da0 <__rt_stack_size+0x45a0>
1c005558:	962e                	add	a2,a2,a1
1c00555a:	001eb5b7          	lui	a1,0x1eb
1c00555e:	da058593          	addi	a1,a1,-608 # 1eada0 <__L2+0x16ada0>
1c005562:	95c2                	add	a1,a1,a6
1c005564:	3b4030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c005568:	0f410783          	lb	a5,244(sp)
1c00556c:	ef89                	bnez	a5,1c005586 <modelCNN_Construct+0x810>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00556e:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005572:	4585                	li	a1,1
1c005574:	01c00513          	li	a0,28
1c005578:	006060ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00557c:	30041073          	csrw	mstatus,s0
1c005580:	0f410783          	lb	a5,244(sp)
1c005584:	d7ed                	beqz	a5,1c00556e <modelCNN_Construct+0x7f8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2010656), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20000), 128, 0, &UchanHF1);
1c005586:	1c00f7b7          	lui	a5,0x1c00f
1c00558a:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c00558e:	1c0107b7          	lui	a5,0x1c010
1c005592:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c005596:	1c00f7b7          	lui	a5,0x1c00f
1c00559a:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c00559e:	4785                	li	a5,1
1c0055a0:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c0055a2:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c0055a4:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c0055a8:	0e010a23          	sb	zero,244(sp)
1c0055ac:	119c                	addi	a5,sp,224
1c0055ae:	4705                	li	a4,1
1c0055b0:	08000693          	li	a3,128
1c0055b4:	6615                	lui	a2,0x5
1c0055b6:	e2060613          	addi	a2,a2,-480 # 4e20 <__rt_stack_size+0x4620>
1c0055ba:	962e                	add	a2,a2,a1
1c0055bc:	001eb5b7          	lui	a1,0x1eb
1c0055c0:	e2058593          	addi	a1,a1,-480 # 1eae20 <__L2+0x16ae20>
1c0055c4:	95c2                	add	a1,a1,a6
1c0055c6:	352030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c0055ca:	0f410783          	lb	a5,244(sp)
1c0055ce:	ef89                	bnez	a5,1c0055e8 <modelCNN_Construct+0x872>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0055d0:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0055d4:	4585                	li	a1,1
1c0055d6:	01c00513          	li	a0,28
1c0055da:	7a5050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0055de:	30041073          	csrw	mstatus,s0
1c0055e2:	0f410783          	lb	a5,244(sp)
1c0055e6:	d7ed                	beqz	a5,1c0055d0 <modelCNN_Construct+0x85a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011268), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20612), 9, 0, &UchanHF1);
1c0055e8:	1c00f7b7          	lui	a5,0x1c00f
1c0055ec:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c0055f0:	1c0107b7          	lui	a5,0x1c010
1c0055f4:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c0055f8:	1c00f7b7          	lui	a5,0x1c00f
1c0055fc:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005600:	4785                	li	a5,1
1c005602:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005604:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c005606:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c00560a:	0e010a23          	sb	zero,244(sp)
1c00560e:	119c                	addi	a5,sp,224
1c005610:	4705                	li	a4,1
1c005612:	46a5                	li	a3,9
1c005614:	6615                	lui	a2,0x5
1c005616:	08460613          	addi	a2,a2,132 # 5084 <__rt_stack_size+0x4884>
1c00561a:	962e                	add	a2,a2,a1
1c00561c:	001eb5b7          	lui	a1,0x1eb
1c005620:	08458593          	addi	a1,a1,132 # 1eb084 <__L2+0x16b084>
1c005624:	95c2                	add	a1,a1,a6
1c005626:	2f2030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c00562a:	0f410783          	lb	a5,244(sp)
1c00562e:	ef89                	bnez	a5,1c005648 <modelCNN_Construct+0x8d2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005630:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005634:	4585                	li	a1,1
1c005636:	01c00513          	li	a0,28
1c00563a:	745050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00563e:	30041073          	csrw	mstatus,s0
1c005642:	0f410783          	lb	a5,244(sp)
1c005646:	d7ed                	beqz	a5,1c005630 <modelCNN_Construct+0x8ba>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2010144), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 19488), 256, 0, &UchanHF1);
1c005648:	1c00f7b7          	lui	a5,0x1c00f
1c00564c:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005650:	1c0107b7          	lui	a5,0x1c010
1c005654:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c005658:	1c00f7b7          	lui	a5,0x1c00f
1c00565c:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005660:	4785                	li	a5,1
1c005662:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005664:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c005666:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c00566a:	0e010a23          	sb	zero,244(sp)
1c00566e:	119c                	addi	a5,sp,224
1c005670:	4705                	li	a4,1
1c005672:	10000693          	li	a3,256
1c005676:	6615                	lui	a2,0x5
1c005678:	c2060613          	addi	a2,a2,-992 # 4c20 <__rt_stack_size+0x4420>
1c00567c:	962e                	add	a2,a2,a1
1c00567e:	001eb5b7          	lui	a1,0x1eb
1c005682:	c2058593          	addi	a1,a1,-992 # 1eac20 <__L2+0x16ac20>
1c005686:	95c2                	add	a1,a1,a6
1c005688:	290030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c00568c:	0f410783          	lb	a5,244(sp)
1c005690:	ef89                	bnez	a5,1c0056aa <modelCNN_Construct+0x934>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005692:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005696:	4585                	li	a1,1
1c005698:	01c00513          	li	a0,28
1c00569c:	6e3050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0056a0:	30041073          	csrw	mstatus,s0
1c0056a4:	0f410783          	lb	a5,244(sp)
1c0056a8:	d7ed                	beqz	a5,1c005692 <modelCNN_Construct+0x91c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011040), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20384), 64, 0, &UchanHF1);
1c0056aa:	1c00f7b7          	lui	a5,0x1c00f
1c0056ae:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c0056b2:	1c0107b7          	lui	a5,0x1c010
1c0056b6:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c0056ba:	1c00f7b7          	lui	a5,0x1c00f
1c0056be:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0056c2:	4785                	li	a5,1
1c0056c4:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c0056c6:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c0056c8:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c0056cc:	0e010a23          	sb	zero,244(sp)
1c0056d0:	119c                	addi	a5,sp,224
1c0056d2:	4705                	li	a4,1
1c0056d4:	04000693          	li	a3,64
1c0056d8:	6615                	lui	a2,0x5
1c0056da:	fa060613          	addi	a2,a2,-96 # 4fa0 <__rt_stack_size+0x47a0>
1c0056de:	962e                	add	a2,a2,a1
1c0056e0:	001eb5b7          	lui	a1,0x1eb
1c0056e4:	fa058593          	addi	a1,a1,-96 # 1eafa0 <__L2+0x16afa0>
1c0056e8:	95c2                	add	a1,a1,a6
1c0056ea:	22e030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c0056ee:	0f410783          	lb	a5,244(sp)
1c0056f2:	ef89                	bnez	a5,1c00570c <modelCNN_Construct+0x996>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0056f4:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0056f8:	4585                	li	a1,1
1c0056fa:	01c00513          	li	a0,28
1c0056fe:	681050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005702:	30041073          	csrw	mstatus,s0
1c005706:	0f410783          	lb	a5,244(sp)
1c00570a:	d7ed                	beqz	a5,1c0056f4 <modelCNN_Construct+0x97e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011104), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20448), 64, 0, &UchanHF1);
1c00570c:	1c00f7b7          	lui	a5,0x1c00f
1c005710:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005714:	1c0107b7          	lui	a5,0x1c010
1c005718:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c00571c:	1c00f7b7          	lui	a5,0x1c00f
1c005720:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005724:	4785                	li	a5,1
1c005726:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005728:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c00572a:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c00572e:	0e010a23          	sb	zero,244(sp)
1c005732:	119c                	addi	a5,sp,224
1c005734:	4705                	li	a4,1
1c005736:	04000693          	li	a3,64
1c00573a:	6615                	lui	a2,0x5
1c00573c:	1601                	addi	a2,a2,-32
1c00573e:	962e                	add	a2,a2,a1
1c005740:	001eb5b7          	lui	a1,0x1eb
1c005744:	1581                	addi	a1,a1,-32
1c005746:	95c2                	add	a1,a1,a6
1c005748:	1d0030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c00574c:	0f410783          	lb	a5,244(sp)
1c005750:	ef89                	bnez	a5,1c00576a <modelCNN_Construct+0x9f4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005752:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005756:	4585                	li	a1,1
1c005758:	01c00513          	li	a0,28
1c00575c:	623050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005760:	30041073          	csrw	mstatus,s0
1c005764:	0f410783          	lb	a5,244(sp)
1c005768:	d7ed                	beqz	a5,1c005752 <modelCNN_Construct+0x9dc>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011280), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20624), 9, 0, &UchanHF1);
1c00576a:	1c00f7b7          	lui	a5,0x1c00f
1c00576e:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005772:	1c0107b7          	lui	a5,0x1c010
1c005776:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c00577a:	1c00f7b7          	lui	a5,0x1c00f
1c00577e:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005782:	4785                	li	a5,1
1c005784:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005786:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c005788:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c00578c:	0e010a23          	sb	zero,244(sp)
1c005790:	119c                	addi	a5,sp,224
1c005792:	4705                	li	a4,1
1c005794:	46a5                	li	a3,9
1c005796:	6615                	lui	a2,0x5
1c005798:	09060613          	addi	a2,a2,144 # 5090 <__rt_stack_size+0x4890>
1c00579c:	962e                	add	a2,a2,a1
1c00579e:	001eb5b7          	lui	a1,0x1eb
1c0057a2:	09058593          	addi	a1,a1,144 # 1eb090 <__L2+0x16b090>
1c0057a6:	95c2                	add	a1,a1,a6
1c0057a8:	170030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c0057ac:	0f410783          	lb	a5,244(sp)
1c0057b0:	ef89                	bnez	a5,1c0057ca <modelCNN_Construct+0xa54>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0057b2:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0057b6:	4585                	li	a1,1
1c0057b8:	01c00513          	li	a0,28
1c0057bc:	5c3050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0057c0:	30041073          	csrw	mstatus,s0
1c0057c4:	0f410783          	lb	a5,244(sp)
1c0057c8:	d7ed                	beqz	a5,1c0057b2 <modelCNN_Construct+0xa3c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2010784), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20128), 128, 0, &UchanHF1);
1c0057ca:	1c00f7b7          	lui	a5,0x1c00f
1c0057ce:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c0057d2:	1c0107b7          	lui	a5,0x1c010
1c0057d6:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c0057da:	1c00f7b7          	lui	a5,0x1c00f
1c0057de:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0057e2:	4785                	li	a5,1
1c0057e4:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c0057e6:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c0057e8:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c0057ec:	0e010a23          	sb	zero,244(sp)
1c0057f0:	119c                	addi	a5,sp,224
1c0057f2:	4705                	li	a4,1
1c0057f4:	08000693          	li	a3,128
1c0057f8:	6615                	lui	a2,0x5
1c0057fa:	ea060613          	addi	a2,a2,-352 # 4ea0 <__rt_stack_size+0x46a0>
1c0057fe:	962e                	add	a2,a2,a1
1c005800:	001eb5b7          	lui	a1,0x1eb
1c005804:	ea058593          	addi	a1,a1,-352 # 1eaea0 <__L2+0x16aea0>
1c005808:	95c2                	add	a1,a1,a6
1c00580a:	10e030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c00580e:	0f410783          	lb	a5,244(sp)
1c005812:	ef89                	bnez	a5,1c00582c <modelCNN_Construct+0xab6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005814:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005818:	4585                	li	a1,1
1c00581a:	01c00513          	li	a0,28
1c00581e:	561050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005822:	30041073          	csrw	mstatus,s0
1c005826:	0f410783          	lb	a5,244(sp)
1c00582a:	d7ed                	beqz	a5,1c005814 <modelCNN_Construct+0xa9e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011304), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20648), 8, 0, &UchanHF1);
1c00582c:	1c00f7b7          	lui	a5,0x1c00f
1c005830:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005834:	1c0107b7          	lui	a5,0x1c010
1c005838:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c00583c:	1c00f7b7          	lui	a5,0x1c00f
1c005840:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005844:	4785                	li	a5,1
1c005846:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005848:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c00584a:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c00584e:	0e010a23          	sb	zero,244(sp)
1c005852:	119c                	addi	a5,sp,224
1c005854:	4705                	li	a4,1
1c005856:	46a1                	li	a3,8
1c005858:	6615                	lui	a2,0x5
1c00585a:	0a860613          	addi	a2,a2,168 # 50a8 <__rt_stack_size+0x48a8>
1c00585e:	962e                	add	a2,a2,a1
1c005860:	001eb5b7          	lui	a1,0x1eb
1c005864:	0a858593          	addi	a1,a1,168 # 1eb0a8 <__L2+0x16b0a8>
1c005868:	95c2                	add	a1,a1,a6
1c00586a:	0ae030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c00586e:	0f410783          	lb	a5,244(sp)
1c005872:	ef89                	bnez	a5,1c00588c <modelCNN_Construct+0xb16>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005874:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005878:	4585                	li	a1,1
1c00587a:	01c00513          	li	a0,28
1c00587e:	501050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005882:	30041073          	csrw	mstatus,s0
1c005886:	0f410783          	lb	a5,244(sp)
1c00588a:	d7ed                	beqz	a5,1c005874 <modelCNN_Construct+0xafe>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011312), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20656), 2, 0, &UchanHF1);
1c00588c:	1c00f7b7          	lui	a5,0x1c00f
1c005890:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005894:	1c0107b7          	lui	a5,0x1c010
1c005898:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c00589c:	1c00f7b7          	lui	a5,0x1c00f
1c0058a0:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c0058a4:	4785                	li	a5,1
1c0058a6:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c0058a8:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c0058aa:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c0058ae:	0e010a23          	sb	zero,244(sp)
1c0058b2:	119c                	addi	a5,sp,224
1c0058b4:	4705                	li	a4,1
1c0058b6:	4689                	li	a3,2
1c0058b8:	6615                	lui	a2,0x5
1c0058ba:	0b060613          	addi	a2,a2,176 # 50b0 <__rt_stack_size+0x48b0>
1c0058be:	962e                	add	a2,a2,a1
1c0058c0:	001eb5b7          	lui	a1,0x1eb
1c0058c4:	0b058593          	addi	a1,a1,176 # 1eb0b0 <__L2+0x16b0b0>
1c0058c8:	95c2                	add	a1,a1,a6
1c0058ca:	04e030ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c0058ce:	0f410783          	lb	a5,244(sp)
1c0058d2:	ef89                	bnez	a5,1c0058ec <modelCNN_Construct+0xb76>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0058d4:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0058d8:	4585                	li	a1,1
1c0058da:	01c00513          	li	a0,28
1c0058de:	4a1050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0058e2:	30041073          	csrw	mstatus,s0
1c0058e6:	0f410783          	lb	a5,244(sp)
1c0058ea:	d7ed                	beqz	a5,1c0058d4 <modelCNN_Construct+0xb5e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011316), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20660), 2, 0, &UchanHF1);
1c0058ec:	1c00f7b7          	lui	a5,0x1c00f
1c0058f0:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c0058f4:	1c0107b7          	lui	a5,0x1c010
1c0058f8:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c0058fc:	1c00f7b7          	lui	a5,0x1c00f
1c005900:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005904:	4785                	li	a5,1
1c005906:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005908:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c00590a:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c00590e:	0e010a23          	sb	zero,244(sp)
1c005912:	119c                	addi	a5,sp,224
1c005914:	4705                	li	a4,1
1c005916:	4689                	li	a3,2
1c005918:	6615                	lui	a2,0x5
1c00591a:	0b460613          	addi	a2,a2,180 # 50b4 <__rt_stack_size+0x48b4>
1c00591e:	962e                	add	a2,a2,a1
1c005920:	001eb5b7          	lui	a1,0x1eb
1c005924:	0b458593          	addi	a1,a1,180 # 1eb0b4 <__L2+0x16b0b4>
1c005928:	95c2                	add	a1,a1,a6
1c00592a:	7ef020ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c00592e:	0f410783          	lb	a5,244(sp)
1c005932:	ef89                	bnez	a5,1c00594c <modelCNN_Construct+0xbd6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005934:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005938:	4585                	li	a1,1
1c00593a:	01c00513          	li	a0,28
1c00593e:	441050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005942:	30041073          	csrw	mstatus,s0
1c005946:	0f410783          	lb	a5,244(sp)
1c00594a:	d7ed                	beqz	a5,1c005934 <modelCNN_Construct+0xbbe>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) model_L3_Flash + 2011292), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) model_L2_Memory + 20636), 9, 0, &UchanHF1);
1c00594c:	1c00f7b7          	lui	a5,0x1c00f
1c005950:	6607a503          	lw	a0,1632(a5) # 1c00f660 <_edata+0x18>
1c005954:	1c0107b7          	lui	a5,0x1c010
1c005958:	8cc7a803          	lw	a6,-1844(a5) # 1c00f8cc <model_L3_Flash>
1c00595c:	1c00f7b7          	lui	a5,0x1c00f
1c005960:	5787a583          	lw	a1,1400(a5) # 1c00f578 <model_L2_Memory>
  task->id = PI_TASK_NONE_ID;
1c005964:	4785                	li	a5,1
1c005966:	ddbe                	sw	a5,248(sp)
  task->arg[0] = (uint32_t)0;
1c005968:	d382                	sw	zero,228(sp)
  task->implem.keep = 1;
1c00596a:	10f12423          	sw	a5,264(sp)
  task->done = 0;
1c00596e:	0e010a23          	sb	zero,244(sp)
1c005972:	119c                	addi	a5,sp,224
1c005974:	4705                	li	a4,1
1c005976:	46a5                	li	a3,9
1c005978:	6615                	lui	a2,0x5
1c00597a:	09c60613          	addi	a2,a2,156 # 509c <__rt_stack_size+0x489c>
1c00597e:	962e                	add	a2,a2,a1
1c005980:	001eb5b7          	lui	a1,0x1eb
1c005984:	09c58593          	addi	a1,a1,156 # 1eb09c <__L2+0x16b09c>
1c005988:	95c2                	add	a1,a1,a6
1c00598a:	78f020ef          	jal	ra,1c008918 <pi_fs_copy_async>
1c00598e:	0f410783          	lb	a5,244(sp)
1c005992:	c4079063          	bnez	a5,1c004dd2 <modelCNN_Construct+0x5c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005996:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00599a:	4585                	li	a1,1
1c00599c:	01c00513          	li	a0,28
1c0059a0:	3df050ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0059a4:	30041073          	csrw	mstatus,s0
1c0059a8:	0f410783          	lb	a5,244(sp)
1c0059ac:	d7ed                	beqz	a5,1c005996 <modelCNN_Construct+0xc20>
1c0059ae:	c24ff06f          	j	1c004dd2 <modelCNN_Construct+0x5c>
	if (model_L1_Memory == 0) return 4;
1c0059b2:	4a91                	li	s5,4
1c0059b4:	c1eff06f          	j	1c004dd2 <modelCNN_Construct+0x5c>
	model_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 2069712);
1c0059b8:	4752                	lw	a4,20(sp)
1c0059ba:	1c0107b7          	lui	a5,0x1c010
1c0059be:	92e7a023          	sw	a4,-1760(a5) # 1c00f920 <model_L3_Memory>
1c0059c2:	d2cff06f          	j	1c004eee <modelCNN_Construct+0x178>

1c0059c6 <modelCNN_Destruct>:
int modelCNN_Destruct()

{
1c0059c6:	1141                	addi	sp,sp,-16
1c0059c8:	c606                	sw	ra,12(sp)
1c0059ca:	c422                	sw	s0,8(sp)
1c0059cc:	c226                	sw	s1,4(sp)
}

static inline int pi_ram_free(struct pi_device *device, uint32_t addr, uint32_t size)
{
    pi_ram_api_t *api = (pi_ram_api_t *)device->api;
    return api->free(device, addr, size);
1c0059ce:	1c00f437          	lui	s0,0x1c00f
1c0059d2:	66440493          	addi	s1,s0,1636 # 1c00f664 <HyperRam>
1c0059d6:	409c                	lw	a5,0(s1)
1c0059d8:	4bdc                	lw	a5,20(a5)
1c0059da:	001f9637          	lui	a2,0x1f9
1c0059de:	4d060613          	addi	a2,a2,1232 # 1f94d0 <__L2+0x1794d0>
1c0059e2:	1c010737          	lui	a4,0x1c010
1c0059e6:	92072583          	lw	a1,-1760(a4) # 1c00f920 <model_L3_Memory>
1c0059ea:	66440513          	addi	a0,s0,1636
1c0059ee:	9782                	jalr	a5
	AT_HYPERRAM_FREE(&HyperRam, model_L3_Memory, 2069712);
	AT_L2_FREE(0, model_L2_Memory, 177502);
1c0059f0:	0002b5b7          	lui	a1,0x2b
1c0059f4:	55e58593          	addi	a1,a1,1374 # 2b55e <__L1Cl+0x1b55e>
1c0059f8:	1c00f7b7          	lui	a5,0x1c00f
1c0059fc:	5787a503          	lw	a0,1400(a5) # 1c00f578 <model_L2_Memory>
1c005a00:	639050ef          	jal	ra,1c00b838 <pi_l2_free>
	AT_L1_FREE(0, model_L1_Memory, 48748);
1c005a04:	6631                	lui	a2,0xc
1c005a06:	e6c60613          	addi	a2,a2,-404 # be6c <__rt_stack_size+0xb66c>
1c005a0a:	100007b7          	lui	a5,0x10000
1c005a0e:	01c7a583          	lw	a1,28(a5) # 1000001c <model_L1_Memory>
1c005a12:	4501                	li	a0,0
1c005a14:	60b050ef          	jal	ra,1c00b81e <pi_cl_l1_free>
    api->close(device);
1c005a18:	409c                	lw	a5,0(s1)
1c005a1a:	43dc                	lw	a5,4(a5)
1c005a1c:	66440513          	addi	a0,s0,1636
1c005a20:	9782                	jalr	a5
    file->file->size = 4*1024*1024;
}

static inline void __at_hyperflash_fs_close(AT_HYPERFLASH_FS_T *file)
{
  pi_fs_close(file->file);
1c005a22:	1c00f4b7          	lui	s1,0x1c00f
1c005a26:	64848413          	addi	s0,s1,1608 # 1c00f648 <_edata>
1c005a2a:	4c08                	lw	a0,24(s0)
1c005a2c:	689020ef          	jal	ra,1c0088b4 <pi_fs_close>
  pi_fs_unmount(&file->fs);
1c005a30:	64848513          	addi	a0,s1,1608
1c005a34:	671020ef          	jal	ra,1c0088a4 <pi_fs_unmount>
1c005a38:	445c                	lw	a5,12(s0)
1c005a3a:	43dc                	lw	a5,4(a5)
1c005a3c:	00c40513          	addi	a0,s0,12
1c005a40:	9782                	jalr	a5
	AT_HYPERRAM_CLOSE(&HyperRam);
	AT_HYPERFLASH_FS_CLOSE(&HyperFlash);
	return 0;
}
1c005a42:	4501                	li	a0,0
1c005a44:	40b2                	lw	ra,12(sp)
1c005a46:	4422                	lw	s0,8(sp)
1c005a48:	4492                	lw	s1,4(sp)
1c005a4a:	0141                	addi	sp,sp,16
1c005a4c:	8082                	ret

1c005a4e <modelCNN>:
};
int modelCNN(
		unsigned char * __restrict__ Input_1,
		signed short * __restrict__ Output_1)

{
1c005a4e:	7155                	addi	sp,sp,-208
1c005a50:	c786                	sw	ra,204(sp)
1c005a52:	c5a2                	sw	s0,200(sp)
1c005a54:	c3a6                	sw	s1,196(sp)
1c005a56:	c1ca                	sw	s2,192(sp)
1c005a58:	df4e                	sw	s3,188(sp)
1c005a5a:	dd52                	sw	s4,184(sp)
1c005a5c:	db56                	sw	s5,180(sp)
1c005a5e:	d95a                	sw	s6,176(sp)
1c005a60:	d75e                	sw	s7,172(sp)
1c005a62:	89ae                	mv	s3,a1
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c005a64:	10200437          	lui	s0,0x10200
1c005a68:	40040413          	addi	s0,s0,1024 # 10200400 <__l1_end+0x2003bc>
1c005a6c:	00842783          	lw	a5,8(s0)
	AT_HYPERRAM_CL_EVENT UchanHR0;
	AT_GraphPerf[0] = gap_cl_readhwtimer();
1c005a70:	1c010937          	lui	s2,0x1c010
1c005a74:	90f92223          	sw	a5,-1788(s2) # 1c00f904 <AT_GraphPerf>
	S1_Op_input_1_formatter(
		((unsigned char * __restrict__) Input_1), /* In */
		((signed char * __restrict__) (model_L3_Memory+1990656)) /* Out */
1c005a78:	1c010ab7          	lui	s5,0x1c010
1c005a7c:	001e6b37          	lui	s6,0x1e6
1c005a80:	920aa583          	lw	a1,-1760(s5) # 1c00f920 <model_L3_Memory>
	S1_Op_input_1_formatter(
1c005a84:	95da                	add	a1,a1,s6
1c005a86:	fe2fb0ef          	jal	ra,1c001268 <S1_Op_input_1_formatter>
1c005a8a:	00842783          	lw	a5,8(s0)
	);
	AT_GraphPerf[0] = gap_cl_readhwtimer() - AT_GraphPerf[0];
1c005a8e:	90492703          	lw	a4,-1788(s2)
1c005a92:	8f99                	sub	a5,a5,a4
1c005a94:	90f92223          	sw	a5,-1788(s2)
1c005a98:	00842783          	lw	a5,8(s0)
	AT_GraphPerf[1] = gap_cl_readhwtimer();
1c005a9c:	90490913          	addi	s2,s2,-1788
1c005aa0:	00f92223          	sw	a5,4(s2)
	S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu(
1c005aa4:	1c00fa37          	lui	s4,0x1c00f
1c005aa8:	578a0a13          	addi	s4,s4,1400 # 1c00f578 <model_L2_Memory>
1c005aac:	000a2583          	lw	a1,0(s4)
		((signed char * __restrict__) (model_L2_Memory+18944)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+19744)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+20512)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20544)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20576)) /* Infos */
1c005ab0:	6495                	lui	s1,0x5
1c005ab2:	06048813          	addi	a6,s1,96 # 5060 <__rt_stack_size+0x4860>
		((signed char * __restrict__) (model_L2_Memory+20544)), /* ScaleN */
1c005ab6:	04048793          	addi	a5,s1,64
		((unsigned char * __restrict__) (model_L2_Memory+20512)), /* Scale */
1c005aba:	02048713          	addi	a4,s1,32
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
1c005abe:	0b848b93          	addi	s7,s1,184
		((signed int * __restrict__) (model_L2_Memory+19744)), /* Bias */
1c005ac2:	d2048613          	addi	a2,s1,-736
		((signed char * __restrict__) (model_L2_Memory+18944)), /* Filter */
1c005ac6:	a0048893          	addi	a7,s1,-1536
		((signed char * __restrict__) (model_L3_Memory+1990656)), /* In */
1c005aca:	920aa503          	lw	a0,-1760(s5)
	S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu(
1c005ace:	982e                	add	a6,a6,a1
1c005ad0:	97ae                	add	a5,a5,a1
1c005ad2:	972e                	add	a4,a4,a1
1c005ad4:	017586b3          	add	a3,a1,s7
1c005ad8:	962e                	add	a2,a2,a1
1c005ada:	95c6                	add	a1,a1,a7
1c005adc:	955a                	add	a0,a0,s6
1c005ade:	ccdfb0ef          	jal	ra,1c0017aa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu>
1c005ae2:	00842783          	lw	a5,8(s0)
	);
	AT_GraphPerf[1] = gap_cl_readhwtimer() - AT_GraphPerf[1];
1c005ae6:	00492703          	lw	a4,4(s2)
1c005aea:	8f99                	sub	a5,a5,a4
1c005aec:	00f92223          	sw	a5,4(s2)
1c005af0:	00842783          	lw	a5,8(s0)
	AT_GraphPerf[2] = gap_cl_readhwtimer();
1c005af4:	00f92423          	sw	a5,8(s2)
	S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c005af8:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (model_L2_Memory+0)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+19232)), /* Bias */
		((signed char * __restrict__) (model_L3_Memory+1990656)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+20256)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20320)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20588)) /* Infos */
1c005afc:	06c48813          	addi	a6,s1,108
		((signed char * __restrict__) (model_L2_Memory+20320)), /* ScaleN */
1c005b00:	f6048793          	addi	a5,s1,-160
		((unsigned char * __restrict__) (model_L2_Memory+20256)), /* Scale */
1c005b04:	f2048713          	addi	a4,s1,-224
		((signed char * __restrict__) (model_L3_Memory+1990656)), /* Out */
1c005b08:	920aa683          	lw	a3,-1760(s5)
		((signed int * __restrict__) (model_L2_Memory+19232)), /* Bias */
1c005b0c:	b2048613          	addi	a2,s1,-1248
	S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c005b10:	982a                	add	a6,a6,a0
1c005b12:	97aa                	add	a5,a5,a0
1c005b14:	972a                	add	a4,a4,a0
1c005b16:	96da                	add	a3,a3,s6
1c005b18:	962a                	add	a2,a2,a0
1c005b1a:	85aa                	mv	a1,a0
1c005b1c:	955e                	add	a0,a0,s7
1c005b1e:	825fc0ef          	jal	ra,1c002342 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu>
1c005b22:	00842403          	lw	s0,8(s0)
	);
	AT_GraphPerf[2] = gap_cl_readhwtimer() - AT_GraphPerf[2];
1c005b26:	00892783          	lw	a5,8(s2)
1c005b2a:	8c1d                	sub	s0,s0,a5
1c005b2c:	00892423          	sw	s0,8(s2)
	/* Moving S4_Weights, size 73728 from HyperRam at 1916928 to (size 73728) L2 at 53736 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) model_L3_Memory + 1916928), ((AT_HYPERRAM_INT_ADDR_TYPE) model_L2_Memory + 53736), 73728, 0, &UchanHR0);
1c005b30:	000a2503          	lw	a0,0(s4)
1c005b34:	920aa583          	lw	a1,-1760(s5)
1c005b38:	878a                	mv	a5,sp
1c005b3a:	4705                	li	a4,1
1c005b3c:	66c9                	lui	a3,0x12
1c005b3e:	6635                	lui	a2,0xd
1c005b40:	1e860613          	addi	a2,a2,488 # d1e8 <__rt_stack_size+0xc9e8>
1c005b44:	962a                	add	a2,a2,a0
1c005b46:	001d4537          	lui	a0,0x1d4
1c005b4a:	95aa                	add	a1,a1,a0
1c005b4c:	1c00f537          	lui	a0,0x1c00f
1c005b50:	66450513          	addi	a0,a0,1636 # 1c00f664 <HyperRam>
1c005b54:	1a0040ef          	jal	ra,1c009cf4 <pi_cl_ram_copy>
    while ((*(volatile char *)done) == 0)
1c005b58:	09c14783          	lbu	a5,156(sp)
1c005b5c:	0ff7f793          	andi	a5,a5,255
1c005b60:	ef99                	bnez	a5,1c005b7e <modelCNN+0x130>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005b62:	4689                	li	a3,2
1c005b64:	00204737          	lui	a4,0x204
1c005b68:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005b6c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005b70:	00d72223          	sw	a3,4(a4)
1c005b74:	09c14783          	lbu	a5,156(sp)
1c005b78:	0ff7f793          	andi	a5,a5,255
1c005b7c:	d7f5                	beqz	a5,1c005b68 <modelCNN+0x11a>
1c005b7e:	10200937          	lui	s2,0x10200
1c005b82:	40090913          	addi	s2,s2,1024 # 10200400 <__l1_end+0x2003bc>
1c005b86:	00892783          	lw	a5,8(s2)
	/* Waiting completion of transfer of S4_Weights using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	AT_GraphPerf[3] = gap_cl_readhwtimer();
1c005b8a:	1c0104b7          	lui	s1,0x1c010
1c005b8e:	90448493          	addi	s1,s1,-1788 # 1c00f904 <AT_GraphPerf>
1c005b92:	c4dc                	sw	a5,12(s1)
	S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu(
1c005b94:	1c00fab7          	lui	s5,0x1c00f
1c005b98:	578a8a93          	addi	s5,s5,1400 # 1c00f578 <model_L2_Memory>
1c005b9c:	000aa883          	lw	a7,0(s5)
		((signed char * __restrict__) (model_L2_Memory+53736)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+18432)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+19872)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20000)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20600)) /* Infos */
1c005ba0:	6415                	lui	s0,0x5
1c005ba2:	07840813          	addi	a6,s0,120 # 5078 <__rt_stack_size+0x4878>
		((signed char * __restrict__) (model_L2_Memory+20000)), /* ScaleN */
1c005ba6:	e2040793          	addi	a5,s0,-480
		((unsigned char * __restrict__) (model_L2_Memory+19872)), /* Scale */
1c005baa:	da040713          	addi	a4,s0,-608
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
1c005bae:	0b840b13          	addi	s6,s0,184
		((signed int * __restrict__) (model_L2_Memory+18432)), /* Bias */
1c005bb2:	80040613          	addi	a2,s0,-2048
		((signed char * __restrict__) (model_L3_Memory+1990656)), /* In */
1c005bb6:	1c010bb7          	lui	s7,0x1c010
1c005bba:	920ba503          	lw	a0,-1760(s7) # 1c00f920 <model_L3_Memory>
	S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu(
1c005bbe:	9846                	add	a6,a6,a7
1c005bc0:	97c6                	add	a5,a5,a7
1c005bc2:	9746                	add	a4,a4,a7
1c005bc4:	016886b3          	add	a3,a7,s6
1c005bc8:	9646                	add	a2,a2,a7
1c005bca:	65b5                	lui	a1,0xd
1c005bcc:	1e858593          	addi	a1,a1,488 # d1e8 <__rt_stack_size+0xc9e8>
1c005bd0:	95c6                	add	a1,a1,a7
1c005bd2:	001e68b7          	lui	a7,0x1e6
1c005bd6:	9546                	add	a0,a0,a7
1c005bd8:	b3cfd0ef          	jal	ra,1c002f14 <S4_Conv2d_128x64x3x3_MaxPool_2x2_Relu>
1c005bdc:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[3] = gap_cl_readhwtimer() - AT_GraphPerf[3];
1c005be0:	44d8                	lw	a4,12(s1)
1c005be2:	8f99                	sub	a5,a5,a4
1c005be4:	c4dc                	sw	a5,12(s1)
1c005be6:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[4] = gap_cl_readhwtimer();
1c005bea:	c89c                	sw	a5,16(s1)
	S5_Linear_64x13x18x128(
1c005bec:	000aa503          	lw	a0,0(s5)
		((signed char * __restrict__) (model_L3_Memory+0)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+19488)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+50616)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+20384)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20448)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20612)) /* Infos */
1c005bf0:	08440813          	addi	a6,s0,132
		((signed char * __restrict__) (model_L2_Memory+20448)), /* ScaleN */
1c005bf4:	fe040793          	addi	a5,s0,-32
		((unsigned char * __restrict__) (model_L2_Memory+20384)), /* Scale */
1c005bf8:	fa040713          	addi	a4,s0,-96
		((signed char * __restrict__) (model_L2_Memory+50616)), /* Out */
1c005bfc:	6a31                	lui	s4,0xc
1c005bfe:	5b8a0a13          	addi	s4,s4,1464 # c5b8 <__rt_stack_size+0xbdb8>
		((signed int * __restrict__) (model_L2_Memory+19488)), /* Bias */
1c005c02:	c2040613          	addi	a2,s0,-992
	S5_Linear_64x13x18x128(
1c005c06:	982a                	add	a6,a6,a0
1c005c08:	97aa                	add	a5,a5,a0
1c005c0a:	972a                	add	a4,a4,a0
1c005c0c:	014506b3          	add	a3,a0,s4
1c005c10:	962a                	add	a2,a2,a0
1c005c12:	920ba583          	lw	a1,-1760(s7)
1c005c16:	955a                	add	a0,a0,s6
1c005c18:	f6ffd0ef          	jal	ra,1c003b86 <S5_Linear_64x13x18x128>
1c005c1c:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[4] = gap_cl_readhwtimer() - AT_GraphPerf[4];
1c005c20:	4898                	lw	a4,16(s1)
1c005c22:	8f99                	sub	a5,a5,a4
1c005c24:	c89c                	sw	a5,16(s1)
1c005c26:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[5] = gap_cl_readhwtimer();
1c005c2a:	c8dc                	sw	a5,20(s1)
	S6_Linear_2x64(
1c005c2c:	000aa503          	lw	a0,0(s5)
		((signed char * __restrict__) (model_L2_Memory+20128)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+20648)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+20664)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+20656)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+20660)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+20624)) /* Infos */
1c005c30:	09040813          	addi	a6,s0,144
		((signed char * __restrict__) (model_L2_Memory+20660)), /* ScaleN */
1c005c34:	0b440793          	addi	a5,s0,180
		((unsigned char * __restrict__) (model_L2_Memory+20656)), /* Scale */
1c005c38:	0b040713          	addi	a4,s0,176
		((signed int * __restrict__) (model_L2_Memory+20648)), /* Bias */
1c005c3c:	0a840613          	addi	a2,s0,168
		((signed char * __restrict__) (model_L2_Memory+20128)), /* Filter */
1c005c40:	ea040593          	addi	a1,s0,-352
	S6_Linear_2x64(
1c005c44:	982a                	add	a6,a6,a0
1c005c46:	97aa                	add	a5,a5,a0
1c005c48:	972a                	add	a4,a4,a0
1c005c4a:	016506b3          	add	a3,a0,s6
1c005c4e:	962a                	add	a2,a2,a0
1c005c50:	95aa                	add	a1,a1,a0
1c005c52:	9552                	add	a0,a0,s4
1c005c54:	8f3fe0ef          	jal	ra,1c004546 <S6_Linear_2x64>
1c005c58:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[5] = gap_cl_readhwtimer() - AT_GraphPerf[5];
1c005c5c:	48d8                	lw	a4,20(s1)
1c005c5e:	8f99                	sub	a5,a5,a4
1c005c60:	c8dc                	sw	a5,20(s1)
1c005c62:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[6] = gap_cl_readhwtimer();
1c005c66:	cc9c                	sw	a5,24(s1)
	S7_SoftMax(
1c005c68:	000aa503          	lw	a0,0(s5)
		((signed char * __restrict__) (model_L2_Memory+20664)), /* In */
		((signed short * __restrict__) Output_1), /* Out */
		((signed char * __restrict__) (model_L2_Memory+20636)) /* Infos */
1c005c6c:	09c40613          	addi	a2,s0,156
	S7_SoftMax(
1c005c70:	962a                	add	a2,a2,a0
1c005c72:	85ce                	mv	a1,s3
1c005c74:	955a                	add	a0,a0,s6
1c005c76:	e71fe0ef          	jal	ra,1c004ae6 <S7_SoftMax>
1c005c7a:	00892903          	lw	s2,8(s2)
	);
	AT_GraphPerf[6] = gap_cl_readhwtimer() - AT_GraphPerf[6];
1c005c7e:	4c9c                	lw	a5,24(s1)
1c005c80:	40f90933          	sub	s2,s2,a5
1c005c84:	0124ac23          	sw	s2,24(s1)
	return 0;
}
1c005c88:	4501                	li	a0,0
1c005c8a:	40be                	lw	ra,204(sp)
1c005c8c:	442e                	lw	s0,200(sp)
1c005c8e:	449e                	lw	s1,196(sp)
1c005c90:	490e                	lw	s2,192(sp)
1c005c92:	59fa                	lw	s3,188(sp)
1c005c94:	5a6a                	lw	s4,184(sp)
1c005c96:	5ada                	lw	s5,180(sp)
1c005c98:	5b4a                	lw	s6,176(sp)
1c005c9a:	5bba                	lw	s7,172(sp)
1c005c9c:	6169                	addi	sp,sp,208
1c005c9e:	8082                	ret

1c005ca0 <SkipCommentAndWhiteSpace>:
}

void SkipCommentAndWhiteSpace(unsigned char *pImg, int buf_len, int *i)
{
	int saw_nl = 1;
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c005ca0:	421c                	lw	a5,0(a2)
1c005ca2:	08b7df63          	ble	a1,a5,1c005d40 <SkipCommentAndWhiteSpace+0xa0>
{
1c005ca6:	1101                	addi	sp,sp,-32
1c005ca8:	ce06                	sw	ra,28(sp)
1c005caa:	cc22                	sw	s0,24(sp)
1c005cac:	ca26                	sw	s1,20(sp)
1c005cae:	c84a                	sw	s2,16(sp)
1c005cb0:	c64e                	sw	s3,12(sp)
1c005cb2:	c452                	sw	s4,8(sp)
1c005cb4:	c256                	sw	s5,4(sp)
1c005cb6:	4705                	li	a4,1
1c005cb8:	8432                	mv	s0,a2
1c005cba:	892e                	mv	s2,a1
1c005cbc:	84aa                	mv	s1,a0
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c005cbe:	02300993          	li	s3,35
1c005cc2:	4add                	li	s5,23
1c005cc4:	00800a37          	lui	s4,0x800
1c005cc8:	0a4d                	addi	s4,s4,19
1c005cca:	a015                	j	1c005cee <SkipCommentAndWhiteSpace+0x4e>
1c005ccc:	00fa57b3          	srl	a5,s4,a5
1c005cd0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005cd4:	c79d                	beqz	a5,1c005d02 <SkipCommentAndWhiteSpace+0x62>
			while (*i < buf_len && pImg[*i] != '\n') {
				printf("%c", pImg[*i]);
				(*i)++;
			}
		}
		saw_nl = (pImg[*i] == '\n');
1c005cd6:	401c                	lw	a5,0(s0)
1c005cd8:	00f48733          	add	a4,s1,a5
1c005cdc:	00074703          	lbu	a4,0(a4)
1c005ce0:	1759                	addi	a4,a4,-10
1c005ce2:	00173713          	seqz	a4,a4
		(*i)++;
1c005ce6:	0785                	addi	a5,a5,1
1c005ce8:	c01c                	sw	a5,0(s0)
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c005cea:	0127dc63          	ble	s2,a5,1c005d02 <SkipCommentAndWhiteSpace+0x62>
1c005cee:	97a6                	add	a5,a5,s1
1c005cf0:	0007c783          	lbu	a5,0(a5)
1c005cf4:	03378063          	beq	a5,s3,1c005d14 <SkipCommentAndWhiteSpace+0x74>
1c005cf8:	17dd                	addi	a5,a5,-9
1c005cfa:	0ff7f793          	andi	a5,a5,255
1c005cfe:	fcfaf7e3          	bleu	a5,s5,1c005ccc <SkipCommentAndWhiteSpace+0x2c>
	}
}
1c005d02:	40f2                	lw	ra,28(sp)
1c005d04:	4462                	lw	s0,24(sp)
1c005d06:	44d2                	lw	s1,20(sp)
1c005d08:	4942                	lw	s2,16(sp)
1c005d0a:	49b2                	lw	s3,12(sp)
1c005d0c:	4a22                	lw	s4,8(sp)
1c005d0e:	4a92                	lw	s5,4(sp)
1c005d10:	6105                	addi	sp,sp,32
1c005d12:	8082                	ret
		if (saw_nl && pImg[*i] == '#') {
1c005d14:	d369                	beqz	a4,1c005cd6 <SkipCommentAndWhiteSpace+0x36>
			while (*i < buf_len && pImg[*i] != '\n') {
1c005d16:	401c                	lw	a5,0(s0)
1c005d18:	fb27dfe3          	ble	s2,a5,1c005cd6 <SkipCommentAndWhiteSpace+0x36>
1c005d1c:	97a6                	add	a5,a5,s1
1c005d1e:	0007c503          	lbu	a0,0(a5)
1c005d22:	faa52ae3          	p.beqimm	a0,10,1c005cd6 <SkipCommentAndWhiteSpace+0x36>
				printf("%c", pImg[*i]);
1c005d26:	323070ef          	jal	ra,1c00d848 <putchar>
				(*i)++;
1c005d2a:	401c                	lw	a5,0(s0)
1c005d2c:	0785                	addi	a5,a5,1
1c005d2e:	c01c                	sw	a5,0(s0)
			while (*i < buf_len && pImg[*i] != '\n') {
1c005d30:	fb27d3e3          	ble	s2,a5,1c005cd6 <SkipCommentAndWhiteSpace+0x36>
1c005d34:	97a6                	add	a5,a5,s1
1c005d36:	0007c503          	lbu	a0,0(a5)
1c005d3a:	fea536e3          	p.bneimm	a0,10,1c005d26 <SkipCommentAndWhiteSpace+0x86>
1c005d3e:	bf61                	j	1c005cd6 <SkipCommentAndWhiteSpace+0x36>
1c005d40:	8082                	ret

1c005d42 <ReadValue>:

unsigned int ReadValue(unsigned char *pImg, int buf_len, int *i)
{
1c005d42:	1141                	addi	sp,sp,-16
1c005d44:	c606                	sw	ra,12(sp)
1c005d46:	c422                	sw	s0,8(sp)
1c005d48:	c226                	sw	s1,4(sp)
1c005d4a:	c04a                	sw	s2,0(sp)
1c005d4c:	892a                	mv	s2,a0
1c005d4e:	84ae                	mv	s1,a1
1c005d50:	8432                	mv	s0,a2
#define IS_DIGIT(C) (((C) >= '0') && ((C) <= '9'))
	unsigned int val = 0;
	SkipCommentAndWhiteSpace(pImg, buf_len, i);
1c005d52:	37b9                	jal	1c005ca0 <SkipCommentAndWhiteSpace>
	while (*i < buf_len && !IS_DIGIT(pImg[*i])) {
1c005d54:	4018                	lw	a4,0(s0)
1c005d56:	08975463          	ble	s1,a4,1c005dde <ReadValue+0x9c>
1c005d5a:	00e907b3          	add	a5,s2,a4
1c005d5e:	0007c683          	lbu	a3,0(a5)
1c005d62:	fd068793          	addi	a5,a3,-48 # 11fd0 <__L1Cl+0x1fd0>
1c005d66:	0ff7f793          	andi	a5,a5,255
1c005d6a:	4625                	li	a2,9
1c005d6c:	04f67163          	bleu	a5,a2,1c005dae <ReadValue+0x6c>
1c005d70:	0705                	addi	a4,a4,1
1c005d72:	00e906b3          	add	a3,s2,a4
1c005d76:	854a                	mv	a0,s2
1c005d78:	012485b3          	add	a1,s1,s2
1c005d7c:	4825                	li	a6,9
1c005d7e:	40a68633          	sub	a2,a3,a0
1c005d82:	8732                	mv	a4,a2
		(*i)++;
1c005d84:	c010                	sw	a2,0(s0)
	while (*i < buf_len && !IS_DIGIT(pImg[*i])) {
1c005d86:	04b68e63          	beq	a3,a1,1c005de2 <ReadValue+0xa0>
1c005d8a:	0016c78b          	p.lbu	a5,1(a3!)
1c005d8e:	fd078793          	addi	a5,a5,-48
1c005d92:	0ff7f793          	andi	a5,a5,255
1c005d96:	fef864e3          	bltu	a6,a5,1c005d7e <ReadValue+0x3c>
	}
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c005d9a:	964a                	add	a2,a2,s2
1c005d9c:	00064683          	lbu	a3,0(a2)
1c005da0:	fd068793          	addi	a5,a3,-48
1c005da4:	0ff7f793          	andi	a5,a5,255
1c005da8:	4625                	li	a2,9
1c005daa:	04f66363          	bltu	a2,a5,1c005df0 <ReadValue+0xae>
1c005dae:	0705                	addi	a4,a4,1
1c005db0:	993a                	add	s2,s2,a4
{
1c005db2:	4501                	li	a0,0
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c005db4:	4625                	li	a2,9
		val = val * 10 + (pImg[*i] - 0x30);
1c005db6:	00251793          	slli	a5,a0,0x2
1c005dba:	953e                	add	a0,a0,a5
1c005dbc:	0506                	slli	a0,a0,0x1
1c005dbe:	9536                	add	a0,a0,a3
1c005dc0:	fd050513          	addi	a0,a0,-48
		(*i)++;
1c005dc4:	c018                	sw	a4,0(s0)
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c005dc6:	00975f63          	ble	s1,a4,1c005de4 <ReadValue+0xa2>
1c005dca:	0019468b          	p.lbu	a3,1(s2!)
1c005dce:	0705                	addi	a4,a4,1
1c005dd0:	fd068793          	addi	a5,a3,-48
1c005dd4:	0ff7f793          	andi	a5,a5,255
1c005dd8:	fcf67fe3          	bleu	a5,a2,1c005db6 <ReadValue+0x74>
1c005ddc:	a021                	j	1c005de4 <ReadValue+0xa2>
	while (*i < buf_len && !IS_DIGIT(pImg[*i])) {
1c005dde:	4501                	li	a0,0
1c005de0:	a011                	j	1c005de4 <ReadValue+0xa2>
1c005de2:	4501                	li	a0,0
	}
	return val;
#undef IS_DIGIT
}
1c005de4:	40b2                	lw	ra,12(sp)
1c005de6:	4422                	lw	s0,8(sp)
1c005de8:	4492                	lw	s1,4(sp)
1c005dea:	4902                	lw	s2,0(sp)
1c005dec:	0141                	addi	sp,sp,16
1c005dee:	8082                	ret
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c005df0:	4501                	li	a0,0
1c005df2:	bfcd                	j	1c005de4 <ReadValue+0xa2>

1c005df4 <ReadImageFromFile>:
	}
	return 0;
}

int ReadImageFromFile(char *ImageName, unsigned int DesiredW, unsigned int DesiredH, unsigned int DesiredBytesPerPixel, void *InBuffer, unsigned int BuffSize, img_io_out_t out_type, int Transpose2CHW) 
{
1c005df4:	7131                	addi	sp,sp,-192
1c005df6:	df06                	sw	ra,188(sp)
1c005df8:	dd22                	sw	s0,184(sp)
1c005dfa:	db26                	sw	s1,180(sp)
1c005dfc:	d94a                	sw	s2,176(sp)
1c005dfe:	d74e                	sw	s3,172(sp)
1c005e00:	d552                	sw	s4,168(sp)
1c005e02:	d356                	sw	s5,164(sp)
1c005e04:	d15a                	sw	s6,160(sp)
1c005e06:	cf5e                	sw	s7,156(sp)
1c005e08:	cd62                	sw	s8,152(sp)
1c005e0a:	cb66                	sw	s9,148(sp)
1c005e0c:	c96a                	sw	s10,144(sp)
1c005e0e:	c76e                	sw	s11,140(sp)
1c005e10:	0180                	addi	s0,sp,192
1c005e12:	84aa                	mv	s1,a0
1c005e14:	8bae                	mv	s7,a1
1c005e16:	8b32                	mv	s6,a2
1c005e18:	8ab6                	mv	s5,a3
1c005e1a:	f6e42223          	sw	a4,-156(s0)
1c005e1e:	f6f42423          	sw	a5,-152(s0)
1c005e22:	f7042623          	sw	a6,-148(s0)
1c005e26:	f7142023          	sw	a7,-160(s0)
	__FS_INIT(fs);
1c005e2a:	f8040513          	addi	a0,s0,-128
1c005e2e:	239020ef          	jal	ra,1c008866 <pi_fs_conf_init>
1c005e32:	4785                	li	a5,1
1c005e34:	f8f42023          	sw	a5,-128(s0)
1c005e38:	f8040593          	addi	a1,s0,-128
1c005e3c:	f9440513          	addi	a0,s0,-108
1c005e40:	0be050ef          	jal	ra,1c00aefe <pi_open_from_conf>
1c005e44:	f9440513          	addi	a0,s0,-108
1c005e48:	231020ef          	jal	ra,1c008878 <pi_fs_mount>
	switch_file_t File = __OPEN_READ(fs, Name);
1c005e4c:	4601                	li	a2,0
1c005e4e:	85a6                	mv	a1,s1
1c005e50:	f9440513          	addi	a0,s0,-108
1c005e54:	259020ef          	jal	ra,1c0088ac <pi_fs_open>
	if (!File) {
1c005e58:	cd49                	beqz	a0,1c005ef2 <ReadImageFromFile+0xfe>
1c005e5a:	892a                	mv	s2,a0
	unsigned char *Header = (unsigned char *) __ALLOC_L2(256);
1c005e5c:	10000513          	li	a0,256
1c005e60:	1cb050ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c005e64:	89aa                	mv	s3,a0
	if (__READ(File, Header, 256) == 256) {
1c005e66:	10000613          	li	a2,256
1c005e6a:	85aa                	mv	a1,a0
1c005e6c:	854a                	mv	a0,s2
1c005e6e:	257020ef          	jal	ra,1c0088c4 <pi_fs_read>
1c005e72:	10000793          	li	a5,256
1c005e76:	08f50663          	beq	a0,a5,1c005f02 <ReadImageFromFile+0x10e>
		printf("Unable to read header %s", Name);
1c005e7a:	85a6                	mv	a1,s1
1c005e7c:	1c00f537          	lui	a0,0x1c00f
1c005e80:	f1c50513          	addi	a0,a0,-228 # 1c00ef1c <__clz_tab+0x454>
1c005e84:	2e5070ef          	jal	ra,1c00d968 <printf>
	__FREE_L2(Header, 256);
1c005e88:	10000593          	li	a1,256
1c005e8c:	854e                	mv	a0,s3
1c005e8e:	1ab050ef          	jal	ra,1c00b838 <pi_l2_free>
	__CLOSE(File);
1c005e92:	854a                	mv	a0,s2
1c005e94:	221020ef          	jal	ra,1c0088b4 <pi_fs_close>
	__FS_DEINIT(fs);
1c005e98:	f9440513          	addi	a0,s0,-108
1c005e9c:	209020ef          	jal	ra,1c0088a4 <pi_fs_unmount>
	switch_file_t File = (switch_file_t) 0;
	unsigned int BytesPerPixel, W, H, HeaderSize, Size, ReadSize=0;
	unsigned int ImageShort;

	if (GetInputImageInfos(ImageName, &W, &H, &BytesPerPixel, &HeaderSize, &ImageShort)) {
		printf("Failed to get input images infos, %s\n", ImageName); goto Fail;
1c005ea0:	85a6                	mv	a1,s1
1c005ea2:	1c00f537          	lui	a0,0x1c00f
1c005ea6:	f3850513          	addi	a0,a0,-200 # 1c00ef38 <__clz_tab+0x470>
1c005eaa:	2bf070ef          	jal	ra,1c00d968 <printf>
	switch_file_t File = (switch_file_t) 0;
1c005eae:	4901                	li	s2,0
	__FS_DEINIT(fs);
	PRINTF("Image %s, [W: %d, H: %d], Bytes per pixel %d, Size: %d bytes, Loaded successfully\n", ImageName, W, H, BytesPerPixel, Size);

	return 0;
Fail:
	__CLOSE(File);
1c005eb0:	854a                	mv	a0,s2
1c005eb2:	203020ef          	jal	ra,1c0088b4 <pi_fs_close>
	__FS_DEINIT(fs);
1c005eb6:	fb440513          	addi	a0,s0,-76
1c005eba:	1eb020ef          	jal	ra,1c0088a4 <pi_fs_unmount>
	printf("Failed to load image %s from flash\n", ImageName);
1c005ebe:	85a6                	mv	a1,s1
1c005ec0:	1c00f537          	lui	a0,0x1c00f
1c005ec4:	06c50513          	addi	a0,a0,108 # 1c00f06c <__clz_tab+0x5a4>
1c005ec8:	2a1070ef          	jal	ra,1c00d968 <printf>
	return 1;
1c005ecc:	4985                	li	s3,1
}
1c005ece:	854e                	mv	a0,s3
1c005ed0:	f4040113          	addi	sp,s0,-192
1c005ed4:	50fa                	lw	ra,188(sp)
1c005ed6:	546a                	lw	s0,184(sp)
1c005ed8:	54da                	lw	s1,180(sp)
1c005eda:	594a                	lw	s2,176(sp)
1c005edc:	59ba                	lw	s3,172(sp)
1c005ede:	5a2a                	lw	s4,168(sp)
1c005ee0:	5a9a                	lw	s5,164(sp)
1c005ee2:	5b0a                	lw	s6,160(sp)
1c005ee4:	4bfa                	lw	s7,156(sp)
1c005ee6:	4c6a                	lw	s8,152(sp)
1c005ee8:	4cda                	lw	s9,148(sp)
1c005eea:	4d4a                	lw	s10,144(sp)
1c005eec:	4dba                	lw	s11,140(sp)
1c005eee:	6129                	addi	sp,sp,192
1c005ef0:	8082                	ret
		printf("Unable to open file %s\n", Name);
1c005ef2:	85a6                	mv	a1,s1
1c005ef4:	1c00f537          	lui	a0,0x1c00f
1c005ef8:	ea850513          	addi	a0,a0,-344 # 1c00eea8 <__clz_tab+0x3e0>
1c005efc:	26d070ef          	jal	ra,1c00d968 <printf>
1c005f00:	b745                	j	1c005ea0 <ReadImageFromFile+0xac>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *BytesPerPixel = 1;
1c005f02:	0009c703          	lbu	a4,0(s3) # 12000 <__L1Cl+0x2000>
1c005f06:	05000793          	li	a5,80
1c005f0a:	00f70a63          	beq	a4,a5,1c005f1e <ReadImageFromFile+0x12a>
			printf("Unable to load header %s", Name);
1c005f0e:	85a6                	mv	a1,s1
1c005f10:	1c00f537          	lui	a0,0x1c00f
1c005f14:	f0050513          	addi	a0,a0,-256 # 1c00ef00 <__clz_tab+0x438>
1c005f18:	251070ef          	jal	ra,1c00d968 <printf>
1c005f1c:	b7b5                	j	1c005e88 <ReadImageFromFile+0x94>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *BytesPerPixel = 1;
1c005f1e:	0019c783          	lbu	a5,1(s3)
1c005f22:	03500713          	li	a4,53
1c005f26:	0ee78663          	beq	a5,a4,1c006012 <ReadImageFromFile+0x21e>
	else if (ImgIn[0] == 'P' && ImgIn[1] == '6' && ImgIn[2] == '\n') *BytesPerPixel = 3;
1c005f2a:	03600713          	li	a4,54
1c005f2e:	fee790e3          	bne	a5,a4,1c005f0e <ReadImageFromFile+0x11a>
1c005f32:	0029c783          	lbu	a5,2(s3)
1c005f36:	4c0d                	li	s8,3
1c005f38:	fca7bbe3          	p.bneimm	a5,10,1c005f0e <ReadImageFromFile+0x11a>
	int i = 3;
1c005f3c:	478d                	li	a5,3
1c005f3e:	f6f42e23          	sw	a5,-132(s0)
	*W = ReadValue(ImgIn, buf_len, &i);
1c005f42:	f7c40613          	addi	a2,s0,-132
1c005f46:	10000593          	li	a1,256
1c005f4a:	854e                	mv	a0,s3
1c005f4c:	3bdd                	jal	1c005d42 <ReadValue>
1c005f4e:	f4a42e23          	sw	a0,-164(s0)
	*H = ReadValue(ImgIn, buf_len, &i);
1c005f52:	f7c40613          	addi	a2,s0,-132
1c005f56:	10000593          	li	a1,256
1c005f5a:	854e                	mv	a0,s3
1c005f5c:	33dd                	jal	1c005d42 <ReadValue>
1c005f5e:	8d2a                	mv	s10,a0
	unsigned int Val = ReadValue(ImgIn, buf_len, &i);
1c005f60:	f7c40613          	addi	a2,s0,-132
1c005f64:	10000593          	li	a1,256
1c005f68:	854e                	mv	a0,s3
1c005f6a:	3be1                	jal	1c005d42 <ReadValue>
1c005f6c:	f4a42a23          	sw	a0,-172(s0)
	if (Val != 255 && Val != 65535) return 1;
1c005f70:	0ff00793          	li	a5,255
1c005f74:	00f50663          	beq	a0,a5,1c005f80 <ReadImageFromFile+0x18c>
1c005f78:	67c1                	lui	a5,0x10
1c005f7a:	17fd                	addi	a5,a5,-1
1c005f7c:	f8f519e3          	bne	a0,a5,1c005f0e <ReadImageFromFile+0x11a>
	while (ImgIn[i++] != 0xA) {};
1c005f80:	f7c42783          	lw	a5,-132(s0)
1c005f84:	00178c93          	addi	s9,a5,1 # 10001 <__L1Cl+0x1>
1c005f88:	f7942e23          	sw	s9,-132(s0)
1c005f8c:	97ce                	add	a5,a5,s3
1c005f8e:	0007c783          	lbu	a5,0(a5)
1c005f92:	fea7b7e3          	p.bneimm	a5,10,1c005f80 <ReadImageFromFile+0x18c>
			PRINTF("Image %s:  [W: %d, H: %d] Bytes per pixel %d, HeaderSize: %d\n", Name, *W, *H, *BytesPerPixel, *HeaderSize);
1c005f96:	87e6                	mv	a5,s9
1c005f98:	8762                	mv	a4,s8
1c005f9a:	86ea                	mv	a3,s10
1c005f9c:	f5c42603          	lw	a2,-164(s0)
1c005fa0:	85a6                	mv	a1,s1
1c005fa2:	1c00f537          	lui	a0,0x1c00f
1c005fa6:	ec050513          	addi	a0,a0,-320 # 1c00eec0 <__clz_tab+0x3f8>
1c005faa:	1bf070ef          	jal	ra,1c00d968 <printf>
1c005fae:	8a4e                	mv	s4,s3
1c005fb0:	01998db3          	add	s11,s3,s9
			for (i=0; i<*HeaderSize;i++) PRINTF("%c", Header[i]);
1c005fb4:	000c8863          	beqz	s9,1c005fc4 <ReadImageFromFile+0x1d0>
1c005fb8:	001a450b          	p.lbu	a0,1(s4!) # 800001 <__L2+0x780001>
1c005fbc:	08d070ef          	jal	ra,1c00d848 <putchar>
1c005fc0:	ffba1ce3          	bne	s4,s11,1c005fb8 <ReadImageFromFile+0x1c4>
			PRINTF("\n");
1c005fc4:	4529                	li	a0,10
1c005fc6:	083070ef          	jal	ra,1c00d848 <putchar>
	__FREE_L2(Header, 256);
1c005fca:	10000593          	li	a1,256
1c005fce:	854e                	mv	a0,s3
1c005fd0:	069050ef          	jal	ra,1c00b838 <pi_l2_free>
	__CLOSE(File);
1c005fd4:	854a                	mv	a0,s2
1c005fd6:	0df020ef          	jal	ra,1c0088b4 <pi_fs_close>
	__FS_DEINIT(fs);
1c005fda:	f9440513          	addi	a0,s0,-108
1c005fde:	0c7020ef          	jal	ra,1c0088a4 <pi_fs_unmount>
	if (GetInputImageInfos(ImageName, &W, &H, &BytesPerPixel, &HeaderSize, &ImageShort)) {
1c005fe2:	ea098fe3          	beqz	s3,1c005ea0 <ReadImageFromFile+0xac>
	if (BytesPerPixel != DesiredBytesPerPixel) {
1c005fe6:	038a9c63          	bne	s5,s8,1c00601e <ReadImageFromFile+0x22a>
	if (DesiredH != H || DesiredW != W) {
1c005fea:	01ab1663          	bne	s6,s10,1c005ff6 <ReadImageFromFile+0x202>
1c005fee:	f5c42703          	lw	a4,-164(s0)
1c005ff2:	04eb8063          	beq	s7,a4,1c006032 <ReadImageFromFile+0x23e>
		printf("Expecting [%dx%d] image, got [%dx%d] %s\n", DesiredW, DesiredH, W, H, ImageName); goto Fail;
1c005ff6:	87a6                	mv	a5,s1
1c005ff8:	876a                	mv	a4,s10
1c005ffa:	f5c42683          	lw	a3,-164(s0)
1c005ffe:	865a                	mv	a2,s6
1c006000:	85de                	mv	a1,s7
1c006002:	1c00f537          	lui	a0,0x1c00f
1c006006:	f8850513          	addi	a0,a0,-120 # 1c00ef88 <__clz_tab+0x4c0>
1c00600a:	15f070ef          	jal	ra,1c00d968 <printf>
	switch_file_t File = (switch_file_t) 0;
1c00600e:	4901                	li	s2,0
		printf("Expecting [%dx%d] image, got [%dx%d] %s\n", DesiredW, DesiredH, W, H, ImageName); goto Fail;
1c006010:	b545                	j	1c005eb0 <ReadImageFromFile+0xbc>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *BytesPerPixel = 1;
1c006012:	0029c783          	lbu	a5,2(s3)
1c006016:	eea7bce3          	p.bneimm	a5,10,1c005f0e <ReadImageFromFile+0x11a>
1c00601a:	4c05                	li	s8,1
1c00601c:	b705                	j	1c005f3c <ReadImageFromFile+0x148>
		printf("Expecting %d bytes per pixel image, %s\n", BytesPerPixel, ImageName); goto Fail;
1c00601e:	8626                	mv	a2,s1
1c006020:	85e2                	mv	a1,s8
1c006022:	1c00f537          	lui	a0,0x1c00f
1c006026:	f6050513          	addi	a0,a0,-160 # 1c00ef60 <__clz_tab+0x498>
1c00602a:	13f070ef          	jal	ra,1c00d968 <printf>
	switch_file_t File = (switch_file_t) 0;
1c00602e:	4901                	li	s2,0
		printf("Expecting %d bytes per pixel image, %s\n", BytesPerPixel, ImageName); goto Fail;
1c006030:	b541                	j	1c005eb0 <ReadImageFromFile+0xbc>
	__FS_INIT(fs);
1c006032:	fa040513          	addi	a0,s0,-96
1c006036:	031020ef          	jal	ra,1c008866 <pi_fs_conf_init>
1c00603a:	4785                	li	a5,1
1c00603c:	faf42023          	sw	a5,-96(s0)
1c006040:	fa040593          	addi	a1,s0,-96
1c006044:	fb440513          	addi	a0,s0,-76
1c006048:	6b7040ef          	jal	ra,1c00aefe <pi_open_from_conf>
1c00604c:	fb440513          	addi	a0,s0,-76
1c006050:	029020ef          	jal	ra,1c008878 <pi_fs_mount>
	File = __OPEN_READ(fs, ImageName);
1c006054:	4601                	li	a2,0
1c006056:	85a6                	mv	a1,s1
1c006058:	fb440513          	addi	a0,s0,-76
1c00605c:	051020ef          	jal	ra,1c0088ac <pi_fs_open>
1c006060:	892a                	mv	s2,a0
	if (File == 0) {
1c006062:	cd21                	beqz	a0,1c0060ba <ReadImageFromFile+0x2c6>
	Size = W*H*BytesPerPixel*(ImageShort?sizeof(short int):sizeof(unsigned char));
1c006064:	f5c42783          	lw	a5,-164(s0)
1c006068:	03a789b3          	mul	s3,a5,s10
1c00606c:	038987b3          	mul	a5,s3,s8
1c006070:	6a41                	lui	s4,0x10
1c006072:	1a7d                	addi	s4,s4,-1
1c006074:	f5442703          	lw	a4,-172(s0)
1c006078:	41470a33          	sub	s4,a4,s4
1c00607c:	001a3a13          	seqz	s4,s4
1c006080:	0a05                	addi	s4,s4,1
1c006082:	03478a33          	mul	s4,a5,s4
	if (out_type == IMGIO_OUTPUT_RGB565) {
1c006086:	f6c42783          	lw	a5,-148(s0)
1c00608a:	0427a063          	p.beqimm	a5,2,1c0060ca <ReadImageFromFile+0x2d6>
		if (BuffSize < Size) {
1c00608e:	f6842783          	lw	a5,-152(s0)
1c006092:	1147e863          	bltu	a5,s4,1c0061a2 <ReadImageFromFile+0x3ae>
	__SEEK(File, HeaderSize);
1c006096:	85e6                	mv	a1,s9
1c006098:	08b020ef          	jal	ra,1c008922 <pi_fs_seek>
	if (ImageShort){
1c00609c:	67c1                	lui	a5,0x10
1c00609e:	17fd                	addi	a5,a5,-1
1c0060a0:	f5442703          	lw	a4,-172(s0)
1c0060a4:	10f70763          	beq	a4,a5,1c0061b2 <ReadImageFromFile+0x3be>
		switch (out_type) {
1c0060a8:	f6c42703          	lw	a4,-148(s0)
1c0060ac:	36172263          	p.beqimm	a4,1,1c006410 <ReadImageFromFile+0x61c>
1c0060b0:	1c070c63          	beqz	a4,1c006288 <ReadImageFromFile+0x494>
1c0060b4:	1c273263          	p.bneimm	a4,2,1c006278 <ReadImageFromFile+0x484>
1c0060b8:	a03d                	j	1c0060e6 <ReadImageFromFile+0x2f2>
		printf("Failed to open file, %s\n", ImageName); goto Fail;
1c0060ba:	85a6                	mv	a1,s1
1c0060bc:	1c00f537          	lui	a0,0x1c00f
1c0060c0:	fb450513          	addi	a0,a0,-76 # 1c00efb4 <__clz_tab+0x4ec>
1c0060c4:	0a5070ef          	jal	ra,1c00d968 <printf>
1c0060c8:	b3e5                	j	1c005eb0 <ReadImageFromFile+0xbc>
		if (BuffSize < W*H*2) {
1c0060ca:	0986                	slli	s3,s3,0x1
1c0060cc:	f6842703          	lw	a4,-152(s0)
1c0060d0:	0d376163          	bltu	a4,s3,1c006192 <ReadImageFromFile+0x39e>
	__SEEK(File, HeaderSize);
1c0060d4:	85e6                	mv	a1,s9
1c0060d6:	04d020ef          	jal	ra,1c008922 <pi_fs_seek>
	if (ImageShort){
1c0060da:	67c1                	lui	a5,0x10
1c0060dc:	17fd                	addi	a5,a5,-1
1c0060de:	f5442703          	lw	a4,-172(s0)
1c0060e2:	0cf70863          	beq	a4,a5,1c0061b2 <ReadImageFromFile+0x3be>
				res = ReadMultiChannelImageRGB565(File, (unsigned short *)InBuffer, W, H);
1c0060e6:	f5c42703          	lw	a4,-164(s0)
1c0060ea:	f6e42423          	sw	a4,-152(s0)
1c0060ee:	f7a42023          	sw	s10,-160(s0)
{
1c0060f2:	f4242c23          	sw	sp,-168(s0)
	unsigned int RowSize = W*3;
1c0060f6:	00171b13          	slli	s6,a4,0x1
1c0060fa:	9b3a                	add	s6,s6,a4
	unsigned char InputBuf[RowSize];
1c0060fc:	00fb0793          	addi	a5,s6,15 # 1e600f <__L2+0x16600f>
1c006100:	c607b7b3          	p.bclr	a5,a5,3,0
1c006104:	40f10133          	sub	sp,sp,a5
1c006108:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c00610c:	4ba05463          	blez	s10,1c0065b4 <ReadImageFromFile+0x7c0>
1c006110:	00171d93          	slli	s11,a4,0x1
1c006114:	f6442c83          	lw	s9,-156(s0)
1c006118:	f7b42223          	sw	s11,-156(s0)
1c00611c:	4b81                	li	s7,0
		unsigned char *pInpBuf = InputBuf;
1c00611e:	f6c42a83          	lw	s5,-148(s0)
		int RemainBytes = RowSize;
1c006122:	89da                	mv	s3,s6
		while (RemainBytes > 0) {
1c006124:	01605e63          	blez	s6,1c006140 <ReadImageFromFile+0x34c>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c006128:	864e                	mv	a2,s3
1c00612a:	85d6                	mv	a1,s5
1c00612c:	854a                	mv	a0,s2
1c00612e:	796020ef          	jal	ra,1c0088c4 <pi_fs_read>
			if (!len) return 1;
1c006132:	48050363          	beqz	a0,1c0065b8 <ReadImageFromFile+0x7c4>
			RemainBytes -= len;
1c006136:	40a989b3          	sub	s3,s3,a0
			pInpBuf += len;
1c00613a:	9aaa                	add	s5,s5,a0
		while (RemainBytes > 0) {
1c00613c:	ff3046e3          	bgtz	s3,1c006128 <ReadImageFromFile+0x334>
		for (int j=0, i=0; i < W; i++) {
1c006140:	f6842783          	lw	a5,-152(s0)
1c006144:	02f05f63          	blez	a5,1c006182 <ReadImageFromFile+0x38e>
1c006148:	f6c42683          	lw	a3,-148(s0)
1c00614c:	85e6                	mv	a1,s9
1c00614e:	f6442703          	lw	a4,-156(s0)
1c006152:	ffe70613          	addi	a2,a4,-2
1c006156:	8205                	srli	a2,a2,0x1
1c006158:	0605                	addi	a2,a2,1
1c00615a:	013640fb          	lp.setup	x1,a2,1c006180 <ReadImageFromFile+0x38c>
			pInBuffer[W * CurRow + i] = ((((uint16_t)InputBuf[j]&0xf8)<<8)|(((uint16_t)InputBuf[j+1]&0xfc)<<3)|(((uint16_t)InputBuf[j+2]&0xf8)>>3));
1c00615e:	0006c783          	lbu	a5,0(a3)
1c006162:	07a2                	slli	a5,a5,0x8
1c006164:	d407b7b3          	p.bclr	a5,a5,10,0
1c006168:	0016c703          	lbu	a4,1(a3)
1c00616c:	070e                	slli	a4,a4,0x3
1c00616e:	7e077713          	andi	a4,a4,2016
1c006172:	8fd9                	or	a5,a5,a4
1c006174:	0026c703          	lbu	a4,2(a3)
1c006178:	830d                	srli	a4,a4,0x3
1c00617a:	8fd9                	or	a5,a5,a4
1c00617c:	00f5912b          	p.sh	a5,2(a1!)
1c006180:	068d                	addi	a3,a3,3
	for (int CurRow=0; CurRow < H; CurRow++) {
1c006182:	0b85                	addi	s7,s7,1
1c006184:	9cee                	add	s9,s9,s11
1c006186:	f6042783          	lw	a5,-160(s0)
1c00618a:	f9779ae3          	bne	a5,s7,1c00611e <ReadImageFromFile+0x32a>
	return 0;
1c00618e:	4981                	li	s3,0
1c006190:	a12d                	j	1c0065ba <ReadImageFromFile+0x7c6>
			printf("Buffer is too small, %s\n", ImageName); goto Fail;
1c006192:	85a6                	mv	a1,s1
1c006194:	1c00f537          	lui	a0,0x1c00f
1c006198:	fd050513          	addi	a0,a0,-48 # 1c00efd0 <__clz_tab+0x508>
1c00619c:	7cc070ef          	jal	ra,1c00d968 <printf>
1c0061a0:	bb01                	j	1c005eb0 <ReadImageFromFile+0xbc>
			printf("Buffer is too small, %s\n", ImageName); goto Fail;
1c0061a2:	85a6                	mv	a1,s1
1c0061a4:	1c00f537          	lui	a0,0x1c00f
1c0061a8:	fd050513          	addi	a0,a0,-48 # 1c00efd0 <__clz_tab+0x508>
1c0061ac:	7bc070ef          	jal	ra,1c00d968 <printf>
1c0061b0:	b301                	j	1c005eb0 <ReadImageFromFile+0xbc>
		res = ReadShortImage(File, (short int *)InBuffer, W, H, BytesPerPixel);
1c0061b2:	f5c42783          	lw	a5,-164(s0)
1c0061b6:	f6f42023          	sw	a5,-160(s0)
1c0061ba:	f5a42c23          	sw	s10,-168(s0)
1c0061be:	8be2                	mv	s7,s8
{
1c0061c0:	f4242a23          	sw	sp,-172(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c0061c4:	03878b33          	mul	s6,a5,s8
	short int InputBuf[RowSize];
1c0061c8:	0b06                	slli	s6,s6,0x1
1c0061ca:	010b0793          	addi	a5,s6,16
1c0061ce:	c607b7b3          	p.bclr	a5,a5,3,0
1c0061d2:	40f10133          	sub	sp,sp,a5
1c0061d6:	f6242423          	sw	sp,-152(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c0061da:	09a05863          	blez	s10,1c00626a <ReadImageFromFile+0x476>
1c0061de:	001c1c93          	slli	s9,s8,0x1
1c0061e2:	8de6                	mv	s11,s9
1c0061e4:	f6042623          	sw	zero,-148(s0)
		int RemainBytes = RowSize*2;
1c0061e8:	89da                	mv	s3,s6
		while (RemainBytes > 0) {
1c0061ea:	01605f63          	blez	s6,1c006208 <ReadImageFromFile+0x414>
		unsigned char *pInpBuf = (unsigned char *) InputBuf;
1c0061ee:	f6842a83          	lw	s5,-152(s0)
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c0061f2:	864e                	mv	a2,s3
1c0061f4:	85d6                	mv	a1,s5
1c0061f6:	854a                	mv	a0,s2
1c0061f8:	6cc020ef          	jal	ra,1c0088c4 <pi_fs_read>
			if (!len) return 1;
1c0061fc:	c92d                	beqz	a0,1c00626e <ReadImageFromFile+0x47a>
			RemainBytes -= len;
1c0061fe:	40a989b3          	sub	s3,s3,a0
			pInpBuf += len;
1c006202:	9aaa                	add	s5,s5,a0
		while (RemainBytes > 0) {
1c006204:	ff3047e3          	bgtz	s3,1c0061f2 <ReadImageFromFile+0x3fe>
		for (int i=0; i < W; i++) {
1c006208:	f6042783          	lw	a5,-160(s0)
1c00620c:	02f05f63          	blez	a5,1c00624a <ReadImageFromFile+0x456>
1c006210:	f6842803          	lw	a6,-152(s0)
1c006214:	f6442503          	lw	a0,-156(s0)
1c006218:	4881                	li	a7,0
1c00621a:	411785b3          	sub	a1,a5,a7
1c00621e:	a01d                	j	1c006244 <ReadImageFromFile+0x450>
			for (int j=0; j < BytesPerPixel; j++) {
1c006220:	86aa                	mv	a3,a0
1c006222:	8742                	mv	a4,a6
1c006224:	ffed8793          	addi	a5,s11,-2
1c006228:	8385                	srli	a5,a5,0x1
1c00622a:	0785                	addi	a5,a5,1
1c00622c:	0047c0fb          	lp.setup	x1,a5,1c006234 <ReadImageFromFile+0x440>
				pInBuffer[RowSize * CurRow + i * BytesPerPixel + j] = (short int) (InputBuf[i * BytesPerPixel + j]);
1c006230:	0027160b          	p.lh	a2,2(a4!)
1c006234:	00c6912b          	p.sh	a2,2(a3!)
		for (int i=0; i < W; i++) {
1c006238:	0885                	addi	a7,a7,1
1c00623a:	9866                	add	a6,a6,s9
1c00623c:	9566                	add	a0,a0,s9
1c00623e:	15fd                	addi	a1,a1,-1
1c006240:	e191                	bnez	a1,1c006244 <ReadImageFromFile+0x450>
1c006242:	a021                	j	1c00624a <ReadImageFromFile+0x456>
			for (int j=0; j < BytesPerPixel; j++) {
1c006244:	fd704ee3          	bgtz	s7,1c006220 <ReadImageFromFile+0x42c>
1c006248:	bfc5                	j	1c006238 <ReadImageFromFile+0x444>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c00624a:	f6c42703          	lw	a4,-148(s0)
1c00624e:	0705                	addi	a4,a4,1
1c006250:	f6e42623          	sw	a4,-148(s0)
1c006254:	f6442783          	lw	a5,-156(s0)
1c006258:	97da                	add	a5,a5,s6
1c00625a:	f6f42223          	sw	a5,-156(s0)
1c00625e:	f5842783          	lw	a5,-168(s0)
1c006262:	f8e793e3          	bne	a5,a4,1c0061e8 <ReadImageFromFile+0x3f4>
	return 0;
1c006266:	4981                	li	s3,0
1c006268:	a021                	j	1c006270 <ReadImageFromFile+0x47c>
1c00626a:	4981                	li	s3,0
1c00626c:	a011                	j	1c006270 <ReadImageFromFile+0x47c>
			if (!len) return 1;
1c00626e:	4985                	li	s3,1
1c006270:	f5442103          	lw	sp,-172(s0)
	if (res) {
1c006274:	34098663          	beqz	s3,1c0065c0 <ReadImageFromFile+0x7cc>
		printf("Input ended unexpectedly or bad format, %s\n", ImageName); goto Fail;
1c006278:	85a6                	mv	a1,s1
1c00627a:	1c00f537          	lui	a0,0x1c00f
1c00627e:	fec50513          	addi	a0,a0,-20 # 1c00efec <__clz_tab+0x524>
1c006282:	6e6070ef          	jal	ra,1c00d968 <printf>
1c006286:	b12d                	j	1c005eb0 <ReadImageFromFile+0xbc>
				if (Transpose2CHW){
1c006288:	f6042783          	lw	a5,-160(s0)
1c00628c:	cfd5                	beqz	a5,1c006348 <ReadImageFromFile+0x554>
					res = ReadMultiChannelImageTranspose2CHW(File, (signed char *)InBuffer, W, H, BytesPerPixel);
1c00628e:	f5c42703          	lw	a4,-164(s0)
1c006292:	f6e42423          	sw	a4,-152(s0)
1c006296:	f7a42023          	sw	s10,-160(s0)
1c00629a:	8b62                	mv	s6,s8
{
1c00629c:	f4242c23          	sw	sp,-168(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c0062a0:	03870bb3          	mul	s7,a4,s8
	unsigned char InputBuf[RowSize];
1c0062a4:	00fb8793          	addi	a5,s7,15
1c0062a8:	c607b7b3          	p.bclr	a5,a5,3,0
1c0062ac:	40f10133          	sub	sp,sp,a5
1c0062b0:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c0062b4:	09a05463          	blez	s10,1c00633c <ReadImageFromFile+0x548>
1c0062b8:	f6442783          	lw	a5,-156(s0)
1c0062bc:	00e78db3          	add	s11,a5,a4
1c0062c0:	f6042223          	sw	zero,-156(s0)
		unsigned char *pInpBuf = InputBuf;
1c0062c4:	f6c42c83          	lw	s9,-148(s0)
		int RemainBytes = RowSize;
1c0062c8:	8ade                	mv	s5,s7
		while (RemainBytes > 0) {
1c0062ca:	01705d63          	blez	s7,1c0062e4 <ReadImageFromFile+0x4f0>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c0062ce:	8656                	mv	a2,s5
1c0062d0:	85e6                	mv	a1,s9
1c0062d2:	854a                	mv	a0,s2
1c0062d4:	5f0020ef          	jal	ra,1c0088c4 <pi_fs_read>
			if (!len) return 1;
1c0062d8:	c525                	beqz	a0,1c006340 <ReadImageFromFile+0x54c>
			RemainBytes -= len;
1c0062da:	40aa8ab3          	sub	s5,s5,a0
			pInpBuf += len;
1c0062de:	9caa                	add	s9,s9,a0
		while (RemainBytes > 0) {
1c0062e0:	ff5047e3          	bgtz	s5,1c0062ce <ReadImageFromFile+0x4da>
		for (int i=0; i < W; i++) {
1c0062e4:	f6842703          	lw	a4,-152(s0)
1c0062e8:	02e05c63          	blez	a4,1c006320 <ReadImageFromFile+0x52c>
1c0062ec:	f6c42803          	lw	a6,-148(s0)
1c0062f0:	f5c42783          	lw	a5,-164(s0)
1c0062f4:	40fd8533          	sub	a0,s11,a5
1c0062f8:	40ad85b3          	sub	a1,s11,a0
1c0062fc:	a839                	j	1c00631a <ReadImageFromFile+0x526>
			for (int j=0; j < BytesPerPixel; j++) {
1c0062fe:	86aa                	mv	a3,a0
1c006300:	8742                	mv	a4,a6
1c006302:	87e2                	mv	a5,s8
1c006304:	0047c0fb          	lp.setup	x1,a5,1c00630c <ReadImageFromFile+0x518>
				pInBuffer[ChannelSize * j + W * CurRow + i] = InputBuf[i * BytesPerPixel + j];
1c006308:	0017460b          	p.lbu	a2,1(a4!)
1c00630c:	00c6c9ab          	p.sb	a2,s3(a3!)
1c006310:	9862                	add	a6,a6,s8
1c006312:	0505                	addi	a0,a0,1
1c006314:	15fd                	addi	a1,a1,-1
1c006316:	e191                	bnez	a1,1c00631a <ReadImageFromFile+0x526>
1c006318:	a021                	j	1c006320 <ReadImageFromFile+0x52c>
			for (int j=0; j < BytesPerPixel; j++) {
1c00631a:	ff6042e3          	bgtz	s6,1c0062fe <ReadImageFromFile+0x50a>
1c00631e:	bfcd                	j	1c006310 <ReadImageFromFile+0x51c>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c006320:	f6442703          	lw	a4,-156(s0)
1c006324:	0705                	addi	a4,a4,1
1c006326:	f6e42223          	sw	a4,-156(s0)
1c00632a:	f5c42783          	lw	a5,-164(s0)
1c00632e:	9dbe                	add	s11,s11,a5
1c006330:	f6042783          	lw	a5,-160(s0)
1c006334:	f8e798e3          	bne	a5,a4,1c0062c4 <ReadImageFromFile+0x4d0>
	return 0;
1c006338:	4981                	li	s3,0
1c00633a:	a021                	j	1c006342 <ReadImageFromFile+0x54e>
1c00633c:	4981                	li	s3,0
1c00633e:	a011                	j	1c006342 <ReadImageFromFile+0x54e>
			if (!len) return 1;
1c006340:	4985                	li	s3,1
1c006342:	f5842103          	lw	sp,-168(s0)
1c006346:	b73d                	j	1c006274 <ReadImageFromFile+0x480>
					res = ReadMultiChannelImage(File, (signed char *)InBuffer, W, H, BytesPerPixel);
1c006348:	f5c42703          	lw	a4,-164(s0)
1c00634c:	f6e42423          	sw	a4,-152(s0)
1c006350:	f5a42c23          	sw	s10,-168(s0)
1c006354:	8b62                	mv	s6,s8
{
1c006356:	f4242a23          	sw	sp,-172(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c00635a:	03870db3          	mul	s11,a4,s8
1c00635e:	f5b42823          	sw	s11,-176(s0)
	unsigned char InputBuf[RowSize];
1c006362:	00fd8793          	addi	a5,s11,15
1c006366:	c607b7b3          	p.bclr	a5,a5,3,0
1c00636a:	40f10133          	sub	sp,sp,a5
1c00636e:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c006372:	09a05863          	blez	s10,1c006402 <ReadImageFromFile+0x60e>
1c006376:	f4242623          	sw	sp,-180(s0)
1c00637a:	f6442783          	lw	a5,-156(s0)
1c00637e:	41878bb3          	sub	s7,a5,s8
1c006382:	402b8bb3          	sub	s7,s7,sp
1c006386:	f6042c83          	lw	s9,-160(s0)
		unsigned char *pInpBuf = InputBuf;
1c00638a:	f6c42a83          	lw	s5,-148(s0)
		int RemainBytes = RowSize;
1c00638e:	89ee                	mv	s3,s11
		while (RemainBytes > 0) {
1c006390:	01b05d63          	blez	s11,1c0063aa <ReadImageFromFile+0x5b6>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c006394:	864e                	mv	a2,s3
1c006396:	85d6                	mv	a1,s5
1c006398:	854a                	mv	a0,s2
1c00639a:	52a020ef          	jal	ra,1c0088c4 <pi_fs_read>
			if (!len) return 1;
1c00639e:	c52d                	beqz	a0,1c006408 <ReadImageFromFile+0x614>
			RemainBytes -= len;
1c0063a0:	40a989b3          	sub	s3,s3,a0
			pInpBuf += len;
1c0063a4:	9aaa                	add	s5,s5,a0
		while (RemainBytes > 0) {
1c0063a6:	ff3047e3          	bgtz	s3,1c006394 <ReadImageFromFile+0x5a0>
		for (int i=0; i < W; i++) {
1c0063aa:	f6842703          	lw	a4,-152(s0)
1c0063ae:	02e05f63          	blez	a4,1c0063ec <ReadImageFromFile+0x5f8>
1c0063b2:	f4c42783          	lw	a5,-180(s0)
1c0063b6:	00fc05b3          	add	a1,s8,a5
1c0063ba:	f6042803          	lw	a6,-160(s0)
1c0063be:	41070533          	sub	a0,a4,a6
1c0063c2:	a821                	j	1c0063da <ReadImageFromFile+0x5e6>
				pInBuffer[RowSize * CurRow + i * BytesPerPixel + j] = InputBuf[i * BytesPerPixel + j];
1c0063c4:	0017460b          	p.lbu	a2,1(a4!)
1c0063c8:	00c680ab          	p.sb	a2,1(a3!)
1c0063cc:	17fd                	addi	a5,a5,-1
1c0063ce:	fbfd                	bnez	a5,1c0063c4 <ReadImageFromFile+0x5d0>
		for (int i=0; i < W; i++) {
1c0063d0:	0805                	addi	a6,a6,1
1c0063d2:	95e2                	add	a1,a1,s8
1c0063d4:	157d                	addi	a0,a0,-1
1c0063d6:	e111                	bnez	a0,1c0063da <ReadImageFromFile+0x5e6>
1c0063d8:	a811                	j	1c0063ec <ReadImageFromFile+0x5f8>
1c0063da:	41858733          	sub	a4,a1,s8
1c0063de:	017586b3          	add	a3,a1,s7
1c0063e2:	40e587b3          	sub	a5,a1,a4
			for (int j=0; j < BytesPerPixel; j++) {
1c0063e6:	fd604fe3          	bgtz	s6,1c0063c4 <ReadImageFromFile+0x5d0>
1c0063ea:	b7dd                	j	1c0063d0 <ReadImageFromFile+0x5dc>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c0063ec:	0c85                	addi	s9,s9,1
1c0063ee:	f5042703          	lw	a4,-176(s0)
1c0063f2:	9bba                	add	s7,s7,a4
1c0063f4:	f5842783          	lw	a5,-168(s0)
1c0063f8:	f99799e3          	bne	a5,s9,1c00638a <ReadImageFromFile+0x596>
	return 0;
1c0063fc:	f6042983          	lw	s3,-160(s0)
1c006400:	a029                	j	1c00640a <ReadImageFromFile+0x616>
1c006402:	f6042983          	lw	s3,-160(s0)
1c006406:	a011                	j	1c00640a <ReadImageFromFile+0x616>
			if (!len) return 1;
1c006408:	4985                	li	s3,1
1c00640a:	f5442103          	lw	sp,-172(s0)
1c00640e:	b59d                	j	1c006274 <ReadImageFromFile+0x480>
				if (Transpose2CHW){
1c006410:	f6042703          	lw	a4,-160(s0)
1c006414:	cf71                	beqz	a4,1c0064f0 <ReadImageFromFile+0x6fc>
					res = ReadMultiChannelImageShortTranspose2CHW(File, (short int *)InBuffer, W, H, BytesPerPixel);
1c006416:	f5c42783          	lw	a5,-164(s0)
1c00641a:	f6f42023          	sw	a5,-160(s0)
1c00641e:	f5a42c23          	sw	s10,-168(s0)
1c006422:	8b62                	mv	s6,s8
{
1c006424:	f4242a23          	sw	sp,-172(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c006428:	03878bb3          	mul	s7,a5,s8
	unsigned char InputBuf[RowSize];
1c00642c:	00fb8793          	addi	a5,s7,15
1c006430:	c607b7b3          	p.bclr	a5,a5,3,0
1c006434:	40f10133          	sub	sp,sp,a5
1c006438:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c00643c:	0ba05463          	blez	s10,1c0064e4 <ReadImageFromFile+0x6f0>
1c006440:	f5c42703          	lw	a4,-164(s0)
1c006444:	0706                	slli	a4,a4,0x1
1c006446:	f6e42423          	sw	a4,-152(s0)
1c00644a:	f6442783          	lw	a5,-156(s0)
1c00644e:	00e78db3          	add	s11,a5,a4
1c006452:	f5c42703          	lw	a4,-164(s0)
1c006456:	40e007b3          	neg	a5,a4
1c00645a:	0786                	slli	a5,a5,0x1
1c00645c:	f4f42823          	sw	a5,-176(s0)
1c006460:	0986                	slli	s3,s3,0x1
1c006462:	f6042223          	sw	zero,-156(s0)
		unsigned char *pInpBuf = InputBuf;
1c006466:	f6c42c83          	lw	s9,-148(s0)
		int RemainBytes = RowSize;
1c00646a:	8ade                	mv	s5,s7
		while (RemainBytes > 0) {
1c00646c:	01705d63          	blez	s7,1c006486 <ReadImageFromFile+0x692>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c006470:	8656                	mv	a2,s5
1c006472:	85e6                	mv	a1,s9
1c006474:	854a                	mv	a0,s2
1c006476:	44e020ef          	jal	ra,1c0088c4 <pi_fs_read>
			if (!len) return 1;
1c00647a:	c53d                	beqz	a0,1c0064e8 <ReadImageFromFile+0x6f4>
			RemainBytes -= len;
1c00647c:	40aa8ab3          	sub	s5,s5,a0
			pInpBuf += len;
1c006480:	9caa                	add	s9,s9,a0
		while (RemainBytes > 0) {
1c006482:	ff5047e3          	bgtz	s5,1c006470 <ReadImageFromFile+0x67c>
		for (int i=0; i < W; i++) {
1c006486:	f6042783          	lw	a5,-160(s0)
1c00648a:	02f05f63          	blez	a5,1c0064c8 <ReadImageFromFile+0x6d4>
1c00648e:	f6c42803          	lw	a6,-148(s0)
1c006492:	f5042703          	lw	a4,-176(s0)
1c006496:	00ed8533          	add	a0,s11,a4
1c00649a:	40ad85b3          	sub	a1,s11,a0
1c00649e:	15f9                	addi	a1,a1,-2
1c0064a0:	8185                	srli	a1,a1,0x1
1c0064a2:	0585                	addi	a1,a1,1
1c0064a4:	a839                	j	1c0064c2 <ReadImageFromFile+0x6ce>
			for (int j=0; j < BytesPerPixel; j++) {
1c0064a6:	86aa                	mv	a3,a0
1c0064a8:	8742                	mv	a4,a6
1c0064aa:	87e2                	mv	a5,s8
1c0064ac:	0047c0fb          	lp.setup	x1,a5,1c0064b4 <ReadImageFromFile+0x6c0>
				pInBuffer[ChannelSize * j + W * CurRow + i] = (short int) (InputBuf[i * BytesPerPixel + j]);
1c0064b0:	0017460b          	p.lbu	a2,1(a4!)
1c0064b4:	00c6d9ab          	p.sh	a2,s3(a3!)
1c0064b8:	9862                	add	a6,a6,s8
1c0064ba:	0509                	addi	a0,a0,2
1c0064bc:	15fd                	addi	a1,a1,-1
1c0064be:	e191                	bnez	a1,1c0064c2 <ReadImageFromFile+0x6ce>
1c0064c0:	a021                	j	1c0064c8 <ReadImageFromFile+0x6d4>
			for (int j=0; j < BytesPerPixel; j++) {
1c0064c2:	ff6042e3          	bgtz	s6,1c0064a6 <ReadImageFromFile+0x6b2>
1c0064c6:	bfcd                	j	1c0064b8 <ReadImageFromFile+0x6c4>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c0064c8:	f6442783          	lw	a5,-156(s0)
1c0064cc:	0785                	addi	a5,a5,1
1c0064ce:	f6f42223          	sw	a5,-156(s0)
1c0064d2:	f6842703          	lw	a4,-152(s0)
1c0064d6:	9dba                	add	s11,s11,a4
1c0064d8:	f5842703          	lw	a4,-168(s0)
1c0064dc:	f8f715e3          	bne	a4,a5,1c006466 <ReadImageFromFile+0x672>
	return 0;
1c0064e0:	4981                	li	s3,0
1c0064e2:	a021                	j	1c0064ea <ReadImageFromFile+0x6f6>
1c0064e4:	4981                	li	s3,0
1c0064e6:	a011                	j	1c0064ea <ReadImageFromFile+0x6f6>
			if (!len) return 1;
1c0064e8:	4985                	li	s3,1
1c0064ea:	f5442103          	lw	sp,-172(s0)
1c0064ee:	b359                	j	1c006274 <ReadImageFromFile+0x480>
					res = ReadMultiChannelImageShort(File, (short int *)InBuffer, W, H, BytesPerPixel);
1c0064f0:	f5c42783          	lw	a5,-164(s0)
1c0064f4:	f6f42423          	sw	a5,-152(s0)
1c0064f8:	f5a42c23          	sw	s10,-168(s0)
1c0064fc:	8b62                	mv	s6,s8
{
1c0064fe:	f4242a23          	sw	sp,-172(s0)
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c006502:	03878db3          	mul	s11,a5,s8
	unsigned char InputBuf[RowSize];
1c006506:	00fd8793          	addi	a5,s11,15
1c00650a:	c607b7b3          	p.bclr	a5,a5,3,0
1c00650e:	40f10133          	sub	sp,sp,a5
1c006512:	f6242623          	sw	sp,-148(s0)
	for (int CurRow=0; CurRow < H; CurRow++) {
1c006516:	09a05863          	blez	s10,1c0065a6 <ReadImageFromFile+0x7b2>
1c00651a:	001d9713          	slli	a4,s11,0x1
1c00651e:	f4e42823          	sw	a4,-176(s0)
1c006522:	001c1b93          	slli	s7,s8,0x1
1c006526:	f6042c83          	lw	s9,-160(s0)
		unsigned char *pInpBuf = InputBuf;
1c00652a:	f6c42a83          	lw	s5,-148(s0)
		int RemainBytes = RowSize;
1c00652e:	89ee                	mv	s3,s11
		while (RemainBytes > 0) {
1c006530:	01b05d63          	blez	s11,1c00654a <ReadImageFromFile+0x756>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c006534:	864e                	mv	a2,s3
1c006536:	85d6                	mv	a1,s5
1c006538:	854a                	mv	a0,s2
1c00653a:	38a020ef          	jal	ra,1c0088c4 <pi_fs_read>
			if (!len) return 1;
1c00653e:	c53d                	beqz	a0,1c0065ac <ReadImageFromFile+0x7b8>
			RemainBytes -= len;
1c006540:	40a989b3          	sub	s3,s3,a0
			pInpBuf += len;
1c006544:	9aaa                	add	s5,s5,a0
		while (RemainBytes > 0) {
1c006546:	ff3047e3          	bgtz	s3,1c006534 <ReadImageFromFile+0x740>
		for (int i=0; i < W; i++) {
1c00654a:	f6842703          	lw	a4,-152(s0)
1c00654e:	02e05d63          	blez	a4,1c006588 <ReadImageFromFile+0x794>
1c006552:	f6c42803          	lw	a6,-148(s0)
1c006556:	f6442503          	lw	a0,-156(s0)
1c00655a:	f6042883          	lw	a7,-160(s0)
1c00655e:	411705b3          	sub	a1,a4,a7
1c006562:	a005                	j	1c006582 <ReadImageFromFile+0x78e>
			for (int j=0; j < BytesPerPixel; j++) {
1c006564:	86aa                	mv	a3,a0
1c006566:	8742                	mv	a4,a6
1c006568:	87e2                	mv	a5,s8
1c00656a:	0047c0fb          	lp.setup	x1,a5,1c006572 <ReadImageFromFile+0x77e>
				pInBuffer[RowSize * CurRow + i * BytesPerPixel + j] = (short int) (InputBuf[i * BytesPerPixel + j]);
1c00656e:	0017460b          	p.lbu	a2,1(a4!)
1c006572:	00c6912b          	p.sh	a2,2(a3!)
		for (int i=0; i < W; i++) {
1c006576:	0885                	addi	a7,a7,1
1c006578:	9862                	add	a6,a6,s8
1c00657a:	955e                	add	a0,a0,s7
1c00657c:	15fd                	addi	a1,a1,-1
1c00657e:	e191                	bnez	a1,1c006582 <ReadImageFromFile+0x78e>
1c006580:	a021                	j	1c006588 <ReadImageFromFile+0x794>
			for (int j=0; j < BytesPerPixel; j++) {
1c006582:	ff6041e3          	bgtz	s6,1c006564 <ReadImageFromFile+0x770>
1c006586:	bfc5                	j	1c006576 <ReadImageFromFile+0x782>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c006588:	0c85                	addi	s9,s9,1
1c00658a:	f6442783          	lw	a5,-156(s0)
1c00658e:	f5042703          	lw	a4,-176(s0)
1c006592:	97ba                	add	a5,a5,a4
1c006594:	f6f42223          	sw	a5,-156(s0)
1c006598:	f5842783          	lw	a5,-168(s0)
1c00659c:	f99797e3          	bne	a5,s9,1c00652a <ReadImageFromFile+0x736>
	return 0;
1c0065a0:	f6042983          	lw	s3,-160(s0)
1c0065a4:	a029                	j	1c0065ae <ReadImageFromFile+0x7ba>
1c0065a6:	f6042983          	lw	s3,-160(s0)
1c0065aa:	a011                	j	1c0065ae <ReadImageFromFile+0x7ba>
			if (!len) return 1;
1c0065ac:	4985                	li	s3,1
1c0065ae:	f5442103          	lw	sp,-172(s0)
1c0065b2:	b1c9                	j	1c006274 <ReadImageFromFile+0x480>
	return 0;
1c0065b4:	4981                	li	s3,0
1c0065b6:	a011                	j	1c0065ba <ReadImageFromFile+0x7c6>
			if (!len) return 1;
1c0065b8:	4985                	li	s3,1
1c0065ba:	f5842103          	lw	sp,-168(s0)
				break;
1c0065be:	b95d                	j	1c006274 <ReadImageFromFile+0x480>
	__CLOSE(File);
1c0065c0:	854a                	mv	a0,s2
1c0065c2:	2f2020ef          	jal	ra,1c0088b4 <pi_fs_close>
	__FS_DEINIT(fs);
1c0065c6:	fb440513          	addi	a0,s0,-76
1c0065ca:	2da020ef          	jal	ra,1c0088a4 <pi_fs_unmount>
	PRINTF("Image %s, [W: %d, H: %d], Bytes per pixel %d, Size: %d bytes, Loaded successfully\n", ImageName, W, H, BytesPerPixel, Size);
1c0065ce:	87d2                	mv	a5,s4
1c0065d0:	8762                	mv	a4,s8
1c0065d2:	86ea                	mv	a3,s10
1c0065d4:	f5c42603          	lw	a2,-164(s0)
1c0065d8:	85a6                	mv	a1,s1
1c0065da:	1c00f537          	lui	a0,0x1c00f
1c0065de:	01850513          	addi	a0,a0,24 # 1c00f018 <__clz_tab+0x550>
1c0065e2:	386070ef          	jal	ra,1c00d968 <printf>
	return 0;
1c0065e6:	b0e5                	j	1c005ece <ReadImageFromFile+0xda>

1c0065e8 <KerReductIO_Compact_SQ8_1>:
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	for (int c=First; c<Last; c++) KerReduct_Activation_SQ8(In+Size*c, Out+Size*c, Size, Scale[c], ScaleN[c], ACT_LEAKYRELU, ActScale, ActScaleN, A0, B0, C0);
	gap_waitbarrier(0);
}
1c0065e8:	f1402773          	csrr	a4,mhartid
1c0065ec:	c8071733          	p.extractu	a4,a4,4,0
1c0065f0:	f83637b3          	p.bclr	a5,a2,28,3
1c0065f4:	00f037b3          	snez	a5,a5
1c0065f8:	00365813          	srli	a6,a2,0x3
1c0065fc:	97c2                	add	a5,a5,a6
1c0065fe:	02f70733          	mul	a4,a4,a5
1c006602:	00f70f33          	add	t5,a4,a5
1c006606:	04cf4f33          	p.min	t5,t5,a2
1c00660a:	40ef0f33          	sub	t5,t5,a4
1c00660e:	10d65363          	ble	a3,a2,1c006714 <KerReductIO_Compact_SQ8_1+0x12c>
1c006612:	7139                	addi	sp,sp,-64
1c006614:	de22                	sw	s0,60(sp)
1c006616:	dc26                	sw	s1,56(sp)
1c006618:	da4a                	sw	s2,52(sp)
1c00661a:	d84e                	sw	s3,48(sp)
1c00661c:	d652                	sw	s4,44(sp)
1c00661e:	d456                	sw	s5,40(sp)
1c006620:	d25a                	sw	s6,36(sp)
1c006622:	d05e                	sw	s7,32(sp)
1c006624:	ce62                	sw	s8,28(sp)
1c006626:	cc66                	sw	s9,24(sp)
1c006628:	ca6a                	sw	s10,20(sp)
1c00662a:	c86e                	sw	s11,16(sp)
1c00662c:	8bb2                	mv	s7,a2
1c00662e:	040f6f33          	p.max	t5,t5,zero
1c006632:	00261b13          	slli	s6,a2,0x2
1c006636:	ffff0793          	addi	a5,t5,-1
1c00663a:	97ba                	add	a5,a5,a4
1c00663c:	00fb0833          	add	a6,s6,a5
1c006640:	95c2                	add	a1,a1,a6
1c006642:	97b2                	add	a5,a5,a2
1c006644:	953e                	add	a0,a0,a5
1c006646:	c40f39b3          	p.bclr	s3,t5,2,0
1c00664a:	41e989b3          	sub	s3,s3,t5
1c00664e:	8fb2                	mv	t6,a2
1c006650:	4285                	li	t0,1
1c006652:	41e282b3          	sub	t0,t0,t5
1c006656:	40e283b3          	sub	t2,t0,a4
1c00665a:	4d9d                	li	s11,7
1c00665c:	4415                	li	s0,5
1c00665e:	41e40433          	sub	s0,s0,t5
1c006662:	0985                	addi	s3,s3,1
1c006664:	004f7d13          	andi	s10,t5,4
1c006668:	c40f3ab3          	p.bclr	s5,t5,2,0
1c00666c:	9aba                	add	s5,s5,a4
1c00666e:	002f7c93          	andi	s9,t5,2
1c006672:	c20f37b3          	p.bclr	a5,t5,1,0
1c006676:	97ba                	add	a5,a5,a4
1c006678:	c63e                	sw	a5,12(sp)
1c00667a:	fc1f3c33          	p.bclr	s8,t5,30,1
1c00667e:	00204a37          	lui	s4,0x204
1c006682:	200a0a13          	addi	s4,s4,512 # 204200 <__L2+0x184200>
1c006686:	a801                	j	1c006696 <KerReductIO_Compact_SQ8_1+0xae>
1c006688:	01ca6783          	p.elw	a5,28(s4)
1c00668c:	9fb2                	add	t6,t6,a2
1c00668e:	95da                	add	a1,a1,s6
1c006690:	955e                	add	a0,a0,s7
1c006692:	06dfd363          	ble	a3,t6,1c0066f8 <KerReductIO_Compact_SQ8_1+0x110>
1c006696:	00b38933          	add	s2,t2,a1
1c00669a:	00a384b3          	add	s1,t2,a0
1c00669e:	03edf963          	bleu	t5,s11,1c0066d0 <KerReductIO_Compact_SQ8_1+0xe8>
1c0066a2:	00a28333          	add	t1,t0,a0
1c0066a6:	00b408b3          	add	a7,s0,a1
1c0066aa:	00a40833          	add	a6,s0,a0
1c0066ae:	00b28733          	add	a4,t0,a1
1c0066b2:	405987b3          	sub	a5,s3,t0
1c0066b6:	17e1                	addi	a5,a5,-8
1c0066b8:	838d                	srli	a5,a5,0x3
1c0066ba:	0785                	addi	a5,a5,1
1c0066bc:	0087c0fb          	lp.setup	x1,a5,1c0066cc <KerReductIO_Compact_SQ8_1+0xe4>
1c0066c0:	0088ae0b          	p.lw	t3,8(a7!) # 1e6008 <__L2+0x166008>
1c0066c4:	00872e8b          	p.lw	t4,8(a4!)
1c0066c8:	01d3242b          	p.sw	t4,8(t1!)
1c0066cc:	01c8242b          	p.sw	t3,8(a6!) # 1e6008 <__L2+0x166008>
1c0066d0:	000d0663          	beqz	s10,1c0066dc <KerReductIO_Compact_SQ8_1+0xf4>
1c0066d4:	21597783          	p.lw	a5,s5(s2)
1c0066d8:	00f4eaa3          	p.sw	a5,s5(s1)
1c0066dc:	000c8763          	beqz	s9,1c0066ea <KerReductIO_Compact_SQ8_1+0x102>
1c0066e0:	4732                	lw	a4,12(sp)
1c0066e2:	50e97783          	p.lhu	a5,a4(s2)
1c0066e6:	00f4d723          	p.sh	a5,a4(s1)
1c0066ea:	f80c0fe3          	beqz	s8,1c006688 <KerReductIO_Compact_SQ8_1+0xa0>
1c0066ee:	0005c783          	lbu	a5,0(a1)
1c0066f2:	00f50023          	sb	a5,0(a0)
1c0066f6:	bf49                	j	1c006688 <KerReductIO_Compact_SQ8_1+0xa0>
1c0066f8:	5472                	lw	s0,60(sp)
1c0066fa:	54e2                	lw	s1,56(sp)
1c0066fc:	5952                	lw	s2,52(sp)
1c0066fe:	59c2                	lw	s3,48(sp)
1c006700:	5a32                	lw	s4,44(sp)
1c006702:	5aa2                	lw	s5,40(sp)
1c006704:	5b12                	lw	s6,36(sp)
1c006706:	5b82                	lw	s7,32(sp)
1c006708:	4c72                	lw	s8,28(sp)
1c00670a:	4ce2                	lw	s9,24(sp)
1c00670c:	4d52                	lw	s10,20(sp)
1c00670e:	4dc2                	lw	s11,16(sp)
1c006710:	6121                	addi	sp,sp,64
1c006712:	8082                	ret
1c006714:	8082                	ret

1c006716 <KerParReduct_CC_SQ8>:
1c006716:	00855683          	lhu	a3,8(a0)
1c00671a:	f1402773          	csrr	a4,mhartid
1c00671e:	c8071733          	p.extractu	a4,a4,4,0
1c006722:	f836b7b3          	p.bclr	a5,a3,28,3
1c006726:	00f037b3          	snez	a5,a5
1c00672a:	0036d613          	srli	a2,a3,0x3
1c00672e:	97b2                	add	a5,a5,a2
1c006730:	02f70733          	mul	a4,a4,a5
1c006734:	00f70833          	add	a6,a4,a5
1c006738:	04d84833          	p.min	a6,a6,a3
1c00673c:	00052e03          	lw	t3,0(a0)
1c006740:	01052e83          	lw	t4,16(a0)
1c006744:	01452f03          	lw	t5,20(a0)
1c006748:	00452303          	lw	t1,4(a0)
1c00674c:	00a55883          	lhu	a7,10(a0)
1c006750:	00c55783          	lhu	a5,12(a0)
1c006754:	02f888b3          	mul	a7,a7,a5
1c006758:	05077563          	bleu	a6,a4,1c0067a2 <KerParReduct_CC_SQ8+0x8c>
1c00675c:	9f3a                	add	t5,t5,a4
1c00675e:	00289f93          	slli	t6,a7,0x2
1c006762:	43f70e33          	p.mac	t3,a4,t6
1c006766:	43170333          	p.mac	t1,a4,a7
1c00676a:	9eba                	add	t4,t4,a4
1c00676c:	40e80833          	sub	a6,a6,a4
1c006770:	0188407b          	lp.setup	x0,a6,1c0067a0 <KerParReduct_CC_SQ8+0x8a>
1c006774:	001ec50b          	p.lbu	a0,1(t4!)
1c006778:	001f468b          	p.lbu	a3,1(t5!)
1c00677c:	02088163          	beqz	a7,1c00679e <KerParReduct_CC_SQ8+0x88>
1c006780:	859a                	mv	a1,t1
1c006782:	8672                	mv	a2,t3
1c006784:	8746                	mv	a4,a7
1c006786:	00a740fb          	lp.setup	x1,a4,1c00679a <KerParReduct_CC_SQ8+0x84>
1c00678a:	0046278b          	p.lw	a5,4(a2!)
1c00678e:	02a787b3          	mul	a5,a5,a0
1c006792:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c006796:	148797b3          	p.clip	a5,a5,8
1c00679a:	00f580ab          	p.sb	a5,1(a1!)
1c00679e:	9e7e                	add	t3,t3,t6
1c0067a0:	9346                	add	t1,t1,a7
1c0067a2:	002047b7          	lui	a5,0x204
1c0067a6:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0067aa:	01c7e703          	p.elw	a4,28(a5)
1c0067ae:	8082                	ret

1c0067b0 <KerParReductIO_CC_SQ8>:
*/
extern void DumpFeaturePlanes(char *Mess, int DataSize, void *Plane, unsigned int NPlanes, unsigned int W, unsigned int Wmax, unsigned int H, unsigned int Hmax);

void KerParReductIO_CC_SQ8(KerConvLinReduct_SQ8_T *Arg)

{
1c0067b0:	1141                	addi	sp,sp,-16
1c0067b2:	c606                	sw	ra,12(sp)
	unsigned int S = Arg->Feat;
1c0067b4:	00855703          	lhu	a4,8(a0)
	unsigned int Size = Arg->W*Arg->H;
1c0067b8:	00a55783          	lhu	a5,10(a0)
1c0067bc:	00c55603          	lhu	a2,12(a0)
1c0067c0:	02c78633          	mul	a2,a5,a2
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0067c4:	f14027f3          	csrr	a5,mhartid
1c0067c8:	c80797b3          	p.extractu	a5,a5,4,0
        Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0067cc:	f83732b3          	p.bclr	t0,a4,28,3
1c0067d0:	005032b3          	snez	t0,t0
1c0067d4:	00375693          	srli	a3,a4,0x3
1c0067d8:	92b6                	add	t0,t0,a3
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0067da:	025787b3          	mul	a5,a5,t0
1c0067de:	00578333          	add	t1,a5,t0
1c0067e2:	04e34333          	p.min	t1,t1,a4
	int * __restrict__ In = (int *__restrict__) Arg->In;
1c0067e6:	00052083          	lw	ra,0(a0)
1c0067ea:	00261393          	slli	t2,a2,0x2
	signed char *__restrict__ Out = (signed char *__restrict__)(In+First*Size);
1c0067ee:	8e06                	mv	t3,ra
1c0067f0:	42f38e33          	p.mac	t3,t2,a5
	unsigned char * __restrict__ Scale = (unsigned char *__restrict__) Arg->Scale;
1c0067f4:	01052f03          	lw	t5,16(a0)
	unsigned char * __restrict__ ScaleN = (unsigned char *__restrict__) Arg->ScaleN;
1c0067f8:	01452f83          	lw	t6,20(a0)
	signed char * __restrict__ Infos = (signed char *__restrict__) Arg->Infos;
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	S = Size*Max(0, Last-First);
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c0067fc:	0267ff63          	bleu	t1,a5,1c00683a <KerParReductIO_CC_SQ8+0x8a>
1c006800:	9fbe                	add	t6,t6,a5
1c006802:	8ef2                	mv	t4,t3
1c006804:	9f3e                	add	t5,t5,a5
1c006806:	40f30333          	sub	t1,t1,a5
1c00680a:	0173407b          	lp.setup	x0,t1,1c006838 <KerParReductIO_CC_SQ8+0x88>
1c00680e:	001f488b          	p.lbu	a7,1(t5!)
1c006812:	001fc68b          	p.lbu	a3,1(t6!)
        for (unsigned int i=0; i<N; i++) {
1c006816:	c205                	beqz	a2,1c006836 <KerParReductIO_CC_SQ8+0x86>
1c006818:	8872                	mv	a6,t3
1c00681a:	85f6                	mv	a1,t4
1c00681c:	8732                	mv	a4,a2
1c00681e:	00a740fb          	lp.setup	x1,a4,1c006832 <KerParReductIO_CC_SQ8+0x82>
                int Acc0 = gap_clip(AT_SCALE(In[i], Scale, ScaleN), 7);
1c006822:	0045a78b          	p.lw	a5,4(a1!)
1c006826:	031787b3          	mul	a5,a5,a7
1c00682a:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c00682e:	148797b3          	p.clip	a5,a5,8
                Out[i] = Acc0;
1c006832:	00f800ab          	p.sb	a5,1(a6!)
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c006836:	9e32                	add	t3,t3,a2
1c006838:	9e9e                	add	t4,t4,t2
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00683a:	002047b7          	lui	a5,0x204
1c00683e:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006842:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	// KerReductIO_Compact_SQ8(In, S, CoreId, ChunkCell*Size);
	KerReductIO_Compact_SQ8_1((signed char *__restrict__)In, (signed char *__restrict__)In, Size*ChunkCell, Size * Arg->Feat);
1c006846:	00855683          	lhu	a3,8(a0)
1c00684a:	02c686b3          	mul	a3,a3,a2
1c00684e:	02560633          	mul	a2,a2,t0
1c006852:	8586                	mv	a1,ra
1c006854:	8506                	mv	a0,ra
1c006856:	3b49                	jal	1c0065e8 <KerReductIO_Compact_SQ8_1>
}
1c006858:	40b2                	lw	ra,12(sp)
1c00685a:	0141                	addi	sp,sp,16
1c00685c:	8082                	ret

1c00685e <KerParSetBiasB32_SQ8>:
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
		for (int j=4*(InDim/4); j<InDim; j++) Acc += In[j]*Weights[i*InDim+j];
		Out[i] = AT_CLIP_POS(AT_SCALE(Acc, Scale[i], ScaleN[i]), A0);
	}
	gap_waitbarrier(0);
}
1c00685e:	4118                	lw	a4,0(a0)
1c006860:	00455303          	lhu	t1,4(a0)
1c006864:	00655883          	lhu	a7,6(a0)
1c006868:	00855603          	lhu	a2,8(a0)
1c00686c:	00c52803          	lw	a6,12(a0)
1c006870:	01054e03          	lbu	t3,16(a0)
1c006874:	f14026f3          	csrr	a3,mhartid
1c006878:	c80696b3          	p.extractu	a3,a3,4,0
1c00687c:	f83637b3          	p.bclr	a5,a2,28,3
1c006880:	00f037b3          	snez	a5,a5
1c006884:	00365593          	srli	a1,a2,0x3
1c006888:	97ae                	add	a5,a5,a1
1c00688a:	02f686b3          	mul	a3,a3,a5
1c00688e:	97b6                	add	a5,a5,a3
1c006890:	04c7c7b3          	p.min	a5,a5,a2
1c006894:	06f6f863          	bleu	a5,a3,1c006904 <KerParSetBiasB32_SQ8+0xa6>
1c006898:	03130333          	mul	t1,t1,a7
1c00689c:	00231f93          	slli	t6,t1,0x2
1c0068a0:	00135313          	srli	t1,t1,0x1
1c0068a4:	ffcf8893          	addi	a7,t6,-4
1c0068a8:	00269613          	slli	a2,a3,0x2
1c0068ac:	8546                	mv	a0,a7
1c0068ae:	42df8533          	p.mac	a0,t6,a3
1c0068b2:	953a                	add	a0,a0,a4
1c0068b4:	00279593          	slli	a1,a5,0x2
1c0068b8:	9832                	add	a6,a6,a2
1c0068ba:	00331f13          	slli	t5,t1,0x3
1c0068be:	411f0f33          	sub	t5,t5,a7
1c0068c2:	4e91                	li	t4,4
1c0068c4:	411e8eb3          	sub	t4,t4,a7
1c0068c8:	8d91                	sub	a1,a1,a2
1c0068ca:	15f1                	addi	a1,a1,-4
1c0068cc:	8189                	srli	a1,a1,0x2
1c0068ce:	0585                	addi	a1,a1,1
1c0068d0:	0195c07b          	lp.setup	x0,a1,1c006902 <KerParSetBiasB32_SQ8+0xa4>
1c0068d4:	0048270b          	p.lw	a4,4(a6!)
1c0068d8:	01c71733          	sll	a4,a4,t3
1c0068dc:	02030163          	beqz	t1,1c0068fe <KerParSetBiasB32_SQ8+0xa0>
1c0068e0:	00ae8633          	add	a2,t4,a0
1c0068e4:	411506b3          	sub	a3,a0,a7
1c0068e8:	01e887b3          	add	a5,a7,t5
1c0068ec:	17e1                	addi	a5,a5,-8
1c0068ee:	838d                	srli	a5,a5,0x3
1c0068f0:	0785                	addi	a5,a5,1
1c0068f2:	0047c0fb          	lp.setup	x1,a5,1c0068fa <KerParSetBiasB32_SQ8+0x9c>
1c0068f6:	00e6a42b          	p.sw	a4,8(a3!)
1c0068fa:	00e6242b          	p.sw	a4,8(a2!)
1c0068fe:	00e56fab          	p.sw	a4,t6(a0!)
1c006902:	0001                	nop
1c006904:	002047b7          	lui	a5,0x204
1c006908:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00690c:	01c7e703          	p.elw	a4,28(a5)
1c006910:	8082                	ret

1c006912 <KerParLinearLayer_SQ8>:
1c006912:	7179                	addi	sp,sp,-48
1c006914:	d622                	sw	s0,44(sp)
1c006916:	d426                	sw	s1,40(sp)
1c006918:	d24a                	sw	s2,36(sp)
1c00691a:	d04e                	sw	s3,32(sp)
1c00691c:	ce52                	sw	s4,28(sp)
1c00691e:	cc56                	sw	s5,24(sp)
1c006920:	ca5a                	sw	s6,20(sp)
1c006922:	c85e                	sw	s7,16(sp)
1c006924:	c662                	sw	s8,12(sp)
1c006926:	c466                	sw	s9,8(sp)
1c006928:	4104                	lw	s1,0(a0)
1c00692a:	01255603          	lhu	a2,18(a0)
1c00692e:	01055283          	lhu	t0,16(a0)
1c006932:	01455683          	lhu	a3,20(a0)
1c006936:	00452a03          	lw	s4,4(a0)
1c00693a:	00c52903          	lw	s2,12(a0)
1c00693e:	f1402773          	csrr	a4,mhartid
1c006942:	c8071733          	p.extractu	a4,a4,4,0
1c006946:	f836b7b3          	p.bclr	a5,a3,28,3
1c00694a:	00f037b3          	snez	a5,a5
1c00694e:	0036d593          	srli	a1,a3,0x3
1c006952:	97ae                	add	a5,a5,a1
1c006954:	02f70733          	mul	a4,a4,a5
1c006958:	97ba                	add	a5,a5,a4
1c00695a:	04d7c7b3          	p.min	a5,a5,a3
1c00695e:	0cf77863          	bleu	a5,a4,1c006a2e <KerParLinearLayer_SQ8+0x11c>
1c006962:	8396                	mv	t2,t0
1c006964:	00271693          	slli	a3,a4,0x2
1c006968:	8cb2                	mv	s9,a2
1c00696a:	8fd2                	mv	t6,s4
1c00696c:	42e60fb3          	p.mac	t6,a2,a4
1c006970:	00279f13          	slli	t5,a5,0x2
1c006974:	9936                	add	s2,s2,a3
1c006976:	89a6                	mv	s3,s1
1c006978:	c402bb33          	p.bclr	s6,t0,2,0
1c00697c:	9b26                	add	s6,s6,s1
1c00697e:	4c1d                	li	s8,7
1c006980:	0042fb93          	andi	s7,t0,4
1c006984:	c202bab3          	p.bclr	s5,t0,1,0
1c006988:	1af1                	addi	s5,s5,-4
1c00698a:	c202b2b3          	p.bclr	t0,t0,1,0
1c00698e:	40df0f33          	sub	t5,t5,a3
1c006992:	1f71                	addi	t5,t5,-4
1c006994:	002f5f13          	srli	t5,t5,0x2
1c006998:	0f05                	addi	t5,t5,1
1c00699a:	a83d                	j	1c0069d8 <KerParLinearLayer_SQ8+0xc6>
1c00699c:	0272f763          	bleu	t2,t0,1c0069ca <KerParLinearLayer_SQ8+0xb8>
1c0069a0:	005486b3          	add	a3,s1,t0
1c0069a4:	9816                	add	a6,a6,t0
1c0069a6:	9852                	add	a6,a6,s4
1c0069a8:	40d98733          	sub	a4,s3,a3
1c0069ac:	971e                	add	a4,a4,t2
1c0069ae:	41348633          	sub	a2,s1,s3
1c0069b2:	9616                	add	a2,a2,t0
1c0069b4:	0605                	addi	a2,a2,1
1c0069b6:	06c3ea63          	bltu	t2,a2,1c006a2a <KerParLinearLayer_SQ8+0x118>
1c0069ba:	006740fb          	lp.setup	x1,a4,1c0069c6 <KerParLinearLayer_SQ8+0xb4>
1c0069be:	0016858b          	p.lb	a1,1(a3!)
1c0069c2:	0018060b          	p.lb	a2,1(a6!)
1c0069c6:	42c587b3          	p.mac	a5,a1,a2
1c0069ca:	fef92e23          	sw	a5,-4(s2)
1c0069ce:	9fe6                	add	t6,t6,s9
1c0069d0:	1f7d                	addi	t5,t5,-1
1c0069d2:	000f1363          	bnez	t5,1c0069d8 <KerParLinearLayer_SQ8+0xc6>
1c0069d6:	a8a1                	j	1c006a2e <KerParLinearLayer_SQ8+0x11c>
1c0069d8:	414f8833          	sub	a6,t6,s4
1c0069dc:	847e                	mv	s0,t6
1c0069de:	0049278b          	p.lw	a5,4(s2!)
1c0069e2:	027c7b63          	bleu	t2,s8,1c006a18 <KerParLinearLayer_SQ8+0x106>
1c0069e6:	00448e93          	addi	t4,s1,4
1c0069ea:	004f8e13          	addi	t3,t6,4
1c0069ee:	837e                	mv	t1,t6
1c0069f0:	88ce                	mv	a7,s3
1c0069f2:	413b0533          	sub	a0,s6,s3
1c0069f6:	1561                	addi	a0,a0,-8
1c0069f8:	810d                	srli	a0,a0,0x3
1c0069fa:	0505                	addi	a0,a0,1
1c0069fc:	00c540fb          	lp.setup	x1,a0,1c006a14 <KerParLinearLayer_SQ8+0x102>
1c006a00:	008ea68b          	p.lw	a3,8(t4!)
1c006a04:	008e270b          	p.lw	a4,8(t3!)
1c006a08:	0088a58b          	p.lw	a1,8(a7!)
1c006a0c:	0083260b          	p.lw	a2,8(t1!)
1c006a10:	b8c597d7          	pv.sdotsp.b	a5,a1,a2
1c006a14:	b8e697d7          	pv.sdotsp.b	a5,a3,a4
1c006a18:	f80b82e3          	beqz	s7,1c00699c <KerParLinearLayer_SQ8+0x8a>
1c006a1c:	2154f703          	p.lw	a4,s5(s1)
1c006a20:	21547403          	p.lw	s0,s5(s0)
1c006a24:	b88717d7          	pv.sdotsp.b	a5,a4,s0
1c006a28:	bf95                	j	1c00699c <KerParLinearLayer_SQ8+0x8a>
1c006a2a:	4705                	li	a4,1
1c006a2c:	b779                	j	1c0069ba <KerParLinearLayer_SQ8+0xa8>
1c006a2e:	002047b7          	lui	a5,0x204
1c006a32:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006a36:	01c7e703          	p.elw	a4,28(a5)
1c006a3a:	5432                	lw	s0,44(sp)
1c006a3c:	54a2                	lw	s1,40(sp)
1c006a3e:	5912                	lw	s2,36(sp)
1c006a40:	5982                	lw	s3,32(sp)
1c006a42:	4a72                	lw	s4,28(sp)
1c006a44:	4ae2                	lw	s5,24(sp)
1c006a46:	4b52                	lw	s6,20(sp)
1c006a48:	4bc2                	lw	s7,16(sp)
1c006a4a:	4c32                	lw	s8,12(sp)
1c006a4c:	4ca2                	lw	s9,8(sp)
1c006a4e:	6145                	addi	sp,sp,48
1c006a50:	8082                	ret

1c006a52 <KerParLinearLayerFullFeatB32_SQ8>:

/* 32b Bias */
void KerParLinearLayerFullFeatB32_SQ8(KerLinear_SQ8_T *Arg)

{
1c006a52:	7139                	addi	sp,sp,-64
1c006a54:	de22                	sw	s0,60(sp)
1c006a56:	dc26                	sw	s1,56(sp)
1c006a58:	da4a                	sw	s2,52(sp)
1c006a5a:	d84e                	sw	s3,48(sp)
1c006a5c:	d652                	sw	s4,44(sp)
1c006a5e:	d456                	sw	s5,40(sp)
1c006a60:	d25a                	sw	s6,36(sp)
1c006a62:	d05e                	sw	s7,32(sp)
1c006a64:	ce62                	sw	s8,28(sp)
1c006a66:	cc66                	sw	s9,24(sp)
1c006a68:	ca6a                	sw	s10,20(sp)
1c006a6a:	c86e                	sw	s11,16(sp)
	signed char * __restrict__ In = Arg->In;
1c006a6c:	4100                	lw	s0,0(a0)
	unsigned int InDim = Arg->InDim, OutDim = Arg->OutDim;
1c006a6e:	01055283          	lhu	t0,16(a0)
1c006a72:	01455683          	lhu	a3,20(a0)
	const signed char * __restrict__ Weights = Arg->Weights;
1c006a76:	00452b03          	lw	s6,4(a0)
	const int * __restrict__ Bias = Arg->Bias;
1c006a7a:	00852903          	lw	s2,8(a0)
	unsigned int NormBias = ((unsigned char *)Arg->Infos)[AT_INF_BIASN];
1c006a7e:	511c                	lw	a5,32(a0)
1c006a80:	0057cc83          	lbu	s9,5(a5)
	unsigned char *Scale = Arg->Scale;
1c006a84:	01852a83          	lw	s5,24(a0)
	unsigned char *ScaleN = Arg->ScaleN;
1c006a88:	01c52a03          	lw	s4,28(a0)
	signed char * __restrict__ Out = (signed char * __restrict__) Arg->Out;
1c006a8c:	00c52983          	lw	s3,12(a0)

	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c006a90:	f1402773          	csrr	a4,mhartid
1c006a94:	c8071733          	p.extractu	a4,a4,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c006a98:	f836b7b3          	p.bclr	a5,a3,28,3
1c006a9c:	00f037b3          	snez	a5,a5
1c006aa0:	0036d613          	srli	a2,a3,0x3
1c006aa4:	97b2                	add	a5,a5,a2
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c006aa6:	02f70733          	mul	a4,a4,a5
1c006aaa:	97ba                	add	a5,a5,a4
1c006aac:	04d7c7b3          	p.min	a5,a5,a3
	v4s * __restrict__ VectIn = (v4s *) In;

	for (int i=First; i<Last; i++) {
1c006ab0:	0ef77463          	bleu	a5,a4,1c006b98 <KerParLinearLayerFullFeatB32_SQ8+0x146>
1c006ab4:	8f96                	mv	t6,t0
1c006ab6:	00271693          	slli	a3,a4,0x2
1c006aba:	9aba                	add	s5,s5,a4
1c006abc:	9a3a                	add	s4,s4,a4
1c006abe:	99ba                	add	s3,s3,a4
1c006ac0:	8f5a                	mv	t5,s6
1c006ac2:	42e28f33          	p.mac	t5,t0,a4
1c006ac6:	078a                	slli	a5,a5,0x2
1c006ac8:	9936                	add	s2,s2,a3
1c006aca:	84a2                	mv	s1,s0
1c006acc:	c402bc33          	p.bclr	s8,t0,2,0
1c006ad0:	9c22                	add	s8,s8,s0
		v4s * __restrict__ W = (v4s *) (&Weights[i*InDim]);
		int Acc = AT_LSHIFT(Bias[i], NormBias);
		for (int j=0; j<(InDim/(4*2)); j++) {
1c006ad2:	4d9d                	li	s11,7
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
			v4s C0=W[2*j], C1=W[2*j+1];
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
		}
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c006ad4:	0042fd13          	andi	s10,t0,4
1c006ad8:	c202bbb3          	p.bclr	s7,t0,1,0
1c006adc:	1bf1                	addi	s7,s7,-4
		for (int j=4*(InDim/4); j<InDim; j++) Acc += In[j]*Weights[i*InDim+j];
1c006ade:	c202b2b3          	p.bclr	t0,t0,1,0
1c006ae2:	8f95                	sub	a5,a5,a3
1c006ae4:	17f1                	addi	a5,a5,-4
1c006ae6:	8389                	srli	a5,a5,0x2
1c006ae8:	0785                	addi	a5,a5,1
1c006aea:	c63e                	sw	a5,12(sp)
1c006aec:	a889                	j	1c006b3e <KerParLinearLayerFullFeatB32_SQ8+0xec>
1c006aee:	03f2f763          	bleu	t6,t0,1c006b1c <KerParLinearLayerFullFeatB32_SQ8+0xca>
1c006af2:	005406b3          	add	a3,s0,t0
1c006af6:	9816                	add	a6,a6,t0
1c006af8:	985a                	add	a6,a6,s6
1c006afa:	40d48733          	sub	a4,s1,a3
1c006afe:	977e                	add	a4,a4,t6
1c006b00:	40940633          	sub	a2,s0,s1
1c006b04:	9616                	add	a2,a2,t0
1c006b06:	0605                	addi	a2,a2,1
1c006b08:	08cfe663          	bltu	t6,a2,1c006b94 <KerParLinearLayerFullFeatB32_SQ8+0x142>
1c006b0c:	006740fb          	lp.setup	x1,a4,1c006b18 <KerParLinearLayerFullFeatB32_SQ8+0xc6>
1c006b10:	0016858b          	p.lb	a1,1(a3!)
1c006b14:	0018060b          	p.lb	a2,1(a6!)
1c006b18:	42c587b3          	p.mac	a5,a1,a2
		Out[i] = gap_clip(AT_SCALE(Acc, Scale[i], ScaleN[i]), 7);
1c006b1c:	001ac70b          	p.lbu	a4,1(s5!)
1c006b20:	001a468b          	p.lbu	a3,1(s4!)
1c006b24:	02f707b3          	mul	a5,a4,a5
1c006b28:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c006b2c:	148797b3          	p.clip	a5,a5,8
1c006b30:	00f980ab          	p.sb	a5,1(s3!)
1c006b34:	9f7e                	add	t5,t5,t6
1c006b36:	47b2                	lw	a5,12(sp)
1c006b38:	17fd                	addi	a5,a5,-1
1c006b3a:	c63e                	sw	a5,12(sp)
1c006b3c:	cfb1                	beqz	a5,1c006b98 <KerParLinearLayerFullFeatB32_SQ8+0x146>
1c006b3e:	416f0833          	sub	a6,t5,s6
		v4s * __restrict__ W = (v4s *) (&Weights[i*InDim]);
1c006b42:	83fa                	mv	t2,t5
		int Acc = AT_LSHIFT(Bias[i], NormBias);
1c006b44:	0049278b          	p.lw	a5,4(s2!)
1c006b48:	019797b3          	sll	a5,a5,s9
		for (int j=0; j<(InDim/(4*2)); j++) {
1c006b4c:	03fdfb63          	bleu	t6,s11,1c006b82 <KerParLinearLayerFullFeatB32_SQ8+0x130>
1c006b50:	00440e93          	addi	t4,s0,4
1c006b54:	004f0e13          	addi	t3,t5,4
1c006b58:	837a                	mv	t1,t5
1c006b5a:	88a6                	mv	a7,s1
1c006b5c:	409c0533          	sub	a0,s8,s1
1c006b60:	1561                	addi	a0,a0,-8
1c006b62:	810d                	srli	a0,a0,0x3
1c006b64:	0505                	addi	a0,a0,1
1c006b66:	00c540fb          	lp.setup	x1,a0,1c006b7e <KerParLinearLayerFullFeatB32_SQ8+0x12c>
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
1c006b6a:	008ea68b          	p.lw	a3,8(t4!)
			v4s C0=W[2*j], C1=W[2*j+1];
1c006b6e:	008e270b          	p.lw	a4,8(t3!)
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
1c006b72:	0088a58b          	p.lw	a1,8(a7!)
1c006b76:	0083260b          	p.lw	a2,8(t1!)
1c006b7a:	b8c597d7          	pv.sdotsp.b	a5,a1,a2
1c006b7e:	b8e697d7          	pv.sdotsp.b	a5,a3,a4
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c006b82:	f60d06e3          	beqz	s10,1c006aee <KerParLinearLayerFullFeatB32_SQ8+0x9c>
1c006b86:	21747703          	p.lw	a4,s7(s0)
1c006b8a:	2173f383          	p.lw	t2,s7(t2)
1c006b8e:	b87717d7          	pv.sdotsp.b	a5,a4,t2
1c006b92:	bfb1                	j	1c006aee <KerParLinearLayerFullFeatB32_SQ8+0x9c>
1c006b94:	4705                	li	a4,1
1c006b96:	bf9d                	j	1c006b0c <KerParLinearLayerFullFeatB32_SQ8+0xba>
1c006b98:	002047b7          	lui	a5,0x204
1c006b9c:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006ba0:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c006ba4:	5472                	lw	s0,60(sp)
1c006ba6:	54e2                	lw	s1,56(sp)
1c006ba8:	5952                	lw	s2,52(sp)
1c006baa:	59c2                	lw	s3,48(sp)
1c006bac:	5a32                	lw	s4,44(sp)
1c006bae:	5aa2                	lw	s5,40(sp)
1c006bb0:	5b12                	lw	s6,36(sp)
1c006bb2:	5b82                	lw	s7,32(sp)
1c006bb4:	4c72                	lw	s8,28(sp)
1c006bb6:	4ce2                	lw	s9,24(sp)
1c006bb8:	4d52                	lw	s10,20(sp)
1c006bba:	4dc2                	lw	s11,16(sp)
1c006bbc:	6121                	addi	sp,sp,64
1c006bbe:	8082                	ret

1c006bc0 <LastDefinedOutput>:
			int *out = Out+Wo*Ho*(of);
			KerConv1x3Stride1x2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv1x3BorderStride1xN_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, 2, PadIn, PadIn);
		}
	gap_waitbarrier(0);
}
1c006bc0:	fff68793          	addi	a5,a3,-1
1c006bc4:	953e                	add	a0,a0,a5
1c006bc6:	9532                	add	a0,a0,a2
1c006bc8:	0015d613          	srli	a2,a1,0x1
1c006bcc:	8d11                	sub	a0,a0,a2
1c006bce:	15fd                	addi	a1,a1,-1
1c006bd0:	8185                	srli	a1,a1,0x1
1c006bd2:	8d0d                	sub	a0,a0,a1
1c006bd4:	02d55533          	divu	a0,a0,a3
1c006bd8:	8082                	ret

1c006bda <KerConv3x3Stride1_Body_2Out_SQ8>:
1c006bda:	7179                	addi	sp,sp,-48
1c006bdc:	d622                	sw	s0,44(sp)
1c006bde:	d426                	sw	s1,40(sp)
1c006be0:	d24a                	sw	s2,36(sp)
1c006be2:	d04e                	sw	s3,32(sp)
1c006be4:	ce52                	sw	s4,28(sp)
1c006be6:	cc56                	sw	s5,24(sp)
1c006be8:	ca5a                	sw	s6,20(sp)
1c006bea:	c85e                	sw	s7,16(sp)
1c006bec:	c662                	sw	s8,12(sp)
1c006bee:	c466                	sw	s9,8(sp)
1c006bf0:	c26a                	sw	s10,4(sp)
1c006bf2:	c06e                	sw	s11,0(sp)
1c006bf4:	54c2                	lw	s1,48(sp)
1c006bf6:	5ae2                	lw	s5,56(sp)
1c006bf8:	5b72                	lw	s6,60(sp)
1c006bfa:	4306                	lw	t1,64(sp)
1c006bfc:	780377d7          	pv.extract.b	a5,t1,0
1c006c00:	1007d3b3          	p.exthz	t2,a5
1c006c04:	78137357          	pv.extract.b	t1,t1,2
1c006c08:	100357b3          	p.exthz	a5,t1
1c006c0c:	89c6                	mv	s3,a7
1c006c0e:	435809b3          	p.mac	s3,a6,s5
1c006c12:	098a                	slli	s3,s3,0x2
1c006c14:	99ae                	add	s3,s3,a1
1c006c16:	5952                	lw	s2,52(sp)
1c006c18:	03280933          	mul	s2,a6,s2
1c006c1c:	090a                	slli	s2,s2,0x2
1c006c1e:	994e                	add	s2,s2,s3
1c006c20:	00062303          	lw	t1,0(a2)
1c006c24:	00362e03          	lw	t3,3(a2)
1c006c28:	00662e83          	lw	t4,6(a2)
1c006c2c:	20d67f03          	p.lw	t5,a3(a2)
1c006c30:	96b2                	add	a3,a3,a2
1c006c32:	0036af83          	lw	t6,3(a3)
1c006c36:	0066a283          	lw	t0,6(a3)
1c006c3a:	0a98f263          	bleu	s1,a7,1c006cde <KerConv3x3Stride1_Body_2Out_SQ8+0x104>
1c006c3e:	b2107357          	pv.insert.b	t1,zero,3
1c006c42:	b2107e57          	pv.insert.b	t3,zero,3
1c006c46:	b2107ed7          	pv.insert.b	t4,zero,3
1c006c4a:	b2107f57          	pv.insert.b	t5,zero,3
1c006c4e:	b2107fd7          	pv.insert.b	t6,zero,3
1c006c52:	b21072d7          	pv.insert.b	t0,zero,3
1c006c56:	40fa87b3          	sub	a5,s5,a5
1c006c5a:	02e787b3          	mul	a5,a5,a4
1c006c5e:	407787b3          	sub	a5,a5,t2
1c006c62:	00281c93          	slli	s9,a6,0x2
1c006c66:	00f88a33          	add	s4,a7,a5
1c006c6a:	9a2a                	add	s4,s4,a0
1c006c6c:	8d3a                	mv	s10,a4
1c006c6e:	00e88433          	add	s0,a7,a4
1c006c72:	943e                	add	s0,s0,a5
1c006c74:	942a                	add	s0,s0,a0
1c006c76:	94aa                	add	s1,s1,a0
1c006c78:	94be                	add	s1,s1,a5
1c006c7a:	00171c13          	slli	s8,a4,0x1
1c006c7e:	8bda                	mv	s7,s6
1c006c80:	414484b3          	sub	s1,s1,s4
1c006c84:	02c4c07b          	lp.setup	x0,s1,1c006cdc <KerConv3x3Stride1_Body_2Out_SQ8+0x102>
1c006c88:	83d2                	mv	t2,s4
1c006c8a:	2183f68b          	p.lw	a3,s8(t2!)
1c006c8e:	401c                	lw	a5,0(s0)
1c006c90:	85d6                	mv	a1,s5
1c006c92:	056af263          	bleu	s6,s5,1c006cd6 <KerConv3x3Stride1_Body_2Out_SQ8+0xfc>
1c006c96:	88ca                	mv	a7,s2
1c006c98:	884e                	mv	a6,s3
1c006c9a:	415b8533          	sub	a0,s7,s5
1c006c9e:	01b540fb          	lp.setup	x1,a0,1c006cd4 <KerConv3x3Stride1_Body_2Out_SQ8+0xfa>
1c006ca2:	00082603          	lw	a2,0(a6)
1c006ca6:	21a3f70b          	p.lw	a4,s10(t2!)
1c006caa:	b8669657          	pv.sdotsp.b	a2,a3,t1
1c006cae:	b9c79657          	pv.sdotsp.b	a2,a5,t3
1c006cb2:	b9d71657          	pv.sdotsp.b	a2,a4,t4
1c006cb6:	0008ad83          	lw	s11,0(a7)
1c006cba:	b9e69dd7          	pv.sdotsp.b	s11,a3,t5
1c006cbe:	86ee                	mv	a3,s11
1c006cc0:	b9f796d7          	pv.sdotsp.b	a3,a5,t6
1c006cc4:	b85716d7          	pv.sdotsp.b	a3,a4,t0
1c006cc8:	00c86cab          	p.sw	a2,s9(a6!)
1c006ccc:	00d8ecab          	p.sw	a3,s9(a7!)
1c006cd0:	0585                	addi	a1,a1,1
1c006cd2:	86be                	mv	a3,a5
1c006cd4:	87ba                	mv	a5,a4
1c006cd6:	0991                	addi	s3,s3,4
1c006cd8:	0911                	addi	s2,s2,4
1c006cda:	0a05                	addi	s4,s4,1
1c006cdc:	0405                	addi	s0,s0,1
1c006cde:	5432                	lw	s0,44(sp)
1c006ce0:	54a2                	lw	s1,40(sp)
1c006ce2:	5912                	lw	s2,36(sp)
1c006ce4:	5982                	lw	s3,32(sp)
1c006ce6:	4a72                	lw	s4,28(sp)
1c006ce8:	4ae2                	lw	s5,24(sp)
1c006cea:	4b52                	lw	s6,20(sp)
1c006cec:	4bc2                	lw	s7,16(sp)
1c006cee:	4c32                	lw	s8,12(sp)
1c006cf0:	4ca2                	lw	s9,8(sp)
1c006cf2:	4d12                	lw	s10,4(sp)
1c006cf4:	4d82                	lw	s11,0(sp)
1c006cf6:	6145                	addi	sp,sp,48
1c006cf8:	8082                	ret

1c006cfa <KerConv2x3from3x3Stride1_V_2Out_SQ8>:
1c006cfa:	7179                	addi	sp,sp,-48
1c006cfc:	d622                	sw	s0,44(sp)
1c006cfe:	d426                	sw	s1,40(sp)
1c006d00:	d24a                	sw	s2,36(sp)
1c006d02:	d04e                	sw	s3,32(sp)
1c006d04:	ce52                	sw	s4,28(sp)
1c006d06:	cc56                	sw	s5,24(sp)
1c006d08:	ca5a                	sw	s6,20(sp)
1c006d0a:	c85e                	sw	s7,16(sp)
1c006d0c:	c662                	sw	s8,12(sp)
1c006d0e:	c466                	sw	s9,8(sp)
1c006d10:	5342                	lw	t1,48(sp)
1c006d12:	5e52                	lw	t3,52(sp)
1c006d14:	5ee2                	lw	t4,56(sp)
1c006d16:	0e0e8a63          	beqz	t4,1c006e0a <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x110>
1c006d1a:	00035383          	lhu	t2,0(t1)
1c006d1e:	00335283          	lhu	t0,3(t1)
1c006d22:	00635403          	lhu	s0,6(t1)
1c006d26:	9372                	add	t1,t1,t3
1c006d28:	00035f83          	lhu	t6,0(t1)
1c006d2c:	00335f03          	lhu	t5,3(t1)
1c006d30:	00635483          	lhu	s1,6(t1)
1c006d34:	0e17a963          	p.beqimm	a5,1,1c006e26 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x12c>
1c006d38:	40c78633          	sub	a2,a5,a2
1c006d3c:	02d78333          	mul	t1,a5,a3
1c006d40:	030a                	slli	t1,t1,0x2
1c006d42:	989a                	add	a7,a7,t1
1c006d44:	42b60533          	p.mac	a0,a2,a1
1c006d48:	20b57e0b          	p.lw	t3,a1(a0!)
1c006d4c:	20b5760b          	p.lw	a2,a1(a0!)
1c006d50:	02d70ab3          	mul	s5,a4,a3
1c006d54:	0a8a                	slli	s5,s5,0x2
1c006d56:	9ac6                	add	s5,s5,a7
1c006d58:	8b3e                	mv	s6,a5
1c006d5a:	0707f363          	bleu	a6,a5,1c006dc0 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xc6>
1c006d5e:	00269b93          	slli	s7,a3,0x2
1c006d62:	89d6                	mv	s3,s5
1c006d64:	8946                	mv	s2,a7
1c006d66:	8a2a                	mv	s4,a0
1c006d68:	8c2e                	mv	s8,a1
1c006d6a:	40f806b3          	sub	a3,a6,a5
1c006d6e:	01b6c0fb          	lp.setup	x1,a3,1c006da4 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xaa>
1c006d72:	00092e83          	lw	t4,0(s2)
1c006d76:	20ba730b          	p.lw	t1,a1(s4!)
1c006d7a:	b87e1ed7          	pv.sdotsp.b	t4,t3,t2
1c006d7e:	b8561ed7          	pv.sdotsp.b	t4,a2,t0
1c006d82:	b8831ed7          	pv.sdotsp.b	t4,t1,s0
1c006d86:	0009ac83          	lw	s9,0(s3)
1c006d8a:	b9fe1cd7          	pv.sdotsp.b	s9,t3,t6
1c006d8e:	8e66                	mv	t3,s9
1c006d90:	b9e61e57          	pv.sdotsp.b	t3,a2,t5
1c006d94:	b8931e57          	pv.sdotsp.b	t3,t1,s1
1c006d98:	01d96bab          	p.sw	t4,s7(s2!)
1c006d9c:	01c9ebab          	p.sw	t3,s7(s3!)
1c006da0:	0785                	addi	a5,a5,1
1c006da2:	8e32                	mv	t3,a2
1c006da4:	861a                	mv	a2,t1
1c006da6:	fff80793          	addi	a5,a6,-1
1c006daa:	416787b3          	sub	a5,a5,s6
1c006dae:	43878c33          	p.mac	s8,a5,s8
1c006db2:	9562                	add	a0,a0,s8
1c006db4:	41680b33          	sub	s6,a6,s6
1c006db8:	037b0bb3          	mul	s7,s6,s7
1c006dbc:	98de                	add	a7,a7,s7
1c006dbe:	9ade                	add	s5,s5,s7
1c006dc0:	03070963          	beq	a4,a6,1c006df2 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xf8>
1c006dc4:	0008a683          	lw	a3,0(a7)
1c006dc8:	000aa703          	lw	a4,0(s5)
1c006dcc:	00159793          	slli	a5,a1,0x1
1c006dd0:	8d1d                	sub	a0,a0,a5
1c006dd2:	411c                	lw	a5,0(a0)
1c006dd4:	20b57583          	p.lw	a1,a1(a0)
1c006dd8:	b87796d7          	pv.sdotsp.b	a3,a5,t2
1c006ddc:	b85596d7          	pv.sdotsp.b	a3,a1,t0
1c006de0:	b9f79757          	pv.sdotsp.b	a4,a5,t6
1c006de4:	87ba                	mv	a5,a4
1c006de6:	b9e597d7          	pv.sdotsp.b	a5,a1,t5
1c006dea:	00d8a023          	sw	a3,0(a7)
1c006dee:	00faa023          	sw	a5,0(s5)
1c006df2:	5432                	lw	s0,44(sp)
1c006df4:	54a2                	lw	s1,40(sp)
1c006df6:	5912                	lw	s2,36(sp)
1c006df8:	5982                	lw	s3,32(sp)
1c006dfa:	4a72                	lw	s4,28(sp)
1c006dfc:	4ae2                	lw	s5,24(sp)
1c006dfe:	4b52                	lw	s6,20(sp)
1c006e00:	4bc2                	lw	s7,16(sp)
1c006e02:	4c32                	lw	s8,12(sp)
1c006e04:	4ca2                	lw	s9,8(sp)
1c006e06:	6145                	addi	sp,sp,48
1c006e08:	8082                	ret
1c006e0a:	00135383          	lhu	t2,1(t1)
1c006e0e:	00435283          	lhu	t0,4(t1)
1c006e12:	00735403          	lhu	s0,7(t1)
1c006e16:	9372                	add	t1,t1,t3
1c006e18:	00135f83          	lhu	t6,1(t1)
1c006e1c:	00435f03          	lhu	t5,4(t1)
1c006e20:	00735483          	lhu	s1,7(t1)
1c006e24:	bf01                	j	1c006d34 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x3a>
1c006e26:	20b5760b          	p.lw	a2,a1(a0!)
1c006e2a:	00007e57          	pv.add.sci.b	t3,zero,0
1c006e2e:	4781                	li	a5,0
1c006e30:	b705                	j	1c006d50 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x56>

1c006e32 <KerConv3x2from3x3Stride1_H_2Out_SQ8>:
1c006e32:	4302                	lw	t1,0(sp)
1c006e34:	4f92                	lw	t6,4(sp)
1c006e36:	4ea2                	lw	t4,8(sp)
1c006e38:	8e3e                	mv	t3,a5
1c006e3a:	40c78633          	sub	a2,a5,a2
1c006e3e:	9532                	add	a0,a0,a2
1c006e40:	02e683b3          	mul	t2,a3,a4
1c006e44:	038a                	slli	t2,t2,0x2
1c006e46:	93c6                	add	t2,t2,a7
1c006e48:	060e8063          	beqz	t4,1c006ea8 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x76>
1c006e4c:	00032e83          	lw	t4,0(t1)
1c006e50:	b2107ed7          	pv.insert.b	t4,zero,3
1c006e54:	00332f03          	lw	t5,3(t1)
1c006e58:	b2107f57          	pv.insert.b	t5,zero,3
1c006e5c:	937e                	add	t1,t1,t6
1c006e5e:	00032f83          	lw	t6,0(t1)
1c006e62:	b2107fd7          	pv.insert.b	t6,zero,3
1c006e66:	00332283          	lw	t0,3(t1)
1c006e6a:	b21072d7          	pv.insert.b	t0,zero,3
1c006e6e:	030e7c63          	bleu	a6,t3,1c006ea6 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x74>
1c006e72:	95aa                	add	a1,a1,a0
1c006e74:	40f80833          	sub	a6,a6,a5
1c006e78:	015840fb          	lp.setup	x1,a6,1c006ea2 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x70>
1c006e7c:	0008ae03          	lw	t3,0(a7)
1c006e80:	0003a303          	lw	t1,0(t2)
1c006e84:	0015268b          	p.lw	a3,1(a0!)
1c006e88:	0015a70b          	p.lw	a4,1(a1!)
1c006e8c:	b9d69e57          	pv.sdotsp.b	t3,a3,t4
1c006e90:	b9e71e57          	pv.sdotsp.b	t3,a4,t5
1c006e94:	b9f69357          	pv.sdotsp.b	t1,a3,t6
1c006e98:	869a                	mv	a3,t1
1c006e9a:	b85716d7          	pv.sdotsp.b	a3,a4,t0
1c006e9e:	01c8a22b          	p.sw	t3,4(a7!)
1c006ea2:	00d3a22b          	p.sw	a3,4(t2!)
1c006ea6:	8082                	ret
1c006ea8:	00332e83          	lw	t4,3(t1)
1c006eac:	b2107ed7          	pv.insert.b	t4,zero,3
1c006eb0:	00632f03          	lw	t5,6(t1)
1c006eb4:	b2107f57          	pv.insert.b	t5,zero,3
1c006eb8:	937e                	add	t1,t1,t6
1c006eba:	00332f83          	lw	t6,3(t1)
1c006ebe:	b2107fd7          	pv.insert.b	t6,zero,3
1c006ec2:	00632283          	lw	t0,6(t1)
1c006ec6:	b21072d7          	pv.insert.b	t0,zero,3
1c006eca:	b755                	j	1c006e6e <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x3c>

1c006ecc <KerConv3x3BorderStride1_2Out_SQ8>:
1c006ecc:	715d                	addi	sp,sp,-80
1c006ece:	c686                	sw	ra,76(sp)
1c006ed0:	c4a2                	sw	s0,72(sp)
1c006ed2:	c2a6                	sw	s1,68(sp)
1c006ed4:	c0ca                	sw	s2,64(sp)
1c006ed6:	de4e                	sw	s3,60(sp)
1c006ed8:	dc52                	sw	s4,56(sp)
1c006eda:	da56                	sw	s5,52(sp)
1c006edc:	d85a                	sw	s6,48(sp)
1c006ede:	d65e                	sw	s7,44(sp)
1c006ee0:	d462                	sw	s8,40(sp)
1c006ee2:	d266                	sw	s9,36(sp)
1c006ee4:	d06a                	sw	s10,32(sp)
1c006ee6:	ce6e                	sw	s11,28(sp)
1c006ee8:	8a2a                	mv	s4,a0
1c006eea:	8aae                	mv	s5,a1
1c006eec:	8b32                	mv	s6,a2
1c006eee:	8bb6                	mv	s7,a3
1c006ef0:	893a                	mv	s2,a4
1c006ef2:	84c2                	mv	s1,a6
1c006ef4:	89c6                	mv	s3,a7
1c006ef6:	5786                	lw	a5,96(sp)
1c006ef8:	5416                	lw	s0,100(sp)
1c006efa:	78047c57          	pv.extract.b	s8,s0,0
1c006efe:	78147457          	pv.extract.b	s0,s0,2
1c006f02:	7a07fdd7          	pv.extract.b	s11,a5,1
1c006f06:	7817fd57          	pv.extract.b	s10,a5,2
1c006f0a:	7a17fcd7          	pv.extract.b	s9,a5,3
1c006f0e:	7807f7d7          	pv.extract.b	a5,a5,0
1c006f12:	e795                	bnez	a5,1c006f3e <KerConv3x3BorderStride1_2Out_SQ8+0x72>
1c006f14:	040d9163          	bnez	s11,1c006f56 <KerConv3x3BorderStride1_2Out_SQ8+0x8a>
1c006f18:	060d1363          	bnez	s10,1c006f7e <KerConv3x3BorderStride1_2Out_SQ8+0xb2>
1c006f1c:	080c9063          	bnez	s9,1c006f9c <KerConv3x3BorderStride1_2Out_SQ8+0xd0>
1c006f20:	40b6                	lw	ra,76(sp)
1c006f22:	4426                	lw	s0,72(sp)
1c006f24:	4496                	lw	s1,68(sp)
1c006f26:	4906                	lw	s2,64(sp)
1c006f28:	59f2                	lw	s3,60(sp)
1c006f2a:	5a62                	lw	s4,56(sp)
1c006f2c:	5ad2                	lw	s5,52(sp)
1c006f2e:	5b42                	lw	s6,48(sp)
1c006f30:	5bb2                	lw	s7,44(sp)
1c006f32:	5c22                	lw	s8,40(sp)
1c006f34:	5c92                	lw	s9,36(sp)
1c006f36:	5d02                	lw	s10,32(sp)
1c006f38:	4df2                	lw	s11,28(sp)
1c006f3a:	6161                	addi	sp,sp,80
1c006f3c:	8082                	ret
1c006f3e:	c402                	sw	zero,8(sp)
1c006f40:	c236                	sw	a3,4(sp)
1c006f42:	c032                	sw	a2,0(sp)
1c006f44:	88ae                	mv	a7,a1
1c006f46:	4876                	lw	a6,92(sp)
1c006f48:	47e6                	lw	a5,88(sp)
1c006f4a:	4756                	lw	a4,84(sp)
1c006f4c:	86a6                	mv	a3,s1
1c006f4e:	8622                	mv	a2,s0
1c006f50:	85ca                	mv	a1,s2
1c006f52:	3365                	jal	1c006cfa <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c006f54:	b7c1                	j	1c006f14 <KerConv3x3BorderStride1_2Out_SQ8+0x48>
1c006f56:	00249893          	slli	a7,s1,0x2
1c006f5a:	18f1                	addi	a7,a7,-4
1c006f5c:	47c6                	lw	a5,80(sp)
1c006f5e:	41878533          	sub	a0,a5,s8
1c006f62:	4785                	li	a5,1
1c006f64:	c43e                	sw	a5,8(sp)
1c006f66:	c25e                	sw	s7,4(sp)
1c006f68:	c05a                	sw	s6,0(sp)
1c006f6a:	98d6                	add	a7,a7,s5
1c006f6c:	4876                	lw	a6,92(sp)
1c006f6e:	47e6                	lw	a5,88(sp)
1c006f70:	4756                	lw	a4,84(sp)
1c006f72:	86a6                	mv	a3,s1
1c006f74:	8622                	mv	a2,s0
1c006f76:	85ca                	mv	a1,s2
1c006f78:	9552                	add	a0,a0,s4
1c006f7a:	3341                	jal	1c006cfa <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c006f7c:	bf71                	j	1c006f18 <KerConv3x3BorderStride1_2Out_SQ8+0x4c>
1c006f7e:	00299893          	slli	a7,s3,0x2
1c006f82:	c402                	sw	zero,8(sp)
1c006f84:	c25e                	sw	s7,4(sp)
1c006f86:	c05a                	sw	s6,0(sp)
1c006f88:	98d6                	add	a7,a7,s5
1c006f8a:	4846                	lw	a6,80(sp)
1c006f8c:	87ce                	mv	a5,s3
1c006f8e:	4756                	lw	a4,84(sp)
1c006f90:	86a6                	mv	a3,s1
1c006f92:	8662                	mv	a2,s8
1c006f94:	85ca                	mv	a1,s2
1c006f96:	8552                	mv	a0,s4
1c006f98:	3d69                	jal	1c006e32 <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c006f9a:	b749                	j	1c006f1c <KerConv3x3BorderStride1_2Out_SQ8+0x50>
1c006f9c:	88ce                	mv	a7,s3
1c006f9e:	47f6                	lw	a5,92(sp)
1c006fa0:	42f488b3          	p.mac	a7,s1,a5
1c006fa4:	088a                	slli	a7,a7,0x2
1c006fa6:	40878433          	sub	s0,a5,s0
1c006faa:	4785                	li	a5,1
1c006fac:	c43e                	sw	a5,8(sp)
1c006fae:	c25e                	sw	s7,4(sp)
1c006fb0:	c05a                	sw	s6,0(sp)
1c006fb2:	98d6                	add	a7,a7,s5
1c006fb4:	4846                	lw	a6,80(sp)
1c006fb6:	87ce                	mv	a5,s3
1c006fb8:	4756                	lw	a4,84(sp)
1c006fba:	86a6                	mv	a3,s1
1c006fbc:	8662                	mv	a2,s8
1c006fbe:	85ca                	mv	a1,s2
1c006fc0:	8552                	mv	a0,s4
1c006fc2:	43240533          	p.mac	a0,s0,s2
1c006fc6:	35b5                	jal	1c006e32 <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c006fc8:	bfa1                	j	1c006f20 <KerConv3x3BorderStride1_2Out_SQ8+0x54>

1c006fca <KerConv3x3Stride1_Body_SQ8>:
1c006fca:	1101                	addi	sp,sp,-32
1c006fcc:	ce22                	sw	s0,28(sp)
1c006fce:	cc26                	sw	s1,24(sp)
1c006fd0:	ca4a                	sw	s2,20(sp)
1c006fd2:	c84e                	sw	s3,16(sp)
1c006fd4:	c652                	sw	s4,12(sp)
1c006fd6:	c456                	sw	s5,8(sp)
1c006fd8:	5392                	lw	t2,36(sp)
1c006fda:	5422                	lw	s0,40(sp)
1c006fdc:	5332                	lw	t1,44(sp)
1c006fde:	78037757          	pv.extract.b	a4,t1,0
1c006fe2:	78137357          	pv.extract.b	t1,t1,2
1c006fe6:	10035f33          	p.exthz	t5,t1
1c006fea:	8342                	mv	t1,a6
1c006fec:	42778333          	p.mac	t1,a5,t2
1c006ff0:	030a                	slli	t1,t1,0x2
1c006ff2:	959a                	add	a1,a1,t1
1c006ff4:	00062303          	lw	t1,0(a2)
1c006ff8:	00362e03          	lw	t3,3(a2)
1c006ffc:	00662e83          	lw	t4,6(a2)
1c007000:	09187363          	bleu	a7,a6,1c007086 <KerConv3x3Stride1_Body_SQ8+0xbc>
1c007004:	100752b3          	p.exthz	t0,a4
1c007008:	b2107357          	pv.insert.b	t1,zero,3
1c00700c:	b2107e57          	pv.insert.b	t3,zero,3
1c007010:	b2107ed7          	pv.insert.b	t4,zero,3
1c007014:	41e38733          	sub	a4,t2,t5
1c007018:	02d70733          	mul	a4,a4,a3
1c00701c:	40570733          	sub	a4,a4,t0
1c007020:	00279913          	slli	s2,a5,0x2
1c007024:	00e804b3          	add	s1,a6,a4
1c007028:	94aa                	add	s1,s1,a0
1c00702a:	89b6                	mv	s3,a3
1c00702c:	00d80fb3          	add	t6,a6,a3
1c007030:	9fba                	add	t6,t6,a4
1c007032:	9faa                	add	t6,t6,a0
1c007034:	011502b3          	add	t0,a0,a7
1c007038:	92ba                	add	t0,t0,a4
1c00703a:	00169a93          	slli	s5,a3,0x1
1c00703e:	8a22                	mv	s4,s0
1c007040:	409282b3          	sub	t0,t0,s1
1c007044:	0202c07b          	lp.setup	x0,t0,1c007084 <KerConv3x3Stride1_Body_SQ8+0xba>
1c007048:	88a6                	mv	a7,s1
1c00704a:	2158f60b          	p.lw	a2,s5(a7!)
1c00704e:	000fa703          	lw	a4,0(t6)
1c007052:	8f1e                	mv	t5,t2
1c007054:	0283f663          	bleu	s0,t2,1c007080 <KerConv3x3Stride1_Body_SQ8+0xb6>
1c007058:	882e                	mv	a6,a1
1c00705a:	407a0533          	sub	a0,s4,t2
1c00705e:	010540fb          	lp.setup	x1,a0,1c00707e <KerConv3x3Stride1_Body_SQ8+0xb4>
1c007062:	00082783          	lw	a5,0(a6)
1c007066:	2138f68b          	p.lw	a3,s3(a7!)
1c00706a:	b86617d7          	pv.sdotsp.b	a5,a2,t1
1c00706e:	b9c717d7          	pv.sdotsp.b	a5,a4,t3
1c007072:	b9d697d7          	pv.sdotsp.b	a5,a3,t4
1c007076:	00f8692b          	p.sw	a5,s2(a6!)
1c00707a:	0f05                	addi	t5,t5,1
1c00707c:	863a                	mv	a2,a4
1c00707e:	8736                	mv	a4,a3
1c007080:	0591                	addi	a1,a1,4
1c007082:	0485                	addi	s1,s1,1
1c007084:	0f85                	addi	t6,t6,1
1c007086:	4472                	lw	s0,28(sp)
1c007088:	44e2                	lw	s1,24(sp)
1c00708a:	4952                	lw	s2,20(sp)
1c00708c:	49c2                	lw	s3,16(sp)
1c00708e:	4a32                	lw	s4,12(sp)
1c007090:	4aa2                	lw	s5,8(sp)
1c007092:	6105                	addi	sp,sp,32
1c007094:	8082                	ret

1c007096 <KerConv2x3from3x3Stride1_V_SQ8>:
1c007096:	1141                	addi	sp,sp,-16
1c007098:	c622                	sw	s0,12(sp)
1c00709a:	c426                	sw	s1,8(sp)
1c00709c:	c24a                	sw	s2,4(sp)
1c00709e:	c04e                	sw	s3,0(sp)
1c0070a0:	4342                	lw	t1,16(sp)
1c0070a2:	4e52                	lw	t3,20(sp)
1c0070a4:	0a0e0063          	beqz	t3,1c007144 <KerConv2x3from3x3Stride1_V_SQ8+0xae>
1c0070a8:	00035f83          	lhu	t6,0(t1)
1c0070ac:	00335f03          	lhu	t5,3(t1)
1c0070b0:	00635283          	lhu	t0,6(t1)
1c0070b4:	0817af63          	p.beqimm	a5,1,1c007152 <KerConv2x3from3x3Stride1_V_SQ8+0xbc>
1c0070b8:	40c78633          	sub	a2,a5,a2
1c0070bc:	02d78333          	mul	t1,a5,a3
1c0070c0:	030a                	slli	t1,t1,0x2
1c0070c2:	989a                	add	a7,a7,t1
1c0070c4:	42b60533          	p.mac	a0,a2,a1
1c0070c8:	20b57e8b          	p.lw	t4,a1(a0!)
1c0070cc:	20b5730b          	p.lw	t1,a1(a0!)
1c0070d0:	84be                	mv	s1,a5
1c0070d2:	0507f363          	bleu	a6,a5,1c007118 <KerConv2x3from3x3Stride1_V_SQ8+0x82>
1c0070d6:	00269993          	slli	s3,a3,0x2
1c0070da:	86c6                	mv	a3,a7
1c0070dc:	842a                	mv	s0,a0
1c0070de:	892e                	mv	s2,a1
1c0070e0:	40f803b3          	sub	t2,a6,a5
1c0070e4:	00f3c0fb          	lp.setup	x1,t2,1c007102 <KerConv2x3from3x3Stride1_V_SQ8+0x6c>
1c0070e8:	4290                	lw	a2,0(a3)
1c0070ea:	20b47e0b          	p.lw	t3,a1(s0!)
1c0070ee:	b9fe9657          	pv.sdotsp.b	a2,t4,t6
1c0070f2:	b9e31657          	pv.sdotsp.b	a2,t1,t5
1c0070f6:	b85e1657          	pv.sdotsp.b	a2,t3,t0
1c0070fa:	00c6e9ab          	p.sw	a2,s3(a3!)
1c0070fe:	0785                	addi	a5,a5,1
1c007100:	8e9a                	mv	t4,t1
1c007102:	8372                	mv	t1,t3
1c007104:	fff80793          	addi	a5,a6,-1
1c007108:	8f85                	sub	a5,a5,s1
1c00710a:	43278933          	p.mac	s2,a5,s2
1c00710e:	954a                	add	a0,a0,s2
1c007110:	409804b3          	sub	s1,a6,s1
1c007114:	433488b3          	p.mac	a7,s1,s3
1c007118:	03070063          	beq	a4,a6,1c007138 <KerConv2x3from3x3Stride1_V_SQ8+0xa2>
1c00711c:	0008a783          	lw	a5,0(a7)
1c007120:	00159713          	slli	a4,a1,0x1
1c007124:	8d19                	sub	a0,a0,a4
1c007126:	20b57583          	p.lw	a1,a1(a0)
1c00712a:	4118                	lw	a4,0(a0)
1c00712c:	b9f717d7          	pv.sdotsp.b	a5,a4,t6
1c007130:	b9e597d7          	pv.sdotsp.b	a5,a1,t5
1c007134:	00f8a023          	sw	a5,0(a7)
1c007138:	4432                	lw	s0,12(sp)
1c00713a:	44a2                	lw	s1,8(sp)
1c00713c:	4912                	lw	s2,4(sp)
1c00713e:	4982                	lw	s3,0(sp)
1c007140:	0141                	addi	sp,sp,16
1c007142:	8082                	ret
1c007144:	00135f83          	lhu	t6,1(t1)
1c007148:	00435f03          	lhu	t5,4(t1)
1c00714c:	00735283          	lhu	t0,7(t1)
1c007150:	b795                	j	1c0070b4 <KerConv2x3from3x3Stride1_V_SQ8+0x1e>
1c007152:	20b5730b          	p.lw	t1,a1(a0!)
1c007156:	00007ed7          	pv.add.sci.b	t4,zero,0
1c00715a:	4781                	li	a5,0
1c00715c:	bf95                	j	1c0070d0 <KerConv2x3from3x3Stride1_V_SQ8+0x3a>

1c00715e <KerConv3x2from3x3Stride1_H_SQ8>:
1c00715e:	4302                	lw	t1,0(sp)
1c007160:	86ba                	mv	a3,a4
1c007162:	40c70633          	sub	a2,a4,a2
1c007166:	9532                	add	a0,a0,a2
1c007168:	02030d63          	beqz	t1,1c0071a2 <KerConv3x2from3x3Stride1_H_SQ8+0x44>
1c00716c:	0008ae03          	lw	t3,0(a7)
1c007170:	b2107e57          	pv.insert.b	t3,zero,3
1c007174:	0038ae83          	lw	t4,3(a7)
1c007178:	b2107ed7          	pv.insert.b	t4,zero,3
1c00717c:	02f6f263          	bleu	a5,a3,1c0071a0 <KerConv3x2from3x3Stride1_H_SQ8+0x42>
1c007180:	95aa                	add	a1,a1,a0
1c007182:	8f99                	sub	a5,a5,a4
1c007184:	00c7c0fb          	lp.setup	x1,a5,1c00719c <KerConv3x2from3x3Stride1_H_SQ8+0x3e>
1c007188:	00082683          	lw	a3,0(a6)
1c00718c:	0015230b          	p.lw	t1,1(a0!)
1c007190:	0015a88b          	p.lw	a7,1(a1!)
1c007194:	b9c316d7          	pv.sdotsp.b	a3,t1,t3
1c007198:	b9d896d7          	pv.sdotsp.b	a3,a7,t4
1c00719c:	00d8222b          	p.sw	a3,4(a6!)
1c0071a0:	8082                	ret
1c0071a2:	0038ae03          	lw	t3,3(a7)
1c0071a6:	b2107e57          	pv.insert.b	t3,zero,3
1c0071aa:	0068ae83          	lw	t4,6(a7)
1c0071ae:	b2107ed7          	pv.insert.b	t4,zero,3
1c0071b2:	b7e9                	j	1c00717c <KerConv3x2from3x3Stride1_H_SQ8+0x1e>

1c0071b4 <KerConv3x3BorderStride1_SQ8>:
1c0071b4:	715d                	addi	sp,sp,-80
1c0071b6:	c686                	sw	ra,76(sp)
1c0071b8:	c4a2                	sw	s0,72(sp)
1c0071ba:	c2a6                	sw	s1,68(sp)
1c0071bc:	c0ca                	sw	s2,64(sp)
1c0071be:	de4e                	sw	s3,60(sp)
1c0071c0:	dc52                	sw	s4,56(sp)
1c0071c2:	da56                	sw	s5,52(sp)
1c0071c4:	d85a                	sw	s6,48(sp)
1c0071c6:	d65e                	sw	s7,44(sp)
1c0071c8:	d462                	sw	s8,40(sp)
1c0071ca:	d266                	sw	s9,36(sp)
1c0071cc:	d06a                	sw	s10,32(sp)
1c0071ce:	ce6e                	sw	s11,28(sp)
1c0071d0:	8a2a                	mv	s4,a0
1c0071d2:	8aae                	mv	s5,a1
1c0071d4:	8b32                	mv	s6,a2
1c0071d6:	8936                	mv	s2,a3
1c0071d8:	84be                	mv	s1,a5
1c0071da:	89c2                	mv	s3,a6
1c0071dc:	8c46                	mv	s8,a7
1c0071de:	47f6                	lw	a5,92(sp)
1c0071e0:	5406                	lw	s0,96(sp)
1c0071e2:	78047bd7          	pv.extract.b	s7,s0,0
1c0071e6:	78147457          	pv.extract.b	s0,s0,2
1c0071ea:	7a07fdd7          	pv.extract.b	s11,a5,1
1c0071ee:	7817fd57          	pv.extract.b	s10,a5,2
1c0071f2:	7a17fcd7          	pv.extract.b	s9,a5,3
1c0071f6:	7807f7d7          	pv.extract.b	a5,a5,0
1c0071fa:	e795                	bnez	a5,1c007226 <KerConv3x3BorderStride1_SQ8+0x72>
1c0071fc:	040d9063          	bnez	s11,1c00723c <KerConv3x3BorderStride1_SQ8+0x88>
1c007200:	060d1063          	bnez	s10,1c007260 <KerConv3x3BorderStride1_SQ8+0xac>
1c007204:	060c9b63          	bnez	s9,1c00727a <KerConv3x3BorderStride1_SQ8+0xc6>
1c007208:	40b6                	lw	ra,76(sp)
1c00720a:	4426                	lw	s0,72(sp)
1c00720c:	4496                	lw	s1,68(sp)
1c00720e:	4906                	lw	s2,64(sp)
1c007210:	59f2                	lw	s3,60(sp)
1c007212:	5a62                	lw	s4,56(sp)
1c007214:	5ad2                	lw	s5,52(sp)
1c007216:	5b42                	lw	s6,48(sp)
1c007218:	5bb2                	lw	s7,44(sp)
1c00721a:	5c22                	lw	s8,40(sp)
1c00721c:	5c92                	lw	s9,36(sp)
1c00721e:	5d02                	lw	s10,32(sp)
1c007220:	4df2                	lw	s11,28(sp)
1c007222:	6161                	addi	sp,sp,80
1c007224:	8082                	ret
1c007226:	c202                	sw	zero,4(sp)
1c007228:	c032                	sw	a2,0(sp)
1c00722a:	88ae                	mv	a7,a1
1c00722c:	4866                	lw	a6,88(sp)
1c00722e:	47d6                	lw	a5,84(sp)
1c007230:	4746                	lw	a4,80(sp)
1c007232:	86a6                	mv	a3,s1
1c007234:	8622                	mv	a2,s0
1c007236:	85ca                	mv	a1,s2
1c007238:	3db9                	jal	1c007096 <KerConv2x3from3x3Stride1_V_SQ8>
1c00723a:	b7c9                	j	1c0071fc <KerConv3x3BorderStride1_SQ8+0x48>
1c00723c:	00249893          	slli	a7,s1,0x2
1c007240:	18f1                	addi	a7,a7,-4
1c007242:	417c0533          	sub	a0,s8,s7
1c007246:	4785                	li	a5,1
1c007248:	c23e                	sw	a5,4(sp)
1c00724a:	c05a                	sw	s6,0(sp)
1c00724c:	98d6                	add	a7,a7,s5
1c00724e:	4866                	lw	a6,88(sp)
1c007250:	47d6                	lw	a5,84(sp)
1c007252:	4746                	lw	a4,80(sp)
1c007254:	86a6                	mv	a3,s1
1c007256:	8622                	mv	a2,s0
1c007258:	85ca                	mv	a1,s2
1c00725a:	9552                	add	a0,a0,s4
1c00725c:	3d2d                	jal	1c007096 <KerConv2x3from3x3Stride1_V_SQ8>
1c00725e:	b74d                	j	1c007200 <KerConv3x3BorderStride1_SQ8+0x4c>
1c007260:	00299813          	slli	a6,s3,0x2
1c007264:	c002                	sw	zero,0(sp)
1c007266:	88da                	mv	a7,s6
1c007268:	9856                	add	a6,a6,s5
1c00726a:	87e2                	mv	a5,s8
1c00726c:	874e                	mv	a4,s3
1c00726e:	86a6                	mv	a3,s1
1c007270:	865e                	mv	a2,s7
1c007272:	85ca                	mv	a1,s2
1c007274:	8552                	mv	a0,s4
1c007276:	35e5                	jal	1c00715e <KerConv3x2from3x3Stride1_H_SQ8>
1c007278:	b771                	j	1c007204 <KerConv3x3BorderStride1_SQ8+0x50>
1c00727a:	884e                	mv	a6,s3
1c00727c:	47e6                	lw	a5,88(sp)
1c00727e:	42f48833          	p.mac	a6,s1,a5
1c007282:	080a                	slli	a6,a6,0x2
1c007284:	40878433          	sub	s0,a5,s0
1c007288:	4785                	li	a5,1
1c00728a:	c03e                	sw	a5,0(sp)
1c00728c:	88da                	mv	a7,s6
1c00728e:	9856                	add	a6,a6,s5
1c007290:	87e2                	mv	a5,s8
1c007292:	874e                	mv	a4,s3
1c007294:	86a6                	mv	a3,s1
1c007296:	865e                	mv	a2,s7
1c007298:	85ca                	mv	a1,s2
1c00729a:	8552                	mv	a0,s4
1c00729c:	43240533          	p.mac	a0,s0,s2
1c0072a0:	3d7d                	jal	1c00715e <KerConv3x2from3x3Stride1_H_SQ8>
1c0072a2:	b79d                	j	1c007208 <KerConv3x3BorderStride1_SQ8+0x54>

1c0072a4 <KerConv3x3Stride2_Body_SQ8>:
1c0072a4:	1101                	addi	sp,sp,-32
1c0072a6:	ce22                	sw	s0,28(sp)
1c0072a8:	cc26                	sw	s1,24(sp)
1c0072aa:	ca4a                	sw	s2,20(sp)
1c0072ac:	c84e                	sw	s3,16(sp)
1c0072ae:	c652                	sw	s4,12(sp)
1c0072b0:	c456                	sw	s5,8(sp)
1c0072b2:	5412                	lw	s0,36(sp)
1c0072b4:	54a2                	lw	s1,40(sp)
1c0072b6:	5332                	lw	t1,44(sp)
1c0072b8:	78037757          	pv.extract.b	a4,t1,0
1c0072bc:	78137357          	pv.extract.b	t1,t1,2
1c0072c0:	100352b3          	p.exthz	t0,t1
1c0072c4:	8342                	mv	t1,a6
1c0072c6:	42878333          	p.mac	t1,a5,s0
1c0072ca:	030a                	slli	t1,t1,0x2
1c0072cc:	959a                	add	a1,a1,t1
1c0072ce:	00062303          	lw	t1,0(a2)
1c0072d2:	00362e03          	lw	t3,3(a2)
1c0072d6:	00662e83          	lw	t4,6(a2)
1c0072da:	09187763          	bleu	a7,a6,1c007368 <KerConv3x3Stride2_Body_SQ8+0xc4>
1c0072de:	10075f33          	p.exthz	t5,a4
1c0072e2:	b2107357          	pv.insert.b	t1,zero,3
1c0072e6:	b2107e57          	pv.insert.b	t3,zero,3
1c0072ea:	b2107ed7          	pv.insert.b	t4,zero,3
1c0072ee:	00141713          	slli	a4,s0,0x1
1c0072f2:	40570733          	sub	a4,a4,t0
1c0072f6:	02d702b3          	mul	t0,a4,a3
1c0072fa:	41e28733          	sub	a4,t0,t5
1c0072fe:	00279a13          	slli	s4,a5,0x2
1c007302:	00181393          	slli	t2,a6,0x1
1c007306:	93ba                	add	t2,t2,a4
1c007308:	93aa                	add	t2,t2,a0
1c00730a:	00189293          	slli	t0,a7,0x1
1c00730e:	92aa                	add	t0,t0,a0
1c007310:	92ba                	add	t0,t0,a4
1c007312:	89b6                	mv	s3,a3
1c007314:	00169a93          	slli	s5,a3,0x1
1c007318:	8926                	mv	s2,s1
1c00731a:	407282b3          	sub	t0,t0,t2
1c00731e:	12f9                	addi	t0,t0,-2
1c007320:	0012d293          	srli	t0,t0,0x1
1c007324:	0285                	addi	t0,t0,1
1c007326:	0202c07b          	lp.setup	x0,t0,1c007366 <KerConv3x3Stride2_Body_SQ8+0xc2>
1c00732a:	889e                	mv	a7,t2
1c00732c:	2138f68b          	p.lw	a3,s3(a7!)
1c007330:	8fc6                	mv	t6,a7
1c007332:	8f22                	mv	t5,s0
1c007334:	02947863          	bleu	s1,s0,1c007364 <KerConv3x3Stride2_Body_SQ8+0xc0>
1c007338:	98ce                	add	a7,a7,s3
1c00733a:	882e                	mv	a6,a1
1c00733c:	40890533          	sub	a0,s2,s0
1c007340:	011540fb          	lp.setup	x1,a0,1c007362 <KerConv3x3Stride2_Body_SQ8+0xbe>
1c007344:	00082783          	lw	a5,0(a6)
1c007348:	215ff60b          	p.lw	a2,s5(t6!)
1c00734c:	2158f70b          	p.lw	a4,s5(a7!)
1c007350:	b86697d7          	pv.sdotsp.b	a5,a3,t1
1c007354:	b9c617d7          	pv.sdotsp.b	a5,a2,t3
1c007358:	b9d717d7          	pv.sdotsp.b	a5,a4,t4
1c00735c:	00f86a2b          	p.sw	a5,s4(a6!)
1c007360:	0f05                	addi	t5,t5,1
1c007362:	86ba                	mv	a3,a4
1c007364:	0591                	addi	a1,a1,4
1c007366:	0389                	addi	t2,t2,2
1c007368:	4472                	lw	s0,28(sp)
1c00736a:	44e2                	lw	s1,24(sp)
1c00736c:	4952                	lw	s2,20(sp)
1c00736e:	49c2                	lw	s3,16(sp)
1c007370:	4a32                	lw	s4,12(sp)
1c007372:	4aa2                	lw	s5,8(sp)
1c007374:	6105                	addi	sp,sp,32
1c007376:	8082                	ret

1c007378 <KerConv2x3from3x3Stride2_V_SQ8>:
1c007378:	1101                	addi	sp,sp,-32
1c00737a:	ce22                	sw	s0,28(sp)
1c00737c:	cc26                	sw	s1,24(sp)
1c00737e:	ca4a                	sw	s2,20(sp)
1c007380:	c84e                	sw	s3,16(sp)
1c007382:	c652                	sw	s4,12(sp)
1c007384:	5302                	lw	t1,32(sp)
1c007386:	5e12                	lw	t3,36(sp)
1c007388:	0a0e0663          	beqz	t3,1c007434 <KerConv2x3from3x3Stride2_V_SQ8+0xbc>
1c00738c:	00035f83          	lhu	t6,0(t1)
1c007390:	00335f03          	lhu	t5,3(t1)
1c007394:	00635283          	lhu	t0,6(t1)
1c007398:	0a17a563          	p.beqimm	a5,1,1c007442 <KerConv2x3from3x3Stride2_V_SQ8+0xca>
1c00739c:	00179313          	slli	t1,a5,0x1
1c0073a0:	40c30633          	sub	a2,t1,a2
1c0073a4:	02d78333          	mul	t1,a5,a3
1c0073a8:	030a                	slli	t1,t1,0x2
1c0073aa:	989a                	add	a7,a7,t1
1c0073ac:	42b60533          	p.mac	a0,a2,a1
1c0073b0:	20b57e0b          	p.lw	t3,a1(a0!)
1c0073b4:	893e                	mv	s2,a5
1c0073b6:	0507fb63          	bleu	a6,a5,1c00740c <KerConv2x3from3x3Stride2_V_SQ8+0x94>
1c0073ba:	00269993          	slli	s3,a3,0x2
1c0073be:	00159a13          	slli	s4,a1,0x1
1c0073c2:	00b504b3          	add	s1,a0,a1
1c0073c6:	86c6                	mv	a3,a7
1c0073c8:	842a                	mv	s0,a0
1c0073ca:	40f803b3          	sub	t2,a6,a5
1c0073ce:	0103c0fb          	lp.setup	x1,t2,1c0073ee <KerConv2x3from3x3Stride2_V_SQ8+0x76>
1c0073d2:	4290                	lw	a2,0(a3)
1c0073d4:	21447e8b          	p.lw	t4,s4(s0!)
1c0073d8:	2144f30b          	p.lw	t1,s4(s1!)
1c0073dc:	b9fe1657          	pv.sdotsp.b	a2,t3,t6
1c0073e0:	b9ee9657          	pv.sdotsp.b	a2,t4,t5
1c0073e4:	b8531657          	pv.sdotsp.b	a2,t1,t0
1c0073e8:	00c6e9ab          	p.sw	a2,s3(a3!)
1c0073ec:	0785                	addi	a5,a5,1
1c0073ee:	8e1a                	mv	t3,t1
1c0073f0:	fff80793          	addi	a5,a6,-1
1c0073f4:	412787b3          	sub	a5,a5,s2
1c0073f8:	86ae                	mv	a3,a1
1c0073fa:	42b786b3          	p.mac	a3,a5,a1
1c0073fe:	00169793          	slli	a5,a3,0x1
1c007402:	953e                	add	a0,a0,a5
1c007404:	41280933          	sub	s2,a6,s2
1c007408:	433908b3          	p.mac	a7,s2,s3
1c00740c:	01070d63          	beq	a4,a6,1c007426 <KerConv2x3from3x3Stride2_V_SQ8+0xae>
1c007410:	0008a783          	lw	a5,0(a7)
1c007414:	4118                	lw	a4,0(a0)
1c007416:	8d0d                	sub	a0,a0,a1
1c007418:	4114                	lw	a3,0(a0)
1c00741a:	b9f697d7          	pv.sdotsp.b	a5,a3,t6
1c00741e:	b9e717d7          	pv.sdotsp.b	a5,a4,t5
1c007422:	00f8a023          	sw	a5,0(a7)
1c007426:	4472                	lw	s0,28(sp)
1c007428:	44e2                	lw	s1,24(sp)
1c00742a:	4952                	lw	s2,20(sp)
1c00742c:	49c2                	lw	s3,16(sp)
1c00742e:	4a32                	lw	s4,12(sp)
1c007430:	6105                	addi	sp,sp,32
1c007432:	8082                	ret
1c007434:	00135f83          	lhu	t6,1(t1)
1c007438:	00435f03          	lhu	t5,4(t1)
1c00743c:	00735283          	lhu	t0,7(t1)
1c007440:	bfa1                	j	1c007398 <KerConv2x3from3x3Stride2_V_SQ8+0x20>
1c007442:	00007e57          	pv.add.sci.b	t3,zero,0
1c007446:	4781                	li	a5,0
1c007448:	b7b5                	j	1c0073b4 <KerConv2x3from3x3Stride2_V_SQ8+0x3c>

1c00744a <KerConv3x2from3x3Stride2_H_SQ8>:
1c00744a:	4302                	lw	t1,0(sp)
1c00744c:	00171693          	slli	a3,a4,0x1
1c007450:	40c68633          	sub	a2,a3,a2
1c007454:	9532                	add	a0,a0,a2
1c007456:	02030f63          	beqz	t1,1c007494 <KerConv3x2from3x3Stride2_H_SQ8+0x4a>
1c00745a:	0008a303          	lw	t1,0(a7)
1c00745e:	b2107357          	pv.insert.b	t1,zero,3
1c007462:	0038ae03          	lw	t3,3(a7)
1c007466:	b2107e57          	pv.insert.b	t3,zero,3
1c00746a:	02f77463          	bleu	a5,a4,1c007492 <KerConv3x2from3x3Stride2_H_SQ8+0x48>
1c00746e:	95aa                	add	a1,a1,a0
1c007470:	40e78eb3          	sub	t4,a5,a4
1c007474:	00eec0fb          	lp.setup	x1,t4,1c007490 <KerConv3x2from3x3Stride2_H_SQ8+0x46>
1c007478:	00082783          	lw	a5,0(a6)
1c00747c:	0025288b          	p.lw	a7,2(a0!)
1c007480:	0025a68b          	p.lw	a3,2(a1!)
1c007484:	b86897d7          	pv.sdotsp.b	a5,a7,t1
1c007488:	b9c697d7          	pv.sdotsp.b	a5,a3,t3
1c00748c:	00f8222b          	p.sw	a5,4(a6!)
1c007490:	0705                	addi	a4,a4,1
1c007492:	8082                	ret
1c007494:	0038a303          	lw	t1,3(a7)
1c007498:	b2107357          	pv.insert.b	t1,zero,3
1c00749c:	0068ae03          	lw	t3,6(a7)
1c0074a0:	b2107e57          	pv.insert.b	t3,zero,3
1c0074a4:	b7d9                	j	1c00746a <KerConv3x2from3x3Stride2_H_SQ8+0x20>

1c0074a6 <KerConv3x3BorderStride2_SQ8>:
1c0074a6:	715d                	addi	sp,sp,-80
1c0074a8:	c686                	sw	ra,76(sp)
1c0074aa:	c4a2                	sw	s0,72(sp)
1c0074ac:	c2a6                	sw	s1,68(sp)
1c0074ae:	c0ca                	sw	s2,64(sp)
1c0074b0:	de4e                	sw	s3,60(sp)
1c0074b2:	dc52                	sw	s4,56(sp)
1c0074b4:	da56                	sw	s5,52(sp)
1c0074b6:	d85a                	sw	s6,48(sp)
1c0074b8:	d65e                	sw	s7,44(sp)
1c0074ba:	d462                	sw	s8,40(sp)
1c0074bc:	d266                	sw	s9,36(sp)
1c0074be:	d06a                	sw	s10,32(sp)
1c0074c0:	ce6e                	sw	s11,28(sp)
1c0074c2:	8a2a                	mv	s4,a0
1c0074c4:	8aae                	mv	s5,a1
1c0074c6:	8b32                	mv	s6,a2
1c0074c8:	8936                	mv	s2,a3
1c0074ca:	84be                	mv	s1,a5
1c0074cc:	89c2                	mv	s3,a6
1c0074ce:	8c46                	mv	s8,a7
1c0074d0:	47f6                	lw	a5,92(sp)
1c0074d2:	5406                	lw	s0,96(sp)
1c0074d4:	78047bd7          	pv.extract.b	s7,s0,0
1c0074d8:	78147457          	pv.extract.b	s0,s0,2
1c0074dc:	7a07fdd7          	pv.extract.b	s11,a5,1
1c0074e0:	7817fd57          	pv.extract.b	s10,a5,2
1c0074e4:	7a17fcd7          	pv.extract.b	s9,a5,3
1c0074e8:	7807f7d7          	pv.extract.b	a5,a5,0
1c0074ec:	e795                	bnez	a5,1c007518 <KerConv3x3BorderStride2_SQ8+0x72>
1c0074ee:	040d9063          	bnez	s11,1c00752e <KerConv3x3BorderStride2_SQ8+0x88>
1c0074f2:	060d1263          	bnez	s10,1c007556 <KerConv3x3BorderStride2_SQ8+0xb0>
1c0074f6:	060c9d63          	bnez	s9,1c007570 <KerConv3x3BorderStride2_SQ8+0xca>
1c0074fa:	40b6                	lw	ra,76(sp)
1c0074fc:	4426                	lw	s0,72(sp)
1c0074fe:	4496                	lw	s1,68(sp)
1c007500:	4906                	lw	s2,64(sp)
1c007502:	59f2                	lw	s3,60(sp)
1c007504:	5a62                	lw	s4,56(sp)
1c007506:	5ad2                	lw	s5,52(sp)
1c007508:	5b42                	lw	s6,48(sp)
1c00750a:	5bb2                	lw	s7,44(sp)
1c00750c:	5c22                	lw	s8,40(sp)
1c00750e:	5c92                	lw	s9,36(sp)
1c007510:	5d02                	lw	s10,32(sp)
1c007512:	4df2                	lw	s11,28(sp)
1c007514:	6161                	addi	sp,sp,80
1c007516:	8082                	ret
1c007518:	c202                	sw	zero,4(sp)
1c00751a:	c032                	sw	a2,0(sp)
1c00751c:	88ae                	mv	a7,a1
1c00751e:	4866                	lw	a6,88(sp)
1c007520:	47d6                	lw	a5,84(sp)
1c007522:	4746                	lw	a4,80(sp)
1c007524:	86a6                	mv	a3,s1
1c007526:	8622                	mv	a2,s0
1c007528:	85ca                	mv	a1,s2
1c00752a:	35b9                	jal	1c007378 <KerConv2x3from3x3Stride2_V_SQ8>
1c00752c:	b7c9                	j	1c0074ee <KerConv3x3BorderStride2_SQ8+0x48>
1c00752e:	00249893          	slli	a7,s1,0x2
1c007532:	18f1                	addi	a7,a7,-4
1c007534:	001c1513          	slli	a0,s8,0x1
1c007538:	41750533          	sub	a0,a0,s7
1c00753c:	4785                	li	a5,1
1c00753e:	c23e                	sw	a5,4(sp)
1c007540:	c05a                	sw	s6,0(sp)
1c007542:	98d6                	add	a7,a7,s5
1c007544:	4866                	lw	a6,88(sp)
1c007546:	47d6                	lw	a5,84(sp)
1c007548:	4746                	lw	a4,80(sp)
1c00754a:	86a6                	mv	a3,s1
1c00754c:	8622                	mv	a2,s0
1c00754e:	85ca                	mv	a1,s2
1c007550:	9552                	add	a0,a0,s4
1c007552:	351d                	jal	1c007378 <KerConv2x3from3x3Stride2_V_SQ8>
1c007554:	bf79                	j	1c0074f2 <KerConv3x3BorderStride2_SQ8+0x4c>
1c007556:	00299813          	slli	a6,s3,0x2
1c00755a:	c002                	sw	zero,0(sp)
1c00755c:	88da                	mv	a7,s6
1c00755e:	9856                	add	a6,a6,s5
1c007560:	87e2                	mv	a5,s8
1c007562:	874e                	mv	a4,s3
1c007564:	86a6                	mv	a3,s1
1c007566:	865e                	mv	a2,s7
1c007568:	85ca                	mv	a1,s2
1c00756a:	8552                	mv	a0,s4
1c00756c:	3df9                	jal	1c00744a <KerConv3x2from3x3Stride2_H_SQ8>
1c00756e:	b761                	j	1c0074f6 <KerConv3x3BorderStride2_SQ8+0x50>
1c007570:	884e                	mv	a6,s3
1c007572:	4766                	lw	a4,88(sp)
1c007574:	42e48833          	p.mac	a6,s1,a4
1c007578:	080a                	slli	a6,a6,0x2
1c00757a:	00171793          	slli	a5,a4,0x1
1c00757e:	40878433          	sub	s0,a5,s0
1c007582:	4785                	li	a5,1
1c007584:	c03e                	sw	a5,0(sp)
1c007586:	88da                	mv	a7,s6
1c007588:	9856                	add	a6,a6,s5
1c00758a:	87e2                	mv	a5,s8
1c00758c:	874e                	mv	a4,s3
1c00758e:	86a6                	mv	a3,s1
1c007590:	865e                	mv	a2,s7
1c007592:	85ca                	mv	a1,s2
1c007594:	8552                	mv	a0,s4
1c007596:	43240533          	p.mac	a0,s0,s2
1c00759a:	3d45                	jal	1c00744a <KerConv3x2from3x3Stride2_H_SQ8>
1c00759c:	bfb9                	j	1c0074fa <KerConv3x3BorderStride2_SQ8+0x54>

1c00759e <KerParConv3x3Stride1_SQ8>:

void KerParConv3x3Stride1_SQ8(KerConv_SQ8_T *Arg)

{
1c00759e:	7171                	addi	sp,sp,-176
1c0075a0:	d706                	sw	ra,172(sp)
1c0075a2:	d522                	sw	s0,168(sp)
1c0075a4:	d326                	sw	s1,164(sp)
1c0075a6:	d14a                	sw	s2,160(sp)
1c0075a8:	cf4e                	sw	s3,156(sp)
1c0075aa:	cd52                	sw	s4,152(sp)
1c0075ac:	cb56                	sw	s5,148(sp)
1c0075ae:	c95a                	sw	s6,144(sp)
1c0075b0:	c75e                	sw	s7,140(sp)
1c0075b2:	c562                	sw	s8,136(sp)
1c0075b4:	c366                	sw	s9,132(sp)
1c0075b6:	c16a                	sw	s10,128(sp)
1c0075b8:	deee                	sw	s11,124(sp)
1c0075ba:	84aa                	mv	s1,a0
	unsigned int FS=3, S=1;
	signed char * __restrict__ In = Arg->In;
1c0075bc:	4110                	lw	a2,0(a0)
1c0075be:	cab2                	sw	a2,84(sp)
	unsigned int W = Arg->W;
1c0075c0:	00455683          	lhu	a3,4(a0)
1c0075c4:	d636                	sw	a3,44(sp)
	unsigned int H = Arg->H;
1c0075c6:	00855703          	lhu	a4,8(a0)
1c0075ca:	d83a                	sw	a4,48(sp)
	int TotalInFeatures = Arg->TotalInFeatures;
1c0075cc:	01055783          	lhu	a5,16(a0)
1c0075d0:	cebe                	sw	a5,92(sp)
	unsigned int OutFeatures = Arg->OutFeatures;
1c0075d2:	00e55703          	lhu	a4,14(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c0075d6:	4950                	lw	a2,20(a0)
1c0075d8:	d2b2                	sw	a2,100(sp)
	int * __restrict__ Out = Arg->Out;
1c0075da:	4d54                	lw	a3,28(a0)
1c0075dc:	d6b6                	sw	a3,108(sp)
	unsigned int CoreId = gap_coreid();
1c0075de:	f1402473          	csrr	s0,mhartid
1c0075e2:	c8041433          	p.extractu	s0,s0,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0075e6:	f83737b3          	p.bclr	a5,a4,28,3
1c0075ea:	00f037b3          	snez	a5,a5
1c0075ee:	00375693          	srli	a3,a4,0x3
1c0075f2:	97b6                	add	a5,a5,a3
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c0075f4:	02f40433          	mul	s0,s0,a5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c0075f8:	97a2                	add	a5,a5,s0
1c0075fa:	04e7c7b3          	p.min	a5,a5,a4
1c0075fe:	d4be                	sw	a5,104(sp)
	v4s PadIn = Arg->Pad;
1c007600:	02052903          	lw	s2,32(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c007604:	78097657          	pv.extract.b	a2,s2,0
1c007608:	00655503          	lhu	a0,6(a0)
1c00760c:	ffe50793          	addi	a5,a0,-2
1c007610:	97b2                	add	a5,a5,a2
1c007612:	7a097757          	pv.extract.b	a4,s2,1
1c007616:	973e                	add	a4,a4,a5
1c007618:	d43a                	sw	a4,40(sp)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00761a:	04c74733          	p.min	a4,a4,a2
1c00761e:	de3a                	sw	a4,60(sp)
1c007620:	4685                	li	a3,1
1c007622:	458d                	li	a1,3
1c007624:	d9cff0ef          	jal	ra,1c006bc0 <LastDefinedOutput>
1c007628:	57f2                	lw	a5,60(sp)
1c00762a:	04a7eab3          	p.max	s5,a5,a0
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00762e:	78197657          	pv.extract.b	a2,s2,2
1c007632:	00a4d503          	lhu	a0,10(s1)
1c007636:	ffe50993          	addi	s3,a0,-2
1c00763a:	99b2                	add	s3,s3,a2
1c00763c:	7a1977d7          	pv.extract.b	a5,s2,3
1c007640:	99be                	add	s3,s3,a5
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c007642:	04c9ca33          	p.min	s4,s3,a2
1c007646:	4685                	li	a3,1
1c007648:	458d                	li	a1,3
1c00764a:	d76ff0ef          	jal	ra,1c006bc0 <LastDefinedOutput>
1c00764e:	04aa6b33          	p.max	s6,s4,a0

	unsigned int InFeatures = Arg->InFeatures;
1c007652:	00c4d483          	lhu	s1,12(s1)
1c007656:	c2a6                	sw	s1,68(sp)
	unsigned int Iter = Max(0, Last-First);
1c007658:	5626                	lw	a2,104(sp)
1c00765a:	408607b3          	sub	a5,a2,s0
1c00765e:	0407e7b3          	p.max	a5,a5,zero
1c007662:	d0be                	sw	a5,96(sp)
	for (unsigned int i=0; i<Iter/2; i++) {
1c007664:	0017d693          	srli	a3,a5,0x1
1c007668:	c4b6                	sw	a3,72(sp)
1c00766a:	cec5                	beqz	a3,1c007722 <KerParConv3x3Stride1_SQ8+0x184>
		unsigned int of = First + 2*i;
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c00766c:	5732                	lw	a4,44(sp)
1c00766e:	57c2                	lw	a5,48(sp)
1c007670:	02f70d33          	mul	s10,a4,a5
			int *out = Out+Wo*Ho*(of);
1c007674:	5622                	lw	a2,40(sp)
1c007676:	033607b3          	mul	a5,a2,s3
1c00767a:	00279713          	slli	a4,a5,0x2
			KerConv3x3Stride1_Body_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c00767e:	4676                	lw	a2,92(sp)
1c007680:	00361693          	slli	a3,a2,0x3
1c007684:	96b2                	add	a3,a3,a2
1c007686:	dc36                	sw	a3,56(sp)
1c007688:	0686                	slli	a3,a3,0x1
1c00768a:	c6b6                	sw	a3,76(sp)
1c00768c:	5d96                	lw	s11,100(sp)
1c00768e:	5662                	lw	a2,56(sp)
1c007690:	42860db3          	p.mac	s11,a2,s0
1c007694:	078e                	slli	a5,a5,0x3
1c007696:	c8be                	sw	a5,80(sp)
1c007698:	56b6                	lw	a3,108(sp)
1c00769a:	428706b3          	p.mac	a3,a4,s0
1c00769e:	c0b6                	sw	a3,64(sp)
1c0076a0:	00349793          	slli	a5,s1,0x3
1c0076a4:	97a6                	add	a5,a5,s1
1c0076a6:	ccbe                	sw	a5,88(sp)
	for (unsigned int i=0; i<Iter/2; i++) {
1c0076a8:	4b81                	li	s7,0
			if ((int)PadIn) KerConv3x3BorderStride1_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c0076aa:	8cca                	mv	s9,s2
1c0076ac:	a08d                	j	1c00770e <KerParConv3x3Stride1_SQ8+0x170>
1c0076ae:	94ea                	add	s1,s1,s10
1c0076b0:	0425                	addi	s0,s0,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c0076b2:	05840463          	beq	s0,s8,1c0076fa <KerParConv3x3Stride1_SQ8+0x15c>
			KerConv3x3Stride1_Body_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c0076b6:	c84a                	sw	s2,16(sp)
1c0076b8:	c65a                	sw	s6,12(sp)
1c0076ba:	c452                	sw	s4,8(sp)
1c0076bc:	c24e                	sw	s3,4(sp)
1c0076be:	c056                	sw	s5,0(sp)
1c0076c0:	58f2                	lw	a7,60(sp)
1c0076c2:	5822                	lw	a6,40(sp)
1c0076c4:	57c2                	lw	a5,48(sp)
1c0076c6:	5732                	lw	a4,44(sp)
1c0076c8:	56e2                	lw	a3,56(sp)
1c0076ca:	8622                	mv	a2,s0
1c0076cc:	55d2                	lw	a1,52(sp)
1c0076ce:	8526                	mv	a0,s1
1c0076d0:	d0aff0ef          	jal	ra,1c006bda <KerConv3x3Stride1_Body_2Out_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride1_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c0076d4:	fc0c8de3          	beqz	s9,1c0076ae <KerParConv3x3Stride1_SQ8+0x110>
1c0076d8:	ca4a                	sw	s2,20(sp)
1c0076da:	c84a                	sw	s2,16(sp)
1c0076dc:	c65a                	sw	s6,12(sp)
1c0076de:	c452                	sw	s4,8(sp)
1c0076e0:	c24e                	sw	s3,4(sp)
1c0076e2:	c056                	sw	s5,0(sp)
1c0076e4:	58f2                	lw	a7,60(sp)
1c0076e6:	5822                	lw	a6,40(sp)
1c0076e8:	57c2                	lw	a5,48(sp)
1c0076ea:	5732                	lw	a4,44(sp)
1c0076ec:	56e2                	lw	a3,56(sp)
1c0076ee:	8622                	mv	a2,s0
1c0076f0:	55d2                	lw	a1,52(sp)
1c0076f2:	8526                	mv	a0,s1
1c0076f4:	fd8ff0ef          	jal	ra,1c006ecc <KerConv3x3BorderStride1_2Out_SQ8>
1c0076f8:	bf5d                	j	1c0076ae <KerParConv3x3Stride1_SQ8+0x110>
	for (unsigned int i=0; i<Iter/2; i++) {
1c0076fa:	0b85                	addi	s7,s7,1
1c0076fc:	46b6                	lw	a3,76(sp)
1c0076fe:	9db6                	add	s11,s11,a3
1c007700:	4706                	lw	a4,64(sp)
1c007702:	47c6                	lw	a5,80(sp)
1c007704:	973e                	add	a4,a4,a5
1c007706:	c0ba                	sw	a4,64(sp)
1c007708:	4626                	lw	a2,72(sp)
1c00770a:	01760c63          	beq	a2,s7,1c007722 <KerParConv3x3Stride1_SQ8+0x184>
		for (unsigned int If=0; If<InFeatures; If++) {
1c00770e:	4716                	lw	a4,68(sp)
1c007710:	d76d                	beqz	a4,1c0076fa <KerParConv3x3Stride1_SQ8+0x15c>
			int *out = Out+Wo*Ho*(of);
1c007712:	4786                	lw	a5,64(sp)
1c007714:	da3e                	sw	a5,52(sp)
1c007716:	44d6                	lw	s1,84(sp)
1c007718:	4666                	lw	a2,88(sp)
1c00771a:	00cd8c33          	add	s8,s11,a2
1c00771e:	846e                	mv	s0,s11
1c007720:	bf59                	j	1c0076b6 <KerParConv3x3Stride1_SQ8+0x118>
		}
	}
	if (Iter&0x1) {
1c007722:	5686                	lw	a3,96(sp)
1c007724:	fc16b7b3          	p.bclr	a5,a3,30,1
1c007728:	cbc1                	beqz	a5,1c0077b8 <KerParConv3x3Stride1_SQ8+0x21a>
		unsigned int of = Last-1;
1c00772a:	57a6                	lw	a5,104(sp)
1c00772c:	fff78713          	addi	a4,a5,-1
		for (unsigned int If=0; If<InFeatures; If++) {
1c007730:	4616                	lw	a2,68(sp)
1c007732:	c259                	beqz	a2,1c0077b8 <KerParConv3x3Stride1_SQ8+0x21a>
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c007734:	56b2                	lw	a3,44(sp)
1c007736:	57c2                	lw	a5,48(sp)
1c007738:	02f68d33          	mul	s10,a3,a5
1c00773c:	4676                	lw	a2,92(sp)
1c00773e:	02e607b3          	mul	a5,a2,a4
			int *out = Out+Wo*Ho*(of);
1c007742:	5622                	lw	a2,40(sp)
1c007744:	033606b3          	mul	a3,a2,s3
1c007748:	068a                	slli	a3,a3,0x2
1c00774a:	5bb6                	lw	s7,108(sp)
1c00774c:	42e68bb3          	p.mac	s7,a3,a4
1c007750:	4456                	lw	s0,84(sp)
1c007752:	00379493          	slli	s1,a5,0x3
1c007756:	94be                	add	s1,s1,a5
1c007758:	5696                	lw	a3,100(sp)
1c00775a:	94b6                	add	s1,s1,a3
1c00775c:	4716                	lw	a4,68(sp)
1c00775e:	97ba                	add	a5,a5,a4
1c007760:	00379c13          	slli	s8,a5,0x3
1c007764:	97e2                	add	a5,a5,s8
1c007766:	00f68c33          	add	s8,a3,a5
			KerConv3x3Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv3x3BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00776a:	8cca                	mv	s9,s2
1c00776c:	5df2                	lw	s11,60(sp)
1c00776e:	a029                	j	1c007778 <KerParConv3x3Stride1_SQ8+0x1da>
1c007770:	946a                	add	s0,s0,s10
1c007772:	04a5                	addi	s1,s1,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c007774:	05848263          	beq	s1,s8,1c0077b8 <KerParConv3x3Stride1_SQ8+0x21a>
			KerConv3x3Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c007778:	c64a                	sw	s2,12(sp)
1c00777a:	c45a                	sw	s6,8(sp)
1c00777c:	c252                	sw	s4,4(sp)
1c00777e:	c04e                	sw	s3,0(sp)
1c007780:	88d6                	mv	a7,s5
1c007782:	886e                	mv	a6,s11
1c007784:	57a2                	lw	a5,40(sp)
1c007786:	5742                	lw	a4,48(sp)
1c007788:	56b2                	lw	a3,44(sp)
1c00778a:	8626                	mv	a2,s1
1c00778c:	85de                	mv	a1,s7
1c00778e:	8522                	mv	a0,s0
1c007790:	83bff0ef          	jal	ra,1c006fca <KerConv3x3Stride1_Body_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c007794:	fc0c8ee3          	beqz	s9,1c007770 <KerParConv3x3Stride1_SQ8+0x1d2>
1c007798:	c84a                	sw	s2,16(sp)
1c00779a:	c64a                	sw	s2,12(sp)
1c00779c:	c45a                	sw	s6,8(sp)
1c00779e:	c252                	sw	s4,4(sp)
1c0077a0:	c04e                	sw	s3,0(sp)
1c0077a2:	88d6                	mv	a7,s5
1c0077a4:	886e                	mv	a6,s11
1c0077a6:	57a2                	lw	a5,40(sp)
1c0077a8:	5742                	lw	a4,48(sp)
1c0077aa:	56b2                	lw	a3,44(sp)
1c0077ac:	8626                	mv	a2,s1
1c0077ae:	85de                	mv	a1,s7
1c0077b0:	8522                	mv	a0,s0
1c0077b2:	a03ff0ef          	jal	ra,1c0071b4 <KerConv3x3BorderStride1_SQ8>
1c0077b6:	bf6d                	j	1c007770 <KerParConv3x3Stride1_SQ8+0x1d2>
1c0077b8:	002047b7          	lui	a5,0x204
1c0077bc:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0077c0:	01c7e703          	p.elw	a4,28(a5)
		}
	}
	gap_waitbarrier(0);
}
1c0077c4:	50ba                	lw	ra,172(sp)
1c0077c6:	542a                	lw	s0,168(sp)
1c0077c8:	549a                	lw	s1,164(sp)
1c0077ca:	590a                	lw	s2,160(sp)
1c0077cc:	49fa                	lw	s3,156(sp)
1c0077ce:	4a6a                	lw	s4,152(sp)
1c0077d0:	4ada                	lw	s5,148(sp)
1c0077d2:	4b4a                	lw	s6,144(sp)
1c0077d4:	4bba                	lw	s7,140(sp)
1c0077d6:	4c2a                	lw	s8,136(sp)
1c0077d8:	4c9a                	lw	s9,132(sp)
1c0077da:	4d0a                	lw	s10,128(sp)
1c0077dc:	5df6                	lw	s11,124(sp)
1c0077de:	614d                	addi	sp,sp,176
1c0077e0:	8082                	ret

1c0077e2 <KerParConv3x3Stride2_SQ8>:

void KerParConv3x3Stride2_SQ8(KerConv_SQ8_T *Arg)

{
1c0077e2:	7175                	addi	sp,sp,-144
1c0077e4:	c706                	sw	ra,140(sp)
1c0077e6:	c522                	sw	s0,136(sp)
1c0077e8:	c326                	sw	s1,132(sp)
1c0077ea:	c14a                	sw	s2,128(sp)
1c0077ec:	dece                	sw	s3,124(sp)
1c0077ee:	dcd2                	sw	s4,120(sp)
1c0077f0:	dad6                	sw	s5,116(sp)
1c0077f2:	d8da                	sw	s6,112(sp)
1c0077f4:	d6de                	sw	s7,108(sp)
1c0077f6:	d4e2                	sw	s8,104(sp)
1c0077f8:	d2e6                	sw	s9,100(sp)
1c0077fa:	d0ea                	sw	s10,96(sp)
1c0077fc:	ceee                	sw	s11,92(sp)
1c0077fe:	8aaa                	mv	s5,a0
	unsigned int FS=3, S=2;
	signed char * __restrict__ In = Arg->In;
1c007800:	4118                	lw	a4,0(a0)
1c007802:	c4ba                	sw	a4,72(sp)
	unsigned int W = Arg->W;
1c007804:	00455783          	lhu	a5,4(a0)
1c007808:	d63e                	sw	a5,44(sp)
	unsigned int H = Arg->H;
1c00780a:	00855703          	lhu	a4,8(a0)
1c00780e:	d83a                	sw	a4,48(sp)
	int TotalInFeatures = Arg->TotalInFeatures;
1c007810:	01055403          	lhu	s0,16(a0)
	unsigned int OutFeatures = Arg->OutFeatures;
1c007814:	00e55703          	lhu	a4,14(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c007818:	01452d83          	lw	s11,20(a0)
	int * __restrict__ Out = Arg->Out;
1c00781c:	4d44                	lw	s1,28(a0)
	unsigned int CoreId = gap_coreid();
1c00781e:	f1402d73          	csrr	s10,mhartid
1c007822:	c80d1d33          	p.extractu	s10,s10,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c007826:	f83737b3          	p.bclr	a5,a4,28,3
1c00782a:	00f037b3          	snez	a5,a5
1c00782e:	00375693          	srli	a3,a4,0x3
1c007832:	97b6                	add	a5,a5,a3
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c007834:	02fd0d33          	mul	s10,s10,a5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c007838:	97ea                	add	a5,a5,s10
1c00783a:	04e7c7b3          	p.min	a5,a5,a4
1c00783e:	de3e                	sw	a5,60(sp)
	v4s PadIn = Arg->Pad;
1c007840:	02052903          	lw	s2,32(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c007844:	78097657          	pv.extract.b	a2,s2,0
1c007848:	00655503          	lhu	a0,6(a0)
1c00784c:	ffd50793          	addi	a5,a0,-3
1c007850:	97b2                	add	a5,a5,a2
1c007852:	7a097757          	pv.extract.b	a4,s2,1
1c007856:	82e7a7db          	p.addun	a5,a5,a4,1
1c00785a:	0785                	addi	a5,a5,1
1c00785c:	d23e                	sw	a5,36(sp)
	return ((Pad+Stride-1)/Stride);
1c00785e:	00160793          	addi	a5,a2,1
1c007862:	8385                	srli	a5,a5,0x1
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c007864:	5712                	lw	a4,36(sp)
1c007866:	04f747b3          	p.min	a5,a4,a5
1c00786a:	d43e                	sw	a5,40(sp)
1c00786c:	4689                	li	a3,2
1c00786e:	458d                	li	a1,3
1c007870:	b50ff0ef          	jal	ra,1c006bc0 <LastDefinedOutput>
1c007874:	57a2                	lw	a5,40(sp)
1c007876:	04a7e533          	p.max	a0,a5,a0
1c00787a:	da2a                	sw	a0,52(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00787c:	78197657          	pv.extract.b	a2,s2,2
1c007880:	00aad503          	lhu	a0,10(s5)
1c007884:	ffd50993          	addi	s3,a0,-3
1c007888:	99b2                	add	s3,s3,a2
1c00788a:	7a1977d7          	pv.extract.b	a5,s2,3
1c00788e:	82f9a9db          	p.addun	s3,s3,a5,1
1c007892:	0985                	addi	s3,s3,1
	return ((Pad+Stride-1)/Stride);
1c007894:	00160a13          	addi	s4,a2,1
1c007898:	001a5a13          	srli	s4,s4,0x1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00789c:	0549ca33          	p.min	s4,s3,s4
1c0078a0:	4689                	li	a3,2
1c0078a2:	458d                	li	a1,3
1c0078a4:	b1cff0ef          	jal	ra,1c006bc0 <LastDefinedOutput>
1c0078a8:	04aa6b33          	p.max	s6,s4,a0

	unsigned int InFeatures = Arg->InFeatures;
1c0078ac:	00cada83          	lhu	s5,12(s5)
1c0078b0:	dc56                	sw	s5,56(sp)
	for (unsigned int of=First; of<Last; of++) 
1c0078b2:	5772                	lw	a4,60(sp)
1c0078b4:	0aed7163          	bleu	a4,s10,1c007956 <KerParConv3x3Stride2_SQ8+0x174>
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c0078b8:	57b2                	lw	a5,44(sp)
1c0078ba:	5742                	lw	a4,48(sp)
1c0078bc:	02e78cb3          	mul	s9,a5,a4
			int *out = Out+Wo*Ho*(of);
1c0078c0:	5712                	lw	a4,36(sp)
1c0078c2:	033707b3          	mul	a5,a4,s3
1c0078c6:	078a                	slli	a5,a5,0x2
1c0078c8:	c0be                	sw	a5,64(sp)
1c0078ca:	00341793          	slli	a5,s0,0x3
1c0078ce:	97a2                	add	a5,a5,s0
1c0078d0:	c2be                	sw	a5,68(sp)
1c0078d2:	42fd0db3          	p.mac	s11,s10,a5
1c0078d6:	8aa6                	mv	s5,s1
1c0078d8:	4786                	lw	a5,64(sp)
1c0078da:	42fd0ab3          	p.mac	s5,s10,a5
1c0078de:	5762                	lw	a4,56(sp)
1c0078e0:	00371793          	slli	a5,a4,0x3
1c0078e4:	97ba                	add	a5,a5,a4
1c0078e6:	c6be                	sw	a5,76(sp)
			KerConv3x3Stride2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv3x3BorderStride2_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c0078e8:	8c4a                	mv	s8,s2
1c0078ea:	a8a9                	j	1c007944 <KerParConv3x3Stride2_SQ8+0x162>
1c0078ec:	94e6                	add	s1,s1,s9
1c0078ee:	0425                	addi	s0,s0,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c0078f0:	05740263          	beq	s0,s7,1c007934 <KerParConv3x3Stride2_SQ8+0x152>
			KerConv3x3Stride2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c0078f4:	c64a                	sw	s2,12(sp)
1c0078f6:	c45a                	sw	s6,8(sp)
1c0078f8:	c252                	sw	s4,4(sp)
1c0078fa:	c04e                	sw	s3,0(sp)
1c0078fc:	58d2                	lw	a7,52(sp)
1c0078fe:	5822                	lw	a6,40(sp)
1c007900:	5792                	lw	a5,36(sp)
1c007902:	5742                	lw	a4,48(sp)
1c007904:	56b2                	lw	a3,44(sp)
1c007906:	8622                	mv	a2,s0
1c007908:	5582                	lw	a1,32(sp)
1c00790a:	8526                	mv	a0,s1
1c00790c:	999ff0ef          	jal	ra,1c0072a4 <KerConv3x3Stride2_Body_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride2_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c007910:	fc0c0ee3          	beqz	s8,1c0078ec <KerParConv3x3Stride2_SQ8+0x10a>
1c007914:	c84a                	sw	s2,16(sp)
1c007916:	c64a                	sw	s2,12(sp)
1c007918:	c45a                	sw	s6,8(sp)
1c00791a:	c252                	sw	s4,4(sp)
1c00791c:	c04e                	sw	s3,0(sp)
1c00791e:	58d2                	lw	a7,52(sp)
1c007920:	5822                	lw	a6,40(sp)
1c007922:	5792                	lw	a5,36(sp)
1c007924:	5742                	lw	a4,48(sp)
1c007926:	56b2                	lw	a3,44(sp)
1c007928:	8622                	mv	a2,s0
1c00792a:	5582                	lw	a1,32(sp)
1c00792c:	8526                	mv	a0,s1
1c00792e:	b79ff0ef          	jal	ra,1c0074a6 <KerConv3x3BorderStride2_SQ8>
1c007932:	bf6d                	j	1c0078ec <KerParConv3x3Stride2_SQ8+0x10a>
	for (unsigned int of=First; of<Last; of++) 
1c007934:	0d05                	addi	s10,s10,1
1c007936:	4716                	lw	a4,68(sp)
1c007938:	9dba                	add	s11,s11,a4
1c00793a:	4786                	lw	a5,64(sp)
1c00793c:	9abe                	add	s5,s5,a5
1c00793e:	5772                	lw	a4,60(sp)
1c007940:	01a70b63          	beq	a4,s10,1c007956 <KerParConv3x3Stride2_SQ8+0x174>
		for (unsigned int If=0; If<InFeatures; If++) {
1c007944:	57e2                	lw	a5,56(sp)
1c007946:	d7fd                	beqz	a5,1c007934 <KerParConv3x3Stride2_SQ8+0x152>
			int *out = Out+Wo*Ho*(of);
1c007948:	d056                	sw	s5,32(sp)
1c00794a:	44a6                	lw	s1,72(sp)
1c00794c:	47b6                	lw	a5,76(sp)
1c00794e:	00fd8bb3          	add	s7,s11,a5
1c007952:	846e                	mv	s0,s11
1c007954:	b745                	j	1c0078f4 <KerParConv3x3Stride2_SQ8+0x112>
1c007956:	002047b7          	lui	a5,0x204
1c00795a:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00795e:	01c7e703          	p.elw	a4,28(a5)
		}
	gap_waitbarrier(0);
}
1c007962:	40ba                	lw	ra,140(sp)
1c007964:	442a                	lw	s0,136(sp)
1c007966:	449a                	lw	s1,132(sp)
1c007968:	490a                	lw	s2,128(sp)
1c00796a:	59f6                	lw	s3,124(sp)
1c00796c:	5a66                	lw	s4,120(sp)
1c00796e:	5ad6                	lw	s5,116(sp)
1c007970:	5b46                	lw	s6,112(sp)
1c007972:	5bb6                	lw	s7,108(sp)
1c007974:	5c26                	lw	s8,104(sp)
1c007976:	5c96                	lw	s9,100(sp)
1c007978:	5d06                	lw	s10,96(sp)
1c00797a:	4df6                	lw	s11,92(sp)
1c00797c:	6149                	addi	sp,sp,144
1c00797e:	8082                	ret

1c007980 <LastDefinedOutput>:
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);

	if (DoScale) KerParPoolActivation(Out, Wo, Ho, First, Last, Infos, ACT_NONE);
1c007980:	fff68793          	addi	a5,a3,-1
1c007984:	953e                	add	a0,a0,a5
1c007986:	9532                	add	a0,a0,a2
1c007988:	0015d613          	srli	a2,a1,0x1
1c00798c:	8d11                	sub	a0,a0,a2
1c00798e:	15fd                	addi	a1,a1,-1
1c007990:	8185                	srli	a1,a1,0x1
1c007992:	8d0d                	sub	a0,a0,a1
1c007994:	02d55533          	divu	a0,a0,a3
1c007998:	8082                	ret

1c00799a <KerMaxPool2x2Stride2_SQ8>:
1c00799a:	715d                	addi	sp,sp,-80
1c00799c:	c6a2                	sw	s0,76(sp)
1c00799e:	c4a6                	sw	s1,72(sp)
1c0079a0:	c2ca                	sw	s2,68(sp)
1c0079a2:	c0ce                	sw	s3,64(sp)
1c0079a4:	de52                	sw	s4,60(sp)
1c0079a6:	dc56                	sw	s5,56(sp)
1c0079a8:	da5a                	sw	s6,52(sp)
1c0079aa:	d85e                	sw	s7,48(sp)
1c0079ac:	d662                	sw	s8,44(sp)
1c0079ae:	d466                	sw	s9,40(sp)
1c0079b0:	d26a                	sw	s10,36(sp)
1c0079b2:	d06e                	sw	s11,32(sp)
1c0079b4:	ce32                	sw	a2,28(sp)
1c0079b6:	c842                	sw	a6,16(sp)
1c0079b8:	ca46                	sw	a7,20(sp)
1c0079ba:	4346                	lw	t1,80(sp)
1c0079bc:	4666                	lw	a2,88(sp)
1c0079be:	4bf6                	lw	s7,92(sp)
1c0079c0:	78067857          	pv.extract.b	a6,a2,0
1c0079c4:	c242                	sw	a6,4(sp)
1c0079c6:	7a0678d7          	pv.extract.b	a7,a2,1
1c0079ca:	c646                	sw	a7,12(sp)
1c0079cc:	78167fd7          	pv.extract.b	t6,a2,2
1c0079d0:	7a167657          	pv.extract.b	a2,a2,3
1c0079d4:	cc32                	sw	a2,24(sp)
1c0079d6:	780bf657          	pv.extract.b	a2,s7,0
1c0079da:	c432                	sw	a2,8(sp)
1c0079dc:	781bfbd7          	pv.extract.b	s7,s7,2
1c0079e0:	0a080f63          	beqz	a6,1c007a9e <KerMaxPool2x2Stride2_SQ8+0x104>
1c0079e4:	899a                	mv	s3,t1
1c0079e6:	4d56                	lw	s10,84(sp)
1c0079e8:	37a37563          	bleu	s10,t1,1c007d52 <KerMaxPool2x2Stride2_SQ8+0x3b8>
1c0079ec:	00159393          	slli	t2,a1,0x1
1c0079f0:	00131613          	slli	a2,t1,0x1
1c0079f4:	41760833          	sub	a6,a2,s7
1c0079f8:	8f2a                	mv	t5,a0
1c0079fa:	42b80f33          	p.mac	t5,a6,a1
1c0079fe:	00180613          	addi	a2,a6,1
1c007a02:	8eaa                	mv	t4,a0
1c007a04:	42b60eb3          	p.mac	t4,a2,a1
1c007a08:	82ba                	mv	t0,a4
1c007a0a:	8e36                	mv	t3,a3
1c007a0c:	42e30e33          	p.mac	t3,t1,a4
1c007a10:	889a                	mv	a7,t1
1c007a12:	406d0833          	sub	a6,s10,t1
1c007a16:	00c840fb          	lp.setup	x1,a6,1c007a2e <KerMaxPool2x2Stride2_SQ8+0x94>
1c007a1a:	007f760b          	p.lb	a2,t2(t5!)
1c007a1e:	04066633          	p.max	a2,a2,zero
1c007a22:	007ef40b          	p.lb	s0,t2(t4!)
1c007a26:	04866633          	p.max	a2,a2,s0
1c007a2a:	00ce42ab          	p.sb	a2,t0(t3!)
1c007a2e:	0885                	addi	a7,a7,1
1c007a30:	060f9963          	bnez	t6,1c007aa2 <KerMaxPool2x2Stride2_SQ8+0x108>
1c007a34:	4642                	lw	a2,16(sp)
1c007a36:	40f60ab3          	sub	s5,a2,a5
1c007a3a:	001adb13          	srli	s6,s5,0x1
1c007a3e:	002b1493          	slli	s1,s6,0x2
1c007a42:	00159a13          	slli	s4,a1,0x1
1c007a46:	00199613          	slli	a2,s3,0x1
1c007a4a:	00179293          	slli	t0,a5,0x1
1c007a4e:	4822                	lw	a6,8(sp)
1c007a50:	410282b3          	sub	t0,t0,a6
1c007a54:	92a6                	add	t0,t0,s1
1c007a56:	41760833          	sub	a6,a2,s7
1c007a5a:	8416                	mv	s0,t0
1c007a5c:	42b80433          	p.mac	s0,a6,a1
1c007a60:	942a                	add	s0,s0,a0
1c007a62:	00180613          	addi	a2,a6,1
1c007a66:	42b602b3          	p.mac	t0,a2,a1
1c007a6a:	92aa                	add	t0,t0,a0
1c007a6c:	8c3a                	mv	s8,a4
1c007a6e:	83be                	mv	t2,a5
1c007a70:	42e983b3          	p.mac	t2,s3,a4
1c007a74:	93b6                	add	t2,t2,a3
1c007a76:	894e                	mv	s2,s3
1c007a78:	fc1abcb3          	p.bclr	s9,s5,30,1
1c007a7c:	c00abab3          	p.bclr	s5,s5,0,0
1c007a80:	00f68db3          	add	s11,a3,a5
1c007a84:	9aee                	add	s5,s5,s11
1c007a86:	413d08b3          	sub	a7,s10,s3
1c007a8a:	c046                	sw	a7,0(sp)
1c007a8c:	00198613          	addi	a2,s3,1
1c007a90:	00cd6463          	bltu	s10,a2,1c007a98 <KerMaxPool2x2Stride2_SQ8+0xfe>
1c007a94:	0e0d1463          	bnez	s10,1c007b7c <KerMaxPool2x2Stride2_SQ8+0x1e2>
1c007a98:	4605                	li	a2,1
1c007a9a:	c032                	sw	a2,0(sp)
1c007a9c:	a0c5                	j	1c007b7c <KerMaxPool2x2Stride2_SQ8+0x1e2>
1c007a9e:	0c0f8163          	beqz	t6,1c007b60 <KerMaxPool2x2Stride2_SQ8+0x1c6>
1c007aa2:	00179f93          	slli	t6,a5,0x1
1c007aa6:	4822                	lw	a6,8(sp)
1c007aa8:	410f8fb3          	sub	t6,t6,a6
1c007aac:	9faa                	add	t6,t6,a0
1c007aae:	4642                	lw	a2,16(sp)
1c007ab0:	40f602b3          	sub	t0,a2,a5
1c007ab4:	0012d393          	srli	t2,t0,0x1
1c007ab8:	04038463          	beqz	t2,1c007b00 <KerMaxPool2x2Stride2_SQ8+0x166>
1c007abc:	00f68f33          	add	t5,a3,a5
1c007ac0:	00178e13          	addi	t3,a5,1
1c007ac4:	9e36                	add	t3,t3,a3
1c007ac6:	8efe                	mv	t4,t6
1c007ac8:	00239893          	slli	a7,t2,0x2
1c007acc:	18f1                	addi	a7,a7,-4
1c007ace:	0028d893          	srli	a7,a7,0x2
1c007ad2:	0885                	addi	a7,a7,1
1c007ad4:	0148c0fb          	lp.setup	x1,a7,1c007afc <KerMaxPool2x2Stride2_SQ8+0x162>
1c007ad8:	004ea60b          	p.lw	a2,4(t4!)
1c007adc:	30067657          	pv.max.sci.b	a2,a2,0
1c007ae0:	78067857          	pv.extract.b	a6,a2,0
1c007ae4:	7a067457          	pv.extract.b	s0,a2,1
1c007ae8:	04886833          	p.max	a6,a6,s0
1c007aec:	010f012b          	p.sb	a6,2(t5!)
1c007af0:	78167857          	pv.extract.b	a6,a2,2
1c007af4:	7a167657          	pv.extract.b	a2,a2,3
1c007af8:	04c86633          	p.max	a2,a6,a2
1c007afc:	00ce012b          	p.sb	a2,2(t3!)
1c007b00:	fc12b633          	p.bclr	a2,t0,30,1
1c007b04:	c21d                	beqz	a2,1c007b2a <KerMaxPool2x2Stride2_SQ8+0x190>
1c007b06:	00239613          	slli	a2,t2,0x2
1c007b0a:	20cff603          	p.lw	a2,a2(t6)
1c007b0e:	30067657          	pv.max.sci.b	a2,a2,0
1c007b12:	78067857          	pv.extract.b	a6,a2,0
1c007b16:	7a067657          	pv.extract.b	a2,a2,1
1c007b1a:	04c86633          	p.max	a2,a6,a2
1c007b1e:	c002b2b3          	p.bclr	t0,t0,0,0
1c007b22:	00f68833          	add	a6,a3,a5
1c007b26:	00c842a3          	p.sb	a2,t0(a6)
1c007b2a:	4812                	lw	a6,4(sp)
1c007b2c:	00080863          	beqz	a6,1c007b3c <KerMaxPool2x2Stride2_SQ8+0x1a2>
1c007b30:	00050603          	lb	a2,0(a0)
1c007b34:	04066633          	p.max	a2,a2,zero
1c007b38:	00c68023          	sb	a2,0(a3)
1c007b3c:	48b2                	lw	a7,12(sp)
1c007b3e:	20088d63          	beqz	a7,1c007d58 <KerMaxPool2x2Stride2_SQ8+0x3be>
1c007b42:	00b50633          	add	a2,a0,a1
1c007b46:	fff60603          	lb	a2,-1(a2)
1c007b4a:	04066633          	p.max	a2,a2,zero
1c007b4e:	00e68833          	add	a6,a3,a4
1c007b52:	fec80fa3          	sb	a2,-1(a6)
1c007b56:	899a                	mv	s3,t1
1c007b58:	4d56                	lw	s10,84(sp)
1c007b5a:	eda36de3          	bltu	t1,s10,1c007a34 <KerMaxPool2x2Stride2_SQ8+0x9a>
1c007b5e:	a8c5                	j	1c007c4e <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c007b60:	899a                	mv	s3,t1
1c007b62:	4d56                	lw	s10,84(sp)
1c007b64:	eda368e3          	bltu	t1,s10,1c007a34 <KerMaxPool2x2Stride2_SQ8+0x9a>
1c007b68:	a0dd                	j	1c007c4e <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c007b6a:	0905                	addi	s2,s2,1
1c007b6c:	9452                	add	s0,s0,s4
1c007b6e:	92d2                	add	t0,t0,s4
1c007b70:	93e2                	add	t2,t2,s8
1c007b72:	4802                	lw	a6,0(sp)
1c007b74:	187d                	addi	a6,a6,-1
1c007b76:	c042                	sw	a6,0(sp)
1c007b78:	06080c63          	beqz	a6,1c007bf0 <KerMaxPool2x2Stride2_SQ8+0x256>
1c007b7c:	040b0663          	beqz	s6,1c007bc8 <KerMaxPool2x2Stride2_SQ8+0x22e>
1c007b80:	40928fb3          	sub	t6,t0,s1
1c007b84:	00138f13          	addi	t5,t2,1
1c007b88:	8e9e                	mv	t4,t2
1c007b8a:	40940e33          	sub	t3,s0,s1
1c007b8e:	ffc48313          	addi	t1,s1,-4
1c007b92:	00235313          	srli	t1,t1,0x2
1c007b96:	0305                	addi	t1,t1,1
1c007b98:	016340fb          	lp.setup	x1,t1,1c007bc4 <KerMaxPool2x2Stride2_SQ8+0x22a>
1c007b9c:	004e280b          	p.lw	a6,4(t3!)
1c007ba0:	004fa60b          	p.lw	a2,4(t6!)
1c007ba4:	30c81657          	pv.max.b	a2,a6,a2
1c007ba8:	78067857          	pv.extract.b	a6,a2,0
1c007bac:	7a0678d7          	pv.extract.b	a7,a2,1
1c007bb0:	05186833          	p.max	a6,a6,a7
1c007bb4:	010e812b          	p.sb	a6,2(t4!)
1c007bb8:	78167857          	pv.extract.b	a6,a2,2
1c007bbc:	7a167657          	pv.extract.b	a2,a2,3
1c007bc0:	04c86633          	p.max	a2,a6,a2
1c007bc4:	00cf012b          	p.sb	a2,2(t5!)
1c007bc8:	fa0c81e3          	beqz	s9,1c007b6a <KerMaxPool2x2Stride2_SQ8+0x1d0>
1c007bcc:	4010                	lw	a2,0(s0)
1c007bce:	0002a803          	lw	a6,0(t0)
1c007bd2:	31061657          	pv.max.b	a2,a2,a6
1c007bd6:	78067857          	pv.extract.b	a6,a2,0
1c007bda:	7a067657          	pv.extract.b	a2,a2,1
1c007bde:	04c86633          	p.max	a2,a6,a2
1c007be2:	41b38833          	sub	a6,t2,s11
1c007be6:	00cac823          	p.sb	a2,a6(s5)
1c007bea:	b741                	j	1c007b6a <KerMaxPool2x2Stride2_SQ8+0x1d0>
1c007bec:	4305                	li	t1,1
1c007bee:	a099                	j	1c007c34 <KerMaxPool2x2Stride2_SQ8+0x29a>
1c007bf0:	4832                	lw	a6,12(sp)
1c007bf2:	04080e63          	beqz	a6,1c007c4e <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c007bf6:	00159f13          	slli	t5,a1,0x1
1c007bfa:	00199613          	slli	a2,s3,0x1
1c007bfe:	fff58893          	addi	a7,a1,-1
1c007c02:	41760833          	sub	a6,a2,s7
1c007c06:	8ec6                	mv	t4,a7
1c007c08:	42b80eb3          	p.mac	t4,a6,a1
1c007c0c:	9eaa                	add	t4,t4,a0
1c007c0e:	00180613          	addi	a2,a6,1
1c007c12:	42b608b3          	p.mac	a7,a2,a1
1c007c16:	98aa                	add	a7,a7,a0
1c007c18:	8fba                	mv	t6,a4
1c007c1a:	fff70e13          	addi	t3,a4,-1
1c007c1e:	42e98e33          	p.mac	t3,s3,a4
1c007c22:	9e36                	add	t3,t3,a3
1c007c24:	413d0333          	sub	t1,s10,s3
1c007c28:	00198613          	addi	a2,s3,1
1c007c2c:	fccd60e3          	bltu	s10,a2,1c007bec <KerMaxPool2x2Stride2_SQ8+0x252>
1c007c30:	fa0d0ee3          	beqz	s10,1c007bec <KerMaxPool2x2Stride2_SQ8+0x252>
1c007c34:	00c340fb          	lp.setup	x1,t1,1c007c4c <KerMaxPool2x2Stride2_SQ8+0x2b2>
1c007c38:	01eef60b          	p.lb	a2,t5(t4!)
1c007c3c:	04066633          	p.max	a2,a2,zero
1c007c40:	01e8f80b          	p.lb	a6,t5(a7!)
1c007c44:	05066633          	p.max	a2,a2,a6
1c007c48:	00ce4fab          	p.sb	a2,t6(t3!)
1c007c4c:	0985                	addi	s3,s3,1
1c007c4e:	48e2                	lw	a7,24(sp)
1c007c50:	0e088363          	beqz	a7,1c007d36 <KerMaxPool2x2Stride2_SQ8+0x39c>
1c007c54:	4672                	lw	a2,28(sp)
1c007c56:	fff60293          	addi	t0,a2,-1
1c007c5a:	02b282b3          	mul	t0,t0,a1
1c007c5e:	00179f93          	slli	t6,a5,0x1
1c007c62:	9f96                	add	t6,t6,t0
1c007c64:	4822                	lw	a6,8(sp)
1c007c66:	410f8fb3          	sub	t6,t6,a6
1c007c6a:	9faa                	add	t6,t6,a0
1c007c6c:	4642                	lw	a2,16(sp)
1c007c6e:	40f603b3          	sub	t2,a2,a5
1c007c72:	0013d413          	srli	s0,t2,0x1
1c007c76:	c831                	beqz	s0,1c007cca <KerMaxPool2x2Stride2_SQ8+0x330>
1c007c78:	4852                	lw	a6,20(sp)
1c007c7a:	fff80613          	addi	a2,a6,-1
1c007c7e:	88be                	mv	a7,a5
1c007c80:	42e608b3          	p.mac	a7,a2,a4
1c007c84:	01168f33          	add	t5,a3,a7
1c007c88:	00188613          	addi	a2,a7,1
1c007c8c:	00c68e33          	add	t3,a3,a2
1c007c90:	8efe                	mv	t4,t6
1c007c92:	00241313          	slli	t1,s0,0x2
1c007c96:	1371                	addi	t1,t1,-4
1c007c98:	00235313          	srli	t1,t1,0x2
1c007c9c:	0305                	addi	t1,t1,1
1c007c9e:	014340fb          	lp.setup	x1,t1,1c007cc6 <KerMaxPool2x2Stride2_SQ8+0x32c>
1c007ca2:	004ea60b          	p.lw	a2,4(t4!)
1c007ca6:	30067657          	pv.max.sci.b	a2,a2,0
1c007caa:	78067857          	pv.extract.b	a6,a2,0
1c007cae:	7a0678d7          	pv.extract.b	a7,a2,1
1c007cb2:	05186833          	p.max	a6,a6,a7
1c007cb6:	010f012b          	p.sb	a6,2(t5!)
1c007cba:	78167857          	pv.extract.b	a6,a2,2
1c007cbe:	7a167657          	pv.extract.b	a2,a2,3
1c007cc2:	04c86633          	p.max	a2,a6,a2
1c007cc6:	00ce012b          	p.sb	a2,2(t3!)
1c007cca:	fc13b633          	p.bclr	a2,t2,30,1
1c007cce:	c61d                	beqz	a2,1c007cfc <KerMaxPool2x2Stride2_SQ8+0x362>
1c007cd0:	00241613          	slli	a2,s0,0x2
1c007cd4:	20cff603          	p.lw	a2,a2(t6)
1c007cd8:	30067657          	pv.max.sci.b	a2,a2,0
1c007cdc:	78067857          	pv.extract.b	a6,a2,0
1c007ce0:	7a067657          	pv.extract.b	a2,a2,1
1c007ce4:	04c86633          	p.max	a2,a6,a2
1c007ce8:	48d2                	lw	a7,20(sp)
1c007cea:	fff88813          	addi	a6,a7,-1
1c007cee:	c003b3b3          	p.bclr	t2,t2,0,0
1c007cf2:	97b6                	add	a5,a5,a3
1c007cf4:	42e807b3          	p.mac	a5,a6,a4
1c007cf8:	00c7c3a3          	p.sb	a2,t2(a5)
1c007cfc:	4612                	lw	a2,4(sp)
1c007cfe:	ce11                	beqz	a2,1c007d1a <KerMaxPool2x2Stride2_SQ8+0x380>
1c007d00:	005507b3          	add	a5,a0,t0
1c007d04:	00078783          	lb	a5,0(a5)
1c007d08:	0407e7b3          	p.max	a5,a5,zero
1c007d0c:	4852                	lw	a6,20(sp)
1c007d0e:	fff80613          	addi	a2,a6,-1
1c007d12:	02e60633          	mul	a2,a2,a4
1c007d16:	00f6c623          	p.sb	a5,a2(a3)
1c007d1a:	48b2                	lw	a7,12(sp)
1c007d1c:	00088d63          	beqz	a7,1c007d36 <KerMaxPool2x2Stride2_SQ8+0x39c>
1c007d20:	9516                	add	a0,a0,t0
1c007d22:	95aa                	add	a1,a1,a0
1c007d24:	fff58783          	lb	a5,-1(a1)
1c007d28:	0407e7b3          	p.max	a5,a5,zero
1c007d2c:	4652                	lw	a2,20(sp)
1c007d2e:	42c706b3          	p.mac	a3,a4,a2
1c007d32:	fef68fa3          	sb	a5,-1(a3)
1c007d36:	4436                	lw	s0,76(sp)
1c007d38:	44a6                	lw	s1,72(sp)
1c007d3a:	4916                	lw	s2,68(sp)
1c007d3c:	4986                	lw	s3,64(sp)
1c007d3e:	5a72                	lw	s4,60(sp)
1c007d40:	5ae2                	lw	s5,56(sp)
1c007d42:	5b52                	lw	s6,52(sp)
1c007d44:	5bc2                	lw	s7,48(sp)
1c007d46:	5c32                	lw	s8,44(sp)
1c007d48:	5ca2                	lw	s9,40(sp)
1c007d4a:	5d12                	lw	s10,36(sp)
1c007d4c:	5d82                	lw	s11,32(sp)
1c007d4e:	6161                	addi	sp,sp,80
1c007d50:	8082                	ret
1c007d52:	ee0f8ee3          	beqz	t6,1c007c4e <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c007d56:	b3b1                	j	1c007aa2 <KerMaxPool2x2Stride2_SQ8+0x108>
1c007d58:	899a                	mv	s3,t1
1c007d5a:	4d56                	lw	s10,84(sp)
1c007d5c:	cda36ce3          	bltu	t1,s10,1c007a34 <KerMaxPool2x2Stride2_SQ8+0x9a>
1c007d60:	b5fd                	j	1c007c4e <KerMaxPool2x2Stride2_SQ8+0x2b4>

1c007d62 <KerAvgPool2x2Stride2_SQ8>:
1c007d62:	7139                	addi	sp,sp,-64
1c007d64:	de22                	sw	s0,60(sp)
1c007d66:	dc26                	sw	s1,56(sp)
1c007d68:	da4a                	sw	s2,52(sp)
1c007d6a:	d84e                	sw	s3,48(sp)
1c007d6c:	d652                	sw	s4,44(sp)
1c007d6e:	d456                	sw	s5,40(sp)
1c007d70:	d25a                	sw	s6,36(sp)
1c007d72:	d05e                	sw	s7,32(sp)
1c007d74:	ce62                	sw	s8,28(sp)
1c007d76:	cc66                	sw	s9,24(sp)
1c007d78:	ca6a                	sw	s10,20(sp)
1c007d7a:	c86e                	sw	s11,16(sp)
1c007d7c:	c632                	sw	a2,12(sp)
1c007d7e:	4f86                	lw	t6,64(sp)
1c007d80:	4626                	lw	a2,72(sp)
1c007d82:	4ab6                	lw	s5,76(sp)
1c007d84:	78067cd7          	pv.extract.b	s9,a2,0
1c007d88:	7a067dd7          	pv.extract.b	s11,a2,1
1c007d8c:	781673d7          	pv.extract.b	t2,a2,2
1c007d90:	7a167657          	pv.extract.b	a2,a2,3
1c007d94:	c432                	sw	a2,8(sp)
1c007d96:	780afd57          	pv.extract.b	s10,s5,0
1c007d9a:	781afad7          	pv.extract.b	s5,s5,2
1c007d9e:	1c0c8363          	beqz	s9,1c007f64 <KerAvgPool2x2Stride2_SQ8+0x202>
1c007da2:	8a7e                	mv	s4,t6
1c007da4:	4c16                	lw	s8,68(sp)
1c007da6:	238ffd63          	bleu	s8,t6,1c007fe0 <KerAvgPool2x2Stride2_SQ8+0x27e>
1c007daa:	00159493          	slli	s1,a1,0x1
1c007dae:	001f9613          	slli	a2,t6,0x1
1c007db2:	41560333          	sub	t1,a2,s5
1c007db6:	82aa                	mv	t0,a0
1c007db8:	42b302b3          	p.mac	t0,t1,a1
1c007dbc:	00130613          	addi	a2,t1,1
1c007dc0:	8f2a                	mv	t5,a0
1c007dc2:	42b60f33          	p.mac	t5,a2,a1
1c007dc6:	843a                	mv	s0,a4
1c007dc8:	8eb6                	mv	t4,a3
1c007dca:	42ef8eb3          	p.mac	t4,t6,a4
1c007dce:	8e7e                	mv	t3,t6
1c007dd0:	41fc0333          	sub	t1,s8,t6
1c007dd4:	00a340fb          	lp.setup	x1,t1,1c007de8 <KerAvgPool2x2Stride2_SQ8+0x86>
1c007dd8:	0092f60b          	p.lb	a2,s1(t0!)
1c007ddc:	009f790b          	p.lb	s2,s1(t5!)
1c007de0:	0526665b          	p.mac.zh.zl	a2,a2,s2,sp
1c007de4:	00cec42b          	p.sb	a2,s0(t4!)
1c007de8:	0e05                	addi	t3,t3,1
1c007dea:	16039f63          	bnez	t2,1c007f68 <KerAvgPool2x2Stride2_SQ8+0x206>
1c007dee:	00159b13          	slli	s6,a1,0x1
1c007df2:	001a1613          	slli	a2,s4,0x1
1c007df6:	41560933          	sub	s2,a2,s5
1c007dfa:	02b90333          	mul	t1,s2,a1
1c007dfe:	00179393          	slli	t2,a5,0x1
1c007e02:	41a383b3          	sub	t2,t2,s10
1c007e06:	939a                	add	t2,t2,t1
1c007e08:	93aa                	add	t2,t2,a0
1c007e0a:	8bba                	mv	s7,a4
1c007e0c:	84b6                	mv	s1,a3
1c007e0e:	42ea04b3          	p.mac	s1,s4,a4
1c007e12:	0905                	addi	s2,s2,1
1c007e14:	02b90933          	mul	s2,s2,a1
1c007e18:	40690933          	sub	s2,s2,t1
1c007e1c:	89d2                	mv	s3,s4
1c007e1e:	40f80633          	sub	a2,a6,a5
1c007e22:	c232                	sw	a2,4(sp)
1c007e24:	1c00f637          	lui	a2,0x1c00f
1c007e28:	09062303          	lw	t1,144(a2) # 1c00f090 <__clz_tab+0x5c8>
1c007e2c:	414c0433          	sub	s0,s8,s4
1c007e30:	001a0613          	addi	a2,s4,1
1c007e34:	1acc6263          	bltu	s8,a2,1c007fd8 <KerAvgPool2x2Stride2_SQ8+0x276>
1c007e38:	1a0c0063          	beqz	s8,1c007fd8 <KerAvgPool2x2Stride2_SQ8+0x276>
1c007e3c:	0194407b          	lp.setup	x0,s0,1c007e6e <KerAvgPool2x2Stride2_SQ8+0x10c>
1c007e40:	03078563          	beq	a5,a6,1c007e6a <KerAvgPool2x2Stride2_SQ8+0x108>
1c007e44:	012382b3          	add	t0,t2,s2
1c007e48:	8fa6                	mv	t6,s1
1c007e4a:	8f1e                	mv	t5,t2
1c007e4c:	4e92                	lw	t4,4(sp)
1c007e4e:	00cec0fb          	lp.setup	x1,t4,1c007e66 <KerAvgPool2x2Stride2_SQ8+0x104>
1c007e52:	002f160b          	p.lh	a2,2(t5!)
1c007e56:	98661657          	pv.dotsp.b	a2,a2,t1
1c007e5a:	00229e0b          	p.lh	t3,2(t0!)
1c007e5e:	b86e1657          	pv.sdotsp.b	a2,t3,t1
1c007e62:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c007e66:	00cf80ab          	p.sb	a2,1(t6!)
1c007e6a:	0985                	addi	s3,s3,1
1c007e6c:	93da                	add	t2,t2,s6
1c007e6e:	94de                	add	s1,s1,s7
1c007e70:	040d8c63          	beqz	s11,1c007ec8 <KerAvgPool2x2Stride2_SQ8+0x166>
1c007e74:	00159f93          	slli	t6,a1,0x1
1c007e78:	001a1613          	slli	a2,s4,0x1
1c007e7c:	fff58e13          	addi	t3,a1,-1
1c007e80:	41560333          	sub	t1,a2,s5
1c007e84:	82f2                	mv	t0,t3
1c007e86:	42b302b3          	p.mac	t0,t1,a1
1c007e8a:	92aa                	add	t0,t0,a0
1c007e8c:	00130613          	addi	a2,t1,1
1c007e90:	42b60e33          	p.mac	t3,a2,a1
1c007e94:	9e2a                	add	t3,t3,a0
1c007e96:	83ba                	mv	t2,a4
1c007e98:	fff70f13          	addi	t5,a4,-1
1c007e9c:	42ea0f33          	p.mac	t5,s4,a4
1c007ea0:	9f36                	add	t5,t5,a3
1c007ea2:	414c0eb3          	sub	t4,s8,s4
1c007ea6:	001a0613          	addi	a2,s4,1
1c007eaa:	12cc6963          	bltu	s8,a2,1c007fdc <KerAvgPool2x2Stride2_SQ8+0x27a>
1c007eae:	120c0763          	beqz	s8,1c007fdc <KerAvgPool2x2Stride2_SQ8+0x27a>
1c007eb2:	00aec0fb          	lp.setup	x1,t4,1c007ec6 <KerAvgPool2x2Stride2_SQ8+0x164>
1c007eb6:	01f2f60b          	p.lb	a2,t6(t0!)
1c007eba:	01fe730b          	p.lb	t1,t6(t3!)
1c007ebe:	0466665b          	p.mac.zh.zl	a2,a2,t1,sp
1c007ec2:	00cf43ab          	p.sb	a2,t2(t5!)
1c007ec6:	0a05                	addi	s4,s4,1
1c007ec8:	4622                	lw	a2,8(sp)
1c007eca:	ce3d                	beqz	a2,1c007f48 <KerAvgPool2x2Stride2_SQ8+0x1e6>
1c007ecc:	4632                	lw	a2,12(sp)
1c007ece:	fff60e93          	addi	t4,a2,-1
1c007ed2:	02be8eb3          	mul	t4,t4,a1
1c007ed6:	00179613          	slli	a2,a5,0x1
1c007eda:	9676                	add	a2,a2,t4
1c007edc:	41a60633          	sub	a2,a2,s10
1c007ee0:	40f80833          	sub	a6,a6,a5
1c007ee4:	02080863          	beqz	a6,1c007f14 <KerAvgPool2x2Stride2_SQ8+0x1b2>
1c007ee8:	fff88313          	addi	t1,a7,-1
1c007eec:	42e307b3          	p.mac	a5,t1,a4
1c007ef0:	00c50333          	add	t1,a0,a2
1c007ef4:	00f68e33          	add	t3,a3,a5
1c007ef8:	1c00f7b7          	lui	a5,0x1c00f
1c007efc:	0907a603          	lw	a2,144(a5) # 1c00f090 <__clz_tab+0x5c8>
1c007f00:	008840fb          	lp.setup	x1,a6,1c007f10 <KerAvgPool2x2Stride2_SQ8+0x1ae>
1c007f04:	0023178b          	p.lh	a5,2(t1!)
1c007f08:	98c797d7          	pv.dotsp.b	a5,a5,a2
1c007f0c:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c007f10:	00fe00ab          	p.sb	a5,1(t3!)
1c007f14:	000c8e63          	beqz	s9,1c007f30 <KerAvgPool2x2Stride2_SQ8+0x1ce>
1c007f18:	01d507b3          	add	a5,a0,t4
1c007f1c:	00078783          	lb	a5,0(a5)
1c007f20:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c007f24:	fff88613          	addi	a2,a7,-1
1c007f28:	02e60633          	mul	a2,a2,a4
1c007f2c:	00f6c623          	p.sb	a5,a2(a3)
1c007f30:	000d8c63          	beqz	s11,1c007f48 <KerAvgPool2x2Stride2_SQ8+0x1e6>
1c007f34:	9576                	add	a0,a0,t4
1c007f36:	95aa                	add	a1,a1,a0
1c007f38:	fff58783          	lb	a5,-1(a1)
1c007f3c:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c007f40:	431706b3          	p.mac	a3,a4,a7
1c007f44:	fef68fa3          	sb	a5,-1(a3)
1c007f48:	5472                	lw	s0,60(sp)
1c007f4a:	54e2                	lw	s1,56(sp)
1c007f4c:	5952                	lw	s2,52(sp)
1c007f4e:	59c2                	lw	s3,48(sp)
1c007f50:	5a32                	lw	s4,44(sp)
1c007f52:	5aa2                	lw	s5,40(sp)
1c007f54:	5b12                	lw	s6,36(sp)
1c007f56:	5b82                	lw	s7,32(sp)
1c007f58:	4c72                	lw	s8,28(sp)
1c007f5a:	4ce2                	lw	s9,24(sp)
1c007f5c:	4d52                	lw	s10,20(sp)
1c007f5e:	4dc2                	lw	s11,16(sp)
1c007f60:	6121                	addi	sp,sp,64
1c007f62:	8082                	ret
1c007f64:	06038563          	beqz	t2,1c007fce <KerAvgPool2x2Stride2_SQ8+0x26c>
1c007f68:	00179613          	slli	a2,a5,0x1
1c007f6c:	41a60633          	sub	a2,a2,s10
1c007f70:	40f80e33          	sub	t3,a6,a5
1c007f74:	020e0463          	beqz	t3,1c007f9c <KerAvgPool2x2Stride2_SQ8+0x23a>
1c007f78:	00c50eb3          	add	t4,a0,a2
1c007f7c:	00f68f33          	add	t5,a3,a5
1c007f80:	1c00f637          	lui	a2,0x1c00f
1c007f84:	09062303          	lw	t1,144(a2) # 1c00f090 <__clz_tab+0x5c8>
1c007f88:	008e40fb          	lp.setup	x1,t3,1c007f98 <KerAvgPool2x2Stride2_SQ8+0x236>
1c007f8c:	004ea60b          	p.lw	a2,4(t4!)
1c007f90:	98661657          	pv.dotsp.b	a2,a2,t1
1c007f94:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c007f98:	00cf00ab          	p.sb	a2,1(t5!)
1c007f9c:	000c8863          	beqz	s9,1c007fac <KerAvgPool2x2Stride2_SQ8+0x24a>
1c007fa0:	00050603          	lb	a2,0(a0)
1c007fa4:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c007fa8:	00c68023          	sb	a2,0(a3)
1c007fac:	020d8d63          	beqz	s11,1c007fe6 <KerAvgPool2x2Stride2_SQ8+0x284>
1c007fb0:	00b50633          	add	a2,a0,a1
1c007fb4:	fff60603          	lb	a2,-1(a2)
1c007fb8:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c007fbc:	00e68333          	add	t1,a3,a4
1c007fc0:	fec30fa3          	sb	a2,-1(t1)
1c007fc4:	8a7e                	mv	s4,t6
1c007fc6:	4c16                	lw	s8,68(sp)
1c007fc8:	e38fe3e3          	bltu	t6,s8,1c007dee <KerAvgPool2x2Stride2_SQ8+0x8c>
1c007fcc:	bdf5                	j	1c007ec8 <KerAvgPool2x2Stride2_SQ8+0x166>
1c007fce:	8a7e                	mv	s4,t6
1c007fd0:	4c16                	lw	s8,68(sp)
1c007fd2:	e18feee3          	bltu	t6,s8,1c007dee <KerAvgPool2x2Stride2_SQ8+0x8c>
1c007fd6:	bdcd                	j	1c007ec8 <KerAvgPool2x2Stride2_SQ8+0x166>
1c007fd8:	4405                	li	s0,1
1c007fda:	b58d                	j	1c007e3c <KerAvgPool2x2Stride2_SQ8+0xda>
1c007fdc:	4e85                	li	t4,1
1c007fde:	bdd1                	j	1c007eb2 <KerAvgPool2x2Stride2_SQ8+0x150>
1c007fe0:	ee0384e3          	beqz	t2,1c007ec8 <KerAvgPool2x2Stride2_SQ8+0x166>
1c007fe4:	b751                	j	1c007f68 <KerAvgPool2x2Stride2_SQ8+0x206>
1c007fe6:	8a7e                	mv	s4,t6
1c007fe8:	4c16                	lw	s8,68(sp)
1c007fea:	e18fe2e3          	bltu	t6,s8,1c007dee <KerAvgPool2x2Stride2_SQ8+0x8c>
1c007fee:	bde9                	j	1c007ec8 <KerAvgPool2x2Stride2_SQ8+0x166>

1c007ff0 <Ker_ActivationScale1_SQ8>:
1c007ff0:	0015d793          	srli	a5,a1,0x1
1c007ff4:	cba1                	beqz	a5,1c008044 <Ker_ActivationScale1_SQ8+0x54>
1c007ff6:	00150893          	addi	a7,a0,1
1c007ffa:	882a                	mv	a6,a0
1c007ffc:	c005b333          	p.bclr	t1,a1,0,0
1c008000:	1379                	addi	t1,t1,-2
1c008002:	00135313          	srli	t1,t1,0x1
1c008006:	0305                	addi	t1,t1,1
1c008008:	a839                	j	1c008026 <Ker_ActivationScale1_SQ8+0x36>
1c00800a:	04076733          	p.max	a4,a4,zero
1c00800e:	0407e7b3          	p.max	a5,a5,zero
1c008012:	00ee8023          	sb	a4,0(t4)
1c008016:	00fe0023          	sb	a5,0(t3)
1c00801a:	0809                	addi	a6,a6,2
1c00801c:	0889                	addi	a7,a7,2
1c00801e:	137d                	addi	t1,t1,-1
1c008020:	00031363          	bnez	t1,1c008026 <Ker_ActivationScale1_SQ8+0x36>
1c008024:	a005                	j	1c008044 <Ker_ActivationScale1_SQ8+0x54>
1c008026:	8ec2                	mv	t4,a6
1c008028:	00080703          	lb	a4,0(a6)
1c00802c:	8e46                	mv	t3,a7
1c00802e:	00088783          	lb	a5,0(a7)
1c008032:	fc162ce3          	p.beqimm	a2,1,1c00800a <Ker_ActivationScale1_SQ8+0x1a>
1c008036:	fc263ee3          	p.bneimm	a2,2,1c008012 <Ker_ActivationScale1_SQ8+0x22>
1c00803a:	14d76733          	p.clipur	a4,a4,a3
1c00803e:	14d7e7b3          	p.clipur	a5,a5,a3
1c008042:	bfc1                	j	1c008012 <Ker_ActivationScale1_SQ8+0x22>
1c008044:	fc15b7b3          	p.bclr	a5,a1,30,1
1c008048:	cb99                	beqz	a5,1c00805e <Ker_ActivationScale1_SQ8+0x6e>
1c00804a:	15fd                	addi	a1,a1,-1
1c00804c:	95aa                	add	a1,a1,a0
1c00804e:	00058783          	lb	a5,0(a1)
1c008052:	00162763          	p.beqimm	a2,1,1c008060 <Ker_ActivationScale1_SQ8+0x70>
1c008056:	00262863          	p.beqimm	a2,2,1c008066 <Ker_ActivationScale1_SQ8+0x76>
1c00805a:	00f58023          	sb	a5,0(a1)
1c00805e:	8082                	ret
1c008060:	0407e7b3          	p.max	a5,a5,zero
1c008064:	bfdd                	j	1c00805a <Ker_ActivationScale1_SQ8+0x6a>
1c008066:	14d7e7b3          	p.clipur	a5,a5,a3
1c00806a:	bfc5                	j	1c00805a <Ker_ActivationScale1_SQ8+0x6a>

1c00806c <Ker_Activation_SQ8>:
1c00806c:	1101                	addi	sp,sp,-32
1c00806e:	ce22                	sw	s0,28(sp)
1c008070:	cc26                	sw	s1,24(sp)
1c008072:	ca4a                	sw	s2,20(sp)
1c008074:	c84e                	sw	s3,16(sp)
1c008076:	c652                	sw	s4,12(sp)
1c008078:	c456                	sw	s5,8(sp)
1c00807a:	0015d313          	srli	t1,a1,0x1
1c00807e:	14030363          	beqz	t1,1c0081c4 <Ker_Activation_SQ8+0x158>
1c008082:	00150f13          	addi	t5,a0,1
1c008086:	8eaa                	mv	t4,a0
1c008088:	4389                	li	t2,2
1c00808a:	4491                	li	s1,4
1c00808c:	441d                	li	s0,7
1c00808e:	c005bfb3          	p.bclr	t6,a1,0,0
1c008092:	1ff9                	addi	t6,t6,-2
1c008094:	001fdf93          	srli	t6,t6,0x1
1c008098:	0f85                	addi	t6,t6,1
1c00809a:	a0b9                	j	1c0080e8 <Ker_Activation_SQ8+0x7c>
1c00809c:	c205                	beqz	a2,1c0080bc <Ker_Activation_SQ8+0x50>
1c00809e:	02163763          	p.bneimm	a2,1,1c0080cc <Ker_Activation_SQ8+0x60>
1c0080a2:	040e6933          	p.max	s2,t3,zero
1c0080a6:	02d90933          	mul	s2,s2,a3
1c0080aa:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c0080ae:	040a6333          	p.max	t1,s4,zero
1c0080b2:	02d30333          	mul	t1,t1,a3
1c0080b6:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c0080ba:	a809                	j	1c0080cc <Ker_Activation_SQ8+0x60>
1c0080bc:	02de0933          	mul	s2,t3,a3
1c0080c0:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c0080c4:	02da0333          	mul	t1,s4,a3
1c0080c8:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c0080cc:	14891933          	p.clip	s2,s2,8
1c0080d0:	01298023          	sb	s2,0(s3)
1c0080d4:	14831333          	p.clip	t1,t1,8
1c0080d8:	00628023          	sb	t1,0(t0)
1c0080dc:	0e89                	addi	t4,t4,2
1c0080de:	0f09                	addi	t5,t5,2
1c0080e0:	1ffd                	addi	t6,t6,-1
1c0080e2:	000f9363          	bnez	t6,1c0080e8 <Ker_Activation_SQ8+0x7c>
1c0080e6:	a8f9                	j	1c0081c4 <Ker_Activation_SQ8+0x158>
1c0080e8:	89f6                	mv	s3,t4
1c0080ea:	000e8e03          	lb	t3,0(t4)
1c0080ee:	8972                	mv	s2,t3
1c0080f0:	82fa                	mv	t0,t5
1c0080f2:	000f0a03          	lb	s4,0(t5)
1c0080f6:	8352                	mv	t1,s4
1c0080f8:	04262b63          	p.beqimm	a2,2,1c00814e <Ker_Activation_SQ8+0xe2>
1c0080fc:	fac3f0e3          	bleu	a2,t2,1c00809c <Ker_Activation_SQ8+0x30>
1c008100:	08462963          	p.beqimm	a2,4,1c008192 <Ker_Activation_SQ8+0x126>
1c008104:	06966263          	bltu	a2,s1,1c008168 <Ker_Activation_SQ8+0xfc>
1c008108:	fc5632e3          	p.bneimm	a2,5,1c0080cc <Ker_Activation_SQ8+0x60>
1c00810c:	c1fe1333          	p.extractu	t1,t3,0,31
1c008110:	03c78933          	mul	s2,a5,t3
1c008114:	4080695b          	p.mac.zh.sl	s2,zero,s0,zero
1c008118:	00133a93          	seqz	s5,t1
1c00811c:	03230933          	mul	s2,t1,s2
1c008120:	43ca8933          	p.mac	s2,s5,t3
1c008124:	02d90933          	mul	s2,s2,a3
1c008128:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c00812c:	c1fa1e33          	p.extractu	t3,s4,0,31
1c008130:	03478333          	mul	t1,a5,s4
1c008134:	4080635b          	p.mac.zh.sl	t1,zero,s0,zero
1c008138:	001e3a93          	seqz	s5,t3
1c00813c:	026e0333          	mul	t1,t3,t1
1c008140:	434a8333          	p.mac	t1,s5,s4
1c008144:	02d30333          	mul	t1,t1,a3
1c008148:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c00814c:	b741                	j	1c0080cc <Ker_Activation_SQ8+0x60>
1c00814e:	14fe6933          	p.clipur	s2,t3,a5
1c008152:	02d90933          	mul	s2,s2,a3
1c008156:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c00815a:	14fa6333          	p.clipur	t1,s4,a5
1c00815e:	02d30333          	mul	t1,t1,a3
1c008162:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008166:	b79d                	j	1c0080cc <Ker_Activation_SQ8+0x60>
1c008168:	01c80933          	add	s2,a6,t3
1c00816c:	14f96933          	p.clipur	s2,s2,a5
1c008170:	03190933          	mul	s2,s2,a7
1c008174:	02d90933          	mul	s2,s2,a3
1c008178:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c00817c:	01480333          	add	t1,a6,s4
1c008180:	14f36333          	p.clipur	t1,t1,a5
1c008184:	03130333          	mul	t1,t1,a7
1c008188:	02d30333          	mul	t1,t1,a3
1c00818c:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008190:	bf35                	j	1c0080cc <Ker_Activation_SQ8+0x60>
1c008192:	01c80933          	add	s2,a6,t3
1c008196:	14f96933          	p.clipur	s2,s2,a5
1c00819a:	03190933          	mul	s2,s2,a7
1c00819e:	03c90933          	mul	s2,s2,t3
1c0081a2:	02d90933          	mul	s2,s2,a3
1c0081a6:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c0081aa:	01480333          	add	t1,a6,s4
1c0081ae:	14f36333          	p.clipur	t1,t1,a5
1c0081b2:	03130333          	mul	t1,t1,a7
1c0081b6:	03430333          	mul	t1,t1,s4
1c0081ba:	02d30333          	mul	t1,t1,a3
1c0081be:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c0081c2:	b729                	j	1c0080cc <Ker_Activation_SQ8+0x60>
1c0081c4:	fc15b333          	p.bclr	t1,a1,30,1
1c0081c8:	06030a63          	beqz	t1,1c00823c <Ker_Activation_SQ8+0x1d0>
1c0081cc:	15fd                	addi	a1,a1,-1
1c0081ce:	95aa                	add	a1,a1,a0
1c0081d0:	00058503          	lb	a0,0(a1)
1c0081d4:	832a                	mv	t1,a0
1c0081d6:	06262b63          	p.beqimm	a2,2,1c00824c <Ker_Activation_SQ8+0x1e0>
1c0081da:	4e09                	li	t3,2
1c0081dc:	02ce7c63          	bleu	a2,t3,1c008214 <Ker_Activation_SQ8+0x1a8>
1c0081e0:	08462963          	p.beqimm	a2,4,1c008272 <Ker_Activation_SQ8+0x206>
1c0081e4:	4e11                	li	t3,4
1c0081e6:	07c66b63          	bltu	a2,t3,1c00825c <Ker_Activation_SQ8+0x1f0>
1c0081ea:	04563563          	p.bneimm	a2,5,1c008234 <Ker_Activation_SQ8+0x1c8>
1c0081ee:	c1f51633          	p.extractu	a2,a0,0,31
1c0081f2:	02f507b3          	mul	a5,a0,a5
1c0081f6:	481d                	li	a6,7
1c0081f8:	410067db          	p.mac.zh.sl	a5,zero,a6,zero
1c0081fc:	00163813          	seqz	a6,a2
1c008200:	02f607b3          	mul	a5,a2,a5
1c008204:	42a807b3          	p.mac	a5,a6,a0
1c008208:	02d786b3          	mul	a3,a5,a3
1c00820c:	8336                	mv	t1,a3
1c00820e:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008212:	a00d                	j	1c008234 <Ker_Activation_SQ8+0x1c8>
1c008214:	ca19                	beqz	a2,1c00822a <Ker_Activation_SQ8+0x1be>
1c008216:	00163f63          	p.bneimm	a2,1,1c008234 <Ker_Activation_SQ8+0x1c8>
1c00821a:	04056333          	p.max	t1,a0,zero
1c00821e:	02d306b3          	mul	a3,t1,a3
1c008222:	8336                	mv	t1,a3
1c008224:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008228:	a031                	j	1c008234 <Ker_Activation_SQ8+0x1c8>
1c00822a:	02d506b3          	mul	a3,a0,a3
1c00822e:	8336                	mv	t1,a3
1c008230:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008234:	14831333          	p.clip	t1,t1,8
1c008238:	00658023          	sb	t1,0(a1)
1c00823c:	4472                	lw	s0,28(sp)
1c00823e:	44e2                	lw	s1,24(sp)
1c008240:	4952                	lw	s2,20(sp)
1c008242:	49c2                	lw	s3,16(sp)
1c008244:	4a32                	lw	s4,12(sp)
1c008246:	4aa2                	lw	s5,8(sp)
1c008248:	6105                	addi	sp,sp,32
1c00824a:	8082                	ret
1c00824c:	14f56333          	p.clipur	t1,a0,a5
1c008250:	02d306b3          	mul	a3,t1,a3
1c008254:	8336                	mv	t1,a3
1c008256:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c00825a:	bfe9                	j	1c008234 <Ker_Activation_SQ8+0x1c8>
1c00825c:	9542                	add	a0,a0,a6
1c00825e:	14f567b3          	p.clipur	a5,a0,a5
1c008262:	031788b3          	mul	a7,a5,a7
1c008266:	02d886b3          	mul	a3,a7,a3
1c00826a:	8336                	mv	t1,a3
1c00826c:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c008270:	b7d1                	j	1c008234 <Ker_Activation_SQ8+0x1c8>
1c008272:	982a                	add	a6,a6,a0
1c008274:	14f867b3          	p.clipur	a5,a6,a5
1c008278:	031788b3          	mul	a7,a5,a7
1c00827c:	02a88333          	mul	t1,a7,a0
1c008280:	02d306b3          	mul	a3,t1,a3
1c008284:	8336                	mv	t1,a3
1c008286:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c00828a:	b76d                	j	1c008234 <Ker_Activation_SQ8+0x1c8>

1c00828c <KerParPoolActivation>:
1c00828c:	1141                	addi	sp,sp,-16
1c00828e:	c606                	sw	ra,12(sp)
1c008290:	88b6                	mv	a7,a3
1c008292:	00078683          	lb	a3,0(a5)
1c008296:	c6d9                	beqz	a3,1c008324 <KerParPoolActivation+0x98>
1c008298:	02c585b3          	mul	a1,a1,a2
1c00829c:	03158333          	mul	t1,a1,a7
1c0082a0:	41170733          	sub	a4,a4,a7
1c0082a4:	02b705b3          	mul	a1,a4,a1
1c0082a8:	0ff6f693          	andi	a3,a3,255
1c0082ac:	0017c703          	lbu	a4,1(a5)
1c0082b0:	00278603          	lb	a2,2(a5)
1c0082b4:	00378e03          	lb	t3,3(a5)
1c0082b8:	00478883          	lb	a7,4(a5)
1c0082bc:	04282263          	p.beqimm	a6,2,1c008300 <KerParPoolActivation+0x74>
1c0082c0:	4789                	li	a5,2
1c0082c2:	0107ff63          	bleu	a6,a5,1c0082e0 <KerParPoolActivation+0x54>
1c0082c6:	04482963          	p.beqimm	a6,4,1c008318 <KerParPoolActivation+0x8c>
1c0082ca:	4791                	li	a5,4
1c0082cc:	04f86063          	bltu	a6,a5,1c00830c <KerParPoolActivation+0x80>
1c0082d0:	04583e63          	p.bneimm	a6,5,1c00832c <KerParPoolActivation+0xa0>
1c0082d4:	8872                	mv	a6,t3
1c0082d6:	87b2                	mv	a5,a2
1c0082d8:	4615                	li	a2,5
1c0082da:	951a                	add	a0,a0,t1
1c0082dc:	3b41                	jal	1c00806c <Ker_Activation_SQ8>
1c0082de:	a0b9                	j	1c00832c <KerParPoolActivation+0xa0>
1c0082e0:	00080a63          	beqz	a6,1c0082f4 <KerParPoolActivation+0x68>
1c0082e4:	04183463          	p.bneimm	a6,1,1c00832c <KerParPoolActivation+0xa0>
1c0082e8:	8872                	mv	a6,t3
1c0082ea:	87b2                	mv	a5,a2
1c0082ec:	4605                	li	a2,1
1c0082ee:	951a                	add	a0,a0,t1
1c0082f0:	3bb5                	jal	1c00806c <Ker_Activation_SQ8>
1c0082f2:	a82d                	j	1c00832c <KerParPoolActivation+0xa0>
1c0082f4:	8872                	mv	a6,t3
1c0082f6:	87b2                	mv	a5,a2
1c0082f8:	4601                	li	a2,0
1c0082fa:	951a                	add	a0,a0,t1
1c0082fc:	3b85                	jal	1c00806c <Ker_Activation_SQ8>
1c0082fe:	a03d                	j	1c00832c <KerParPoolActivation+0xa0>
1c008300:	8872                	mv	a6,t3
1c008302:	87b2                	mv	a5,a2
1c008304:	4609                	li	a2,2
1c008306:	951a                	add	a0,a0,t1
1c008308:	3395                	jal	1c00806c <Ker_Activation_SQ8>
1c00830a:	a00d                	j	1c00832c <KerParPoolActivation+0xa0>
1c00830c:	8872                	mv	a6,t3
1c00830e:	87b2                	mv	a5,a2
1c008310:	460d                	li	a2,3
1c008312:	951a                	add	a0,a0,t1
1c008314:	3ba1                	jal	1c00806c <Ker_Activation_SQ8>
1c008316:	a819                	j	1c00832c <KerParPoolActivation+0xa0>
1c008318:	8872                	mv	a6,t3
1c00831a:	87b2                	mv	a5,a2
1c00831c:	4611                	li	a2,4
1c00831e:	951a                	add	a0,a0,t1
1c008320:	33b1                	jal	1c00806c <Ker_Activation_SQ8>
1c008322:	a029                	j	1c00832c <KerParPoolActivation+0xa0>
1c008324:	00182763          	p.beqimm	a6,1,1c008332 <KerParPoolActivation+0xa6>
1c008328:	02282163          	p.beqimm	a6,2,1c00834a <KerParPoolActivation+0xbe>
1c00832c:	40b2                	lw	ra,12(sp)
1c00832e:	0141                	addi	sp,sp,16
1c008330:	8082                	ret
1c008332:	02c58833          	mul	a6,a1,a2
1c008336:	411705b3          	sub	a1,a4,a7
1c00833a:	4681                	li	a3,0
1c00833c:	4605                	li	a2,1
1c00833e:	030585b3          	mul	a1,a1,a6
1c008342:	43180533          	p.mac	a0,a6,a7
1c008346:	316d                	jal	1c007ff0 <Ker_ActivationScale1_SQ8>
1c008348:	b7d5                	j	1c00832c <KerParPoolActivation+0xa0>
1c00834a:	02c58833          	mul	a6,a1,a2
1c00834e:	411705b3          	sub	a1,a4,a7
1c008352:	00278683          	lb	a3,2(a5)
1c008356:	4609                	li	a2,2
1c008358:	030585b3          	mul	a1,a1,a6
1c00835c:	43180533          	p.mac	a0,a6,a7
1c008360:	3941                	jal	1c007ff0 <Ker_ActivationScale1_SQ8>
1c008362:	b7e9                	j	1c00832c <KerParPoolActivation+0xa0>

1c008364 <KerParPool2x2Stride2_ReLU_SQ8>:
	gap_waitbarrier(0);
}

void KerParPool2x2Stride2_ReLU_SQ8(KerPool_SQ8_T *Arg)

{
1c008364:	7119                	addi	sp,sp,-128
1c008366:	de86                	sw	ra,124(sp)
1c008368:	dca2                	sw	s0,120(sp)
1c00836a:	daa6                	sw	s1,116(sp)
1c00836c:	d8ca                	sw	s2,112(sp)
1c00836e:	d6ce                	sw	s3,108(sp)
1c008370:	d4d2                	sw	s4,104(sp)
1c008372:	d2d6                	sw	s5,100(sp)
1c008374:	d0da                	sw	s6,96(sp)
1c008376:	cede                	sw	s7,92(sp)
1c008378:	cce2                	sw	s8,88(sp)
1c00837a:	cae6                	sw	s9,84(sp)
1c00837c:	c8ea                	sw	s10,80(sp)
1c00837e:	c6ee                	sw	s11,76(sp)
1c008380:	892a                	mv	s2,a0
	unsigned int FS=2,S=2;
	signed char * __restrict__ In = Arg->In;
1c008382:	4100                	lw	s0,0(a0)
	unsigned int W = Arg->W, H = Arg->H;
1c008384:	00a55703          	lhu	a4,10(a0)
1c008388:	d03a                	sw	a4,32(sp)
1c00838a:	00e55783          	lhu	a5,14(a0)
1c00838e:	d23e                	sw	a5,36(sp)
	unsigned int Feat = Arg->Feat;
1c008390:	00855703          	lhu	a4,8(a0)
	signed char * __restrict__ Out = Arg->Out;
1c008394:	415c                	lw	a5,4(a0)
1c008396:	dc3e                	sw	a5,56(sp)
	signed char * __restrict__ Infos = Arg->Infos;
1c008398:	515c                	lw	a5,36(a0)
1c00839a:	de3e                	sw	a5,60(sp)
	int PoolMax = Arg->PoolMax;
1c00839c:	01254b03          	lbu	s6,18(a0)
	v4s PadIn = Arg->Pad;
1c0083a0:	5104                	lw	s1,32(a0)

	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c0083a2:	f1402af3          	csrr	s5,mhartid
1c0083a6:	c80a9ab3          	p.extractu	s5,s5,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0083aa:	f83737b3          	p.bclr	a5,a4,28,3
1c0083ae:	00f037b3          	snez	a5,a5
1c0083b2:	00375693          	srli	a3,a4,0x3
1c0083b6:	97b6                	add	a5,a5,a3
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c0083b8:	02fa8ab3          	mul	s5,s5,a5
1c0083bc:	97d6                	add	a5,a5,s5
1c0083be:	04e7c7b3          	p.min	a5,a5,a4
1c0083c2:	da3e                	sw	a5,52(sp)
1c0083c4:	8bbe                	mv	s7,a5

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c0083c6:	7804f657          	pv.extract.b	a2,s1,0
1c0083ca:	00c55503          	lhu	a0,12(a0)
1c0083ce:	ffe50993          	addi	s3,a0,-2
1c0083d2:	99b2                	add	s3,s3,a2
1c0083d4:	7a04f7d7          	pv.extract.b	a5,s1,1
1c0083d8:	82f9a9db          	p.addun	s3,s3,a5,1
1c0083dc:	0985                	addi	s3,s3,1
1c0083de:	d44e                	sw	s3,40(sp)
	return ((Pad+Stride-1)/Stride);
1c0083e0:	00160793          	addi	a5,a2,1
1c0083e4:	8385                	srli	a5,a5,0x1
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c0083e6:	04f9c7b3          	p.min	a5,s3,a5
1c0083ea:	ce3e                	sw	a5,28(sp)
1c0083ec:	4689                	li	a3,2
1c0083ee:	4589                	li	a1,2
1c0083f0:	d90ff0ef          	jal	ra,1c007980 <LastDefinedOutput>
1c0083f4:	4772                	lw	a4,28(sp)
1c0083f6:	04a76533          	p.max	a0,a4,a0
1c0083fa:	d62a                	sw	a0,44(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c0083fc:	7814f657          	pv.extract.b	a2,s1,2
1c008400:	01095503          	lhu	a0,16(s2)
1c008404:	ffe50a13          	addi	s4,a0,-2
1c008408:	9a32                	add	s4,s4,a2
1c00840a:	7a14f7d7          	pv.extract.b	a5,s1,3
1c00840e:	82fa2a5b          	p.addun	s4,s4,a5,1
1c008412:	0a05                	addi	s4,s4,1
1c008414:	d852                	sw	s4,48(sp)
	return ((Pad+Stride-1)/Stride);
1c008416:	00160913          	addi	s2,a2,1
1c00841a:	00195913          	srli	s2,s2,0x1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00841e:	052a4933          	p.min	s2,s4,s2
1c008422:	4689                	li	a3,2
1c008424:	4589                	li	a1,2
1c008426:	d5aff0ef          	jal	ra,1c007980 <LastDefinedOutput>
1c00842a:	04a96c33          	p.max	s8,s2,a0

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00842e:	040b1463          	bnez	s6,1c008476 <KerParPool2x2Stride2_ReLU_SQ8+0x112>
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c008432:	097af363          	bleu	s7,s5,1c0084b8 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
1c008436:	5782                	lw	a5,32(sp)
1c008438:	5712                	lw	a4,36(sp)
1c00843a:	02e78d33          	mul	s10,a5,a4
1c00843e:	03498cb3          	mul	s9,s3,s4
1c008442:	43aa8433          	p.mac	s0,s5,s10
1c008446:	5de2                	lw	s11,56(sp)
1c008448:	439a8db3          	p.mac	s11,s5,s9
1c00844c:	8b56                	mv	s6,s5
1c00844e:	c626                	sw	s1,12(sp)
1c008450:	c426                	sw	s1,8(sp)
1c008452:	c262                	sw	s8,4(sp)
1c008454:	c04a                	sw	s2,0(sp)
1c008456:	58c2                	lw	a7,48(sp)
1c008458:	5832                	lw	a6,44(sp)
1c00845a:	47f2                	lw	a5,28(sp)
1c00845c:	5722                	lw	a4,40(sp)
1c00845e:	86ee                	mv	a3,s11
1c008460:	5612                	lw	a2,36(sp)
1c008462:	5582                	lw	a1,32(sp)
1c008464:	8522                	mv	a0,s0
1c008466:	8fdff0ef          	jal	ra,1c007d62 <KerAvgPool2x2Stride2_SQ8>
1c00846a:	0b05                	addi	s6,s6,1
1c00846c:	946a                	add	s0,s0,s10
1c00846e:	9de6                	add	s11,s11,s9
1c008470:	fd6b9fe3          	bne	s7,s6,1c00844e <KerParPool2x2Stride2_ReLU_SQ8+0xea>
1c008474:	a091                	j	1c0084b8 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c008476:	057af163          	bleu	s7,s5,1c0084b8 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
1c00847a:	5782                	lw	a5,32(sp)
1c00847c:	5712                	lw	a4,36(sp)
1c00847e:	02e78d33          	mul	s10,a5,a4
1c008482:	03498cb3          	mul	s9,s3,s4
1c008486:	43aa8433          	p.mac	s0,s5,s10
1c00848a:	5de2                	lw	s11,56(sp)
1c00848c:	439a8db3          	p.mac	s11,s5,s9
1c008490:	8b56                	mv	s6,s5
1c008492:	c626                	sw	s1,12(sp)
1c008494:	c426                	sw	s1,8(sp)
1c008496:	c262                	sw	s8,4(sp)
1c008498:	c04a                	sw	s2,0(sp)
1c00849a:	58c2                	lw	a7,48(sp)
1c00849c:	5832                	lw	a6,44(sp)
1c00849e:	47f2                	lw	a5,28(sp)
1c0084a0:	5722                	lw	a4,40(sp)
1c0084a2:	86ee                	mv	a3,s11
1c0084a4:	5612                	lw	a2,36(sp)
1c0084a6:	5582                	lw	a1,32(sp)
1c0084a8:	8522                	mv	a0,s0
1c0084aa:	cf0ff0ef          	jal	ra,1c00799a <KerMaxPool2x2Stride2_SQ8>
1c0084ae:	0b05                	addi	s6,s6,1
1c0084b0:	946a                	add	s0,s0,s10
1c0084b2:	9de6                	add	s11,s11,s9
1c0084b4:	fd6b9fe3          	bne	s7,s6,1c008492 <KerParPool2x2Stride2_ReLU_SQ8+0x12e>

	KerParPoolActivation(Out, Wo, Ho, First, Last, Infos, ACT_RELU);
1c0084b8:	4805                	li	a6,1
1c0084ba:	57f2                	lw	a5,60(sp)
1c0084bc:	5752                	lw	a4,52(sp)
1c0084be:	86d6                	mv	a3,s5
1c0084c0:	8652                	mv	a2,s4
1c0084c2:	85ce                	mv	a1,s3
1c0084c4:	5562                	lw	a0,56(sp)
1c0084c6:	33d9                	jal	1c00828c <KerParPoolActivation>
1c0084c8:	002047b7          	lui	a5,0x204
1c0084cc:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0084d0:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
}
1c0084d4:	50f6                	lw	ra,124(sp)
1c0084d6:	5466                	lw	s0,120(sp)
1c0084d8:	54d6                	lw	s1,116(sp)
1c0084da:	5946                	lw	s2,112(sp)
1c0084dc:	59b6                	lw	s3,108(sp)
1c0084de:	5a26                	lw	s4,104(sp)
1c0084e0:	5a96                	lw	s5,100(sp)
1c0084e2:	5b06                	lw	s6,96(sp)
1c0084e4:	4bf6                	lw	s7,92(sp)
1c0084e6:	4c66                	lw	s8,88(sp)
1c0084e8:	4cd6                	lw	s9,84(sp)
1c0084ea:	4d46                	lw	s10,80(sp)
1c0084ec:	4db6                	lw	s11,76(sp)
1c0084ee:	6109                	addi	sp,sp,128
1c0084f0:	8082                	ret

1c0084f2 <KerParSoftMax_SQ8>:
}
#endif

void KerParSoftMax_SQ8(KerSoftMax_SQ8_T *Arg)

{
1c0084f2:	7139                	addi	sp,sp,-64
1c0084f4:	de22                	sw	s0,60(sp)
1c0084f6:	dc26                	sw	s1,56(sp)
1c0084f8:	da4a                	sw	s2,52(sp)
1c0084fa:	d84e                	sw	s3,48(sp)
1c0084fc:	d652                	sw	s4,44(sp)
1c0084fe:	d456                	sw	s5,40(sp)
1c008500:	d25a                	sw	s6,36(sp)
1c008502:	d05e                	sw	s7,32(sp)
1c008504:	ce62                	sw	s8,28(sp)
1c008506:	cc66                	sw	s9,24(sp)
1c008508:	ca6a                	sw	s10,20(sp)
1c00850a:	c86e                	sw	s11,16(sp)
	signed char * __restrict__ In = Arg->In;
1c00850c:	00052f03          	lw	t5,0(a0)
	short int * __restrict__ Out = Arg->Out;
1c008510:	450c                	lw	a1,8(a0)
1c008512:	c42e                	sw	a1,8(sp)
	int N = Arg->N;
1c008514:	00455e83          	lhu	t4,4(a0)
	int Norm = Arg->Infos[AT_INF_BIASL_SM];
1c008518:	455c                	lw	a5,12(a0)
1c00851a:	00078a03          	lb	s4,0(a5)
	static L1_CL_MEM int Reduct[8];
	int M, Sum, InvSum;
	unsigned int CoreId = gap_coreid();
1c00851e:	f1402473          	csrr	s0,mhartid
1c008522:	c8041433          	p.extractu	s0,s0,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c008526:	f83eb7b3          	p.bclr	a5,t4,28,3
1c00852a:	00f037b3          	snez	a5,a5
1c00852e:	003ed713          	srli	a4,t4,0x3
1c008532:	97ba                	add	a5,a5,a4
	unsigned int ChunkCell = ChunkSize(N);
	unsigned int First = CoreId*ChunkCell;
1c008534:	02f40333          	mul	t1,s0,a5
	unsigned int Last  = Min(First+ChunkCell, N);
1c008538:	979a                	add	a5,a5,t1
1c00853a:	05d7ceb3          	p.min	t4,a5,t4
	unsigned int *Red = &Reduct[CoreId];

	/* Turns In into distribution */
	/* Find max */
	M = 0x80000000;
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c00853e:	8f9a                	mv	t6,t1
1c008540:	0dd37563          	bleu	t4,t1,1c00860a <KerParSoftMax_SQ8+0x118>
1c008544:	006f06b3          	add	a3,t5,t1
	M = 0x80000000;
1c008548:	80000737          	lui	a4,0x80000
1c00854c:	406e87b3          	sub	a5,t4,t1
1c008550:	0047c0fb          	lp.setup	x1,a5,1c008558 <KerParSoftMax_SQ8+0x66>
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c008554:	0016860b          	p.lb	a2,1(a3!)
1c008558:	04c76733          	p.max	a4,a4,a2
	Reduct[CoreId] = M;
1c00855c:	00241793          	slli	a5,s0,0x2
1c008560:	100006b7          	lui	a3,0x10000
1c008564:	02068693          	addi	a3,a3,32 # 10000020 <Reduct.15734>
1c008568:	00e6e7a3          	p.sw	a4,a5(a3)
1c00856c:	002047b7          	lui	a5,0x204
1c008570:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c008574:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	if (CoreId==0) {
1c008578:	1e041e63          	bnez	s0,1c008774 <KerParSoftMax_SQ8+0x282>
		M = Reduct[0];
1c00857c:	10000737          	lui	a4,0x10000
1c008580:	02070713          	addi	a4,a4,32 # 10000020 <Reduct.15734>
1c008584:	0047268b          	p.lw	a3,4(a4!)
1c008588:	007250fb          	lp.setupi	x1,7,1c008590 <KerParSoftMax_SQ8+0x9e>
		for (int i=1; i<gap_ncore(); i++) M = Max(M, Reduct[i]);
1c00858c:	0047260b          	p.lw	a2,4(a4!)
1c008590:	04c6e6b3          	p.max	a3,a3,a2
		//for (int i=1; i<8; i++) M = Max(M, Reduct[i]);
		Reduct[0] = M;
1c008594:	100007b7          	lui	a5,0x10000
1c008598:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c00859c:	c394                	sw	a3,0(a5)
1c00859e:	00204737          	lui	a4,0x204
1c0085a2:	20070713          	addi	a4,a4,512 # 204200 <__L2+0x184200>
1c0085a6:	01c76683          	p.elw	a3,28(a4)
	gap_waitbarrier(0);
	/* Computes Exp(In[i]-M) for all in and sum results.
	   Since we substract max from In[i] we always have exp(X) with X<=0 thus exp(X)<=1.0
	   By definition of softmax Sum is <= 1
	*/
	M = Reduct[0];
1c0085aa:	0007a983          	lw	s3,0(a5)
	Sum = 0;
	for (int i=First; i<Last; i++) {
1c0085ae:	1dd36f63          	bltu	t1,t4,1c00878c <KerParSoftMax_SQ8+0x29a>
		unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(Norm));
		Out[i] = Exp; Sum += Exp;
	}
	Reduct[CoreId] = Sum;
1c0085b2:	040a                	slli	s0,s0,0x2
1c0085b4:	100007b7          	lui	a5,0x10000
1c0085b8:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c0085bc:	0007e423          	p.sw	zero,s0(a5)
1c0085c0:	002047b7          	lui	a5,0x204
1c0085c4:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0085c8:	01c7e703          	p.elw	a4,28(a5)
1c0085cc:	10000737          	lui	a4,0x10000
1c0085d0:	02070713          	addi	a4,a4,32 # 10000020 <Reduct.15734>
	gap_waitbarrier(0);
	if (CoreId==0) {
		Sum = 0;
1c0085d4:	4681                	li	a3,0
1c0085d6:	008250fb          	lp.setupi	x1,8,1c0085de <KerParSoftMax_SQ8+0xec>
		for (int i=0; i<gap_ncore(); i++) Sum += Reduct[i];
1c0085da:	0047260b          	p.lw	a2,4(a4!)
1c0085de:	96b2                	add	a3,a3,a2
		Reduct[0] = Sum;
1c0085e0:	100007b7          	lui	a5,0x10000
1c0085e4:	02d7a023          	sw	a3,32(a5) # 10000020 <Reduct.15734>
1c0085e8:	002047b7          	lui	a5,0x204
1c0085ec:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0085f0:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
	Sum = Reduct[0];
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
	for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c0085f4:	13d37c63          	bleu	t4,t1,1c00872c <KerParSoftMax_SQ8+0x23a>
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
1c0085f8:	100007b7          	lui	a5,0x10000
1c0085fc:	0207a783          	lw	a5,32(a5) # 10000020 <Reduct.15734>
1c008600:	3fff8637          	lui	a2,0x3fff8
1c008604:	02f64633          	div	a2,a2,a5
1c008608:	a8cd                	j	1c0086fa <KerParSoftMax_SQ8+0x208>
	M = 0x80000000;
1c00860a:	80000737          	lui	a4,0x80000
1c00860e:	b7b9                	j	1c00855c <KerParSoftMax_SQ8+0x6a>
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c008610:	0786                	slli	a5,a5,0x1
1c008612:	00fc8733          	add	a4,s9,a5
1c008616:	00075583          	lhu	a1,0(a4) # 80000000 <pulp__FC+0x80000001>
1c00861a:	97e2                	add	a5,a5,s8
1c00861c:	0007d703          	lhu	a4,0(a5)
	FractX_s = FractX; Z_s = FractX; Result = 0;
1c008620:	1008c8b3          	p.exths	a7,a7
1c008624:	002a8813          	addi	a6,s5,2
1c008628:	87c6                	mv	a5,a7
1c00862a:	4501                	li	a0,0
1c00862c:	410d8633          	sub	a2,s11,a6
1c008630:	1679                	addi	a2,a2,-2
1c008632:	8205                	srli	a2,a2,0x1
1c008634:	0605                	addi	a2,a2,1
1c008636:	008640fb          	lp.setup	x1,a2,1c008646 <KerParSoftMax_SQ8+0x154>
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c00863a:	00285d0b          	p.lhu	s10,2(a6!)
1c00863e:	43a78533          	p.mac	a0,a5,s10
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c008642:	9f17c7db          	p.mac.sl.zl	a5,a5,a7,a5
1c008646:	1007c7b3          	p.exths	a5,a5
	Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c00864a:	1e0567db          	p.mac.zh.zl	a5,a0,zero,a5
1c00864e:	97ca                	add	a5,a5,s2
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c008650:	1ee7c75b          	p.mac.zl.zl	a4,a5,a4,a5
1c008654:	0177f7b3          	and	a5,a5,s7
1c008658:	42b78733          	p.mac	a4,a5,a1
1c00865c:	87ba                	mv	a5,a4
	if (Result && (X > 0x7FFFFFFF)) 
1c00865e:	c319                	beqz	a4,1c008664 <KerParSoftMax_SQ8+0x172>
1c008660:	0406c663          	bltz	a3,1c0086ac <KerParSoftMax_SQ8+0x1ba>
		Out[i] = Exp; Sum += Exp;
1c008664:	873e                	mv	a4,a5
1c008666:	00e2912b          	p.sh	a4,2(t0!)
1c00866a:	93be                	add	t2,t2,a5
1c00866c:	1e7d                	addi	t3,t3,-1
1c00866e:	000e1363          	bnez	t3,1c008674 <KerParSoftMax_SQ8+0x182>
1c008672:	a0b1                	j	1c0086be <KerParSoftMax_SQ8+0x1cc>
		unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(Norm));
1c008674:	001f068b          	p.lb	a3,1(t5!)
1c008678:	413686b3          	sub	a3,a3,s3
1c00867c:	014696b3          	sll	a3,a3,s4
1c008680:	8636                	mv	a2,a3
	if (!X) return 0x8000;
1c008682:	87a6                	mv	a5,s1
1c008684:	d2e5                	beqz	a3,1c008664 <KerParSoftMax_SQ8+0x172>
	Y = Abs(X);
1c008686:	04068733          	p.avg	a4,a3,zero
	IntX = (Y >> 15);
1c00868a:	40f75793          	srai	a5,a4,0xf
	FractX = (Y & 0x7FFF);
1c00868e:	012778b3          	and	a7,a4,s2
	if (gap_bitextractu(FractX, 1, 14)) {
1c008692:	01189593          	slli	a1,a7,0x11
1c008696:	0005d563          	bgez	a1,1c0086a0 <KerParSoftMax_SQ8+0x1ae>
		FractX -= 0x8000; IntX++;
1c00869a:	75e1                	lui	a1,0xffff8
1c00869c:	98ae                	add	a7,a7,a1
1c00869e:	0785                	addi	a5,a5,1
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c0086a0:	f6fb58e3          	ble	a5,s6,1c008610 <KerParSoftMax_SQ8+0x11e>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c0086a4:	00e60963          	beq	a2,a4,1c0086b6 <KerParSoftMax_SQ8+0x1c4>
1c0086a8:	4781                	li	a5,0
1c0086aa:	bf6d                	j	1c008664 <KerParSoftMax_SQ8+0x172>
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c0086ac:	4732                	lw	a4,12(sp)
1c0086ae:	02f747b3          	div	a5,a4,a5
1c0086b2:	8785                	srai	a5,a5,0x1
1c0086b4:	bf45                	j	1c008664 <KerParSoftMax_SQ8+0x172>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c0086b6:	47b2                	lw	a5,12(sp)
1c0086b8:	b775                	j	1c008664 <KerParSoftMax_SQ8+0x172>
1c0086ba:	4705                	li	a4,1
1c0086bc:	a899                	j	1c008712 <KerParSoftMax_SQ8+0x220>
	Reduct[CoreId] = Sum;
1c0086be:	00241713          	slli	a4,s0,0x2
1c0086c2:	100007b7          	lui	a5,0x10000
1c0086c6:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c0086ca:	0077e723          	p.sw	t2,a4(a5)
1c0086ce:	002047b7          	lui	a5,0x204
1c0086d2:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0086d6:	01c7e703          	p.elw	a4,28(a5)
	if (CoreId==0) {
1c0086da:	ee0409e3          	beqz	s0,1c0085cc <KerParSoftMax_SQ8+0xda>
1c0086de:	002047b7          	lui	a5,0x204
1c0086e2:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0086e6:	01c7e703          	p.elw	a4,28(a5)
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
1c0086ea:	100007b7          	lui	a5,0x10000
1c0086ee:	0207a783          	lw	a5,32(a5) # 10000020 <Reduct.15734>
1c0086f2:	3fff8637          	lui	a2,0x3fff8
1c0086f6:	02f64633          	div	a2,a2,a5
1c0086fa:	0306                	slli	t1,t1,0x1
1c0086fc:	47a2                	lw	a5,8(sp)
1c0086fe:	933e                	add	t1,t1,a5
	for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c008700:	46bd                	li	a3,15
1c008702:	41fe8733          	sub	a4,t4,t6
1c008706:	001f8793          	addi	a5,t6,1
1c00870a:	fafee8e3          	bltu	t4,a5,1c0086ba <KerParSoftMax_SQ8+0x1c8>
1c00870e:	fa0e86e3          	beqz	t4,1c0086ba <KerParSoftMax_SQ8+0x1c8>
1c008712:	00c740fb          	lp.setup	x1,a4,1c00872a <KerParSoftMax_SQ8+0x238>
1c008716:	00031783          	lh	a5,0(t1)
1c00871a:	02c787b3          	mul	a5,a5,a2
1c00871e:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c008722:	040787b3          	p.avg	a5,a5,zero
1c008726:	00f3112b          	p.sh	a5,2(t1!)
1c00872a:	0f85                	addi	t6,t6,1
1c00872c:	002047b7          	lui	a5,0x204
1c008730:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c008734:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);

}
1c008738:	5472                	lw	s0,60(sp)
1c00873a:	54e2                	lw	s1,56(sp)
1c00873c:	5952                	lw	s2,52(sp)
1c00873e:	59c2                	lw	s3,48(sp)
1c008740:	5a32                	lw	s4,44(sp)
1c008742:	5aa2                	lw	s5,40(sp)
1c008744:	5b12                	lw	s6,36(sp)
1c008746:	5b82                	lw	s7,32(sp)
1c008748:	4c72                	lw	s8,28(sp)
1c00874a:	4ce2                	lw	s9,24(sp)
1c00874c:	4d52                	lw	s10,20(sp)
1c00874e:	4dc2                	lw	s11,16(sp)
1c008750:	6121                	addi	sp,sp,64
1c008752:	8082                	ret
	Reduct[CoreId] = Sum;
1c008754:	040a                	slli	s0,s0,0x2
1c008756:	100007b7          	lui	a5,0x10000
1c00875a:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c00875e:	0007e423          	p.sw	zero,s0(a5)
1c008762:	002047b7          	lui	a5,0x204
1c008766:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00876a:	01c7e703          	p.elw	a4,28(a5)
1c00876e:	01c7e703          	p.elw	a4,28(a5)
1c008772:	bf6d                	j	1c00872c <KerParSoftMax_SQ8+0x23a>
1c008774:	002047b7          	lui	a5,0x204
1c008778:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00877c:	01c7e703          	p.elw	a4,28(a5)
	M = Reduct[0];
1c008780:	100007b7          	lui	a5,0x10000
1c008784:	0207a983          	lw	s3,32(a5) # 10000020 <Reduct.15734>
	for (int i=First; i<Last; i++) {
1c008788:	fdd376e3          	bleu	t4,t1,1c008754 <KerParSoftMax_SQ8+0x262>
1c00878c:	00131293          	slli	t0,t1,0x1
1c008790:	4722                	lw	a4,8(sp)
1c008792:	92ba                	add	t0,t0,a4
1c008794:	9f1a                	add	t5,t5,t1
	Sum = 0;
1c008796:	4381                	li	t2,0
	if (!X) return 0x8000;
1c008798:	64a1                	lui	s1,0x8
	FractX = (Y & 0x7FFF);
1c00879a:	fff48913          	addi	s2,s1,-1 # 7fff <__rt_stack_size+0x77ff>
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c00879e:	4b2d                	li	s6,11
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c0087a0:	1c00fcb7          	lui	s9,0x1c00f
1c0087a4:	0c0c8c93          	addi	s9,s9,192 # 1c00f0c0 <IntegerExpLUT>
1c0087a8:	1c00fc37          	lui	s8,0x1c00f
1c0087ac:	0a8c0c13          	addi	s8,s8,168 # 1c00f0a8 <FractionExpLUT>
1c0087b0:	1c00fab7          	lui	s5,0x1c00f
1c0087b4:	094a8a93          	addi	s5,s5,148 # 1c00f094 <ExpCoeffLUT>
1c0087b8:	012a8d93          	addi	s11,s5,18
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c0087bc:	6bc1                	lui	s7,0x10
1c0087be:	1bfd                	addi	s7,s7,-1
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c0087c0:	800007b7          	lui	a5,0x80000
1c0087c4:	fff7c793          	not	a5,a5
1c0087c8:	c63e                	sw	a5,12(sp)
		FractX -= 0x8000; IntX++;
1c0087ca:	406e8e33          	sub	t3,t4,t1
1c0087ce:	b55d                	j	1c008674 <KerParSoftMax_SQ8+0x182>

1c0087d0 <CNN_NormBW_offset_fps>:
	gap_waitbarrier(0);
}

void CNN_NormBW_offset_fps(KerNormBW_fps_T *Arg)
{
	unsigned char *__restrict__ In = Arg->In;
1c0087d0:	4114                	lw	a3,0(a0)
	signed char *__restrict__ Out = Arg->Out;
1c0087d2:	4150                	lw	a2,4(a0)
	unsigned int W = Arg->W;
	unsigned int H = Arg->H;
	unsigned int Sz = W * H;
1c0087d4:	451c                	lw	a5,8(a0)
1c0087d6:	4548                	lw	a0,12(a0)
1c0087d8:	02a78533          	mul	a0,a5,a0
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c0087dc:	f14025f3          	csrr	a1,mhartid
1c0087e0:	c80595b3          	p.extractu	a1,a1,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0087e4:	f8353733          	p.bclr	a4,a0,28,3
1c0087e8:	00e03733          	snez	a4,a4
1c0087ec:	00355793          	srli	a5,a0,0x3
1c0087f0:	973e                	add	a4,a4,a5
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c0087f2:	02e585b3          	mul	a1,a1,a4
1c0087f6:	00e587b3          	add	a5,a1,a4
1c0087fa:	04a7c7b3          	p.min	a5,a5,a0

	for (int Idx=First; Idx<Last; Idx++) {
1c0087fe:	00f5fd63          	bleu	a5,a1,1c008818 <CNN_NormBW_offset_fps+0x48>
1c008802:	962e                	add	a2,a2,a1
1c008804:	96ae                	add	a3,a3,a1
1c008806:	8f8d                	sub	a5,a5,a1
1c008808:	0067c0fb          	lp.setup	x1,a5,1c008814 <CNN_NormBW_offset_fps+0x44>
		Out[Idx] = In[Idx] - 128;
1c00880c:	0016c70b          	p.lbu	a4,1(a3!)
1c008810:	f8070713          	addi	a4,a4,-128
1c008814:	00e600ab          	p.sb	a4,1(a2!) # 3fff8001 <__l2_end+0x23fe8655>
1c008818:	002047b7          	lui	a5,0x204
1c00881c:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c008820:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c008824:	8082                	ret

1c008826 <pi_flash_open>:


int pi_flash_open(struct pi_device *device)
{
  struct pi_flash_conf *conf = (struct pi_flash_conf *)device->config;
  pi_flash_api_t *api = (pi_flash_api_t *)conf->api;
1c008826:	415c                	lw	a5,4(a0)
1c008828:	439c                	lw	a5,0(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c00882a:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c00882e:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c008830:	8302                	jr	t1

1c008832 <__flash_conf_init>:
}


void __flash_conf_init(struct pi_flash_conf *conf)
{
}
1c008832:	8082                	ret

1c008834 <pi_task_wait_on.isra.3>:
{
  pi_task_t task;
  int result = pi_fs_copy_2d_async(file, index, buffer, size, stride, length, ext2loc, pi_task_block(&task));
  pi_task_wait_on(&task);
  return result;
}
1c008834:	1141                	addi	sp,sp,-16
1c008836:	c422                	sw	s0,8(sp)
1c008838:	c226                	sw	s1,4(sp)
1c00883a:	c606                	sw	ra,12(sp)
1c00883c:	c04a                	sw	s2,0(sp)
1c00883e:	842a                	mv	s0,a0
1c008840:	00040783          	lb	a5,0(s0)
1c008844:	c799                	beqz	a5,1c008852 <pi_task_wait_on.isra.3+0x1e>
1c008846:	40b2                	lw	ra,12(sp)
1c008848:	4422                	lw	s0,8(sp)
1c00884a:	4492                	lw	s1,4(sp)
1c00884c:	4902                	lw	s2,0(sp)
1c00884e:	0141                	addi	sp,sp,16
1c008850:	8082                	ret
1c008852:	30047973          	csrrci	s2,mstatus,8
1c008856:	4585                	li	a1,1
1c008858:	01c00513          	li	a0,28
1c00885c:	523020ef          	jal	ra,1c00b57e <__rt_event_execute>
1c008860:	30091073          	csrw	mstatus,s2
1c008864:	bff1                	j	1c008840 <pi_task_wait_on.isra.3+0xc>

1c008866 <pi_fs_conf_init>:
1c008866:	00052023          	sw	zero,0(a0)
1c00886a:	00052423          	sw	zero,8(a0)
1c00886e:	00050623          	sb	zero,12(a0)
1c008872:	00052823          	sw	zero,16(a0)
1c008876:	8082                	ret

1c008878 <pi_fs_mount>:
1c008878:	4158                	lw	a4,4(a0)
1c00887a:	4b1c                	lw	a5,16(a4)
1c00887c:	eb89                	bnez	a5,1c00888e <pi_fs_mount+0x16>
1c00887e:	431c                	lw	a5,0(a4)
1c008880:	cb99                	beqz	a5,1c008896 <pi_fs_mount+0x1e>
1c008882:	0017bf63          	p.bneimm	a5,1,1c0088a0 <pi_fs_mount+0x28>
1c008886:	1c00f7b7          	lui	a5,0x1c00f
1c00888a:	3c478793          	addi	a5,a5,964 # 1c00f3c4 <__pi_host_fs_api>
1c00888e:	0007a303          	lw	t1,0(a5)
1c008892:	c11c                	sw	a5,0(a0)
1c008894:	8302                	jr	t1
1c008896:	1c00f7b7          	lui	a5,0x1c00f
1c00889a:	39c78793          	addi	a5,a5,924 # 1c00f39c <__pi_read_fs_api>
1c00889e:	bfc5                	j	1c00888e <pi_fs_mount+0x16>
1c0088a0:	557d                	li	a0,-1
1c0088a2:	8082                	ret

1c0088a4 <pi_fs_unmount>:
1c0088a4:	411c                	lw	a5,0(a0)
1c0088a6:	0047a303          	lw	t1,4(a5)
1c0088aa:	8302                	jr	t1

1c0088ac <pi_fs_open>:
1c0088ac:	411c                	lw	a5,0(a0)
1c0088ae:	0087a303          	lw	t1,8(a5)
1c0088b2:	8302                	jr	t1

1c0088b4 <pi_fs_close>:
1c0088b4:	415c                	lw	a5,4(a0)
1c0088b6:	00c7a303          	lw	t1,12(a5)
1c0088ba:	8302                	jr	t1

1c0088bc <pi_fs_read_async>:
1c0088bc:	415c                	lw	a5,4(a0)
1c0088be:	0107a303          	lw	t1,16(a5)
1c0088c2:	8302                	jr	t1

1c0088c4 <pi_fs_read>:
1c0088c4:	7175                	addi	sp,sp,-144
1c0088c6:	4785                	li	a5,1
1c0088c8:	868a                	mv	a3,sp
1c0088ca:	c706                	sw	ra,140(sp)
1c0088cc:	c522                	sw	s0,136(sp)
1c0088ce:	cc3e                	sw	a5,24(sp)
1c0088d0:	d43e                	sw	a5,40(sp)
1c0088d2:	c202                	sw	zero,4(sp)
1c0088d4:	00010a23          	sb	zero,20(sp)
1c0088d8:	37d5                	jal	1c0088bc <pi_fs_read_async>
1c0088da:	842a                	mv	s0,a0
1c0088dc:	0848                	addi	a0,sp,20
1c0088de:	3f99                	jal	1c008834 <pi_task_wait_on.isra.3>
1c0088e0:	8522                	mv	a0,s0
1c0088e2:	40ba                	lw	ra,140(sp)
1c0088e4:	442a                	lw	s0,136(sp)
1c0088e6:	6149                	addi	sp,sp,144
1c0088e8:	8082                	ret

1c0088ea <pi_fs_write_async>:
1c0088ea:	415c                	lw	a5,4(a0)
1c0088ec:	0187a303          	lw	t1,24(a5)
1c0088f0:	8302                	jr	t1

1c0088f2 <pi_fs_write>:
1c0088f2:	7175                	addi	sp,sp,-144
1c0088f4:	4785                	li	a5,1
1c0088f6:	868a                	mv	a3,sp
1c0088f8:	c706                	sw	ra,140(sp)
1c0088fa:	c522                	sw	s0,136(sp)
1c0088fc:	cc3e                	sw	a5,24(sp)
1c0088fe:	d43e                	sw	a5,40(sp)
1c008900:	c202                	sw	zero,4(sp)
1c008902:	00010a23          	sb	zero,20(sp)
1c008906:	37d5                	jal	1c0088ea <pi_fs_write_async>
1c008908:	842a                	mv	s0,a0
1c00890a:	0848                	addi	a0,sp,20
1c00890c:	3725                	jal	1c008834 <pi_task_wait_on.isra.3>
1c00890e:	8522                	mv	a0,s0
1c008910:	40ba                	lw	ra,140(sp)
1c008912:	442a                	lw	s0,136(sp)
1c008914:	6149                	addi	sp,sp,144
1c008916:	8082                	ret

1c008918 <pi_fs_copy_async>:
1c008918:	00452803          	lw	a6,4(a0)
1c00891c:	02082303          	lw	t1,32(a6)
1c008920:	8302                	jr	t1

1c008922 <pi_fs_seek>:

int32_t pi_fs_seek(pi_fs_file_t *file, unsigned int offset)
{
  return file->api->seek(file, offset);
1c008922:	415c                	lw	a5,4(a0)
1c008924:	01c7a303          	lw	t1,28(a5)
1c008928:	8302                	jr	t1

1c00892a <pi_flash_read_async>:
}

static inline void pi_flash_read_async(struct pi_device *device, uint32_t pi_flash_addr, void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->read_async(device, pi_flash_addr, data, size, task);
1c00892a:	411c                	lw	a5,0(a0)
1c00892c:	00c7a303          	lw	t1,12(a5)
1c008930:	8302                	jr	t1

1c008932 <__pi_read_fs_write>:
    return block_size;
}

static int32_t __pi_read_fs_write(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *task)
{
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c008932:	411c                	lw	a5,0(a0)
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c008934:	01852803          	lw	a6,24(a0)
{
1c008938:	8736                	mv	a4,a3
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c00893a:	4794                	lw	a3,8(a5)
    unsigned int addr = file->addr + file->offset;
1c00893c:	495c                	lw	a5,20(a0)
{
1c00893e:	88ae                	mv	a7,a1
1c008940:	1141                	addi	sp,sp,-16
    unsigned int addr = file->addr + file->offset;
1c008942:	010785b3          	add	a1,a5,a6
    if(file->offset + size > file->fs_file.size)
1c008946:	00c52803          	lw	a6,12(a0)
{
1c00894a:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c00894c:	00c78333          	add	t1,a5,a2
1c008950:	00687463          	bleu	t1,a6,1c008958 <__pi_read_fs_write+0x26>
    {
        real_size = file->fs_file.size - file->offset;
1c008954:	40f80633          	sub	a2,a6,a5
    }
    file->offset += real_size;
1c008958:	97b2                	add	a5,a5,a2
1c00895a:	c95c                	sw	a5,20(a0)
    
    pi_flash_program_async(fs->flash, addr, (void *) buffer, real_size, task);
1c00895c:	4288                	lw	a0,0(a3)
}

static inline void pi_flash_program_async(struct pi_device *device, uint32_t pi_flash_addr, const void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->program_async(device, pi_flash_addr, data, size, task);
1c00895e:	86b2                	mv	a3,a2
1c008960:	8646                	mv	a2,a7
1c008962:	411c                	lw	a5,0(a0)
1c008964:	4b9c                	lw	a5,16(a5)
1c008966:	9782                	jalr	a5
    
    return 0;
}
1c008968:	40b2                	lw	ra,12(sp)
1c00896a:	4501                	li	a0,0
1c00896c:	0141                	addi	sp,sp,16
1c00896e:	8082                	ret

1c008970 <__pi_read_fs_seek>:
static int32_t __pi_read_fs_seek(pi_fs_file_t *_file, unsigned int offset)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    //printf("[FS] File seek (file: %p, offset: 0x%x)\n", file, offset);
    
    if(offset < file->fs_file.size)
1c008970:	455c                	lw	a5,12(a0)
1c008972:	00f5f563          	bleu	a5,a1,1c00897c <__pi_read_fs_seek+0xc>
    {
        file->offset = offset;
1c008976:	c94c                	sw	a1,20(a0)
        return 0;
1c008978:	4501                	li	a0,0
1c00897a:	8082                	ret
    }
    return -1;
1c00897c:	557d                	li	a0,-1
}
1c00897e:	8082                	ret

1c008980 <__pi_read_fs_direct_read_async>:
}

static int32_t __pi_read_fs_direct_read_async(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *event)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008980:	411c                	lw	a5,0(a0)
{
1c008982:	1141                	addi	sp,sp,-16
1c008984:	c422                	sw	s0,8(sp)
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008986:	0087a803          	lw	a6,8(a5)
{
1c00898a:	8432                	mv	s0,a2
    // Mask interrupt to update file current position and get information
    //int irq = pi_irq_disable();
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c00898c:	495c                	lw	a5,20(a0)
1c00898e:	4d10                	lw	a2,24(a0)
{
1c008990:	88ae                	mv	a7,a1
1c008992:	8736                	mv	a4,a3
    unsigned int addr = file->addr + file->offset;
1c008994:	00c785b3          	add	a1,a5,a2
    if(file->offset + size > file->fs_file.size)
1c008998:	4550                	lw	a2,12(a0)
{
1c00899a:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c00899c:	008786b3          	add	a3,a5,s0
1c0089a0:	00d67463          	bleu	a3,a2,1c0089a8 <__pi_read_fs_direct_read_async+0x28>
    {
        real_size = file->fs_file.size - file->offset;
1c0089a4:	40f60433          	sub	s0,a2,a5
    }
    file->offset += real_size;
1c0089a8:	97a2                	add	a5,a5,s0
1c0089aa:	c95c                	sw	a5,20(a0)
    
    //pi_irq_restore(irq);
    
    pi_flash_read_async(fs->flash, addr, (void *) buffer, real_size, event);
1c0089ac:	00082503          	lw	a0,0(a6)
1c0089b0:	86a2                	mv	a3,s0
1c0089b2:	8646                	mv	a2,a7
1c0089b4:	3f9d                	jal	1c00892a <pi_flash_read_async>
    
    return real_size;
}
1c0089b6:	8522                	mv	a0,s0
1c0089b8:	40b2                	lw	ra,12(sp)
1c0089ba:	4422                	lw	s0,8(sp)
1c0089bc:	0141                	addi	sp,sp,16
1c0089be:	8082                	ret

1c0089c0 <__pi_read_fs_copy_async>:


static int32_t
__pi_read_fs_copy_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc,
                        pi_task_t *task)
{
1c0089c0:	882a                	mv	a6,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0089c2:	4108                	lw	a0,0(a0)
    return pi_flash_copy_async(fs->flash, file->addr + index, buffer, size, ext2loc, task);
1c0089c4:	01882803          	lw	a6,24(a6)
1c0089c8:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_async(device, pi_flash_addr, buffer, size, ext2loc, task);
1c0089ca:	95c2                	add	a1,a1,a6
1c0089cc:	4108                	lw	a0,0(a0)
1c0089ce:	00052883          	lw	a7,0(a0)
1c0089d2:	0288a303          	lw	t1,40(a7)
1c0089d6:	8302                	jr	t1

1c0089d8 <__pi_read_fs_copy_2d_async>:
}

static int32_t
__pi_read_fs_copy_2d_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, uint32_t stride,
                           uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c0089d8:	832a                	mv	t1,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0089da:	4108                	lw	a0,0(a0)
    return pi_flash_copy_2d_async(fs->flash, file->addr + index, buffer, size, stride, length, ext2loc, task);
1c0089dc:	01832e03          	lw	t3,24(t1)
1c0089e0:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_2d_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, task);
1c0089e2:	95f2                	add	a1,a1,t3
1c0089e4:	4108                	lw	a0,0(a0)
1c0089e6:	00052303          	lw	t1,0(a0)
1c0089ea:	02c32303          	lw	t1,44(t1)
1c0089ee:	8302                	jr	t1

1c0089f0 <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0089f0:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c0089f4:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c0089f8:	00052023          	sw	zero,0(a0)
1c0089fc:	01c00713          	li	a4,28
  if (sched->first) {
1c008a00:	c619                	beqz	a2,1c008a0e <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c008a02:	435c                	lw	a5,4(a4)
1c008a04:	c388                	sw	a0,0(a5)
  sched->last = event;
1c008a06:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c008a08:	30069073          	csrw	mstatus,a3
}
1c008a0c:	8082                	ret
    sched->first = event;
1c008a0e:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c008a12:	bfd5                	j	1c008a06 <rt_event_enqueue+0x16>

1c008a14 <__pi_fs_free>:
    if(fs != NULL)
1c008a14:	c91d                	beqz	a0,1c008a4a <__pi_fs_free+0x36>
{
1c008a16:	1141                	addi	sp,sp,-16
1c008a18:	c422                	sw	s0,8(sp)
1c008a1a:	842a                	mv	s0,a0
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c008a1c:	09c52503          	lw	a0,156(a0)
{
1c008a20:	c606                	sw	ra,12(sp)
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c008a22:	c511                	beqz	a0,1c008a2e <__pi_fs_free+0x1a>
1c008a24:	09842783          	lw	a5,152(s0)
1c008a28:	438c                	lw	a1,0(a5)
1c008a2a:	60f020ef          	jal	ra,1c00b838 <pi_l2_free>
        if(fs->pi_fs_l2) pmsis_l2_malloc_free(fs->pi_fs_l2, sizeof(pi_fs_l2_t));
1c008a2e:	09842503          	lw	a0,152(s0)
1c008a32:	c501                	beqz	a0,1c008a3a <__pi_fs_free+0x26>
1c008a34:	45a1                	li	a1,8
1c008a36:	603020ef          	jal	ra,1c00b838 <pi_l2_free>
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c008a3a:	8522                	mv	a0,s0
}
1c008a3c:	4422                	lw	s0,8(sp)
1c008a3e:	40b2                	lw	ra,12(sp)
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c008a40:	1b800593          	li	a1,440
}
1c008a44:	0141                	addi	sp,sp,16
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c008a46:	5f30206f          	j	1c00b838 <pi_l2_free>
1c008a4a:	8082                	ret

1c008a4c <__pi_read_fs_unmount>:
    __pi_fs_free(fs);
1c008a4c:	4508                	lw	a0,8(a0)
1c008a4e:	b7d9                	j	1c008a14 <__pi_fs_free>

1c008a50 <__pi_read_fs_open>:
{
1c008a50:	1101                	addi	sp,sp,-32
1c008a52:	ca26                	sw	s1,20(sp)
1c008a54:	c452                	sw	s4,8(sp)
1c008a56:	c256                	sw	s5,4(sp)
1c008a58:	ce06                	sw	ra,28(sp)
1c008a5a:	cc22                	sw	s0,24(sp)
1c008a5c:	c84a                	sw	s2,16(sp)
1c008a5e:	c64e                	sw	s3,12(sp)
1c008a60:	c05a                	sw	s6,0(sp)
1c008a62:	8a2a                	mv	s4,a0
1c008a64:	8aae                	mv	s5,a1
    pi_read_fs_t *fs = (pi_read_fs_t *) device->data;
1c008a66:	4504                	lw	s1,8(a0)
    if(flags == PI_FS_FLAGS_WRITE)
1c008a68:	08163f63          	p.bneimm	a2,1,1c008b06 <__pi_read_fs_open+0xb6>
        if(fs->last_created_file)
1c008a6c:	12c4a783          	lw	a5,300(s1)
1c008a70:	c399                	beqz	a5,1c008a76 <__pi_read_fs_open+0x26>
    return NULL;
1c008a72:	4501                	li	a0,0
1c008a74:	a8bd                	j	1c008af2 <__pi_read_fs_open+0xa2>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c008a76:	0c000513          	li	a0,192
1c008a7a:	5b1020ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c008a7e:	842a                	mv	s0,a0
        if(file == NULL) return NULL;
1c008a80:	d96d                	beqz	a0,1c008a72 <__pi_read_fs_open+0x22>
        int str_len = strlen(file_name);
1c008a82:	8556                	mv	a0,s5
1c008a84:	393040ef          	jal	ra,1c00d616 <strlen>
        int header_size = ((str_len + 7) & ~0x7) + 12;
1c008a88:	00750913          	addi	s2,a0,7
1c008a8c:	c4093933          	p.bclr	s2,s2,2,0
1c008a90:	0931                	addi	s2,s2,12
        int str_len = strlen(file_name);
1c008a92:	89aa                	mv	s3,a0
        uint8_t *header = pmsis_l2_malloc(header_size);
1c008a94:	854a                	mv	a0,s2
1c008a96:	595020ef          	jal	ra,1c00b82a <pi_l2_malloc>
        if(header == NULL)
1c008a9a:	e519                	bnez	a0,1c008aa8 <__pi_read_fs_open+0x58>
    pmsis_l2_malloc_free(file, sizeof(pi_read_fs_file_t));
1c008a9c:	0c000593          	li	a1,192
1c008aa0:	8522                	mv	a0,s0
1c008aa2:	597020ef          	jal	ra,1c00b838 <pi_l2_free>
1c008aa6:	b7f1                	j	1c008a72 <__pi_read_fs_open+0x22>
        file->header = header;
1c008aa8:	0aa42a23          	sw	a0,180(s0)
        file->header_size = header_size;
1c008aac:	0b242c23          	sw	s2,184(s0)
        memcpy(&file->header[12], file_name, str_len);
1c008ab0:	864e                	mv	a2,s3
1c008ab2:	85d6                	mv	a1,s5
1c008ab4:	0531                	addi	a0,a0,12
1c008ab6:	387040ef          	jal	ra,1c00d63c <memcpy>
        *(uint32_t *) &file->header[8] = str_len;
1c008aba:	0b442783          	lw	a5,180(s0)
1c008abe:	0137a423          	sw	s3,8(a5)
        file->addr = fs->free_flash_area + header_size;
1c008ac2:	1284a783          	lw	a5,296(s1)
        file->fs_file.size = 0;
1c008ac6:	00042623          	sw	zero,12(s0)
        file->offset = 0;
1c008aca:	00042a23          	sw	zero,20(s0)
        file->addr = fs->free_flash_area + header_size;
1c008ace:	993e                	add	s2,s2,a5
        file->cache_addr = -1;
1c008ad0:	57fd                	li	a5,-1
        file->addr = fs->free_flash_area + header_size;
1c008ad2:	01242c23          	sw	s2,24(s0)
        file->cache_addr = -1;
1c008ad6:	0af42823          	sw	a5,176(s0)
        fs->last_created_file = file;
1c008ada:	1284a623          	sw	s0,300(s1)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c008ade:	000a2783          	lw	a5,0(s4)
    file->fs_file.fs_data = &fs->fs_data;
1c008ae2:	13048493          	addi	s1,s1,304
    file->fs_file.data = file;
1c008ae6:	c400                	sw	s0,8(s0)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c008ae8:	c05c                	sw	a5,4(s0)
    file->fs_file.fs = device;
1c008aea:	01442023          	sw	s4,0(s0)
    file->fs_file.fs_data = &fs->fs_data;
1c008aee:	c804                	sw	s1,16(s0)
    return &file->fs_file;
1c008af0:	8522                	mv	a0,s0
}
1c008af2:	40f2                	lw	ra,28(sp)
1c008af4:	4462                	lw	s0,24(sp)
1c008af6:	44d2                	lw	s1,20(sp)
1c008af8:	4942                	lw	s2,16(sp)
1c008afa:	49b2                	lw	s3,12(sp)
1c008afc:	4a22                	lw	s4,8(sp)
1c008afe:	4a92                	lw	s5,4(sp)
1c008b00:	4b02                	lw	s6,0(sp)
1c008b02:	6105                	addi	sp,sp,32
1c008b04:	8082                	ret
        unsigned int *pi_fs_info = fs->pi_fs_info;
1c008b06:	09c4a783          	lw	a5,156(s1)
        for (i = 0; i < nb_comps; i++)
1c008b0a:	4981                	li	s3,0
        pi_fs_desc_t *desc = NULL;
1c008b0c:	4901                	li	s2,0
        int nb_comps = *pi_fs_info++;
1c008b0e:	0007ab03          	lw	s6,0(a5)
1c008b12:	00478413          	addi	s0,a5,4
        for (i = 0; i < nb_comps; i++)
1c008b16:	0569c163          	blt	s3,s6,1c008b58 <__pi_read_fs_open+0x108>
        if(i == nb_comps) goto error;
1c008b1a:	f5698ce3          	beq	s3,s6,1c008a72 <__pi_read_fs_open+0x22>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c008b1e:	0c000513          	li	a0,192
1c008b22:	509020ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c008b26:	842a                	mv	s0,a0
        if(file == NULL) goto error;
1c008b28:	d529                	beqz	a0,1c008a72 <__pi_read_fs_open+0x22>
        file->cache = pmsis_l2_malloc(READ_FS_THRESHOLD_BLOCK_FULL);
1c008b2a:	08800513          	li	a0,136
1c008b2e:	4fd020ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c008b32:	0aa42623          	sw	a0,172(s0)
        if(file->cache == NULL) goto error1;
1c008b36:	d13d                	beqz	a0,1c008a9c <__pi_read_fs_open+0x4c>
        file->fs_file.size = desc->size;
1c008b38:	00492783          	lw	a5,4(s2)
        file->addr = desc->addr + fs->partition_offset;
1c008b3c:	4498                	lw	a4,8(s1)
        file->header = NULL;
1c008b3e:	0a042a23          	sw	zero,180(s0)
        file->fs_file.size = desc->size;
1c008b42:	c45c                	sw	a5,12(s0)
        file->addr = desc->addr + fs->partition_offset;
1c008b44:	00092783          	lw	a5,0(s2)
        file->offset = 0;
1c008b48:	00042a23          	sw	zero,20(s0)
        file->addr = desc->addr + fs->partition_offset;
1c008b4c:	97ba                	add	a5,a5,a4
1c008b4e:	cc1c                	sw	a5,24(s0)
        file->cache_addr = -1;
1c008b50:	57fd                	li	a5,-1
1c008b52:	0af42823          	sw	a5,176(s0)
1c008b56:	b761                	j	1c008ade <__pi_read_fs_open+0x8e>
            if(strcmp(desc->name, file_name) == 0) break;
1c008b58:	85d6                	mv	a1,s5
1c008b5a:	00c40513          	addi	a0,s0,12
1c008b5e:	285040ef          	jal	ra,1c00d5e2 <strcmp>
1c008b62:	c901                	beqz	a0,1c008b72 <__pi_read_fs_open+0x122>
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c008b64:	441c                	lw	a5,8(s0)
        for (i = 0; i < nb_comps; i++)
1c008b66:	8922                	mv	s2,s0
1c008b68:	0985                	addi	s3,s3,1
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c008b6a:	97a2                	add	a5,a5,s0
1c008b6c:	00c78413          	addi	s0,a5,12
1c008b70:	b75d                	j	1c008b16 <__pi_read_fs_open+0xc6>
1c008b72:	8922                	mv	s2,s0
1c008b74:	b76d                	j	1c008b1e <__pi_read_fs_open+0xce>

1c008b76 <__pi_fs_mount_step>:
{
1c008b76:	7179                	addi	sp,sp,-48
1c008b78:	d226                	sw	s1,36(sp)
    switch (fs->mount_step)
1c008b7a:	09052483          	lw	s1,144(a0)
{
1c008b7e:	d422                	sw	s0,40(sp)
1c008b80:	d606                	sw	ra,44(sp)
1c008b82:	d04a                	sw	s2,32(sp)
    const pi_partition_table_t partition_table = NULL;
1c008b84:	ce02                	sw	zero,28(sp)
{
1c008b86:	842a                	mv	s0,a0
    switch (fs->mount_step)
1c008b88:	0834a463          	p.beqimm	s1,3,1c008c10 <__pi_fs_mount_step+0x9a>
1c008b8c:	0c44a963          	p.beqimm	s1,4,1c008c5e <__pi_fs_mount_step+0xe8>
1c008b90:	0614ba63          	p.bneimm	s1,1,1c008c04 <__pi_fs_mount_step+0x8e>
            rc = pi_partition_table_load(fs->flash, &partition_table);
1c008b94:	4108                	lw	a0,0(a0)
1c008b96:	086c                	addi	a1,sp,28
1c008b98:	348010ef          	jal	ra,1c009ee0 <pi_partition_table_load>
            if(rc != PI_OK) goto error;
1c008b9c:	ed09                	bnez	a0,1c008bb6 <__pi_fs_mount_step+0x40>
            readfs_partition = pi_partition_find_first(partition_table, PI_PARTITION_TYPE_DATA,
1c008b9e:	4054                	lw	a3,4(s0)
1c008ba0:	4572                	lw	a0,28(sp)
1c008ba2:	08100613          	li	a2,129
1c008ba6:	4585                	li	a1,1
1c008ba8:	33c010ef          	jal	ra,1c009ee4 <pi_partition_find_first>
1c008bac:	892a                	mv	s2,a0
            if(readfs_partition == NULL)
1c008bae:	e901                	bnez	a0,1c008bbe <__pi_fs_mount_step+0x48>
                pi_partition_table_free(partition_table);
1c008bb0:	4572                	lw	a0,28(sp)
1c008bb2:	32c010ef          	jal	ra,1c009ede <pi_partition_table_free>
    fs->error = -1;
1c008bb6:	57fd                	li	a5,-1
1c008bb8:	12f42223          	sw	a5,292(s0)
1c008bbc:	a0c9                	j	1c008c7e <__pi_fs_mount_step+0x108>
            fs->partition_offset = pi_partition_get_flash_offset(readfs_partition);
1c008bbe:	316010ef          	jal	ra,1c009ed4 <pi_partition_get_flash_offset>

/// @cond IMPLEM

static inline pi_err_t pi_partition_close(const pi_partition_t *partition)
{
    pi_l2_free((pi_partition_t *) partition, sizeof(pi_partition_t));
1c008bc2:	02800593          	li	a1,40
1c008bc6:	c408                	sw	a0,8(s0)
1c008bc8:	854a                	mv	a0,s2
1c008bca:	46f020ef          	jal	ra,1c00b838 <pi_l2_free>
            pi_partition_table_free(partition_table);
1c008bce:	4572                	lw	a0,28(sp)
1c008bd0:	30e010ef          	jal	ra,1c009ede <pi_partition_table_free>
            fs->mount_step++;
1c008bd4:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c008bd8:	4008                	lw	a0,0(s0)
1c008bda:	440c                	lw	a1,8(s0)
            fs->mount_step++;
1c008bdc:	0789                	addi	a5,a5,2
1c008bde:	08f42823          	sw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c008be2:	09842603          	lw	a2,152(s0)


struct pi_task *pi_task_callback(struct pi_task *task, void (*callback)(void*), void *arg)
{
  task->id = PI_TASK_CALLBACK_ID;
  task->arg[0] = (uint32_t)callback;
1c008be6:	1c0097b7          	lui	a5,0x1c009
1c008bea:	b7678793          	addi	a5,a5,-1162 # 1c008b76 <__pi_fs_mount_step>
  task->id = PI_TASK_CALLBACK_ID;
1c008bee:	02042223          	sw	zero,36(s0)
  task->arg[0] = (uint32_t)callback;
1c008bf2:	c81c                	sw	a5,16(s0)
  task->arg[1] = (uint32_t)arg;
1c008bf4:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c008bf6:	d844                	sw	s1,52(s0)
  task->done = 0;
1c008bf8:	02040023          	sb	zero,32(s0)
1c008bfc:	00c40713          	addi	a4,s0,12
1c008c00:	46a1                	li	a3,8
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c008c02:	3325                	jal	1c00892a <pi_flash_read_async>
}
1c008c04:	50b2                	lw	ra,44(sp)
1c008c06:	5422                	lw	s0,40(sp)
1c008c08:	5492                	lw	s1,36(sp)
1c008c0a:	5902                	lw	s2,32(sp)
1c008c0c:	6145                	addi	sp,sp,48
1c008c0e:	8082                	ret
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c008c10:	09852783          	lw	a5,152(a0)
            int pi_fs_offset = fs->partition_offset;
1c008c14:	4504                	lw	s1,8(a0)
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c008c16:	4394                	lw	a3,0(a5)
1c008c18:	069d                	addi	a3,a3,7
1c008c1a:	c406b6b3          	p.bclr	a3,a3,2,0
            fs->pi_fs_info = pmsis_l2_malloc(pi_fs_size);
1c008c1e:	8536                	mv	a0,a3
1c008c20:	c636                	sw	a3,12(sp)
1c008c22:	409020ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c008c26:	08a42e23          	sw	a0,156(s0)
1c008c2a:	862a                	mv	a2,a0
            if(fs->pi_fs_info == NULL)
1c008c2c:	46b2                	lw	a3,12(sp)
1c008c2e:	d541                	beqz	a0,1c008bb6 <__pi_fs_mount_step+0x40>
            fs->mount_step++;
1c008c30:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c008c34:	4008                	lw	a0,0(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c008c36:	02042223          	sw	zero,36(s0)
            fs->mount_step++;
1c008c3a:	0785                	addi	a5,a5,1
1c008c3c:	08f42823          	sw	a5,144(s0)
  task->arg[0] = (uint32_t)callback;
1c008c40:	1c0097b7          	lui	a5,0x1c009
1c008c44:	b7678793          	addi	a5,a5,-1162 # 1c008b76 <__pi_fs_mount_step>
1c008c48:	c81c                	sw	a5,16(s0)
  task->implem.keep = 1;
1c008c4a:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c008c4c:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c008c4e:	d85c                	sw	a5,52(s0)
1c008c50:	02040023          	sb	zero,32(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c008c54:	00c40713          	addi	a4,s0,12
1c008c58:	00848593          	addi	a1,s1,8
1c008c5c:	b75d                	j	1c008c02 <__pi_fs_mount_step+0x8c>
            unsigned int *pi_fs_info = fs->pi_fs_info;
1c008c5e:	09c52703          	lw	a4,156(a0)
            for (i = 0; i < nb_comps; i++)
1c008c62:	4681                	li	a3,0
            int nb_comps = *pi_fs_info++;
1c008c64:	00470793          	addi	a5,a4,4
1c008c68:	430c                	lw	a1,0(a4)
            pi_fs_desc_t *desc = NULL;
1c008c6a:	4701                	li	a4,0
            for (i = 0; i < nb_comps; i++)
1c008c6c:	00b6cd63          	blt	a3,a1,1c008c86 <__pi_fs_mount_step+0x110>
            if(desc == NULL)
1c008c70:	e315                	bnez	a4,1c008c94 <__pi_fs_mount_step+0x11e>
                fs->free_flash_area = desc->addr + desc->size;
1c008c72:	12f42423          	sw	a5,296(s0)
            fs->last_created_file = NULL;
1c008c76:	12042623          	sw	zero,300(s0)
            fs->error = 0;
1c008c7a:	12042223          	sw	zero,292(s0)
  rt_event_enqueue(task);
1c008c7e:	08c42503          	lw	a0,140(s0)
1c008c82:	33bd                	jal	1c0089f0 <rt_event_enqueue>
1c008c84:	b741                	j	1c008c04 <__pi_fs_mount_step+0x8e>
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c008c86:	4790                	lw	a2,8(a5)
            for (i = 0; i < nb_comps; i++)
1c008c88:	873e                	mv	a4,a5
1c008c8a:	0685                	addi	a3,a3,1
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c008c8c:	963e                	add	a2,a2,a5
1c008c8e:	00c60793          	addi	a5,a2,12
1c008c92:	bfe9                	j	1c008c6c <__pi_fs_mount_step+0xf6>
                fs->free_flash_area = desc->addr + desc->size;
1c008c94:	431c                	lw	a5,0(a4)
1c008c96:	4358                	lw	a4,4(a4)
1c008c98:	97ba                	add	a5,a5,a4
1c008c9a:	bfe1                	j	1c008c72 <__pi_fs_mount_step+0xfc>

1c008c9c <__pi_read_fs_close>:
    if(file->header == NULL)
1c008c9c:	0b452603          	lw	a2,180(a0)
{
1c008ca0:	1141                	addi	sp,sp,-16
1c008ca2:	c422                	sw	s0,8(sp)
1c008ca4:	c606                	sw	ra,12(sp)
1c008ca6:	842a                	mv	s0,a0
    if(file->header == NULL)
1c008ca8:	ee19                	bnez	a2,1c008cc6 <__pi_read_fs_close+0x2a>
        pmsis_l2_malloc_free(file->cache, READ_FS_THRESHOLD_BLOCK_FULL);
1c008caa:	0ac52503          	lw	a0,172(a0)
1c008cae:	08800593          	li	a1,136
        pi_l2_free((void *) file->header, file->header_size);
1c008cb2:	387020ef          	jal	ra,1c00b838 <pi_l2_free>
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c008cb6:	8522                	mv	a0,s0
}
1c008cb8:	4422                	lw	s0,8(sp)
1c008cba:	40b2                	lw	ra,12(sp)
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c008cbc:	0c000593          	li	a1,192
}
1c008cc0:	0141                	addi	sp,sp,16
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c008cc2:	3770206f          	j	1c00b838 <pi_l2_free>
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008cc6:	411c                	lw	a5,0(a0)
        *(uint32_t *) &file->header[0] = file->addr;
1c008cc8:	4d0c                	lw	a1,24(a0)
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c008cca:	4558                	lw	a4,12(a0)
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008ccc:	479c                	lw	a5,8(a5)
  api->program(device, pi_flash_addr, data, size);
1c008cce:	0b842683          	lw	a3,184(s0)
        *(uint32_t *) &file->header[0] = file->addr;
1c008cd2:	c20c                	sw	a1,0(a2)
        pi_flash_program(fs->flash, file->addr - file->header_size, (void *) file->header, file->header_size);
1c008cd4:	4388                	lw	a0,0(a5)
1c008cd6:	8d95                	sub	a1,a1,a3
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c008cd8:	c258                	sw	a4,4(a2)
1c008cda:	411c                	lw	a5,0(a0)
1c008cdc:	5bdc                	lw	a5,52(a5)
1c008cde:	9782                	jalr	a5
        pi_l2_free((void *) file->header, file->header_size);
1c008ce0:	0b842583          	lw	a1,184(s0)
1c008ce4:	0b442503          	lw	a0,180(s0)
1c008ce8:	b7e9                	j	1c008cb2 <__pi_read_fs_close+0x16>

1c008cea <__pi_read_fs_mount>:
{
1c008cea:	7175                	addi	sp,sp,-144
1c008cec:	c326                	sw	s1,132(sp)
1c008cee:	c14a                	sw	s2,128(sp)
1c008cf0:	84aa                	mv	s1,a0
    struct pi_fs_conf *conf = (struct pi_fs_conf *) device->config;
1c008cf2:	00452903          	lw	s2,4(a0)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c008cf6:	1b800513          	li	a0,440
{
1c008cfa:	c522                	sw	s0,136(sp)
1c008cfc:	c706                	sw	ra,140(sp)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c008cfe:	32d020ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c008d02:	842a                	mv	s0,a0
    if(fs == NULL) goto error;
1c008d04:	e919                	bnez	a0,1c008d1a <__pi_read_fs_mount+0x30>
    __pi_fs_free(fs);
1c008d06:	8522                	mv	a0,s0
1c008d08:	d0dff0ef          	jal	ra,1c008a14 <__pi_fs_free>
    return -1;
1c008d0c:	557d                	li	a0,-1
}
1c008d0e:	40ba                	lw	ra,140(sp)
1c008d10:	442a                	lw	s0,136(sp)
1c008d12:	449a                	lw	s1,132(sp)
1c008d14:	490a                	lw	s2,128(sp)
1c008d16:	6149                	addi	sp,sp,144
1c008d18:	8082                	ret
    fs->flash = conf->flash;
1c008d1a:	00492783          	lw	a5,4(s2)
    fs->pi_fs_l2 = NULL;
1c008d1e:	08052c23          	sw	zero,152(a0)
    fs->pi_fs_info = NULL;
1c008d22:	08052e23          	sw	zero,156(a0)
    fs->flash = conf->flash;
1c008d26:	c11c                	sw	a5,0(a0)
    fs->fs_data.cluster_reqs_first = NULL;
1c008d28:	12052823          	sw	zero,304(a0)
    fs->pi_fs_l2 = pmsis_l2_malloc(sizeof(pi_fs_l2_t));
1c008d2c:	4521                	li	a0,8
1c008d2e:	2fd020ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c008d32:	08a42c23          	sw	a0,152(s0)
    if(fs->pi_fs_l2 == NULL) goto error;
1c008d36:	d961                	beqz	a0,1c008d06 <__pi_read_fs_mount+0x1c>
    fs->mount_step = 1;
1c008d38:	4785                	li	a5,1
1c008d3a:	08f42823          	sw	a5,144(s0)
  task->id = PI_TASK_NONE_ID;
1c008d3e:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008d40:	d43e                	sw	a5,40(sp)
1c008d42:	00010a23          	sb	zero,20(sp)
    fs->pending_event = pi_task_block(&task);
1c008d46:	00010793          	mv	a5,sp
1c008d4a:	08f42623          	sw	a5,140(s0)
    fs->partition_name = conf->partition_name;
1c008d4e:	00892783          	lw	a5,8(s2)
  task->arg[0] = (uint32_t)0;
1c008d52:	c202                	sw	zero,4(sp)
    fs->pi_fs_info = NULL;
1c008d54:	08042e23          	sw	zero,156(s0)
    fs->partition_name = conf->partition_name;
1c008d58:	c05c                	sw	a5,4(s0)
    device->data = (void *) fs;
1c008d5a:	c480                	sw	s0,8(s1)
    __pi_fs_mount_step((void *) fs);
1c008d5c:	8522                	mv	a0,s0
1c008d5e:	3d21                	jal	1c008b76 <__pi_fs_mount_step>
  while(!task->done)
1c008d60:	01410783          	lb	a5,20(sp)
1c008d64:	c791                	beqz	a5,1c008d70 <__pi_read_fs_mount+0x86>
    if(fs->error)
1c008d66:	12442783          	lw	a5,292(s0)
1c008d6a:	ffd1                	bnez	a5,1c008d06 <__pi_read_fs_mount+0x1c>
    return 0;
1c008d6c:	4501                	li	a0,0
1c008d6e:	b745                	j	1c008d0e <__pi_read_fs_mount+0x24>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008d70:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c008d74:	4585                	li	a1,1
1c008d76:	01c00513          	li	a0,28
1c008d7a:	005020ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c008d7e:	30091073          	csrw	mstatus,s2
1c008d82:	bff9                	j	1c008d60 <__pi_read_fs_mount+0x76>

1c008d84 <__pi_fs_read_cached>:
{
1c008d84:	88ae                	mv	a7,a1
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c008d86:	0b052583          	lw	a1,176(a0)
{
1c008d8a:	1141                	addi	sp,sp,-16
1c008d8c:	c226                	sw	s1,4(sp)
1c008d8e:	c606                	sw	ra,12(sp)
1c008d90:	c422                	sw	s0,8(sp)
1c008d92:	84ba                	mv	s1,a4
1c008d94:	0ac52803          	lw	a6,172(a0)
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c008d98:	00b66f63          	bltu	a2,a1,1c008db6 <__pi_fs_read_cached+0x32>
    if(size > READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7)) size = READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7);
1c008d9c:	f8363733          	p.bclr	a4,a2,28,3
1c008da0:	08800413          	li	s0,136
1c008da4:	8c19                	sub	s0,s0,a4
1c008da6:	04d45433          	p.minu	s0,s0,a3
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c008daa:	008606b3          	add	a3,a2,s0
1c008dae:	08858713          	addi	a4,a1,136 # ffff8088 <pulp__FC+0xffff8089>
1c008db2:	02d77a63          	bleu	a3,a4,1c008de6 <__pi_fs_read_cached+0x62>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008db6:	4118                	lw	a4,0(a0)
        file->cache_addr = addr & ~0x7;
1c008db8:	c40635b3          	p.bclr	a1,a2,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c008dbc:	08800693          	li	a3,136
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008dc0:	00872883          	lw	a7,8(a4)
        file->cache_addr = addr & ~0x7;
1c008dc4:	0ab52823          	sw	a1,176(a0)
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c008dc8:	873e                	mv	a4,a5
1c008dca:	0008a503          	lw	a0,0(a7)
1c008dce:	8642                	mv	a2,a6
        return 0;
1c008dd0:	4401                	li	s0,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c008dd2:	b59ff0ef          	jal	ra,1c00892a <pi_flash_read_async>
        *pending = 1;
1c008dd6:	4785                	li	a5,1
1c008dd8:	c09c                	sw	a5,0(s1)
}
1c008dda:	8522                	mv	a0,s0
1c008ddc:	40b2                	lw	ra,12(sp)
1c008dde:	4422                	lw	s0,8(sp)
1c008de0:	4492                	lw	s1,4(sp)
1c008de2:	0141                	addi	sp,sp,16
1c008de4:	8082                	ret
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c008de6:	40b605b3          	sub	a1,a2,a1
1c008dea:	95c2                	add	a1,a1,a6
1c008dec:	8622                	mv	a2,s0
1c008dee:	8546                	mv	a0,a7
1c008df0:	04d040ef          	jal	ra,1c00d63c <memcpy>
    return __pi_fs_read_from_cache(file, buffer, addr, size);
1c008df4:	b7dd                	j	1c008dda <__pi_fs_read_cached+0x56>

1c008df6 <__pi_fs_read>:
{
1c008df6:	7179                	addi	sp,sp,-48
1c008df8:	d422                	sw	s0,40(sp)
1c008dfa:	d226                	sw	s1,36(sp)
1c008dfc:	d04a                	sw	s2,32(sp)
1c008dfe:	ca56                	sw	s5,20(sp)
1c008e00:	c85a                	sw	s6,16(sp)
1c008e02:	d606                	sw	ra,44(sp)
1c008e04:	8b3e                	mv	s6,a5
1c008e06:	ce4e                	sw	s3,28(sp)
1c008e08:	cc52                	sw	s4,24(sp)
1c008e0a:	c65e                	sw	s7,12(sp)
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c008e0c:	47c1                	li	a5,16
{
1c008e0e:	892e                	mv	s2,a1
1c008e10:	8432                	mv	s0,a2
1c008e12:	84b6                	mv	s1,a3
1c008e14:	8aba                	mv	s5,a4
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c008e16:	06d7d063          	ble	a3,a5,1c008e76 <__pi_fs_read+0x80>
1c008e1a:	00b647b3          	xor	a5,a2,a1
1c008e1e:	f837b7b3          	p.bclr	a5,a5,28,3
1c008e22:	ebb1                	bnez	a5,1c008e76 <__pi_fs_read+0x80>
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c008e24:	08800793          	li	a5,136
1c008e28:	06d7d763          	ble	a3,a5,1c008e96 <__pi_fs_read+0xa0>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c008e2c:	411c                	lw	a5,0(a0)
1c008e2e:	0087ab83          	lw	s7,8(a5)
    int prefix_size = addr & 0x7;
1c008e32:	f83437b3          	p.bclr	a5,s0,28,3
    if(prefix_size)
1c008e36:	c395                	beqz	a5,1c008e5a <__pi_fs_read+0x64>
        prefix_size = 4 - prefix_size;
1c008e38:	4991                	li	s3,4
1c008e3a:	40f989b3          	sub	s3,s3,a5
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c008e3e:	8756                	mv	a4,s5
1c008e40:	87da                	mv	a5,s6
1c008e42:	86ce                	mv	a3,s3
1c008e44:	8622                	mv	a2,s0
1c008e46:	85ca                	mv	a1,s2
1c008e48:	3f35                	jal	1c008d84 <__pi_fs_read_cached>
        if(*pending) return read_size;
1c008e4a:	000aa783          	lw	a5,0(s5)
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c008e4e:	8a2a                	mv	s4,a0
        if(*pending) return read_size;
1c008e50:	e7bd                	bnez	a5,1c008ebe <__pi_fs_read+0xc8>
        addr += prefix_size;
1c008e52:	944e                	add	s0,s0,s3
        buffer += prefix_size;
1c008e54:	994e                	add	s2,s2,s3
        size -= prefix_size;
1c008e56:	413484b3          	sub	s1,s1,s3
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c008e5a:	000ba503          	lw	a0,0(s7) # 10000 <__L1Cl>
    int block_size = size & ~0x7;
1c008e5e:	c404ba33          	p.bclr	s4,s1,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c008e62:	875a                	mv	a4,s6
1c008e64:	86d2                	mv	a3,s4
1c008e66:	864a                	mv	a2,s2
1c008e68:	85a2                	mv	a1,s0
1c008e6a:	ac1ff0ef          	jal	ra,1c00892a <pi_flash_read_async>
    *pending = 1;
1c008e6e:	4785                	li	a5,1
1c008e70:	00faa023          	sw	a5,0(s5)
    return block_size;
1c008e74:	a0a9                	j	1c008ebe <__pi_fs_read+0xc8>
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c008e76:	8622                	mv	a2,s0
}
1c008e78:	5422                	lw	s0,40(sp)
1c008e7a:	50b2                	lw	ra,44(sp)
1c008e7c:	49f2                	lw	s3,28(sp)
1c008e7e:	4a62                	lw	s4,24(sp)
1c008e80:	4bb2                	lw	s7,12(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c008e82:	87da                	mv	a5,s6
1c008e84:	8756                	mv	a4,s5
}
1c008e86:	4b42                	lw	s6,16(sp)
1c008e88:	4ad2                	lw	s5,20(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c008e8a:	86a6                	mv	a3,s1
1c008e8c:	85ca                	mv	a1,s2
}
1c008e8e:	5492                	lw	s1,36(sp)
1c008e90:	5902                	lw	s2,32(sp)
1c008e92:	6145                	addi	sp,sp,48
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c008e94:	bdc5                	j	1c008d84 <__pi_fs_read_cached>
       addr >= file->cache_addr &&
1c008e96:	0b052583          	lw	a1,176(a0)
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c008e9a:	f8b669e3          	bltu	a2,a1,1c008e2c <__pi_fs_read+0x36>
       addr + size < file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c008e9e:	00c687b3          	add	a5,a3,a2
1c008ea2:	08858713          	addi	a4,a1,136
       addr >= file->cache_addr &&
1c008ea6:	f8e7f3e3          	bleu	a4,a5,1c008e2c <__pi_fs_read+0x36>
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c008eaa:	40b60433          	sub	s0,a2,a1
1c008eae:	0ac52583          	lw	a1,172(a0)
1c008eb2:	8636                	mv	a2,a3
1c008eb4:	854a                	mv	a0,s2
1c008eb6:	95a2                	add	a1,a1,s0
1c008eb8:	784040ef          	jal	ra,1c00d63c <memcpy>
        return __pi_fs_read_from_cache(file, buffer, addr, size);
1c008ebc:	8a26                	mv	s4,s1
}
1c008ebe:	50b2                	lw	ra,44(sp)
1c008ec0:	5422                	lw	s0,40(sp)
1c008ec2:	8552                	mv	a0,s4
1c008ec4:	5492                	lw	s1,36(sp)
1c008ec6:	5902                	lw	s2,32(sp)
1c008ec8:	49f2                	lw	s3,28(sp)
1c008eca:	4a62                	lw	s4,24(sp)
1c008ecc:	4ad2                	lw	s5,20(sp)
1c008ece:	4b42                	lw	s6,16(sp)
1c008ed0:	4bb2                	lw	s7,12(sp)
1c008ed2:	6145                	addi	sp,sp,48
1c008ed4:	8082                	ret

1c008ed6 <__pi_read_fs_try_read>:
    if(file->pending_size == 0)
1c008ed6:	0a852683          	lw	a3,168(a0)
{
1c008eda:	7179                	addi	sp,sp,-48
1c008edc:	d422                	sw	s0,40(sp)
1c008ede:	d606                	sw	ra,44(sp)
1c008ee0:	d226                	sw	s1,36(sp)
1c008ee2:	d04a                	sw	s2,32(sp)
1c008ee4:	ce4e                	sw	s3,28(sp)
    int pending = 0;
1c008ee6:	c602                	sw	zero,12(sp)
{
1c008ee8:	842a                	mv	s0,a0
    if(file->pending_size == 0)
1c008eea:	ee99                	bnez	a3,1c008f08 <__pi_read_fs_try_read+0x32>
            file->pending_event->implem.data[0] = file->first_read_size;
1c008eec:	501c                	lw	a5,32(s0)
1c008eee:	0bc42703          	lw	a4,188(s0)
1c008ef2:	df98                	sw	a4,56(a5)
  rt_event_enqueue(task);
1c008ef4:	5008                	lw	a0,32(s0)
1c008ef6:	afbff0ef          	jal	ra,1c0089f0 <rt_event_enqueue>
}
1c008efa:	50b2                	lw	ra,44(sp)
1c008efc:	5422                	lw	s0,40(sp)
1c008efe:	5492                	lw	s1,36(sp)
1c008f00:	5902                	lw	s2,32(sp)
1c008f02:	49f2                	lw	s3,28(sp)
1c008f04:	6145                	addi	sp,sp,48
1c008f06:	8082                	ret
  task->arg[0] = (uint32_t)callback;
1c008f08:	1c0094b7          	lui	s1,0x1c009
1c008f0c:	ed648493          	addi	s1,s1,-298 # 1c008ed6 <__pi_read_fs_try_read>
  task->id = PI_TASK_CALLBACK_ID;
1c008f10:	02052e23          	sw	zero,60(a0)
  task->arg[0] = (uint32_t)callback;
1c008f14:	d504                	sw	s1,40(a0)
    int size = __pi_fs_read(
1c008f16:	4d50                	lw	a2,28(a0)
1c008f18:	0a452583          	lw	a1,164(a0)
  task->arg[1] = (uint32_t)arg;
1c008f1c:	d448                	sw	a0,44(s0)
            pi_task_callback(&file->step_event, __pi_read_fs_try_read, (void *) file)
1c008f1e:	02450913          	addi	s2,a0,36
  task->implem.keep = 1;
1c008f22:	4985                	li	s3,1
    int size = __pi_fs_read(
1c008f24:	87ca                	mv	a5,s2
1c008f26:	05352623          	sw	s3,76(a0)
  task->done = 0;
1c008f2a:	02050c23          	sb	zero,56(a0)
1c008f2e:	0078                	addi	a4,sp,12
1c008f30:	35d9                	jal	1c008df6 <__pi_fs_read>
    file->pending_addr += size;
1c008f32:	4c5c                	lw	a5,28(s0)
1c008f34:	97aa                	add	a5,a5,a0
1c008f36:	cc5c                	sw	a5,28(s0)
    file->pending_buffer += size;
1c008f38:	0a442783          	lw	a5,164(s0)
1c008f3c:	97aa                	add	a5,a5,a0
1c008f3e:	0af42223          	sw	a5,164(s0)
    file->pending_size -= size;
1c008f42:	0a842783          	lw	a5,168(s0)
1c008f46:	40a78533          	sub	a0,a5,a0
    if(!pending)
1c008f4a:	47b2                	lw	a5,12(sp)
    file->pending_size -= size;
1c008f4c:	0aa42423          	sw	a0,168(s0)
    if(!pending)
1c008f50:	f7cd                	bnez	a5,1c008efa <__pi_read_fs_try_read+0x24>
        if(file->pending_size == 0)
1c008f52:	dd49                	beqz	a0,1c008eec <__pi_read_fs_try_read+0x16>
  task->id = PI_TASK_CALLBACK_ID;
1c008f54:	02042e23          	sw	zero,60(s0)
  task->arg[0] = (uint32_t)callback;
1c008f58:	d404                	sw	s1,40(s0)
  task->arg[1] = (uint32_t)arg;
1c008f5a:	d440                	sw	s0,44(s0)
  task->implem.keep = 1;
1c008f5c:	05342623          	sw	s3,76(s0)
1c008f60:	02040c23          	sb	zero,56(s0)
  rt_event_enqueue(task);
1c008f64:	854a                	mv	a0,s2
1c008f66:	bf41                	j	1c008ef6 <__pi_read_fs_try_read+0x20>

1c008f68 <__pi_read_fs_read_async>:
    if(file->offset + size > file->fs_file.size)
1c008f68:	495c                	lw	a5,20(a0)
1c008f6a:	4558                	lw	a4,12(a0)
{
1c008f6c:	1101                	addi	sp,sp,-32
1c008f6e:	ce06                	sw	ra,28(sp)
    if(file->offset + size > file->fs_file.size)
1c008f70:	00c78833          	add	a6,a5,a2
1c008f74:	01077463          	bleu	a6,a4,1c008f7c <__pi_read_fs_read_async+0x14>
        real_size = file->fs_file.size - file->offset;
1c008f78:	40f70633          	sub	a2,a4,a5
    file->first_read_size = real_size;
1c008f7c:	0ac52e23          	sw	a2,188(a0)
1c008f80:	00068a23          	sb	zero,20(a3)
    file->pending_addr = file->addr + file->offset;
1c008f84:	495c                	lw	a5,20(a0)
1c008f86:	4d18                	lw	a4,24(a0)
    file->pending_size = real_size;
1c008f88:	0ac52423          	sw	a2,168(a0)
    file->pending_event = event;
1c008f8c:	d114                	sw	a3,32(a0)
    file->pending_addr = file->addr + file->offset;
1c008f8e:	973e                	add	a4,a4,a5
    file->offset += real_size;
1c008f90:	97b2                	add	a5,a5,a2
    file->pending_buffer = (unsigned int) buffer;
1c008f92:	0ab52223          	sw	a1,164(a0)
    file->pending_addr = file->addr + file->offset;
1c008f96:	cd58                	sw	a4,28(a0)
    file->offset += real_size;
1c008f98:	c95c                	sw	a5,20(a0)
    __pi_read_fs_try_read((void *) file);
1c008f9a:	c632                	sw	a2,12(sp)
1c008f9c:	3f2d                	jal	1c008ed6 <__pi_read_fs_try_read>
}
1c008f9e:	4632                	lw	a2,12(sp)
1c008fa0:	40f2                	lw	ra,28(sp)
1c008fa2:	8532                	mv	a0,a2
1c008fa4:	6105                	addi	sp,sp,32
1c008fa6:	8082                	ret

1c008fa8 <__pi_host_fs_mount>:
  int fd;
} pi_host_fs_file_t;

static int32_t __pi_host_fs_mount(struct pi_device *device)
{
  bsp_fs_data.cluster_reqs_first = NULL;
1c008fa8:	1c00f7b7          	lui	a5,0x1c00f
1c008fac:	6607a823          	sw	zero,1648(a5) # 1c00f670 <bsp_fs_data>
  return 0;
}
1c008fb0:	4501                	li	a0,0
1c008fb2:	8082                	ret

1c008fb4 <__pi_host_fs_unmount>:

static void __pi_host_fs_unmount(struct pi_device *device)
{
}
1c008fb4:	8082                	ret

1c008fb6 <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008fb6:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c008fba:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c008fbe:	00052023          	sw	zero,0(a0)
1c008fc2:	01c00713          	li	a4,28
  if (sched->first) {
1c008fc6:	c619                	beqz	a2,1c008fd4 <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c008fc8:	435c                	lw	a5,4(a4)
1c008fca:	c388                	sw	a0,0(a5)
  sched->last = event;
1c008fcc:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c008fce:	30069073          	csrw	mstatus,a3
}
1c008fd2:	8082                	ret
    sched->first = event;
1c008fd4:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c008fd8:	bfd5                	j	1c008fcc <rt_event_enqueue+0x16>

1c008fda <__pi_host_fs_seek>:
}

static int32_t __pi_host_fs_seek(pi_fs_file_t *arg, unsigned int offset)
{
  pi_host_fs_file_t *file = (pi_host_fs_file_t *)arg;
  return semihost_seek(file->fd, offset);
1c008fda:	4948                	lw	a0,20(a0)
1c008fdc:	4d10106f          	j	1c00acac <semihost_seek>

1c008fe0 <__pi_host_fs_copy_2d_async>:
  else
    return __pi_host_fs_write_async(arg, buffer, size, task);
}

static int32_t __pi_host_fs_copy_2d_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c008fe0:	7179                	addi	sp,sp,-48
1c008fe2:	d422                	sw	s0,40(sp)
1c008fe4:	d226                	sw	s1,36(sp)
1c008fe6:	d04a                	sw	s2,32(sp)
1c008fe8:	ce4e                	sw	s3,28(sp)
1c008fea:	cc52                	sw	s4,24(sp)
1c008fec:	ca56                	sw	s5,20(sp)
1c008fee:	c85a                	sw	s6,16(sp)
1c008ff0:	c65e                	sw	s7,12(sp)
1c008ff2:	c462                	sw	s8,8(sp)
1c008ff4:	d606                	sw	ra,44(sp)
1c008ff6:	89aa                	mv	s3,a0
1c008ff8:	8a2e                	mv	s4,a1
1c008ffa:	84b2                	mv	s1,a2
1c008ffc:	8b36                	mv	s6,a3
1c008ffe:	8bba                	mv	s7,a4
1c009000:	843e                	mv	s0,a5
1c009002:	8c42                	mv	s8,a6
1c009004:	8ac6                	mv	s5,a7
  unsigned int chunk;
  for (chunk=0; chunk<size; chunk+=length)
1c009006:	4901                	li	s2,0
1c009008:	03696163          	bltu	s2,s6,1c00902a <__pi_host_fs_copy_2d_async+0x4a>
1c00900c:	8556                	mv	a0,s5
1c00900e:	3765                	jal	1c008fb6 <rt_event_enqueue>

    buffer = ((char *)buffer) + length;
    index += stride;
  }
  pi_task_push(task);
  return 0;
1c009010:	4501                	li	a0,0

error:
  pi_task_push(task);
  return -1;
}
1c009012:	50b2                	lw	ra,44(sp)
1c009014:	5422                	lw	s0,40(sp)
1c009016:	5492                	lw	s1,36(sp)
1c009018:	5902                	lw	s2,32(sp)
1c00901a:	49f2                	lw	s3,28(sp)
1c00901c:	4a62                	lw	s4,24(sp)
1c00901e:	4ad2                	lw	s5,20(sp)
1c009020:	4b42                	lw	s6,16(sp)
1c009022:	4bb2                	lw	s7,12(sp)
1c009024:	4c22                	lw	s8,8(sp)
1c009026:	6145                	addi	sp,sp,48
1c009028:	8082                	ret
    if (__pi_host_fs_seek(file, index))
1c00902a:	85d2                	mv	a1,s4
1c00902c:	854e                	mv	a0,s3
1c00902e:	05645433          	p.minu	s0,s0,s6
1c009032:	3765                	jal	1c008fda <__pi_host_fs_seek>
1c009034:	e10d                	bnez	a0,1c009056 <__pi_host_fs_copy_2d_async+0x76>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c009036:	8622                	mv	a2,s0
1c009038:	85a6                	mv	a1,s1
1c00903a:	854e                	mv	a0,s3
    if (ext2loc)
1c00903c:	000c0a63          	beqz	s8,1c009050 <__pi_host_fs_copy_2d_async+0x70>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c009040:	885ff0ef          	jal	ra,1c0088c4 <pi_fs_read>
1c009044:	00851963          	bne	a0,s0,1c009056 <__pi_host_fs_copy_2d_async+0x76>
    buffer = ((char *)buffer) + length;
1c009048:	94a2                	add	s1,s1,s0
    index += stride;
1c00904a:	9a5e                	add	s4,s4,s7
  for (chunk=0; chunk<size; chunk+=length)
1c00904c:	9922                	add	s2,s2,s0
1c00904e:	bf6d                	j	1c009008 <__pi_host_fs_copy_2d_async+0x28>
      if (pi_fs_write(file, buffer, length) != (int)length)
1c009050:	8a3ff0ef          	jal	ra,1c0088f2 <pi_fs_write>
1c009054:	bfc5                	j	1c009044 <__pi_host_fs_copy_2d_async+0x64>
1c009056:	8556                	mv	a0,s5
1c009058:	3fb9                	jal	1c008fb6 <rt_event_enqueue>
  return -1;
1c00905a:	557d                	li	a0,-1
1c00905c:	bf5d                	j	1c009012 <__pi_host_fs_copy_2d_async+0x32>

1c00905e <__pi_host_fs_write_async>:
  int result = size - semihost_write(file->fd, buffer, size);
1c00905e:	4948                	lw	a0,20(a0)
{
1c009060:	1101                	addi	sp,sp,-32
1c009062:	ce06                	sw	ra,28(sp)
1c009064:	cc22                	sw	s0,24(sp)
1c009066:	ca26                	sw	s1,20(sp)
  int result = size - semihost_write(file->fd, buffer, size);
1c009068:	c636                	sw	a3,12(sp)
{
1c00906a:	84b2                	mv	s1,a2
  int result = size - semihost_write(file->fd, buffer, size);
1c00906c:	423010ef          	jal	ra,1c00ac8e <semihost_write>
1c009070:	46b2                	lw	a3,12(sp)
1c009072:	842a                	mv	s0,a0
1c009074:	8536                	mv	a0,a3
1c009076:	3781                	jal	1c008fb6 <rt_event_enqueue>
}
1c009078:	40848533          	sub	a0,s1,s0
1c00907c:	40f2                	lw	ra,28(sp)
1c00907e:	4462                	lw	s0,24(sp)
1c009080:	44d2                	lw	s1,20(sp)
1c009082:	6105                	addi	sp,sp,32
1c009084:	8082                	ret

1c009086 <__pi_host_fs_read_async>:
  int result = size - semihost_read(file->fd, buffer, size);
1c009086:	4948                	lw	a0,20(a0)
{
1c009088:	1101                	addi	sp,sp,-32
1c00908a:	ce06                	sw	ra,28(sp)
1c00908c:	cc22                	sw	s0,24(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c00908e:	c636                	sw	a3,12(sp)
{
1c009090:	8432                	mv	s0,a2
  int result = size - semihost_read(file->fd, buffer, size);
1c009092:	3df010ef          	jal	ra,1c00ac70 <semihost_read>
  task->implem.data[0] = result;
1c009096:	46b2                	lw	a3,12(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c009098:	8c09                	sub	s0,s0,a0
  task->implem.data[0] = result;
1c00909a:	de80                	sw	s0,56(a3)
1c00909c:	8536                	mv	a0,a3
1c00909e:	3f21                	jal	1c008fb6 <rt_event_enqueue>
}
1c0090a0:	8522                	mv	a0,s0
1c0090a2:	40f2                	lw	ra,28(sp)
1c0090a4:	4462                	lw	s0,24(sp)
1c0090a6:	6105                	addi	sp,sp,32
1c0090a8:	8082                	ret

1c0090aa <__pi_host_fs_copy_async>:
{
1c0090aa:	1101                	addi	sp,sp,-32
1c0090ac:	cc22                	sw	s0,24(sp)
1c0090ae:	ca26                	sw	s1,20(sp)
  if (__pi_host_fs_seek(arg, index))
1c0090b0:	c636                	sw	a3,12(sp)
{
1c0090b2:	84b2                	mv	s1,a2
  if (__pi_host_fs_seek(arg, index))
1c0090b4:	c43a                	sw	a4,8(sp)
{
1c0090b6:	ce06                	sw	ra,28(sp)
1c0090b8:	842a                	mv	s0,a0
  if (__pi_host_fs_seek(arg, index))
1c0090ba:	c23e                	sw	a5,4(sp)
1c0090bc:	3f39                	jal	1c008fda <__pi_host_fs_seek>
1c0090be:	4632                	lw	a2,12(sp)
1c0090c0:	4692                	lw	a3,4(sp)
1c0090c2:	4722                	lw	a4,8(sp)
1c0090c4:	ed11                	bnez	a0,1c0090e0 <__pi_host_fs_copy_async+0x36>
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c0090c6:	85a6                	mv	a1,s1
1c0090c8:	8522                	mv	a0,s0
  if (ext2loc)
1c0090ca:	c711                	beqz	a4,1c0090d6 <__pi_host_fs_copy_async+0x2c>
}
1c0090cc:	4462                	lw	s0,24(sp)
1c0090ce:	40f2                	lw	ra,28(sp)
1c0090d0:	44d2                	lw	s1,20(sp)
1c0090d2:	6105                	addi	sp,sp,32
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c0090d4:	bf4d                	j	1c009086 <__pi_host_fs_read_async>
}
1c0090d6:	4462                	lw	s0,24(sp)
1c0090d8:	40f2                	lw	ra,28(sp)
1c0090da:	44d2                	lw	s1,20(sp)
1c0090dc:	6105                	addi	sp,sp,32
    return __pi_host_fs_write_async(arg, buffer, size, task);
1c0090de:	b741                	j	1c00905e <__pi_host_fs_write_async>
}
1c0090e0:	40f2                	lw	ra,28(sp)
1c0090e2:	4462                	lw	s0,24(sp)
1c0090e4:	44d2                	lw	s1,20(sp)
1c0090e6:	557d                	li	a0,-1
1c0090e8:	6105                	addi	sp,sp,32
1c0090ea:	8082                	ret

1c0090ec <__pi_host_fs_direct_read_async>:
1c0090ec:	bf69                	j	1c009086 <__pi_host_fs_read_async>

1c0090ee <__pi_host_fs_close>:
{
1c0090ee:	1141                	addi	sp,sp,-16
1c0090f0:	c422                	sw	s0,8(sp)
1c0090f2:	842a                	mv	s0,a0
  semihost_close(file->fd);
1c0090f4:	4948                	lw	a0,20(a0)
{
1c0090f6:	c606                	sw	ra,12(sp)
  semihost_close(file->fd);
1c0090f8:	371010ef          	jal	ra,1c00ac68 <semihost_close>
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c0090fc:	8522                	mv	a0,s0
}
1c0090fe:	4422                	lw	s0,8(sp)
1c009100:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c009102:	45e1                	li	a1,24
}
1c009104:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c009106:	7320206f          	j	1c00b838 <pi_l2_free>

1c00910a <__pi_host_fs_open>:
{
1c00910a:	1101                	addi	sp,sp,-32
1c00910c:	ca26                	sw	s1,20(sp)
1c00910e:	84aa                	mv	s1,a0
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c009110:	4561                	li	a0,24
{
1c009112:	c84a                	sw	s2,16(sp)
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c009114:	c632                	sw	a2,12(sp)
{
1c009116:	ce06                	sw	ra,28(sp)
1c009118:	cc22                	sw	s0,24(sp)
1c00911a:	892e                	mv	s2,a1
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c00911c:	70e020ef          	jal	ra,1c00b82a <pi_l2_malloc>
  if (file == NULL) goto error;
1c009120:	4632                	lw	a2,12(sp)
1c009122:	e909                	bnez	a0,1c009134 <__pi_host_fs_open+0x2a>
  return NULL;
1c009124:	4401                	li	s0,0
}
1c009126:	8522                	mv	a0,s0
1c009128:	40f2                	lw	ra,28(sp)
1c00912a:	4462                	lw	s0,24(sp)
1c00912c:	44d2                	lw	s1,20(sp)
1c00912e:	4942                	lw	s2,16(sp)
1c009130:	6105                	addi	sp,sp,32
1c009132:	8082                	ret
  file->header.fs = device;
1c009134:	c104                	sw	s1,0(a0)
1c009136:	842a                	mv	s0,a0
  file->fd = semihost_open(file_name, flags == PI_FS_FLAGS_WRITE ? 6 : flags == PI_FS_FLAGS_APPEND ? 8 : 0);
1c009138:	4599                	li	a1,6
1c00913a:	00162663          	p.beqimm	a2,1,1c009146 <__pi_host_fs_open+0x3c>
1c00913e:	45a1                	li	a1,8
1c009140:	00262363          	p.beqimm	a2,2,1c009146 <__pi_host_fs_open+0x3c>
1c009144:	4581                	li	a1,0
1c009146:	854a                	mv	a0,s2
1c009148:	2f5010ef          	jal	ra,1c00ac3c <semihost_open>
1c00914c:	c848                	sw	a0,20(s0)
  if (file->fd == -1)
1c00914e:	fdf52be3          	p.beqimm	a0,-1,1c009124 <__pi_host_fs_open+0x1a>
  file->header.api = (pi_fs_api_t *)device->api;
1c009152:	409c                	lw	a5,0(s1)
  file->header.data = file;
1c009154:	c400                	sw	s0,8(s0)
  file->header.fs = device;
1c009156:	c004                	sw	s1,0(s0)
  file->header.api = (pi_fs_api_t *)device->api;
1c009158:	c05c                	sw	a5,4(s0)
  file->header.fs_data = &bsp_fs_data;
1c00915a:	1c00f7b7          	lui	a5,0x1c00f
1c00915e:	67078793          	addi	a5,a5,1648 # 1c00f670 <bsp_fs_data>
1c009162:	c81c                	sw	a5,16(s0)
  return (pi_fs_file_t *)file;
1c009164:	b7c9                	j	1c009126 <__pi_host_fs_open+0x1c>

1c009166 <__rt_event_enqueue>:
  if (sched->first) {
1c009166:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00916a:	00052023          	sw	zero,0(a0)
1c00916e:	01c00713          	li	a4,28
  if (sched->first) {
1c009172:	c689                	beqz	a3,1c00917c <__rt_event_enqueue+0x16>
    sched->last->next = event;
1c009174:	435c                	lw	a5,4(a4)
1c009176:	c388                	sw	a0,0(a5)
  sched->last = event;
1c009178:	c348                	sw	a0,4(a4)
}
1c00917a:	8082                	ret
    sched->first = event;
1c00917c:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c009180:	bfe5                	j	1c009178 <__rt_event_enqueue+0x12>

1c009182 <hyperflash_ioctl>:



static int32_t hyperflash_ioctl(struct pi_device *device, uint32_t cmd, void *arg)
{
  switch (cmd)
1c009182:	e589                	bnez	a1,1c00918c <hyperflash_ioctl+0xa>
  {
    case PI_FLASH_IOCTL_INFO:
    {
      struct pi_flash_info *flash_info = (struct pi_flash_info *)arg;
      flash_info->sector_size = 1<<18;
1c009184:	000407b7          	lui	a5,0x40
1c009188:	c21c                	sw	a5,0(a2)
      // TODO find a way to know what is on the flash, as they may be a boot binary
      flash_info->flash_start = flash_info->sector_size;
1c00918a:	c25c                	sw	a5,4(a2)
    }
  }
  return 0;
}
1c00918c:	4501                	li	a0,0
1c00918e:	8082                	ret

1c009190 <hyperflash_stall_task>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009190:	30047373          	csrrci	t1,mstatus,8

    restore_irq(irq);
    return 1;
  }
#else
  if (hyperflash->pending_task != NULL)
1c009194:	01852e03          	lw	t3,24(a0)
1c009198:	020e0763          	beqz	t3,1c0091c6 <hyperflash_stall_task+0x36>
  {
    task->implem.data[0] = id;
1c00919c:	dd90                	sw	a2,56(a1)
    task->implem.data[1] = arg0;
1c00919e:	ddd4                	sw	a3,60(a1)
    task->implem.data[2] = arg1;
1c0091a0:	c1b8                	sw	a4,64(a1)
    task->implem.data[3] = arg2;
1c0091a2:	c1fc                	sw	a5,68(a1)
    task->implem.data[4] = arg3;
1c0091a4:	0505a423          	sw	a6,72(a1)
    task->implem.data[5] = arg4;
1c0091a8:	0515a623          	sw	a7,76(a1)

    if (hyperflash->waiting_first)
1c0091ac:	491c                	lw	a5,16(a0)
1c0091ae:	cb91                	beqz	a5,1c0091c2 <hyperflash_stall_task+0x32>
      hyperflash->waiting_last->implem.next = task;
1c0091b0:	495c                	lw	a5,20(a0)
1c0091b2:	cfcc                	sw	a1,28(a5)
    else
      hyperflash->waiting_first = task;

    hyperflash->waiting_last = task;
1c0091b4:	c94c                	sw	a1,20(a0)
    task->implem.next = NULL;
1c0091b6:	0005ae23          	sw	zero,28(a1)
  __builtin_pulp_spr_write(reg, val);
1c0091ba:	30031073          	csrw	mstatus,t1

    restore_irq(irq);
    return 1;
1c0091be:	4505                	li	a0,1
1c0091c0:	8082                	ret
      hyperflash->waiting_first = task;
1c0091c2:	c90c                	sw	a1,16(a0)
1c0091c4:	bfc5                	j	1c0091b4 <hyperflash_stall_task+0x24>
  }
#endif  /* PMSIS_DRIVERS */

  hyperflash->pending_task = task;
1c0091c6:	cd0c                	sw	a1,24(a0)
1c0091c8:	30031073          	csrw	mstatus,t1

  restore_irq(irq);
  return 0;
1c0091cc:	4501                	li	a0,0
}
1c0091ce:	8082                	ret

1c0091d0 <hyperflash_read_2d_async>:
{
1c0091d0:	1101                	addi	sp,sp,-32
1c0091d2:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0091d4:	4500                	lw	s0,8(a0)
{
1c0091d6:	ca26                	sw	s1,20(sp)
1c0091d8:	84ae                	mv	s1,a1
1c0091da:	c84a                	sw	s2,16(sp)
1c0091dc:	c64e                	sw	s3,12(sp)
1c0091de:	c452                	sw	s4,8(sp)
1c0091e0:	c256                	sw	s5,4(sp)
1c0091e2:	c05a                	sw	s6,0(sp)
1c0091e4:	8932                	mv	s2,a2
1c0091e6:	8b2a                	mv	s6,a0
1c0091e8:	89b6                	mv	s3,a3
1c0091ea:	8a3a                	mv	s4,a4
1c0091ec:	8abe                	mv	s5,a5
1c0091ee:	85c2                	mv	a1,a6
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c0091f0:	88be                	mv	a7,a5
1c0091f2:	883a                	mv	a6,a4
1c0091f4:	87b6                	mv	a5,a3
1c0091f6:	8732                	mv	a4,a2
1c0091f8:	86a6                	mv	a3,s1
1c0091fa:	4619                	li	a2,6
1c0091fc:	8522                	mv	a0,s0
{
1c0091fe:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c009200:	3f41                	jal	1c009190 <hyperflash_stall_task>
1c009202:	e129                	bnez	a0,1c009244 <hyperflash_read_2d_async+0x74>
  task->arg[0] = (uint32_t)callback;
1c009204:	1c0097b7          	lui	a5,0x1c009
1c009208:	44a78793          	addi	a5,a5,1098 # 1c00944a <hyperflash_handle_pending_task>
  task->done = 0;
1c00920c:	02040e23          	sb	zero,60(s0)
1c009210:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c009212:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c009214:	03642823          	sw	s6,48(s0)
  task->implem.keep = 1;
1c009218:	c83c                	sw	a5,80(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00921a:	04042023          	sw	zero,64(s0)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00921e:	02840813          	addi	a6,s0,40
1c009222:	8522                	mv	a0,s0
}
1c009224:	4462                	lw	s0,24(sp)
1c009226:	40f2                	lw	ra,28(sp)
1c009228:	4b02                	lw	s6,0(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00922a:	87d6                	mv	a5,s5
1c00922c:	8752                	mv	a4,s4
}
1c00922e:	4a92                	lw	s5,4(sp)
1c009230:	4a22                	lw	s4,8(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009232:	86ce                	mv	a3,s3
1c009234:	864a                	mv	a2,s2
}
1c009236:	49b2                	lw	s3,12(sp)
1c009238:	4942                	lw	s2,16(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00923a:	85a6                	mv	a1,s1
}
1c00923c:	44d2                	lw	s1,20(sp)
1c00923e:	6105                	addi	sp,sp,32
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009240:	53b0306f          	j	1c00cf7a <pi_hyper_read_2d_async>
}
1c009244:	40f2                	lw	ra,28(sp)
1c009246:	4462                	lw	s0,24(sp)
1c009248:	44d2                	lw	s1,20(sp)
1c00924a:	4942                	lw	s2,16(sp)
1c00924c:	49b2                	lw	s3,12(sp)
1c00924e:	4a22                	lw	s4,8(sp)
1c009250:	4a92                	lw	s5,4(sp)
1c009252:	4b02                	lw	s6,0(sp)
1c009254:	6105                	addi	sp,sp,32
1c009256:	8082                	ret

1c009258 <hyperflash_copy_2d_async>:



static int hyperflash_copy_2d_async(struct pi_device *device, uint32_t flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  if (!ext2loc)
1c009258:	00080a63          	beqz	a6,1c00926c <hyperflash_copy_2d_async+0x14>
{
1c00925c:	1141                	addi	sp,sp,-16
1c00925e:	8846                	mv	a6,a7
1c009260:	c606                	sw	ra,12(sp)
    return -1;

  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c009262:	37bd                	jal	1c0091d0 <hyperflash_read_2d_async>

  return 0;
}
1c009264:	40b2                	lw	ra,12(sp)
  return 0;
1c009266:	4501                	li	a0,0
}
1c009268:	0141                	addi	sp,sp,16
1c00926a:	8082                	ret
    return -1;
1c00926c:	557d                	li	a0,-1
}
1c00926e:	8082                	ret

1c009270 <hyperflash_set_reg_exec>:
  hyperflash->udma_buffer[0] = value;
1c009270:	00c51623          	sh	a2,12(a0)
  pi_hyper_write(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 2);
1c009274:	4689                	li	a3,2
1c009276:	00c50613          	addi	a2,a0,12
1c00927a:	1590306f          	j	1c00cbd2 <pi_hyper_write>

1c00927e <hyperflash_erase_sector_async>:
{
1c00927e:	1101                	addi	sp,sp,-32
1c009280:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009282:	4500                	lw	s0,8(a0)
{
1c009284:	c64e                	sw	s3,12(sp)
1c009286:	89ae                	mv	s3,a1
1c009288:	c84a                	sw	s2,16(sp)
1c00928a:	85b2                	mv	a1,a2
1c00928c:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c00928e:	4881                	li	a7,0
1c009290:	4801                	li	a6,0
1c009292:	4781                	li	a5,0
1c009294:	4701                	li	a4,0
1c009296:	86ce                	mv	a3,s3
1c009298:	4609                	li	a2,2
1c00929a:	8522                	mv	a0,s0
{
1c00929c:	ce06                	sw	ra,28(sp)
1c00929e:	ca26                	sw	s1,20(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c0092a0:	3dc5                	jal	1c009190 <hyperflash_stall_task>
1c0092a2:	ed3d                	bnez	a0,1c009320 <hyperflash_erase_sector_async+0xa2>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c0092a4:	6485                	lui	s1,0x1
1c0092a6:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c0092aa:	8522                	mv	a0,s0
1c0092ac:	0aa00613          	li	a2,170
1c0092b0:	37c1                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c0092b2:	8522                	mv	a0,s0
1c0092b4:	05500613          	li	a2,85
1c0092b8:	55400593          	li	a1,1364
1c0092bc:	3f55                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c0092be:	aaa48593          	addi	a1,s1,-1366
1c0092c2:	8522                	mv	a0,s0
1c0092c4:	08000613          	li	a2,128
1c0092c8:	3765                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c0092ca:	aaa48593          	addi	a1,s1,-1366
1c0092ce:	8522                	mv	a0,s0
1c0092d0:	0aa00613          	li	a2,170
1c0092d4:	3f71                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c0092d6:	8522                	mv	a0,s0
1c0092d8:	05500613          	li	a2,85
1c0092dc:	55400593          	li	a1,1364
1c0092e0:	3f41                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, addr, 0x30);
1c0092e2:	85ce                	mv	a1,s3
1c0092e4:	8522                	mv	a0,s0
1c0092e6:	03000613          	li	a2,48
1c0092ea:	3759                	jal	1c009270 <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c0092ec:	1c00a7b7          	lui	a5,0x1c00a
1c0092f0:	a6e78793          	addi	a5,a5,-1426 # 1c009a6e <hyperflash_check_erase>
1c0092f4:	02040e23          	sb	zero,60(s0)
1c0092f8:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c0092fa:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c0092fc:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009300:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c009304:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c009306:	02840513          	addi	a0,s0,40
}
1c00930a:	4462                	lw	s0,24(sp)
1c00930c:	40f2                	lw	ra,28(sp)
1c00930e:	44d2                	lw	s1,20(sp)
1c009310:	4942                	lw	s2,16(sp)
1c009312:	49b2                	lw	s3,12(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c009314:	6589                	lui	a1,0x2
1c009316:	71058593          	addi	a1,a1,1808 # 2710 <__rt_stack_size+0x1f10>
}
1c00931a:	6105                	addi	sp,sp,32
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c00931c:	3200206f          	j	1c00b63c <pi_task_push_delayed_us>
}
1c009320:	40f2                	lw	ra,28(sp)
1c009322:	4462                	lw	s0,24(sp)
1c009324:	44d2                	lw	s1,20(sp)
1c009326:	4942                	lw	s2,16(sp)
1c009328:	49b2                	lw	s3,12(sp)
1c00932a:	6105                	addi	sp,sp,32
1c00932c:	8082                	ret

1c00932e <hyperflash_erase_chip_async>:
{
1c00932e:	1141                	addi	sp,sp,-16
1c009330:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009332:	4500                	lw	s0,8(a0)
{
1c009334:	c04a                	sw	s2,0(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c009336:	4881                	li	a7,0
{
1c009338:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c00933a:	4801                	li	a6,0
1c00933c:	4781                	li	a5,0
1c00933e:	4701                	li	a4,0
1c009340:	4681                	li	a3,0
1c009342:	4605                	li	a2,1
1c009344:	8522                	mv	a0,s0
{
1c009346:	c606                	sw	ra,12(sp)
1c009348:	c226                	sw	s1,4(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c00934a:	3599                	jal	1c009190 <hyperflash_stall_task>
1c00934c:	ed35                	bnez	a0,1c0093c8 <hyperflash_erase_chip_async+0x9a>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c00934e:	6485                	lui	s1,0x1
1c009350:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c009354:	8522                	mv	a0,s0
1c009356:	0aa00613          	li	a2,170
1c00935a:	3f19                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c00935c:	8522                	mv	a0,s0
1c00935e:	05500613          	li	a2,85
1c009362:	55400593          	li	a1,1364
1c009366:	3729                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c009368:	aaa48593          	addi	a1,s1,-1366
1c00936c:	8522                	mv	a0,s0
1c00936e:	08000613          	li	a2,128
1c009372:	3dfd                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c009374:	aaa48593          	addi	a1,s1,-1366
1c009378:	8522                	mv	a0,s0
1c00937a:	0aa00613          	li	a2,170
1c00937e:	3dcd                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c009380:	8522                	mv	a0,s0
1c009382:	05500613          	li	a2,85
1c009386:	55400593          	li	a1,1364
1c00938a:	35dd                	jal	1c009270 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x10);
1c00938c:	aaa48593          	addi	a1,s1,-1366
1c009390:	8522                	mv	a0,s0
1c009392:	4641                	li	a2,16
1c009394:	3df1                	jal	1c009270 <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c009396:	1c00a7b7          	lui	a5,0x1c00a
1c00939a:	a6e78793          	addi	a5,a5,-1426 # 1c009a6e <hyperflash_check_erase>
1c00939e:	02040e23          	sb	zero,60(s0)
1c0093a2:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c0093a4:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c0093a6:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c0093aa:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c0093ae:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c0093b0:	02840513          	addi	a0,s0,40
}
1c0093b4:	4422                	lw	s0,8(sp)
1c0093b6:	40b2                	lw	ra,12(sp)
1c0093b8:	4492                	lw	s1,4(sp)
1c0093ba:	4902                	lw	s2,0(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c0093bc:	65e1                	lui	a1,0x18
1c0093be:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c0093c2:	0141                	addi	sp,sp,16
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c0093c4:	2780206f          	j	1c00b63c <pi_task_push_delayed_us>
}
1c0093c8:	40b2                	lw	ra,12(sp)
1c0093ca:	4422                	lw	s0,8(sp)
1c0093cc:	4492                	lw	s1,4(sp)
1c0093ce:	4902                	lw	s2,0(sp)
1c0093d0:	0141                	addi	sp,sp,16
1c0093d2:	8082                	ret

1c0093d4 <hyperflash_read_async>:
{
1c0093d4:	1101                	addi	sp,sp,-32
1c0093d6:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0093d8:	4500                	lw	s0,8(a0)
{
1c0093da:	ca26                	sw	s1,20(sp)
1c0093dc:	84ae                	mv	s1,a1
1c0093de:	c84a                	sw	s2,16(sp)
1c0093e0:	c64e                	sw	s3,12(sp)
1c0093e2:	c452                	sw	s4,8(sp)
1c0093e4:	8932                	mv	s2,a2
1c0093e6:	8a2a                	mv	s4,a0
1c0093e8:	89b6                	mv	s3,a3
1c0093ea:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c0093ec:	87b6                	mv	a5,a3
1c0093ee:	8732                	mv	a4,a2
1c0093f0:	4881                	li	a7,0
1c0093f2:	4801                	li	a6,0
1c0093f4:	86a6                	mv	a3,s1
1c0093f6:	4615                	li	a2,5
1c0093f8:	8522                	mv	a0,s0
{
1c0093fa:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c0093fc:	d95ff0ef          	jal	ra,1c009190 <hyperflash_stall_task>
1c009400:	ed0d                	bnez	a0,1c00943a <hyperflash_read_async+0x66>
  task->arg[0] = (uint32_t)callback;
1c009402:	1c0097b7          	lui	a5,0x1c009
1c009406:	44a78793          	addi	a5,a5,1098 # 1c00944a <hyperflash_handle_pending_task>
1c00940a:	02040e23          	sb	zero,60(s0)
1c00940e:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c009410:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c009412:	03442823          	sw	s4,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009416:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c00941a:	c83c                	sw	a5,80(s0)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00941c:	02840713          	addi	a4,s0,40
1c009420:	8522                	mv	a0,s0
}
1c009422:	4462                	lw	s0,24(sp)
1c009424:	40f2                	lw	ra,28(sp)
1c009426:	4a22                	lw	s4,8(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009428:	86ce                	mv	a3,s3
1c00942a:	864a                	mv	a2,s2
}
1c00942c:	49b2                	lw	s3,12(sp)
1c00942e:	4942                	lw	s2,16(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009430:	85a6                	mv	a1,s1
}
1c009432:	44d2                	lw	s1,20(sp)
1c009434:	6105                	addi	sp,sp,32
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c009436:	74c0306f          	j	1c00cb82 <pi_hyper_read_async>
}
1c00943a:	40f2                	lw	ra,28(sp)
1c00943c:	4462                	lw	s0,24(sp)
1c00943e:	44d2                	lw	s1,20(sp)
1c009440:	4942                	lw	s2,16(sp)
1c009442:	49b2                	lw	s3,12(sp)
1c009444:	4a22                	lw	s4,8(sp)
1c009446:	6105                	addi	sp,sp,32
1c009448:	8082                	ret

1c00944a <hyperflash_handle_pending_task>:
{
1c00944a:	1101                	addi	sp,sp,-32
1c00944c:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00944e:	4504                	lw	s1,8(a0)
{
1c009450:	cc22                	sw	s0,24(sp)
1c009452:	842a                	mv	s0,a0
1c009454:	ce06                	sw	ra,28(sp)
1c009456:	c84a                	sw	s2,16(sp)
1c009458:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00945a:	30047973          	csrrci	s2,mstatus,8
  pi_task_enqueue(hyperflash->pending_task);
1c00945e:	4c88                	lw	a0,24(s1)
1c009460:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c009464:	d03ff0ef          	jal	ra,1c009166 <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c009468:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->waiting_first;
1c00946c:	4898                	lw	a4,16(s1)
  hyperflash->pending_task = NULL;
1c00946e:	0004ac23          	sw	zero,24(s1)
  if (task)
1c009472:	c319                	beqz	a4,1c009478 <hyperflash_handle_pending_task+0x2e>
    hyperflash->waiting_first = task->implem.next;
1c009474:	4f5c                	lw	a5,28(a4)
1c009476:	c89c                	sw	a5,16(s1)
1c009478:	30091073          	csrw	mstatus,s2
  if (task)
1c00947c:	c369                	beqz	a4,1c00953e <hyperflash_handle_pending_task+0xf4>
    if (task->implem.data[0] == STALL_TASK_PROGRAM)
1c00947e:	5f1c                	lw	a5,56(a4)
1c009480:	ef81                	bnez	a5,1c009498 <hyperflash_handle_pending_task+0x4e>
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009482:	8522                	mv	a0,s0
}
1c009484:	4462                	lw	s0,24(sp)
1c009486:	40f2                	lw	ra,28(sp)
1c009488:	44d2                	lw	s1,20(sp)
1c00948a:	4942                	lw	s2,16(sp)
1c00948c:	49b2                	lw	s3,12(sp)
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c00948e:	4374                	lw	a3,68(a4)
1c009490:	4330                	lw	a2,64(a4)
1c009492:	5f4c                	lw	a1,60(a4)
}
1c009494:	6105                	addi	sp,sp,32
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009496:	ac31                	j	1c0096b2 <hyperflash_program_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_CHIP)
1c009498:	0017bb63          	p.bneimm	a5,1,1c0094ae <hyperflash_handle_pending_task+0x64>
      hyperflash_erase_chip_async(device, task);
1c00949c:	8522                	mv	a0,s0
}
1c00949e:	4462                	lw	s0,24(sp)
1c0094a0:	40f2                	lw	ra,28(sp)
1c0094a2:	44d2                	lw	s1,20(sp)
1c0094a4:	4942                	lw	s2,16(sp)
1c0094a6:	49b2                	lw	s3,12(sp)
      hyperflash_erase_chip_async(device, task);
1c0094a8:	85ba                	mv	a1,a4
}
1c0094aa:	6105                	addi	sp,sp,32
      hyperflash_erase_chip_async(device, task);
1c0094ac:	b549                	j	1c00932e <hyperflash_erase_chip_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_SECTOR)
1c0094ae:	0027bd63          	p.bneimm	a5,2,1c0094c8 <hyperflash_handle_pending_task+0x7e>
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c0094b2:	8522                	mv	a0,s0
}
1c0094b4:	4462                	lw	s0,24(sp)
1c0094b6:	40f2                	lw	ra,28(sp)
1c0094b8:	44d2                	lw	s1,20(sp)
1c0094ba:	4942                	lw	s2,16(sp)
1c0094bc:	49b2                	lw	s3,12(sp)
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c0094be:	5f4c                	lw	a1,60(a4)
1c0094c0:	863a                	mv	a2,a4
}
1c0094c2:	6105                	addi	sp,sp,32
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c0094c4:	dbbff06f          	j	1c00927e <hyperflash_erase_sector_async>
    else if (task->implem.data[0] == STALL_TASK_REG_SET)
1c0094c8:	0037bd63          	p.bneimm	a5,3,1c0094e2 <hyperflash_handle_pending_task+0x98>
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c0094cc:	8522                	mv	a0,s0
}
1c0094ce:	4462                	lw	s0,24(sp)
1c0094d0:	40f2                	lw	ra,28(sp)
1c0094d2:	44d2                	lw	s1,20(sp)
1c0094d4:	4942                	lw	s2,16(sp)
1c0094d6:	49b2                	lw	s3,12(sp)
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c0094d8:	4330                	lw	a2,64(a4)
1c0094da:	5f4c                	lw	a1,60(a4)
1c0094dc:	86ba                	mv	a3,a4
}
1c0094de:	6105                	addi	sp,sp,32
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c0094e0:	a0e9                	j	1c0095aa <hyperflash_reg_set_async>
    else if (task->implem.data[0] == STALL_TASK_REG_GET)
1c0094e2:	0047bd63          	p.bneimm	a5,4,1c0094fc <hyperflash_handle_pending_task+0xb2>
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c0094e6:	8522                	mv	a0,s0
}
1c0094e8:	4462                	lw	s0,24(sp)
1c0094ea:	40f2                	lw	ra,28(sp)
1c0094ec:	44d2                	lw	s1,20(sp)
1c0094ee:	4942                	lw	s2,16(sp)
1c0094f0:	49b2                	lw	s3,12(sp)
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c0094f2:	4330                	lw	a2,64(a4)
1c0094f4:	5f4c                	lw	a1,60(a4)
1c0094f6:	86ba                	mv	a3,a4
}
1c0094f8:	6105                	addi	sp,sp,32
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c0094fa:	a889                	j	1c00954c <hyperflash_reg_get_async>
    else if (task->implem.data[0] == STALL_TASK_READ)
1c0094fc:	0057bd63          	p.bneimm	a5,5,1c009516 <hyperflash_handle_pending_task+0xcc>
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009500:	8522                	mv	a0,s0
}
1c009502:	4462                	lw	s0,24(sp)
1c009504:	40f2                	lw	ra,28(sp)
1c009506:	44d2                	lw	s1,20(sp)
1c009508:	4942                	lw	s2,16(sp)
1c00950a:	49b2                	lw	s3,12(sp)
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c00950c:	4374                	lw	a3,68(a4)
1c00950e:	4330                	lw	a2,64(a4)
1c009510:	5f4c                	lw	a1,60(a4)
}
1c009512:	6105                	addi	sp,sp,32
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c009514:	b5c1                	j	1c0093d4 <hyperflash_read_async>
    else if (task->implem.data[0] == STALL_TASK_READ_2D)
1c009516:	0267b463          	p.bneimm	a5,6,1c00953e <hyperflash_handle_pending_task+0xf4>
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c00951a:	883a                	mv	a6,a4
1c00951c:	8522                	mv	a0,s0
}
1c00951e:	4462                	lw	s0,24(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c009520:	477c                	lw	a5,76(a4)
}
1c009522:	40f2                	lw	ra,28(sp)
1c009524:	44d2                	lw	s1,20(sp)
1c009526:	4942                	lw	s2,16(sp)
1c009528:	49b2                	lw	s3,12(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c00952a:	4738                	lw	a4,72(a4)
1c00952c:	04482683          	lw	a3,68(a6)
1c009530:	04082603          	lw	a2,64(a6)
1c009534:	03c82583          	lw	a1,60(a6)
}
1c009538:	6105                	addi	sp,sp,32
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c00953a:	c97ff06f          	j	1c0091d0 <hyperflash_read_2d_async>
}
1c00953e:	40f2                	lw	ra,28(sp)
1c009540:	4462                	lw	s0,24(sp)
1c009542:	44d2                	lw	s1,20(sp)
1c009544:	4942                	lw	s2,16(sp)
1c009546:	49b2                	lw	s3,12(sp)
1c009548:	6105                	addi	sp,sp,32
1c00954a:	8082                	ret

1c00954c <hyperflash_reg_get_async>:
{
1c00954c:	1101                	addi	sp,sp,-32
1c00954e:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009550:	4500                	lw	s0,8(a0)
{
1c009552:	c64e                	sw	s3,12(sp)
1c009554:	89ae                	mv	s3,a1
1c009556:	ca26                	sw	s1,20(sp)
1c009558:	c84a                	sw	s2,16(sp)
1c00955a:	84aa                	mv	s1,a0
1c00955c:	8932                	mv	s2,a2
1c00955e:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c009560:	8732                	mv	a4,a2
1c009562:	4881                	li	a7,0
1c009564:	4801                	li	a6,0
1c009566:	4781                	li	a5,0
1c009568:	86ce                	mv	a3,s3
1c00956a:	4611                	li	a2,4
1c00956c:	8522                	mv	a0,s0
{
1c00956e:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c009570:	c21ff0ef          	jal	ra,1c009190 <hyperflash_stall_task>
1c009574:	e505                	bnez	a0,1c00959c <hyperflash_reg_get_async+0x50>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c009576:	8522                	mv	a0,s0
1c009578:	00c40613          	addi	a2,s0,12
1c00957c:	85ce                	mv	a1,s3
1c00957e:	4691                	li	a3,4
1c009580:	618030ef          	jal	ra,1c00cb98 <pi_hyper_read>
  return hyperflash->udma_buffer[0];
1c009584:	00c45783          	lhu	a5,12(s0)
}
1c009588:	4462                	lw	s0,24(sp)
1c00958a:	40f2                	lw	ra,28(sp)
  *(uint16_t *)value = hyperflash_get_reg_exec(hyperflash, addr);
1c00958c:	00f91023          	sh	a5,0(s2)
}
1c009590:	49b2                	lw	s3,12(sp)
1c009592:	4942                	lw	s2,16(sp)
  hyperflash_handle_pending_task(device);
1c009594:	8526                	mv	a0,s1
}
1c009596:	44d2                	lw	s1,20(sp)
1c009598:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c00959a:	bd45                	j	1c00944a <hyperflash_handle_pending_task>
}
1c00959c:	40f2                	lw	ra,28(sp)
1c00959e:	4462                	lw	s0,24(sp)
1c0095a0:	44d2                	lw	s1,20(sp)
1c0095a2:	4942                	lw	s2,16(sp)
1c0095a4:	49b2                	lw	s3,12(sp)
1c0095a6:	6105                	addi	sp,sp,32
1c0095a8:	8082                	ret

1c0095aa <hyperflash_reg_set_async>:
{
1c0095aa:	1101                	addi	sp,sp,-32
1c0095ac:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0095ae:	4504                	lw	s1,8(a0)
{
1c0095b0:	c84a                	sw	s2,16(sp)
1c0095b2:	892e                	mv	s2,a1
1c0095b4:	cc22                	sw	s0,24(sp)
1c0095b6:	c64e                	sw	s3,12(sp)
1c0095b8:	842a                	mv	s0,a0
1c0095ba:	89b2                	mv	s3,a2
1c0095bc:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c0095be:	8732                	mv	a4,a2
1c0095c0:	4881                	li	a7,0
1c0095c2:	4801                	li	a6,0
1c0095c4:	4781                	li	a5,0
1c0095c6:	86ca                	mv	a3,s2
1c0095c8:	460d                	li	a2,3
1c0095ca:	8526                	mv	a0,s1
{
1c0095cc:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c0095ce:	bc3ff0ef          	jal	ra,1c009190 <hyperflash_stall_task>
1c0095d2:	e105                	bnez	a0,1c0095f2 <hyperflash_reg_set_async+0x48>
  hyperflash_set_reg_exec(hyperflash, addr, *(uint16_t *)value);
1c0095d4:	0009d603          	lhu	a2,0(s3)
1c0095d8:	8526                	mv	a0,s1
1c0095da:	85ca                	mv	a1,s2
1c0095dc:	c95ff0ef          	jal	ra,1c009270 <hyperflash_set_reg_exec>
  hyperflash_handle_pending_task(device);
1c0095e0:	8522                	mv	a0,s0
}
1c0095e2:	4462                	lw	s0,24(sp)
1c0095e4:	40f2                	lw	ra,28(sp)
1c0095e6:	44d2                	lw	s1,20(sp)
1c0095e8:	4942                	lw	s2,16(sp)
1c0095ea:	49b2                	lw	s3,12(sp)
1c0095ec:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c0095ee:	e5dff06f          	j	1c00944a <hyperflash_handle_pending_task>
}
1c0095f2:	40f2                	lw	ra,28(sp)
1c0095f4:	4462                	lw	s0,24(sp)
1c0095f6:	44d2                	lw	s1,20(sp)
1c0095f8:	4942                	lw	s2,16(sp)
1c0095fa:	49b2                	lw	s3,12(sp)
1c0095fc:	6105                	addi	sp,sp,32
1c0095fe:	8082                	ret

1c009600 <hyperflash_program_resume>:
{
1c009600:	1101                	addi	sp,sp,-32
1c009602:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009604:	4500                	lw	s0,8(a0)
{
1c009606:	ce06                	sw	ra,28(sp)
1c009608:	ca26                	sw	s1,20(sp)
  if (hyperflash->pending_size == 0)
1c00960a:	13042683          	lw	a3,304(s0)
{
1c00960e:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_size == 0)
1c009610:	ea81                	bnez	a3,1c009620 <hyperflash_program_resume+0x20>
}
1c009612:	4462                	lw	s0,24(sp)
1c009614:	40f2                	lw	ra,28(sp)
1c009616:	44d2                	lw	s1,20(sp)
1c009618:	4942                	lw	s2,16(sp)
1c00961a:	6105                	addi	sp,sp,32
    hyperflash_handle_pending_task(device);
1c00961c:	e2fff06f          	j	1c00944a <hyperflash_handle_pending_task>
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c009620:	12842783          	lw	a5,296(s0)
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c009624:	6905                	lui	s2,0x1
1c009626:	84aa                	mv	s1,a0
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c009628:	ec97b733          	p.bclr	a4,a5,22,9
1c00962c:	20000793          	li	a5,512
1c009630:	8f99                	sub	a5,a5,a4
1c009632:	04f6d6b3          	p.minu	a3,a3,a5
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c009636:	aaa90593          	addi	a1,s2,-1366 # aaa <__rt_stack_size+0x2aa>
1c00963a:	8522                	mv	a0,s0
1c00963c:	0aa00613          	li	a2,170
1c009640:	c636                	sw	a3,12(sp)
1c009642:	c2fff0ef          	jal	ra,1c009270 <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c009646:	8522                	mv	a0,s0
1c009648:	05500613          	li	a2,85
1c00964c:	55400593          	li	a1,1364
1c009650:	c21ff0ef          	jal	ra,1c009270 <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xA0);
1c009654:	aaa90593          	addi	a1,s2,-1366
1c009658:	8522                	mv	a0,s0
1c00965a:	0a000613          	li	a2,160
1c00965e:	c13ff0ef          	jal	ra,1c009270 <hyperflash_set_reg_exec>
    hyperflash->pending_hyper_addr += iter_size;
1c009662:	46b2                	lw	a3,12(sp)
    uint32_t hyper_addr = hyperflash->pending_hyper_addr;
1c009664:	12842583          	lw	a1,296(s0)
    uint32_t data = hyperflash->pending_data;
1c009668:	12c42603          	lw	a2,300(s0)
  task->done = 0;
1c00966c:	02040e23          	sb	zero,60(s0)
    hyperflash->pending_hyper_addr += iter_size;
1c009670:	00d587b3          	add	a5,a1,a3
1c009674:	12f42423          	sw	a5,296(s0)
    hyperflash->pending_data += iter_size;
1c009678:	00d607b3          	add	a5,a2,a3
1c00967c:	12f42623          	sw	a5,300(s0)
    hyperflash->pending_size -= iter_size;
1c009680:	13042783          	lw	a5,304(s0)
  task->arg[1] = (uint32_t)arg;
1c009684:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009686:	04042023          	sw	zero,64(s0)
1c00968a:	8f95                	sub	a5,a5,a3
1c00968c:	12f42823          	sw	a5,304(s0)
  task->arg[0] = (uint32_t)callback;
1c009690:	1c00a7b7          	lui	a5,0x1c00a
1c009694:	ac078793          	addi	a5,a5,-1344 # 1c009ac0 <hyperflash_check_program>
1c009698:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00969a:	4785                	li	a5,1
1c00969c:	c83c                	sw	a5,80(s0)
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c00969e:	02840713          	addi	a4,s0,40
1c0096a2:	8522                	mv	a0,s0
}
1c0096a4:	4462                	lw	s0,24(sp)
1c0096a6:	40f2                	lw	ra,28(sp)
1c0096a8:	44d2                	lw	s1,20(sp)
1c0096aa:	4942                	lw	s2,16(sp)
1c0096ac:	6105                	addi	sp,sp,32
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c0096ae:	50c0306f          	j	1c00cbba <pi_hyper_write_async>

1c0096b2 <hyperflash_program_async>:
{
1c0096b2:	1101                	addi	sp,sp,-32
1c0096b4:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0096b6:	4500                	lw	s0,8(a0)
{
1c0096b8:	c452                	sw	s4,8(sp)
1c0096ba:	8a2e                	mv	s4,a1
1c0096bc:	ca26                	sw	s1,20(sp)
1c0096be:	c84a                	sw	s2,16(sp)
1c0096c0:	c64e                	sw	s3,12(sp)
1c0096c2:	84aa                	mv	s1,a0
1c0096c4:	89b2                	mv	s3,a2
1c0096c6:	8936                	mv	s2,a3
1c0096c8:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c0096ca:	87b6                	mv	a5,a3
1c0096cc:	8732                	mv	a4,a2
1c0096ce:	4881                	li	a7,0
1c0096d0:	4801                	li	a6,0
1c0096d2:	86d2                	mv	a3,s4
1c0096d4:	4601                	li	a2,0
1c0096d6:	8522                	mv	a0,s0
{
1c0096d8:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c0096da:	ab7ff0ef          	jal	ra,1c009190 <hyperflash_stall_task>
1c0096de:	e105                	bnez	a0,1c0096fe <hyperflash_program_async+0x4c>
  hyperflash->pending_hyper_addr = hyper_addr;
1c0096e0:	13442423          	sw	s4,296(s0)
  hyperflash->pending_data = (uint32_t)data;
1c0096e4:	13342623          	sw	s3,300(s0)
  hyperflash->pending_size = size;
1c0096e8:	13242823          	sw	s2,304(s0)
}
1c0096ec:	4462                	lw	s0,24(sp)
1c0096ee:	40f2                	lw	ra,28(sp)
1c0096f0:	4942                	lw	s2,16(sp)
1c0096f2:	49b2                	lw	s3,12(sp)
1c0096f4:	4a22                	lw	s4,8(sp)
  hyperflash_program_resume(device);
1c0096f6:	8526                	mv	a0,s1
}
1c0096f8:	44d2                	lw	s1,20(sp)
1c0096fa:	6105                	addi	sp,sp,32
  hyperflash_program_resume(device);
1c0096fc:	b711                	j	1c009600 <hyperflash_program_resume>
}
1c0096fe:	40f2                	lw	ra,28(sp)
1c009700:	4462                	lw	s0,24(sp)
1c009702:	44d2                	lw	s1,20(sp)
1c009704:	4942                	lw	s2,16(sp)
1c009706:	49b2                	lw	s3,12(sp)
1c009708:	4a22                	lw	s4,8(sp)
1c00970a:	6105                	addi	sp,sp,32
1c00970c:	8082                	ret

1c00970e <hyperflash_copy_async>:
{
1c00970e:	1141                	addi	sp,sp,-16
1c009710:	c606                	sw	ra,12(sp)
  if (!ext2loc)
1c009712:	e719                	bnez	a4,1c009720 <hyperflash_copy_async+0x12>
    hyperflash_program_async(device, flash_addr, buffer, size, task);
1c009714:	873e                	mv	a4,a5
1c009716:	3f71                	jal	1c0096b2 <hyperflash_program_async>
}
1c009718:	40b2                	lw	ra,12(sp)
1c00971a:	4501                	li	a0,0
1c00971c:	0141                	addi	sp,sp,16
1c00971e:	8082                	ret
    hyperflash_read_async(device, flash_addr, buffer, size, task);
1c009720:	873e                	mv	a4,a5
1c009722:	cb3ff0ef          	jal	ra,1c0093d4 <hyperflash_read_async>
1c009726:	bfcd                	j	1c009718 <hyperflash_copy_async+0xa>

1c009728 <hyperflash_close>:
{
1c009728:	1141                	addi	sp,sp,-16
1c00972a:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00972c:	4500                	lw	s0,8(a0)
{
1c00972e:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperflash->hyper_device);
1c009730:	8522                	mv	a0,s0
1c009732:	2ba030ef          	jal	ra,1c00c9ec <pi_hyper_close>
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c009736:	8522                	mv	a0,s0
}
1c009738:	4422                	lw	s0,8(sp)
1c00973a:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c00973c:	13c00593          	li	a1,316
}
1c009740:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c009742:	0f60206f          	j	1c00b838 <pi_l2_free>

1c009746 <hyperflash_open>:
{
1c009746:	7179                	addi	sp,sp,-48
1c009748:	d226                	sw	s1,36(sp)
1c00974a:	d04a                	sw	s2,32(sp)
1c00974c:	84aa                	mv	s1,a0
  struct pi_hyperflash_conf *conf = (struct pi_hyperflash_conf *)device->config;
1c00974e:	00452903          	lw	s2,4(a0)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c009752:	13c00513          	li	a0,316
{
1c009756:	d606                	sw	ra,44(sp)
1c009758:	d422                	sw	s0,40(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c00975a:	0d0020ef          	jal	ra,1c00b82a <pi_l2_malloc>
  if (hyperflash == NULL)
1c00975e:	c935                	beqz	a0,1c0097d2 <hyperflash_open+0x8c>
  device->data = (void *)hyperflash;
1c009760:	c488                	sw	a0,8(s1)
1c009762:	842a                	mv	s0,a0
  if (bsp_hyperflash_open(conf))
1c009764:	854a                	mv	a0,s2
1c009766:	5d2010ef          	jal	ra,1c00ad38 <bsp_hyperflash_open>
1c00976a:	84aa                	mv	s1,a0
1c00976c:	ed21                	bnez	a0,1c0097c4 <hyperflash_open+0x7e>
  struct pi_hyper_conf hyper_conf = {0};
1c00976e:	4671                	li	a2,28
1c009770:	4581                	li	a1,0
1c009772:	0048                	addi	a0,sp,4
1c009774:	6b9030ef          	jal	ra,1c00d62c <memset>
  pi_hyper_conf_init(&hyper_conf);
1c009778:	0048                	addi	a0,sp,4
1c00977a:	102030ef          	jal	ra,1c00c87c <pi_hyper_conf_init>
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c00977e:	00492783          	lw	a5,4(s2)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c009782:	8522                	mv	a0,s0
1c009784:	004c                	addi	a1,sp,4
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c009786:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c00978a:	00892783          	lw	a5,8(s2)
  hyper_conf.type = PI_HYPER_TYPE_FLASH;
1c00978e:	c802                	sw	zero,16(sp)
  hyper_conf.cs = conf->hyper_cs;
1c009790:	c63e                	sw	a5,12(sp)
  hyper_conf.xip_en = conf->xip_en;
1c009792:	00c92783          	lw	a5,12(s2)
1c009796:	00f104a3          	sb	a5,9(sp)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c00979a:	764010ef          	jal	ra,1c00aefe <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperflash->hyper_device);
1c00979e:	8522                	mv	a0,s0
1c0097a0:	0ec030ef          	jal	ra,1c00c88c <pi_hyper_open>
  if (error)
1c0097a4:	e105                	bnez	a0,1c0097c4 <hyperflash_open+0x7e>
  hyperflash->pending_task = NULL;
1c0097a6:	00042c23          	sw	zero,24(s0)
  hyperflash->waiting_first = NULL;
1c0097aa:	00042823          	sw	zero,16(s0)
  hyperflash->erase_task = NULL;
1c0097ae:	02042223          	sw	zero,36(s0)
  hyperflash->erase_waiting_first = NULL;
1c0097b2:	00042e23          	sw	zero,28(s0)
}
1c0097b6:	50b2                	lw	ra,44(sp)
1c0097b8:	5422                	lw	s0,40(sp)
1c0097ba:	8526                	mv	a0,s1
1c0097bc:	5902                	lw	s2,32(sp)
1c0097be:	5492                	lw	s1,36(sp)
1c0097c0:	6145                	addi	sp,sp,48
1c0097c2:	8082                	ret
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c0097c4:	13c00593          	li	a1,316
1c0097c8:	8522                	mv	a0,s0
1c0097ca:	06e020ef          	jal	ra,1c00b838 <pi_l2_free>
  return -2;
1c0097ce:	54f9                	li	s1,-2
1c0097d0:	b7dd                	j	1c0097b6 <hyperflash_open+0x70>
    return -1;
1c0097d2:	54fd                	li	s1,-1
1c0097d4:	b7cd                	j	1c0097b6 <hyperflash_open+0x70>

1c0097d6 <pi_task_wait_on.isra.3>:
static inline void pi_task_wait_on(struct pi_task *task)
1c0097d6:	1141                	addi	sp,sp,-16
1c0097d8:	c422                	sw	s0,8(sp)
1c0097da:	c226                	sw	s1,4(sp)
1c0097dc:	c606                	sw	ra,12(sp)
1c0097de:	c04a                	sw	s2,0(sp)
1c0097e0:	842a                	mv	s0,a0
  while(!task->done)
1c0097e2:	00040783          	lb	a5,0(s0)
1c0097e6:	c799                	beqz	a5,1c0097f4 <pi_task_wait_on.isra.3+0x1e>
}
1c0097e8:	40b2                	lw	ra,12(sp)
1c0097ea:	4422                	lw	s0,8(sp)
1c0097ec:	4492                	lw	s1,4(sp)
1c0097ee:	4902                	lw	s2,0(sp)
1c0097f0:	0141                	addi	sp,sp,16
1c0097f2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0097f4:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0097f8:	4585                	li	a1,1
1c0097fa:	01c00513          	li	a0,28
1c0097fe:	581010ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009802:	30091073          	csrw	mstatus,s2
1c009806:	bff1                	j	1c0097e2 <pi_task_wait_on.isra.3+0xc>

1c009808 <hyperflash_copy_2d>:
  pi_task_wait_on(&task);
  return 0;
}

static inline int hyperflash_copy_2d(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc)
{
1c009808:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00980a:	4885                	li	a7,1
1c00980c:	c706                	sw	ra,140(sp)
1c00980e:	cc46                	sw	a7,24(sp)
  task->arg[0] = (uint32_t)0;
1c009810:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c009812:	d446                	sw	a7,40(sp)
  task->done = 0;
1c009814:	00010a23          	sb	zero,20(sp)
  if (!ext2loc)
1c009818:	00080b63          	beqz	a6,1c00982e <hyperflash_copy_2d+0x26>
  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c00981c:	880a                	mv	a6,sp
1c00981e:	9b3ff0ef          	jal	ra,1c0091d0 <hyperflash_read_2d_async>
  pi_task_t task;
  pi_task_block(&task);
  if (hyperflash_copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, &task))
    return -1;
  pi_task_wait_on(&task);
1c009822:	0848                	addi	a0,sp,20
1c009824:	3f4d                	jal	1c0097d6 <pi_task_wait_on.isra.3>
  return 0;
1c009826:	4501                	li	a0,0
}
1c009828:	40ba                	lw	ra,140(sp)
1c00982a:	6149                	addi	sp,sp,144
1c00982c:	8082                	ret
    return -1;
1c00982e:	557d                	li	a0,-1
1c009830:	bfe5                	j	1c009828 <hyperflash_copy_2d+0x20>

1c009832 <hyperflash_erase_sector>:
{
1c009832:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009834:	4785                	li	a5,1
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c009836:	860a                	mv	a2,sp
{
1c009838:	c706                	sw	ra,140(sp)
1c00983a:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00983c:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c00983e:	c202                	sw	zero,4(sp)
1c009840:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c009844:	a3bff0ef          	jal	ra,1c00927e <hyperflash_erase_sector_async>
  pi_task_wait_on(&task);
1c009848:	0848                	addi	a0,sp,20
1c00984a:	3771                	jal	1c0097d6 <pi_task_wait_on.isra.3>
}
1c00984c:	40ba                	lw	ra,140(sp)
1c00984e:	4501                	li	a0,0
1c009850:	6149                	addi	sp,sp,144
1c009852:	8082                	ret

1c009854 <hyperflash_erase_chip>:
{
1c009854:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009856:	4785                	li	a5,1
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c009858:	858a                	mv	a1,sp
{
1c00985a:	c706                	sw	ra,140(sp)
1c00985c:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00985e:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c009860:	c202                	sw	zero,4(sp)
1c009862:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c009866:	ac9ff0ef          	jal	ra,1c00932e <hyperflash_erase_chip_async>
  pi_task_wait_on(&task);
1c00986a:	0848                	addi	a0,sp,20
1c00986c:	37ad                	jal	1c0097d6 <pi_task_wait_on.isra.3>
}
1c00986e:	40ba                	lw	ra,140(sp)
1c009870:	4501                	li	a0,0
1c009872:	6149                	addi	sp,sp,144
1c009874:	8082                	ret

1c009876 <hyperflash_read>:
{
1c009876:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009878:	4785                	li	a5,1
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00987a:	870a                	mv	a4,sp
{
1c00987c:	c706                	sw	ra,140(sp)
1c00987e:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009880:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c009882:	c202                	sw	zero,4(sp)
1c009884:	00010a23          	sb	zero,20(sp)
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c009888:	b4dff0ef          	jal	ra,1c0093d4 <hyperflash_read_async>
  pi_task_wait_on(&task);
1c00988c:	0848                	addi	a0,sp,20
1c00988e:	37a1                	jal	1c0097d6 <pi_task_wait_on.isra.3>
}
1c009890:	40ba                	lw	ra,140(sp)
1c009892:	4501                	li	a0,0
1c009894:	6149                	addi	sp,sp,144
1c009896:	8082                	ret

1c009898 <hyperflash_reg_get>:
{
1c009898:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00989a:	4785                	li	a5,1
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00989c:	868a                	mv	a3,sp
{
1c00989e:	c706                	sw	ra,140(sp)
1c0098a0:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0098a2:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c0098a4:	c202                	sw	zero,4(sp)
1c0098a6:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c0098aa:	ca3ff0ef          	jal	ra,1c00954c <hyperflash_reg_get_async>
  pi_task_wait_on(&task);
1c0098ae:	0848                	addi	a0,sp,20
1c0098b0:	371d                	jal	1c0097d6 <pi_task_wait_on.isra.3>
}
1c0098b2:	40ba                	lw	ra,140(sp)
1c0098b4:	4501                	li	a0,0
1c0098b6:	6149                	addi	sp,sp,144
1c0098b8:	8082                	ret

1c0098ba <hyperflash_reg_set>:
{
1c0098ba:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c0098bc:	4785                	li	a5,1
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c0098be:	868a                	mv	a3,sp
{
1c0098c0:	c706                	sw	ra,140(sp)
1c0098c2:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0098c4:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c0098c6:	c202                	sw	zero,4(sp)
1c0098c8:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c0098cc:	cdfff0ef          	jal	ra,1c0095aa <hyperflash_reg_set_async>
  pi_task_wait_on(&task);
1c0098d0:	0848                	addi	a0,sp,20
1c0098d2:	3711                	jal	1c0097d6 <pi_task_wait_on.isra.3>
}
1c0098d4:	40ba                	lw	ra,140(sp)
1c0098d6:	4501                	li	a0,0
1c0098d8:	6149                	addi	sp,sp,144
1c0098da:	8082                	ret

1c0098dc <hyperflash_program>:
{
1c0098dc:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c0098de:	4785                	li	a5,1
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c0098e0:	870a                	mv	a4,sp
{
1c0098e2:	c706                	sw	ra,140(sp)
1c0098e4:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0098e6:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c0098e8:	c202                	sw	zero,4(sp)
1c0098ea:	00010a23          	sb	zero,20(sp)
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c0098ee:	dc5ff0ef          	jal	ra,1c0096b2 <hyperflash_program_async>
  pi_task_wait_on(&task);
1c0098f2:	0848                	addi	a0,sp,20
1c0098f4:	ee3ff0ef          	jal	ra,1c0097d6 <pi_task_wait_on.isra.3>
}
1c0098f8:	40ba                	lw	ra,140(sp)
1c0098fa:	4501                	li	a0,0
1c0098fc:	6149                	addi	sp,sp,144
1c0098fe:	8082                	ret

1c009900 <hyperflash_copy>:
{
1c009900:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009902:	4785                	li	a5,1
1c009904:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009906:	d43e                	sw	a5,40(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c009908:	878a                	mv	a5,sp
{
1c00990a:	c522                	sw	s0,136(sp)
1c00990c:	c706                	sw	ra,140(sp)
  task->arg[0] = (uint32_t)0;
1c00990e:	c202                	sw	zero,4(sp)
1c009910:	00010a23          	sb	zero,20(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c009914:	dfbff0ef          	jal	ra,1c00970e <hyperflash_copy_async>
    return -1;
1c009918:	547d                	li	s0,-1
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c00991a:	e509                	bnez	a0,1c009924 <hyperflash_copy+0x24>
1c00991c:	842a                	mv	s0,a0
  pi_task_wait_on(&task);
1c00991e:	0848                	addi	a0,sp,20
1c009920:	eb7ff0ef          	jal	ra,1c0097d6 <pi_task_wait_on.isra.3>
}
1c009924:	8522                	mv	a0,s0
1c009926:	40ba                	lw	ra,140(sp)
1c009928:	442a                	lw	s0,136(sp)
1c00992a:	6149                	addi	sp,sp,144
1c00992c:	8082                	ret

1c00992e <hyperflash_erase_resume>:
{
1c00992e:	1101                	addi	sp,sp,-32
1c009930:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009932:	4500                	lw	s0,8(a0)
{
1c009934:	ca26                	sw	s1,20(sp)
1c009936:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_erase_size == 0)
1c009938:	13842483          	lw	s1,312(s0)
{
1c00993c:	ce06                	sw	ra,28(sp)
1c00993e:	c64e                	sw	s3,12(sp)
1c009940:	892a                	mv	s2,a0
  if (hyperflash->pending_erase_size == 0)
1c009942:	ec8d                	bnez	s1,1c00997c <hyperflash_erase_resume+0x4e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009944:	300474f3          	csrrci	s1,mstatus,8
  pi_task_enqueue(hyperflash->erase_task);
1c009948:	5048                	lw	a0,36(s0)
1c00994a:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c00994e:	819ff0ef          	jal	ra,1c009166 <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c009952:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->erase_waiting_first;
1c009956:	4c54                	lw	a3,28(s0)
  hyperflash->erase_task = NULL;
1c009958:	02042223          	sw	zero,36(s0)
  if (task)
1c00995c:	c299                	beqz	a3,1c009962 <hyperflash_erase_resume+0x34>
    hyperflash->erase_waiting_first = task->implem.next;
1c00995e:	4edc                	lw	a5,28(a3)
1c009960:	cc5c                	sw	a5,28(s0)
1c009962:	30049073          	csrw	mstatus,s1
  if (task)
1c009966:	c2b5                	beqz	a3,1c0099ca <hyperflash_erase_resume+0x9c>
}
1c009968:	4462                	lw	s0,24(sp)
1c00996a:	40f2                	lw	ra,28(sp)
1c00996c:	44d2                	lw	s1,20(sp)
1c00996e:	49b2                	lw	s3,12(sp)
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c009970:	42b0                	lw	a2,64(a3)
1c009972:	5ecc                	lw	a1,60(a3)
1c009974:	854a                	mv	a0,s2
}
1c009976:	4942                	lw	s2,16(sp)
1c009978:	6105                	addi	sp,sp,32
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c00997a:	a8b9                	j	1c0099d8 <hyperflash_erase_async>
    unsigned int iter_size = SECTOR_SIZE - (hyperflash->pending_erase_hyper_addr & (SECTOR_SIZE - 1));
1c00997c:	13442583          	lw	a1,308(s0)
1c009980:	000407b7          	lui	a5,0x40
  task->id = PI_TASK_CALLBACK_ID;
1c009984:	0c042023          	sw	zero,192(s0)
1c009988:	db25b733          	p.bclr	a4,a1,13,18
1c00998c:	8f99                	sub	a5,a5,a4
1c00998e:	04f4d4b3          	p.minu	s1,s1,a5
  task->arg[0] = (uint32_t)callback;
1c009992:	1c00a7b7          	lui	a5,0x1c00a
1c009996:	92e78793          	addi	a5,a5,-1746 # 1c00992e <hyperflash_erase_resume>
1c00999a:	0af42623          	sw	a5,172(s0)
  task->implem.keep = 1;
1c00999e:	4785                	li	a5,1
1c0099a0:	0cf42823          	sw	a5,208(s0)
  task->arg[1] = (uint32_t)arg;
1c0099a4:	0aa42823          	sw	a0,176(s0)
  task->done = 0;
1c0099a8:	0a040e23          	sb	zero,188(s0)
    hyperflash_erase_sector_async(device, hyper_addr, pi_task_callback(&hyperflash->task2, hyperflash_erase_resume, device));
1c0099ac:	0a840613          	addi	a2,s0,168
1c0099b0:	8cfff0ef          	jal	ra,1c00927e <hyperflash_erase_sector_async>
    hyperflash->pending_erase_hyper_addr += iter_size;
1c0099b4:	13442783          	lw	a5,308(s0)
1c0099b8:	97a6                	add	a5,a5,s1
1c0099ba:	12f42a23          	sw	a5,308(s0)
    hyperflash->pending_erase_size -= iter_size;
1c0099be:	13842783          	lw	a5,312(s0)
1c0099c2:	409784b3          	sub	s1,a5,s1
1c0099c6:	12942c23          	sw	s1,312(s0)
}
1c0099ca:	40f2                	lw	ra,28(sp)
1c0099cc:	4462                	lw	s0,24(sp)
1c0099ce:	44d2                	lw	s1,20(sp)
1c0099d0:	4942                	lw	s2,16(sp)
1c0099d2:	49b2                	lw	s3,12(sp)
1c0099d4:	6105                	addi	sp,sp,32
1c0099d6:	8082                	ret

1c0099d8 <hyperflash_erase_async>:
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0099d8:	451c                	lw	a5,8(a0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0099da:	30047773          	csrrci	a4,mstatus,8
  if (hyperflash->erase_task != NULL)
1c0099de:	0247a803          	lw	a6,36(a5)
1c0099e2:	02080463          	beqz	a6,1c009a0a <hyperflash_erase_async+0x32>
    task->implem.data[0] = id;
1c0099e6:	450d                	li	a0,3
1c0099e8:	de88                	sw	a0,56(a3)
    task->implem.data[1] = arg0;
1c0099ea:	decc                	sw	a1,60(a3)
    task->implem.data[2] = arg1;
1c0099ec:	c2b0                	sw	a2,64(a3)
    task->implem.data[3] = arg2;
1c0099ee:	0406a223          	sw	zero,68(a3)
    if (hyperflash->erase_waiting_first)
1c0099f2:	4fd0                	lw	a2,28(a5)
1c0099f4:	ca09                	beqz	a2,1c009a06 <hyperflash_erase_async+0x2e>
      hyperflash->erase_waiting_last->implem.next = task;
1c0099f6:	5390                	lw	a2,32(a5)
1c0099f8:	ce54                	sw	a3,28(a2)
    hyperflash->erase_waiting_last = task;
1c0099fa:	d394                	sw	a3,32(a5)
    task->implem.next = NULL;
1c0099fc:	0006ae23          	sw	zero,28(a3)
  __builtin_pulp_spr_write(reg, val);
1c009a00:	30071073          	csrw	mstatus,a4
}
1c009a04:	8082                	ret
      hyperflash->erase_waiting_first = task;
1c009a06:	cfd4                	sw	a3,28(a5)
1c009a08:	bfcd                	j	1c0099fa <hyperflash_erase_async+0x22>
  hyperflash->erase_task = task;
1c009a0a:	d3d4                	sw	a3,36(a5)
1c009a0c:	30071073          	csrw	mstatus,a4
  hyperflash->pending_erase_hyper_addr = addr;
1c009a10:	12b7aa23          	sw	a1,308(a5)
  hyperflash->pending_erase_size = size;
1c009a14:	12c7ac23          	sw	a2,312(a5)
  hyperflash_erase_resume(device);
1c009a18:	f17ff06f          	j	1c00992e <hyperflash_erase_resume>

1c009a1c <hyperflash_erase>:
{
1c009a1c:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009a1e:	4785                	li	a5,1
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c009a20:	868a                	mv	a3,sp
{
1c009a22:	c706                	sw	ra,140(sp)
1c009a24:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009a26:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c009a28:	c202                	sw	zero,4(sp)
1c009a2a:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c009a2e:	376d                	jal	1c0099d8 <hyperflash_erase_async>
  pi_task_wait_on(&task);
1c009a30:	0848                	addi	a0,sp,20
1c009a32:	da5ff0ef          	jal	ra,1c0097d6 <pi_task_wait_on.isra.3>
}
1c009a36:	40ba                	lw	ra,140(sp)
1c009a38:	4501                	li	a0,0
1c009a3a:	6149                	addi	sp,sp,144
1c009a3c:	8082                	ret

1c009a3e <hyperflash_get_status_reg>:
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c009a3e:	6585                	lui	a1,0x1
{
1c009a40:	1141                	addi	sp,sp,-16
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c009a42:	07000613          	li	a2,112
1c009a46:	aaa58593          	addi	a1,a1,-1366 # aaa <__rt_stack_size+0x2aa>
{
1c009a4a:	c606                	sw	ra,12(sp)
1c009a4c:	c422                	sw	s0,8(sp)
1c009a4e:	842a                	mv	s0,a0
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c009a50:	821ff0ef          	jal	ra,1c009270 <hyperflash_set_reg_exec>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c009a54:	8522                	mv	a0,s0
1c009a56:	00c40613          	addi	a2,s0,12
1c009a5a:	4691                	li	a3,4
1c009a5c:	4581                	li	a1,0
1c009a5e:	13a030ef          	jal	ra,1c00cb98 <pi_hyper_read>
}
1c009a62:	00c45503          	lhu	a0,12(s0)
1c009a66:	40b2                	lw	ra,12(sp)
1c009a68:	4422                	lw	s0,8(sp)
1c009a6a:	0141                	addi	sp,sp,16
1c009a6c:	8082                	ret

1c009a6e <hyperflash_check_erase>:
{
1c009a6e:	1141                	addi	sp,sp,-16
1c009a70:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009a72:	4500                	lw	s0,8(a0)
{
1c009a74:	c226                	sw	s1,4(sp)
1c009a76:	84aa                	mv	s1,a0
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c009a78:	8522                	mv	a0,s0
{
1c009a7a:	c606                	sw	ra,12(sp)
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c009a7c:	37c9                	jal	1c009a3e <hyperflash_get_status_reg>
  if (((reg_status >> 7) & 1) == 0)
1c009a7e:	c0751533          	p.extractu	a0,a0,0,7
1c009a82:	e905                	bnez	a0,1c009ab2 <hyperflash_check_erase+0x44>
  task->arg[0] = (uint32_t)callback;
1c009a84:	1c00a7b7          	lui	a5,0x1c00a
1c009a88:	a6e78793          	addi	a5,a5,-1426 # 1c009a6e <hyperflash_check_erase>
1c009a8c:	02040e23          	sb	zero,60(s0)
1c009a90:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c009a92:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c009a94:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009a96:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c009a9a:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c009a9c:	02840513          	addi	a0,s0,40
}
1c009aa0:	4422                	lw	s0,8(sp)
1c009aa2:	40b2                	lw	ra,12(sp)
1c009aa4:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c009aa6:	65e1                	lui	a1,0x18
1c009aa8:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c009aac:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c009aae:	38f0106f          	j	1c00b63c <pi_task_push_delayed_us>
}
1c009ab2:	4422                	lw	s0,8(sp)
1c009ab4:	40b2                	lw	ra,12(sp)
    hyperflash_handle_pending_task(device);
1c009ab6:	8526                	mv	a0,s1
}
1c009ab8:	4492                	lw	s1,4(sp)
1c009aba:	0141                	addi	sp,sp,16
    hyperflash_handle_pending_task(device);
1c009abc:	98fff06f          	j	1c00944a <hyperflash_handle_pending_task>

1c009ac0 <hyperflash_check_program>:
{
1c009ac0:	1141                	addi	sp,sp,-16
1c009ac2:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c009ac4:	4500                	lw	s0,8(a0)
{
1c009ac6:	c226                	sw	s1,4(sp)
1c009ac8:	84aa                	mv	s1,a0
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c009aca:	8522                	mv	a0,s0
{
1c009acc:	c606                	sw	ra,12(sp)
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c009ace:	3f85                	jal	1c009a3e <hyperflash_get_status_reg>
1c009ad0:	08057513          	andi	a0,a0,128
1c009ad4:	e51d                	bnez	a0,1c009b02 <hyperflash_check_program+0x42>
  task->arg[0] = (uint32_t)callback;
1c009ad6:	1c00a7b7          	lui	a5,0x1c00a
1c009ada:	ac078793          	addi	a5,a5,-1344 # 1c009ac0 <hyperflash_check_program>
1c009ade:	02040e23          	sb	zero,60(s0)
1c009ae2:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c009ae4:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c009ae6:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009ae8:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c009aec:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c009aee:	02840513          	addi	a0,s0,40
}
1c009af2:	4422                	lw	s0,8(sp)
1c009af4:	40b2                	lw	ra,12(sp)
1c009af6:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c009af8:	0fa00593          	li	a1,250
}
1c009afc:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c009afe:	33f0106f          	j	1c00b63c <pi_task_push_delayed_us>
}
1c009b02:	4422                	lw	s0,8(sp)
1c009b04:	40b2                	lw	ra,12(sp)
    hyperflash_program_resume(device);
1c009b06:	8526                	mv	a0,s1
}
1c009b08:	4492                	lw	s1,4(sp)
1c009b0a:	0141                	addi	sp,sp,16
    hyperflash_program_resume(device);
1c009b0c:	af5ff06f          	j	1c009600 <hyperflash_program_resume>

1c009b10 <pi_hyperflash_conf_init>:
};



void pi_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
1c009b10:	1141                	addi	sp,sp,-16
  conf->flash.api = &hyperflash_api;
1c009b12:	1c00f7b7          	lui	a5,0x1c00f
{
1c009b16:	c606                	sw	ra,12(sp)
1c009b18:	c422                	sw	s0,8(sp)
  conf->flash.api = &hyperflash_api;
1c009b1a:	3ec78793          	addi	a5,a5,1004 # 1c00f3ec <hyperflash_api>
1c009b1e:	c11c                	sw	a5,0(a0)
{
1c009b20:	842a                	mv	s0,a0
  bsp_hyperflash_conf_init(conf);
1c009b22:	20c010ef          	jal	ra,1c00ad2e <bsp_hyperflash_conf_init>
  __flash_conf_init(&conf->flash);
1c009b26:	8522                	mv	a0,s0
1c009b28:	d0bfe0ef          	jal	ra,1c008832 <__flash_conf_init>
  conf->xip_en = 0;
}
1c009b2c:	40b2                	lw	ra,12(sp)
  conf->xip_en = 0;
1c009b2e:	00042623          	sw	zero,12(s0)
}
1c009b32:	4422                	lw	s0,8(sp)
1c009b34:	0141                	addi	sp,sp,16
1c009b36:	8082                	ret

1c009b38 <hyperram_alloc>:

int hyperram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
  void *chunk;
  hyperram_t *hyperram = (hyperram_t *)device->data;
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c009b38:	4508                	lw	a0,8(a0)
{
1c009b3a:	1101                	addi	sp,sp,-32
1c009b3c:	cc22                	sw	s0,24(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c009b3e:	0531                	addi	a0,a0,12
{
1c009b40:	842e                	mv	s0,a1
1c009b42:	85b2                	mv	a1,a2
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c009b44:	0070                	addi	a2,sp,12
{
1c009b46:	ce06                	sw	ra,28(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c009b48:	244d                	jal	1c009dea <extern_alloc>
  *addr = (uint32_t)chunk;
1c009b4a:	47b2                	lw	a5,12(sp)
  return err;
}
1c009b4c:	40f2                	lw	ra,28(sp)
  *addr = (uint32_t)chunk;
1c009b4e:	c01c                	sw	a5,0(s0)
}
1c009b50:	4462                	lw	s0,24(sp)
1c009b52:	6105                	addi	sp,sp,32
1c009b54:	8082                	ret

1c009b56 <hyperram_free>:


int hyperram_free(struct pi_device *device, uint32_t addr, uint32_t size)
{
  hyperram_t *hyperram = (hyperram_t *)device->data;
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c009b56:	4508                	lw	a0,8(a0)
{
1c009b58:	87b2                	mv	a5,a2
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c009b5a:	862e                	mv	a2,a1
1c009b5c:	0531                	addi	a0,a0,12
1c009b5e:	85be                	mv	a1,a5
1c009b60:	a4e5                	j	1c009e48 <extern_free>

1c009b62 <hyperram_copy_2d_async>:
{
1c009b62:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c009b64:	00080563          	beqz	a6,1c009b6e <hyperram_copy_2d_async+0xc>
    pi_hyper_read_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c009b68:	8846                	mv	a6,a7
1c009b6a:	4100306f          	j	1c00cf7a <pi_hyper_read_2d_async>
    pi_hyper_write_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c009b6e:	8846                	mv	a6,a7
1c009b70:	4220306f          	j	1c00cf92 <pi_hyper_write_2d_async>

1c009b74 <hyperram_copy_async>:
{
1c009b74:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c009b76:	c701                	beqz	a4,1c009b7e <hyperram_copy_async+0xa>
    pi_hyper_read_async(&hyperram->hyper_device, addr, data, size, task);
1c009b78:	873e                	mv	a4,a5
1c009b7a:	0080306f          	j	1c00cb82 <pi_hyper_read_async>
    pi_hyper_write_async(&hyperram->hyper_device, addr, data, size, task);
1c009b7e:	873e                	mv	a4,a5
1c009b80:	03a0306f          	j	1c00cbba <pi_hyper_write_async>

1c009b84 <hyperram_close>:
{
1c009b84:	1141                	addi	sp,sp,-16
1c009b86:	c422                	sw	s0,8(sp)
  hyperram_t *hyperram = (hyperram_t *)device->data;
1c009b88:	4500                	lw	s0,8(a0)
{
1c009b8a:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperram->hyper_device);
1c009b8c:	8522                	mv	a0,s0
1c009b8e:	65f020ef          	jal	ra,1c00c9ec <pi_hyper_close>
  extern_alloc_deinit(&hyperram->alloc);
1c009b92:	00c40513          	addi	a0,s0,12
1c009b96:	24b1                	jal	1c009de2 <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c009b98:	8522                	mv	a0,s0
}
1c009b9a:	4422                	lw	s0,8(sp)
1c009b9c:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c009b9e:	45c1                	li	a1,16
}
1c009ba0:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c009ba2:	4970106f          	j	1c00b838 <pi_l2_free>

1c009ba6 <hyperram_open>:
{
1c009ba6:	7139                	addi	sp,sp,-64
1c009ba8:	dc22                	sw	s0,56(sp)
1c009baa:	d84a                	sw	s2,48(sp)
  struct pi_hyperram_conf *conf = (struct pi_hyperram_conf *)device->config;
1c009bac:	4140                	lw	s0,4(a0)
{
1c009bae:	892a                	mv	s2,a0
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c009bb0:	4541                	li	a0,16
{
1c009bb2:	de06                	sw	ra,60(sp)
1c009bb4:	da26                	sw	s1,52(sp)
1c009bb6:	d64e                	sw	s3,44(sp)
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c009bb8:	473010ef          	jal	ra,1c00b82a <pi_l2_malloc>
  if (hyperram == NULL)
1c009bbc:	c141                	beqz	a0,1c009c3c <hyperram_open+0x96>
  if (conf->reserve_addr_0)
1c009bbe:	501c                	lw	a5,32(s0)
  device->data = (void *)hyperram;
1c009bc0:	00a92423          	sw	a0,8(s2)
1c009bc4:	84aa                	mv	s1,a0
  int size = conf->ram_size;
1c009bc6:	4c10                	lw	a2,24(s0)
  uint32_t start_addr = 0;
1c009bc8:	4581                	li	a1,0
  if (conf->reserve_addr_0)
1c009bca:	c399                	beqz	a5,1c009bd0 <hyperram_open+0x2a>
    size -= 4;
1c009bcc:	1671                	addi	a2,a2,-4
    start_addr = 4;
1c009bce:	4591                	li	a1,4
  if (extern_alloc_init(&hyperram->alloc, (void *)start_addr, size))
1c009bd0:	00c48993          	addi	s3,s1,12
1c009bd4:	854e                	mv	a0,s3
1c009bd6:	2a6d                	jal	1c009d90 <extern_alloc_init>
1c009bd8:	e901                	bnez	a0,1c009be8 <hyperram_open+0x42>
  if (bsp_hyperram_open(conf))
1c009bda:	8522                	mv	a0,s0
1c009bdc:	142010ef          	jal	ra,1c00ad1e <bsp_hyperram_open>
1c009be0:	892a                	mv	s2,a0
1c009be2:	c909                	beqz	a0,1c009bf4 <hyperram_open+0x4e>
  extern_alloc_deinit(&hyperram->alloc);
1c009be4:	854e                	mv	a0,s3
1c009be6:	2af5                	jal	1c009de2 <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c009be8:	45c1                	li	a1,16
1c009bea:	8526                	mv	a0,s1
1c009bec:	44d010ef          	jal	ra,1c00b838 <pi_l2_free>
  return -2;
1c009bf0:	5979                	li	s2,-2
1c009bf2:	a82d                	j	1c009c2c <hyperram_open+0x86>
  pi_hyper_conf_init(&hyper_conf);
1c009bf4:	0048                	addi	a0,sp,4
1c009bf6:	487020ef          	jal	ra,1c00c87c <pi_hyper_conf_init>
  hyper_conf.burst_length = 4000;
1c009bfa:	6785                	lui	a5,0x1
1c009bfc:	fa078793          	addi	a5,a5,-96 # fa0 <__rt_stack_size+0x7a0>
1c009c00:	cc3e                	sw	a5,24(sp)
  hyper_conf.id = conf->hyper_itf;
1c009c02:	405c                	lw	a5,4(s0)
1c009c04:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c009c08:	441c                	lw	a5,8(s0)
1c009c0a:	c63e                	sw	a5,12(sp)
  hyper_conf.type = PI_HYPER_TYPE_RAM;
1c009c0c:	4785                	li	a5,1
1c009c0e:	c83e                	sw	a5,16(sp)
  hyper_conf.xip_en = conf->xip_en;
1c009c10:	481c                	lw	a5,16(s0)
1c009c12:	00f104a3          	sb	a5,9(sp)
  if (conf->baudrate)
1c009c16:	4c5c                	lw	a5,28(s0)
1c009c18:	c391                	beqz	a5,1c009c1c <hyperram_open+0x76>
      hyper_conf.baudrate = conf->baudrate;
1c009c1a:	ca3e                	sw	a5,20(sp)
  pi_open_from_conf(&hyperram->hyper_device, &hyper_conf);
1c009c1c:	8526                	mv	a0,s1
1c009c1e:	004c                	addi	a1,sp,4
1c009c20:	2de010ef          	jal	ra,1c00aefe <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperram->hyper_device);
1c009c24:	8526                	mv	a0,s1
1c009c26:	467020ef          	jal	ra,1c00c88c <pi_hyper_open>
  if (error)
1c009c2a:	fd4d                	bnez	a0,1c009be4 <hyperram_open+0x3e>
}
1c009c2c:	50f2                	lw	ra,60(sp)
1c009c2e:	5462                	lw	s0,56(sp)
1c009c30:	854a                	mv	a0,s2
1c009c32:	54d2                	lw	s1,52(sp)
1c009c34:	5942                	lw	s2,48(sp)
1c009c36:	59b2                	lw	s3,44(sp)
1c009c38:	6121                	addi	sp,sp,64
1c009c3a:	8082                	ret
      return -1;
1c009c3c:	597d                	li	s2,-1
1c009c3e:	b7fd                	j	1c009c2c <hyperram_open+0x86>

1c009c40 <pi_hyperram_conf_init>:
};


void pi_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram.api = &hyperram_api;
1c009c40:	1c00f737          	lui	a4,0x1c00f
1c009c44:	44070713          	addi	a4,a4,1088 # 1c00f440 <hyperram_api>
1c009c48:	c118                	sw	a4,0(a0)
  conf->baudrate = 0;
  conf->xip_en = 0;
  conf->reserve_addr_0 = 1;
1c009c4a:	4705                	li	a4,1
  conf->baudrate = 0;
1c009c4c:	00052e23          	sw	zero,28(a0)
  conf->xip_en = 0;
1c009c50:	00052823          	sw	zero,16(a0)
  conf->reserve_addr_0 = 1;
1c009c54:	d118                	sw	a4,32(a0)
  bsp_hyperram_conf_init(conf);
1c009c56:	0b00106f          	j	1c00ad06 <bsp_hyperram_conf_init>

1c009c5a <__pi_ram_cluster_req>:
}


void __pi_ram_conf_init(struct pi_ram_conf *conf)
{
}
1c009c5a:	832a                	mv	t1,a0
1c009c5c:	09f34783          	lbu	a5,159(t1)
1c009c60:	1c00ae37          	lui	t3,0x1c00a
1c009c64:	4108                	lw	a0,0(a0)
1c009c66:	00832583          	lw	a1,8(t1)
1c009c6a:	00432603          	lw	a2,4(t1)
1c009c6e:	00c32683          	lw	a3,12(t1)
1c009c72:	09e34803          	lbu	a6,158(t1)
1c009c76:	01830893          	addi	a7,t1,24
1c009c7a:	ccae0e13          	addi	t3,t3,-822 # 1c009cca <__pi_ram_cluster_req_done>
1c009c7e:	c78d                	beqz	a5,1c009ca8 <__pi_ram_cluster_req+0x4e>
1c009c80:	01c32e23          	sw	t3,28(t1)
1c009c84:	02030623          	sb	zero,44(t1)
1c009c88:	4e05                	li	t3,1
1c009c8a:	01032703          	lw	a4,16(t1)
1c009c8e:	01432783          	lw	a5,20(t1)
1c009c92:	02032823          	sw	zero,48(t1)
1c009c96:	02632023          	sw	t1,32(t1)
1c009c9a:	05c32023          	sw	t3,64(t1)
1c009c9e:	00052303          	lw	t1,0(a0)
1c009ca2:	00c32303          	lw	t1,12(t1)
1c009ca6:	8302                	jr	t1
1c009ca8:	4785                	li	a5,1
1c009caa:	02030623          	sb	zero,44(t1)
1c009cae:	04f32023          	sw	a5,64(t1)
1c009cb2:	411c                	lw	a5,0(a0)
1c009cb4:	02032823          	sw	zero,48(t1)
1c009cb8:	01c32e23          	sw	t3,28(t1)
1c009cbc:	02632023          	sw	t1,32(t1)
1c009cc0:	0087a303          	lw	t1,8(a5)
1c009cc4:	8742                	mv	a4,a6
1c009cc6:	87c6                	mv	a5,a7
1c009cc8:	8302                	jr	t1

1c009cca <__pi_ram_cluster_req_done>:
1c009cca:	09d54783          	lbu	a5,157(a0)
1c009cce:	4705                	li	a4,1
1c009cd0:	08e50e23          	sb	a4,156(a0)
1c009cd4:	04078793          	addi	a5,a5,64
1c009cd8:	00201737          	lui	a4,0x201
1c009cdc:	07da                	slli	a5,a5,0x16
1c009cde:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c009ce2:	0007e723          	p.sw	zero,a4(a5)
1c009ce6:	8082                	ret

1c009ce8 <pi_ram_open>:
1c009ce8:	415c                	lw	a5,4(a0)
1c009cea:	439c                	lw	a5,0(a5)
1c009cec:	0007a303          	lw	t1,0(a5)
1c009cf0:	c11c                	sw	a5,0(a0)
1c009cf2:	8302                	jr	t1

1c009cf4 <pi_cl_ram_copy>:
                 uint32_t pi_ram_addr, void *addr, uint32_t size, int ext2loc, pi_cl_ram_req_t *req)
{
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
1c009cf4:	c7d4                	sw	a3,12(a5)
    req->cid = pi_cluster_id();
    req->done = 0;
    req->ext2loc = ext2loc;
1c009cf6:	08e78f23          	sb	a4,158(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009cfa:	014026f3          	csrr	a3,uhartid
  task->arg[0] = (uint32_t)callback;
1c009cfe:	1c00a737          	lui	a4,0x1c00a
  return (hart_id >> 5) & 0x3f;
1c009d02:	8695                	srai	a3,a3,0x5
1c009d04:	c5a70713          	addi	a4,a4,-934 # 1c009c5a <__pi_ram_cluster_req>
1c009d08:	f266b6b3          	p.bclr	a3,a3,25,6
1c009d0c:	cfd8                	sw	a4,28(a5)
  task->implem.keep = 1;
1c009d0e:	4705                	li	a4,1
    req->device = device;
1c009d10:	c388                	sw	a0,0(a5)
    req->addr = addr;
1c009d12:	c3d0                	sw	a2,4(a5)
    req->pi_ram_addr = pi_ram_addr;
1c009d14:	c78c                	sw	a1,8(a5)
    req->cid = pi_cluster_id();
1c009d16:	08d78ea3          	sb	a3,157(a5)
    req->done = 0;
1c009d1a:	08078e23          	sb	zero,156(a5)
    req->is_2d = 0;
1c009d1e:	08078fa3          	sb	zero,159(a5)
  task->id = PI_TASK_CALLBACK_ID;
1c009d22:	0207a823          	sw	zero,48(a5)
  task->arg[1] = (uint32_t)arg;
1c009d26:	d39c                	sw	a5,32(a5)
  task->implem.keep = 1;
1c009d28:	c3b8                	sw	a4,64(a5)
1c009d2a:	02078623          	sb	zero,44(a5)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c009d2e:	01878513          	addi	a0,a5,24
1c009d32:	10d0106f          	j	1c00b63e <pi_cl_send_task_to_fc>

1c009d36 <pi_cl_ram_copy_2d>:
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
    req->stride = stride;
    req->length = length;
1c009d36:	00f8aa23          	sw	a5,20(a7)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009d3a:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c009d3e:	8795                	srai	a5,a5,0x5
1c009d40:	f267b7b3          	p.bclr	a5,a5,25,6
    req->cid = pi_cluster_id();
1c009d44:	08f88ea3          	sb	a5,157(a7)
    req->done = 0;
    req->ext2loc = ext2loc;
    req->is_2d = 1;
1c009d48:	4785                	li	a5,1
1c009d4a:	08f88fa3          	sb	a5,159(a7)
  task->arg[0] = (uint32_t)callback;
1c009d4e:	1c00a7b7          	lui	a5,0x1c00a
1c009d52:	c5a78793          	addi	a5,a5,-934 # 1c009c5a <__pi_ram_cluster_req>
1c009d56:	00f8ae23          	sw	a5,28(a7)
  task->implem.keep = 1;
1c009d5a:	4785                	li	a5,1
    req->device = device;
1c009d5c:	00a8a023          	sw	a0,0(a7)
    req->addr = addr;
1c009d60:	00c8a223          	sw	a2,4(a7)
    req->pi_ram_addr = pi_ram_addr;
1c009d64:	00b8a423          	sw	a1,8(a7)
    req->size = size;
1c009d68:	00d8a623          	sw	a3,12(a7)
    req->stride = stride;
1c009d6c:	00e8a823          	sw	a4,16(a7)
    req->done = 0;
1c009d70:	08088e23          	sb	zero,156(a7)
    req->ext2loc = ext2loc;
1c009d74:	09088f23          	sb	a6,158(a7)
  task->id = PI_TASK_CALLBACK_ID;
1c009d78:	0208a823          	sw	zero,48(a7)
  task->arg[1] = (uint32_t)arg;
1c009d7c:	0318a023          	sw	a7,32(a7)
  task->implem.keep = 1;
1c009d80:	04f8a023          	sw	a5,64(a7)
1c009d84:	02088623          	sb	zero,44(a7)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c009d88:	01888513          	addi	a0,a7,24
1c009d8c:	0b30106f          	j	1c00b63e <pi_cl_send_task_to_fc>

1c009d90 <extern_alloc_init>:
  }
  printf("=============================================\n");
}

int extern_alloc_init(extern_alloc_t *a, void *addr, int size)
{
1c009d90:	1101                	addi	sp,sp,-32
1c009d92:	ca26                	sw	s1,20(sp)
1c009d94:	ce06                	sw	ra,28(sp)
1c009d96:	cc22                	sw	s0,24(sp)
1c009d98:	84aa                	mv	s1,a0
  if (size)
1c009d9a:	ce1d                	beqz	a2,1c009dd8 <extern_alloc_init+0x48>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c009d9c:	4531                	li	a0,12
  {
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c009d9e:	00758413          	addi	s0,a1,7
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c009da2:	c62e                	sw	a1,12(sp)
1c009da4:	c432                	sw	a2,8(sp)
1c009da6:	285010ef          	jal	ra,1c00b82a <pi_l2_malloc>
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c009daa:	c4043433          	p.bclr	s0,s0,2,0
    alloc_chunk_extern_t *chunk = __alloc_chunk();
    if (chunk == NULL) return -1;
1c009dae:	45b2                	lw	a1,12(sp)
1c009db0:	4622                	lw	a2,8(sp)
1c009db2:	c515                	beqz	a0,1c009dde <extern_alloc_init+0x4e>
    size = size - (staaddr - (unsigned int)addr);
1c009db4:	95b2                	add	a1,a1,a2
1c009db6:	8d81                	sub	a1,a1,s0
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c009db8:	4601                	li	a2,0
    if (size > 0) {
1c009dba:	00b05963          	blez	a1,1c009dcc <extern_alloc_init+0x3c>
      a->first_free = chunk;
1c009dbe:	c088                	sw	a0,0(s1)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c009dc0:	c405b5b3          	p.bclr	a1,a1,2,0
1c009dc4:	c10c                	sw	a1,0(a0)
      chunk->next = NULL;
1c009dc6:	00052223          	sw	zero,4(a0)
      chunk->addr = staaddr;
1c009dca:	c500                	sw	s0,8(a0)
}
1c009dcc:	40f2                	lw	ra,28(sp)
1c009dce:	4462                	lw	s0,24(sp)
1c009dd0:	44d2                	lw	s1,20(sp)
1c009dd2:	8532                	mv	a0,a2
1c009dd4:	6105                	addi	sp,sp,32
1c009dd6:	8082                	ret
    a->first_free = NULL;
1c009dd8:	00052023          	sw	zero,0(a0)
1c009ddc:	bfc5                	j	1c009dcc <extern_alloc_init+0x3c>
    if (chunk == NULL) return -1;
1c009dde:	567d                	li	a2,-1
1c009de0:	b7f5                	j	1c009dcc <extern_alloc_init+0x3c>

1c009de2 <extern_alloc_deinit>:
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c009de2:	4108                	lw	a0,0(a0)
1c009de4:	45b1                	li	a1,12
1c009de6:	2530106f          	j	1c00b838 <pi_l2_free>

1c009dea <extern_alloc>:



int extern_alloc(extern_alloc_t *a, int size, void **chunk)
{
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c009dea:	411c                	lw	a5,0(a0)

  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c009dec:	059d                	addi	a1,a1,7
1c009dee:	c405b5b3          	p.bclr	a1,a1,2,0
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c009df2:	4681                	li	a3,0

  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c009df4:	c7b1                	beqz	a5,1c009e40 <extern_alloc+0x56>
1c009df6:	4398                	lw	a4,0(a5)
1c009df8:	02b74863          	blt	a4,a1,1c009e28 <extern_alloc+0x3e>
{
1c009dfc:	1141                	addi	sp,sp,-16
1c009dfe:	c226                	sw	s1,4(sp)
1c009e00:	c606                	sw	ra,12(sp)
1c009e02:	c422                	sw	s0,8(sp)
1c009e04:	4784                	lw	s1,8(a5)

  if (pt) {
    if (pt->size == size) {
1c009e06:	02b71663          	bne	a4,a1,1c009e32 <extern_alloc+0x48>
1c009e0a:	43d8                	lw	a4,4(a5)
      // Special case where the whole block disappears
      // This special case is interesting to support when we allocate aligned pages, to limit fragmentation
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c009e0c:	c28d                	beqz	a3,1c009e2e <extern_alloc+0x44>
1c009e0e:	c2d8                	sw	a4,4(a3)
1c009e10:	8432                	mv	s0,a2
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c009e12:	45b1                	li	a1,12
1c009e14:	853e                	mv	a0,a5
1c009e16:	223010ef          	jal	ra,1c00b838 <pi_l2_free>
      void *addr = (void *)pt->addr;
      __free_chunk(pt);
      *chunk = addr;
1c009e1a:	c004                	sw	s1,0(s0)
  } else {
    //warning("Not enough memory to allocate\n");
    *chunk = (void *)0xffffffff;
    return -1;
  }
}
1c009e1c:	40b2                	lw	ra,12(sp)
1c009e1e:	4422                	lw	s0,8(sp)
1c009e20:	4492                	lw	s1,4(sp)
      return 0;
1c009e22:	4501                	li	a0,0
}
1c009e24:	0141                	addi	sp,sp,16
1c009e26:	8082                	ret
  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c009e28:	86be                	mv	a3,a5
1c009e2a:	43dc                	lw	a5,4(a5)
1c009e2c:	b7e1                	j	1c009df4 <extern_alloc+0xa>
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c009e2e:	c118                	sw	a4,0(a0)
1c009e30:	b7c5                	j	1c009e10 <extern_alloc+0x26>
      pt->size = pt->size - size;
1c009e32:	40b706b3          	sub	a3,a4,a1
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c009e36:	9726                	add	a4,a4,s1
      pt->size = pt->size - size;
1c009e38:	c394                	sw	a3,0(a5)
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c009e3a:	8f0d                	sub	a4,a4,a1
      *chunk = result;
1c009e3c:	c218                	sw	a4,0(a2)
1c009e3e:	bff9                	j	1c009e1c <extern_alloc+0x32>
    *chunk = (void *)0xffffffff;
1c009e40:	57fd                	li	a5,-1
1c009e42:	c21c                	sw	a5,0(a2)
    return -1;
1c009e44:	557d                	li	a0,-1
}
1c009e46:	8082                	ret

1c009e48 <extern_free>:
  return 0;
}

int __attribute__((noinline)) extern_free(extern_alloc_t *a, int size, void *addr)

{
1c009e48:	7179                	addi	sp,sp,-48
1c009e4a:	d422                	sw	s0,40(sp)
  alloc_chunk_extern_t *chunk;
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c009e4c:	4100                	lw	s0,0(a0)
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c009e4e:	059d                	addi	a1,a1,7
{
1c009e50:	d226                	sw	s1,36(sp)
1c009e52:	d04a                	sw	s2,32(sp)
1c009e54:	ce4e                	sw	s3,28(sp)
1c009e56:	d606                	sw	ra,44(sp)
1c009e58:	89aa                	mv	s3,a0
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c009e5a:	c405b933          	p.bclr	s2,a1,2,0
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c009e5e:	4481                	li	s1,0

  while (next && next->addr < (unsigned int)addr) {
1c009e60:	c439                	beqz	s0,1c009eae <extern_free+0x66>
1c009e62:	441c                	lw	a5,8(s0)
1c009e64:	04c7e263          	bltu	a5,a2,1c009ea8 <extern_free+0x60>
    prev = next; next = next->next; 
  }

  if (next && ((char *)addr + size) == (char *)next->addr) {
1c009e68:	01260733          	add	a4,a2,s2
1c009e6c:	04f71163          	bne	a4,a5,1c009eae <extern_free+0x66>
    /* Coalesce with next */
    next->size = size + next->size;
1c009e70:	400c                	lw	a1,0(s0)
    next->addr = (unsigned int)addr;
1c009e72:	c410                	sw	a2,8(s0)
    next->size = size + next->size;
1c009e74:	992e                	add	s2,s2,a1
1c009e76:	01242023          	sw	s2,0(s0)
    chunk->size = size;
    chunk->next = next;
    chunk->addr = (unsigned int)addr;
  }

  if (prev) {
1c009e7a:	c8b1                	beqz	s1,1c009ece <extern_free+0x86>
    if (((char *)prev->addr + prev->size) == (char *)addr) {
1c009e7c:	4094                	lw	a3,0(s1)
1c009e7e:	4498                	lw	a4,8(s1)
1c009e80:	9736                	add	a4,a4,a3
1c009e82:	04e61463          	bne	a2,a4,1c009eca <extern_free+0x82>
      /* Coalesce with previous */
      prev->size += chunk->size;
1c009e86:	401c                	lw	a5,0(s0)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c009e88:	45b1                	li	a1,12
1c009e8a:	8522                	mv	a0,s0
      prev->size += chunk->size;
1c009e8c:	97b6                	add	a5,a5,a3
1c009e8e:	c09c                	sw	a5,0(s1)
      prev->next = chunk->next;
1c009e90:	405c                	lw	a5,4(s0)
1c009e92:	c0dc                	sw	a5,4(s1)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c009e94:	1a5010ef          	jal	ra,1c00b838 <pi_l2_free>
    }
  } else {
    a->first_free = chunk;
  }

  return 0;
1c009e98:	4501                	li	a0,0
}
1c009e9a:	50b2                	lw	ra,44(sp)
1c009e9c:	5422                	lw	s0,40(sp)
1c009e9e:	5492                	lw	s1,36(sp)
1c009ea0:	5902                	lw	s2,32(sp)
1c009ea2:	49f2                	lw	s3,28(sp)
1c009ea4:	6145                	addi	sp,sp,48
1c009ea6:	8082                	ret
    prev = next; next = next->next; 
1c009ea8:	84a2                	mv	s1,s0
1c009eaa:	4040                	lw	s0,4(s0)
1c009eac:	bf55                	j	1c009e60 <extern_free+0x18>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c009eae:	4531                	li	a0,12
1c009eb0:	c632                	sw	a2,12(sp)
1c009eb2:	179010ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c009eb6:	87aa                	mv	a5,a0
    if (chunk == NULL) return -1;
1c009eb8:	4632                	lw	a2,12(sp)
1c009eba:	557d                	li	a0,-1
1c009ebc:	dff9                	beqz	a5,1c009e9a <extern_free+0x52>
    chunk->next = next;
1c009ebe:	c3c0                	sw	s0,4(a5)
    chunk->size = size;
1c009ec0:	0127a023          	sw	s2,0(a5)
    chunk->addr = (unsigned int)addr;
1c009ec4:	c790                	sw	a2,8(a5)
1c009ec6:	843e                	mv	s0,a5
1c009ec8:	bf4d                	j	1c009e7a <extern_free+0x32>
      prev->next = chunk;
1c009eca:	c0c0                	sw	s0,4(s1)
1c009ecc:	b7f1                	j	1c009e98 <extern_free+0x50>
    a->first_free = chunk;
1c009ece:	0089a023          	sw	s0,0(s3)
1c009ed2:	b7d9                	j	1c009e98 <extern_free+0x50>

1c009ed4 <pi_partition_get_flash_offset>:
        return 0;
}

uint32_t pi_partition_get_flash_offset(const pi_partition_t *partition)
{
    if(partition)
1c009ed4:	c119                	beqz	a0,1c009eda <pi_partition_get_flash_offset+0x6>
        return partition->offset;
1c009ed6:	4548                	lw	a0,12(a0)
1c009ed8:	8082                	ret
    else
        return UINT32_MAX;
1c009eda:	557d                	li	a0,-1
}
1c009edc:	8082                	ret

1c009ede <pi_partition_table_free>:

void pi_partition_table_free(pi_partition_table_t table)
{
    flash_partition_table_free((flash_partition_table_t *) table);
1c009ede:	aaf1                	j	1c00a0ba <flash_partition_table_free>

1c009ee0 <pi_partition_table_load>:

pi_err_t pi_partition_table_load(pi_device_t *flash, const pi_partition_table_t *table)
{
    pi_err_t rc;
    
    rc = flash_partition_table_load(flash, (const flash_partition_table_t **) table, NULL);
1c009ee0:	4601                	li	a2,0
1c009ee2:	a8d1                	j	1c009fb6 <flash_partition_table_load>

1c009ee4 <pi_partition_find_first>:

const pi_partition_t *
pi_partition_find_first(const pi_partition_table_t table, const pi_partition_type_t type,
                        const pi_partition_subtype_t subtype,
                        const char *label)
{
1c009ee4:	1141                	addi	sp,sp,-16
1c009ee6:	c226                	sw	s1,4(sp)
1c009ee8:	c606                	sw	ra,12(sp)
1c009eea:	c422                	sw	s0,8(sp)
1c009eec:	84aa                	mv	s1,a0
    pi_partition_t *partition;
    const flash_partition_info_t *info;
    
    info = flash_partition_find_first((const flash_partition_table_t *) table, type, subtype, label);
1c009eee:	2ac5                	jal	1c00a0de <flash_partition_find_first>
    if(info == NULL)
1c009ef0:	c539                	beqz	a0,1c009f3e <pi_partition_find_first+0x5a>
1c009ef2:	842a                	mv	s0,a0
        return NULL;
    
    partition = pi_l2_malloc(sizeof(pi_partition_t));
1c009ef4:	02800513          	li	a0,40
1c009ef8:	133010ef          	jal	ra,1c00b82a <pi_l2_malloc>
    partition->type = info->type;
1c009efc:	00244783          	lbu	a5,2(s0)
    partition->subtype = info->subtype;
    partition->size = info->pos.size;
    partition->offset = info->pos.offset;
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c009f00:	4098                	lw	a4,0(s1)
    partition->type = info->type;
1c009f02:	c15c                	sw	a5,4(a0)
    partition->subtype = info->subtype;
1c009f04:	00344783          	lbu	a5,3(s0)
1c009f08:	c51c                	sw	a5,8(a0)
    partition->size = info->pos.size;
1c009f0a:	441c                	lw	a5,8(s0)
1c009f0c:	c91c                	sw	a5,16(a0)
    partition->offset = info->pos.offset;
1c009f0e:	405c                	lw	a5,4(s0)
1c009f10:	c55c                	sw	a5,12(a0)
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c009f12:	87aa                	mv	a5,a0
1c009f14:	00e7aa2b          	p.sw	a4,20(a5!)
    memcpy(partition->label, info->label, 16);
1c009f18:	4458                	lw	a4,12(s0)
1c009f1a:	c398                	sw	a4,0(a5)
1c009f1c:	481c                	lw	a5,16(s0)
1c009f1e:	cd1c                	sw	a5,24(a0)
1c009f20:	485c                	lw	a5,20(s0)
1c009f22:	cd5c                	sw	a5,28(a0)
1c009f24:	4c1c                	lw	a5,24(s0)
    partition->label[16] = 0;
1c009f26:	02050223          	sb	zero,36(a0)
    partition->encrypted = false;
1c009f2a:	020502a3          	sb	zero,37(a0)
    memcpy(partition->label, info->label, 16);
1c009f2e:	d11c                	sw	a5,32(a0)
    partition->read_only = false;
1c009f30:	02050323          	sb	zero,38(a0)
    
    return (const pi_partition_t *) partition;
}
1c009f34:	40b2                	lw	ra,12(sp)
1c009f36:	4422                	lw	s0,8(sp)
1c009f38:	4492                	lw	s1,4(sp)
1c009f3a:	0141                	addi	sp,sp,16
1c009f3c:	8082                	ret
        return NULL;
1c009f3e:	4501                	li	a0,0
1c009f40:	bfd5                	j	1c009f34 <pi_partition_find_first+0x50>

1c009f42 <flash_partition_table_verify>:

pi_err_t flash_partition_table_verify(const flash_partition_table_t *table)
{
    const flash_partition_info_t *part;
    const flash_partition_table_header_t *header = &table->header;
    const flash_partition_info_t *partition_table = table->partitions;
1c009f42:	514c                	lw	a1,36(a0)
    MD5_CTX context;
    uint8_t digest[16];

    // Check magic number for each partition
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c009f44:	00754683          	lbu	a3,7(a0)
1c009f48:	4781                	li	a5,0
1c009f4a:	872e                	mv	a4,a1
    {
        part = partition_table + num_parts;
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c009f4c:	1ba00613          	li	a2,442
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c009f50:	04f69663          	bne	a3,a5,1c009f9c <flash_partition_table_verify+0x5a>
        {
            return PI_ERR_INVALID_STATE;
        }
    }

    if (header->crc_flags)
1c009f54:	00854783          	lbu	a5,8(a0)
1c009f58:	cfa9                	beqz	a5,1c009fb2 <flash_partition_table_verify+0x70>
{
1c009f5a:	7155                	addi	sp,sp,-208
1c009f5c:	c5a2                	sw	s0,200(sp)
1c009f5e:	842a                	mv	s0,a0
    {
        MD5_Init(&context);
1c009f60:	1028                	addi	a0,sp,40
{
1c009f62:	c786                	sw	ra,204(sp)
        MD5_Init(&context);
1c009f64:	c62e                	sw	a1,12(sp)
1c009f66:	2bb000ef          	jal	ra,1c00aa20 <MD5_Init>
        MD5_Update(&context, (unsigned char *) partition_table,
                   header->nbr_of_entries * sizeof(flash_partition_info_t));
1c009f6a:	00744603          	lbu	a2,7(s0)
        MD5_Update(&context, (unsigned char *) partition_table,
1c009f6e:	45b2                	lw	a1,12(sp)
1c009f70:	1028                	addi	a0,sp,40
1c009f72:	0616                	slli	a2,a2,0x5
1c009f74:	2df000ef          	jal	ra,1c00aa52 <MD5_Update>
        MD5_Final(digest, &context);
1c009f78:	102c                	addi	a1,sp,40
1c009f7a:	0828                	addi	a0,sp,24
1c009f7c:	373000ef          	jal	ra,1c00aaee <MD5_Final>

        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c009f80:	4641                	li	a2,16
1c009f82:	082c                	addi	a1,sp,24
1c009f84:	01440513          	addi	a0,s0,20
1c009f88:	66e030ef          	jal	ra,1c00d5f6 <strncmp>
        {
            return PI_ERR_INVALID_CRC;
1c009f8c:	47a1                	li	a5,8
        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c009f8e:	e111                	bnez	a0,1c009f92 <flash_partition_table_verify+0x50>
        }
    }

    return PI_OK;
1c009f90:	4781                	li	a5,0
}
1c009f92:	40be                	lw	ra,204(sp)
1c009f94:	442e                	lw	s0,200(sp)
1c009f96:	853e                	mv	a0,a5
1c009f98:	6169                	addi	sp,sp,208
1c009f9a:	8082                	ret
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c009f9c:	0207580b          	p.lhu	a6,32(a4!)
1c009fa0:	00c81663          	bne	a6,a2,1c009fac <flash_partition_table_verify+0x6a>
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c009fa4:	0785                	addi	a5,a5,1
1c009fa6:	0ff7f793          	andi	a5,a5,255
1c009faa:	b75d                	j	1c009f50 <flash_partition_table_verify+0xe>
            return PI_ERR_INVALID_STATE;
1c009fac:	478d                	li	a5,3
}
1c009fae:	853e                	mv	a0,a5
1c009fb0:	8082                	ret
    return PI_OK;
1c009fb2:	4781                	li	a5,0
1c009fb4:	bfed                	j	1c009fae <flash_partition_table_verify+0x6c>

1c009fb6 <flash_partition_table_load>:

pi_err_t flash_partition_table_load(pi_device_t *flash, const flash_partition_table_t **partition_table,
                                    uint8_t *nbr_of_entries)
{
1c009fb6:	1101                	addi	sp,sp,-32
1c009fb8:	ca26                	sw	s1,20(sp)
1c009fba:	ce06                	sw	ra,28(sp)
1c009fbc:	cc22                	sw	s0,24(sp)
1c009fbe:	c84a                	sw	s2,16(sp)
1c009fc0:	c64e                	sw	s3,12(sp)
1c009fc2:	c452                	sw	s4,8(sp)
1c009fc4:	c256                	sw	s5,4(sp)
    flash_partition_info_t *partitions = NULL;

    if(partition_table == NULL)
    {
        PARTITION_TRACE_ERR("Table argument is NULL");
        return PI_ERR_INVALID_ARG;
1c009fc6:	4489                	li	s1,2
    if(partition_table == NULL)
1c009fc8:	c9e1                	beqz	a1,1c00a098 <flash_partition_table_load+0xe2>
1c009fca:	892a                	mv	s2,a0
    }

// Alloc table containing header
    table = pi_l2_malloc(sizeof(*table));
1c009fcc:	02800513          	li	a0,40
1c009fd0:	89b2                	mv	s3,a2
1c009fd2:	8aae                	mv	s5,a1
1c009fd4:	057010ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c009fd8:	842a                	mv	s0,a0
    if(table == NULL)
    {
        PARTITION_TRACE_ERR("Unable to allocate partition table in L2.");
        rc = PI_ERR_L2_NO_MEM;
1c009fda:	20100493          	li	s1,513
    if(table == NULL)
1c009fde:	cd4d                	beqz	a0,1c00a098 <flash_partition_table_load+0xe2>
        goto mount_error;
    }

    table_offset_l2 = pi_l2_malloc(sizeof(*table_offset_l2));
1c009fe0:	4511                	li	a0,4
1c009fe2:	049010ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c009fe6:	84aa                	mv	s1,a0
    if(table_offset_l2 == NULL)
1c009fe8:	c171                	beqz	a0,1c00a0ac <flash_partition_table_load+0xf6>
  api->read(device, pi_flash_addr, data, size);
1c009fea:	00092783          	lw	a5,0(s2)
1c009fee:	862a                	mv	a2,a0
1c009ff0:	4581                	li	a1,0
1c009ff2:	5b9c                	lw	a5,48(a5)
1c009ff4:	4691                	li	a3,4
1c009ff6:	854a                	mv	a0,s2
1c009ff8:	9782                	jalr	a5
        rc = PI_ERR_L2_NO_MEM;
        goto mount_error;
    }

    pi_flash_read(flash, 0, table_offset_l2, 4);
    if(*table_offset_l2 == 0)
1c009ffa:	0004aa03          	lw	s4,0(s1)

    return PI_OK;

    mount_error:
    if(table_offset_l2)
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c009ffe:	4591                	li	a1,4
1c00a000:	8526                	mv	a0,s1
    if(*table_offset_l2 == 0)
1c00a002:	0a0a0863          	beqz	s4,1c00a0b2 <flash_partition_table_load+0xfc>
    pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00a006:	033010ef          	jal	ra,1c00b838 <pi_l2_free>
1c00a00a:	00092783          	lw	a5,0(s2)
1c00a00e:	02000693          	li	a3,32
1c00a012:	00440613          	addi	a2,s0,4
1c00a016:	5b9c                	lw	a5,48(a5)
1c00a018:	85d2                	mv	a1,s4
1c00a01a:	854a                	mv	a0,s2
1c00a01c:	9782                	jalr	a5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c00a01e:	00445703          	lhu	a4,4(s0)
1c00a022:	2ba00793          	li	a5,698
        rc = PI_ERR_NOT_FOUND;
1c00a026:	4495                	li	s1,5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c00a028:	04f71763          	bne	a4,a5,1c00a076 <flash_partition_table_load+0xc0>
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c00a02c:	00644783          	lbu	a5,6(s0)
        rc = PI_ERR_INVALID_VERSION;
1c00a030:	44a5                	li	s1,9
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c00a032:	0417b263          	p.bneimm	a5,1,1c00a076 <flash_partition_table_load+0xc0>
    table->partitions = pi_l2_malloc(sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a036:	00744503          	lbu	a0,7(s0)
1c00a03a:	0516                	slli	a0,a0,0x5
1c00a03c:	7ee010ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c00a040:	d048                	sw	a0,36(s0)
1c00a042:	862a                	mv	a2,a0
    if(table->partitions == NULL)
1c00a044:	c525                	beqz	a0,1c00a0ac <flash_partition_table_load+0xf6>
1c00a046:	00092783          	lw	a5,0(s2)
                  sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a04a:	00744683          	lbu	a3,7(s0)
1c00a04e:	020a0593          	addi	a1,s4,32
1c00a052:	5b9c                	lw	a5,48(a5)
1c00a054:	0696                	slli	a3,a3,0x5
1c00a056:	854a                	mv	a0,s2
1c00a058:	9782                	jalr	a5
    if(table->header.crc_flags)
1c00a05a:	00844783          	lbu	a5,8(s0)
1c00a05e:	c395                	beqz	a5,1c00a082 <flash_partition_table_load+0xcc>
        rc = flash_partition_table_verify(table);
1c00a060:	8522                	mv	a0,s0
1c00a062:	ee1ff0ef          	jal	ra,1c009f42 <flash_partition_table_verify>
1c00a066:	84aa                	mv	s1,a0
        if(rc != PI_OK)
1c00a068:	cd09                	beqz	a0,1c00a082 <flash_partition_table_load+0xcc>
            pi_l2_free(table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a06a:	00744583          	lbu	a1,7(s0)
1c00a06e:	5048                	lw	a0,36(s0)
1c00a070:	0596                	slli	a1,a1,0x5
1c00a072:	7c6010ef          	jal	ra,1c00b838 <pi_l2_free>
    if(table)
        pi_l2_free(table, sizeof(*table));
1c00a076:	02800593          	li	a1,40
1c00a07a:	8522                	mv	a0,s0
1c00a07c:	7bc010ef          	jal	ra,1c00b838 <pi_l2_free>
1c00a080:	a821                	j	1c00a098 <flash_partition_table_load+0xe2>
    table->flash = flash;
1c00a082:	01242023          	sw	s2,0(s0)
    *partition_table = table;
1c00a086:	008aa023          	sw	s0,0(s5)
    return PI_OK;
1c00a08a:	4481                	li	s1,0
    if(nbr_of_entries)
1c00a08c:	00098663          	beqz	s3,1c00a098 <flash_partition_table_load+0xe2>
        *nbr_of_entries = table->header.nbr_of_entries;
1c00a090:	00744783          	lbu	a5,7(s0)
1c00a094:	00f98023          	sb	a5,0(s3)
    return rc;
}
1c00a098:	40f2                	lw	ra,28(sp)
1c00a09a:	4462                	lw	s0,24(sp)
1c00a09c:	8526                	mv	a0,s1
1c00a09e:	4942                	lw	s2,16(sp)
1c00a0a0:	44d2                	lw	s1,20(sp)
1c00a0a2:	49b2                	lw	s3,12(sp)
1c00a0a4:	4a22                	lw	s4,8(sp)
1c00a0a6:	4a92                	lw	s5,4(sp)
1c00a0a8:	6105                	addi	sp,sp,32
1c00a0aa:	8082                	ret
        rc = PI_ERR_L2_NO_MEM;
1c00a0ac:	20100493          	li	s1,513
1c00a0b0:	b7d9                	j	1c00a076 <flash_partition_table_load+0xc0>
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00a0b2:	786010ef          	jal	ra,1c00b838 <pi_l2_free>
        rc = PI_ERR_NOT_FOUND;
1c00a0b6:	4495                	li	s1,5
1c00a0b8:	bf7d                	j	1c00a076 <flash_partition_table_load+0xc0>

1c00a0ba <flash_partition_table_free>:

void flash_partition_table_free(const flash_partition_table_t *table)
{
1c00a0ba:	1141                	addi	sp,sp,-16
1c00a0bc:	c422                	sw	s0,8(sp)
1c00a0be:	c606                	sw	ra,12(sp)
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a0c0:	00754583          	lbu	a1,7(a0)
{
1c00a0c4:	842a                	mv	s0,a0
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00a0c6:	5148                	lw	a0,36(a0)
1c00a0c8:	0596                	slli	a1,a1,0x5
1c00a0ca:	76e010ef          	jal	ra,1c00b838 <pi_l2_free>
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00a0ce:	8522                	mv	a0,s0
}
1c00a0d0:	4422                	lw	s0,8(sp)
1c00a0d2:	40b2                	lw	ra,12(sp)
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00a0d4:	02800593          	li	a1,40
}
1c00a0d8:	0141                	addi	sp,sp,16
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00a0da:	75e0106f          	j	1c00b838 <pi_l2_free>

1c00a0de <flash_partition_find_first>:


const flash_partition_info_t *flash_partition_find_first(const flash_partition_table_t *table, pi_partition_type_t type,
                                                         pi_partition_subtype_t subtype, const char *label)
{
1c00a0de:	7179                	addi	sp,sp,-48
1c00a0e0:	d226                	sw	s1,36(sp)
1c00a0e2:	d04a                	sw	s2,32(sp)
1c00a0e4:	cc52                	sw	s4,24(sp)
1c00a0e6:	ca56                	sw	s5,20(sp)
1c00a0e8:	d606                	sw	ra,44(sp)
1c00a0ea:	d422                	sw	s0,40(sp)
1c00a0ec:	ce4e                	sw	s3,28(sp)
    const flash_partition_info_t *part = NULL;

    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c00a0ee:	00754983          	lbu	s3,7(a0)
{
1c00a0f2:	892a                	mv	s2,a0
1c00a0f4:	8a2e                	mv	s4,a1
1c00a0f6:	8ab2                	mv	s5,a2
    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c00a0f8:	4481                	li	s1,0
1c00a0fa:	0ff4f793          	andi	a5,s1,255
1c00a0fe:	0137ed63          	bltu	a5,s3,1c00a118 <flash_partition_find_first+0x3a>
        if(label == NULL)
            return part;
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
            return part;
    }
    return NULL;
1c00a102:	4401                	li	s0,0
}
1c00a104:	8522                	mv	a0,s0
1c00a106:	50b2                	lw	ra,44(sp)
1c00a108:	5422                	lw	s0,40(sp)
1c00a10a:	5492                	lw	s1,36(sp)
1c00a10c:	5902                	lw	s2,32(sp)
1c00a10e:	49f2                	lw	s3,28(sp)
1c00a110:	4a62                	lw	s4,24(sp)
1c00a112:	4ad2                	lw	s5,20(sp)
1c00a114:	6145                	addi	sp,sp,48
1c00a116:	8082                	ret
        part = table->partitions + i;
1c00a118:	02492783          	lw	a5,36(s2)
1c00a11c:	00549413          	slli	s0,s1,0x5
1c00a120:	943e                	add	s0,s0,a5
        if(part->type != type || part->subtype != subtype)
1c00a122:	00244783          	lbu	a5,2(s0)
1c00a126:	03479063          	bne	a5,s4,1c00a146 <flash_partition_find_first+0x68>
1c00a12a:	00344783          	lbu	a5,3(s0)
1c00a12e:	01579c63          	bne	a5,s5,1c00a146 <flash_partition_find_first+0x68>
        if(label == NULL)
1c00a132:	dae9                	beqz	a3,1c00a104 <flash_partition_find_first+0x26>
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
1c00a134:	8536                	mv	a0,a3
1c00a136:	4641                	li	a2,16
1c00a138:	00c40593          	addi	a1,s0,12
1c00a13c:	c636                	sw	a3,12(sp)
1c00a13e:	4b8030ef          	jal	ra,1c00d5f6 <strncmp>
1c00a142:	46b2                	lw	a3,12(sp)
1c00a144:	d161                	beqz	a0,1c00a104 <flash_partition_find_first+0x26>
1c00a146:	0485                	addi	s1,s1,1
1c00a148:	bf4d                	j	1c00a0fa <flash_partition_find_first+0x1c>

1c00a14a <body>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c00a14a:	715d                	addi	sp,sp,-80
	MD5_u32plus a, b, c, d;
	MD5_u32plus saved_a, saved_b, saved_c, saved_d;

	ptr = (const unsigned char *)data;

	a = ctx->a;
1c00a14c:	00852283          	lw	t0,8(a0)
1c00a150:	fc060613          	addi	a2,a2,-64
{
1c00a154:	de52                	sw	s4,60(sp)
1c00a156:	dc56                	sw	s5,56(sp)
1c00a158:	8219                	srli	a2,a2,0x6
	b = ctx->b;
1c00a15a:	00c52803          	lw	a6,12(a0)
	c = ctx->c;
1c00a15e:	01052a03          	lw	s4,16(a0)
	d = ctx->d;
1c00a162:	01452a83          	lw	s5,20(a0)
1c00a166:	0605                	addi	a2,a2,1
{
1c00a168:	c6a2                	sw	s0,76(sp)
1c00a16a:	c4a6                	sw	s1,72(sp)
1c00a16c:	c2ca                	sw	s2,68(sp)
1c00a16e:	c0ce                	sw	s3,64(sp)
1c00a170:	da5a                	sw	s6,52(sp)
1c00a172:	d85e                	sw	s7,48(sp)
1c00a174:	d662                	sw	s8,44(sp)
1c00a176:	d466                	sw	s9,40(sp)
1c00a178:	d26a                	sw	s10,36(sp)
1c00a17a:	d06e                	sw	s11,32(sp)
1c00a17c:	87aa                	mv	a5,a0
	a = ctx->a;
1c00a17e:	cc16                	sw	t0,24(sp)
1c00a180:	ce32                	sw	a2,28(sp)
1c00a182:	4362                	lw	t1,24(sp)
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c00a184:	0005a983          	lw	s3,0(a1)
1c00a188:	d76aa537          	lui	a0,0xd76aa
1c00a18c:	47850513          	addi	a0,a0,1144 # d76aa478 <pulp__FC+0xd76aa479>
1c00a190:	00a30733          	add	a4,t1,a0
1c00a194:	013706b3          	add	a3,a4,s3
1c00a198:	015a4733          	xor	a4,s4,s5
1c00a19c:	01077733          	and	a4,a4,a6
1c00a1a0:	0537ac23          	sw	s3,88(a5)
1c00a1a4:	01574733          	xor	a4,a4,s5
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00a1a8:	41d0                	lw	a2,4(a1)
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c00a1aa:	9736                	add	a4,a4,a3
1c00a1ac:	e8c7b6b7          	lui	a3,0xe8c7b
1c00a1b0:	4365                	li	t1,25
1c00a1b2:	75668693          	addi	a3,a3,1878 # e8c7b756 <pulp__FC+0xe8c7b757>
1c00a1b6:	00da8e33          	add	t3,s5,a3
1c00a1ba:	08675733          	p.ror	a4,a4,t1
1c00a1be:	9742                	add	a4,a4,a6
1c00a1c0:	00ce06b3          	add	a3,t3,a2
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00a1c4:	01484e33          	xor	t3,a6,s4
1c00a1c8:	cff0                	sw	a2,92(a5)
1c00a1ca:	00ee7e33          	and	t3,t3,a4
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a1ce:	0085a883          	lw	a7,8(a1)
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00a1d2:	014e4e33          	xor	t3,t3,s4
1c00a1d6:	24207bb7          	lui	s7,0x24207
1c00a1da:	4d51                	li	s10,20
1c00a1dc:	9e36                	add	t3,t3,a3
1c00a1de:	0dbb8b93          	addi	s7,s7,219 # 242070db <__l2_end+0x81f772f>
1c00a1e2:	017a0533          	add	a0,s4,s7
1c00a1e6:	09ae5e33          	p.ror	t3,t3,s10
1c00a1ea:	9e3a                	add	t3,t3,a4
1c00a1ec:	011506b3          	add	a3,a0,a7
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a1f0:	00e84533          	xor	a0,a6,a4
1c00a1f4:	0717a023          	sw	a7,96(a5)
1c00a1f8:	01c57533          	and	a0,a0,t3
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00a1fc:	00c5a283          	lw	t0,12(a1)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a200:	01054533          	xor	a0,a0,a6
1c00a204:	c1bddc37          	lui	s8,0xc1bdd
1c00a208:	4cbd                	li	s9,15
1c00a20a:	9536                	add	a0,a0,a3
1c00a20c:	eeec0c13          	addi	s8,s8,-274 # c1bdceee <pulp__FC+0xc1bdceef>
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00a210:	c432                	sw	a2,8(sp)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a212:	09955533          	p.ror	a0,a0,s9
1c00a216:	01880633          	add	a2,a6,s8
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00a21a:	0657a223          	sw	t0,100(a5)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a21e:	9572                	add	a0,a0,t3
1c00a220:	005606b3          	add	a3,a2,t0
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00a224:	01c74633          	xor	a2,a4,t3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00a228:	0105ad83          	lw	s11,16(a1)
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00a22c:	8e69                	and	a2,a2,a0
1c00a22e:	8e39                	xor	a2,a2,a4
1c00a230:	f57c1eb7          	lui	t4,0xf57c1
1c00a234:	4c29                	li	s8,10
1c00a236:	9636                	add	a2,a2,a3
1c00a238:	fafe8e93          	addi	t4,t4,-81 # f57c0faf <pulp__FC+0xf57c0fb0>
1c00a23c:	01dd86b3          	add	a3,s11,t4
1c00a240:	09865633          	p.ror	a2,a2,s8
1c00a244:	962a                	add	a2,a2,a0
1c00a246:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00a248:	00ae46b3          	xor	a3,t3,a0
1c00a24c:	07b7a423          	sw	s11,104(a5)
1c00a250:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00a252:	49c0                	lw	s0,20(a1)
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00a254:	01c6c6b3          	xor	a3,a3,t3
1c00a258:	9736                	add	a4,a4,a3
1c00a25a:	4787c6b7          	lui	a3,0x4787c
1c00a25e:	62a68693          	addi	a3,a3,1578 # 4787c62a <__l2_end+0x2b86cc7e>
1c00a262:	00d40fb3          	add	t6,s0,a3
1c00a266:	08675733          	p.ror	a4,a4,t1
1c00a26a:	9732                	add	a4,a4,a2
1c00a26c:	9e7e                	add	t3,t3,t6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00a26e:	00c54fb3          	xor	t6,a0,a2
1c00a272:	00efffb3          	and	t6,t6,a4
1c00a276:	d7e0                	sw	s0,108(a5)
1c00a278:	00afcfb3          	xor	t6,t6,a0
1c00a27c:	9ff2                	add	t6,t6,t3
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a27e:	0185ae03          	lw	t3,24(a1)
1c00a282:	a8304bb7          	lui	s7,0xa8304
1c00a286:	613b8b93          	addi	s7,s7,1555 # a8304613 <pulp__FC+0xa8304614>
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00a28a:	c646                	sw	a7,12(sp)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00a28c:	09afdfb3          	p.ror	t6,t6,s10
1c00a290:	017e08b3          	add	a7,t3,s7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a294:	07c7a823          	sw	t3,112(a5)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00a298:	9fba                	add	t6,t6,a4
1c00a29a:	9546                	add	a0,a0,a7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a29c:	00e648b3          	xor	a7,a2,a4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00a2a0:	01c5a903          	lw	s2,28(a1)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a2a4:	01f8f8b3          	and	a7,a7,t6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00a2a8:	c86e                	sw	s11,16(sp)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a2aa:	00c8c8b3          	xor	a7,a7,a2
1c00a2ae:	fd469db7          	lui	s11,0xfd469
1c00a2b2:	98aa                	add	a7,a7,a0
1c00a2b4:	501d8d93          	addi	s11,s11,1281 # fd469501 <pulp__FC+0xfd469502>
1c00a2b8:	01b906b3          	add	a3,s2,s11
1c00a2bc:	0998d8b3          	p.ror	a7,a7,s9
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00a2c0:	0727aa23          	sw	s2,116(a5)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00a2c4:	98fe                	add	a7,a7,t6
1c00a2c6:	9636                	add	a2,a2,a3
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00a2c8:	01f746b3          	xor	a3,a4,t6
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00a2cc:	0205af03          	lw	t5,32(a1)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00a2d0:	0116f6b3          	and	a3,a3,a7
1c00a2d4:	8eb9                	xor	a3,a3,a4
1c00a2d6:	6980aeb7          	lui	t4,0x6980a
1c00a2da:	9636                	add	a2,a2,a3
1c00a2dc:	8d8e8e93          	addi	t4,t4,-1832 # 698098d8 <__l2_end+0x4d7f9f2c>
1c00a2e0:	01df06b3          	add	a3,t5,t4
1c00a2e4:	09865633          	p.ror	a2,a2,s8
1c00a2e8:	9646                	add	a2,a2,a7
1c00a2ea:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00a2ec:	011fc6b3          	xor	a3,t6,a7
1c00a2f0:	07e7ac23          	sw	t5,120(a5)
1c00a2f4:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00a2f6:	51c8                	lw	a0,36(a1)
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00a2f8:	01f6c6b3          	xor	a3,a3,t6
1c00a2fc:	96ba                	add	a3,a3,a4
1c00a2fe:	8b44f737          	lui	a4,0x8b44f
1c00a302:	7af70713          	addi	a4,a4,1967 # 8b44f7af <pulp__FC+0x8b44f7b0>
1c00a306:	00e504b3          	add	s1,a0,a4
1c00a30a:	0866d6b3          	p.ror	a3,a3,t1
1c00a30e:	96b2                	add	a3,a3,a2
1c00a310:	9fa6                	add	t6,t6,s1
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00a312:	00c8c4b3          	xor	s1,a7,a2
1c00a316:	8cf5                	and	s1,s1,a3
1c00a318:	dfe8                	sw	a0,124(a5)
1c00a31a:	0114c4b3          	xor	s1,s1,a7
1c00a31e:	94fe                	add	s1,s1,t6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00a320:	0285af83          	lw	t6,40(a1)
1c00a324:	7bd9                	lui	s7,0xffff6
1c00a326:	bb1b8b93          	addi	s7,s7,-1103 # ffff5bb1 <pulp__FC+0xffff5bb2>
1c00a32a:	017f8eb3          	add	t4,t6,s7
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00a32e:	09a4d4b3          	p.ror	s1,s1,s10
1c00a332:	94b6                	add	s1,s1,a3
1c00a334:	98f6                	add	a7,a7,t4
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00a336:	00d64eb3          	xor	t4,a2,a3
1c00a33a:	009efeb3          	and	t4,t4,s1
1c00a33e:	09f7a023          	sw	t6,128(a5)
1c00a342:	00ceceb3          	xor	t4,t4,a2
1c00a346:	9ec6                	add	t4,t4,a7
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00a348:	02c5a883          	lw	a7,44(a1)
1c00a34c:	895cddb7          	lui	s11,0x895cd
1c00a350:	7bed8d93          	addi	s11,s11,1982 # 895cd7be <pulp__FC+0x895cd7bf>
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00a354:	ca2a                	sw	a0,20(sp)
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00a356:	099edeb3          	p.ror	t4,t4,s9
1c00a35a:	01b88533          	add	a0,a7,s11
1c00a35e:	9ea6                	add	t4,t4,s1
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00a360:	0917a223          	sw	a7,132(a5)
1c00a364:	962a                	add	a2,a2,a0
1c00a366:	0096c533          	xor	a0,a3,s1
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00a36a:	0305a383          	lw	t2,48(a1)
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00a36e:	01d57533          	and	a0,a0,t4
1c00a372:	8d35                	xor	a0,a0,a3
1c00a374:	6b901737          	lui	a4,0x6b901
1c00a378:	9532                	add	a0,a0,a2
1c00a37a:	12270713          	addi	a4,a4,290 # 6b901122 <__l2_end+0x4f8f1776>
1c00a37e:	00e38633          	add	a2,t2,a4
1c00a382:	09855533          	p.ror	a0,a0,s8
1c00a386:	9576                	add	a0,a0,t4
1c00a388:	96b2                	add	a3,a3,a2
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00a38a:	01d4c633          	xor	a2,s1,t4
1c00a38e:	8e69                	and	a2,a2,a0
1c00a390:	8e25                	xor	a2,a2,s1
1c00a392:	0877a423          	sw	t2,136(a5)
1c00a396:	96b2                	add	a3,a3,a2
1c00a398:	0866d6b3          	p.ror	a3,a3,t1
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00a39c:	0345a303          	lw	t1,52(a1)
1c00a3a0:	fd987db7          	lui	s11,0xfd987
1c00a3a4:	193d8d93          	addi	s11,s11,403 # fd987193 <pulp__FC+0xfd987194>
1c00a3a8:	01b30bb3          	add	s7,t1,s11
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00a3ac:	00d50733          	add	a4,a0,a3
1c00a3b0:	94de                	add	s1,s1,s7
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00a3b2:	00aecbb3          	xor	s7,t4,a0
1c00a3b6:	00ebfbb3          	and	s7,s7,a4
1c00a3ba:	01dbcbb3          	xor	s7,s7,t4
1c00a3be:	94de                	add	s1,s1,s7
1c00a3c0:	0867a623          	sw	t1,140(a5)
1c00a3c4:	09a4dbb3          	p.ror	s7,s1,s10
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00a3c8:	5d84                	lw	s1,56(a1)
1c00a3ca:	a6794637          	lui	a2,0xa6794
1c00a3ce:	38e60613          	addi	a2,a2,910 # a679438e <pulp__FC+0xa679438f>
1c00a3d2:	00c48b33          	add	s6,s1,a2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00a3d6:	9bba                	add	s7,s7,a4
1c00a3d8:	9eda                	add	t4,t4,s6
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00a3da:	00e54b33          	xor	s6,a0,a4
1c00a3de:	017b7b33          	and	s6,s6,s7
1c00a3e2:	00ab4b33          	xor	s6,s6,a0
1c00a3e6:	0897a823          	sw	s1,144(a5)
1c00a3ea:	9eda                	add	t4,t4,s6
1c00a3ec:	099edb33          	p.ror	s6,t4,s9
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00a3f0:	03c5ae83          	lw	t4,60(a1)
1c00a3f4:	49b416b7          	lui	a3,0x49b41
1c00a3f8:	82168693          	addi	a3,a3,-2015 # 49b40821 <__l2_end+0x2db30e75>
1c00a3fc:	00de8633          	add	a2,t4,a3
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00a400:	9b5e                	add	s6,s6,s7
1c00a402:	9532                	add	a0,a0,a2
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00a404:	01774633          	xor	a2,a4,s7
1c00a408:	01667633          	and	a2,a2,s6
1c00a40c:	8e39                	xor	a2,a2,a4
1c00a40e:	9532                	add	a0,a0,a2
1c00a410:	09855633          	p.ror	a2,a0,s8
1c00a414:	4c22                	lw	s8,8(sp)
1c00a416:	f61e2d37          	lui	s10,0xf61e2
1c00a41a:	562d0d13          	addi	s10,s10,1378 # f61e2562 <pulp__FC+0xf61e2563>
1c00a41e:	965a                	add	a2,a2,s6
1c00a420:	01ac06b3          	add	a3,s8,s10
1c00a424:	9736                	add	a4,a4,a3

/* Round 2 */
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
1c00a426:	00cb46b3          	xor	a3,s6,a2
1c00a42a:	0176f6b3          	and	a3,a3,s7
1c00a42e:	0166c6b3          	xor	a3,a3,s6
1c00a432:	4ded                	li	s11,27
1c00a434:	96ba                	add	a3,a3,a4
1c00a436:	c040b537          	lui	a0,0xc040b
1c00a43a:	09b6d6b3          	p.ror	a3,a3,s11
1c00a43e:	34050513          	addi	a0,a0,832 # c040b340 <pulp__FC+0xc040b341>
1c00a442:	96b2                	add	a3,a3,a2
1c00a444:	00ae0733          	add	a4,t3,a0
1c00a448:	9bba                	add	s7,s7,a4
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
1c00a44a:	00d64733          	xor	a4,a2,a3
1c00a44e:	01677733          	and	a4,a4,s6
1c00a452:	8f31                	xor	a4,a4,a2
1c00a454:	4d5d                	li	s10,23
1c00a456:	975e                	add	a4,a4,s7
1c00a458:	265e6bb7          	lui	s7,0x265e6
1c00a45c:	09a75733          	p.ror	a4,a4,s10
1c00a460:	a51b8b93          	addi	s7,s7,-1455 # 265e5a51 <__l2_end+0xa5d60a5>
1c00a464:	9736                	add	a4,a4,a3
1c00a466:	01788533          	add	a0,a7,s7
1c00a46a:	955a                	add	a0,a0,s6
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
1c00a46c:	00e6cb33          	xor	s6,a3,a4
1c00a470:	00cb7b33          	and	s6,s6,a2
1c00a474:	00db4b33          	xor	s6,s6,a3
1c00a478:	4cc9                	li	s9,18
1c00a47a:	9b2a                	add	s6,s6,a0
1c00a47c:	e9b6cc37          	lui	s8,0xe9b6c
1c00a480:	099b5b33          	p.ror	s6,s6,s9
1c00a484:	7aac0c13          	addi	s8,s8,1962 # e9b6c7aa <pulp__FC+0xe9b6c7ab>
1c00a488:	9b3a                	add	s6,s6,a4
1c00a48a:	01898533          	add	a0,s3,s8
1c00a48e:	962a                	add	a2,a2,a0
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
1c00a490:	01674533          	xor	a0,a4,s6
1c00a494:	8d75                	and	a0,a0,a3
1c00a496:	8d39                	xor	a0,a0,a4
1c00a498:	4c31                	li	s8,12
1c00a49a:	9532                	add	a0,a0,a2
1c00a49c:	d62f1bb7          	lui	s7,0xd62f1
1c00a4a0:	09855533          	p.ror	a0,a0,s8
1c00a4a4:	05db8b93          	addi	s7,s7,93 # d62f105d <pulp__FC+0xd62f105e>
1c00a4a8:	955a                	add	a0,a0,s6
1c00a4aa:	01740633          	add	a2,s0,s7
1c00a4ae:	96b2                	add	a3,a3,a2
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
1c00a4b0:	00ab4633          	xor	a2,s6,a0
1c00a4b4:	8e79                	and	a2,a2,a4
1c00a4b6:	01664633          	xor	a2,a2,s6
1c00a4ba:	96b2                	add	a3,a3,a2
1c00a4bc:	02441bb7          	lui	s7,0x2441
1c00a4c0:	09b6d6b3          	p.ror	a3,a3,s11
1c00a4c4:	453b8b93          	addi	s7,s7,1107 # 2441453 <__L2+0x23c1453>
1c00a4c8:	96aa                	add	a3,a3,a0
1c00a4ca:	017f8633          	add	a2,t6,s7
1c00a4ce:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
1c00a4d0:	00d54633          	xor	a2,a0,a3
1c00a4d4:	01667633          	and	a2,a2,s6
1c00a4d8:	8e29                	xor	a2,a2,a0
1c00a4da:	9732                	add	a4,a4,a2
1c00a4dc:	d8a1ebb7          	lui	s7,0xd8a1e
1c00a4e0:	09a75733          	p.ror	a4,a4,s10
1c00a4e4:	681b8b93          	addi	s7,s7,1665 # d8a1e681 <pulp__FC+0xd8a1e682>
1c00a4e8:	9736                	add	a4,a4,a3
1c00a4ea:	017e8633          	add	a2,t4,s7
1c00a4ee:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
1c00a4f0:	00e6c633          	xor	a2,a3,a4
1c00a4f4:	8e69                	and	a2,a2,a0
1c00a4f6:	8e35                	xor	a2,a2,a3
1c00a4f8:	4bc2                	lw	s7,16(sp)
1c00a4fa:	9b32                	add	s6,s6,a2
1c00a4fc:	e7d40637          	lui	a2,0xe7d40
1c00a500:	099b5b33          	p.ror	s6,s6,s9
1c00a504:	bc860613          	addi	a2,a2,-1080 # e7d3fbc8 <pulp__FC+0xe7d3fbc9>
1c00a508:	9b3a                	add	s6,s6,a4
1c00a50a:	965e                	add	a2,a2,s7
1c00a50c:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
1c00a50e:	01674633          	xor	a2,a4,s6
1c00a512:	8e75                	and	a2,a2,a3
1c00a514:	8e39                	xor	a2,a2,a4
1c00a516:	9532                	add	a0,a0,a2
1c00a518:	4652                	lw	a2,20(sp)
1c00a51a:	21e1dbb7          	lui	s7,0x21e1d
1c00a51e:	09855533          	p.ror	a0,a0,s8
1c00a522:	de6b8b93          	addi	s7,s7,-538 # 21e1cde6 <__l2_end+0x5e0d43a>
1c00a526:	955a                	add	a0,a0,s6
1c00a528:	9bb2                	add	s7,s7,a2
1c00a52a:	96de                	add	a3,a3,s7
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
1c00a52c:	00ab4bb3          	xor	s7,s6,a0
1c00a530:	00ebfbb3          	and	s7,s7,a4
1c00a534:	016bcbb3          	xor	s7,s7,s6
1c00a538:	9bb6                	add	s7,s7,a3
1c00a53a:	c3370637          	lui	a2,0xc3370
1c00a53e:	09bbdbb3          	p.ror	s7,s7,s11
1c00a542:	7d660613          	addi	a2,a2,2006 # c33707d6 <pulp__FC+0xc33707d7>
1c00a546:	9baa                	add	s7,s7,a0
1c00a548:	9626                	add	a2,a2,s1
1c00a54a:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
1c00a54c:	01754633          	xor	a2,a0,s7
1c00a550:	01667633          	and	a2,a2,s6
1c00a554:	8e29                	xor	a2,a2,a0
1c00a556:	963a                	add	a2,a2,a4
1c00a558:	f4d51737          	lui	a4,0xf4d51
1c00a55c:	09a65633          	p.ror	a2,a2,s10
1c00a560:	d8770713          	addi	a4,a4,-633 # f4d50d87 <pulp__FC+0xf4d50d88>
1c00a564:	965e                	add	a2,a2,s7
1c00a566:	9716                	add	a4,a4,t0
1c00a568:	9b3a                	add	s6,s6,a4
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
1c00a56a:	00cbc733          	xor	a4,s7,a2
1c00a56e:	8f69                	and	a4,a4,a0
1c00a570:	01774733          	xor	a4,a4,s7
1c00a574:	9b3a                	add	s6,s6,a4
1c00a576:	455a1737          	lui	a4,0x455a1
1c00a57a:	099b5b33          	p.ror	s6,s6,s9
1c00a57e:	4ed70713          	addi	a4,a4,1261 # 455a14ed <__l2_end+0x29591b41>
1c00a582:	9b32                	add	s6,s6,a2
1c00a584:	977a                	add	a4,a4,t5
1c00a586:	953a                	add	a0,a0,a4
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
1c00a588:	01664733          	xor	a4,a2,s6
1c00a58c:	01777733          	and	a4,a4,s7
1c00a590:	8f31                	xor	a4,a4,a2
1c00a592:	953a                	add	a0,a0,a4
1c00a594:	a9e3f6b7          	lui	a3,0xa9e3f
1c00a598:	09855533          	p.ror	a0,a0,s8
1c00a59c:	90568693          	addi	a3,a3,-1787 # a9e3e905 <pulp__FC+0xa9e3e906>
1c00a5a0:	955a                	add	a0,a0,s6
1c00a5a2:	969a                	add	a3,a3,t1
1c00a5a4:	9bb6                	add	s7,s7,a3
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
1c00a5a6:	00ab46b3          	xor	a3,s6,a0
1c00a5aa:	8ef1                	and	a3,a3,a2
1c00a5ac:	0166c6b3          	xor	a3,a3,s6
1c00a5b0:	9bb6                	add	s7,s7,a3
1c00a5b2:	09bbd6b3          	p.ror	a3,s7,s11
1c00a5b6:	4bb2                	lw	s7,12(sp)
1c00a5b8:	fcefa737          	lui	a4,0xfcefa
1c00a5bc:	3f870713          	addi	a4,a4,1016 # fcefa3f8 <pulp__FC+0xfcefa3f9>
1c00a5c0:	96aa                	add	a3,a3,a0
1c00a5c2:	975e                	add	a4,a4,s7
1c00a5c4:	963a                	add	a2,a2,a4
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
1c00a5c6:	00d54733          	xor	a4,a0,a3
1c00a5ca:	01677733          	and	a4,a4,s6
1c00a5ce:	8f29                	xor	a4,a4,a0
1c00a5d0:	963a                	add	a2,a2,a4
1c00a5d2:	09a65733          	p.ror	a4,a2,s10
1c00a5d6:	676f0637          	lui	a2,0x676f0
1c00a5da:	2d960613          	addi	a2,a2,729 # 676f02d9 <__l2_end+0x4b6e092d>
1c00a5de:	9736                	add	a4,a4,a3
1c00a5e0:	964a                	add	a2,a2,s2
1c00a5e2:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
1c00a5e4:	00e6c633          	xor	a2,a3,a4
1c00a5e8:	8e69                	and	a2,a2,a0
1c00a5ea:	8e35                	xor	a2,a2,a3
1c00a5ec:	9b32                	add	s6,s6,a2
1c00a5ee:	8d2a5637          	lui	a2,0x8d2a5
1c00a5f2:	099b5b33          	p.ror	s6,s6,s9
1c00a5f6:	c8a60613          	addi	a2,a2,-886 # 8d2a4c8a <pulp__FC+0x8d2a4c8b>
1c00a5fa:	9b3a                	add	s6,s6,a4
1c00a5fc:	961e                	add	a2,a2,t2
1c00a5fe:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
1c00a600:	01674633          	xor	a2,a4,s6
1c00a604:	8e75                	and	a2,a2,a3
1c00a606:	8e39                	xor	a2,a2,a4
1c00a608:	9532                	add	a0,a0,a2
1c00a60a:	09855533          	p.ror	a0,a0,s8
1c00a60e:	fffa4637          	lui	a2,0xfffa4
1c00a612:	955a                	add	a0,a0,s6
1c00a614:	94260613          	addi	a2,a2,-1726 # fffa3942 <pulp__FC+0xfffa3943>

/* Round 3 */
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
1c00a618:	00ab4bb3          	xor	s7,s6,a0
1c00a61c:	9622                	add	a2,a2,s0
1c00a61e:	96b2                	add	a3,a3,a2
1c00a620:	00ebc633          	xor	a2,s7,a4
1c00a624:	4cf1                	li	s9,28
1c00a626:	96b2                	add	a3,a3,a2
1c00a628:	8771f637          	lui	a2,0x8771f
1c00a62c:	0996d6b3          	p.ror	a3,a3,s9
1c00a630:	68160613          	addi	a2,a2,1665 # 8771f681 <pulp__FC+0x8771f682>
1c00a634:	96aa                	add	a3,a3,a0
1c00a636:	967a                	add	a2,a2,t5
1c00a638:	9732                	add	a4,a4,a2
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
1c00a63a:	00dbc633          	xor	a2,s7,a3
1c00a63e:	4c55                	li	s8,21
1c00a640:	963a                	add	a2,a2,a4
1c00a642:	09865633          	p.ror	a2,a2,s8
1c00a646:	6d9d6737          	lui	a4,0x6d9d6
1c00a64a:	9636                	add	a2,a2,a3
1c00a64c:	12270713          	addi	a4,a4,290 # 6d9d6122 <__l2_end+0x519c6776>
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
1c00a650:	00c6cd33          	xor	s10,a3,a2
1c00a654:	9746                	add	a4,a4,a7
1c00a656:	975a                	add	a4,a4,s6
1c00a658:	00ad4b33          	xor	s6,s10,a0
1c00a65c:	4bc1                	li	s7,16
1c00a65e:	975a                	add	a4,a4,s6
1c00a660:	fde54b37          	lui	s6,0xfde54
1c00a664:	09775733          	p.ror	a4,a4,s7
1c00a668:	80cb0b13          	addi	s6,s6,-2036 # fde5380c <pulp__FC+0xfde5380d>
1c00a66c:	9732                	add	a4,a4,a2
1c00a66e:	9b26                	add	s6,s6,s1
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
1c00a670:	00ed4d33          	xor	s10,s10,a4
1c00a674:	955a                	add	a0,a0,s6
1c00a676:	956a                	add	a0,a0,s10
1c00a678:	4b25                	li	s6,9
1c00a67a:	09655533          	p.ror	a0,a0,s6
1c00a67e:	953a                	add	a0,a0,a4
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00a680:	00a74d33          	xor	s10,a4,a0
1c00a684:	4da2                	lw	s11,8(sp)
1c00a686:	c06a                	sw	s10,0(sp)
1c00a688:	a4befd37          	lui	s10,0xa4bef
1c00a68c:	a44d0d13          	addi	s10,s10,-1468 # a4beea44 <pulp__FC+0xa4beea45>
1c00a690:	9dea                	add	s11,s11,s10
1c00a692:	96ee                	add	a3,a3,s11
1c00a694:	4d82                	lw	s11,0(sp)
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00a696:	09d7aa23          	sw	t4,148(a5)
		a += saved_a;
		b += saved_b;
		c += saved_c;
		d += saved_d;

		ptr += 64;
1c00a69a:	04058593          	addi	a1,a1,64
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00a69e:	00cdcd33          	xor	s10,s11,a2
1c00a6a2:	96ea                	add	a3,a3,s10
1c00a6a4:	4d42                	lw	s10,16(sp)
1c00a6a6:	4bdeddb7          	lui	s11,0x4bded
1c00a6aa:	fa9d8d93          	addi	s11,s11,-87 # 4bdecfa9 <__l2_end+0x2fddd5fd>
1c00a6ae:	9d6e                	add	s10,s10,s11
1c00a6b0:	966a                	add	a2,a2,s10
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00a6b2:	4d02                	lw	s10,0(sp)
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00a6b4:	0996d6b3          	p.ror	a3,a3,s9
1c00a6b8:	96aa                	add	a3,a3,a0
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00a6ba:	00dd4db3          	xor	s11,s10,a3
1c00a6be:	966e                	add	a2,a2,s11
1c00a6c0:	09865633          	p.ror	a2,a2,s8
1c00a6c4:	f6bb5db7          	lui	s11,0xf6bb5
1c00a6c8:	9636                	add	a2,a2,a3
1c00a6ca:	b60d8d93          	addi	s11,s11,-1184 # f6bb4b60 <pulp__FC+0xf6bb4b61>
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
1c00a6ce:	00c6cd33          	xor	s10,a3,a2
1c00a6d2:	9dca                	add	s11,s11,s2
1c00a6d4:	976e                	add	a4,a4,s11
1c00a6d6:	00ad4db3          	xor	s11,s10,a0
1c00a6da:	976e                	add	a4,a4,s11
1c00a6dc:	bebfcdb7          	lui	s11,0xbebfc
1c00a6e0:	09775733          	p.ror	a4,a4,s7
1c00a6e4:	c70d8d93          	addi	s11,s11,-912 # bebfbc70 <pulp__FC+0xbebfbc71>
1c00a6e8:	9732                	add	a4,a4,a2
1c00a6ea:	9dfe                	add	s11,s11,t6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
1c00a6ec:	00ed4d33          	xor	s10,s10,a4
1c00a6f0:	956e                	add	a0,a0,s11
1c00a6f2:	956a                	add	a0,a0,s10
1c00a6f4:	09655533          	p.ror	a0,a0,s6
1c00a6f8:	289b8d37          	lui	s10,0x289b8
1c00a6fc:	953a                	add	a0,a0,a4
1c00a6fe:	ec6d0d13          	addi	s10,s10,-314 # 289b7ec6 <__l2_end+0xc9a851a>
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
1c00a702:	00a74db3          	xor	s11,a4,a0
1c00a706:	9d1a                	add	s10,s10,t1
1c00a708:	96ea                	add	a3,a3,s10
1c00a70a:	00cdcd33          	xor	s10,s11,a2
1c00a70e:	9d36                	add	s10,s10,a3
1c00a710:	eaa126b7          	lui	a3,0xeaa12
1c00a714:	099d5d33          	p.ror	s10,s10,s9
1c00a718:	7fa68693          	addi	a3,a3,2042 # eaa127fa <pulp__FC+0xeaa127fb>
1c00a71c:	9d2a                	add	s10,s10,a0
1c00a71e:	96ce                	add	a3,a3,s3
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
1c00a720:	01adcdb3          	xor	s11,s11,s10
1c00a724:	9636                	add	a2,a2,a3
1c00a726:	966e                	add	a2,a2,s11
1c00a728:	09865633          	p.ror	a2,a2,s8
1c00a72c:	d4ef3db7          	lui	s11,0xd4ef3
1c00a730:	966a                	add	a2,a2,s10
1c00a732:	085d8d93          	addi	s11,s11,133 # d4ef3085 <pulp__FC+0xd4ef3086>
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
1c00a736:	00cd46b3          	xor	a3,s10,a2
1c00a73a:	9d96                	add	s11,s11,t0
1c00a73c:	976e                	add	a4,a4,s11
1c00a73e:	00a6cdb3          	xor	s11,a3,a0
1c00a742:	9dba                	add	s11,s11,a4
1c00a744:	04882737          	lui	a4,0x4882
1c00a748:	097dddb3          	p.ror	s11,s11,s7
1c00a74c:	d0570713          	addi	a4,a4,-763 # 4881d05 <__L2+0x4801d05>
1c00a750:	9db2                	add	s11,s11,a2
1c00a752:	9772                	add	a4,a4,t3
1c00a754:	953a                	add	a0,a0,a4
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
1c00a756:	01b6c6b3          	xor	a3,a3,s11
1c00a75a:	96aa                	add	a3,a3,a0
1c00a75c:	0966d6b3          	p.ror	a3,a3,s6
1c00a760:	96ee                	add	a3,a3,s11
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
1c00a762:	00ddc533          	xor	a0,s11,a3
1c00a766:	4752                	lw	a4,20(sp)
1c00a768:	c02a                	sw	a0,0(sp)
1c00a76a:	d9d4d537          	lui	a0,0xd9d4d
1c00a76e:	03950513          	addi	a0,a0,57 # d9d4d039 <pulp__FC+0xd9d4d03a>
1c00a772:	972a                	add	a4,a4,a0
1c00a774:	9d3a                	add	s10,s10,a4
1c00a776:	4702                	lw	a4,0(sp)
1c00a778:	00c74533          	xor	a0,a4,a2
1c00a77c:	9d2a                	add	s10,s10,a0
1c00a77e:	e6dba537          	lui	a0,0xe6dba
1c00a782:	099d5cb3          	p.ror	s9,s10,s9
1c00a786:	9e550513          	addi	a0,a0,-1563 # e6db99e5 <pulp__FC+0xe6db99e6>
1c00a78a:	9cb6                	add	s9,s9,a3
1c00a78c:	951e                	add	a0,a0,t2
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
1c00a78e:	01974733          	xor	a4,a4,s9
1c00a792:	962a                	add	a2,a2,a0
1c00a794:	963a                	add	a2,a2,a4
1c00a796:	09865c33          	p.ror	s8,a2,s8
1c00a79a:	1fa28737          	lui	a4,0x1fa28
1c00a79e:	9c66                	add	s8,s8,s9
1c00a7a0:	cf870713          	addi	a4,a4,-776 # 1fa27cf8 <__l2_end+0x3a1834c>
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
1c00a7a4:	018ccd33          	xor	s10,s9,s8
1c00a7a8:	9776                	add	a4,a4,t4
1c00a7aa:	9dba                	add	s11,s11,a4
1c00a7ac:	00dd4733          	xor	a4,s10,a3
1c00a7b0:	9dba                	add	s11,s11,a4
1c00a7b2:	097ddbb3          	p.ror	s7,s11,s7
1c00a7b6:	4db2                	lw	s11,12(sp)
1c00a7b8:	c4ac5737          	lui	a4,0xc4ac5
1c00a7bc:	66570713          	addi	a4,a4,1637 # c4ac5665 <pulp__FC+0xc4ac5666>
1c00a7c0:	9be2                	add	s7,s7,s8
1c00a7c2:	976e                	add	a4,a4,s11
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
1c00a7c4:	017d4d33          	xor	s10,s10,s7
1c00a7c8:	96ba                	add	a3,a3,a4
1c00a7ca:	f4292737          	lui	a4,0xf4292
1c00a7ce:	96ea                	add	a3,a3,s10
1c00a7d0:	24470713          	addi	a4,a4,580 # f4292244 <pulp__FC+0xf4292245>
1c00a7d4:	0966db33          	p.ror	s6,a3,s6
1c00a7d8:	99ba                	add	s3,s3,a4
1c00a7da:	9b5e                	add	s6,s6,s7
1c00a7dc:	99e6                	add	s3,s3,s9
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
1c00a7de:	fffc4c93          	not	s9,s8
1c00a7e2:	016cecb3          	or	s9,s9,s6
1c00a7e6:	017cccb3          	xor	s9,s9,s7
1c00a7ea:	432b0737          	lui	a4,0x432b0
1c00a7ee:	4669                	li	a2,26
1c00a7f0:	f9770713          	addi	a4,a4,-105 # 432aff97 <__l2_end+0x272a05eb>
1c00a7f4:	9cce                	add	s9,s9,s3
1c00a7f6:	08ccdcb3          	p.ror	s9,s9,a2
1c00a7fa:	993a                	add	s2,s2,a4
1c00a7fc:	9cda                	add	s9,s9,s6
1c00a7fe:	9962                	add	s2,s2,s8
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
1c00a800:	fffbcc13          	not	s8,s7
1c00a804:	019c6c33          	or	s8,s8,s9
1c00a808:	016c4c33          	xor	s8,s8,s6
1c00a80c:	ab942737          	lui	a4,0xab942
1c00a810:	4559                	li	a0,22
1c00a812:	9c4a                	add	s8,s8,s2
1c00a814:	3a770713          	addi	a4,a4,935 # ab9423a7 <pulp__FC+0xab9423a8>
1c00a818:	08ac5c33          	p.ror	s8,s8,a0
1c00a81c:	94ba                	add	s1,s1,a4
1c00a81e:	9c66                	add	s8,s8,s9
1c00a820:	94de                	add	s1,s1,s7
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
1c00a822:	fffb4b93          	not	s7,s6
1c00a826:	018bebb3          	or	s7,s7,s8
1c00a82a:	019bcbb3          	xor	s7,s7,s9
1c00a82e:	fc93a737          	lui	a4,0xfc93a
1c00a832:	4945                	li	s2,17
1c00a834:	9ba6                	add	s7,s7,s1
1c00a836:	03970713          	addi	a4,a4,57 # fc93a039 <pulp__FC+0xfc93a03a>
1c00a83a:	9722                	add	a4,a4,s0
1c00a83c:	092bdbb3          	p.ror	s7,s7,s2
1c00a840:	9be2                	add	s7,s7,s8
1c00a842:	9b3a                	add	s6,s6,a4
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
1c00a844:	fffcc713          	not	a4,s9
1c00a848:	01776733          	or	a4,a4,s7
1c00a84c:	01874733          	xor	a4,a4,s8
1c00a850:	46ad                	li	a3,11
1c00a852:	975a                	add	a4,a4,s6
1c00a854:	08d75733          	p.ror	a4,a4,a3
1c00a858:	655b6437          	lui	s0,0x655b6
1c00a85c:	975e                	add	a4,a4,s7
1c00a85e:	9c340413          	addi	s0,s0,-1597 # 655b59c3 <__l2_end+0x495a6017>
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
1c00a862:	fffc4493          	not	s1,s8
1c00a866:	93a2                	add	t2,t2,s0
1c00a868:	8cd9                	or	s1,s1,a4
1c00a86a:	9c9e                	add	s9,s9,t2
1c00a86c:	0174c4b3          	xor	s1,s1,s7
1c00a870:	9ca6                	add	s9,s9,s1
1c00a872:	08ccdcb3          	p.ror	s9,s9,a2
1c00a876:	8f0cd3b7          	lui	t2,0x8f0cd
1c00a87a:	9cba                	add	s9,s9,a4
1c00a87c:	c9238393          	addi	t2,t2,-878 # 8f0ccc92 <pulp__FC+0x8f0ccc93>
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
1c00a880:	fffbc413          	not	s0,s7
1c00a884:	929e                	add	t0,t0,t2
1c00a886:	01946433          	or	s0,s0,s9
1c00a88a:	9c16                	add	s8,s8,t0
1c00a88c:	8c39                	xor	s0,s0,a4
1c00a88e:	9c22                	add	s8,s8,s0
1c00a890:	08ac5c33          	p.ror	s8,s8,a0
1c00a894:	ffeff2b7          	lui	t0,0xffeff
1c00a898:	9c66                	add	s8,s8,s9
1c00a89a:	47d28293          	addi	t0,t0,1149 # ffeff47d <pulp__FC+0xffeff47e>
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
1c00a89e:	fff74393          	not	t2,a4
1c00a8a2:	9f96                	add	t6,t6,t0
1c00a8a4:	0183e3b3          	or	t2,t2,s8
1c00a8a8:	9bfe                	add	s7,s7,t6
1c00a8aa:	0193c3b3          	xor	t2,t2,s9
1c00a8ae:	42a2                	lw	t0,8(sp)
1c00a8b0:	9b9e                	add	s7,s7,t2
1c00a8b2:	85846fb7          	lui	t6,0x85846
1c00a8b6:	092bdbb3          	p.ror	s7,s7,s2
1c00a8ba:	dd1f8f93          	addi	t6,t6,-559 # 85845dd1 <pulp__FC+0x85845dd2>
1c00a8be:	9be2                	add	s7,s7,s8
1c00a8c0:	9f96                	add	t6,t6,t0
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
1c00a8c2:	fffcc293          	not	t0,s9
1c00a8c6:	0172e2b3          	or	t0,t0,s7
1c00a8ca:	0182c2b3          	xor	t0,t0,s8
1c00a8ce:	977e                	add	a4,a4,t6
1c00a8d0:	9716                	add	a4,a4,t0
1c00a8d2:	08d75733          	p.ror	a4,a4,a3
1c00a8d6:	6fa88fb7          	lui	t6,0x6fa88
1c00a8da:	975e                	add	a4,a4,s7
1c00a8dc:	e4ff8f93          	addi	t6,t6,-433 # 6fa87e4f <__l2_end+0x53a784a3>
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
1c00a8e0:	fffc4293          	not	t0,s8
1c00a8e4:	9f7e                	add	t5,t5,t6
1c00a8e6:	00e2e2b3          	or	t0,t0,a4
1c00a8ea:	9cfa                	add	s9,s9,t5
1c00a8ec:	0172c2b3          	xor	t0,t0,s7
1c00a8f0:	9c96                	add	s9,s9,t0
1c00a8f2:	08ccdcb3          	p.ror	s9,s9,a2
1c00a8f6:	fe2cef37          	lui	t5,0xfe2ce
1c00a8fa:	9cba                	add	s9,s9,a4
1c00a8fc:	6e0f0f13          	addi	t5,t5,1760 # fe2ce6e0 <pulp__FC+0xfe2ce6e1>
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
1c00a900:	fffbcf93          	not	t6,s7
1c00a904:	9efa                	add	t4,t4,t5
1c00a906:	019fefb3          	or	t6,t6,s9
1c00a90a:	9c76                	add	s8,s8,t4
1c00a90c:	00efcfb3          	xor	t6,t6,a4
1c00a910:	9c7e                	add	s8,s8,t6
1c00a912:	08ac5c33          	p.ror	s8,s8,a0
1c00a916:	a3014eb7          	lui	t4,0xa3014
1c00a91a:	9c66                	add	s8,s8,s9
1c00a91c:	314e8e93          	addi	t4,t4,788 # a3014314 <pulp__FC+0xa3014315>
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
1c00a920:	fff74f13          	not	t5,a4
1c00a924:	9e76                	add	t3,t3,t4
1c00a926:	018f6f33          	or	t5,t5,s8
1c00a92a:	9bf2                	add	s7,s7,t3
1c00a92c:	019f4f33          	xor	t5,t5,s9
1c00a930:	9bfa                	add	s7,s7,t5
1c00a932:	092bdbb3          	p.ror	s7,s7,s2
1c00a936:	4e081e37          	lui	t3,0x4e081
1c00a93a:	9be2                	add	s7,s7,s8
1c00a93c:	1a1e0e13          	addi	t3,t3,417 # 4e0811a1 <__l2_end+0x320717f5>
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
1c00a940:	fffcce93          	not	t4,s9
1c00a944:	9372                	add	t1,t1,t3
1c00a946:	017eeeb3          	or	t4,t4,s7
1c00a94a:	018eceb3          	xor	t4,t4,s8
1c00a94e:	971a                	add	a4,a4,t1
1c00a950:	9776                	add	a4,a4,t4
1c00a952:	4d42                	lw	s10,16(sp)
1c00a954:	08d75733          	p.ror	a4,a4,a3
1c00a958:	f7538337          	lui	t1,0xf7538
1c00a95c:	975e                	add	a4,a4,s7
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
1c00a95e:	fffc4e13          	not	t3,s8
1c00a962:	e8230313          	addi	t1,t1,-382 # f7537e82 <pulp__FC+0xf7537e83>
1c00a966:	936a                	add	t1,t1,s10
1c00a968:	00ee6e33          	or	t3,t3,a4
1c00a96c:	017e4e33          	xor	t3,t3,s7
1c00a970:	9c9a                	add	s9,s9,t1
1c00a972:	9cf2                	add	s9,s9,t3
1c00a974:	08ccd633          	p.ror	a2,s9,a2
1c00a978:	bd3af337          	lui	t1,0xbd3af
1c00a97c:	963a                	add	a2,a2,a4
1c00a97e:	23530313          	addi	t1,t1,565 # bd3af235 <pulp__FC+0xbd3af236>
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
1c00a982:	fffbce13          	not	t3,s7
1c00a986:	989a                	add	a7,a7,t1
1c00a988:	00ce6e33          	or	t3,t3,a2
1c00a98c:	00ee4e33          	xor	t3,t3,a4
1c00a990:	9c46                	add	s8,s8,a7
1c00a992:	9c72                	add	s8,s8,t3
1c00a994:	08ac5533          	p.ror	a0,s8,a0
1c00a998:	2ad7d8b7          	lui	a7,0x2ad7d
1c00a99c:	9532                	add	a0,a0,a2
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
1c00a99e:	fff74313          	not	t1,a4
1c00a9a2:	2bb88893          	addi	a7,a7,699 # 2ad7d2bb <__l2_end+0xed6d90f>
1c00a9a6:	98ee                	add	a7,a7,s11
1c00a9a8:	00a36333          	or	t1,t1,a0
1c00a9ac:	9bc6                	add	s7,s7,a7
1c00a9ae:	00c34333          	xor	t1,t1,a2
1c00a9b2:	9b9a                	add	s7,s7,t1
1c00a9b4:	4dd2                	lw	s11,20(sp)
1c00a9b6:	092bd933          	p.ror	s2,s7,s2
1c00a9ba:	eb86d8b7          	lui	a7,0xeb86d
1c00a9be:	992a                	add	s2,s2,a0
1c00a9c0:	39188893          	addi	a7,a7,913 # eb86d391 <pulp__FC+0xeb86d392>
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00a9c4:	fff64313          	not	t1,a2
		a += saved_a;
1c00a9c8:	4e62                	lw	t3,24(sp)
	} while (size -= 64);
1c00a9ca:	4ef2                	lw	t4,28(sp)
1c00a9cc:	98ee                	add	a7,a7,s11
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00a9ce:	01236333          	or	t1,t1,s2
1c00a9d2:	9746                	add	a4,a4,a7
1c00a9d4:	00a34333          	xor	t1,t1,a0
1c00a9d8:	971a                	add	a4,a4,t1
1c00a9da:	08d75733          	p.ror	a4,a4,a3
		a += saved_a;
1c00a9de:	9e32                	add	t3,t3,a2
	} while (size -= 64);
1c00a9e0:	1efd                	addi	t4,t4,-1
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00a9e2:	974a                	add	a4,a4,s2
		a += saved_a;
1c00a9e4:	cc72                	sw	t3,24(sp)
	} while (size -= 64);
1c00a9e6:	ce76                	sw	t4,28(sp)
		b += saved_b;
1c00a9e8:	983a                	add	a6,a6,a4
		c += saved_c;
1c00a9ea:	9a4a                	add	s4,s4,s2
		d += saved_d;
1c00a9ec:	9aaa                	add	s5,s5,a0
	} while (size -= 64);
1c00a9ee:	f80e9a63          	bnez	t4,1c00a182 <body+0x38>
	ctx->b = b;
	ctx->c = c;
	ctx->d = d;

	return ptr;
}
1c00a9f2:	4436                	lw	s0,76(sp)
	ctx->c = c;
1c00a9f4:	0147a823          	sw	s4,16(a5)
	ctx->d = d;
1c00a9f8:	0157aa23          	sw	s5,20(a5)
	ctx->a = a;
1c00a9fc:	01c7a423          	sw	t3,8(a5)
	ctx->b = b;
1c00aa00:	0107a623          	sw	a6,12(a5)
}
1c00aa04:	44a6                	lw	s1,72(sp)
1c00aa06:	4916                	lw	s2,68(sp)
1c00aa08:	4986                	lw	s3,64(sp)
1c00aa0a:	5a72                	lw	s4,60(sp)
1c00aa0c:	5ae2                	lw	s5,56(sp)
1c00aa0e:	5b52                	lw	s6,52(sp)
1c00aa10:	5bc2                	lw	s7,48(sp)
1c00aa12:	5c32                	lw	s8,44(sp)
1c00aa14:	5ca2                	lw	s9,40(sp)
1c00aa16:	5d12                	lw	s10,36(sp)
1c00aa18:	5d82                	lw	s11,32(sp)
1c00aa1a:	852e                	mv	a0,a1
1c00aa1c:	6161                	addi	sp,sp,80
1c00aa1e:	8082                	ret

1c00aa20 <MD5_Init>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
1c00aa20:	674527b7          	lui	a5,0x67452
1c00aa24:	30178793          	addi	a5,a5,769 # 67452301 <__l2_end+0x4b442955>
1c00aa28:	c51c                	sw	a5,8(a0)
	ctx->b = 0xefcdab89;
1c00aa2a:	efcdb7b7          	lui	a5,0xefcdb
1c00aa2e:	b8978793          	addi	a5,a5,-1143 # efcdab89 <pulp__FC+0xefcdab8a>
1c00aa32:	c55c                	sw	a5,12(a0)
	ctx->c = 0x98badcfe;
1c00aa34:	98bae7b7          	lui	a5,0x98bae
1c00aa38:	cfe78793          	addi	a5,a5,-770 # 98badcfe <pulp__FC+0x98badcff>
1c00aa3c:	c91c                	sw	a5,16(a0)
	ctx->d = 0x10325476;
1c00aa3e:	103257b7          	lui	a5,0x10325
1c00aa42:	47678793          	addi	a5,a5,1142 # 10325476 <__l1_end+0x325432>
1c00aa46:	c95c                	sw	a5,20(a0)

	ctx->lo = 0;
1c00aa48:	00052023          	sw	zero,0(a0)
	ctx->hi = 0;
1c00aa4c:	00052223          	sw	zero,4(a0)
}
1c00aa50:	8082                	ret

1c00aa52 <MD5_Update>:

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c00aa52:	1101                	addi	sp,sp,-32
1c00aa54:	cc22                	sw	s0,24(sp)
1c00aa56:	842a                	mv	s0,a0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
1c00aa58:	4108                	lw	a0,0(a0)
{
1c00aa5a:	ca26                	sw	s1,20(sp)
1c00aa5c:	c84a                	sw	s2,16(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00aa5e:	00c507b3          	add	a5,a0,a2
{
1c00aa62:	ce06                	sw	ra,28(sp)
1c00aa64:	c64e                	sw	s3,12(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00aa66:	c5d7b7b3          	p.bclr	a5,a5,2,29
1c00aa6a:	c01c                	sw	a5,0(s0)
{
1c00aa6c:	892e                	mv	s2,a1
1c00aa6e:	84b2                	mv	s1,a2
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00aa70:	00a7f563          	bleu	a0,a5,1c00aa7a <MD5_Update+0x28>
		ctx->hi++;
1c00aa74:	405c                	lw	a5,4(s0)
1c00aa76:	0785                	addi	a5,a5,1
1c00aa78:	c05c                	sw	a5,4(s0)
	ctx->hi += size >> 29;
1c00aa7a:	4058                	lw	a4,4(s0)
1c00aa7c:	01d4d793          	srli	a5,s1,0x1d

	used = saved_lo & 0x3f;
1c00aa80:	f2653533          	p.bclr	a0,a0,25,6
	ctx->hi += size >> 29;
1c00aa84:	97ba                	add	a5,a5,a4
1c00aa86:	c05c                	sw	a5,4(s0)

	if (used) {
1c00aa88:	c129                	beqz	a0,1c00aaca <MD5_Update+0x78>
		available = 64 - used;
1c00aa8a:	04000993          	li	s3,64
1c00aa8e:	40a989b3          	sub	s3,s3,a0
1c00aa92:	0561                	addi	a0,a0,24
1c00aa94:	9522                	add	a0,a0,s0

		if (size < available) {
1c00aa96:	0134fc63          	bleu	s3,s1,1c00aaae <MD5_Update+0x5c>
			memcpy(&ctx->buffer[used], data, size);
1c00aa9a:	8626                	mv	a2,s1
1c00aa9c:	85ca                	mv	a1,s2
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
1c00aa9e:	4462                	lw	s0,24(sp)
1c00aaa0:	40f2                	lw	ra,28(sp)
1c00aaa2:	44d2                	lw	s1,20(sp)
1c00aaa4:	4942                	lw	s2,16(sp)
1c00aaa6:	49b2                	lw	s3,12(sp)
1c00aaa8:	6105                	addi	sp,sp,32
	memcpy(ctx->buffer, data, size);
1c00aaaa:	3930206f          	j	1c00d63c <memcpy>
		memcpy(&ctx->buffer[used], data, available);
1c00aaae:	85ca                	mv	a1,s2
1c00aab0:	864e                	mv	a2,s3
1c00aab2:	38b020ef          	jal	ra,1c00d63c <memcpy>
		body(ctx, ctx->buffer, 64);
1c00aab6:	04000613          	li	a2,64
1c00aaba:	01840593          	addi	a1,s0,24
1c00aabe:	8522                	mv	a0,s0
		data = (const unsigned char *)data + available;
1c00aac0:	994e                	add	s2,s2,s3
		size -= available;
1c00aac2:	413484b3          	sub	s1,s1,s3
		body(ctx, ctx->buffer, 64);
1c00aac6:	e84ff0ef          	jal	ra,1c00a14a <body>
	if (size >= 64) {
1c00aaca:	03f00793          	li	a5,63
1c00aace:	0097fb63          	bleu	s1,a5,1c00aae4 <MD5_Update+0x92>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
1c00aad2:	ca04b633          	p.bclr	a2,s1,5,0
1c00aad6:	85ca                	mv	a1,s2
1c00aad8:	8522                	mv	a0,s0
1c00aada:	e70ff0ef          	jal	ra,1c00a14a <body>
1c00aade:	892a                	mv	s2,a0
		size &= 0x3f;
1c00aae0:	f264b4b3          	p.bclr	s1,s1,25,6
	memcpy(ctx->buffer, data, size);
1c00aae4:	8626                	mv	a2,s1
1c00aae6:	85ca                	mv	a1,s2
1c00aae8:	01840513          	addi	a0,s0,24
1c00aaec:	bf4d                	j	1c00aa9e <MD5_Update+0x4c>

1c00aaee <MD5_Final>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
1c00aaee:	1141                	addi	sp,sp,-16
1c00aaf0:	c226                	sw	s1,4(sp)
1c00aaf2:	84aa                	mv	s1,a0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
1c00aaf4:	4188                	lw	a0,0(a1)
{
1c00aaf6:	c422                	sw	s0,8(sp)
1c00aaf8:	c04a                	sw	s2,0(sp)
	used = ctx->lo & 0x3f;
1c00aafa:	f2653533          	p.bclr	a0,a0,25,6

	ctx->buffer[used++] = 0x80;
1c00aafe:	00a58733          	add	a4,a1,a0
{
1c00ab02:	c606                	sw	ra,12(sp)
	ctx->buffer[used++] = 0x80;
1c00ab04:	00150793          	addi	a5,a0,1
1c00ab08:	f8000693          	li	a3,-128

	available = 64 - used;
1c00ab0c:	04000613          	li	a2,64
	ctx->buffer[used++] = 0x80;
1c00ab10:	00d70c23          	sb	a3,24(a4)
	available = 64 - used;
1c00ab14:	8e1d                	sub	a2,a2,a5

	if (available < 8) {
1c00ab16:	471d                	li	a4,7
{
1c00ab18:	842e                	mv	s0,a1
1c00ab1a:	01858913          	addi	s2,a1,24
	if (available < 8) {
1c00ab1e:	02c76063          	bltu	a4,a2,1c00ab3e <MD5_Final+0x50>
		memset(&ctx->buffer[used], 0, available);
1c00ab22:	0565                	addi	a0,a0,25
1c00ab24:	4581                	li	a1,0
1c00ab26:	9522                	add	a0,a0,s0
1c00ab28:	305020ef          	jal	ra,1c00d62c <memset>
		body(ctx, ctx->buffer, 64);
1c00ab2c:	04000613          	li	a2,64
1c00ab30:	85ca                	mv	a1,s2
1c00ab32:	8522                	mv	a0,s0
1c00ab34:	e16ff0ef          	jal	ra,1c00a14a <body>
		used = 0;
		available = 64;
1c00ab38:	04000613          	li	a2,64
		used = 0;
1c00ab3c:	4781                	li	a5,0
	}

	memset(&ctx->buffer[used], 0, available - 8);
1c00ab3e:	01878513          	addi	a0,a5,24
1c00ab42:	1661                	addi	a2,a2,-8
1c00ab44:	4581                	li	a1,0
1c00ab46:	9522                	add	a0,a0,s0
1c00ab48:	2e5020ef          	jal	ra,1c00d62c <memset>

	ctx->lo <<= 3;
1c00ab4c:	401c                	lw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
	OUT(&ctx->buffer[60], ctx->hi)

	body(ctx, ctx->buffer, 64);
1c00ab4e:	85ca                	mv	a1,s2
1c00ab50:	04000613          	li	a2,64
	ctx->lo <<= 3;
1c00ab54:	078e                	slli	a5,a5,0x3
	OUT(&ctx->buffer[56], ctx->lo)
1c00ab56:	873e                	mv	a4,a5
1c00ab58:	04e40823          	sb	a4,80(s0)
1c00ab5c:	0087d713          	srli	a4,a5,0x8
	ctx->lo <<= 3;
1c00ab60:	c01c                	sw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c00ab62:	04e408a3          	sb	a4,81(s0)
1c00ab66:	0107d713          	srli	a4,a5,0x10
1c00ab6a:	83e1                	srli	a5,a5,0x18
1c00ab6c:	04f409a3          	sb	a5,83(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c00ab70:	405c                	lw	a5,4(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c00ab72:	04e40923          	sb	a4,82(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c00ab76:	873e                	mv	a4,a5
1c00ab78:	04e40a23          	sb	a4,84(s0)
1c00ab7c:	0087d713          	srli	a4,a5,0x8
1c00ab80:	04e40aa3          	sb	a4,85(s0)
1c00ab84:	0107d713          	srli	a4,a5,0x10
1c00ab88:	83e1                	srli	a5,a5,0x18
1c00ab8a:	04f40ba3          	sb	a5,87(s0)
1c00ab8e:	04e40b23          	sb	a4,86(s0)
	body(ctx, ctx->buffer, 64);
1c00ab92:	8522                	mv	a0,s0
1c00ab94:	db6ff0ef          	jal	ra,1c00a14a <body>

	OUT(&result[0], ctx->a)
1c00ab98:	441c                	lw	a5,8(s0)
	OUT(&result[4], ctx->b)
	OUT(&result[8], ctx->c)
	OUT(&result[12], ctx->d)

	memset(ctx, 0, sizeof(*ctx));
1c00ab9a:	8522                	mv	a0,s0
1c00ab9c:	09800613          	li	a2,152
	OUT(&result[0], ctx->a)
1c00aba0:	00f48023          	sb	a5,0(s1)
1c00aba4:	441c                	lw	a5,8(s0)
	memset(ctx, 0, sizeof(*ctx));
1c00aba6:	4581                	li	a1,0
	OUT(&result[0], ctx->a)
1c00aba8:	83a1                	srli	a5,a5,0x8
1c00abaa:	00f480a3          	sb	a5,1(s1)
1c00abae:	00a45783          	lhu	a5,10(s0)
1c00abb2:	00f48123          	sb	a5,2(s1)
1c00abb6:	00b44783          	lbu	a5,11(s0)
1c00abba:	00f481a3          	sb	a5,3(s1)
	OUT(&result[4], ctx->b)
1c00abbe:	445c                	lw	a5,12(s0)
1c00abc0:	00f48223          	sb	a5,4(s1)
1c00abc4:	445c                	lw	a5,12(s0)
1c00abc6:	83a1                	srli	a5,a5,0x8
1c00abc8:	00f482a3          	sb	a5,5(s1)
1c00abcc:	00e45783          	lhu	a5,14(s0)
1c00abd0:	00f48323          	sb	a5,6(s1)
1c00abd4:	00f44783          	lbu	a5,15(s0)
1c00abd8:	00f483a3          	sb	a5,7(s1)
	OUT(&result[8], ctx->c)
1c00abdc:	481c                	lw	a5,16(s0)
1c00abde:	00f48423          	sb	a5,8(s1)
1c00abe2:	481c                	lw	a5,16(s0)
1c00abe4:	83a1                	srli	a5,a5,0x8
1c00abe6:	00f484a3          	sb	a5,9(s1)
1c00abea:	01245783          	lhu	a5,18(s0)
1c00abee:	00f48523          	sb	a5,10(s1)
1c00abf2:	01344783          	lbu	a5,19(s0)
1c00abf6:	00f485a3          	sb	a5,11(s1)
	OUT(&result[12], ctx->d)
1c00abfa:	485c                	lw	a5,20(s0)
1c00abfc:	00f48623          	sb	a5,12(s1)
1c00ac00:	485c                	lw	a5,20(s0)
1c00ac02:	83a1                	srli	a5,a5,0x8
1c00ac04:	00f486a3          	sb	a5,13(s1)
1c00ac08:	01645783          	lhu	a5,22(s0)
1c00ac0c:	00f48723          	sb	a5,14(s1)
1c00ac10:	01744783          	lbu	a5,23(s0)
1c00ac14:	00f487a3          	sb	a5,15(s1)
}
1c00ac18:	40b2                	lw	ra,12(sp)
1c00ac1a:	4422                	lw	s0,8(sp)
1c00ac1c:	4492                	lw	s1,4(sp)
1c00ac1e:	4902                	lw	s2,0(sp)
1c00ac20:	0141                	addi	sp,sp,16
	memset(ctx, 0, sizeof(*ctx));
1c00ac22:	20b0206f          	j	1c00d62c <memset>

1c00ac26 <__internal_semihost>:
    return __internal_semihost(SEMIHOSTING_SYS_SEEK, (long) args);
}

int semihost_flen(int fd)
{
    return __internal_semihost(SEMIHOSTING_SYS_FLEN, (long) fd);
1c00ac26:	01f01013          	slli	zero,zero,0x1f
1c00ac2a:	00100073          	ebreak
1c00ac2e:	40705013          	srai	zero,zero,0x7
1c00ac32:	8082                	ret

1c00ac34 <semihost_write0>:
1c00ac34:	85aa                	mv	a1,a0
1c00ac36:	4511                	li	a0,4
1c00ac38:	fefff06f          	j	1c00ac26 <__internal_semihost>

1c00ac3c <semihost_open>:
1c00ac3c:	7139                	addi	sp,sp,-64
1c00ac3e:	de06                	sw	ra,60(sp)
1c00ac40:	dc22                	sw	s0,56(sp)
1c00ac42:	c62e                	sw	a1,12(sp)
1c00ac44:	842a                	mv	s0,a0
1c00ac46:	1d1020ef          	jal	ra,1c00d616 <strlen>
1c00ac4a:	45b2                	lw	a1,12(sp)
1c00ac4c:	083c                	addi	a5,sp,24
1c00ac4e:	c380                	sw	s0,0(a5)
1c00ac50:	087c                	addi	a5,sp,28
1c00ac52:	c38c                	sw	a1,0(a5)
1c00ac54:	101c                	addi	a5,sp,32
1c00ac56:	c388                	sw	a0,0(a5)
1c00ac58:	082c                	addi	a1,sp,24
1c00ac5a:	4505                	li	a0,1
1c00ac5c:	fcbff0ef          	jal	ra,1c00ac26 <__internal_semihost>
1c00ac60:	50f2                	lw	ra,60(sp)
1c00ac62:	5462                	lw	s0,56(sp)
1c00ac64:	6121                	addi	sp,sp,64
1c00ac66:	8082                	ret

1c00ac68 <semihost_close>:
1c00ac68:	85aa                	mv	a1,a0
1c00ac6a:	4509                	li	a0,2
1c00ac6c:	fbbff06f          	j	1c00ac26 <__internal_semihost>

1c00ac70 <semihost_read>:
1c00ac70:	7179                	addi	sp,sp,-48
1c00ac72:	d606                	sw	ra,44(sp)
1c00ac74:	003c                	addi	a5,sp,8
1c00ac76:	c388                	sw	a0,0(a5)
1c00ac78:	007c                	addi	a5,sp,12
1c00ac7a:	c38c                	sw	a1,0(a5)
1c00ac7c:	4519                	li	a0,6
1c00ac7e:	081c                	addi	a5,sp,16
1c00ac80:	002c                	addi	a1,sp,8
1c00ac82:	c390                	sw	a2,0(a5)
1c00ac84:	fa3ff0ef          	jal	ra,1c00ac26 <__internal_semihost>
1c00ac88:	50b2                	lw	ra,44(sp)
1c00ac8a:	6145                	addi	sp,sp,48
1c00ac8c:	8082                	ret

1c00ac8e <semihost_write>:
1c00ac8e:	7179                	addi	sp,sp,-48
1c00ac90:	d606                	sw	ra,44(sp)
1c00ac92:	003c                	addi	a5,sp,8
1c00ac94:	c388                	sw	a0,0(a5)
1c00ac96:	007c                	addi	a5,sp,12
1c00ac98:	c38c                	sw	a1,0(a5)
1c00ac9a:	4515                	li	a0,5
1c00ac9c:	081c                	addi	a5,sp,16
1c00ac9e:	002c                	addi	a1,sp,8
1c00aca0:	c390                	sw	a2,0(a5)
1c00aca2:	f85ff0ef          	jal	ra,1c00ac26 <__internal_semihost>
1c00aca6:	50b2                	lw	ra,44(sp)
1c00aca8:	6145                	addi	sp,sp,48
1c00acaa:	8082                	ret

1c00acac <semihost_seek>:
1c00acac:	1101                	addi	sp,sp,-32
1c00acae:	c42a                	sw	a0,8(sp)
1c00acb0:	c62e                	sw	a1,12(sp)
1c00acb2:	4529                	li	a0,10
1c00acb4:	002c                	addi	a1,sp,8
1c00acb6:	ce06                	sw	ra,28(sp)
1c00acb8:	f6fff0ef          	jal	ra,1c00ac26 <__internal_semihost>
1c00acbc:	40f2                	lw	ra,28(sp)
1c00acbe:	6105                	addi	sp,sp,32
1c00acc0:	8082                	ret

1c00acc2 <semihost_exit>:
}

int semihost_exit(int code)
{
    return __internal_semihost(SEMIHOSTING_SYS_EXIT, (long) code);
1c00acc2:	85aa                	mv	a1,a0
1c00acc4:	4561                	li	a0,24
1c00acc6:	f61ff06f          	j	1c00ac26 <__internal_semihost>

1c00acca <__bsp_init_pads>:

static int __bsp_init_pads_done = 0;

static void __bsp_init_pads()
{
  if (!__bsp_init_pads_done)
1c00acca:	1c0107b7          	lui	a5,0x1c010
1c00acce:	8d478793          	addi	a5,a5,-1836 # 1c00f8d4 <__bsp_init_pads_done>
1c00acd2:	4398                	lw	a4,0(a5)
1c00acd4:	eb05                	bnez	a4,1c00ad04 <__bsp_init_pads+0x3a>
{
1c00acd6:	1101                	addi	sp,sp,-32
1c00acd8:	ce06                	sw	ra,28(sp)
  {
    __bsp_init_pads_done = 1;
1c00acda:	4705                	li	a4,1
1c00acdc:	c398                	sw	a4,0(a5)
    uint32_t pads_value[] = {0x00055500, 0x0f000000, 0x003fffff, 0x00000000};
1c00acde:	000557b7          	lui	a5,0x55
1c00ace2:	50078793          	addi	a5,a5,1280 # 55500 <__L1Cl+0x45500>
1c00ace6:	c03e                	sw	a5,0(sp)
1c00ace8:	0f0007b7          	lui	a5,0xf000
1c00acec:	c23e                	sw	a5,4(sp)
1c00acee:	004007b7          	lui	a5,0x400
1c00acf2:	17fd                	addi	a5,a5,-1
    pi_pad_init(pads_value);
1c00acf4:	850a                	mv	a0,sp
    uint32_t pads_value[] = {0x00055500, 0x0f000000, 0x003fffff, 0x00000000};
1c00acf6:	c43e                	sw	a5,8(sp)
1c00acf8:	c602                	sw	zero,12(sp)
    pi_pad_init(pads_value);
1c00acfa:	2a3010ef          	jal	ra,1c00c79c <pi_pad_init>
  }
}
1c00acfe:	40f2                	lw	ra,28(sp)
1c00ad00:	6105                	addi	sp,sp,32
1c00ad02:	8082                	ret
1c00ad04:	8082                	ret

1c00ad06 <bsp_hyperram_conf_init>:

void bsp_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram_start = CONFIG_HYPERRAM_START;
  conf->ram_size = CONFIG_HYPERRAM_SIZE;
1c00ad06:	008007b7          	lui	a5,0x800
  conf->ram_start = CONFIG_HYPERRAM_START;
1c00ad0a:	00052a23          	sw	zero,20(a0)
  conf->ram_size = CONFIG_HYPERRAM_SIZE;
1c00ad0e:	cd1c                	sw	a5,24(a0)
  conf->skip_pads_config = 0;
1c00ad10:	00050623          	sb	zero,12(a0)
  conf->hyper_itf = CONFIG_HYPERRAM_HYPER_ITF;
1c00ad14:	00052223          	sw	zero,4(a0)
  conf->hyper_cs = CONFIG_HYPERRAM_HYPER_CS;
1c00ad18:	00052423          	sw	zero,8(a0)
}
1c00ad1c:	8082                	ret

1c00ad1e <bsp_hyperram_open>:
1c00ad1e:	1141                	addi	sp,sp,-16
1c00ad20:	c606                	sw	ra,12(sp)
1c00ad22:	fa9ff0ef          	jal	ra,1c00acca <__bsp_init_pads>
1c00ad26:	40b2                	lw	ra,12(sp)
1c00ad28:	4501                	li	a0,0
1c00ad2a:	0141                	addi	sp,sp,16
1c00ad2c:	8082                	ret

1c00ad2e <bsp_hyperflash_conf_init>:


void bsp_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c00ad2e:	4785                	li	a5,1
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
1c00ad30:	00052223          	sw	zero,4(a0)
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c00ad34:	c51c                	sw	a5,8(a0)
}
1c00ad36:	8082                	ret

1c00ad38 <bsp_hyperflash_open>:
1c00ad38:	1141                	addi	sp,sp,-16
1c00ad3a:	c606                	sw	ra,12(sp)
1c00ad3c:	f8fff0ef          	jal	ra,1c00acca <__bsp_init_pads>
1c00ad40:	40b2                	lw	ra,12(sp)
1c00ad42:	4501                	li	a0,0
1c00ad44:	0141                	addi	sp,sp,16
1c00ad46:	8082                	ret

1c00ad48 <cluster_start>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ad48:	002047b7          	lui	a5,0x204
1c00ad4c:	00070737          	lui	a4,0x70
1c00ad50:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00ad54:	0ff00713          	li	a4,255
1c00ad58:	002046b7          	lui	a3,0x204
1c00ad5c:	08e6a223          	sw	a4,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00ad60:	20078793          	addi	a5,a5,512
1c00ad64:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00ad68:	00e7a623          	sw	a4,12(a5)
    __rt_team_config(rt_nb_active_pe());
  }

#endif

}
1c00ad6c:	8082                	ret

1c00ad6e <__rt_init>:
{
1c00ad6e:	1101                	addi	sp,sp,-32
static inline void hal_pmu_bypass_set(unsigned int Value) {
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
}

static inline unsigned int hal_pmu_bypass_get() {
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET);
1c00ad70:	1a104737          	lui	a4,0x1a104
1c00ad74:	ce06                	sw	ra,28(sp)
1c00ad76:	cc22                	sw	s0,24(sp)
1c00ad78:	ca26                	sw	s1,20(sp)
1c00ad7a:	07072783          	lw	a5,112(a4) # 1a104070 <__l1_end+0xa10402c>
  hal_pmu_bypass_set (ARCHI_REG_FIELD_SET (hal_pmu_bypass_get (), 1, 11, 1) );
1c00ad7e:	c0b7c7b3          	p.bset	a5,a5,0,11
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00ad82:	06f72823          	sw	a5,112(a4)
  __rt_bridge_set_available();
1c00ad86:	2b49                	jal	1c00b318 <__rt_bridge_set_available>
  cpu_stack_check_enable((int)__rt_fc_stack, (int)__rt_fc_stack + __rt_fc_stack_size);
1c00ad88:	1b0007b7          	lui	a5,0x1b000
1c00ad8c:	39878793          	addi	a5,a5,920 # 1b000398 <__rt_fc_stack>
 * Stack checking
 */

static inline void cpu_stack_check_enable(unsigned int base, unsigned int end)
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c00ad90:	7d005073          	csrwi	0x7d0,0
  asm volatile ("csrw  0x7D1, %0" :: "r" (base));
1c00ad94:	7d179073          	csrw	0x7d1,a5
1c00ad98:	1c00f737          	lui	a4,0x1c00f
1c00ad9c:	56072703          	lw	a4,1376(a4) # 1c00f560 <__rt_fc_stack_size>
1c00ada0:	97ba                	add	a5,a5,a4
  asm volatile ("csrw  0x7D2, %0" :: "r" (end));
1c00ada2:	7d279073          	csrw	0x7d2,a5
  asm volatile ("csrwi 0x7D0, 1" :: );
1c00ada6:	7d00d073          	csrwi	0x7d0,1
  __rt_irq_init();
1c00adaa:	2add                	jal	1c00afa0 <__rt_irq_init>

#include "archi/pulp.h"
#include "archi/soc_eu/soc_eu_v1.h"

static inline void soc_eu_eventMask_set(unsigned int reg, unsigned int value) {
  ARCHI_WRITE(ARCHI_SOC_EU_ADDR, reg, value);
1c00adac:	54fd                	li	s1,-1
1c00adae:	1a1067b7          	lui	a5,0x1a106
1c00adb2:	0097a223          	sw	s1,4(a5) # 1a106004 <__l1_end+0xa105fc0>
1c00adb6:	0097a423          	sw	s1,8(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_SOC_EVT, __rt_fc_socevents_handler);
1c00adba:	1c0005b7          	lui	a1,0x1c000
1c00adbe:	3f458593          	addi	a1,a1,1012 # 1c0003f4 <__rt_fc_socevents_handler>
1c00adc2:	456d                	li	a0,27
1c00adc4:	2a3d                	jal	1c00af02 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00adc6:	080007b7          	lui	a5,0x8000
1c00adca:	00204737          	lui	a4,0x204
1c00adce:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00add2:	00f72423          	sw	a5,8(a4)
  __rt_pmu_init();
1c00add6:	2a2010ef          	jal	ra,1c00c078 <__rt_pmu_init>
  __rt_freq_init();
1c00adda:	6ed000ef          	jal	ra,1c00bcc6 <__rt_freq_init>
1c00adde:	002017b7          	lui	a5,0x201
1c00ade2:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
}

static inline void icache_enable(unsigned int base)
{
  pulp_write32(base, 0xFFFFFFFF);
1c00ade6:	c384                	sw	s1,0(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00ade8:	01402473          	csrr	s0,uhartid
1c00adec:	1c00f4b7          	lui	s1,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00adf0:	8415                	srai	s0,s0,0x5
  __rt_utils_init();
1c00adf2:	24ed                	jal	1c00b0dc <__rt_utils_init>
1c00adf4:	f2643433          	p.bclr	s0,s0,25,6
  __rt_allocs_init();
1c00adf8:	1af000ef          	jal	ra,1c00b7a6 <__rt_allocs_init>
1c00adfc:	a4848493          	addi	s1,s1,-1464 # 1c00ea48 <ctor_list+0x4>
  __rt_event_sched_init();
1c00ae00:	029000ef          	jal	ra,1c00b628 <__rt_event_sched_init>
  __rt_padframe_init();
1c00ae04:	20a020ef          	jal	ra,1c00d00e <__rt_padframe_init>
  for(fpp = ctor_list+1;  *fpp != 0;  ++fpp) {
1c00ae08:	0044a78b          	p.lw	a5,4(s1!)
1c00ae0c:	ebad                	bnez	a5,1c00ae7e <__rt_init+0x110>
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
1c00ae0e:	300467f3          	csrrsi	a5,mstatus,8
  if (__rt_cbsys_exec(RT_CBSYS_START)) goto error;
1c00ae12:	4501                	li	a0,0
1c00ae14:	2c61                	jal	1c00b0ac <__rt_cbsys_exec>
1c00ae16:	e539                	bnez	a0,1c00ae64 <__rt_init+0xf6>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00ae18:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00ae1c:	8795                	srai	a5,a5,0x5
1c00ae1e:	f267b7b3          	p.bclr	a5,a5,25,6
        exit(retval);
      }
    }
    else
      return cluster_master_start(NULL);
  } else if (!rt_is_fc()) {
1c00ae22:	02000713          	li	a4,32
1c00ae26:	0ae78363          	beq	a5,a4,1c00aecc <__rt_init+0x15e>
    rt_cluster_mount(1, cid, 0, NULL);
1c00ae2a:	4681                	li	a3,0
1c00ae2c:	4601                	li	a2,0
1c00ae2e:	4581                	li	a1,0
1c00ae30:	4505                	li	a0,1
  if (rt_cluster_id() != cid)
1c00ae32:	cba1                	beqz	a5,1c00ae82 <__rt_init+0x114>
    rt_cluster_mount(1, cid, 0, NULL);
1c00ae34:	794010ef          	jal	ra,1c00c5c8 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*rt_nb_active_pe());
1c00ae38:	6591                	lui	a1,0x4
1c00ae3a:	4509                	li	a0,2
1c00ae3c:	0bf000ef          	jal	ra,1c00b6fa <rt_alloc>
1c00ae40:	872a                	mv	a4,a0
    if (stacks == NULL) return -1;
1c00ae42:	c10d                	beqz	a0,1c00ae64 <__rt_init+0xf6>
    if (rt_cluster_call(NULL, cid, cluster_start, NULL, stacks, 0x800, 0x800, rt_nb_active_pe(), event)) return -1;
1c00ae44:	6805                	lui	a6,0x1
1c00ae46:	80080813          	addi	a6,a6,-2048 # 800 <__rt_stack_size>
1c00ae4a:	1c00b637          	lui	a2,0x1c00b
1c00ae4e:	c002                	sw	zero,0(sp)
1c00ae50:	48a1                	li	a7,8
1c00ae52:	87c2                	mv	a5,a6
1c00ae54:	4681                	li	a3,0
1c00ae56:	d4860613          	addi	a2,a2,-696 # 1c00ad48 <cluster_start>
1c00ae5a:	4581                	li	a1,0
1c00ae5c:	4501                	li	a0,0
1c00ae5e:	6da010ef          	jal	ra,1c00c538 <rt_cluster_call>
1c00ae62:	c52d                	beqz	a0,1c00aecc <__rt_init+0x15e>
  rt_fatal("There was an error during runtime initialization\n");
1c00ae64:	1c00f537          	lui	a0,0x1c00f
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00ae68:	01402673          	csrr	a2,uhartid
1c00ae6c:	85a2                	mv	a1,s0
1c00ae6e:	f4563633          	p.bclr	a2,a2,26,5
1c00ae72:	0d850513          	addi	a0,a0,216 # 1c00f0d8 <IntegerExpLUT+0x18>
1c00ae76:	2f3020ef          	jal	ra,1c00d968 <printf>
1c00ae7a:	273020ef          	jal	ra,1c00d8ec <abort>
    (**fpp)();
1c00ae7e:	9782                	jalr	a5
1c00ae80:	b761                	j	1c00ae08 <__rt_init+0x9a>
    rt_cluster_mount(1, cid, 0, NULL);
1c00ae82:	746010ef          	jal	ra,1c00c5c8 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*(rt_nb_active_pe()-1));
1c00ae86:	6591                	lui	a1,0x4
1c00ae88:	80058593          	addi	a1,a1,-2048 # 3800 <__rt_stack_size+0x3000>
1c00ae8c:	4509                	li	a0,2
1c00ae8e:	06d000ef          	jal	ra,1c00b6fa <rt_alloc>
    if (stacks == NULL) return -1;
1c00ae92:	d969                	beqz	a0,1c00ae64 <__rt_init+0xf6>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00ae94:	00204737          	lui	a4,0x204
1c00ae98:	0ff00793          	li	a5,255
1c00ae9c:	08f72223          	sw	a5,132(a4) # 204084 <__L2+0x184084>
    eu_dispatch_push((unsigned int)__rt_set_slave_stack | 1);
1c00aea0:	1c00f7b7          	lui	a5,0x1c00f
1c00aea4:	98c78793          	addi	a5,a5,-1652 # 1c00e98c <__rt_set_slave_stack>
1c00aea8:	c007c7b3          	p.bset	a5,a5,0,0
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00aeac:	08f72023          	sw	a5,128(a4)
1c00aeb0:	6785                	lui	a5,0x1
1c00aeb2:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00aeb6:	08f72023          	sw	a5,128(a4)
1c00aeba:	08a72023          	sw	a0,128(a4)
}
1c00aebe:	4462                	lw	s0,24(sp)
1c00aec0:	40f2                	lw	ra,28(sp)
1c00aec2:	44d2                	lw	s1,20(sp)
    cluster_start(NULL);
1c00aec4:	4501                	li	a0,0
}
1c00aec6:	6105                	addi	sp,sp,32
    cluster_start(NULL);
1c00aec8:	e81ff06f          	j	1c00ad48 <cluster_start>
}
1c00aecc:	40f2                	lw	ra,28(sp)
1c00aece:	4462                	lw	s0,24(sp)
1c00aed0:	44d2                	lw	s1,20(sp)
1c00aed2:	6105                	addi	sp,sp,32
1c00aed4:	8082                	ret

1c00aed6 <__rt_deinit>:
{
1c00aed6:	1141                	addi	sp,sp,-16
1c00aed8:	c606                	sw	ra,12(sp)
1c00aeda:	c422                	sw	s0,8(sp)
}

static inline void cpu_stack_check_disable()
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c00aedc:	7d005073          	csrwi	0x7d0,0
  __rt_cbsys_exec(RT_CBSYS_STOP);
1c00aee0:	4505                	li	a0,1
1c00aee2:	1c00f437          	lui	s0,0x1c00f
1c00aee6:	22d9                	jal	1c00b0ac <__rt_cbsys_exec>
1c00aee8:	a8840413          	addi	s0,s0,-1400 # 1c00ea88 <dtor_list+0x4>
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c00aeec:	0044278b          	p.lw	a5,4(s0!)
1c00aef0:	e789                	bnez	a5,1c00aefa <__rt_deinit+0x24>
}
1c00aef2:	40b2                	lw	ra,12(sp)
1c00aef4:	4422                	lw	s0,8(sp)
1c00aef6:	0141                	addi	sp,sp,16
1c00aef8:	8082                	ret
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c00aefa:	9782                	jalr	a5
1c00aefc:	bfc5                	j	1c00aeec <__rt_deinit+0x16>

1c00aefe <pi_open_from_conf>:
#endif


void pi_open_from_conf(struct pi_device *device, void *conf)
{
  device->config = conf;
1c00aefe:	c14c                	sw	a1,4(a0)
}
1c00af00:	8082                	ret

1c00af02 <rt_irq_set_handler>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00af02:	014027f3          	csrr	a5,uhartid
  return hal_spr_read(0x305) & ~1;
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
  return ARCHI_L2_ADDR;
#else
  if (rt_is_fc()) {
1c00af06:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00af0a:	ca5797b3          	p.extractu	a5,a5,5,5
1c00af0e:	02e79c63          	bne	a5,a4,1c00af46 <rt_irq_set_handler+0x44>
#if defined(ARCHI_CORE_HAS_SECURITY) && !defined(ARCHI_CORE_HAS_1_10)
    return __builtin_pulp_spr_read(SR_MTVEC);
1c00af12:	30502773          	csrr	a4,mtvec
  irq -= 16;
#endif

  unsigned int base = __rt_get_fc_vector_base();

  unsigned int jmpAddr = base + 0x4 * irq;
1c00af16:	050a                	slli	a0,a0,0x2
  unsigned int S = ((unsigned int) ItHandler - (ItBaseAddr+ItIndex*4));
1c00af18:	8d89                	sub	a1,a1,a0
1c00af1a:	8d99                	sub	a1,a1,a4
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 20),  1, 31);
1c00af1c:	c14586b3          	p.extract	a3,a1,0,20
1c00af20:	06f00793          	li	a5,111
1c00af24:	c1f6a7b3          	p.insert	a5,a3,0,31
  R = __BITINSERT(R, __BITEXTRACT(S, 10,  1), 10, 21);
1c00af28:	d21586b3          	p.extract	a3,a1,9,1
1c00af2c:	d356a7b3          	p.insert	a5,a3,9,21
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 11),  1, 20);
1c00af30:	c0b586b3          	p.extract	a3,a1,0,11
1c00af34:	c146a7b3          	p.insert	a5,a3,0,20
  R = __BITINSERT(R, __BITEXTRACT(S,  8, 12),  8, 12);
1c00af38:	cec585b3          	p.extract	a1,a1,7,12
1c00af3c:	cec5a7b3          	p.insert	a5,a1,7,12

  *(volatile unsigned int *)jmpAddr = __rt_get_itvec(base, irq, (unsigned int)handler);
1c00af40:	00f56723          	p.sw	a5,a4(a0)

#if defined(PLP_FC_HAS_ICACHE)
  flush_all_icache_banks_common(plp_icache_fc_base());
#endif

}
1c00af44:	8082                	ret
static inline void plp_ctrl_core_bootaddr_set_remote(int cid, int core, unsigned int bootAddr) {
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
}

static inline unsigned int plp_ctrl_bootaddr_get() {
  return pulp_read32(ARCHI_CLUSTER_CTRL_ADDR + 0x40);
1c00af46:	002007b7          	lui	a5,0x200
1c00af4a:	43b8                	lw	a4,64(a5)
1c00af4c:	b7e9                	j	1c00af16 <rt_irq_set_handler+0x14>

1c00af4e <illegal_insn_handler_c>:
#include <stdlib.h>

void __attribute__((weak)) illegal_insn_handler_c()
{

}
1c00af4e:	8082                	ret

1c00af50 <__rt_handle_illegal_instr>:


extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config;
extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config_trace;

static inline unsigned int rt_debug_config() { return __rt_debug_config; }
1c00af50:	1b0017b7          	lui	a5,0x1b001

static inline unsigned int rt_debug_config_trace() { return __rt_debug_config_trace; }

static inline int rt_debug_config_warnings() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WARNING_BIT, 1);
1c00af54:	b9c7a703          	lw	a4,-1124(a5) # 1b000b9c <__rt_debug_config>

void __rt_handle_illegal_instr()
{
1c00af58:	1141                	addi	sp,sp,-16
1c00af5a:	c422                	sw	s0,8(sp)
1c00af5c:	c606                	sw	ra,12(sp)
1c00af5e:	fc173733          	p.bclr	a4,a4,30,1
1c00af62:	843e                	mv	s0,a5
#ifdef __riscv__
  unsigned int mepc = hal_mepc_read();
  rt_warning("Reached illegal instruction (PC: 0x%x, opcode: 0x%x\n", mepc, *(int *)mepc);
1c00af64:	c315                	beqz	a4,1c00af88 <__rt_handle_illegal_instr+0x38>
1c00af66:	341026f3          	csrr	a3,mepc
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00af6a:	01402673          	csrr	a2,uhartid
1c00af6e:	1c00f537          	lui	a0,0x1c00f
1c00af72:	4298                	lw	a4,0(a3)
  return (hart_id >> 5) & 0x3f;
1c00af74:	40565593          	srai	a1,a2,0x5
1c00af78:	f265b5b3          	p.bclr	a1,a1,25,6
1c00af7c:	f4563633          	p.bclr	a2,a2,26,5
1c00af80:	13050513          	addi	a0,a0,304 # 1c00f130 <IntegerExpLUT+0x70>
1c00af84:	1e5020ef          	jal	ra,1c00d968 <printf>
}

static inline int rt_debug_config_werror() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WERROR_BIT, 1);
1c00af88:	b9c42783          	lw	a5,-1124(s0)
1c00af8c:	c01797b3          	p.extractu	a5,a5,0,1
1c00af90:	c399                	beqz	a5,1c00af96 <__rt_handle_illegal_instr+0x46>
1c00af92:	15b020ef          	jal	ra,1c00d8ec <abort>
  illegal_insn_handler_c();
#endif
}
1c00af96:	4422                	lw	s0,8(sp)
1c00af98:	40b2                	lw	ra,12(sp)
1c00af9a:	0141                	addi	sp,sp,16
  illegal_insn_handler_c();
1c00af9c:	fb3ff06f          	j	1c00af4e <illegal_insn_handler_c>

1c00afa0 <__rt_irq_init>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_IRQ_AND, irqMask);
1c00afa0:	57fd                	li	a5,-1
1c00afa2:	00204737          	lui	a4,0x204
1c00afa6:	00f72823          	sw	a5,16(a4) # 204010 <__L2+0x184010>
  else eu_irq_maskClr(mask);
#elif defined(ITC_VERSION)
  hal_itc_enable_clr(mask);
#elif defined(EU_VERSION)
  eu_irq_maskClr(mask);
  if (hal_is_fc()) eu_evt_maskClr(mask);
1c00afaa:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00afae:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00afb2:	ca5797b3          	p.extractu	a5,a5,5,5
1c00afb6:	00e79763          	bne	a5,a4,1c00afc4 <__rt_irq_init+0x24>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00afba:	57fd                	li	a5,-1
1c00afbc:	00204737          	lui	a4,0x204
1c00afc0:	00f72223          	sw	a5,4(a4) # 204004 <__L2+0x184004>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00afc4:	014027f3          	csrr	a5,uhartid
#if defined(ARCHI_CORE_RISCV_ITC)
  hal_spr_write(0x305, base);
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
#else
  if (rt_is_fc()) {
1c00afc8:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00afcc:	ca5797b3          	p.extractu	a5,a5,5,5
1c00afd0:	00e79963          	bne	a5,a4,1c00afe2 <__rt_irq_init+0x42>
#if defined(ARCHI_CORE_HAS_SECURITY)
    __builtin_pulp_spr_write(SR_MTVEC, base);
1c00afd4:	1c0007b7          	lui	a5,0x1c000
1c00afd8:	00078793          	mv	a5,a5
1c00afdc:	30579073          	csrw	mtvec,a5
1c00afe0:	8082                	ret
  pulp_write32(ARCHI_CLUSTER_CTRL_ADDR + 0x40, bootAddr);
1c00afe2:	1c0007b7          	lui	a5,0x1c000
1c00afe6:	00200737          	lui	a4,0x200
1c00afea:	00078793          	mv	a5,a5
1c00afee:	c33c                	sw	a5,64(a4)
  rt_irq_mask_clr(-1);

  // As the FC code may not be at the beginning of the L2, set the
  // vector base to get proper interrupt handlers
  __rt_set_fc_vector_base((int)rt_irq_vector_base());
}
1c00aff0:	8082                	ret

1c00aff2 <__rt_fc_cluster_lock_req>:
      rt_free(RT_ALLOC_FC_RET_DATA, (void *)cbsys, sizeof(rt_cbsys_t));     
      return;
    }

    prev = cbsys;
    cbsys = cbsys->next;
1c00aff2:	300476f3          	csrrci	a3,mstatus,8
1c00aff6:	08a54703          	lbu	a4,138(a0)
1c00affa:	411c                	lw	a5,0(a0)
1c00affc:	c321                	beqz	a4,1c00b03c <__rt_fc_cluster_lock_req+0x4a>
1c00affe:	4398                	lw	a4,0(a5)
1c00b000:	cf09                	beqz	a4,1c00b01a <__rt_fc_cluster_lock_req+0x28>
1c00b002:	43d8                	lw	a4,4(a5)
1c00b004:	cb09                	beqz	a4,1c00b016 <__rt_fc_cluster_lock_req+0x24>
1c00b006:	4798                	lw	a4,8(a5)
1c00b008:	c348                	sw	a0,4(a4)
1c00b00a:	c788                	sw	a0,8(a5)
1c00b00c:	00052223          	sw	zero,4(a0)
1c00b010:	30069073          	csrw	mstatus,a3
1c00b014:	8082                	ret
1c00b016:	c3c8                	sw	a0,4(a5)
1c00b018:	bfcd                	j	1c00b00a <__rt_fc_cluster_lock_req+0x18>
1c00b01a:	4705                	li	a4,1
1c00b01c:	08e50423          	sb	a4,136(a0)
1c00b020:	4705                	li	a4,1
1c00b022:	c398                	sw	a4,0(a5)
1c00b024:	08954783          	lbu	a5,137(a0)
1c00b028:	00201737          	lui	a4,0x201
1c00b02c:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00b030:	04078793          	addi	a5,a5,64 # 1c000040 <__irq_vector_base+0x40>
1c00b034:	07da                	slli	a5,a5,0x16
1c00b036:	0007e723          	p.sw	zero,a4(a5)
1c00b03a:	bfd9                	j	1c00b010 <__rt_fc_cluster_lock_req+0x1e>
1c00b03c:	43d8                	lw	a4,4(a5)
1c00b03e:	e719                	bnez	a4,1c00b04c <__rt_fc_cluster_lock_req+0x5a>
1c00b040:	0007a023          	sw	zero,0(a5)
1c00b044:	4785                	li	a5,1
1c00b046:	08f50423          	sb	a5,136(a0)
1c00b04a:	bfe9                	j	1c00b024 <__rt_fc_cluster_lock_req+0x32>
1c00b04c:	4350                	lw	a2,4(a4)
1c00b04e:	c3d0                	sw	a2,4(a5)
1c00b050:	4785                	li	a5,1
1c00b052:	08f70423          	sb	a5,136(a4)
1c00b056:	08974783          	lbu	a5,137(a4)
1c00b05a:	00201737          	lui	a4,0x201
1c00b05e:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00b062:	04078793          	addi	a5,a5,64
1c00b066:	07da                	slli	a5,a5,0x16
1c00b068:	0007e723          	p.sw	zero,a4(a5)
1c00b06c:	bfe1                	j	1c00b044 <__rt_fc_cluster_lock_req+0x52>

1c00b06e <__rt_cbsys_add>:
  }
}

int __rt_cbsys_add(__rt_cbsys_e cbsys_id, int (*cb)(void *), void *cb_arg)
{
1c00b06e:	1101                	addi	sp,sp,-32
1c00b070:	cc22                	sw	s0,24(sp)
1c00b072:	ca26                	sw	s1,20(sp)
1c00b074:	842a                	mv	s0,a0
1c00b076:	84ae                	mv	s1,a1
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c00b078:	4501                	li	a0,0
1c00b07a:	45b1                	li	a1,12
1c00b07c:	c632                	sw	a2,12(sp)
{
1c00b07e:	ce06                	sw	ra,28(sp)
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c00b080:	2dad                	jal	1c00b6fa <rt_alloc>
  if (cbsys == NULL) return -1;
1c00b082:	4632                	lw	a2,12(sp)
1c00b084:	c115                	beqz	a0,1c00b0a8 <__rt_cbsys_add+0x3a>

  cbsys->callback = cb;
  cbsys->arg = cb_arg;
  cbsys->next = cbsys_first[cbsys_id];
1c00b086:	1b0017b7          	lui	a5,0x1b001
1c00b08a:	040a                	slli	s0,s0,0x2
1c00b08c:	ba078793          	addi	a5,a5,-1120 # 1b000ba0 <cbsys_first>
1c00b090:	97a2                	add	a5,a5,s0
1c00b092:	4398                	lw	a4,0(a5)
  cbsys->callback = cb;
1c00b094:	c104                	sw	s1,0(a0)
  cbsys->arg = cb_arg;
1c00b096:	c150                	sw	a2,4(a0)
  cbsys->next = cbsys_first[cbsys_id];
1c00b098:	c518                	sw	a4,8(a0)
  cbsys_first[cbsys_id] = cbsys;
1c00b09a:	c388                	sw	a0,0(a5)

  return 0;
1c00b09c:	4501                	li	a0,0
}
1c00b09e:	40f2                	lw	ra,28(sp)
1c00b0a0:	4462                	lw	s0,24(sp)
1c00b0a2:	44d2                	lw	s1,20(sp)
1c00b0a4:	6105                	addi	sp,sp,32
1c00b0a6:	8082                	ret
  if (cbsys == NULL) return -1;
1c00b0a8:	557d                	li	a0,-1
1c00b0aa:	bfd5                	j	1c00b09e <__rt_cbsys_add+0x30>

1c00b0ac <__rt_cbsys_exec>:


int __rt_cbsys_exec(__rt_cbsys_e cbsys_id)
{
1c00b0ac:	1141                	addi	sp,sp,-16
1c00b0ae:	c422                	sw	s0,8(sp)
  rt_cbsys_t *cbsys = cbsys_first[cbsys_id];
1c00b0b0:	1b001437          	lui	s0,0x1b001
1c00b0b4:	050a                	slli	a0,a0,0x2
1c00b0b6:	ba040413          	addi	s0,s0,-1120 # 1b000ba0 <cbsys_first>
1c00b0ba:	20a47403          	p.lw	s0,a0(s0)
{
1c00b0be:	c606                	sw	ra,12(sp)
  while (cbsys)
1c00b0c0:	e411                	bnez	s0,1c00b0cc <__rt_cbsys_exec+0x20>
  {
    if (cbsys->callback(cbsys->arg)) return -1;
    cbsys = cbsys->next;
  }

  return 0;
1c00b0c2:	4501                	li	a0,0
}
1c00b0c4:	40b2                	lw	ra,12(sp)
1c00b0c6:	4422                	lw	s0,8(sp)
1c00b0c8:	0141                	addi	sp,sp,16
1c00b0ca:	8082                	ret
    if (cbsys->callback(cbsys->arg)) return -1;
1c00b0cc:	401c                	lw	a5,0(s0)
1c00b0ce:	4048                	lw	a0,4(s0)
1c00b0d0:	9782                	jalr	a5
1c00b0d2:	e119                	bnez	a0,1c00b0d8 <__rt_cbsys_exec+0x2c>
    cbsys = cbsys->next;
1c00b0d4:	4400                	lw	s0,8(s0)
1c00b0d6:	b7ed                	j	1c00b0c0 <__rt_cbsys_exec+0x14>
    if (cbsys->callback(cbsys->arg)) return -1;
1c00b0d8:	557d                	li	a0,-1
1c00b0da:	b7ed                	j	1c00b0c4 <__rt_cbsys_exec+0x18>

1c00b0dc <__rt_utils_init>:

RT_FC_BOOT_CODE void __rt_utils_init()
{
  for (int i=0; i<RT_CBSYS_NB; i++)
  {
    cbsys_first[i] = NULL;
1c00b0dc:	1b0017b7          	lui	a5,0x1b001
1c00b0e0:	ba078793          	addi	a5,a5,-1120 # 1b000ba0 <cbsys_first>
1c00b0e4:	0007a023          	sw	zero,0(a5)
1c00b0e8:	0007a223          	sw	zero,4(a5)
1c00b0ec:	0007a423          	sw	zero,8(a5)
1c00b0f0:	0007a623          	sw	zero,12(a5)
1c00b0f4:	0007a823          	sw	zero,16(a5)
1c00b0f8:	0007aa23          	sw	zero,20(a5)
  }
}
1c00b0fc:	8082                	ret

1c00b0fe <__rt_fc_lock>:

void __rt_fc_lock(rt_fc_lock_t *lock)
{
1c00b0fe:	1141                	addi	sp,sp,-16
1c00b100:	c422                	sw	s0,8(sp)
1c00b102:	842a                	mv	s0,a0
1c00b104:	c606                	sw	ra,12(sp)
1c00b106:	c226                	sw	s1,4(sp)
1c00b108:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b10a:	300474f3          	csrrci	s1,mstatus,8
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  while(lock->locked)
1c00b10e:	401c                	lw	a5,0(s0)
1c00b110:	eb99                	bnez	a5,1c00b126 <__rt_fc_lock+0x28>
  {
    //lock->fc_wait = __rt_thread_current;
    __rt_event_execute(rt_event_internal_sched(), 1);
  }
  lock->locked = 1;
1c00b112:	4785                	li	a5,1
1c00b114:	c01c                	sw	a5,0(s0)
  __builtin_pulp_spr_write(reg, val);
1c00b116:	30049073          	csrw	mstatus,s1
  while (rt_tas_lock_32((uint32_t)&lock->lock) == -1)
  {

  }
#endif
}
1c00b11a:	40b2                	lw	ra,12(sp)
1c00b11c:	4422                	lw	s0,8(sp)
1c00b11e:	4492                	lw	s1,4(sp)
1c00b120:	4902                	lw	s2,0(sp)
1c00b122:	0141                	addi	sp,sp,16
1c00b124:	8082                	ret
    __rt_event_execute(rt_event_internal_sched(), 1);
1c00b126:	4585                	li	a1,1
1c00b128:	01c00513          	li	a0,28
1c00b12c:	2989                	jal	1c00b57e <__rt_event_execute>
1c00b12e:	b7c5                	j	1c00b10e <__rt_fc_lock+0x10>

1c00b130 <__rt_fc_unlock>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b130:	300476f3          	csrrci	a3,mstatus,8

static int __rt_fc_unlock_to_cluster(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_CLUSTER)
  if (lock->waiting) {
1c00b134:	415c                	lw	a5,4(a0)
1c00b136:	e791                	bnez	a5,1c00b142 <__rt_fc_unlock+0x12>
{
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  if (!__rt_fc_unlock_to_cluster(lock))
  {
    lock->locked = 0;    
1c00b138:	00052023          	sw	zero,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c00b13c:	30069073          	csrw	mstatus,a3
  }
  rt_irq_restore(irq);
#else
  rt_tas_unlock_32((uint32_t)&lock->lock, 0);
#endif
}
1c00b140:	8082                	ret
    lock->waiting = req->next;
1c00b142:	43d8                	lw	a4,4(a5)
1c00b144:	c158                	sw	a4,4(a0)
    req->done = 1;
1c00b146:	4705                	li	a4,1
1c00b148:	08e78423          	sb	a4,136(a5)
    __rt_cluster_notif_req_done(req->cid);
1c00b14c:	0897c783          	lbu	a5,137(a5)
  pulp_write32(evtAddr, coreSet);
1c00b150:	00201737          	lui	a4,0x201
1c00b154:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00b158:	04078793          	addi	a5,a5,64
1c00b15c:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c00b15e:	0007e723          	p.sw	zero,a4(a5)
1c00b162:	bfe9                	j	1c00b13c <__rt_fc_unlock+0xc>

1c00b164 <__rt_fc_cluster_lock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b164:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00b168:	8795                	srai	a5,a5,0x5
1c00b16a:	f267b7b3          	p.bclr	a5,a5,25,6
#if defined(ARCHI_HAS_FC)

void __rt_fc_cluster_lock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c00b16e:	08f584a3          	sb	a5,137(a1)
  req->done = 0;
  req->req_lock = 1;
1c00b172:	4785                	li	a5,1
1c00b174:	08f58523          	sb	a5,138(a1)
  event->arg[0] = (uintptr_t)callback;
1c00b178:	1c00b7b7          	lui	a5,0x1c00b
1c00b17c:	ff278793          	addi	a5,a5,-14 # 1c00aff2 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c00b180:	c188                	sw	a0,0(a1)
  req->done = 0;
1c00b182:	08058423          	sb	zero,136(a1)
  event->implem.pending = 0;
1c00b186:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c00b18a:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c00b18e:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c00b190:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c00b192:	05a1                	addi	a1,a1,8

// This function will push an event from cluster to FC and the event callback
// will be executed directly from within the interrupt handler
static inline void __rt_cluster_push_fc_irq_event(rt_event_t *event)
{
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)event) | 0x1));
1c00b194:	c005c533          	p.bset	a0,a1,0,0
1c00b198:	2b80106f          	j	1c00c450 <__rt_cluster_push_fc_event>

1c00b19c <__rt_fc_cluster_unlock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b19c:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00b1a0:	8795                	srai	a5,a5,0x5
1c00b1a2:	f267b7b3          	p.bclr	a5,a5,25,6
}

void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c00b1a6:	08f584a3          	sb	a5,137(a1)
  event->arg[0] = (uintptr_t)callback;
1c00b1aa:	1c00b7b7          	lui	a5,0x1c00b
1c00b1ae:	ff278793          	addi	a5,a5,-14 # 1c00aff2 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c00b1b2:	c188                	sw	a0,0(a1)
  req->done = 0;
1c00b1b4:	08058423          	sb	zero,136(a1)
  req->req_lock = 0;
1c00b1b8:	08058523          	sb	zero,138(a1)
  event->implem.pending = 0;
1c00b1bc:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c00b1c0:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c00b1c4:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c00b1c6:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c00b1c8:	05a1                	addi	a1,a1,8
1c00b1ca:	c005c533          	p.bset	a0,a1,0,0
1c00b1ce:	2820106f          	j	1c00c450 <__rt_cluster_push_fc_event>

1c00b1d2 <__rt_event_enqueue>:

    __rt_wait_event_check(event, call_event);
  }

  rt_irq_restore(irq);
}
1c00b1d2:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c00b1d6:	00052023          	sw	zero,0(a0)
1c00b1da:	01c00713          	li	a4,28
1c00b1de:	c689                	beqz	a3,1c00b1e8 <__rt_event_enqueue+0x16>
1c00b1e0:	435c                	lw	a5,4(a4)
1c00b1e2:	c388                	sw	a0,0(a5)
1c00b1e4:	c348                	sw	a0,4(a4)
1c00b1e6:	8082                	ret
1c00b1e8:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00b1ec:	bfe5                	j	1c00b1e4 <__rt_event_enqueue+0x12>

1c00b1ee <__rt_bridge_check_bridge_req.part.5>:
1c00b1ee:	1c00f737          	lui	a4,0x1c00f
1c00b1f2:	4a070793          	addi	a5,a4,1184 # 1c00f4a0 <__hal_debug_struct>
1c00b1f6:	0a47a783          	lw	a5,164(a5)
1c00b1fa:	4a070713          	addi	a4,a4,1184
1c00b1fe:	c789                	beqz	a5,1c00b208 <__rt_bridge_check_bridge_req.part.5+0x1a>
1c00b200:	4f94                	lw	a3,24(a5)
1c00b202:	e681                	bnez	a3,1c00b20a <__rt_bridge_check_bridge_req.part.5+0x1c>
1c00b204:	0af72623          	sw	a5,172(a4)
1c00b208:	8082                	ret
1c00b20a:	479c                	lw	a5,8(a5)
1c00b20c:	bfcd                	j	1c00b1fe <__rt_bridge_check_bridge_req.part.5+0x10>

1c00b20e <__rt_bridge_wait>:
1c00b20e:	014027f3          	csrr	a5,uhartid
1c00b212:	02000713          	li	a4,32
1c00b216:	ca5797b3          	p.extractu	a5,a5,5,5
1c00b21a:	02e79c63          	bne	a5,a4,1c00b252 <__rt_bridge_wait+0x44>
1c00b21e:	1141                	addi	sp,sp,-16
1c00b220:	c422                	sw	s0,8(sp)
1c00b222:	1a106437          	lui	s0,0x1a106
1c00b226:	c606                	sw	ra,12(sp)
1c00b228:	00442783          	lw	a5,4(s0) # 1a106004 <__l1_end+0xa105fc0>
1c00b22c:	c187b7b3          	p.bclr	a5,a5,0,24
1c00b230:	00f42223          	sw	a5,4(s0)
1c00b234:	4585                	li	a1,1
1c00b236:	03800513          	li	a0,56
1c00b23a:	18f000ef          	jal	ra,1c00bbc8 <__rt_periph_wait_event>
1c00b23e:	00442783          	lw	a5,4(s0)
1c00b242:	c187c7b3          	p.bset	a5,a5,0,24
1c00b246:	00f42223          	sw	a5,4(s0)
1c00b24a:	40b2                	lw	ra,12(sp)
1c00b24c:	4422                	lw	s0,8(sp)
1c00b24e:	0141                	addi	sp,sp,16
1c00b250:	8082                	ret
1c00b252:	8082                	ret

1c00b254 <__rt_bridge_handle_notif>:
1c00b254:	1141                	addi	sp,sp,-16
1c00b256:	c422                	sw	s0,8(sp)
1c00b258:	1c00f437          	lui	s0,0x1c00f
1c00b25c:	4a040793          	addi	a5,s0,1184 # 1c00f4a0 <__hal_debug_struct>
1c00b260:	0a47a783          	lw	a5,164(a5)
1c00b264:	c606                	sw	ra,12(sp)
1c00b266:	c226                	sw	s1,4(sp)
1c00b268:	c04a                	sw	s2,0(sp)
1c00b26a:	4a040413          	addi	s0,s0,1184
1c00b26e:	c399                	beqz	a5,1c00b274 <__rt_bridge_handle_notif+0x20>
1c00b270:	4bd8                	lw	a4,20(a5)
1c00b272:	e31d                	bnez	a4,1c00b298 <__rt_bridge_handle_notif+0x44>
1c00b274:	0b442783          	lw	a5,180(s0)
1c00b278:	c791                	beqz	a5,1c00b284 <__rt_bridge_handle_notif+0x30>
1c00b27a:	43a8                	lw	a0,64(a5)
1c00b27c:	0a042a23          	sw	zero,180(s0)
1c00b280:	f53ff0ef          	jal	ra,1c00b1d2 <__rt_event_enqueue>
1c00b284:	0ac42783          	lw	a5,172(s0)
1c00b288:	ef85                	bnez	a5,1c00b2c0 <__rt_bridge_handle_notif+0x6c>
1c00b28a:	4422                	lw	s0,8(sp)
1c00b28c:	40b2                	lw	ra,12(sp)
1c00b28e:	4492                	lw	s1,4(sp)
1c00b290:	4902                	lw	s2,0(sp)
1c00b292:	0141                	addi	sp,sp,16
1c00b294:	f5bff06f          	j	1c00b1ee <__rt_bridge_check_bridge_req.part.5>
1c00b298:	4784                	lw	s1,8(a5)
1c00b29a:	4fd8                	lw	a4,28(a5)
1c00b29c:	0a942223          	sw	s1,164(s0)
1c00b2a0:	cb01                	beqz	a4,1c00b2b0 <__rt_bridge_handle_notif+0x5c>
1c00b2a2:	0b042703          	lw	a4,176(s0)
1c00b2a6:	c798                	sw	a4,8(a5)
1c00b2a8:	0af42823          	sw	a5,176(s0)
1c00b2ac:	87a6                	mv	a5,s1
1c00b2ae:	b7c1                	j	1c00b26e <__rt_bridge_handle_notif+0x1a>
1c00b2b0:	43a8                	lw	a0,64(a5)
1c00b2b2:	30047973          	csrrci	s2,mstatus,8
1c00b2b6:	f1dff0ef          	jal	ra,1c00b1d2 <__rt_event_enqueue>
1c00b2ba:	30091073          	csrw	mstatus,s2
1c00b2be:	b7fd                	j	1c00b2ac <__rt_bridge_handle_notif+0x58>
1c00b2c0:	40b2                	lw	ra,12(sp)
1c00b2c2:	4422                	lw	s0,8(sp)
1c00b2c4:	4492                	lw	s1,4(sp)
1c00b2c6:	4902                	lw	s2,0(sp)
1c00b2c8:	0141                	addi	sp,sp,16
1c00b2ca:	8082                	ret

1c00b2cc <__rt_bridge_check_connection>:
1c00b2cc:	1c00f6b7          	lui	a3,0x1c00f
1c00b2d0:	4a068693          	addi	a3,a3,1184 # 1c00f4a0 <__hal_debug_struct>
1c00b2d4:	469c                	lw	a5,8(a3)
1c00b2d6:	e3a1                	bnez	a5,1c00b316 <__rt_bridge_check_connection+0x4a>
1c00b2d8:	1a1047b7          	lui	a5,0x1a104
1c00b2dc:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104030>
1c00b2e0:	4398                	lw	a4,0(a5)
1c00b2e2:	8325                	srli	a4,a4,0x9
1c00b2e4:	f8373733          	p.bclr	a4,a4,28,3
1c00b2e8:	02773763          	p.bneimm	a4,7,1c00b316 <__rt_bridge_check_connection+0x4a>
1c00b2ec:	1141                	addi	sp,sp,-16
1c00b2ee:	c422                	sw	s0,8(sp)
1c00b2f0:	c606                	sw	ra,12(sp)
1c00b2f2:	4705                	li	a4,1
1c00b2f4:	c698                	sw	a4,8(a3)
1c00b2f6:	4709                	li	a4,2
1c00b2f8:	c398                	sw	a4,0(a5)
1c00b2fa:	843e                	mv	s0,a5
1c00b2fc:	401c                	lw	a5,0(s0)
1c00b2fe:	83a5                	srli	a5,a5,0x9
1c00b300:	f837b7b3          	p.bclr	a5,a5,28,3
1c00b304:	0077a663          	p.beqimm	a5,7,1c00b310 <__rt_bridge_check_connection+0x44>
1c00b308:	40b2                	lw	ra,12(sp)
1c00b30a:	4422                	lw	s0,8(sp)
1c00b30c:	0141                	addi	sp,sp,16
1c00b30e:	8082                	ret
1c00b310:	effff0ef          	jal	ra,1c00b20e <__rt_bridge_wait>
1c00b314:	b7e5                	j	1c00b2fc <__rt_bridge_check_connection+0x30>
1c00b316:	8082                	ret

1c00b318 <__rt_bridge_set_available>:
1c00b318:	1c00f7b7          	lui	a5,0x1c00f
1c00b31c:	4a078793          	addi	a5,a5,1184 # 1c00f4a0 <__hal_debug_struct>
1c00b320:	4798                	lw	a4,8(a5)
1c00b322:	1a1047b7          	lui	a5,0x1a104
1c00b326:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104030>
1c00b32a:	e701                	bnez	a4,1c00b332 <__rt_bridge_set_available+0x1a>
1c00b32c:	4721                	li	a4,8
1c00b32e:	c398                	sw	a4,0(a5)
1c00b330:	8082                	ret
1c00b332:	4709                	li	a4,2
1c00b334:	bfed                	j	1c00b32e <__rt_bridge_set_available+0x16>

1c00b336 <__rt_bridge_send_notif>:
1c00b336:	1141                	addi	sp,sp,-16
1c00b338:	c606                	sw	ra,12(sp)
1c00b33a:	f93ff0ef          	jal	ra,1c00b2cc <__rt_bridge_check_connection>
1c00b33e:	1c00f7b7          	lui	a5,0x1c00f
1c00b342:	4a078793          	addi	a5,a5,1184 # 1c00f4a0 <__hal_debug_struct>
1c00b346:	479c                	lw	a5,8(a5)
1c00b348:	c789                	beqz	a5,1c00b352 <__rt_bridge_send_notif+0x1c>
1c00b34a:	1a1047b7          	lui	a5,0x1a104
1c00b34e:	4719                	li	a4,6
1c00b350:	dbf8                	sw	a4,116(a5)
1c00b352:	40b2                	lw	ra,12(sp)
1c00b354:	0141                	addi	sp,sp,16
1c00b356:	8082                	ret

1c00b358 <__rt_bridge_clear_notif>:
  #endif
  }
}

void __rt_bridge_clear_notif()
{
1c00b358:	1141                	addi	sp,sp,-16
1c00b35a:	c606                	sw	ra,12(sp)
  hal_debug_struct_t *debug_struct = hal_debug_struct_get();

  __rt_bridge_check_connection();
1c00b35c:	f71ff0ef          	jal	ra,1c00b2cc <__rt_bridge_check_connection>

  if (debug_struct->bridge.connected)
1c00b360:	1c00f7b7          	lui	a5,0x1c00f
1c00b364:	4a078793          	addi	a5,a5,1184 # 1c00f4a0 <__hal_debug_struct>
1c00b368:	479c                	lw	a5,8(a5)
1c00b36a:	c789                	beqz	a5,1c00b374 <__rt_bridge_clear_notif+0x1c>
  {
    __rt_bridge_set_available();
  }
}
1c00b36c:	40b2                	lw	ra,12(sp)
1c00b36e:	0141                	addi	sp,sp,16
    __rt_bridge_set_available();
1c00b370:	fa9ff06f          	j	1c00b318 <__rt_bridge_set_available>
}
1c00b374:	40b2                	lw	ra,12(sp)
1c00b376:	0141                	addi	sp,sp,16
1c00b378:	8082                	ret

1c00b37a <__rt_bridge_printf_flush>:
{
1c00b37a:	1141                	addi	sp,sp,-16
1c00b37c:	c422                	sw	s0,8(sp)
1c00b37e:	c606                	sw	ra,12(sp)
  if (debug_struct->bridge.connected)
1c00b380:	1c00f437          	lui	s0,0x1c00f
  __rt_bridge_check_connection();
1c00b384:	f49ff0ef          	jal	ra,1c00b2cc <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c00b388:	4a040793          	addi	a5,s0,1184 # 1c00f4a0 <__hal_debug_struct>
1c00b38c:	479c                	lw	a5,8(a5)
1c00b38e:	c39d                	beqz	a5,1c00b3b4 <__rt_bridge_printf_flush+0x3a>
1c00b390:	4a040413          	addi	s0,s0,1184
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
}

static inline int hal_debug_is_busy(hal_debug_struct_t *debug_struct)
{
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c00b394:	485c                	lw	a5,20(s0)
    if (hal_debug_is_busy(hal_debug_struct_get()) || !hal_debug_is_empty(hal_debug_struct_get()))
1c00b396:	e399                	bnez	a5,1c00b39c <__rt_bridge_printf_flush+0x22>
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
1c00b398:	4c1c                	lw	a5,24(s0)
1c00b39a:	cf89                	beqz	a5,1c00b3b4 <__rt_bridge_printf_flush+0x3a>
      __rt_bridge_send_notif();
1c00b39c:	f9bff0ef          	jal	ra,1c00b336 <__rt_bridge_send_notif>
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c00b3a0:	485c                	lw	a5,20(s0)
      while(hal_debug_is_busy(hal_debug_struct_get()))
1c00b3a2:	e791                	bnez	a5,1c00b3ae <__rt_bridge_printf_flush+0x34>
}
1c00b3a4:	4422                	lw	s0,8(sp)
1c00b3a6:	40b2                	lw	ra,12(sp)
1c00b3a8:	0141                	addi	sp,sp,16
      __rt_bridge_clear_notif();
1c00b3aa:	fafff06f          	j	1c00b358 <__rt_bridge_clear_notif>
        __rt_bridge_wait();
1c00b3ae:	e61ff0ef          	jal	ra,1c00b20e <__rt_bridge_wait>
1c00b3b2:	b7fd                	j	1c00b3a0 <__rt_bridge_printf_flush+0x26>
}
1c00b3b4:	40b2                	lw	ra,12(sp)
1c00b3b6:	4422                	lw	s0,8(sp)
1c00b3b8:	0141                	addi	sp,sp,16
1c00b3ba:	8082                	ret

1c00b3bc <__rt_bridge_req_shutdown>:
{
1c00b3bc:	1141                	addi	sp,sp,-16
1c00b3be:	c606                	sw	ra,12(sp)
1c00b3c0:	c422                	sw	s0,8(sp)
  __rt_bridge_check_connection();
1c00b3c2:	f0bff0ef          	jal	ra,1c00b2cc <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c00b3c6:	1c00f7b7          	lui	a5,0x1c00f
1c00b3ca:	4a078793          	addi	a5,a5,1184 # 1c00f4a0 <__hal_debug_struct>
1c00b3ce:	479c                	lw	a5,8(a5)
1c00b3d0:	c7a9                	beqz	a5,1c00b41a <__rt_bridge_req_shutdown+0x5e>




static inline unsigned int apb_soc_jtag_reg_read() {
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00b3d2:	1a104437          	lui	s0,0x1a104
    __rt_bridge_printf_flush();
1c00b3d6:	fa5ff0ef          	jal	ra,1c00b37a <__rt_bridge_printf_flush>
1c00b3da:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c00b3de:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c00b3e0:	83a5                	srli	a5,a5,0x9
1c00b3e2:	f837b7b3          	p.bclr	a5,a5,28,3
1c00b3e6:	0277ae63          	p.beqimm	a5,7,1c00b422 <__rt_bridge_req_shutdown+0x66>
}

static inline void apb_soc_jtag_reg_write(unsigned int value) {
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00b3ea:	4791                	li	a5,4
1c00b3ec:	c01c                	sw	a5,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00b3ee:	1a104437          	lui	s0,0x1a104
1c00b3f2:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c00b3f6:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) != 7)
1c00b3f8:	83a5                	srli	a5,a5,0x9
1c00b3fa:	f837b7b3          	p.bclr	a5,a5,28,3
1c00b3fe:	0277b563          	p.bneimm	a5,7,1c00b428 <__rt_bridge_req_shutdown+0x6c>
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00b402:	00042023          	sw	zero,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00b406:	1a104437          	lui	s0,0x1a104
1c00b40a:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c00b40e:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c00b410:	83a5                	srli	a5,a5,0x9
1c00b412:	f837b7b3          	p.bclr	a5,a5,28,3
1c00b416:	0077ac63          	p.beqimm	a5,7,1c00b42e <__rt_bridge_req_shutdown+0x72>
}
1c00b41a:	40b2                	lw	ra,12(sp)
1c00b41c:	4422                	lw	s0,8(sp)
1c00b41e:	0141                	addi	sp,sp,16
1c00b420:	8082                	ret
      __rt_bridge_wait();
1c00b422:	dedff0ef          	jal	ra,1c00b20e <__rt_bridge_wait>
1c00b426:	bf65                	j	1c00b3de <__rt_bridge_req_shutdown+0x22>
      __rt_bridge_wait();
1c00b428:	de7ff0ef          	jal	ra,1c00b20e <__rt_bridge_wait>
1c00b42c:	b7e9                	j	1c00b3f6 <__rt_bridge_req_shutdown+0x3a>
      __rt_bridge_wait();
1c00b42e:	de1ff0ef          	jal	ra,1c00b20e <__rt_bridge_wait>
1c00b432:	bff1                	j	1c00b40e <__rt_bridge_req_shutdown+0x52>

1c00b434 <__rt_bridge_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_bridge_init()
{
  hal_bridge_t *bridge = hal_bridge_get();
  
  bridge->first_req = 0;
1c00b434:	1c00f7b7          	lui	a5,0x1c00f
  bridge->notif_req_addr = ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET;
  bridge->notif_req_value = 1<<RT_BRIDGE_ENQUEUE_EVENT;
#else
#if defined(EU_VERSION) && EU_VERSION >= 3
#if defined(ARCHI_HAS_FC)
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c00b438:	1b201737          	lui	a4,0x1b201
  bridge->first_req = 0;
1c00b43c:	4a078793          	addi	a5,a5,1184 # 1c00f4a0 <__hal_debug_struct>
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c00b440:	e1070713          	addi	a4,a4,-496 # 1b200e10 <__fc_tcdm_end+0x1ffa40>
1c00b444:	0ae7ac23          	sw	a4,184(a5)
  bridge->notif_req_value = 1;
1c00b448:	4705                	li	a4,1
  bridge->first_req = 0;
1c00b44a:	0a07a223          	sw	zero,164(a5)
  bridge->first_bridge_req = 0;
1c00b44e:	0a07a623          	sw	zero,172(a5)
  bridge->target_req = 0;
1c00b452:	0a07aa23          	sw	zero,180(a5)
  bridge->notif_req_value = 1;
1c00b456:	0ae7ae23          	sw	a4,188(a5)
#endif
#endif
#endif

  __rt_bridge_eeprom_handle = NULL;
1c00b45a:	00400793          	li	a5,4
1c00b45e:	0007a823          	sw	zero,16(a5)
  __rt_bridge_flash_handle = NULL;
1c00b462:	0007a023          	sw	zero,0(a5)
}
1c00b466:	8082                	ret

1c00b468 <__rt_event_init>:
{
  __rt_event_execute(sched, 0);
  rt_wait_for_interrupt();
  rt_irq_enable();
  rt_irq_disable();
}
1c00b468:	1141                	addi	sp,sp,-16
1c00b46a:	c422                	sw	s0,8(sp)
1c00b46c:	c606                	sw	ra,12(sp)
1c00b46e:	842a                	mv	s0,a0
1c00b470:	02052223          	sw	zero,36(a0)
1c00b474:	02052423          	sw	zero,40(a0)
1c00b478:	45c1                	li	a1,16
1c00b47a:	4501                	li	a0,0
1c00b47c:	2cbd                	jal	1c00b6fa <rt_alloc>
1c00b47e:	dc68                	sw	a0,124(s0)
1c00b480:	02042a23          	sw	zero,52(s0)
1c00b484:	00042223          	sw	zero,4(s0)
1c00b488:	40b2                	lw	ra,12(sp)
1c00b48a:	4422                	lw	s0,8(sp)
1c00b48c:	0141                	addi	sp,sp,16
1c00b48e:	8082                	ret

1c00b490 <__rt_wait_event_prepare_blocking>:
1c00b490:	01800793          	li	a5,24
1c00b494:	4388                	lw	a0,0(a5)
1c00b496:	4118                	lw	a4,0(a0)
1c00b498:	02052423          	sw	zero,40(a0)
1c00b49c:	00052223          	sw	zero,4(a0)
1c00b4a0:	c398                	sw	a4,0(a5)
1c00b4a2:	4785                	li	a5,1
1c00b4a4:	d15c                	sw	a5,36(a0)
1c00b4a6:	8082                	ret

1c00b4a8 <rt_event_alloc>:
1c00b4a8:	1101                	addi	sp,sp,-32
1c00b4aa:	c64e                	sw	s3,12(sp)
1c00b4ac:	89ae                	mv	s3,a1
1c00b4ae:	ce06                	sw	ra,28(sp)
1c00b4b0:	cc22                	sw	s0,24(sp)
1c00b4b2:	ca26                	sw	s1,20(sp)
1c00b4b4:	c84a                	sw	s2,16(sp)
1c00b4b6:	c452                	sw	s4,8(sp)
1c00b4b8:	c256                	sw	s5,4(sp)
1c00b4ba:	30047a73          	csrrci	s4,mstatus,8
1c00b4be:	014027f3          	csrr	a5,uhartid
1c00b4c2:	8795                	srai	a5,a5,0x5
1c00b4c4:	f267b7b3          	p.bclr	a5,a5,25,6
1c00b4c8:	02000713          	li	a4,32
1c00b4cc:	00278513          	addi	a0,a5,2
1c00b4d0:	00e79363          	bne	a5,a4,1c00b4d6 <rt_event_alloc+0x2e>
1c00b4d4:	4505                	li	a0,1
1c00b4d6:	00799593          	slli	a1,s3,0x7
1c00b4da:	2405                	jal	1c00b6fa <rt_alloc>
1c00b4dc:	842a                	mv	s0,a0
1c00b4de:	557d                	li	a0,-1
1c00b4e0:	c819                	beqz	s0,1c00b4f6 <rt_event_alloc+0x4e>
1c00b4e2:	01800493          	li	s1,24
1c00b4e6:	4901                	li	s2,0
1c00b4e8:	00448a93          	addi	s5,s1,4
1c00b4ec:	01394e63          	blt	s2,s3,1c00b508 <rt_event_alloc+0x60>
1c00b4f0:	300a1073          	csrw	mstatus,s4
1c00b4f4:	4501                	li	a0,0
1c00b4f6:	40f2                	lw	ra,28(sp)
1c00b4f8:	4462                	lw	s0,24(sp)
1c00b4fa:	44d2                	lw	s1,20(sp)
1c00b4fc:	4942                	lw	s2,16(sp)
1c00b4fe:	49b2                	lw	s3,12(sp)
1c00b500:	4a22                	lw	s4,8(sp)
1c00b502:	4a92                	lw	s5,4(sp)
1c00b504:	6105                	addi	sp,sp,32
1c00b506:	8082                	ret
1c00b508:	8522                	mv	a0,s0
1c00b50a:	85d6                	mv	a1,s5
1c00b50c:	f5dff0ef          	jal	ra,1c00b468 <__rt_event_init>
1c00b510:	409c                	lw	a5,0(s1)
1c00b512:	0905                	addi	s2,s2,1
1c00b514:	c01c                	sw	a5,0(s0)
1c00b516:	c080                	sw	s0,0(s1)
1c00b518:	08040413          	addi	s0,s0,128
1c00b51c:	bfc1                	j	1c00b4ec <rt_event_alloc+0x44>

1c00b51e <rt_event_get>:
1c00b51e:	30047773          	csrrci	a4,mstatus,8
1c00b522:	01800793          	li	a5,24
1c00b526:	4388                	lw	a0,0(a5)
1c00b528:	c509                	beqz	a0,1c00b532 <rt_event_get+0x14>
1c00b52a:	4114                	lw	a3,0(a0)
1c00b52c:	c14c                	sw	a1,4(a0)
1c00b52e:	c510                	sw	a2,8(a0)
1c00b530:	c394                	sw	a3,0(a5)
1c00b532:	30071073          	csrw	mstatus,a4
1c00b536:	8082                	ret

1c00b538 <rt_event_get_blocking>:
1c00b538:	30047773          	csrrci	a4,mstatus,8
1c00b53c:	01800793          	li	a5,24
1c00b540:	4388                	lw	a0,0(a5)
1c00b542:	c909                	beqz	a0,1c00b554 <rt_event_get_blocking+0x1c>
1c00b544:	4114                	lw	a3,0(a0)
1c00b546:	00052223          	sw	zero,4(a0)
1c00b54a:	00052423          	sw	zero,8(a0)
1c00b54e:	c394                	sw	a3,0(a5)
1c00b550:	4785                	li	a5,1
1c00b552:	d15c                	sw	a5,36(a0)
1c00b554:	30071073          	csrw	mstatus,a4
1c00b558:	8082                	ret

1c00b55a <rt_event_push>:
1c00b55a:	30047773          	csrrci	a4,mstatus,8
1c00b55e:	01800693          	li	a3,24
1c00b562:	42d4                	lw	a3,4(a3)
1c00b564:	00052023          	sw	zero,0(a0)
1c00b568:	01800793          	li	a5,24
1c00b56c:	e691                	bnez	a3,1c00b578 <rt_event_push+0x1e>
1c00b56e:	c3c8                	sw	a0,4(a5)
1c00b570:	c788                	sw	a0,8(a5)
1c00b572:	30071073          	csrw	mstatus,a4
1c00b576:	8082                	ret
1c00b578:	4794                	lw	a3,8(a5)
1c00b57a:	c288                	sw	a0,0(a3)
1c00b57c:	bfd5                	j	1c00b570 <rt_event_push+0x16>

1c00b57e <__rt_event_execute>:
1c00b57e:	1141                	addi	sp,sp,-16
1c00b580:	c422                	sw	s0,8(sp)
1c00b582:	01800793          	li	a5,24
1c00b586:	43dc                	lw	a5,4(a5)
1c00b588:	c606                	sw	ra,12(sp)
1c00b58a:	c226                	sw	s1,4(sp)
1c00b58c:	01800413          	li	s0,24
1c00b590:	ef81                	bnez	a5,1c00b5a8 <__rt_event_execute+0x2a>
1c00b592:	c1b9                	beqz	a1,1c00b5d8 <__rt_event_execute+0x5a>
1c00b594:	002047b7          	lui	a5,0x204
1c00b598:	0387e703          	p.elw	a4,56(a5) # 204038 <__L2+0x184038>
1c00b59c:	300467f3          	csrrsi	a5,mstatus,8
1c00b5a0:	300477f3          	csrrci	a5,mstatus,8
1c00b5a4:	405c                	lw	a5,4(s0)
1c00b5a6:	cb8d                	beqz	a5,1c00b5d8 <__rt_event_execute+0x5a>
1c00b5a8:	4485                	li	s1,1
1c00b5aa:	4398                	lw	a4,0(a5)
1c00b5ac:	5794                	lw	a3,40(a5)
1c00b5ae:	00978a23          	sb	s1,20(a5)
1c00b5b2:	c058                	sw	a4,4(s0)
1c00b5b4:	4788                	lw	a0,8(a5)
1c00b5b6:	43d8                	lw	a4,4(a5)
1c00b5b8:	e691                	bnez	a3,1c00b5c4 <__rt_event_execute+0x46>
1c00b5ba:	53d4                	lw	a3,36(a5)
1c00b5bc:	e681                	bnez	a3,1c00b5c4 <__rt_event_execute+0x46>
1c00b5be:	4014                	lw	a3,0(s0)
1c00b5c0:	c394                	sw	a3,0(a5)
1c00b5c2:	c01c                	sw	a5,0(s0)
1c00b5c4:	0207a223          	sw	zero,36(a5)
1c00b5c8:	c711                	beqz	a4,1c00b5d4 <__rt_event_execute+0x56>
1c00b5ca:	300467f3          	csrrsi	a5,mstatus,8
1c00b5ce:	9702                	jalr	a4
1c00b5d0:	300477f3          	csrrci	a5,mstatus,8
1c00b5d4:	405c                	lw	a5,4(s0)
1c00b5d6:	fbf1                	bnez	a5,1c00b5aa <__rt_event_execute+0x2c>
1c00b5d8:	40b2                	lw	ra,12(sp)
1c00b5da:	4422                	lw	s0,8(sp)
1c00b5dc:	4492                	lw	s1,4(sp)
1c00b5de:	0141                	addi	sp,sp,16
1c00b5e0:	8082                	ret

1c00b5e2 <__rt_wait_event>:
  } while(event);

}

void __rt_wait_event(rt_event_t *event)
{
1c00b5e2:	1141                	addi	sp,sp,-16
1c00b5e4:	c422                	sw	s0,8(sp)
1c00b5e6:	c606                	sw	ra,12(sp)
1c00b5e8:	842a                	mv	s0,a0
  while (event->implem.pending || event->implem.saved_pending) {
1c00b5ea:	505c                	lw	a5,36(s0)
1c00b5ec:	ef81                	bnez	a5,1c00b604 <__rt_wait_event+0x22>
1c00b5ee:	585c                	lw	a5,52(s0)
1c00b5f0:	eb91                	bnez	a5,1c00b604 <__rt_wait_event+0x22>
    __rt_event_execute(NULL, 1);
  }

  event->next = __rt_first_free;
1c00b5f2:	01800793          	li	a5,24
1c00b5f6:	4398                	lw	a4,0(a5)
  __rt_first_free = event;
}
1c00b5f8:	40b2                	lw	ra,12(sp)
  event->next = __rt_first_free;
1c00b5fa:	c018                	sw	a4,0(s0)
  __rt_first_free = event;
1c00b5fc:	c380                	sw	s0,0(a5)
}
1c00b5fe:	4422                	lw	s0,8(sp)
1c00b600:	0141                	addi	sp,sp,16
1c00b602:	8082                	ret
    __rt_event_execute(NULL, 1);
1c00b604:	4585                	li	a1,1
1c00b606:	4501                	li	a0,0
1c00b608:	f77ff0ef          	jal	ra,1c00b57e <__rt_event_execute>
1c00b60c:	bff9                	j	1c00b5ea <__rt_wait_event+0x8>

1c00b60e <rt_event_wait>:

void rt_event_wait(rt_event_t *event)
{
1c00b60e:	1141                	addi	sp,sp,-16
1c00b610:	c606                	sw	ra,12(sp)
1c00b612:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b614:	30047473          	csrrci	s0,mstatus,8
  int irq = rt_irq_disable();
__rt_wait_event(event);
1c00b618:	fcbff0ef          	jal	ra,1c00b5e2 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00b61c:	30041073          	csrw	mstatus,s0
  rt_irq_restore(irq);
}
1c00b620:	40b2                	lw	ra,12(sp)
1c00b622:	4422                	lw	s0,8(sp)
1c00b624:	0141                	addi	sp,sp,16
1c00b626:	8082                	ret

1c00b628 <__rt_event_sched_init>:

void __rt_event_sched_init()
{
  __rt_first_free = NULL;
1c00b628:	01800513          	li	a0,24
1c00b62c:	00052023          	sw	zero,0(a0)
  sched->first = NULL;
1c00b630:	00052223          	sw	zero,4(a0)
  rt_event_sched_init(&__rt_sched);
  // Push one event ot the runtime scheduler as some runtime services need
  // one event.
  rt_event_alloc(&__rt_sched, 1);
1c00b634:	4585                	li	a1,1
1c00b636:	0511                	addi	a0,a0,4
1c00b638:	e71ff06f          	j	1c00b4a8 <rt_event_alloc>

1c00b63c <pi_task_push_delayed_us>:
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
  rt_event_push_delayed(task, delay);
1c00b63c:	ac35                	j	1c00b878 <rt_event_push_delayed>

1c00b63e <pi_cl_send_task_to_fc>:
}

static inline void __rt_task_init_from_cluster(pi_task_t *task)
{
  task->implem.keep = 1;
1c00b63e:	4785                	li	a5,1
1c00b640:	d51c                	sw	a5,40(a0)
#ifdef ARCHI_HAS_CLUSTER

void pi_cl_send_task_to_fc(pi_task_t *task)
{
  __rt_task_init_from_cluster(task);
  __rt_cluster_push_fc_event(task);
1c00b642:	60f0006f          	j	1c00c450 <__rt_cluster_push_fc_event>

1c00b646 <rt_user_alloc_init>:
  rt_alloc_cluster(RT_ALLOC_PERIPH, size, (rt_alloc_req_t *)req);
}

void pi_cl_l2_free(void *chunk, int size, pi_cl_free_req_t *req)
{
  rt_free_cluster(RT_ALLOC_PERIPH, chunk, size, (rt_free_req_t *)req);
1c00b646:	00758793          	addi	a5,a1,7
1c00b64a:	c407b7b3          	p.bclr	a5,a5,2,0
1c00b64e:	40b785b3          	sub	a1,a5,a1
1c00b652:	c11c                	sw	a5,0(a0)
1c00b654:	8e0d                	sub	a2,a2,a1
1c00b656:	00c05763          	blez	a2,1c00b664 <rt_user_alloc_init+0x1e>
1c00b65a:	c4063633          	p.bclr	a2,a2,2,0
1c00b65e:	c390                	sw	a2,0(a5)
1c00b660:	0007a223          	sw	zero,4(a5)
1c00b664:	8082                	ret

1c00b666 <rt_user_alloc>:
1c00b666:	411c                	lw	a5,0(a0)
1c00b668:	059d                	addi	a1,a1,7
1c00b66a:	c405b5b3          	p.bclr	a1,a1,2,0
1c00b66e:	4701                	li	a4,0
1c00b670:	cb89                	beqz	a5,1c00b682 <rt_user_alloc+0x1c>
1c00b672:	4394                	lw	a3,0(a5)
1c00b674:	43d0                	lw	a2,4(a5)
1c00b676:	00b6c863          	blt	a3,a1,1c00b686 <rt_user_alloc+0x20>
1c00b67a:	00b69b63          	bne	a3,a1,1c00b690 <rt_user_alloc+0x2a>
1c00b67e:	c719                	beqz	a4,1c00b68c <rt_user_alloc+0x26>
1c00b680:	c350                	sw	a2,4(a4)
1c00b682:	853e                	mv	a0,a5
1c00b684:	8082                	ret
1c00b686:	873e                	mv	a4,a5
1c00b688:	87b2                	mv	a5,a2
1c00b68a:	b7dd                	j	1c00b670 <rt_user_alloc+0xa>
1c00b68c:	c110                	sw	a2,0(a0)
1c00b68e:	bfd5                	j	1c00b682 <rt_user_alloc+0x1c>
1c00b690:	00b78833          	add	a6,a5,a1
1c00b694:	40b685b3          	sub	a1,a3,a1
1c00b698:	00b82023          	sw	a1,0(a6)
1c00b69c:	00c82223          	sw	a2,4(a6)
1c00b6a0:	c701                	beqz	a4,1c00b6a8 <rt_user_alloc+0x42>
1c00b6a2:	01072223          	sw	a6,4(a4)
1c00b6a6:	bff1                	j	1c00b682 <rt_user_alloc+0x1c>
1c00b6a8:	01052023          	sw	a6,0(a0)
1c00b6ac:	bfd9                	j	1c00b682 <rt_user_alloc+0x1c>

1c00b6ae <rt_user_free>:
1c00b6ae:	411c                	lw	a5,0(a0)
1c00b6b0:	061d                	addi	a2,a2,7
1c00b6b2:	c4063633          	p.bclr	a2,a2,2,0
1c00b6b6:	4701                	li	a4,0
1c00b6b8:	c399                	beqz	a5,1c00b6be <rt_user_free+0x10>
1c00b6ba:	02b7e763          	bltu	a5,a1,1c00b6e8 <rt_user_free+0x3a>
1c00b6be:	00c586b3          	add	a3,a1,a2
1c00b6c2:	02d79663          	bne	a5,a3,1c00b6ee <rt_user_free+0x40>
1c00b6c6:	4394                	lw	a3,0(a5)
1c00b6c8:	43dc                	lw	a5,4(a5)
1c00b6ca:	9636                	add	a2,a2,a3
1c00b6cc:	c190                	sw	a2,0(a1)
1c00b6ce:	c1dc                	sw	a5,4(a1)
1c00b6d0:	c31d                	beqz	a4,1c00b6f6 <rt_user_free+0x48>
1c00b6d2:	4314                	lw	a3,0(a4)
1c00b6d4:	00d707b3          	add	a5,a4,a3
1c00b6d8:	00f59d63          	bne	a1,a5,1c00b6f2 <rt_user_free+0x44>
1c00b6dc:	419c                	lw	a5,0(a1)
1c00b6de:	97b6                	add	a5,a5,a3
1c00b6e0:	c31c                	sw	a5,0(a4)
1c00b6e2:	41dc                	lw	a5,4(a1)
1c00b6e4:	c35c                	sw	a5,4(a4)
1c00b6e6:	8082                	ret
1c00b6e8:	873e                	mv	a4,a5
1c00b6ea:	43dc                	lw	a5,4(a5)
1c00b6ec:	b7f1                	j	1c00b6b8 <rt_user_free+0xa>
1c00b6ee:	c190                	sw	a2,0(a1)
1c00b6f0:	bff9                	j	1c00b6ce <rt_user_free+0x20>
1c00b6f2:	c34c                	sw	a1,4(a4)
1c00b6f4:	8082                	ret
1c00b6f6:	c10c                	sw	a1,0(a0)
1c00b6f8:	8082                	ret

1c00b6fa <rt_alloc>:
1c00b6fa:	4785                	li	a5,1
1c00b6fc:	00a7fb63          	bleu	a0,a5,1c00b712 <rt_alloc+0x18>
1c00b700:	1c0107b7          	lui	a5,0x1c010
1c00b704:	9247a783          	lw	a5,-1756(a5) # 1c00f924 <__rt_alloc_l1>
1c00b708:	1579                	addi	a0,a0,-2
1c00b70a:	050a                	slli	a0,a0,0x2
1c00b70c:	953e                	add	a0,a0,a5
1c00b70e:	f59ff06f          	j	1c00b666 <rt_user_alloc>
1c00b712:	00153763          	p.bneimm	a0,1,1c00b720 <rt_alloc+0x26>
1c00b716:	1c010537          	lui	a0,0x1c010
1c00b71a:	92c50513          	addi	a0,a0,-1748 # 1c00f92c <__rt_alloc_fc_tcdm>
1c00b71e:	bfc5                	j	1c00b70e <rt_alloc+0x14>
1c00b720:	1c010537          	lui	a0,0x1c010
1c00b724:	92850513          	addi	a0,a0,-1752 # 1c00f928 <__rt_alloc_l2>
1c00b728:	b7dd                	j	1c00b70e <rt_alloc+0x14>

1c00b72a <rt_free>:
1c00b72a:	4785                	li	a5,1
1c00b72c:	00a7fb63          	bleu	a0,a5,1c00b742 <rt_free+0x18>
1c00b730:	1c0107b7          	lui	a5,0x1c010
1c00b734:	9247a783          	lw	a5,-1756(a5) # 1c00f924 <__rt_alloc_l1>
1c00b738:	1579                	addi	a0,a0,-2
1c00b73a:	050a                	slli	a0,a0,0x2
1c00b73c:	953e                	add	a0,a0,a5
1c00b73e:	f71ff06f          	j	1c00b6ae <rt_user_free>
1c00b742:	c511                	beqz	a0,1c00b74e <rt_free+0x24>
1c00b744:	1c010537          	lui	a0,0x1c010
1c00b748:	92c50513          	addi	a0,a0,-1748 # 1c00f92c <__rt_alloc_fc_tcdm>
1c00b74c:	bfcd                	j	1c00b73e <rt_free+0x14>
1c00b74e:	1c010537          	lui	a0,0x1c010
1c00b752:	92850513          	addi	a0,a0,-1752 # 1c00f928 <__rt_alloc_l2>
1c00b756:	b7e5                	j	1c00b73e <rt_free+0x14>

1c00b758 <__rt_alloc_init_l1>:
1c00b758:	1c0107b7          	lui	a5,0x1c010
1c00b75c:	9247a703          	lw	a4,-1756(a5) # 1c00f924 <__rt_alloc_l1>
1c00b760:	100007b7          	lui	a5,0x10000
1c00b764:	01651593          	slli	a1,a0,0x16
1c00b768:	6641                	lui	a2,0x10
1c00b76a:	050a                	slli	a0,a0,0x2
1c00b76c:	04478793          	addi	a5,a5,68 # 10000044 <__l1_end>
1c00b770:	fbc60613          	addi	a2,a2,-68 # ffbc <__l1_heap_size>
1c00b774:	95be                	add	a1,a1,a5
1c00b776:	953a                	add	a0,a0,a4
1c00b778:	ecfff06f          	j	1c00b646 <rt_user_alloc_init>

1c00b77c <__rt_alloc_init_l1_for_fc>:
1c00b77c:	100005b7          	lui	a1,0x10000
1c00b780:	01651793          	slli	a5,a0,0x16
1c00b784:	04458593          	addi	a1,a1,68 # 10000044 <__l1_end>
1c00b788:	00b78733          	add	a4,a5,a1
1c00b78c:	050a                	slli	a0,a0,0x2
1c00b78e:	0791                	addi	a5,a5,4
1c00b790:	6641                	lui	a2,0x10
1c00b792:	1c0106b7          	lui	a3,0x1c010
1c00b796:	fb860613          	addi	a2,a2,-72 # ffb8 <__rt_stack_size+0xf7b8>
1c00b79a:	95be                	add	a1,a1,a5
1c00b79c:	953a                	add	a0,a0,a4
1c00b79e:	92e6a223          	sw	a4,-1756(a3) # 1c00f924 <__rt_alloc_l1>
1c00b7a2:	ea5ff06f          	j	1c00b646 <rt_user_alloc_init>

1c00b7a6 <__rt_allocs_init>:
1c00b7a6:	1c0105b7          	lui	a1,0x1c010
1c00b7aa:	9ac58793          	addi	a5,a1,-1620 # 1c00f9ac <__l2_end>
1c00b7ae:	1c080637          	lui	a2,0x1c080
1c00b7b2:	1c010537          	lui	a0,0x1c010
1c00b7b6:	1141                	addi	sp,sp,-16
1c00b7b8:	8e1d                	sub	a2,a2,a5
1c00b7ba:	9ac58593          	addi	a1,a1,-1620
1c00b7be:	92850513          	addi	a0,a0,-1752 # 1c00f928 <__rt_alloc_l2>
1c00b7c2:	c606                	sw	ra,12(sp)
1c00b7c4:	c422                	sw	s0,8(sp)
1c00b7c6:	e81ff0ef          	jal	ra,1c00b646 <rt_user_alloc_init>
1c00b7ca:	1b0015b7          	lui	a1,0x1b001
1c00b7ce:	3d058793          	addi	a5,a1,976 # 1b0013d0 <__fc_tcdm_end>
1c00b7d2:	1b004637          	lui	a2,0x1b004
1c00b7d6:	1c010437          	lui	s0,0x1c010
1c00b7da:	8e1d                	sub	a2,a2,a5
1c00b7dc:	3d058593          	addi	a1,a1,976
1c00b7e0:	92c40513          	addi	a0,s0,-1748 # 1c00f92c <__rt_alloc_fc_tcdm>
1c00b7e4:	e63ff0ef          	jal	ra,1c00b646 <rt_user_alloc_init>
1c00b7e8:	014027f3          	csrr	a5,uhartid
1c00b7ec:	ca5797b3          	p.extractu	a5,a5,5,5
1c00b7f0:	e799                	bnez	a5,1c00b7fe <__rt_allocs_init+0x58>
1c00b7f2:	4422                	lw	s0,8(sp)
1c00b7f4:	40b2                	lw	ra,12(sp)
1c00b7f6:	4501                	li	a0,0
1c00b7f8:	0141                	addi	sp,sp,16
1c00b7fa:	f83ff06f          	j	1c00b77c <__rt_alloc_init_l1_for_fc>
1c00b7fe:	92c40513          	addi	a0,s0,-1748
1c00b802:	4591                	li	a1,4
1c00b804:	e63ff0ef          	jal	ra,1c00b666 <rt_user_alloc>
1c00b808:	40b2                	lw	ra,12(sp)
1c00b80a:	4422                	lw	s0,8(sp)
1c00b80c:	1c0107b7          	lui	a5,0x1c010
1c00b810:	92a7a223          	sw	a0,-1756(a5) # 1c00f924 <__rt_alloc_l1>
1c00b814:	0141                	addi	sp,sp,16
1c00b816:	8082                	ret

1c00b818 <pi_cl_l1_malloc>:
}

void *pi_cl_l1_malloc(struct pi_device *device, uint32_t size)
{
  return rt_alloc(RT_ALLOC_CL_DATA, size);
1c00b818:	4509                	li	a0,2
1c00b81a:	ee1ff06f          	j	1c00b6fa <rt_alloc>

1c00b81e <pi_cl_l1_free>:
  if (flags >= RT_ALLOC_CL_DATA) return rt_user_free(rt_alloc_l1(flags - RT_ALLOC_CL_DATA), _chunk, size);
1c00b81e:	1c0107b7          	lui	a5,0x1c010
1c00b822:	9247a503          	lw	a0,-1756(a5) # 1c00f924 <__rt_alloc_l1>
1c00b826:	e89ff06f          	j	1c00b6ae <rt_user_free>

1c00b82a <pi_l2_malloc>:
    return rt_user_alloc(rt_alloc_l2(), size);
1c00b82a:	85aa                	mv	a1,a0
1c00b82c:	1c010537          	lui	a0,0x1c010
1c00b830:	92850513          	addi	a0,a0,-1752 # 1c00f928 <__rt_alloc_l2>
1c00b834:	e33ff06f          	j	1c00b666 <rt_user_alloc>

1c00b838 <pi_l2_free>:
    rt_user_free(rt_alloc_l2(), _chunk, size);
1c00b838:	862e                	mv	a2,a1
1c00b83a:	85aa                	mv	a1,a0
1c00b83c:	1c010537          	lui	a0,0x1c010
1c00b840:	92850513          	addi	a0,a0,-1752 # 1c00f928 <__rt_alloc_l2>
1c00b844:	e6bff06f          	j	1c00b6ae <rt_user_free>

1c00b848 <__rt_time_poweroff>:
  rt_event_wait(event);
}

void pi_time_wait_us(int time_us)
{
  rt_time_wait_us(time_us);
1c00b848:	002007b7          	lui	a5,0x200
1c00b84c:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00b850:	0087a783          	lw	a5,8(a5)
1c00b854:	1c010737          	lui	a4,0x1c010
1c00b858:	8cf72c23          	sw	a5,-1832(a4) # 1c00f8d8 <timer_count>
1c00b85c:	4501                	li	a0,0
1c00b85e:	8082                	ret

1c00b860 <__rt_time_poweron>:
1c00b860:	1c0107b7          	lui	a5,0x1c010
1c00b864:	8d87a703          	lw	a4,-1832(a5) # 1c00f8d8 <timer_count>
1c00b868:	002007b7          	lui	a5,0x200
1c00b86c:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00b870:	00e7a423          	sw	a4,8(a5)
1c00b874:	4501                	li	a0,0
1c00b876:	8082                	ret

1c00b878 <rt_event_push_delayed>:
1c00b878:	30047373          	csrrci	t1,mstatus,8
1c00b87c:	1c010637          	lui	a2,0x1c010
1c00b880:	93062703          	lw	a4,-1744(a2) # 1c00f930 <first_delayed>
1c00b884:	002007b7          	lui	a5,0x200
1c00b888:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00b88c:	0087a783          	lw	a5,8(a5)
1c00b890:	46f9                	li	a3,30
1c00b892:	0405e5b3          	p.max	a1,a1,zero
1c00b896:	02d5c5b3          	div	a1,a1,a3
1c00b89a:	800006b7          	lui	a3,0x80000
1c00b89e:	fff6c693          	not	a3,a3
1c00b8a2:	00d7f833          	and	a6,a5,a3
1c00b8a6:	0585                	addi	a1,a1,1
1c00b8a8:	97ae                	add	a5,a5,a1
1c00b8aa:	dd1c                	sw	a5,56(a0)
1c00b8ac:	982e                	add	a6,a6,a1
1c00b8ae:	4781                	li	a5,0
1c00b8b0:	c719                	beqz	a4,1c00b8be <rt_event_push_delayed+0x46>
1c00b8b2:	03872883          	lw	a7,56(a4)
1c00b8b6:	00d8f8b3          	and	a7,a7,a3
1c00b8ba:	0108e863          	bltu	a7,a6,1c00b8ca <rt_event_push_delayed+0x52>
1c00b8be:	cb89                	beqz	a5,1c00b8d0 <rt_event_push_delayed+0x58>
1c00b8c0:	cfc8                	sw	a0,28(a5)
1c00b8c2:	cd58                	sw	a4,28(a0)
1c00b8c4:	30031073          	csrw	mstatus,t1
1c00b8c8:	8082                	ret
1c00b8ca:	87ba                	mv	a5,a4
1c00b8cc:	4f58                	lw	a4,28(a4)
1c00b8ce:	b7cd                	j	1c00b8b0 <rt_event_push_delayed+0x38>
1c00b8d0:	002007b7          	lui	a5,0x200
1c00b8d4:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00b8d8:	92a62823          	sw	a0,-1744(a2)
1c00b8dc:	cd58                	sw	a4,28(a0)
1c00b8de:	0087a703          	lw	a4,8(a5)
1c00b8e2:	95ba                	add	a1,a1,a4
1c00b8e4:	00b7a823          	sw	a1,16(a5)
1c00b8e8:	08500713          	li	a4,133
1c00b8ec:	00e7a023          	sw	a4,0(a5)
1c00b8f0:	bfd1                	j	1c00b8c4 <rt_event_push_delayed+0x4c>

1c00b8f2 <rt_time_wait_us>:
1c00b8f2:	1101                	addi	sp,sp,-32
1c00b8f4:	85aa                	mv	a1,a0
1c00b8f6:	4501                	li	a0,0
1c00b8f8:	ce06                	sw	ra,28(sp)
1c00b8fa:	cc22                	sw	s0,24(sp)
1c00b8fc:	c62e                	sw	a1,12(sp)
1c00b8fe:	c3bff0ef          	jal	ra,1c00b538 <rt_event_get_blocking>
1c00b902:	45b2                	lw	a1,12(sp)
1c00b904:	842a                	mv	s0,a0
1c00b906:	f73ff0ef          	jal	ra,1c00b878 <rt_event_push_delayed>
1c00b90a:	8522                	mv	a0,s0
1c00b90c:	4462                	lw	s0,24(sp)
1c00b90e:	40f2                	lw	ra,28(sp)
1c00b910:	6105                	addi	sp,sp,32
1c00b912:	cfdff06f          	j	1c00b60e <rt_event_wait>

1c00b916 <__rt_time_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_time_init()
{
  int err = 0;

  first_delayed = NULL;
1c00b916:	1c0107b7          	lui	a5,0x1c010
1c00b91a:	9207a823          	sw	zero,-1744(a5) # 1c00f930 <first_delayed>
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00b91e:	002007b7          	lui	a5,0x200
{
1c00b922:	1141                	addi	sp,sp,-16
1c00b924:	08300713          	li	a4,131
1c00b928:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00b92c:	c606                	sw	ra,12(sp)
1c00b92e:	c422                	sw	s0,8(sp)
1c00b930:	00e7a023          	sw	a4,0(a5)
    TIMER_CFG_LO_RESET(1)  |
    TIMER_CFG_LO_CCFG(1)
  );

#if defined(ARCHI_HAS_FC)
  rt_irq_set_handler(ARCHI_FC_EVT_TIMER0_HI, __rt_timer_handler);
1c00b934:	1c00c5b7          	lui	a1,0x1c00c
1c00b938:	9a258593          	addi	a1,a1,-1630 # 1c00b9a2 <__rt_timer_handler>
1c00b93c:	452d                	li	a0,11
1c00b93e:	dc4ff0ef          	jal	ra,1c00af02 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00b942:	6785                	lui	a5,0x1
1c00b944:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00b948:	00204737          	lui	a4,0x204
1c00b94c:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b950:	00f72423          	sw	a5,8(a4)
#else
  rt_irq_set_handler(ARCHI_EVT_TIMER0_HI, __rt_timer_handler);
  rt_irq_mask_set(1<<ARCHI_EVT_TIMER0_HI);
#endif

  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00b954:	1c00c5b7          	lui	a1,0x1c00c
1c00b958:	4601                	li	a2,0
1c00b95a:	84858593          	addi	a1,a1,-1976 # 1c00b848 <__rt_time_poweroff>
1c00b95e:	4509                	li	a0,2
1c00b960:	f0eff0ef          	jal	ra,1c00b06e <__rt_cbsys_add>
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00b964:	1c00c5b7          	lui	a1,0x1c00c
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00b968:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00b96a:	4601                	li	a2,0
1c00b96c:	86058593          	addi	a1,a1,-1952 # 1c00b860 <__rt_time_poweron>
1c00b970:	450d                	li	a0,3
1c00b972:	efcff0ef          	jal	ra,1c00b06e <__rt_cbsys_add>
1c00b976:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize time driver\n");
1c00b978:	c10d                	beqz	a0,1c00b99a <__rt_time_init+0x84>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b97a:	01402673          	csrr	a2,uhartid
1c00b97e:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00b982:	40565593          	srai	a1,a2,0x5
1c00b986:	f265b5b3          	p.bclr	a1,a1,25,6
1c00b98a:	f4563633          	p.bclr	a2,a2,26,5
1c00b98e:	18c50513          	addi	a0,a0,396 # 1c00f18c <IntegerExpLUT+0xcc>
1c00b992:	7d7010ef          	jal	ra,1c00d968 <printf>
1c00b996:	757010ef          	jal	ra,1c00d8ec <abort>
}
1c00b99a:	40b2                	lw	ra,12(sp)
1c00b99c:	4422                	lw	s0,8(sp)
1c00b99e:	0141                	addi	sp,sp,16
1c00b9a0:	8082                	ret

1c00b9a2 <__rt_timer_handler>:
#if defined(__LLVM__)
void __rt_timer_handler()
#else
void __attribute__((interrupt)) __rt_timer_handler()
#endif
{
1c00b9a2:	7179                	addi	sp,sp,-48
1c00b9a4:	d032                	sw	a2,32(sp)
  rt_event_t *event = first_delayed;
1c00b9a6:	1c010637          	lui	a2,0x1c010
{
1c00b9aa:	ca3e                	sw	a5,20(sp)
  rt_event_t *event = first_delayed;
1c00b9ac:	93062783          	lw	a5,-1744(a2) # 1c00f930 <first_delayed>
{
1c00b9b0:	ce36                	sw	a3,28(sp)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00b9b2:	002006b7          	lui	a3,0x200
1c00b9b6:	40468693          	addi	a3,a3,1028 # 200404 <__L2+0x180404>
1c00b9ba:	d61a                	sw	t1,44(sp)
1c00b9bc:	d42a                	sw	a0,40(sp)
1c00b9be:	d22e                	sw	a1,36(sp)
1c00b9c0:	cc3a                	sw	a4,24(sp)
1c00b9c2:	c842                	sw	a6,16(sp)
1c00b9c4:	c646                	sw	a7,12(sp)
1c00b9c6:	c472                	sw	t3,8(sp)
1c00b9c8:	c276                	sw	t4,4(sp)
1c00b9ca:	0086a683          	lw	a3,8(a3)
1c00b9ce:	01c00593          	li	a1,28
1c00b9d2:	01c02503          	lw	a0,28(zero) # 1c <__rt_sched>
1c00b9d6:	41cc                	lw	a1,4(a1)

  uint32_t current_time = timer_count_get(timer_base_fc(0, 1));

  // First dequeue and push to their scheduler all events with the same number of
  // ticks as they were waiting for the same time.
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00b9d8:	80000337          	lui	t1,0x80000
1c00b9dc:	4801                	li	a6,0
1c00b9de:	4881                	li	a7,0
1c00b9e0:	01c00e93          	li	t4,28
1c00b9e4:	ffe34313          	xori	t1,t1,-2
1c00b9e8:	e7ad                	bnez	a5,1c00ba52 <__rt_timer_handler+0xb0>
1c00b9ea:	00088463          	beqz	a7,1c00b9f2 <__rt_timer_handler+0x50>
1c00b9ee:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00b9f2:	00080463          	beqz	a6,1c00b9fa <__rt_timer_handler+0x58>
1c00b9f6:	00bea223          	sw	a1,4(t4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00b9fa:	002007b7          	lui	a5,0x200
1c00b9fe:	08100713          	li	a4,129
1c00ba02:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
    event = next;
  }

  // Update the wait list with the next waiting event which has a different number
  // of ticks
  first_delayed = event;
1c00ba06:	92062823          	sw	zero,-1744(a2)
1c00ba0a:	00e7a023          	sw	a4,0(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_BUFFER_CLEAR, evtMask);
1c00ba0e:	6785                	lui	a5,0x1
1c00ba10:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00ba14:	00204737          	lui	a4,0x204
1c00ba18:	02f72423          	sw	a5,40(a4) # 204028 <__L2+0x184028>
    rt_irq_clr(1 << ARCHI_FC_EVT_TIMER0_HI);
#else
    rt_irq_clr(1 << ARCHI_EVT_TIMER0_HI);
#endif
  }
}
1c00ba1c:	5332                	lw	t1,44(sp)
1c00ba1e:	5522                	lw	a0,40(sp)
1c00ba20:	5592                	lw	a1,36(sp)
1c00ba22:	5602                	lw	a2,32(sp)
1c00ba24:	46f2                	lw	a3,28(sp)
1c00ba26:	4762                	lw	a4,24(sp)
1c00ba28:	47d2                	lw	a5,20(sp)
1c00ba2a:	4842                	lw	a6,16(sp)
1c00ba2c:	48b2                	lw	a7,12(sp)
1c00ba2e:	4e22                	lw	t3,8(sp)
1c00ba30:	4e92                	lw	t4,4(sp)
1c00ba32:	6145                	addi	sp,sp,48
1c00ba34:	30200073          	mret
  event->next = NULL;
1c00ba38:	0007a023          	sw	zero,0(a5)
    rt_event_t *next = event->implem.next;
1c00ba3c:	01c7ae03          	lw	t3,28(a5)
  if (sched->first == NULL) {
1c00ba40:	c511                	beqz	a0,1c00ba4c <__rt_timer_handler+0xaa>
    sched->last->next = event;
1c00ba42:	c19c                	sw	a5,0(a1)
    event = next;
1c00ba44:	85be                	mv	a1,a5
1c00ba46:	4805                	li	a6,1
1c00ba48:	87f2                	mv	a5,t3
1c00ba4a:	bf79                	j	1c00b9e8 <__rt_timer_handler+0x46>
  if (sched->first == NULL) {
1c00ba4c:	853e                	mv	a0,a5
1c00ba4e:	4885                	li	a7,1
1c00ba50:	bfd5                	j	1c00ba44 <__rt_timer_handler+0xa2>
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00ba52:	0387ae03          	lw	t3,56(a5)
1c00ba56:	41c68e33          	sub	t3,a3,t3
1c00ba5a:	fdc37fe3          	bleu	t3,t1,1c00ba38 <__rt_timer_handler+0x96>
1c00ba5e:	00088463          	beqz	a7,1c00ba66 <__rt_timer_handler+0xc4>
1c00ba62:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00ba66:	00080463          	beqz	a6,1c00ba6e <__rt_timer_handler+0xcc>
1c00ba6a:	00bea223          	sw	a1,4(t4)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00ba6e:	00200737          	lui	a4,0x200
1c00ba72:	40470713          	addi	a4,a4,1028 # 200404 <__L2+0x180404>
  first_delayed = event;
1c00ba76:	92f62823          	sw	a5,-1744(a2)
1c00ba7a:	00872603          	lw	a2,8(a4)
      first_delayed->implem.time - current_time
1c00ba7e:	5f9c                	lw	a5,56(a5)
1c00ba80:	40d786b3          	sub	a3,a5,a3
1c00ba84:	96b2                	add	a3,a3,a2
static inline void timer_cmp_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_LO_OFFSET, value); }
1c00ba86:	00d72823          	sw	a3,16(a4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00ba8a:	08500793          	li	a5,133
1c00ba8e:	00f72023          	sw	a5,0(a4)
}
1c00ba92:	b769                	j	1c00ba1c <__rt_timer_handler+0x7a>

1c00ba94 <rt_periph_copy>:
  }

  __rt_socevents_status[index] &= ~(1<<event);

  rt_irq_restore(irq);
}
1c00ba94:	7179                	addi	sp,sp,-48
1c00ba96:	d422                	sw	s0,40(sp)
1c00ba98:	842a                	mv	s0,a0
1c00ba9a:	d606                	sw	ra,44(sp)
1c00ba9c:	d226                	sw	s1,36(sp)
1c00ba9e:	d04a                	sw	s2,32(sp)
1c00baa0:	30047973          	csrrci	s2,mstatus,8
1c00baa4:	4015d493          	srai	s1,a1,0x1
1c00baa8:	1a102537          	lui	a0,0x1a102
1c00baac:	049e                	slli	s1,s1,0x7
1c00baae:	94aa                	add	s1,s1,a0
1c00bab0:	00459513          	slli	a0,a1,0x4
1c00bab4:	8941                	andi	a0,a0,16
1c00bab6:	94aa                	add	s1,s1,a0
1c00bab8:	853e                	mv	a0,a5
1c00baba:	ef89                	bnez	a5,1c00bad4 <rt_periph_copy+0x40>
1c00babc:	ce2e                	sw	a1,28(sp)
1c00babe:	cc32                	sw	a2,24(sp)
1c00bac0:	ca36                	sw	a3,20(sp)
1c00bac2:	c83a                	sw	a4,16(sp)
1c00bac4:	c63e                	sw	a5,12(sp)
1c00bac6:	9cbff0ef          	jal	ra,1c00b490 <__rt_wait_event_prepare_blocking>
1c00baca:	47b2                	lw	a5,12(sp)
1c00bacc:	4742                	lw	a4,16(sp)
1c00bace:	46d2                	lw	a3,20(sp)
1c00bad0:	4662                	lw	a2,24(sp)
1c00bad2:	45f2                	lw	a1,28(sp)
1c00bad4:	e419                	bnez	s0,1c00bae2 <rt_periph_copy+0x4e>
1c00bad6:	03850413          	addi	s0,a0,56 # 1a102038 <__l1_end+0xa101ff4>
1c00bada:	04052223          	sw	zero,68(a0)
1c00bade:	04052a23          	sw	zero,84(a0)
1c00bae2:	00c42803          	lw	a6,12(s0)
1c00bae6:	c054                	sw	a3,4(s0)
1c00bae8:	cc08                	sw	a0,24(s0)
1c00baea:	f6483833          	p.bclr	a6,a6,27,4
1c00baee:	4891                	li	a7,4
1c00baf0:	c0474733          	p.bset	a4,a4,0,4
1c00baf4:	0908e163          	bltu	a7,a6,1c00bb76 <rt_periph_copy+0xe2>
1c00baf8:	03000893          	li	a7,48
1c00bafc:	0596                	slli	a1,a1,0x5
1c00bafe:	98ae                	add	a7,a7,a1
1c00bb00:	0008a303          	lw	t1,0(a7)
1c00bb04:	00042a23          	sw	zero,20(s0)
1c00bb08:	03000813          	li	a6,48
1c00bb0c:	02031b63          	bnez	t1,1c00bb42 <rt_periph_copy+0xae>
1c00bb10:	0088a023          	sw	s0,0(a7)
1c00bb14:	00b808b3          	add	a7,a6,a1
1c00bb18:	0088a303          	lw	t1,8(a7)
1c00bb1c:	0088a223          	sw	s0,4(a7)
1c00bb20:	02031663          	bnez	t1,1c00bb4c <rt_periph_copy+0xb8>
1c00bb24:	00848893          	addi	a7,s1,8
1c00bb28:	0008a883          	lw	a7,0(a7)
1c00bb2c:	0208f893          	andi	a7,a7,32
1c00bb30:	00089e63          	bnez	a7,1c00bb4c <rt_periph_copy+0xb8>
1c00bb34:	00c4a023          	sw	a2,0(s1)
1c00bb38:	00d4a223          	sw	a3,4(s1)
1c00bb3c:	00e4a423          	sw	a4,8(s1)
1c00bb40:	a005                	j	1c00bb60 <rt_periph_copy+0xcc>
1c00bb42:	0048a883          	lw	a7,4(a7)
1c00bb46:	0088aa23          	sw	s0,20(a7)
1c00bb4a:	b7e9                	j	1c00bb14 <rt_periph_copy+0x80>
1c00bb4c:	00042823          	sw	zero,16(s0)
1c00bb50:	c010                	sw	a2,0(s0)
1c00bb52:	c054                	sw	a3,4(s0)
1c00bb54:	c418                	sw	a4,8(s0)
1c00bb56:	00031563          	bnez	t1,1c00bb60 <rt_periph_copy+0xcc>
1c00bb5a:	982e                	add	a6,a6,a1
1c00bb5c:	00882423          	sw	s0,8(a6)
1c00bb60:	e399                	bnez	a5,1c00bb66 <rt_periph_copy+0xd2>
1c00bb62:	a81ff0ef          	jal	ra,1c00b5e2 <__rt_wait_event>
1c00bb66:	30091073          	csrw	mstatus,s2
1c00bb6a:	50b2                	lw	ra,44(sp)
1c00bb6c:	5422                	lw	s0,40(sp)
1c00bb6e:	5492                	lw	s1,36(sp)
1c00bb70:	5902                	lw	s2,32(sp)
1c00bb72:	6145                	addi	sp,sp,48
1c00bb74:	8082                	ret
1c00bb76:	fe6835e3          	p.bneimm	a6,6,1c00bb60 <rt_periph_copy+0xcc>
1c00bb7a:	03000893          	li	a7,48
1c00bb7e:	0596                	slli	a1,a1,0x5
1c00bb80:	98ae                	add	a7,a7,a1
1c00bb82:	0008a303          	lw	t1,0(a7)
1c00bb86:	00042a23          	sw	zero,20(s0)
1c00bb8a:	03000813          	li	a6,48
1c00bb8e:	00031f63          	bnez	t1,1c00bbac <rt_periph_copy+0x118>
1c00bb92:	0088a023          	sw	s0,0(a7)
1c00bb96:	95c2                	add	a1,a1,a6
1c00bb98:	c1c0                	sw	s0,4(a1)
1c00bb9a:	00031e63          	bnez	t1,1c00bbb6 <rt_periph_copy+0x122>
1c00bb9e:	02442803          	lw	a6,36(s0)
1c00bba2:	1a1025b7          	lui	a1,0x1a102
1c00bba6:	1b05a023          	sw	a6,416(a1) # 1a1021a0 <__l1_end+0xa10215c>
1c00bbaa:	b769                	j	1c00bb34 <rt_periph_copy+0xa0>
1c00bbac:	0048a883          	lw	a7,4(a7)
1c00bbb0:	0088aa23          	sw	s0,20(a7)
1c00bbb4:	b7cd                	j	1c00bb96 <rt_periph_copy+0x102>
1c00bbb6:	c418                	sw	a4,8(s0)
1c00bbb8:	4598                	lw	a4,8(a1)
1c00bbba:	c010                	sw	a2,0(s0)
1c00bbbc:	c054                	sw	a3,4(s0)
1c00bbbe:	00042823          	sw	zero,16(s0)
1c00bbc2:	ff59                	bnez	a4,1c00bb60 <rt_periph_copy+0xcc>
1c00bbc4:	c580                	sw	s0,8(a1)
1c00bbc6:	bf69                	j	1c00bb60 <rt_periph_copy+0xcc>

1c00bbc8 <__rt_periph_wait_event>:
1c00bbc8:	30047673          	csrrci	a2,mstatus,8
1c00bbcc:	477d                	li	a4,31
1c00bbce:	4781                	li	a5,0
1c00bbd0:	00a75463          	ble	a0,a4,1c00bbd8 <__rt_periph_wait_event+0x10>
1c00bbd4:	1501                	addi	a0,a0,-32
1c00bbd6:	4785                	li	a5,1
1c00bbd8:	00279713          	slli	a4,a5,0x2
1c00bbdc:	4685                	li	a3,1
1c00bbde:	03000793          	li	a5,48
1c00bbe2:	00a696b3          	sll	a3,a3,a0
1c00bbe6:	97ba                	add	a5,a5,a4
1c00bbe8:	00204837          	lui	a6,0x204
1c00bbec:	2807a703          	lw	a4,640(a5)
1c00bbf0:	8f75                	and	a4,a4,a3
1c00bbf2:	cf19                	beqz	a4,1c00bc10 <__rt_periph_wait_event+0x48>
1c00bbf4:	c999                	beqz	a1,1c00bc0a <__rt_periph_wait_event+0x42>
1c00bbf6:	2807a683          	lw	a3,640(a5)
1c00bbfa:	4705                	li	a4,1
1c00bbfc:	00a71533          	sll	a0,a4,a0
1c00bc00:	fff54513          	not	a0,a0
1c00bc04:	8d75                	and	a0,a0,a3
1c00bc06:	28a7a023          	sw	a0,640(a5)
1c00bc0a:	30061073          	csrw	mstatus,a2
1c00bc0e:	8082                	ret
1c00bc10:	03886703          	p.elw	a4,56(a6) # 204038 <__L2+0x184038>
1c00bc14:	30046773          	csrrsi	a4,mstatus,8
1c00bc18:	30047773          	csrrci	a4,mstatus,8
1c00bc1c:	bfc1                	j	1c00bbec <__rt_periph_wait_event+0x24>

1c00bc1e <__rt_periph_init>:
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
    rt_periph_channel_t *channel = &periph_channels[i];
    channel->first = NULL;
    channel->firstToEnqueue = NULL;
    channel->base = hal_udma_channel_base(i);
    channel->callback = udma_event_handler;
1c00bc1e:	1c000537          	lui	a0,0x1c000
1c00bc22:	03000693          	li	a3,48
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00bc26:	4601                	li	a2,0
1c00bc28:	03000713          	li	a4,48
static inline unsigned int hal_udma_periph_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id);
}

static inline __attribute__((always_inline)) unsigned int hal_udma_channel_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id>>1) + UDMA_CHANNEL_OFFSET(id&1);
1c00bc2c:	1a1028b7          	lui	a7,0x1a102
    channel->callback = udma_event_handler;
1c00bc30:	2b450513          	addi	a0,a0,692 # 1c0002b4 <udma_event_handler>
1c00bc34:	014950fb          	lp.setupi	x1,20,1c00bc58 <__rt_periph_init+0x3a>
1c00bc38:	40165793          	srai	a5,a2,0x1
1c00bc3c:	00461813          	slli	a6,a2,0x4
1c00bc40:	079e                	slli	a5,a5,0x7
1c00bc42:	97c6                	add	a5,a5,a7
1c00bc44:	01087813          	andi	a6,a6,16
1c00bc48:	97c2                	add	a5,a5,a6
    channel->first = NULL;
1c00bc4a:	0006a023          	sw	zero,0(a3)
    channel->firstToEnqueue = NULL;
1c00bc4e:	0006a423          	sw	zero,8(a3)
    channel->base = hal_udma_channel_base(i);
1c00bc52:	c6dc                	sw	a5,12(a3)
    channel->callback = udma_event_handler;
1c00bc54:	cec8                	sw	a0,28(a3)
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00bc56:	0605                	addi	a2,a2,1
1c00bc58:	02068693          	addi	a3,a3,32
  }
  
  for (int i=0; i<ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT; i++)
  {
    __rt_udma_extra_callback[i] = __rt_soc_evt_no_udma;
1c00bc5c:	1c0006b7          	lui	a3,0x1c000
1c00bc60:	28870613          	addi	a2,a4,648
1c00bc64:	45e68693          	addi	a3,a3,1118 # 1c00045e <__rt_soc_evt_no_udma>
1c00bc68:	00a250fb          	lp.setupi	x1,10,1c00bc70 <__rt_periph_init+0x52>
1c00bc6c:	00d6222b          	p.sw	a3,4(a2!)
1c00bc70:	0001                	nop
  }

  __rt_socevents_status[0] = 0;
1c00bc72:	28072023          	sw	zero,640(a4)
  __rt_socevents_status[1] = 0;
1c00bc76:	28072223          	sw	zero,644(a4)
}
1c00bc7a:	8082                	ret

1c00bc7c <rt_freq_set_and_get>:
void rt_freq_wait_convergence(int fll)
{
}

int rt_freq_set_and_get(rt_freq_domain_e domain, unsigned int freq, unsigned int *out_freq)
{
1c00bc7c:	1141                	addi	sp,sp,-16
1c00bc7e:	c226                	sw	s1,4(sp)
1c00bc80:	84ae                	mv	s1,a1
1c00bc82:	c606                	sw	ra,12(sp)
1c00bc84:	c422                	sw	s0,8(sp)
1c00bc86:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bc88:	30047973          	csrrci	s2,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00bc8c:	1c010437          	lui	s0,0x1c010
  int irq = rt_irq_disable();
  int err = 0;

  rt_trace(RT_TRACE_FREQ, "Setting domain frequency (domain: %d, freq: %d)\n", domain, freq);

  if (domain == RT_FREQ_DOMAIN_CL)
1c00bc90:	00153f63          	p.bneimm	a0,1,1c00bcae <rt_freq_set_and_get+0x32>
  {
    // On cluster side, this is straight forward as the fll is not shared
    __rt_fll_set_freq(__RT_FLL_CL, freq);
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00bc94:	93440413          	addi	s0,s0,-1740 # 1c00f934 <__rt_freq_domains>
    __rt_fll_set_freq(__RT_FLL_CL, freq);
1c00bc98:	294d                	jal	1c00c14a <__rt_fll_set_freq>
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00bc9a:	c044                	sw	s1,4(s0)
  __builtin_pulp_spr_write(reg, val);
1c00bc9c:	30091073          	csrw	mstatus,s2
  }

  rt_irq_restore(irq);

  return err;
}
1c00bca0:	40b2                	lw	ra,12(sp)
1c00bca2:	4422                	lw	s0,8(sp)
1c00bca4:	4492                	lw	s1,4(sp)
1c00bca6:	4902                	lw	s2,0(sp)
1c00bca8:	4501                	li	a0,0
1c00bcaa:	0141                	addi	sp,sp,16
1c00bcac:	8082                	ret
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_BEFORE);
1c00bcae:	4511                	li	a0,4
1c00bcb0:	bfcff0ef          	jal	ra,1c00b0ac <__rt_cbsys_exec>
    __rt_fll_set_freq(0, freq);
1c00bcb4:	85a6                	mv	a1,s1
1c00bcb6:	4501                	li	a0,0
1c00bcb8:	2949                	jal	1c00c14a <__rt_fll_set_freq>
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00bcba:	4515                	li	a0,5
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = freq;
1c00bcbc:	92942a23          	sw	s1,-1740(s0)
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00bcc0:	becff0ef          	jal	ra,1c00b0ac <__rt_cbsys_exec>
1c00bcc4:	bfe1                	j	1c00bc9c <rt_freq_set_and_get+0x20>

1c00bcc6 <__rt_freq_init>:

void __rt_freq_init()
{
1c00bcc6:	1141                	addi	sp,sp,-16
1c00bcc8:	c422                	sw	s0,8(sp)
1c00bcca:	c606                	sw	ra,12(sp)

  __rt_flls_constructor();
1c00bccc:	29b5                	jal	1c00c148 <__rt_flls_constructor>
  return __rt_platform;
1c00bcce:	1c00f7b7          	lui	a5,0x1c00f

  // On all chips only FLL 0 is initialized here as it is shared between periph and soc
  // while FLL 1 is used for cluster only and thus is initialized when the cluster is set on.
  if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00bcd2:	56c7a783          	lw	a5,1388(a5) # 1c00f56c <__rt_platform>
1c00bcd6:	1c010437          	lui	s0,0x1c010
1c00bcda:	0017ae63          	p.beqimm	a5,1,1c00bcf6 <__rt_freq_init+0x30>
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = __rt_fll_init(__RT_FLL_FC);
1c00bcde:	4501                	li	a0,0
1c00bce0:	2991                	jal	1c00c134 <__rt_fll_init>
1c00bce2:	92a42a23          	sw	a0,-1740(s0) # 1c00f934 <__rt_freq_domains>
  }
  else
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
  }
  __rt_freq_domains[RT_FREQ_DOMAIN_CL] = 0;
1c00bce6:	93440413          	addi	s0,s0,-1740
1c00bcea:	00042223          	sw	zero,4(s0)

}
1c00bcee:	40b2                	lw	ra,12(sp)
1c00bcf0:	4422                	lw	s0,8(sp)
1c00bcf2:	0141                	addi	sp,sp,16
1c00bcf4:	8082                	ret
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
1c00bcf6:	026267b7          	lui	a5,0x2626
1c00bcfa:	a0078793          	addi	a5,a5,-1536 # 2625a00 <__L2+0x25a5a00>
1c00bcfe:	92f42a23          	sw	a5,-1740(s0)
1c00bd02:	b7d5                	j	1c00bce6 <__rt_freq_init+0x20>

1c00bd04 <SetFllMultDivFactors>:
  if (PMURetentionState.Fields.BootType != COLD_BOOT && PMURetentionState.Fields.ClusterWakeUpState) {
          // ChangePowerSystemState(POWER_SYSTEM_STATE(PMURetentionState.Fields.WakeupState, PMURetentionState.Fields.ClusterWakeUpState), 0);
    __rt_pmu_cluster_power_up(NULL, NULL);
    if (PMU_ClusterIsRunning() && PMURetentionState.Fields.FllClusterRetention) InitOneFll(FLL_CLUSTER, 1);
  }
}
1c00bd04:	100517b3          	p.fl1	a5,a0
1c00bd08:	4769                	li	a4,26
1c00bd0a:	8f1d                	sub	a4,a4,a5
1c00bd0c:	4785                	li	a5,1
1c00bd0e:	04f76733          	p.max	a4,a4,a5
1c00bd12:	47a1                	li	a5,8
1c00bd14:	04f74733          	p.min	a4,a4,a5
1c00bd18:	fff70693          	addi	a3,a4,-1
1c00bd1c:	00f55793          	srli	a5,a0,0xf
1c00bd20:	00d797b3          	sll	a5,a5,a3
1c00bd24:	c19c                	sw	a5,0(a1)
1c00bd26:	07be                	slli	a5,a5,0xf
1c00bd28:	c218                	sw	a4,0(a2)
1c00bd2a:	00d7d533          	srl	a0,a5,a3
1c00bd2e:	8082                	ret

1c00bd30 <soc_eu_fcEventMask_setEvent>:
1c00bd30:	47fd                	li	a5,31
1c00bd32:	4721                	li	a4,8
1c00bd34:	00f50463          	beq	a0,a5,1c00bd3c <soc_eu_fcEventMask_setEvent+0xc>
1c00bd38:	1501                	addi	a0,a0,-32
1c00bd3a:	4711                	li	a4,4
1c00bd3c:	1a1066b7          	lui	a3,0x1a106
1c00bd40:	20e6f603          	p.lw	a2,a4(a3)
1c00bd44:	4785                	li	a5,1
1c00bd46:	00a79533          	sll	a0,a5,a0
1c00bd4a:	fff54513          	not	a0,a0
1c00bd4e:	8d71                	and	a0,a0,a2
1c00bd50:	00a6e723          	p.sw	a0,a4(a3)
1c00bd54:	8082                	ret

1c00bd56 <__rt_pmu_cluster_power_down>:
1c00bd56:	1c00f7b7          	lui	a5,0x1c00f
1c00bd5a:	56c7a783          	lw	a5,1388(a5) # 1c00f56c <__rt_platform>
1c00bd5e:	0817a363          	p.beqimm	a5,1,1c00bde4 <__rt_pmu_cluster_power_down+0x8e>
1c00bd62:	1141                	addi	sp,sp,-16
1c00bd64:	1a1046b7          	lui	a3,0x1a104
1c00bd68:	c606                	sw	ra,12(sp)
1c00bd6a:	c422                	sw	s0,8(sp)
1c00bd6c:	c226                	sw	s1,4(sp)
1c00bd6e:	c04a                	sw	s2,0(sp)
1c00bd70:	0706a683          	lw	a3,112(a3) # 1a104070 <__l1_end+0xa10402c>
1c00bd74:	1c00f737          	lui	a4,0x1c00f
1c00bd78:	57c70713          	addi	a4,a4,1404 # 1c00f57c <SystemStateToSCUFastSeq>
1c00bd7c:	00874783          	lbu	a5,8(a4)
1c00bd80:	8436                	mv	s0,a3
1c00bd82:	c0079933          	p.extractu	s2,a5,0,0
1c00bd86:	04193963          	p.bneimm	s2,1,1c00bdd8 <__rt_pmu_cluster_power_down+0x82>
1c00bd8a:	01069613          	slli	a2,a3,0x10
1c00bd8e:	04064563          	bltz	a2,1c00bdd8 <__rt_pmu_cluster_power_down+0x82>
1c00bd92:	c007b7b3          	p.bclr	a5,a5,0,0
1c00bd96:	c0a92433          	p.insert	s0,s2,0,10
1c00bd9a:	1a1044b7          	lui	s1,0x1a104
1c00bd9e:	00f70423          	sb	a5,8(a4)
1c00bda2:	0684a823          	sw	s0,112(s1) # 1a104070 <__l1_end+0xa10402c>
1c00bda6:	4585                	li	a1,1
1c00bda8:	02300513          	li	a0,35
1c00bdac:	e1dff0ef          	jal	ra,1c00bbc8 <__rt_periph_wait_event>
1c00bdb0:	4785                	li	a5,1
1c00bdb2:	00f4a623          	sw	a5,12(s1)
1c00bdb6:	c0302433          	p.insert	s0,zero,0,3
1c00bdba:	0684a823          	sw	s0,112(s1)
1c00bdbe:	c0d92433          	p.insert	s0,s2,0,13
1c00bdc2:	0684a823          	sw	s0,112(s1)
1c00bdc6:	4422                	lw	s0,8(sp)
1c00bdc8:	40b2                	lw	ra,12(sp)
1c00bdca:	4492                	lw	s1,4(sp)
1c00bdcc:	4902                	lw	s2,0(sp)
1c00bdce:	4585                	li	a1,1
1c00bdd0:	457d                	li	a0,31
1c00bdd2:	0141                	addi	sp,sp,16
1c00bdd4:	df5ff06f          	j	1c00bbc8 <__rt_periph_wait_event>
1c00bdd8:	40b2                	lw	ra,12(sp)
1c00bdda:	4422                	lw	s0,8(sp)
1c00bddc:	4492                	lw	s1,4(sp)
1c00bdde:	4902                	lw	s2,0(sp)
1c00bde0:	0141                	addi	sp,sp,16
1c00bde2:	8082                	ret
1c00bde4:	8082                	ret

1c00bde6 <SetFllFrequency>:
1c00bde6:	7179                	addi	sp,sp,-48
1c00bde8:	d422                	sw	s0,40(sp)
1c00bdea:	d226                	sw	s1,36(sp)
1c00bdec:	1c00f437          	lui	s0,0x1c00f
1c00bdf0:	84aa                	mv	s1,a0
1c00bdf2:	d606                	sw	ra,44(sp)
1c00bdf4:	852e                	mv	a0,a1
1c00bdf6:	57c40413          	addi	s0,s0,1404 # 1c00f57c <SystemStateToSCUFastSeq>
1c00bdfa:	0014be63          	p.bneimm	s1,1,1c00be16 <SetFllFrequency+0x30>
1c00bdfe:	00844783          	lbu	a5,8(s0)
1c00be02:	c0079733          	p.extractu	a4,a5,0,0
1c00be06:	08172763          	p.beqimm	a4,1,1c00be94 <SetFllFrequency+0xae>
1c00be0a:	4501                	li	a0,0
1c00be0c:	50b2                	lw	ra,44(sp)
1c00be0e:	5422                	lw	s0,40(sp)
1c00be10:	5492                	lw	s1,36(sp)
1c00be12:	6145                	addi	sp,sp,48
1c00be14:	8082                	ret
1c00be16:	ce2d                	beqz	a2,1c00be90 <SetFllFrequency+0xaa>
1c00be18:	00844783          	lbu	a5,8(s0)
1c00be1c:	03200713          	li	a4,50
1c00be20:	c21797b3          	p.extractu	a5,a5,1,1
1c00be24:	97a2                	add	a5,a5,s0
1c00be26:	00a7c783          	lbu	a5,10(a5)
1c00be2a:	00e787db          	p.mac	a5,a5,a4,zero
1c00be2e:	22678793          	addi	a5,a5,550
1c00be32:	ecad                	bnez	s1,1c00beac <SetFllFrequency+0xc6>
1c00be34:	0007a6b7          	lui	a3,0x7a
1c00be38:	eb237737          	lui	a4,0xeb237
1c00be3c:	12068693          	addi	a3,a3,288 # 7a120 <__L1Cl+0x6a120>
1c00be40:	c8070713          	addi	a4,a4,-896 # eb236c80 <pulp__FC+0xeb236c81>
1c00be44:	42d78733          	p.mac	a4,a5,a3
1c00be48:	fcb761e3          	bltu	a4,a1,1c00be0a <SetFllFrequency+0x24>
1c00be4c:	c62a                	sw	a0,12(sp)
1c00be4e:	d6eff0ef          	jal	ra,1c00b3bc <__rt_bridge_req_shutdown>
1c00be52:	4532                	lw	a0,12(sp)
1c00be54:	0870                	addi	a2,sp,28
1c00be56:	082c                	addi	a1,sp,24
1c00be58:	eadff0ef          	jal	ra,1c00bd04 <SetFllMultDivFactors>
1c00be5c:	4762                	lw	a4,24(sp)
1c00be5e:	800007b7          	lui	a5,0x80000
1c00be62:	1a1006b7          	lui	a3,0x1a100
1c00be66:	de0727b3          	p.insert	a5,a4,15,0
1c00be6a:	4772                	lw	a4,28(sp)
1c00be6c:	c7a727b3          	p.insert	a5,a4,3,26
1c00be70:	00449713          	slli	a4,s1,0x4
1c00be74:	0711                	addi	a4,a4,4
1c00be76:	00f6e723          	p.sw	a5,a4(a3)
1c00be7a:	00249793          	slli	a5,s1,0x2
1c00be7e:	943e                	add	s0,s0,a5
1c00be80:	d008                	sw	a0,32(s0)
1c00be82:	c808                	sw	a0,16(s0)
1c00be84:	f4c1                	bnez	s1,1c00be0c <SetFllFrequency+0x26>
1c00be86:	c62a                	sw	a0,12(sp)
1c00be88:	c90ff0ef          	jal	ra,1c00b318 <__rt_bridge_set_available>
1c00be8c:	4532                	lw	a0,12(sp)
1c00be8e:	bfbd                	j	1c00be0c <SetFllFrequency+0x26>
1c00be90:	f0f1                	bnez	s1,1c00be54 <SetFllFrequency+0x6e>
1c00be92:	bf6d                	j	1c00be4c <SetFllFrequency+0x66>
1c00be94:	d261                	beqz	a2,1c00be54 <SetFllFrequency+0x6e>
1c00be96:	c21797b3          	p.extractu	a5,a5,1,1
1c00be9a:	97a2                	add	a5,a5,s0
1c00be9c:	00a7c783          	lbu	a5,10(a5) # 8000000a <pulp__FC+0x8000000b>
1c00bea0:	03200713          	li	a4,50
1c00bea4:	00e787db          	p.mac	a5,a5,a4,zero
1c00bea8:	22678793          	addi	a5,a5,550
1c00beac:	0006b6b7          	lui	a3,0x6b
1c00beb0:	eaf5a737          	lui	a4,0xeaf5a
1c00beb4:	6c068693          	addi	a3,a3,1728 # 6b6c0 <__L1Cl+0x5b6c0>
1c00beb8:	5c070713          	addi	a4,a4,1472 # eaf5a5c0 <pulp__FC+0xeaf5a5c1>
1c00bebc:	42d78733          	p.mac	a4,a5,a3
1c00bec0:	f8a77ae3          	bleu	a0,a4,1c00be54 <SetFllFrequency+0x6e>
1c00bec4:	b799                	j	1c00be0a <SetFllFrequency+0x24>

1c00bec6 <InitOneFll>:
1c00bec6:	7179                	addi	sp,sp,-48
1c00bec8:	00451713          	slli	a4,a0,0x4
1c00becc:	ce4e                	sw	s3,28(sp)
1c00bece:	1a1007b7          	lui	a5,0x1a100
1c00bed2:	00470993          	addi	s3,a4,4
1c00bed6:	d606                	sw	ra,44(sp)
1c00bed8:	d422                	sw	s0,40(sp)
1c00beda:	d226                	sw	s1,36(sp)
1c00bedc:	d04a                	sw	s2,32(sp)
1c00bede:	2137f783          	p.lw	a5,s3(a5)
1c00bee2:	1c00f437          	lui	s0,0x1c00f
1c00bee6:	57c40413          	addi	s0,s0,1404 # 1c00f57c <SystemStateToSCUFastSeq>
1c00beea:	00251913          	slli	s2,a0,0x2
1c00beee:	c585                	beqz	a1,1c00bf16 <InitOneFll+0x50>
1c00bef0:	c7a79733          	p.extractu	a4,a5,3,26
1c00bef4:	1007d7b3          	p.exthz	a5,a5
1c00bef8:	07be                	slli	a5,a5,0xf
1c00befa:	c701                	beqz	a4,1c00bf02 <InitOneFll+0x3c>
1c00befc:	177d                	addi	a4,a4,-1
1c00befe:	00e7d7b3          	srl	a5,a5,a4
1c00bf02:	944a                	add	s0,s0,s2
1c00bf04:	d01c                	sw	a5,32(s0)
1c00bf06:	c81c                	sw	a5,16(s0)
1c00bf08:	50b2                	lw	ra,44(sp)
1c00bf0a:	5422                	lw	s0,40(sp)
1c00bf0c:	5492                	lw	s1,36(sp)
1c00bf0e:	5902                	lw	s2,32(sp)
1c00bf10:	49f2                	lw	s3,28(sp)
1c00bf12:	6145                	addi	sp,sp,48
1c00bf14:	8082                	ret
1c00bf16:	0007d363          	bgez	a5,1c00bf1c <InitOneFll+0x56>
1c00bf1a:	c105                	beqz	a0,1c00bf3a <InitOneFll+0x74>
1c00bf1c:	810047b7          	lui	a5,0x81004
1c00bf20:	1a1006b7          	lui	a3,0x1a100
1c00bf24:	00870613          	addi	a2,a4,8
1c00bf28:	10778793          	addi	a5,a5,263 # 81004107 <pulp__FC+0x81004108>
1c00bf2c:	00f6e623          	p.sw	a5,a2(a3)
1c00bf30:	014c04b7          	lui	s1,0x14c0
1c00bf34:	0731                	addi	a4,a4,12
1c00bf36:	0096e723          	p.sw	s1,a4(a3)
1c00bf3a:	02faf537          	lui	a0,0x2faf
1c00bf3e:	0070                	addi	a2,sp,12
1c00bf40:	002c                	addi	a1,sp,8
1c00bf42:	08050513          	addi	a0,a0,128 # 2faf080 <__L2+0x2f2f080>
1c00bf46:	dbfff0ef          	jal	ra,1c00bd04 <SetFllMultDivFactors>
1c00bf4a:	47a2                	lw	a5,8(sp)
1c00bf4c:	c00004b7          	lui	s1,0xc0000
1c00bf50:	de07a4b3          	p.insert	s1,a5,15,0
1c00bf54:	47b2                	lw	a5,12(sp)
1c00bf56:	c7a7a4b3          	p.insert	s1,a5,3,26
1c00bf5a:	1a1007b7          	lui	a5,0x1a100
1c00bf5e:	0097e9a3          	p.sw	s1,s3(a5)
1c00bf62:	944a                	add	s0,s0,s2
1c00bf64:	d008                	sw	a0,32(s0)
1c00bf66:	c808                	sw	a0,16(s0)
1c00bf68:	b745                	j	1c00bf08 <InitOneFll+0x42>

1c00bf6a <__rt_pmu_cluster_power_up>:
1c00bf6a:	1141                	addi	sp,sp,-16
1c00bf6c:	c226                	sw	s1,4(sp)
1c00bf6e:	1c00f4b7          	lui	s1,0x1c00f
1c00bf72:	c606                	sw	ra,12(sp)
1c00bf74:	c422                	sw	s0,8(sp)
1c00bf76:	c04a                	sw	s2,0(sp)
1c00bf78:	57c48793          	addi	a5,s1,1404 # 1c00f57c <SystemStateToSCUFastSeq>
1c00bf7c:	0087c783          	lbu	a5,8(a5) # 1a100008 <__l1_end+0xa0fffc4>
1c00bf80:	4501                	li	a0,0
1c00bf82:	c00797b3          	p.extractu	a5,a5,0,0
1c00bf86:	e785                	bnez	a5,1c00bfae <__rt_pmu_cluster_power_up+0x44>
1c00bf88:	1c00f7b7          	lui	a5,0x1c00f
1c00bf8c:	56c7a783          	lw	a5,1388(a5) # 1c00f56c <__rt_platform>
1c00bf90:	57c48493          	addi	s1,s1,1404
1c00bf94:	0217b363          	p.bneimm	a5,1,1c00bfba <__rt_pmu_cluster_power_up+0x50>
1c00bf98:	1a1047b7          	lui	a5,0x1a104
1c00bf9c:	0007a623          	sw	zero,12(a5) # 1a10400c <__l1_end+0xa103fc8>
1c00bfa0:	0084c783          	lbu	a5,8(s1)
1c00bfa4:	4505                	li	a0,1
1c00bfa6:	c007c7b3          	p.bset	a5,a5,0,0
1c00bfaa:	00f48423          	sb	a5,8(s1)
1c00bfae:	40b2                	lw	ra,12(sp)
1c00bfb0:	4422                	lw	s0,8(sp)
1c00bfb2:	4492                	lw	s1,4(sp)
1c00bfb4:	4902                	lw	s2,0(sp)
1c00bfb6:	0141                	addi	sp,sp,16
1c00bfb8:	8082                	ret
1c00bfba:	1a104437          	lui	s0,0x1a104
1c00bfbe:	07042403          	lw	s0,112(s0) # 1a104070 <__l1_end+0xa10402c>
1c00bfc2:	c0a417b3          	p.extractu	a5,s0,0,10
1c00bfc6:	ef89                	bnez	a5,1c00bfe0 <__rt_pmu_cluster_power_up+0x76>
1c00bfc8:	4785                	li	a5,1
1c00bfca:	c0a7a433          	p.insert	s0,a5,0,10
1c00bfce:	1a1047b7          	lui	a5,0x1a104
1c00bfd2:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10402c>
1c00bfd6:	4585                	li	a1,1
1c00bfd8:	02300513          	li	a0,35
1c00bfdc:	bedff0ef          	jal	ra,1c00bbc8 <__rt_periph_wait_event>
1c00bfe0:	4785                	li	a5,1
1c00bfe2:	c037a433          	p.insert	s0,a5,0,3
1c00bfe6:	1a104937          	lui	s2,0x1a104
1c00bfea:	06892823          	sw	s0,112(s2) # 1a104070 <__l1_end+0xa10402c>
1c00bfee:	4585                	li	a1,1
1c00bff0:	457d                	li	a0,31
1c00bff2:	bd7ff0ef          	jal	ra,1c00bbc8 <__rt_periph_wait_event>
1c00bff6:	00092623          	sw	zero,12(s2)
1c00bffa:	c0d02433          	p.insert	s0,zero,0,13
1c00bffe:	06892823          	sw	s0,112(s2)
1c00c002:	c0a02433          	p.insert	s0,zero,0,10
1c00c006:	06892823          	sw	s0,112(s2)
1c00c00a:	4585                	li	a1,1
1c00c00c:	02300513          	li	a0,35
1c00c010:	bb9ff0ef          	jal	ra,1c00bbc8 <__rt_periph_wait_event>
1c00c014:	01c4c783          	lbu	a5,28(s1)
1c00c018:	0207f793          	andi	a5,a5,32
1c00c01c:	e789                	bnez	a5,1c00c026 <__rt_pmu_cluster_power_up+0xbc>
1c00c01e:	4581                	li	a1,0
1c00c020:	4505                	li	a0,1
1c00c022:	ea5ff0ef          	jal	ra,1c00bec6 <InitOneFll>
1c00c026:	c0e44433          	p.bset	s0,s0,0,14
1c00c02a:	1a1047b7          	lui	a5,0x1a104
1c00c02e:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10402c>
1c00c032:	b7bd                	j	1c00bfa0 <__rt_pmu_cluster_power_up+0x36>

1c00c034 <InitFlls>:

  }
}

void  __attribute__ ((noinline)) InitFlls()
{
1c00c034:	1141                	addi	sp,sp,-16
1c00c036:	c422                	sw	s0,8(sp)
  __rt_bridge_req_shutdown();

  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00c038:	1c00f437          	lui	s0,0x1c00f
{
1c00c03c:	c606                	sw	ra,12(sp)
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00c03e:	57c40413          	addi	s0,s0,1404 # 1c00f57c <SystemStateToSCUFastSeq>
  __rt_bridge_req_shutdown();
1c00c042:	b7aff0ef          	jal	ra,1c00b3bc <__rt_bridge_req_shutdown>
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00c046:	01c44583          	lbu	a1,28(s0)
1c00c04a:	4501                	li	a0,0
1c00c04c:	c04595b3          	p.extractu	a1,a1,0,4
1c00c050:	e77ff0ef          	jal	ra,1c00bec6 <InitOneFll>
#define PMU_ERROR_CLUSTER_STATE_CHANGE_FAILED   (0x1<<4)

extern void 		   InitPMUDriver();

static inline int 	   PMU_ClusterIsDown()    { return (CLUSTER_STATE(PMUState.State)==CLUSTER_OFF);}
static inline int 	   PMU_ClusterIsRunning() { return (CLUSTER_STATE(PMUState.State)==CLUSTER_ON);}
1c00c054:	00844783          	lbu	a5,8(s0)
1c00c058:	c00797b3          	p.extractu	a5,a5,0,0
  if (PMU_ClusterIsRunning()) InitOneFll(FLL_CLUSTER, PMURetentionState.Fields.FllClusterRetention);
1c00c05c:	0017b963          	p.bneimm	a5,1,1c00c06e <InitFlls+0x3a>
1c00c060:	01c44583          	lbu	a1,28(s0)
1c00c064:	4505                	li	a0,1
1c00c066:	c05595b3          	p.extractu	a1,a1,0,5
1c00c06a:	e5dff0ef          	jal	ra,1c00bec6 <InitOneFll>

#ifdef __RT_USE_BRIDGE
  __rt_bridge_set_available();
#endif
}
1c00c06e:	4422                	lw	s0,8(sp)
1c00c070:	40b2                	lw	ra,12(sp)
1c00c072:	0141                	addi	sp,sp,16
  __rt_bridge_set_available();
1c00c074:	aa4ff06f          	j	1c00b318 <__rt_bridge_set_available>

1c00c078 <__rt_pmu_init>:
1c00c078:	1c00f7b7          	lui	a5,0x1c00f
  if (rt_platform() == ARCHI_PLATFORM_FPGA) {
1c00c07c:	56c7a783          	lw	a5,1388(a5) # 1c00f56c <__rt_platform>
1c00c080:	0a17a963          	p.beqimm	a5,1,1c00c132 <__rt_pmu_init+0xba>
{
1c00c084:	1141                	addi	sp,sp,-16
  __rt_wakeup_use_fast = 0;
1c00c086:	1c0107b7          	lui	a5,0x1c010
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_DCDC_CONFIG_OFFSET);
1c00c08a:	1a104637          	lui	a2,0x1a104
{
1c00c08e:	c606                	sw	ra,12(sp)
  __rt_wakeup_use_fast = 0;
1c00c090:	9207ae23          	sw	zero,-1732(a5) # 1c00f93c <__rt_wakeup_use_fast>
1c00c094:	10062703          	lw	a4,256(a2) # 1a104100 <__l1_end+0xa1040bc>
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_RETENTION_CONFIG_OFFSET);
1c00c098:	10462683          	lw	a3,260(a2)
  PMURetentionState.Raw = GetRetentiveState();
1c00c09c:	1c00f7b7          	lui	a5,0x1c00f
1c00c0a0:	57c78793          	addi	a5,a5,1404 # 1c00f57c <SystemStateToSCUFastSeq>
1c00c0a4:	cfd4                	sw	a3,28(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00c0a6:	c2e696b3          	p.extractu	a3,a3,1,14
1c00c0aa:	96be                	add	a3,a3,a5
1c00c0ac:	0286c683          	lbu	a3,40(a3) # 1a100028 <__l1_end+0xa0fffe4>
  PMUState.DCDC_Settings[REGU_OFF] = 0;
1c00c0b0:	000786a3          	sb	zero,13(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00c0b4:	00d78423          	sb	a3,8(a5)
  PMUState.DCDC_Settings[REGU_NV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Nominal*8);
1c00c0b8:	c80716b3          	p.extractu	a3,a4,4,0
1c00c0bc:	00d78523          	sb	a3,10(a5)
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00c0c0:	c90716b3          	p.extractu	a3,a4,4,16
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00c0c4:	c9871733          	p.extractu	a4,a4,4,24
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00c0c8:	00d785a3          	sb	a3,11(a5)
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00c0cc:	00e78623          	sb	a4,12(a5)
  Bypass.Raw = GetPMUBypass();
1c00c0d0:	07062783          	lw	a5,112(a2)
  Bypass.Fields.Bypass = 1;
1c00c0d4:	4705                	li	a4,1
1c00c0d6:	c00727b3          	p.insert	a5,a4,0,0
  Bypass.Fields.BypassClock = 1;
1c00c0da:	c09727b3          	p.insert	a5,a4,0,9
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00c0de:	06f62823          	sw	a5,112(a2)
  InitFlls();
1c00c0e2:	f53ff0ef          	jal	ra,1c00c034 <InitFlls>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_CLUSTER_ON_OFF);
1c00c0e6:	457d                	li	a0,31
1c00c0e8:	c49ff0ef          	jal	ra,1c00bd30 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_MSP);
1c00c0ec:	02000513          	li	a0,32
1c00c0f0:	c41ff0ef          	jal	ra,1c00bd30 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_MODE_CHANGED);
1c00c0f4:	02100513          	li	a0,33
1c00c0f8:	c39ff0ef          	jal	ra,1c00bd30 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_OK);
1c00c0fc:	02200513          	li	a0,34
1c00c100:	c31ff0ef          	jal	ra,1c00bd30 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_DELAYED);
1c00c104:	02300513          	li	a0,35
1c00c108:	c29ff0ef          	jal	ra,1c00bd30 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_PICL_OK);
1c00c10c:	02400513          	li	a0,36
1c00c110:	c21ff0ef          	jal	ra,1c00bd30 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_SCU_OK);
1c00c114:	02500513          	li	a0,37
1c00c118:	c19ff0ef          	jal	ra,1c00bd30 <soc_eu_fcEventMask_setEvent>
  PMU_Write(DLC_IMR, 0x7);
1c00c11c:	1a1077b7          	lui	a5,0x1a107
1c00c120:	471d                	li	a4,7
1c00c122:	00e7a623          	sw	a4,12(a5) # 1a10700c <__l1_end+0xa106fc8>
  PMU_Write(DLC_IFR, (MAESTRO_EVENT_PICL_OK|MAESTRO_EVENT_SCU_OK));
1c00c126:	4761                	li	a4,24
1c00c128:	00e7a823          	sw	a4,16(a5)
}
1c00c12c:	40b2                	lw	ra,12(sp)
1c00c12e:	0141                	addi	sp,sp,16
1c00c130:	8082                	ret
1c00c132:	8082                	ret

1c00c134 <__rt_fll_init>:


unsigned int __rt_fll_init(int fll)
{
  return FllsFrequency[fll];
1c00c134:	00251793          	slli	a5,a0,0x2
1c00c138:	1c00f537          	lui	a0,0x1c00f
1c00c13c:	57c50513          	addi	a0,a0,1404 # 1c00f57c <SystemStateToSCUFastSeq>
1c00c140:	953e                	add	a0,a0,a5
}
1c00c142:	5108                	lw	a0,32(a0)
1c00c144:	8082                	ret

1c00c146 <__rt_fll_deinit>:

void __rt_fll_deinit(int fll)
{
}
1c00c146:	8082                	ret

1c00c148 <__rt_flls_constructor>:

void __rt_flls_constructor()
{
}
1c00c148:	8082                	ret

1c00c14a <__rt_fll_set_freq>:

unsigned int __rt_fll_set_freq(int fll, unsigned int frequency)
{
  return SetFllFrequency(fll, frequency, 0);
1c00c14a:	4601                	li	a2,0
1c00c14c:	c9bff06f          	j	1c00bde6 <SetFllFrequency>

1c00c150 <__rt_init_cluster_data>:
{
#if defined(EU_VERSION) && EU_VERSION >= 3
  eu_evt_maskSet((1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT));
  rt_team_fork(rt_nb_pe(), cluster_pe_start, NULL);
#endif
}
1c00c150:	04050713          	addi	a4,a0,64
1c00c154:	00400793          	li	a5,4
1c00c158:	01671613          	slli	a2,a4,0x16
1c00c15c:	e6c7b7b3          	p.bclr	a5,a5,19,12
1c00c160:	1c0106b7          	lui	a3,0x1c010
1c00c164:	97b2                	add	a5,a5,a2
1c00c166:	96c68693          	addi	a3,a3,-1684 # 1c00f96c <_bss_end>
1c00c16a:	04000713          	li	a4,64
1c00c16e:	8f95                	sub	a5,a5,a3
1c00c170:	00f685b3          	add	a1,a3,a5
1c00c174:	02e04963          	bgtz	a4,1c00c1a6 <__rt_init_cluster_data+0x56>
1c00c178:	1c0107b7          	lui	a5,0x1c010
1c00c17c:	02800713          	li	a4,40
1c00c180:	94478793          	addi	a5,a5,-1724 # 1c00f944 <__rt_fc_cluster_data>
1c00c184:	42e507b3          	p.mac	a5,a0,a4
1c00c188:	00201737          	lui	a4,0x201
1c00c18c:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00c190:	9732                	add	a4,a4,a2
1c00c192:	cb98                	sw	a4,16(a5)
1c00c194:	00400713          	li	a4,4
1c00c198:	e6c73733          	p.bclr	a4,a4,19,12
1c00c19c:	9732                	add	a4,a4,a2
1c00c19e:	0007a423          	sw	zero,8(a5)
1c00c1a2:	cbd8                	sw	a4,20(a5)
1c00c1a4:	8082                	ret
1c00c1a6:	0046a80b          	p.lw	a6,4(a3!)
1c00c1aa:	1771                	addi	a4,a4,-4
1c00c1ac:	0105a023          	sw	a6,0(a1)
1c00c1b0:	b7c1                	j	1c00c170 <__rt_init_cluster_data+0x20>

1c00c1b2 <__rt_cluster_init>:
1c00c1b2:	1c010537          	lui	a0,0x1c010
1c00c1b6:	1141                	addi	sp,sp,-16
1c00c1b8:	02800613          	li	a2,40
1c00c1bc:	4581                	li	a1,0
1c00c1be:	94450513          	addi	a0,a0,-1724 # 1c00f944 <__rt_fc_cluster_data>
1c00c1c2:	c606                	sw	ra,12(sp)
1c00c1c4:	468010ef          	jal	ra,1c00d62c <memset>
1c00c1c8:	1c00f5b7          	lui	a1,0x1c00f
1c00c1cc:	9b058593          	addi	a1,a1,-1616 # 1c00e9b0 <__rt_dma_2d>
1c00c1d0:	4525                	li	a0,9
1c00c1d2:	d31fe0ef          	jal	ra,1c00af02 <rt_irq_set_handler>
1c00c1d6:	1c0005b7          	lui	a1,0x1c000
1c00c1da:	17458593          	addi	a1,a1,372 # 1c000174 <__rt_remote_enqueue_event>
1c00c1de:	4505                	li	a0,1
1c00c1e0:	d23fe0ef          	jal	ra,1c00af02 <rt_irq_set_handler>
1c00c1e4:	4789                	li	a5,2
1c00c1e6:	00204737          	lui	a4,0x204
1c00c1ea:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00c1ee:	00f72423          	sw	a5,8(a4)
1c00c1f2:	1c0005b7          	lui	a1,0x1c000
1c00c1f6:	13c58593          	addi	a1,a1,316 # 1c00013c <__rt_bridge_enqueue_event>
1c00c1fa:	4511                	li	a0,4
1c00c1fc:	d07fe0ef          	jal	ra,1c00af02 <rt_irq_set_handler>
1c00c200:	47c1                	li	a5,16
1c00c202:	00204737          	lui	a4,0x204
1c00c206:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00c20a:	00f72423          	sw	a5,8(a4)
1c00c20e:	40b2                	lw	ra,12(sp)
1c00c210:	4501                	li	a0,0
1c00c212:	0141                	addi	sp,sp,16
1c00c214:	8082                	ret

1c00c216 <__rt_cluster_mount_step>:
{
1c00c216:	7179                	addi	sp,sp,-48
1c00c218:	ce4e                	sw	s3,28(sp)
1c00c21a:	cc52                	sw	s4,24(sp)
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00c21c:	1c000a37          	lui	s4,0x1c000
  return (void *)(ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ((int)data & 0xFFF));
1c00c220:	00400993          	li	s3,4
1c00c224:	080a0a13          	addi	s4,s4,128 # 1c000080 <_start>
{
1c00c228:	d422                	sw	s0,40(sp)
1c00c22a:	d606                	sw	ra,44(sp)
1c00c22c:	d226                	sw	s1,36(sp)
1c00c22e:	d04a                	sw	s2,32(sp)
1c00c230:	ca56                	sw	s5,20(sp)
1c00c232:	842a                	mv	s0,a0
1c00c234:	e6c9b9b3          	p.bclr	s3,s3,19,12
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00c238:	ce0a3a33          	p.bclr	s4,s4,7,0
    switch (cluster->state)
1c00c23c:	4c5c                	lw	a5,28(s0)
1c00c23e:	0217ad63          	p.beqimm	a5,1,1c00c278 <__rt_cluster_mount_step+0x62>
1c00c242:	0c27a663          	p.beqimm	a5,2,1c00c30e <__rt_cluster_mount_step+0xf8>
1c00c246:	e3e1                	bnez	a5,1c00c306 <__rt_cluster_mount_step+0xf0>
  int cid = cluster->cid;
1c00c248:	5018                	lw	a4,32(s0)
  cluster->powered_up = 0;
1c00c24a:	00042c23          	sw	zero,24(s0)
  if (cid == 0)
1c00c24e:	eb01                	bnez	a4,1c00c25e <__rt_cluster_mount_step+0x48>
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00c250:	5048                	lw	a0,36(s0)
1c00c252:	006c                	addi	a1,sp,12
    int pending = 0;
1c00c254:	c602                	sw	zero,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00c256:	d15ff0ef          	jal	ra,1c00bf6a <__rt_pmu_cluster_power_up>
    return pending;
1c00c25a:	47b2                	lw	a5,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00c25c:	cc08                	sw	a0,24(s0)
    cluster->state++;
1c00c25e:	4c58                	lw	a4,28(s0)
1c00c260:	0705                	addi	a4,a4,1
1c00c262:	cc58                	sw	a4,28(s0)
  while(!end)
1c00c264:	dfe1                	beqz	a5,1c00c23c <__rt_cluster_mount_step+0x26>
}
1c00c266:	50b2                	lw	ra,44(sp)
1c00c268:	5422                	lw	s0,40(sp)
1c00c26a:	5492                	lw	s1,36(sp)
1c00c26c:	5902                	lw	s2,32(sp)
1c00c26e:	49f2                	lw	s3,28(sp)
1c00c270:	4a62                	lw	s4,24(sp)
1c00c272:	4ad2                	lw	s5,20(sp)
1c00c274:	6145                	addi	sp,sp,48
1c00c276:	8082                	ret
1c00c278:	02042a83          	lw	s5,32(s0)
1c00c27c:	040a8493          	addi	s1,s5,64
1c00c280:	04da                	slli	s1,s1,0x16
1c00c282:	009987b3          	add	a5,s3,s1
  pool->first_call_fc_for_cl = NULL;
1c00c286:	0007a023          	sw	zero,0(a5)
  pool->first_call_fc = NULL;
1c00c28a:	0007a223          	sw	zero,4(a5)
  pool->last_call_fc = NULL;
1c00c28e:	0007a423          	sw	zero,8(a5)
  __rt_cluster_fc_task_lock = 0;
1c00c292:	100007b7          	lui	a5,0x10000
1c00c296:	0407a023          	sw	zero,64(a5) # 10000040 <__rt_cluster_fc_task_lock>
  return __rt_platform;
1c00c29a:	1c00f7b7          	lui	a5,0x1c00f
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00c29e:	56c7a783          	lw	a5,1388(a5) # 1c00f56c <__rt_platform>
1c00c2a2:	0017af63          	p.beqimm	a5,1,1c00c2c0 <__rt_cluster_mount_step+0xaa>
      int init_freq = __rt_fll_init(__RT_FLL_CL);
1c00c2a6:	4505                	li	a0,1
1c00c2a8:	e8dff0ef          	jal	ra,1c00c134 <__rt_fll_init>

  #if defined(FLL_VERSION)

  static inline int rt_freq_get(rt_freq_domain_e domain)
  {
    return __rt_freq_domains[domain];
1c00c2ac:	1c0107b7          	lui	a5,0x1c010
1c00c2b0:	93478793          	addi	a5,a5,-1740 # 1c00f934 <__rt_freq_domains>
1c00c2b4:	43cc                	lw	a1,4(a5)
      if (freq)
1c00c2b6:	c9b1                	beqz	a1,1c00c30a <__rt_cluster_mount_step+0xf4>
    return rt_freq_set_and_get(domain, freq, NULL);
1c00c2b8:	4601                	li	a2,0
1c00c2ba:	4505                	li	a0,1
1c00c2bc:	9c1ff0ef          	jal	ra,1c00bc7c <rt_freq_set_and_get>
    IP_WRITE(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid), ARCHI_CLUSTER_CTRL_CLUSTER_CLK_GATE, 1);
1c00c2c0:	00200937          	lui	s2,0x200
1c00c2c4:	01248733          	add	a4,s1,s2
1c00c2c8:	4785                	li	a5,1
1c00c2ca:	02f72023          	sw	a5,32(a4)
    __rt_init_cluster_data(cid);
1c00c2ce:	8556                	mv	a0,s5
1c00c2d0:	e81ff0ef          	jal	ra,1c00c150 <__rt_init_cluster_data>
    __rt_alloc_init_l1(cid);
1c00c2d4:	8556                	mv	a0,s5
1c00c2d6:	c82ff0ef          	jal	ra,1c00b758 <__rt_alloc_init_l1>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
1c00c2da:	002017b7          	lui	a5,0x201
1c00c2de:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00c2e2:	577d                	li	a4,-1
1c00c2e4:	04090913          	addi	s2,s2,64 # 200040 <__L2+0x180040>
1c00c2e8:	00e4e7a3          	p.sw	a4,a5(s1)
1c00c2ec:	9926                	add	s2,s2,s1
1c00c2ee:	008250fb          	lp.setupi	x1,8,1c00c2f6 <__rt_cluster_mount_step+0xe0>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00c2f2:	0149222b          	p.sw	s4,4(s2!)
1c00c2f6:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00c2f8:	002007b7          	lui	a5,0x200
1c00c2fc:	07a1                	addi	a5,a5,8
1c00c2fe:	0ff00713          	li	a4,255
1c00c302:	00e4e7a3          	p.sw	a4,a5(s1)
    switch (cluster->state)
1c00c306:	4781                	li	a5,0
1c00c308:	bf99                	j	1c00c25e <__rt_cluster_mount_step+0x48>
    __rt_freq_domains[domain] = freq;
1c00c30a:	c3c8                	sw	a0,4(a5)
1c00c30c:	bf55                	j	1c00c2c0 <__rt_cluster_mount_step+0xaa>
        __rt_event_restore(cluster->mount_event);
1c00c30e:	505c                	lw	a5,36(s0)
  event->implem.pending = event->implem.saved_pending;
1c00c310:	5bd8                	lw	a4,52(a5)
1c00c312:	d3d8                	sw	a4,36(a5)
  event->arg[0] = (uintptr_t)event->implem.saved_callback;
1c00c314:	57d8                	lw	a4,44(a5)
1c00c316:	c3d8                	sw	a4,4(a5)
  event->arg[1] = (uintptr_t)event->implem.saved_arg;
1c00c318:	5b98                	lw	a4,48(a5)
1c00c31a:	c798                	sw	a4,8(a5)
  event->implem.saved_pending = 0;
1c00c31c:	0207aa23          	sw	zero,52(a5) # 200034 <__L2+0x180034>
        __rt_event_enqueue(cluster->mount_event);
1c00c320:	505c                	lw	a5,36(s0)
  if (sched->first) {
1c00c322:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00c326:	01c00693          	li	a3,28
  event->next = NULL;
1c00c32a:	0007a023          	sw	zero,0(a5)
  if (sched->first) {
1c00c32e:	c611                	beqz	a2,1c00c33a <__rt_cluster_mount_step+0x124>
    sched->last->next = event;
1c00c330:	42d8                	lw	a4,4(a3)
1c00c332:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c00c334:	c2dc                	sw	a5,4(a3)
        end = 1;
1c00c336:	4785                	li	a5,1
1c00c338:	b71d                	j	1c00c25e <__rt_cluster_mount_step+0x48>
    sched->first = event;
1c00c33a:	00f02e23          	sw	a5,28(zero) # 1c <__rt_sched>
1c00c33e:	bfdd                	j	1c00c334 <__rt_cluster_mount_step+0x11e>

1c00c340 <pi_cluster_conf_init>:
  conf->id = 0;
1c00c340:	00052223          	sw	zero,4(a0)
}
1c00c344:	8082                	ret

1c00c346 <pi_cluster_open>:
{
1c00c346:	1101                	addi	sp,sp,-32
1c00c348:	ce06                	sw	ra,28(sp)
1c00c34a:	cc22                	sw	s0,24(sp)
1c00c34c:	ca26                	sw	s1,20(sp)
1c00c34e:	c84a                	sw	s2,16(sp)
1c00c350:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c352:	30047973          	csrrci	s2,mstatus,8
  struct pi_cluster_conf *conf = (struct pi_cluster_conf *)cluster_dev->config;
1c00c356:	00452983          	lw	s3,4(a0)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00c35a:	1c0104b7          	lui	s1,0x1c010
1c00c35e:	02800793          	li	a5,40
  int cid = conf->id;
1c00c362:	0049a703          	lw	a4,4(s3)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00c366:	94448493          	addi	s1,s1,-1724 # 1c00f944 <__rt_fc_cluster_data>
1c00c36a:	42f704b3          	p.mac	s1,a4,a5
1c00c36e:	c504                	sw	s1,8(a0)
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00c370:	920ff0ef          	jal	ra,1c00b490 <__rt_wait_event_prepare_blocking>
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00c374:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00c378:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00c37c:	ca5797b3          	p.extractu	a5,a5,5,5
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00c380:	842a                	mv	s0,a0
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00c382:	04e79563          	bne	a5,a4,1c00c3cc <pi_cluster_open+0x86>
  event->implem.saved_pending = event->implem.pending;
1c00c386:	515c                	lw	a5,36(a0)
    cluster->state = RT_CLUSTER_MOUNT_START;
1c00c388:	0004ae23          	sw	zero,28(s1)
    cluster->mount_event = event;
1c00c38c:	d0c8                	sw	a0,36(s1)
1c00c38e:	d95c                	sw	a5,52(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00c390:	415c                	lw	a5,4(a0)
  event->implem.keep = 0;
1c00c392:	02052423          	sw	zero,40(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00c396:	d55c                	sw	a5,44(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00c398:	451c                	lw	a5,8(a0)
  event->arg[1] = (uintptr_t)arg;
1c00c39a:	c504                	sw	s1,8(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00c39c:	d91c                	sw	a5,48(a0)
  event->arg[0] = (uintptr_t)callback;
1c00c39e:	1c00c7b7          	lui	a5,0x1c00c
1c00c3a2:	21678793          	addi	a5,a5,534 # 1c00c216 <__rt_cluster_mount_step>
1c00c3a6:	c15c                	sw	a5,4(a0)
  event->implem.pending = 1;  
1c00c3a8:	4785                	li	a5,1
1c00c3aa:	d15c                	sw	a5,36(a0)
    __rt_cluster_mount_step((void *)cluster);
1c00c3ac:	8526                	mv	a0,s1
1c00c3ae:	e69ff0ef          	jal	ra,1c00c216 <__rt_cluster_mount_step>
  __rt_wait_event(event);
1c00c3b2:	8522                	mv	a0,s0
1c00c3b4:	a2eff0ef          	jal	ra,1c00b5e2 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00c3b8:	30091073          	csrw	mstatus,s2
}
1c00c3bc:	40f2                	lw	ra,28(sp)
1c00c3be:	4462                	lw	s0,24(sp)
1c00c3c0:	44d2                	lw	s1,20(sp)
1c00c3c2:	4942                	lw	s2,16(sp)
1c00c3c4:	49b2                	lw	s3,12(sp)
1c00c3c6:	4501                	li	a0,0
1c00c3c8:	6105                	addi	sp,sp,32
1c00c3ca:	8082                	ret
  if (__rt_cluster_mount(&__rt_fc_cluster_data[cid], conf->id, 0, event))
1c00c3cc:	0049a483          	lw	s1,4(s3)
    __rt_init_cluster_data(cid);
1c00c3d0:	8526                	mv	a0,s1
1c00c3d2:	d7fff0ef          	jal	ra,1c00c150 <__rt_init_cluster_data>
1c00c3d6:	04048513          	addi	a0,s1,64
1c00c3da:	002017b7          	lui	a5,0x201
1c00c3de:	055a                	slli	a0,a0,0x16
1c00c3e0:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00c3e4:	577d                	li	a4,-1
1c00c3e6:	00e567a3          	p.sw	a4,a5(a0)
1c00c3ea:	002007b7          	lui	a5,0x200
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00c3ee:	1c000737          	lui	a4,0x1c000
1c00c3f2:	04478793          	addi	a5,a5,68 # 200044 <__L2+0x180044>
1c00c3f6:	08070713          	addi	a4,a4,128 # 1c000080 <_start>
1c00c3fa:	97aa                	add	a5,a5,a0
1c00c3fc:	ce073733          	p.bclr	a4,a4,7,0
1c00c400:	007250fb          	lp.setupi	x1,7,1c00c408 <pi_cluster_open+0xc2>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00c404:	00e7a22b          	p.sw	a4,4(a5!)
1c00c408:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00c40a:	002007b7          	lui	a5,0x200
1c00c40e:	07a1                	addi	a5,a5,8
1c00c410:	577d                	li	a4,-1
1c00c412:	00e567a3          	p.sw	a4,a5(a0)
    rt_event_push(event);
1c00c416:	8522                	mv	a0,s0
1c00c418:	942ff0ef          	jal	ra,1c00b55a <rt_event_push>
1c00c41c:	bf59                	j	1c00c3b2 <pi_cluster_open+0x6c>

1c00c41e <pi_cluster_close>:
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00c41e:	451c                	lw	a5,8(a0)
{
1c00c420:	1101                	addi	sp,sp,-32
1c00c422:	cc22                	sw	s0,24(sp)
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00c424:	5380                	lw	s0,32(a5)
1c00c426:	1c00f7b7          	lui	a5,0x1c00f
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00c42a:	56c7a783          	lw	a5,1388(a5) # 1c00f56c <__rt_platform>
{
1c00c42e:	ce06                	sw	ra,28(sp)
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00c430:	0017a563          	p.beqimm	a5,1,1c00c43a <pi_cluster_close+0x1c>
      __rt_fll_deinit(__RT_FLL_CL);
1c00c434:	4505                	li	a0,1
1c00c436:	d11ff0ef          	jal	ra,1c00c146 <__rt_fll_deinit>
    int pending = 0;
1c00c43a:	c602                	sw	zero,12(sp)
  if (cid == 0) __rt_pmu_cluster_power_down(event, &pending);
1c00c43c:	e409                	bnez	s0,1c00c446 <pi_cluster_close+0x28>
1c00c43e:	006c                	addi	a1,sp,12
1c00c440:	4501                	li	a0,0
1c00c442:	915ff0ef          	jal	ra,1c00bd56 <__rt_pmu_cluster_power_down>
}
1c00c446:	40f2                	lw	ra,28(sp)
1c00c448:	4462                	lw	s0,24(sp)
1c00c44a:	4501                	li	a0,0
1c00c44c:	6105                	addi	sp,sp,32
1c00c44e:	8082                	ret

1c00c450 <__rt_cluster_push_fc_event>:
  while (rt_tas_lock_32((int)&__rt_cluster_fc_task_lock) == -1)
1c00c450:	100006b7          	lui	a3,0x10000
1c00c454:	04068693          	addi	a3,a3,64 # 10000040 <__rt_cluster_fc_task_lock>
  return addr | (1<<ARCHI_L1_TAS_BIT);
1c00c458:	c146c5b3          	p.bset	a1,a3,0,20
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c45c:	4709                	li	a4,2
1c00c45e:	002047b7          	lui	a5,0x204
  signed int result = *(volatile signed int *)__rt_tas_addr(addr);
1c00c462:	4190                	lw	a2,0(a1)
1c00c464:	05f62063          	p.beqimm	a2,-1,1c00c4a4 <__rt_cluster_push_fc_event+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00c468:	01402773          	csrr	a4,uhartid
  while(data->events != NULL)
1c00c46c:	1c0107b7          	lui	a5,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00c470:	8715                	srai	a4,a4,0x5
1c00c472:	f2673733          	p.bclr	a4,a4,25,6
1c00c476:	02800613          	li	a2,40
1c00c47a:	94478793          	addi	a5,a5,-1724 # 1c00f944 <__rt_fc_cluster_data>
1c00c47e:	42c707b3          	p.mac	a5,a4,a2
1c00c482:	4609                	li	a2,2
1c00c484:	00204737          	lui	a4,0x204
1c00c488:	43cc                	lw	a1,4(a5)
1c00c48a:	e585                	bnez	a1,1c00c4b2 <__rt_cluster_push_fc_event+0x62>
  data->events = event;
1c00c48c:	c3c8                	sw	a0,4(a5)
  pulp_write32(evtAddr, coreSet);
1c00c48e:	1b2017b7          	lui	a5,0x1b201
1c00c492:	e007a223          	sw	zero,-508(a5) # 1b200e04 <__fc_tcdm_end+0x1ffa34>
  *(volatile signed int *)addr = value;
1c00c496:	0006a023          	sw	zero,0(a3)
1c00c49a:	002047b7          	lui	a5,0x204
1c00c49e:	1007a223          	sw	zero,260(a5) # 204104 <__L2+0x184104>
}
1c00c4a2:	8082                	ret
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c4a4:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00c4a8:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00c4ac:	00e7a223          	sw	a4,4(a5)
1c00c4b0:	bf4d                	j	1c00c462 <__rt_cluster_push_fc_event+0x12>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c4b2:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00c4b6:	03c76583          	p.elw	a1,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00c4ba:	00c72223          	sw	a2,4(a4)
1c00c4be:	b7e9                	j	1c00c488 <__rt_cluster_push_fc_event+0x38>

1c00c4c0 <__rt_cluster_new>:
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00c4c0:	1c00c5b7          	lui	a1,0x1c00c
{
1c00c4c4:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00c4c6:	4601                	li	a2,0
1c00c4c8:	1b258593          	addi	a1,a1,434 # 1c00c1b2 <__rt_cluster_init>
1c00c4cc:	4501                	li	a0,0
{
1c00c4ce:	c606                	sw	ra,12(sp)
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00c4d0:	b9ffe0ef          	jal	ra,1c00b06e <__rt_cbsys_add>
  if (err) rt_fatal("Unable to initialize time driver\n");
1c00c4d4:	c10d                	beqz	a0,1c00c4f6 <__rt_cluster_new+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00c4d6:	01402673          	csrr	a2,uhartid
1c00c4da:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00c4de:	40565593          	srai	a1,a2,0x5
1c00c4e2:	f265b5b3          	p.bclr	a1,a1,25,6
1c00c4e6:	f4563633          	p.bclr	a2,a2,26,5
1c00c4ea:	18c50513          	addi	a0,a0,396 # 1c00f18c <IntegerExpLUT+0xcc>
1c00c4ee:	47a010ef          	jal	ra,1c00d968 <printf>
1c00c4f2:	3fa010ef          	jal	ra,1c00d8ec <abort>
}
1c00c4f6:	40b2                	lw	ra,12(sp)
1c00c4f8:	0141                	addi	sp,sp,16
1c00c4fa:	8082                	ret

1c00c4fc <__rt_cluster_pulpos_emu_init>:
static struct pi_device *__rt_fc_cluster_device;
static struct pi_cluster_task __rt_pulpos_emu_global_cluster_task;


static void __attribute__((constructor)) __rt_cluster_pulpos_emu_init()
{
1c00c4fc:	1141                	addi	sp,sp,-16
  int nb_cluster = rt_nb_cluster();

  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00c4fe:	45b1                	li	a1,12
1c00c500:	4505                	li	a0,1
{
1c00c502:	c606                	sw	ra,12(sp)
  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00c504:	9f6ff0ef          	jal	ra,1c00b6fa <rt_alloc>
1c00c508:	1c0107b7          	lui	a5,0x1c010
1c00c50c:	8ca7ae23          	sw	a0,-1828(a5) # 1c00f8dc <__rt_fc_cluster_device>
  if (__rt_fc_cluster_device == NULL) {
1c00c510:	e10d                	bnez	a0,1c00c532 <__rt_cluster_pulpos_emu_init+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00c512:	01402673          	csrr	a2,uhartid
    rt_fatal("Unable to allocate cluster control structure\n");
1c00c516:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00c51a:	40565593          	srai	a1,a2,0x5
1c00c51e:	f265b5b3          	p.bclr	a1,a1,25,6
1c00c522:	f4563633          	p.bclr	a2,a2,26,5
1c00c526:	1d450513          	addi	a0,a0,468 # 1c00f1d4 <IntegerExpLUT+0x114>
1c00c52a:	43e010ef          	jal	ra,1c00d968 <printf>
1c00c52e:	3be010ef          	jal	ra,1c00d8ec <abort>
    return;
  }
}
1c00c532:	40b2                	lw	ra,12(sp)
1c00c534:	0141                	addi	sp,sp,16
1c00c536:	8082                	ret

1c00c538 <rt_cluster_call>:

int rt_cluster_call(rt_cluster_call_t *_call, int cid, void (*entry)(void *arg), void *arg, void *stacks, int master_stack_size, int slave_stack_size, int nb_pe, rt_event_t *event)
{
1c00c538:	7139                	addi	sp,sp,-64
1c00c53a:	d84a                	sw	s2,48(sp)
1c00c53c:	4906                	lw	s2,64(sp)
1c00c53e:	dc22                	sw	s0,56(sp)
1c00c540:	842e                	mv	s0,a1
1c00c542:	de06                	sw	ra,60(sp)
1c00c544:	da26                	sw	s1,52(sp)
1c00c546:	d64e                	sw	s3,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c548:	300479f3          	csrrci	s3,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00c54c:	84ca                	mv	s1,s2
  if (likely(event != NULL)) return event;
1c00c54e:	02091163          	bnez	s2,1c00c570 <rt_cluster_call+0x38>
  return __rt_wait_event_prepare_blocking();
1c00c552:	ce32                	sw	a2,28(sp)
1c00c554:	cc36                	sw	a3,24(sp)
1c00c556:	ca3a                	sw	a4,20(sp)
1c00c558:	c83e                	sw	a5,16(sp)
1c00c55a:	c642                	sw	a6,12(sp)
1c00c55c:	c446                	sw	a7,8(sp)
1c00c55e:	f33fe0ef          	jal	ra,1c00b490 <__rt_wait_event_prepare_blocking>
1c00c562:	48a2                	lw	a7,8(sp)
1c00c564:	4832                	lw	a6,12(sp)
1c00c566:	47c2                	lw	a5,16(sp)
1c00c568:	4752                	lw	a4,20(sp)
1c00c56a:	46e2                	lw	a3,24(sp)
1c00c56c:	4672                	lw	a2,28(sp)
1c00c56e:	84aa                	mv	s1,a0
static inline struct pi_cluster_task *pi_cluster_task(struct pi_cluster_task *task, void (*entry)(void*), void *arg)
{
    #if defined(PMSIS_DRIVERS)
    memset(task, 0, sizeof(struct pi_cluster_task));
    #endif  /* PMSIS_DRIVERS */
    task->entry = entry;
1c00c570:	1c00f5b7          	lui	a1,0x1c00f
1c00c574:	6f858513          	addi	a0,a1,1784 # 1c00f6f8 <__rt_pulpos_emu_global_cluster_task>
  struct pi_cluster_task *task = &__rt_pulpos_emu_global_cluster_task;

  pi_cluster_task(task, entry, arg);

  task->stacks = stacks;
  task->stack_size = master_stack_size;
1c00c578:	c55c                	sw	a5,12(a0)
  task->slave_stack_size = slave_stack_size;
  task->nb_cores = nb_pe;

  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00c57a:	1c0107b7          	lui	a5,0x1c010
1c00c57e:	c110                	sw	a2,0(a0)
    task->arg = arg;
1c00c580:	c154                	sw	a3,4(a0)
  task->stacks = stacks;
1c00c582:	c518                	sw	a4,8(a0)
  task->slave_stack_size = slave_stack_size;
1c00c584:	01052823          	sw	a6,16(a0)
  task->nb_cores = nb_pe;
1c00c588:	01152a23          	sw	a7,20(a0)
  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00c58c:	8dc7a503          	lw	a0,-1828(a5) # 1c00f8dc <__rt_fc_cluster_device>
1c00c590:	47b1                	li	a5,12
1c00c592:	8626                	mv	a2,s1
1c00c594:	42f40533          	p.mac	a0,s0,a5
1c00c598:	6f858593          	addi	a1,a1,1784
1c00c59c:	2061                	jal	1c00c624 <pi_cluster_send_task_to_cl_async>
1c00c59e:	842a                	mv	s0,a0
1c00c5a0:	cd01                	beqz	a0,1c00c5b8 <rt_cluster_call+0x80>
  __builtin_pulp_spr_write(reg, val);
1c00c5a2:	30099073          	csrw	mstatus,s3
  {
  	rt_irq_restore(irq);
  	return -1;
1c00c5a6:	547d                	li	s0,-1
  __rt_wait_event_check(event, call_event);

  rt_irq_restore(irq);

  return 0;
}
1c00c5a8:	8522                	mv	a0,s0
1c00c5aa:	50f2                	lw	ra,60(sp)
1c00c5ac:	5462                	lw	s0,56(sp)
1c00c5ae:	54d2                	lw	s1,52(sp)
1c00c5b0:	5942                	lw	s2,48(sp)
1c00c5b2:	59b2                	lw	s3,44(sp)
1c00c5b4:	6121                	addi	sp,sp,64
1c00c5b6:	8082                	ret
  if (event == NULL) __rt_wait_event(call_event);
1c00c5b8:	00091563          	bnez	s2,1c00c5c2 <rt_cluster_call+0x8a>
1c00c5bc:	8526                	mv	a0,s1
1c00c5be:	824ff0ef          	jal	ra,1c00b5e2 <__rt_wait_event>
1c00c5c2:	30099073          	csrw	mstatus,s3
  return 0;
1c00c5c6:	b7cd                	j	1c00c5a8 <rt_cluster_call+0x70>

1c00c5c8 <rt_cluster_mount>:

void rt_cluster_mount(int mount, int cid, int flags, rt_event_t *event)
{
1c00c5c8:	7139                	addi	sp,sp,-64
1c00c5ca:	dc22                	sw	s0,56(sp)
1c00c5cc:	da26                	sw	s1,52(sp)
1c00c5ce:	d84a                	sw	s2,48(sp)
1c00c5d0:	4431                	li	s0,12
1c00c5d2:	1c0104b7          	lui	s1,0x1c010
1c00c5d6:	de06                	sw	ra,60(sp)
1c00c5d8:	d64e                	sw	s3,44(sp)
1c00c5da:	8936                	mv	s2,a3
1c00c5dc:	02858433          	mul	s0,a1,s0
1c00c5e0:	8dc48493          	addi	s1,s1,-1828 # 1c00f8dc <__rt_fc_cluster_device>
  if (mount)
1c00c5e4:	c91d                	beqz	a0,1c00c61a <rt_cluster_mount+0x52>
  {
    struct pi_cluster_conf conf;
    pi_cluster_conf_init(&conf);
1c00c5e6:	0028                	addi	a0,sp,8
1c00c5e8:	89ae                	mv	s3,a1
1c00c5ea:	d57ff0ef          	jal	ra,1c00c340 <pi_cluster_conf_init>
    pi_open_from_conf(&__rt_fc_cluster_device[cid], &conf);
1c00c5ee:	4088                	lw	a0,0(s1)
1c00c5f0:	002c                	addi	a1,sp,8
1c00c5f2:	9522                	add	a0,a0,s0
1c00c5f4:	90bfe0ef          	jal	ra,1c00aefe <pi_open_from_conf>
    conf.id = cid;
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00c5f8:	4088                	lw	a0,0(s1)
    conf.id = cid;
1c00c5fa:	c64e                	sw	s3,12(sp)
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00c5fc:	9522                	add	a0,a0,s0
1c00c5fe:	d49ff0ef          	jal	ra,1c00c346 <pi_cluster_open>
  else
  {
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
  }

  if (event)
1c00c602:	00090563          	beqz	s2,1c00c60c <rt_cluster_mount+0x44>
    rt_event_push(event);
1c00c606:	854a                	mv	a0,s2
1c00c608:	f53fe0ef          	jal	ra,1c00b55a <rt_event_push>
}
1c00c60c:	50f2                	lw	ra,60(sp)
1c00c60e:	5462                	lw	s0,56(sp)
1c00c610:	54d2                	lw	s1,52(sp)
1c00c612:	5942                	lw	s2,48(sp)
1c00c614:	59b2                	lw	s3,44(sp)
1c00c616:	6121                	addi	sp,sp,64
1c00c618:	8082                	ret
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
1c00c61a:	4088                	lw	a0,0(s1)
1c00c61c:	9522                	add	a0,a0,s0
1c00c61e:	e01ff0ef          	jal	ra,1c00c41e <pi_cluster_close>
1c00c622:	b7c5                	j	1c00c602 <rt_cluster_mount+0x3a>

1c00c624 <pi_cluster_send_task_to_cl_async>:
  }
}
#endif

int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *task, pi_task_t *async_task)
{
1c00c624:	1101                	addi	sp,sp,-32
1c00c626:	ca26                	sw	s1,20(sp)
  rt_fc_cluster_data_t *data = (rt_fc_cluster_data_t *)device->data;
1c00c628:	4504                	lw	s1,8(a0)
{
1c00c62a:	cc22                	sw	s0,24(sp)
1c00c62c:	c256                	sw	s5,4(sp)
1c00c62e:	842e                	mv	s0,a1
1c00c630:	8ab2                	mv	s5,a2
1c00c632:	ce06                	sw	ra,28(sp)
1c00c634:	c84a                	sw	s2,16(sp)
1c00c636:	c64e                	sw	s3,12(sp)
1c00c638:	c452                	sw	s4,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c63a:	30047a73          	csrrci	s4,mstatus,8

  int lock = __rt_cluster_lock(data);

  __rt_task_init(async_task);
  
  task->implem.pending = 1;
1c00c63e:	4785                	li	a5,1
  task->done = 0;
1c00c640:	00060a23          	sb	zero,20(a2)
1c00c644:	d1dc                	sw	a5,36(a1)

  rt_cluster_call_pool_t *cl_data = data->pool;

  if (task->nb_cores == 0)
1c00c646:	49dc                	lw	a5,20(a1)
  rt_cluster_call_pool_t *cl_data = data->pool;
1c00c648:	0144a983          	lw	s3,20(s1)
  if (task->nb_cores == 0)
1c00c64c:	e399                	bnez	a5,1c00c652 <pi_cluster_send_task_to_cl_async+0x2e>
    task->nb_cores = pi_cl_cluster_nb_cores();
1c00c64e:	47a1                	li	a5,8
1c00c650:	c9dc                	sw	a5,20(a1)

  if (task->stacks == NULL)
1c00c652:	441c                	lw	a5,8(s0)
1c00c654:	ef85                	bnez	a5,1c00c68c <pi_cluster_send_task_to_cl_async+0x68>
  {
    if (task->stack_size == 0)
1c00c656:	445c                	lw	a5,12(s0)
1c00c658:	eb81                	bnez	a5,1c00c668 <pi_cluster_send_task_to_cl_async+0x44>
    {
      task->stack_size = 0x800;
1c00c65a:	6785                	lui	a5,0x1
1c00c65c:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00c660:	c45c                	sw	a5,12(s0)
      task->slave_stack_size = 0x400;
1c00c662:	40000793          	li	a5,1024
1c00c666:	c81c                	sw	a5,16(s0)
    }

    if (task->slave_stack_size == 0)
1c00c668:	481c                	lw	a5,16(s0)
1c00c66a:	00c42903          	lw	s2,12(s0)
1c00c66e:	e399                	bnez	a5,1c00c674 <pi_cluster_send_task_to_cl_async+0x50>
      task->slave_stack_size = task->stack_size;
1c00c670:	01242823          	sw	s2,16(s0)

    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00c674:	485c                	lw	a5,20(s0)
1c00c676:	4818                	lw	a4,16(s0)

    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00c678:	448c                	lw	a1,8(s1)
    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00c67a:	17fd                	addi	a5,a5,-1
1c00c67c:	42e78933          	p.mac	s2,a5,a4
    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00c680:	c9b5                	beqz	a1,1c00c6f4 <pi_cluster_send_task_to_cl_async+0xd0>
1c00c682:	44d0                	lw	a2,12(s1)
1c00c684:	05261f63          	bne	a2,s2,1c00c6e2 <pi_cluster_send_task_to_cl_async+0xbe>

      if (data->stacks == NULL)
        goto error;
    }

    task->stacks = data->stacks;
1c00c688:	449c                	lw	a5,8(s1)
1c00c68a:	c41c                	sw	a5,8(s0)

  task->completion_callback = async_task;
#ifdef ARCHI_HAS_CC
  task->implem.core_mask = (1<<(task->nb_cores-1)) - 1;
#else
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00c68c:	4858                	lw	a4,20(s0)
1c00c68e:	4785                	li	a5,1
  task->completion_callback = async_task;
1c00c690:	01542c23          	sw	s5,24(s0)
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00c694:	00e797b3          	sll	a5,a5,a4
1c00c698:	17fd                	addi	a5,a5,-1
1c00c69a:	d41c                	sw	a5,40(s0)
#endif

  task->next = NULL;
1c00c69c:	02042023          	sw	zero,32(s0)

  rt_compiler_barrier();

  if (cl_data->last_call_fc)
1c00c6a0:	0089a783          	lw	a5,8(s3)
1c00c6a4:	cbb5                	beqz	a5,1c00c718 <pi_cluster_send_task_to_cl_async+0xf4>
  {
    cl_data->last_call_fc->next = task;
1c00c6a6:	d380                	sw	s0,32(a5)
  else
  {
    cl_data->first_call_fc = task;
  }

  cl_data->last_call_fc = task;
1c00c6a8:	0089a423          	sw	s0,8(s3)

  rt_compiler_barrier();
  
  if (cl_data->first_call_fc_for_cl == NULL)
1c00c6ac:	0009a783          	lw	a5,0(s3)
1c00c6b0:	e399                	bnez	a5,1c00c6b6 <pi_cluster_send_task_to_cl_async+0x92>
    cl_data->first_call_fc_for_cl = task;
1c00c6b2:	0089a023          	sw	s0,0(s3)
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00c6b6:	509c                	lw	a5,32(s1)
  pulp_write32(evtAddr, coreSet);
1c00c6b8:	00201737          	lui	a4,0x201
1c00c6bc:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00c6c0:	04078793          	addi	a5,a5,64
1c00c6c4:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c00c6c6:	0007e723          	p.sw	zero,a4(a5)
  __builtin_pulp_spr_write(reg, val);
1c00c6ca:	300a1073          	csrw	mstatus,s4
  rt_compiler_barrier();
  eu_evt_trig(eu_evt_trig_cluster_addr(data->cid, RT_CLUSTER_CALL_EVT), 0);

  __rt_cluster_unlock(data, lock);

  return 0;
1c00c6ce:	4501                	li	a0,0

error:
  __rt_cluster_unlock(data, lock);
  return -1;
}
1c00c6d0:	40f2                	lw	ra,28(sp)
1c00c6d2:	4462                	lw	s0,24(sp)
1c00c6d4:	44d2                	lw	s1,20(sp)
1c00c6d6:	4942                	lw	s2,16(sp)
1c00c6d8:	49b2                	lw	s3,12(sp)
1c00c6da:	4a22                	lw	s4,8(sp)
1c00c6dc:	4a92                	lw	s5,4(sp)
1c00c6de:	6105                	addi	sp,sp,32
1c00c6e0:	8082                	ret

#if defined(ARCHI_HAS_L1)

extern rt_alloc_t *__rt_alloc_l1;

static inline rt_alloc_t *rt_alloc_l1(int cid) { return &__rt_alloc_l1[cid]; }
1c00c6e2:	509c                	lw	a5,32(s1)
1c00c6e4:	1c010737          	lui	a4,0x1c010
1c00c6e8:	92472503          	lw	a0,-1756(a4) # 1c00f924 <__rt_alloc_l1>
1c00c6ec:	078a                	slli	a5,a5,0x2
        rt_user_free(rt_alloc_l1(data->cid), data->stacks, data->stacks_size);
1c00c6ee:	953e                	add	a0,a0,a5
1c00c6f0:	fbffe0ef          	jal	ra,1c00b6ae <rt_user_free>
1c00c6f4:	509c                	lw	a5,32(s1)
1c00c6f6:	1c010737          	lui	a4,0x1c010
1c00c6fa:	92472503          	lw	a0,-1756(a4) # 1c00f924 <__rt_alloc_l1>
1c00c6fe:	078a                	slli	a5,a5,0x2
      data->stacks_size = stacks_size;
1c00c700:	0124a623          	sw	s2,12(s1)
      data->stacks = rt_user_alloc(rt_alloc_l1(data->cid), stacks_size);
1c00c704:	85ca                	mv	a1,s2
1c00c706:	953e                	add	a0,a0,a5
1c00c708:	f5ffe0ef          	jal	ra,1c00b666 <rt_user_alloc>
1c00c70c:	c488                	sw	a0,8(s1)
      if (data->stacks == NULL)
1c00c70e:	fd2d                	bnez	a0,1c00c688 <pi_cluster_send_task_to_cl_async+0x64>
1c00c710:	300a1073          	csrw	mstatus,s4
  return -1;
1c00c714:	557d                	li	a0,-1
1c00c716:	bf6d                	j	1c00c6d0 <pi_cluster_send_task_to_cl_async+0xac>
    cl_data->first_call_fc = task;
1c00c718:	0089a223          	sw	s0,4(s3)
1c00c71c:	b771                	j	1c00c6a8 <pi_cluster_send_task_to_cl_async+0x84>

1c00c71e <pi_cluster_send_task_to_cl>:



int pi_cluster_send_task_to_cl(struct pi_device *device, struct pi_cluster_task *task)
{
1c00c71e:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00c720:	4785                	li	a5,1
  pi_task_t fc_task;

  pi_task_block(&fc_task);

  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00c722:	860a                	mv	a2,sp
{
1c00c724:	c522                	sw	s0,136(sp)
1c00c726:	c706                	sw	ra,140(sp)
1c00c728:	c326                	sw	s1,132(sp)
1c00c72a:	c14a                	sw	s2,128(sp)
1c00c72c:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
1c00c72e:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c00c730:	d43e                	sw	a5,40(sp)
1c00c732:	00010a23          	sb	zero,20(sp)
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00c736:	eefff0ef          	jal	ra,1c00c624 <pi_cluster_send_task_to_cl_async>
  {
    return -1;
1c00c73a:	547d                	li	s0,-1
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00c73c:	e509                	bnez	a0,1c00c746 <pi_cluster_send_task_to_cl+0x28>
1c00c73e:	842a                	mv	s0,a0
  while(!task->done)
1c00c740:	01410783          	lb	a5,20(sp)
1c00c744:	cb81                	beqz	a5,1c00c754 <pi_cluster_send_task_to_cl+0x36>
  }

  pi_task_wait_on(&fc_task);

  return 0;
}
1c00c746:	8522                	mv	a0,s0
1c00c748:	40ba                	lw	ra,140(sp)
1c00c74a:	442a                	lw	s0,136(sp)
1c00c74c:	449a                	lw	s1,132(sp)
1c00c74e:	490a                	lw	s2,128(sp)
1c00c750:	6149                	addi	sp,sp,144
1c00c752:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c754:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00c758:	4585                	li	a1,1
1c00c75a:	01c00513          	li	a0,28
1c00c75e:	e21fe0ef          	jal	ra,1c00b57e <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00c762:	30091073          	csrw	mstatus,s2
1c00c766:	bfe9                	j	1c00c740 <pi_cluster_send_task_to_cl+0x22>

1c00c768 <pi_pad_set_function>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c768:	300476f3          	csrrci	a3,mstatus,8
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00c76c:	068417b7          	lui	a5,0x6841
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00c770:	00151713          	slli	a4,a0,0x1
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00c774:	05078793          	addi	a5,a5,80 # 6841050 <__L2+0x67c1050>
  unsigned int padfunId = APB_SOC_PADFUN_NO(pad);
1c00c778:	8111                	srli	a0,a0,0x4
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00c77a:	953e                	add	a0,a0,a5
1c00c77c:	050a                	slli	a0,a0,0x2
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00c77e:	8b79                	andi	a4,a4,30
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00c780:	4110                	lw	a2,0(a0)
  unsigned int oldval = hal_apb_soc_padfun_get(padfunId) & ~(((1<<APB_SOC_PADFUN_SIZE)-1) << padBit);
1c00c782:	478d                	li	a5,3
1c00c784:	00e797b3          	sll	a5,a5,a4
1c00c788:	fff7c793          	not	a5,a5
1c00c78c:	8ff1                	and	a5,a5,a2
  unsigned int newVal = oldval | (func << padBit);
1c00c78e:	00e595b3          	sll	a1,a1,a4
1c00c792:	8ddd                	or	a1,a1,a5
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id), value);
1c00c794:	c10c                	sw	a1,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c00c796:	30069073          	csrw	mstatus,a3
void pi_pad_set_function(pi_pad_e pad, pi_pad_func_e function)
{
  int irq = rt_irq_disable();
  hal_apb_soc_pad_set_function(pad, function);
  rt_irq_restore(irq);
}
1c00c79a:	8082                	ret

1c00c79c <pi_pad_init>:

void pi_pad_init(uint32_t pad_values[])
{
  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, pad_values[i]);
1c00c79c:	4114                	lw	a3,0(a0)
1c00c79e:	1a1047b7          	lui	a5,0x1a104
1c00c7a2:	14078713          	addi	a4,a5,320 # 1a104140 <__l1_end+0xa1040fc>
1c00c7a6:	c314                	sw	a3,0(a4)
1c00c7a8:	4154                	lw	a3,4(a0)
1c00c7aa:	14478713          	addi	a4,a5,324
1c00c7ae:	14878793          	addi	a5,a5,328
1c00c7b2:	c314                	sw	a3,0(a4)
1c00c7b4:	4518                	lw	a4,8(a0)
1c00c7b6:	c398                	sw	a4,0(a5)
  }  
}
1c00c7b8:	8082                	ret

1c00c7ba <l2_memcpy>:
  req = __pi_hyper_cluster_reqs_first;
  if (req)
  {
    __pi_hyper_cluster_req_exec(req);
  }
}
1c00c7ba:	87aa                	mv	a5,a0
1c00c7bc:	962e                	add	a2,a2,a1
1c00c7be:	00c59363          	bne	a1,a2,1c00c7c4 <l2_memcpy+0xa>
1c00c7c2:	8082                	ret
1c00c7c4:	0015c70b          	p.lbu	a4,1(a1!)
1c00c7c8:	00e780ab          	p.sb	a4,1(a5!)
1c00c7cc:	bfcd                	j	1c00c7be <l2_memcpy+0x4>

1c00c7ce <rt_event_enqueue>:
1c00c7ce:	300476f3          	csrrci	a3,mstatus,8
1c00c7d2:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00c7d6:	00052023          	sw	zero,0(a0)
1c00c7da:	01c00713          	li	a4,28
1c00c7de:	c619                	beqz	a2,1c00c7ec <rt_event_enqueue+0x1e>
1c00c7e0:	435c                	lw	a5,4(a4)
1c00c7e2:	c388                	sw	a0,0(a5)
1c00c7e4:	c348                	sw	a0,4(a4)
1c00c7e6:	30069073          	csrw	mstatus,a3
1c00c7ea:	8082                	ret
1c00c7ec:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00c7f0:	bfd5                	j	1c00c7e4 <rt_event_enqueue+0x16>

1c00c7f2 <pi_task_wait_on.isra.4>:
1c00c7f2:	1141                	addi	sp,sp,-16
1c00c7f4:	c422                	sw	s0,8(sp)
1c00c7f6:	c226                	sw	s1,4(sp)
1c00c7f8:	c606                	sw	ra,12(sp)
1c00c7fa:	c04a                	sw	s2,0(sp)
1c00c7fc:	842a                	mv	s0,a0
1c00c7fe:	00040783          	lb	a5,0(s0)
1c00c802:	c799                	beqz	a5,1c00c810 <pi_task_wait_on.isra.4+0x1e>
1c00c804:	40b2                	lw	ra,12(sp)
1c00c806:	4422                	lw	s0,8(sp)
1c00c808:	4492                	lw	s1,4(sp)
1c00c80a:	4902                	lw	s2,0(sp)
1c00c80c:	0141                	addi	sp,sp,16
1c00c80e:	8082                	ret
1c00c810:	30047973          	csrrci	s2,mstatus,8
1c00c814:	4585                	li	a1,1
1c00c816:	01c00513          	li	a0,28
1c00c81a:	d65fe0ef          	jal	ra,1c00b57e <__rt_event_execute>
1c00c81e:	30091073          	csrw	mstatus,s2
1c00c822:	bff1                	j	1c00c7fe <pi_task_wait_on.isra.4+0xc>

1c00c824 <__pi_hyper_pin_settings>:
1c00c824:	1141                	addi	sp,sp,-16
1c00c826:	c422                	sw	s0,8(sp)
1c00c828:	1c00f437          	lui	s0,0x1c00f
1c00c82c:	22840413          	addi	s0,s0,552 # 1c00f228 <__hyper_pad>
1c00c830:	c226                	sw	s1,4(sp)
1c00c832:	c606                	sw	ra,12(sp)
1c00c834:	03440493          	addi	s1,s0,52
1c00c838:	0044250b          	p.lw	a0,4(s0!)
1c00c83c:	458d                	li	a1,3
1c00c83e:	f2bff0ef          	jal	ra,1c00c768 <pi_pad_set_function>
1c00c842:	fe941be3          	bne	s0,s1,1c00c838 <__pi_hyper_pin_settings+0x14>
1c00c846:	40b2                	lw	ra,12(sp)
1c00c848:	4422                	lw	s0,8(sp)
1c00c84a:	4492                	lw	s1,4(sp)
1c00c84c:	0141                	addi	sp,sp,16
1c00c84e:	8082                	ret

1c00c850 <__pi_hyper_pin_reset_settings>:
1c00c850:	1141                	addi	sp,sp,-16
1c00c852:	c422                	sw	s0,8(sp)
1c00c854:	1c00f437          	lui	s0,0x1c00f
1c00c858:	22840413          	addi	s0,s0,552 # 1c00f228 <__hyper_pad>
1c00c85c:	c226                	sw	s1,4(sp)
1c00c85e:	c606                	sw	ra,12(sp)
1c00c860:	03440493          	addi	s1,s0,52
1c00c864:	0044250b          	p.lw	a0,4(s0!)
1c00c868:	4581                	li	a1,0
1c00c86a:	effff0ef          	jal	ra,1c00c768 <pi_pad_set_function>
1c00c86e:	fe941be3          	bne	s0,s1,1c00c864 <__pi_hyper_pin_reset_settings+0x14>
1c00c872:	40b2                	lw	ra,12(sp)
1c00c874:	4422                	lw	s0,8(sp)
1c00c876:	4492                	lw	s1,4(sp)
1c00c878:	0141                	addi	sp,sp,16
1c00c87a:	8082                	ret

1c00c87c <pi_hyper_conf_init>:
1c00c87c:	57fd                	li	a5,-1
1c00c87e:	00f50223          	sb	a5,4(a0)
1c00c882:	4785                	li	a5,1
1c00c884:	c55c                	sw	a5,12(a0)
1c00c886:	00052423          	sw	zero,8(a0)
1c00c88a:	8082                	ret

1c00c88c <pi_hyper_open>:
1c00c88c:	1141                	addi	sp,sp,-16
1c00c88e:	c422                	sw	s0,8(sp)
1c00c890:	c04a                	sw	s2,0(sp)
1c00c892:	842a                	mv	s0,a0
1c00c894:	00452903          	lw	s2,4(a0)
1c00c898:	4541                	li	a0,16
1c00c89a:	c606                	sw	ra,12(sp)
1c00c89c:	c226                	sw	s1,4(sp)
1c00c89e:	f8dfe0ef          	jal	ra,1c00b82a <pi_l2_malloc>
1c00c8a2:	c115                	beqz	a0,1c00c8c6 <pi_hyper_open+0x3a>
1c00c8a4:	00c92783          	lw	a5,12(s2)
1c00c8a8:	84aa                	mv	s1,a0
1c00c8aa:	0217b063          	p.bneimm	a5,1,1c00c8ca <pi_hyper_open+0x3e>
1c00c8ae:	000f4637          	lui	a2,0xf4
1c00c8b2:	24060613          	addi	a2,a2,576 # f4240 <__L2+0x74240>
1c00c8b6:	4581                	li	a1,0
1c00c8b8:	762000ef          	jal	ra,1c00d01a <rt_extern_alloc_init>
1c00c8bc:	c519                	beqz	a0,1c00c8ca <pi_hyper_open+0x3e>
1c00c8be:	45c1                	li	a1,16
1c00c8c0:	8526                	mv	a0,s1
1c00c8c2:	f77fe0ef          	jal	ra,1c00b838 <pi_l2_free>
1c00c8c6:	557d                	li	a0,-1
1c00c8c8:	a0f1                	j	1c00c994 <pi_hyper_open+0x108>
1c00c8ca:	478d                	li	a5,3
1c00c8cc:	c0dc                	sw	a5,4(s1)
1c00c8ce:	00892783          	lw	a5,8(s2)
1c00c8d2:	c49c                	sw	a5,8(s1)
1c00c8d4:	00c92783          	lw	a5,12(s2)
1c00c8d8:	c4dc                	sw	a5,12(s1)
1c00c8da:	1c0107b7          	lui	a5,0x1c010
1c00c8de:	8e478793          	addi	a5,a5,-1820 # 1c00f8e4 <__rt_hyper_open_count>
1c00c8e2:	4398                	lw	a4,0(a5)
1c00c8e4:	00170693          	addi	a3,a4,1
1c00c8e8:	c394                	sw	a3,0(a5)
1c00c8ea:	e739                	bnez	a4,1c00c938 <pi_hyper_open+0xac>
1c00c8ec:	1a1067b7          	lui	a5,0x1a106
1c00c8f0:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fc4>
1c00c8f4:	c0673733          	p.bclr	a4,a4,0,6
1c00c8f8:	00e7a423          	sw	a4,8(a5)
1c00c8fc:	0087a703          	lw	a4,8(a5)
1c00c900:	c0773733          	p.bclr	a4,a4,0,7
1c00c904:	00e7a423          	sw	a4,8(a5)
1c00c908:	1a1027b7          	lui	a5,0x1a102
1c00c90c:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa10273c>
1c00c910:	4398                	lw	a4,0(a5)
1c00c912:	c0374733          	p.bset	a4,a4,0,3
1c00c916:	c398                	sw	a4,0(a5)
1c00c918:	1c0007b7          	lui	a5,0x1c000
1c00c91c:	4c878793          	addi	a5,a5,1224 # 1c0004c8 <__rt_hyper_handle_copy>
1c00c920:	10f02623          	sw	a5,268(zero) # 10c <_l1_preload_size+0xcc>
1c00c924:	0e002823          	sw	zero,240(zero) # f0 <_l1_preload_size+0xb0>
1c00c928:	12f02623          	sw	a5,300(zero) # 12c <_l1_preload_size+0xec>
1c00c92c:	10002823          	sw	zero,272(zero) # 110 <_l1_preload_size+0xd0>
1c00c930:	30f02423          	sw	a5,776(zero) # 308 <__rt_hyper_udma_handle>
1c00c934:	ef1ff0ef          	jal	ra,1c00c824 <__pi_hyper_pin_settings>
1c00c938:	00c92783          	lw	a5,12(s2)
1c00c93c:	00892703          	lw	a4,8(s2)
1c00c940:	17fd                	addi	a5,a5,-1
1c00c942:	0017b793          	seqz	a5,a5
1c00c946:	078a                	slli	a5,a5,0x2
1c00c948:	ef21                	bnez	a4,1c00c9a0 <pi_hyper_open+0x114>
1c00c94a:	1a102737          	lui	a4,0x1a102
1c00c94e:	1b470613          	addi	a2,a4,436 # 1a1021b4 <__l1_end+0xa102170>
1c00c952:	4214                	lw	a3,0(a2)
1c00c954:	6591                	lui	a1,0x4
1c00c956:	fff58513          	addi	a0,a1,-1 # 3fff <__rt_stack_size+0x37ff>
1c00c95a:	73b6f693          	andi	a3,a3,1851
1c00c95e:	8fd5                	or	a5,a5,a3
1c00c960:	c21c                	sw	a5,0(a2)
1c00c962:	1a870793          	addi	a5,a4,424
1c00c966:	4394                	lw	a3,0(a5)
1c00c968:	f0058593          	addi	a1,a1,-256
1c00c96c:	8ee9                	and	a3,a3,a0
1c00c96e:	8eed                	and	a3,a3,a1
1c00c970:	1006c6b3          	p.exths	a3,a3
1c00c974:	c394                	sw	a3,0(a5)
1c00c976:	4214                	lw	a3,0(a2)
1c00c978:	7376f693          	andi	a3,a3,1847
1c00c97c:	c214                	sw	a3,0(a2)
1c00c97e:	4398                	lw	a4,0(a5)
1c00c980:	668d                	lui	a3,0x3
1c00c982:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00c986:	8f69                	and	a4,a4,a0
1c00c988:	8f75                	and	a4,a4,a3
1c00c98a:	c4874733          	p.bset	a4,a4,2,8
1c00c98e:	c398                	sw	a4,0(a5)
1c00c990:	c404                	sw	s1,8(s0)
1c00c992:	4501                	li	a0,0
1c00c994:	40b2                	lw	ra,12(sp)
1c00c996:	4422                	lw	s0,8(sp)
1c00c998:	4492                	lw	s1,4(sp)
1c00c99a:	4902                	lw	s2,0(sp)
1c00c99c:	0141                	addi	sp,sp,16
1c00c99e:	8082                	ret
1c00c9a0:	1a102737          	lui	a4,0x1a102
1c00c9a4:	1c470613          	addi	a2,a4,452 # 1a1021c4 <__l1_end+0xa102180>
1c00c9a8:	4214                	lw	a3,0(a2)
1c00c9aa:	1b870713          	addi	a4,a4,440
1c00c9ae:	03b6f693          	andi	a3,a3,59
1c00c9b2:	8fd5                	or	a5,a5,a3
1c00c9b4:	c21c                	sw	a5,0(a2)
1c00c9b6:	431c                	lw	a5,0(a4)
1c00c9b8:	6691                	lui	a3,0x4
1c00c9ba:	fff68593          	addi	a1,a3,-1 # 3fff <__rt_stack_size+0x37ff>
1c00c9be:	8fed                	and	a5,a5,a1
1c00c9c0:	f0068693          	addi	a3,a3,-256
1c00c9c4:	8ff5                	and	a5,a5,a3
1c00c9c6:	c007c7b3          	p.bset	a5,a5,0,0
1c00c9ca:	1007c7b3          	p.exths	a5,a5
1c00c9ce:	c31c                	sw	a5,0(a4)
1c00c9d0:	4214                	lw	a3,0(a2)
1c00c9d2:	0376f693          	andi	a3,a3,55
1c00c9d6:	c214                	sw	a3,0(a2)
1c00c9d8:	431c                	lw	a5,0(a4)
1c00c9da:	668d                	lui	a3,0x3
1c00c9dc:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00c9e0:	8fed                	and	a5,a5,a1
1c00c9e2:	8ff5                	and	a5,a5,a3
1c00c9e4:	c487c7b3          	p.bset	a5,a5,2,8
1c00c9e8:	c31c                	sw	a5,0(a4)
1c00c9ea:	b75d                	j	1c00c990 <pi_hyper_open+0x104>

1c00c9ec <pi_hyper_close>:
1c00c9ec:	1c010737          	lui	a4,0x1c010
1c00c9f0:	8e470713          	addi	a4,a4,-1820 # 1c00f8e4 <__rt_hyper_open_count>
1c00c9f4:	431c                	lw	a5,0(a4)
1c00c9f6:	1141                	addi	sp,sp,-16
1c00c9f8:	c422                	sw	s0,8(sp)
1c00c9fa:	c606                	sw	ra,12(sp)
1c00c9fc:	17fd                	addi	a5,a5,-1
1c00c9fe:	c31c                	sw	a5,0(a4)
1c00ca00:	4500                	lw	s0,8(a0)
1c00ca02:	e7ad                	bnez	a5,1c00ca6c <pi_hyper_close+0x80>
1c00ca04:	404c                	lw	a1,4(s0)
1c00ca06:	47fd                	li	a5,31
1c00ca08:	00159693          	slli	a3,a1,0x1
1c00ca0c:	06d7dc63          	ble	a3,a5,1c00ca84 <pi_hyper_close+0x98>
1c00ca10:	fe068513          	addi	a0,a3,-32
1c00ca14:	4611                	li	a2,4
1c00ca16:	1a1067b7          	lui	a5,0x1a106
1c00ca1a:	20c7f803          	p.lw	a6,a2(a5)
1c00ca1e:	4705                	li	a4,1
1c00ca20:	00a71733          	sll	a4,a4,a0
1c00ca24:	01076733          	or	a4,a4,a6
1c00ca28:	00e7e623          	p.sw	a4,a2(a5)
1c00ca2c:	00168713          	addi	a4,a3,1
1c00ca30:	47fd                	li	a5,31
1c00ca32:	4621                	li	a2,8
1c00ca34:	00e7d563          	ble	a4,a5,1c00ca3e <pi_hyper_close+0x52>
1c00ca38:	fe168713          	addi	a4,a3,-31
1c00ca3c:	4611                	li	a2,4
1c00ca3e:	1a1066b7          	lui	a3,0x1a106
1c00ca42:	20c6f503          	p.lw	a0,a2(a3)
1c00ca46:	4785                	li	a5,1
1c00ca48:	00e79733          	sll	a4,a5,a4
1c00ca4c:	8f49                	or	a4,a4,a0
1c00ca4e:	00e6e623          	p.sw	a4,a2(a3)
1c00ca52:	1a102737          	lui	a4,0x1a102
1c00ca56:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00ca5a:	4314                	lw	a3,0(a4)
1c00ca5c:	00b797b3          	sll	a5,a5,a1
1c00ca60:	fff7c793          	not	a5,a5
1c00ca64:	8ff5                	and	a5,a5,a3
1c00ca66:	c31c                	sw	a5,0(a4)
1c00ca68:	de9ff0ef          	jal	ra,1c00c850 <__pi_hyper_pin_reset_settings>
1c00ca6c:	445c                	lw	a5,12(s0)
1c00ca6e:	0017b463          	p.bneimm	a5,1,1c00ca76 <pi_hyper_close+0x8a>
1c00ca72:	8522                	mv	a0,s0
1c00ca74:	2bfd                	jal	1c00d072 <rt_extern_alloc_deinit>
1c00ca76:	8522                	mv	a0,s0
1c00ca78:	4422                	lw	s0,8(sp)
1c00ca7a:	40b2                	lw	ra,12(sp)
1c00ca7c:	45c1                	li	a1,16
1c00ca7e:	0141                	addi	sp,sp,16
1c00ca80:	db9fe06f          	j	1c00b838 <pi_l2_free>
1c00ca84:	8536                	mv	a0,a3
1c00ca86:	4621                	li	a2,8
1c00ca88:	b779                	j	1c00ca16 <pi_hyper_close+0x2a>

1c00ca8a <__pi_hyper_copy_aligned>:
1c00ca8a:	40155793          	srai	a5,a0,0x1
1c00ca8e:	1a102837          	lui	a6,0x1a102
1c00ca92:	079e                	slli	a5,a5,0x7
1c00ca94:	0512                	slli	a0,a0,0x4
1c00ca96:	97c2                	add	a5,a5,a6
1c00ca98:	8941                	andi	a0,a0,16
1c00ca9a:	953e                	add	a0,a0,a5
1c00ca9c:	20000813          	li	a6,512
1c00caa0:	30800793          	li	a5,776
1c00caa4:	02d87c63          	bleu	a3,a6,1c00cadc <__pi_hyper_copy_aligned+0x52>
1c00caa8:	cbd4                	sw	a3,20(a5)
1c00caaa:	1c0006b7          	lui	a3,0x1c000
1c00caae:	56068693          	addi	a3,a3,1376 # 1c000560 <__rt_hyper_handle_burst>
1c00cab2:	c394                	sw	a3,0(a5)
1c00cab4:	c3c8                	sw	a0,4(a5)
1c00cab6:	c790                	sw	a2,8(a5)
1c00cab8:	c7cc                	sw	a1,12(a5)
1c00caba:	0107a823          	sw	a6,16(a5) # 1a106010 <__l1_end+0xa105fcc>
1c00cabe:	20000693          	li	a3,512
1c00cac2:	cf98                	sw	a4,24(a5)
1c00cac4:	1a1027b7          	lui	a5,0x1a102
1c00cac8:	1ac7a023          	sw	a2,416(a5) # 1a1021a0 <__l1_end+0xa10215c>
1c00cacc:	00b52023          	sw	a1,0(a0)
1c00cad0:	00d52223          	sw	a3,4(a0)
1c00cad4:	47c1                	li	a5,16
1c00cad6:	00f52423          	sw	a5,8(a0)
1c00cada:	8082                	ret
1c00cadc:	0007a823          	sw	zero,16(a5)
1c00cae0:	b7cd                	j	1c00cac2 <__pi_hyper_copy_aligned+0x38>

1c00cae2 <__pi_hyper_copy_exec>:
1c00cae2:	30800813          	li	a6,776
1c00cae6:	00e82e23          	sw	a4,28(a6) # 1a10201c <__l1_end+0xa101fd8>
1c00caea:	fa25b833          	p.bclr	a6,a1,29,2
1c00caee:	30800793          	li	a5,776
1c00caf2:	02081463          	bnez	a6,1c00cb1a <__pi_hyper_copy_exec+0x38>
1c00caf6:	fc163833          	p.bclr	a6,a2,30,1
1c00cafa:	02081063          	bnez	a6,1c00cb1a <__pi_hyper_copy_exec+0x38>
1c00cafe:	fa26b833          	p.bclr	a6,a3,29,2
1c00cb02:	00080a63          	beqz	a6,1c00cb16 <__pi_hyper_copy_exec+0x34>
1c00cb06:	fc153833          	p.bclr	a6,a0,30,1
1c00cb0a:	00080863          	beqz	a6,1c00cb1a <__pi_hyper_copy_exec+0x38>
1c00cb0e:	fc16b833          	p.bclr	a6,a3,30,1
1c00cb12:	00081463          	bnez	a6,1c00cb1a <__pi_hyper_copy_exec+0x38>
1c00cb16:	f75ff06f          	j	1c00ca8a <__pi_hyper_copy_aligned>
1c00cb1a:	d388                	sw	a0,32(a5)
1c00cb1c:	853a                	mv	a0,a4
1c00cb1e:	d3d0                	sw	a2,36(a5)
1c00cb20:	d78c                	sw	a1,40(a5)
1c00cb22:	d7d4                	sw	a3,44(a5)
1c00cb24:	02078823          	sb	zero,48(a5)
1c00cb28:	dbd8                	sw	a4,52(a5)
1c00cb2a:	aa31                	j	1c00cc46 <__pi_hyper_copy_misaligned>

1c00cb2c <__pi_hyper_copy>:
1c00cb2c:	1141                	addi	sp,sp,-16
1c00cb2e:	c606                	sw	ra,12(sp)
1c00cb30:	c422                	sw	s0,8(sp)
1c00cb32:	30047473          	csrrci	s0,mstatus,8
1c00cb36:	c781                	beqz	a5,1c00cb3e <__pi_hyper_copy+0x12>
1c00cb38:	010007b7          	lui	a5,0x1000
1c00cb3c:	963e                	add	a2,a2,a5
1c00cb3e:	30800813          	li	a6,776
1c00cb42:	01c82803          	lw	a6,28(a6)
1c00cb46:	30800793          	li	a5,776
1c00cb4a:	02080963          	beqz	a6,1c00cb7c <__pi_hyper_copy+0x50>
1c00cb4e:	0387a803          	lw	a6,56(a5) # 1000038 <__L2+0xf80038>
1c00cb52:	02080363          	beqz	a6,1c00cb78 <__pi_hyper_copy+0x4c>
1c00cb56:	03c7a803          	lw	a6,60(a5)
1c00cb5a:	00e82e23          	sw	a4,28(a6)
1c00cb5e:	dfd8                	sw	a4,60(a5)
1c00cb60:	00072e23          	sw	zero,28(a4)
1c00cb64:	df08                	sw	a0,56(a4)
1c00cb66:	df4c                	sw	a1,60(a4)
1c00cb68:	c330                	sw	a2,64(a4)
1c00cb6a:	c374                	sw	a3,68(a4)
1c00cb6c:	30041073          	csrw	mstatus,s0
1c00cb70:	40b2                	lw	ra,12(sp)
1c00cb72:	4422                	lw	s0,8(sp)
1c00cb74:	0141                	addi	sp,sp,16
1c00cb76:	8082                	ret
1c00cb78:	df98                	sw	a4,56(a5)
1c00cb7a:	b7d5                	j	1c00cb5e <__pi_hyper_copy+0x32>
1c00cb7c:	f67ff0ef          	jal	ra,1c00cae2 <__pi_hyper_copy_exec>
1c00cb80:	b7f5                	j	1c00cb6c <__pi_hyper_copy+0x40>

1c00cb82 <pi_hyper_read_async>:
1c00cb82:	451c                	lw	a5,8(a0)
1c00cb84:	00070a23          	sb	zero,20(a4)
1c00cb88:	8832                	mv	a6,a2
1c00cb8a:	43c8                	lw	a0,4(a5)
1c00cb8c:	479c                	lw	a5,8(a5)
1c00cb8e:	862e                	mv	a2,a1
1c00cb90:	0506                	slli	a0,a0,0x1
1c00cb92:	85c2                	mv	a1,a6
1c00cb94:	f99ff06f          	j	1c00cb2c <__pi_hyper_copy>

1c00cb98 <pi_hyper_read>:
1c00cb98:	7175                	addi	sp,sp,-144
1c00cb9a:	4785                	li	a5,1
1c00cb9c:	870a                	mv	a4,sp
1c00cb9e:	c706                	sw	ra,140(sp)
1c00cba0:	cc3e                	sw	a5,24(sp)
1c00cba2:	d43e                	sw	a5,40(sp)
1c00cba4:	c202                	sw	zero,4(sp)
1c00cba6:	00010a23          	sb	zero,20(sp)
1c00cbaa:	fd9ff0ef          	jal	ra,1c00cb82 <pi_hyper_read_async>
1c00cbae:	0848                	addi	a0,sp,20
1c00cbb0:	c43ff0ef          	jal	ra,1c00c7f2 <pi_task_wait_on.isra.4>
1c00cbb4:	40ba                	lw	ra,140(sp)
1c00cbb6:	6149                	addi	sp,sp,144
1c00cbb8:	8082                	ret

1c00cbba <pi_hyper_write_async>:
1c00cbba:	451c                	lw	a5,8(a0)
1c00cbbc:	00070a23          	sb	zero,20(a4)
1c00cbc0:	8832                	mv	a6,a2
1c00cbc2:	43c8                	lw	a0,4(a5)
1c00cbc4:	479c                	lw	a5,8(a5)
1c00cbc6:	862e                	mv	a2,a1
1c00cbc8:	0506                	slli	a0,a0,0x1
1c00cbca:	85c2                	mv	a1,a6
1c00cbcc:	0505                	addi	a0,a0,1
1c00cbce:	f5fff06f          	j	1c00cb2c <__pi_hyper_copy>

1c00cbd2 <pi_hyper_write>:
1c00cbd2:	7175                	addi	sp,sp,-144
1c00cbd4:	4785                	li	a5,1
1c00cbd6:	870a                	mv	a4,sp
1c00cbd8:	c706                	sw	ra,140(sp)
1c00cbda:	cc3e                	sw	a5,24(sp)
1c00cbdc:	d43e                	sw	a5,40(sp)
1c00cbde:	c202                	sw	zero,4(sp)
1c00cbe0:	00010a23          	sb	zero,20(sp)
1c00cbe4:	fd7ff0ef          	jal	ra,1c00cbba <pi_hyper_write_async>
1c00cbe8:	0848                	addi	a0,sp,20
1c00cbea:	c09ff0ef          	jal	ra,1c00c7f2 <pi_task_wait_on.isra.4>
1c00cbee:	40ba                	lw	ra,140(sp)
1c00cbf0:	6149                	addi	sp,sp,144
1c00cbf2:	8082                	ret

1c00cbf4 <exec_pending_task>:
1c00cbf4:	30800793          	li	a5,776
1c00cbf8:	5f98                	lw	a4,56(a5)
1c00cbfa:	c729                	beqz	a4,1c00cc44 <exec_pending_task+0x50>
1c00cbfc:	4f54                	lw	a3,28(a4)
1c00cbfe:	03872803          	lw	a6,56(a4)
1c00cc02:	5f4c                	lw	a1,60(a4)
1c00cc04:	df94                	sw	a3,56(a5)
1c00cc06:	ee883533          	p.bclr	a0,a6,23,8
1c00cc0a:	ce881833          	p.extractu	a6,a6,7,8
1c00cc0e:	4330                	lw	a2,64(a4)
1c00cc10:	4374                	lw	a3,68(a4)
1c00cc12:	00081463          	bnez	a6,1c00cc1a <exec_pending_task+0x26>
1c00cc16:	ecdff06f          	j	1c00cae2 <__pi_hyper_copy_exec>
1c00cc1a:	04c72803          	lw	a6,76(a4)
1c00cc1e:	04872883          	lw	a7,72(a4)
1c00cc22:	d388                	sw	a0,32(a5)
1c00cc24:	d3d0                	sw	a2,36(a5)
1c00cc26:	853a                	mv	a0,a4
1c00cc28:	0506d633          	p.minu	a2,a3,a6
1c00cc2c:	cfd8                	sw	a4,28(a5)
1c00cc2e:	d78c                	sw	a1,40(a5)
1c00cc30:	d7d0                	sw	a2,44(a5)
1c00cc32:	02078823          	sb	zero,48(a5)
1c00cc36:	dbd8                	sw	a4,52(a5)
1c00cc38:	c3b4                	sw	a3,64(a5)
1c00cc3a:	0507a223          	sw	a6,68(a5)
1c00cc3e:	0517a423          	sw	a7,72(a5)
1c00cc42:	a011                	j	1c00cc46 <__pi_hyper_copy_misaligned>
1c00cc44:	8082                	ret

1c00cc46 <__pi_hyper_copy_misaligned>:
1c00cc46:	7179                	addi	sp,sp,-48
1c00cc48:	d422                	sw	s0,40(sp)
1c00cc4a:	30800793          	li	a5,776
1c00cc4e:	ce4e                	sw	s3,28(sp)
1c00cc50:	89aa                	mv	s3,a0
1c00cc52:	5388                	lw	a0,32(a5)
1c00cc54:	d606                	sw	ra,44(sp)
1c00cc56:	d226                	sw	s1,36(sp)
1c00cc58:	d04a                	sw	s2,32(sp)
1c00cc5a:	cc52                	sw	s4,24(sp)
1c00cc5c:	ca56                	sw	s5,20(sp)
1c00cc5e:	c85a                	sw	s6,16(sp)
1c00cc60:	c65e                	sw	s7,12(sp)
1c00cc62:	c462                	sw	s8,8(sp)
1c00cc64:	fc1537b3          	p.bclr	a5,a0,30,1
1c00cc68:	30800413          	li	s0,776
1c00cc6c:	e7a1                	bnez	a5,1c00ccb4 <__pi_hyper_copy_misaligned+0x6e>
1c00cc6e:	1c00fc37          	lui	s8,0x1c00f
1c00cc72:	724c0913          	addi	s2,s8,1828 # 1c00f724 <__pi_hyper_temp_buffer>
1c00cc76:	4a0d                	li	s4,3
1c00cc78:	07c00a93          	li	s5,124
1c00cc7c:	00190b13          	addi	s6,s2,1
1c00cc80:	5408                	lw	a0,40(s0)
1c00cc82:	5444                	lw	s1,44(s0)
1c00cc84:	5050                	lw	a2,36(s0)
1c00cc86:	00350793          	addi	a5,a0,3
1c00cc8a:	c207b7b3          	p.bclr	a5,a5,1,0
1c00cc8e:	8f89                	sub	a5,a5,a0
1c00cc90:	8bbe                	mv	s7,a5
1c00cc92:	009a6363          	bltu	s4,s1,1c00cc98 <__pi_hyper_copy_misaligned+0x52>
1c00cc96:	8ba6                	mv	s7,s1
1c00cc98:	1c0b8663          	beqz	s7,1c00ce64 <__pi_hyper_copy_misaligned+0x21e>
1c00cc9c:	03044783          	lbu	a5,48(s0)
1c00cca0:	16079f63          	bnez	a5,1c00ce1e <__pi_hyper_copy_misaligned+0x1d8>
1c00cca4:	4701                	li	a4,0
1c00cca6:	4691                	li	a3,4
1c00cca8:	c0063633          	p.bclr	a2,a2,0,0
1c00ccac:	724c0593          	addi	a1,s8,1828
1c00ccb0:	5008                	lw	a0,32(s0)
1c00ccb2:	a889                	j	1c00cd04 <__pi_hyper_copy_misaligned+0xbe>
1c00ccb4:	540c                	lw	a1,40(s0)
1c00ccb6:	04442883          	lw	a7,68(s0)
1c00ccba:	04842303          	lw	t1,72(s0)
1c00ccbe:	00358793          	addi	a5,a1,3
1c00ccc2:	5050                	lw	a2,36(s0)
1c00ccc4:	5454                	lw	a3,44(s0)
1c00ccc6:	4038                	lw	a4,64(s0)
1c00ccc8:	c207b7b3          	p.bclr	a5,a5,1,0
1c00cccc:	8f8d                	sub	a5,a5,a1
1c00ccce:	41130333          	sub	t1,t1,a7
1c00ccd2:	4801                	li	a6,0
1c00ccd4:	4e0d                	li	t3,3
1c00ccd6:	84be                	mv	s1,a5
1c00ccd8:	00de6363          	bltu	t3,a3,1c00ccde <__pi_hyper_copy_misaligned+0x98>
1c00ccdc:	84b6                	mv	s1,a3
1c00ccde:	c4b5                	beqz	s1,1c00cd4a <__pi_hyper_copy_misaligned+0x104>
1c00cce0:	00080563          	beqz	a6,1c00ccea <__pi_hyper_copy_misaligned+0xa4>
1c00cce4:	d050                	sw	a2,36(s0)
1c00cce6:	d454                	sw	a3,44(s0)
1c00cce8:	c038                	sw	a4,64(s0)
1c00ccea:	03044703          	lbu	a4,48(s0)
1c00ccee:	1c00f937          	lui	s2,0x1c00f
1c00ccf2:	72490793          	addi	a5,s2,1828 # 1c00f724 <__pi_hyper_temp_buffer>
1c00ccf6:	ef09                	bnez	a4,1c00cd10 <__pi_hyper_copy_misaligned+0xca>
1c00ccf8:	4691                	li	a3,4
1c00ccfa:	c0063633          	p.bclr	a2,a2,0,0
1c00ccfe:	72490593          	addi	a1,s2,1828
1c00cd02:	157d                	addi	a0,a0,-1
1c00cd04:	d87ff0ef          	jal	ra,1c00ca8a <__pi_hyper_copy_aligned>
1c00cd08:	4785                	li	a5,1
1c00cd0a:	02f40823          	sb	a5,48(s0)
1c00cd0e:	aa3d                	j	1c00ce4c <__pi_hyper_copy_misaligned+0x206>
1c00cd10:	fc163533          	p.bclr	a0,a2,30,1
1c00cd14:	953e                	add	a0,a0,a5
1c00cd16:	8626                	mv	a2,s1
1c00cd18:	02040823          	sb	zero,48(s0)
1c00cd1c:	a9fff0ef          	jal	ra,1c00c7ba <l2_memcpy>
1c00cd20:	5050                	lw	a2,36(s0)
1c00cd22:	5008                	lw	a0,32(s0)
1c00cd24:	4701                	li	a4,0
1c00cd26:	4691                	li	a3,4
1c00cd28:	c0063633          	p.bclr	a2,a2,0,0
1c00cd2c:	72490593          	addi	a1,s2,1828
1c00cd30:	d5bff0ef          	jal	ra,1c00ca8a <__pi_hyper_copy_aligned>
1c00cd34:	505c                	lw	a5,36(s0)
1c00cd36:	97a6                	add	a5,a5,s1
1c00cd38:	d05c                	sw	a5,36(s0)
1c00cd3a:	541c                	lw	a5,40(s0)
1c00cd3c:	97a6                	add	a5,a5,s1
1c00cd3e:	d41c                	sw	a5,40(s0)
1c00cd40:	545c                	lw	a5,44(s0)
1c00cd42:	409784b3          	sub	s1,a5,s1
1c00cd46:	d444                	sw	s1,44(s0)
1c00cd48:	a211                	j	1c00ce4c <__pi_hyper_copy_misaligned+0x206>
1c00cd4a:	c2d1                	beqz	a3,1c00cdce <__pi_hyper_copy_misaligned+0x188>
1c00cd4c:	00080563          	beqz	a6,1c00cd56 <__pi_hyper_copy_misaligned+0x110>
1c00cd50:	d050                	sw	a2,36(s0)
1c00cd52:	d454                	sw	a3,44(s0)
1c00cd54:	c038                	sw	a4,64(s0)
1c00cd56:	97b2                	add	a5,a5,a2
1c00cd58:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00cd5c:	c206b4b3          	p.bclr	s1,a3,1,0
1c00cd60:	ef89                	bnez	a5,1c00cd7a <__pi_hyper_copy_misaligned+0x134>
1c00cd62:	4701                	li	a4,0
1c00cd64:	86a6                	mv	a3,s1
1c00cd66:	d25ff0ef          	jal	ra,1c00ca8a <__pi_hyper_copy_aligned>
1c00cd6a:	505c                	lw	a5,36(s0)
1c00cd6c:	5454                	lw	a3,44(s0)
1c00cd6e:	97a6                	add	a5,a5,s1
1c00cd70:	d05c                	sw	a5,36(s0)
1c00cd72:	541c                	lw	a5,40(s0)
1c00cd74:	97a6                	add	a5,a5,s1
1c00cd76:	d41c                	sw	a5,40(s0)
1c00cd78:	a881                	j	1c00cdc8 <__pi_hyper_copy_misaligned+0x182>
1c00cd7a:	03044703          	lbu	a4,48(s0)
1c00cd7e:	1c00f937          	lui	s2,0x1c00f
1c00cd82:	72490793          	addi	a5,s2,1828 # 1c00f724 <__pi_hyper_temp_buffer>
1c00cd86:	db2d                	beqz	a4,1c00ccf8 <__pi_hyper_copy_misaligned+0xb2>
1c00cd88:	07c00693          	li	a3,124
1c00cd8c:	04d4d4b3          	p.minu	s1,s1,a3
1c00cd90:	00178513          	addi	a0,a5,1
1c00cd94:	fff48613          	addi	a2,s1,-1
1c00cd98:	02040823          	sb	zero,48(s0)
1c00cd9c:	a1fff0ef          	jal	ra,1c00c7ba <l2_memcpy>
1c00cda0:	5050                	lw	a2,36(s0)
1c00cda2:	5008                	lw	a0,32(s0)
1c00cda4:	86a6                	mv	a3,s1
1c00cda6:	4701                	li	a4,0
1c00cda8:	c0063633          	p.bclr	a2,a2,0,0
1c00cdac:	72490593          	addi	a1,s2,1828
1c00cdb0:	cdbff0ef          	jal	ra,1c00ca8a <__pi_hyper_copy_aligned>
1c00cdb4:	505c                	lw	a5,36(s0)
1c00cdb6:	5454                	lw	a3,44(s0)
1c00cdb8:	17fd                	addi	a5,a5,-1
1c00cdba:	97a6                	add	a5,a5,s1
1c00cdbc:	d05c                	sw	a5,36(s0)
1c00cdbe:	541c                	lw	a5,40(s0)
1c00cdc0:	0685                	addi	a3,a3,1
1c00cdc2:	17fd                	addi	a5,a5,-1
1c00cdc4:	97a6                	add	a5,a5,s1
1c00cdc6:	d41c                	sw	a5,40(s0)
1c00cdc8:	409684b3          	sub	s1,a3,s1
1c00cdcc:	bfad                	j	1c00cd46 <__pi_hyper_copy_misaligned+0x100>
1c00cdce:	e719                	bnez	a4,1c00cddc <__pi_hyper_copy_misaligned+0x196>
1c00cdd0:	00080c63          	beqz	a6,1c00cde8 <__pi_hyper_copy_misaligned+0x1a2>
1c00cdd4:	d050                	sw	a2,36(s0)
1c00cdd6:	02042623          	sw	zero,44(s0)
1c00cdda:	a029                	j	1c00cde4 <__pi_hyper_copy_misaligned+0x19e>
1c00cddc:	02e8ea63          	bltu	a7,a4,1c00ce10 <__pi_hyper_copy_misaligned+0x1ca>
1c00cde0:	fe081ae3          	bnez	a6,1c00cdd4 <__pi_hyper_copy_misaligned+0x18e>
1c00cde4:	04042023          	sw	zero,64(s0)
1c00cde8:	854e                	mv	a0,s3
1c00cdea:	02042a23          	sw	zero,52(s0)
1c00cdee:	00042e23          	sw	zero,28(s0)
1c00cdf2:	9ddff0ef          	jal	ra,1c00c7ce <rt_event_enqueue>
1c00cdf6:	5422                	lw	s0,40(sp)
1c00cdf8:	50b2                	lw	ra,44(sp)
1c00cdfa:	5492                	lw	s1,36(sp)
1c00cdfc:	5902                	lw	s2,32(sp)
1c00cdfe:	49f2                	lw	s3,28(sp)
1c00ce00:	4a62                	lw	s4,24(sp)
1c00ce02:	4ad2                	lw	s5,20(sp)
1c00ce04:	4b42                	lw	s6,16(sp)
1c00ce06:	4bb2                	lw	s7,12(sp)
1c00ce08:	4c22                	lw	s8,8(sp)
1c00ce0a:	6145                	addi	sp,sp,48
1c00ce0c:	de9ff06f          	j	1c00cbf4 <exec_pending_task>
1c00ce10:	41170733          	sub	a4,a4,a7
1c00ce14:	961a                	add	a2,a2,t1
1c00ce16:	4805                	li	a6,1
1c00ce18:	04e8d6b3          	p.minu	a3,a7,a4
1c00ce1c:	bd6d                	j	1c00ccd6 <__pi_hyper_copy_misaligned+0x90>
1c00ce1e:	fc1635b3          	p.bclr	a1,a2,30,1
1c00ce22:	95ca                	add	a1,a1,s2
1c00ce24:	865e                	mv	a2,s7
1c00ce26:	02040823          	sb	zero,48(s0)
1c00ce2a:	991ff0ef          	jal	ra,1c00c7ba <l2_memcpy>
1c00ce2e:	505c                	lw	a5,36(s0)
1c00ce30:	97de                	add	a5,a5,s7
1c00ce32:	d05c                	sw	a5,36(s0)
1c00ce34:	541c                	lw	a5,40(s0)
1c00ce36:	97de                	add	a5,a5,s7
1c00ce38:	d41c                	sw	a5,40(s0)
1c00ce3a:	545c                	lw	a5,44(s0)
1c00ce3c:	41778bb3          	sub	s7,a5,s7
1c00ce40:	03742623          	sw	s7,44(s0)
1c00ce44:	e20b9ee3          	bnez	s7,1c00cc80 <__pi_hyper_copy_misaligned+0x3a>
1c00ce48:	545c                	lw	a5,44(s0)
1c00ce4a:	c7a5                	beqz	a5,1c00ceb2 <__pi_hyper_copy_misaligned+0x26c>
1c00ce4c:	50b2                	lw	ra,44(sp)
1c00ce4e:	5422                	lw	s0,40(sp)
1c00ce50:	5492                	lw	s1,36(sp)
1c00ce52:	5902                	lw	s2,32(sp)
1c00ce54:	49f2                	lw	s3,28(sp)
1c00ce56:	4a62                	lw	s4,24(sp)
1c00ce58:	4ad2                	lw	s5,20(sp)
1c00ce5a:	4b42                	lw	s6,16(sp)
1c00ce5c:	4bb2                	lw	s7,12(sp)
1c00ce5e:	4c22                	lw	s8,8(sp)
1c00ce60:	6145                	addi	sp,sp,48
1c00ce62:	8082                	ret
1c00ce64:	d0f5                	beqz	s1,1c00ce48 <__pi_hyper_copy_misaligned+0x202>
1c00ce66:	97b2                	add	a5,a5,a2
1c00ce68:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00ce6c:	c204b4b3          	p.bclr	s1,s1,1,0
1c00ce70:	e791                	bnez	a5,1c00ce7c <__pi_hyper_copy_misaligned+0x236>
1c00ce72:	85aa                	mv	a1,a0
1c00ce74:	4701                	li	a4,0
1c00ce76:	86a6                	mv	a3,s1
1c00ce78:	5008                	lw	a0,32(s0)
1c00ce7a:	b5f5                	j	1c00cd66 <__pi_hyper_copy_misaligned+0x120>
1c00ce7c:	03044783          	lbu	a5,48(s0)
1c00ce80:	0554d4b3          	p.minu	s1,s1,s5
1c00ce84:	e789                	bnez	a5,1c00ce8e <__pi_hyper_copy_misaligned+0x248>
1c00ce86:	4701                	li	a4,0
1c00ce88:	00448693          	addi	a3,s1,4
1c00ce8c:	bd31                	j	1c00cca8 <__pi_hyper_copy_misaligned+0x62>
1c00ce8e:	8626                	mv	a2,s1
1c00ce90:	85da                	mv	a1,s6
1c00ce92:	02040823          	sb	zero,48(s0)
1c00ce96:	925ff0ef          	jal	ra,1c00c7ba <l2_memcpy>
1c00ce9a:	505c                	lw	a5,36(s0)
1c00ce9c:	5454                	lw	a3,44(s0)
1c00ce9e:	97a6                	add	a5,a5,s1
1c00cea0:	d05c                	sw	a5,36(s0)
1c00cea2:	541c                	lw	a5,40(s0)
1c00cea4:	97a6                	add	a5,a5,s1
1c00cea6:	409684b3          	sub	s1,a3,s1
1c00ceaa:	d41c                	sw	a5,40(s0)
1c00ceac:	d444                	sw	s1,44(s0)
1c00ceae:	dcc9                	beqz	s1,1c00ce48 <__pi_hyper_copy_misaligned+0x202>
1c00ceb0:	bbc1                	j	1c00cc80 <__pi_hyper_copy_misaligned+0x3a>
1c00ceb2:	4038                	lw	a4,64(s0)
1c00ceb4:	db15                	beqz	a4,1c00cde8 <__pi_hyper_copy_misaligned+0x1a2>
1c00ceb6:	407c                	lw	a5,68(s0)
1c00ceb8:	00e7ff63          	bleu	a4,a5,1c00ced6 <__pi_hyper_copy_misaligned+0x290>
1c00cebc:	8f1d                	sub	a4,a4,a5
1c00cebe:	c038                	sw	a4,64(s0)
1c00cec0:	4034                	lw	a3,64(s0)
1c00cec2:	d29d                	beqz	a3,1c00cde8 <__pi_hyper_copy_misaligned+0x1a2>
1c00cec4:	5058                	lw	a4,36(s0)
1c00cec6:	4430                	lw	a2,72(s0)
1c00cec8:	9732                	add	a4,a4,a2
1c00ceca:	8f1d                	sub	a4,a4,a5
1c00cecc:	04d7d7b3          	p.minu	a5,a5,a3
1c00ced0:	d058                	sw	a4,36(s0)
1c00ced2:	d45c                	sw	a5,44(s0)
1c00ced4:	b375                	j	1c00cc80 <__pi_hyper_copy_misaligned+0x3a>
1c00ced6:	04042023          	sw	zero,64(s0)
1c00ceda:	b7dd                	j	1c00cec0 <__pi_hyper_copy_misaligned+0x27a>

1c00cedc <__pi_hyper_copy_2d>:
1c00cedc:	1141                	addi	sp,sp,-16
1c00cede:	c606                	sw	ra,12(sp)
1c00cee0:	c422                	sw	s0,8(sp)
1c00cee2:	30047473          	csrrci	s0,mstatus,8
1c00cee6:	00088563          	beqz	a7,1c00cef0 <__pi_hyper_copy_2d+0x14>
1c00ceea:	010008b7          	lui	a7,0x1000
1c00ceee:	9646                	add	a2,a2,a7
1c00cef0:	30800893          	li	a7,776
1c00cef4:	01c8ae03          	lw	t3,28(a7) # 100001c <__L2+0xf8001c>
1c00cef8:	30800313          	li	t1,776
1c00cefc:	040e0563          	beqz	t3,1c00cf46 <__pi_hyper_copy_2d+0x6a>
1c00cf00:	03832883          	lw	a7,56(t1) # 80000038 <pulp__FC+0x80000039>
1c00cf04:	02088e63          	beqz	a7,1c00cf40 <__pi_hyper_copy_2d+0x64>
1c00cf08:	03c32883          	lw	a7,60(t1)
1c00cf0c:	0108ae23          	sw	a6,28(a7)
1c00cf10:	c0854533          	p.bset	a0,a0,0,8
1c00cf14:	03032e23          	sw	a6,60(t1)
1c00cf18:	00082e23          	sw	zero,28(a6)
1c00cf1c:	02a82c23          	sw	a0,56(a6)
1c00cf20:	02b82e23          	sw	a1,60(a6)
1c00cf24:	04c82023          	sw	a2,64(a6)
1c00cf28:	04d82223          	sw	a3,68(a6)
1c00cf2c:	04e82423          	sw	a4,72(a6)
1c00cf30:	04f82623          	sw	a5,76(a6)
1c00cf34:	30041073          	csrw	mstatus,s0
1c00cf38:	40b2                	lw	ra,12(sp)
1c00cf3a:	4422                	lw	s0,8(sp)
1c00cf3c:	0141                	addi	sp,sp,16
1c00cf3e:	8082                	ret
1c00cf40:	03032c23          	sw	a6,56(t1)
1c00cf44:	b7f1                	j	1c00cf10 <__pi_hyper_copy_2d+0x34>
1c00cf46:	02a8a023          	sw	a0,32(a7)
1c00cf4a:	02c8a223          	sw	a2,36(a7)
1c00cf4e:	8542                	mv	a0,a6
1c00cf50:	04f6d633          	p.minu	a2,a3,a5
1c00cf54:	0108ae23          	sw	a6,28(a7)
1c00cf58:	02b8a423          	sw	a1,40(a7)
1c00cf5c:	02c8a623          	sw	a2,44(a7)
1c00cf60:	02088823          	sb	zero,48(a7)
1c00cf64:	0308aa23          	sw	a6,52(a7)
1c00cf68:	04d8a023          	sw	a3,64(a7)
1c00cf6c:	04f8a223          	sw	a5,68(a7)
1c00cf70:	04e8a423          	sw	a4,72(a7)
1c00cf74:	cd3ff0ef          	jal	ra,1c00cc46 <__pi_hyper_copy_misaligned>
1c00cf78:	bf75                	j	1c00cf34 <__pi_hyper_copy_2d+0x58>

1c00cf7a <pi_hyper_read_2d_async>:
1c00cf7a:	8332                	mv	t1,a2
1c00cf7c:	4510                	lw	a2,8(a0)
1c00cf7e:	00080a23          	sb	zero,20(a6)
1c00cf82:	4248                	lw	a0,4(a2)
1c00cf84:	00862883          	lw	a7,8(a2)
1c00cf88:	862e                	mv	a2,a1
1c00cf8a:	0506                	slli	a0,a0,0x1
1c00cf8c:	859a                	mv	a1,t1
1c00cf8e:	f4fff06f          	j	1c00cedc <__pi_hyper_copy_2d>

1c00cf92 <pi_hyper_write_2d_async>:
1c00cf92:	8332                	mv	t1,a2
1c00cf94:	4510                	lw	a2,8(a0)
1c00cf96:	00080a23          	sb	zero,20(a6)
1c00cf9a:	4248                	lw	a0,4(a2)
1c00cf9c:	00862883          	lw	a7,8(a2)
1c00cfa0:	862e                	mv	a2,a1
1c00cfa2:	0506                	slli	a0,a0,0x1
1c00cfa4:	859a                	mv	a1,t1
1c00cfa6:	0505                	addi	a0,a0,1
1c00cfa8:	f35ff06f          	j	1c00cedc <__pi_hyper_copy_2d>

1c00cfac <__rt_hyper_resume_emu_task>:
  __pi_hyper_copy_misaligned(__rt_hyper_pending_emu_task);
1c00cfac:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
1c00cfb0:	c97ff06f          	j	1c00cc46 <__pi_hyper_copy_misaligned>

1c00cfb4 <__rt_hyper_resume_copy>:
  exec_pending_task();
1c00cfb4:	c41ff06f          	j	1c00cbf4 <exec_pending_task>

1c00cfb8 <__rt_hyper_init>:
  __pi_hyper_cluster_reqs_first = NULL;
1c00cfb8:	1c010737          	lui	a4,0x1c010
  __rt_hyper_end_task = NULL;
1c00cfbc:	30800793          	li	a5,776
  __pi_hyper_cluster_reqs_first = NULL;
1c00cfc0:	8e072023          	sw	zero,-1824(a4) # 1c00f8e0 <__pi_hyper_cluster_reqs_first>
  __rt_hyper_pending_emu_channel = -1;
1c00cfc4:	577d                	li	a4,-1
1c00cfc6:	d398                	sw	a4,32(a5)
  __rt_hyper_open_count = 0;
1c00cfc8:	1c010737          	lui	a4,0x1c010
  __rt_hyper_end_task = NULL;
1c00cfcc:	0007ac23          	sw	zero,24(a5)
  __rt_hyper_current_task = NULL;
1c00cfd0:	0007ae23          	sw	zero,28(a5)
  __rt_hyper_pending_tasks = NULL;
1c00cfd4:	0207ac23          	sw	zero,56(a5)
  __rt_hyper_open_count = 0;
1c00cfd8:	8e072223          	sw	zero,-1820(a4) # 1c00f8e4 <__rt_hyper_open_count>
  __rt_hyper_pending_emu_size = 0;
1c00cfdc:	0207a623          	sw	zero,44(a5)
  __rt_hyper_pending_emu_size_2d = 0;
1c00cfe0:	0407a023          	sw	zero,64(a5)
}
1c00cfe4:	8082                	ret

1c00cfe6 <rt_padframe_set>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00cfe6:	300476f3          	csrrci	a3,mstatus,8

void rt_padframe_set(rt_padframe_profile_t *profile)
{
  int irq = rt_irq_disable();

  unsigned int *config = profile->config;
1c00cfea:	4158                	lw	a4,4(a0)
1c00cfec:	1a1047b7          	lui	a5,0x1a104
1c00cff0:	14078613          	addi	a2,a5,320 # 1a104140 <__l1_end+0xa1040fc>

  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, config[i]);
1c00cff4:	430c                	lw	a1,0(a4)
1c00cff6:	c20c                	sw	a1,0(a2)
1c00cff8:	434c                	lw	a1,4(a4)
1c00cffa:	14478613          	addi	a2,a5,324
1c00cffe:	14878793          	addi	a5,a5,328
1c00d002:	c20c                	sw	a1,0(a2)
1c00d004:	4718                	lw	a4,8(a4)
1c00d006:	c398                	sw	a4,0(a5)
  __builtin_pulp_spr_write(reg, val);
1c00d008:	30069073          	csrw	mstatus,a3
  }

  rt_irq_restore(irq);
}
1c00d00c:	8082                	ret

1c00d00e <__rt_padframe_init>:
  rt_padframe_set(&__rt_padframe_profiles[0]);
1c00d00e:	1c00f537          	lui	a0,0x1c00f
1c00d012:	48850513          	addi	a0,a0,1160 # 1c00f488 <__rt_padframe_profiles>
1c00d016:	fd1ff06f          	j	1c00cfe6 <rt_padframe_set>

1c00d01a <rt_extern_alloc_init>:
  }
  printf("=============================================\n");
}

int rt_extern_alloc_init(rt_extern_alloc_t *a, void *addr, int size)
{
1c00d01a:	1101                	addi	sp,sp,-32
1c00d01c:	c84a                	sw	s2,16(sp)
1c00d01e:	ce06                	sw	ra,28(sp)
1c00d020:	cc22                	sw	s0,24(sp)
1c00d022:	ca26                	sw	s1,20(sp)
1c00d024:	892a                	mv	s2,a0
  if (size)
1c00d026:	c229                	beqz	a2,1c00d068 <rt_extern_alloc_init+0x4e>
  {
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00d028:	00758493          	addi	s1,a1,7
1c00d02c:	842e                	mv	s0,a1
  return (rt_alloc_chunk_extern_t *)rt_alloc(RT_ALLOC_FC_DATA, sizeof(rt_alloc_chunk_extern_t));
1c00d02e:	4505                	li	a0,1
1c00d030:	45b1                	li	a1,12
1c00d032:	c632                	sw	a2,12(sp)
1c00d034:	ec6fe0ef          	jal	ra,1c00b6fa <rt_alloc>
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00d038:	c404b4b3          	p.bclr	s1,s1,2,0
    rt_alloc_chunk_extern_t *chunk = __rt_alloc_chunk();
    if (chunk == NULL) return -1;
1c00d03c:	4632                	lw	a2,12(sp)
1c00d03e:	c905                	beqz	a0,1c00d06e <rt_extern_alloc_init+0x54>
    size = size - (start_addr - (unsigned int)addr);
1c00d040:	9432                	add	s0,s0,a2
1c00d042:	8c05                	sub	s0,s0,s1
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c00d044:	4601                	li	a2,0
    if (size > 0) {
1c00d046:	00805a63          	blez	s0,1c00d05a <rt_extern_alloc_init+0x40>
      a->first_free = chunk;
1c00d04a:	00a92023          	sw	a0,0(s2)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c00d04e:	c4043433          	p.bclr	s0,s0,2,0
1c00d052:	c100                	sw	s0,0(a0)
      chunk->next = NULL;
1c00d054:	00052223          	sw	zero,4(a0)
      chunk->addr = start_addr;
1c00d058:	c504                	sw	s1,8(a0)
}
1c00d05a:	40f2                	lw	ra,28(sp)
1c00d05c:	4462                	lw	s0,24(sp)
1c00d05e:	44d2                	lw	s1,20(sp)
1c00d060:	4942                	lw	s2,16(sp)
1c00d062:	8532                	mv	a0,a2
1c00d064:	6105                	addi	sp,sp,32
1c00d066:	8082                	ret
    a->first_free = NULL;
1c00d068:	00052023          	sw	zero,0(a0)
1c00d06c:	b7fd                	j	1c00d05a <rt_extern_alloc_init+0x40>
    if (chunk == NULL) return -1;
1c00d06e:	567d                	li	a2,-1
1c00d070:	b7ed                	j	1c00d05a <rt_extern_alloc_init+0x40>

1c00d072 <rt_extern_alloc_deinit>:
  rt_free(RT_ALLOC_FC_DATA, (void *)pt, sizeof(rt_alloc_chunk_extern_t));
1c00d072:	410c                	lw	a1,0(a0)
1c00d074:	4631                	li	a2,12
1c00d076:	4505                	li	a0,1
1c00d078:	eb2fe06f          	j	1c00b72a <rt_free>

1c00d07c <__pi_gpio_handler>:
  }
}


void __pi_gpio_handler(void *arg)
{
1c00d07c:	1141                	addi	sp,sp,-16
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTTYPE(id));
}

static inline unsigned int hal_gpio_intstatus_get()
{
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTSTATUS);
1c00d07e:	1a1017b7          	lui	a5,0x1a101
  (void) arg;

  /* Retrieve IRQ status from GPIO. Handle task if needed. */
  pi_gpio_t *gpio = &__rt_gpio[0];
  gpio->irq_status = hal_gpio_intstatus_get();
1c00d082:	1c00f6b7          	lui	a3,0x1c00f
{
1c00d086:	c422                	sw	s0,8(sp)
1c00d088:	4f80                	lw	s0,24(a5)
  gpio->irq_status = hal_gpio_intstatus_get();
1c00d08a:	7a468793          	addi	a5,a3,1956 # 1c00f7a4 <__rt_gpio>
{
1c00d08e:	c226                	sw	s1,4(sp)

  if (gpio->cb != NULL)
1c00d090:	4bc4                	lw	s1,20(a5)
{
1c00d092:	c606                	sw	ra,12(sp)
  gpio->irq_status = hal_gpio_intstatus_get();
1c00d094:	c780                	sw	s0,8(a5)
  if (gpio->cb != NULL)
1c00d096:	cc91                	beqz	s1,1c00d0b2 <__pi_gpio_handler+0x36>
    if (irq_mask & tmp_cb->pin_mask)
1c00d098:	409c                	lw	a5,0(s1)
1c00d09a:	8fe1                	and	a5,a5,s0
1c00d09c:	c781                	beqz	a5,1c00d0a4 <__pi_gpio_handler+0x28>
      tmp_cb->handler(tmp_cb->args);
1c00d09e:	40dc                	lw	a5,4(s1)
1c00d0a0:	4488                	lw	a0,8(s1)
1c00d0a2:	9782                	jalr	a5
    tmp_cb = tmp_cb->next;
1c00d0a4:	44c4                	lw	s1,12(s1)
  while (tmp_cb != NULL)
1c00d0a6:	f8ed                	bnez	s1,1c00d098 <__pi_gpio_handler+0x1c>
      }
      irq_mask = irq_mask >> 1;
      pin++;
    }
  }
}
1c00d0a8:	40b2                	lw	ra,12(sp)
1c00d0aa:	4422                	lw	s0,8(sp)
1c00d0ac:	4492                	lw	s1,4(sp)
1c00d0ae:	0141                	addi	sp,sp,16
1c00d0b0:	8082                	ret
1c00d0b2:	7a468693          	addi	a3,a3,1956
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c00d0b6:	46dc                	lw	a5,12(a3)
    uint8_t pin = 0;
1c00d0b8:	4701                	li	a4,0
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c00d0ba:	8fe1                	and	a5,a5,s0
1c00d0bc:	01c00513          	li	a0,28
    while (irq_mask)
1c00d0c0:	d7e5                	beqz	a5,1c00d0a8 <__pi_gpio_handler+0x2c>
      if (irq_mask & 0x1)
1c00d0c2:	fc17b633          	p.bclr	a2,a5,30,1
1c00d0c6:	c615                	beqz	a2,1c00d0f2 <__pi_gpio_handler+0x76>
        task = gpio->event_task[pin];
1c00d0c8:	00470613          	addi	a2,a4,4
1c00d0cc:	060a                	slli	a2,a2,0x2
1c00d0ce:	9636                	add	a2,a2,a3
1c00d0d0:	4610                	lw	a2,8(a2)
        if (task != NULL)
1c00d0d2:	c205                	beqz	a2,1c00d0f2 <__pi_gpio_handler+0x76>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00d0d4:	30047873          	csrrci	a6,mstatus,8
  if (sched->first) {
1c00d0d8:	01c02883          	lw	a7,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00d0dc:	00062023          	sw	zero,0(a2)
  if (sched->first) {
1c00d0e0:	00088e63          	beqz	a7,1c00d0fc <__pi_gpio_handler+0x80>
    sched->last->next = event;
1c00d0e4:	00452883          	lw	a7,4(a0)
1c00d0e8:	00c8a023          	sw	a2,0(a7)
  sched->last = event;
1c00d0ec:	c150                	sw	a2,4(a0)
  __builtin_pulp_spr_write(reg, val);
1c00d0ee:	30081073          	csrw	mstatus,a6
      pin++;
1c00d0f2:	0705                	addi	a4,a4,1
      irq_mask = irq_mask >> 1;
1c00d0f4:	8385                	srli	a5,a5,0x1
      pin++;
1c00d0f6:	0ff77713          	andi	a4,a4,255
1c00d0fa:	b7d9                	j	1c00d0c0 <__pi_gpio_handler+0x44>
    sched->first = event;
1c00d0fc:	00c02e23          	sw	a2,28(zero) # 1c <__rt_sched>
1c00d100:	b7f5                	j	1c00d0ec <__pi_gpio_handler+0x70>

1c00d102 <__rt_i2s_resume>:
  conf->pdm = 1;
  conf->dual = 0;
  conf->width = 16;
  conf->id = -1;
  conf->flags = 0;
}
1c00d102:	1c0107b7          	lui	a5,0x1c010
1c00d106:	4d18                	lw	a4,24(a0)
1c00d108:	9347a783          	lw	a5,-1740(a5) # 1c00f934 <__rt_freq_domains>
1c00d10c:	068416b7          	lui	a3,0x6841
1c00d110:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00d114:	02e7c7b3          	div	a5,a5,a4
1c00d118:	02954703          	lbu	a4,41(a0)
1c00d11c:	177d                	addi	a4,a4,-1
1c00d11e:	c0874733          	p.bset	a4,a4,0,8
1c00d122:	17fd                	addi	a5,a5,-1
1c00d124:	8785                	srai	a5,a5,0x1
1c00d126:	07c2                	slli	a5,a5,0x10
1c00d128:	8fd9                	or	a5,a5,a4
1c00d12a:	02554703          	lbu	a4,37(a0)
1c00d12e:	9736                	add	a4,a4,a3
1c00d130:	070a                	slli	a4,a4,0x2
1c00d132:	c31c                	sw	a5,0(a4)
1c00d134:	8082                	ret

1c00d136 <__rt_i2s_setfreq_after>:
1c00d136:	1141                	addi	sp,sp,-16
1c00d138:	1c0107b7          	lui	a5,0x1c010
1c00d13c:	c422                	sw	s0,8(sp)
1c00d13e:	8e87a403          	lw	s0,-1816(a5) # 1c00f8e8 <__rt_i2s_first>
1c00d142:	c606                	sw	ra,12(sp)
1c00d144:	e411                	bnez	s0,1c00d150 <__rt_i2s_setfreq_after+0x1a>
1c00d146:	40b2                	lw	ra,12(sp)
1c00d148:	4422                	lw	s0,8(sp)
1c00d14a:	4501                	li	a0,0
1c00d14c:	0141                	addi	sp,sp,16
1c00d14e:	8082                	ret
1c00d150:	02844783          	lbu	a5,40(s0)
1c00d154:	c781                	beqz	a5,1c00d15c <__rt_i2s_setfreq_after+0x26>
1c00d156:	8522                	mv	a0,s0
1c00d158:	fabff0ef          	jal	ra,1c00d102 <__rt_i2s_resume>
1c00d15c:	4c40                	lw	s0,28(s0)
1c00d15e:	b7dd                	j	1c00d144 <__rt_i2s_setfreq_after+0xe>

1c00d160 <__rt_i2s_setfreq_before>:
1c00d160:	1c0107b7          	lui	a5,0x1c010
1c00d164:	8e87a783          	lw	a5,-1816(a5) # 1c00f8e8 <__rt_i2s_first>
1c00d168:	068416b7          	lui	a3,0x6841
1c00d16c:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00d170:	e399                	bnez	a5,1c00d176 <__rt_i2s_setfreq_before+0x16>
1c00d172:	4501                	li	a0,0
1c00d174:	8082                	ret
1c00d176:	0287c703          	lbu	a4,40(a5)
1c00d17a:	c719                	beqz	a4,1c00d188 <__rt_i2s_setfreq_before+0x28>
1c00d17c:	0257c703          	lbu	a4,37(a5)
1c00d180:	9736                	add	a4,a4,a3
1c00d182:	070a                	slli	a4,a4,0x2
1c00d184:	00072023          	sw	zero,0(a4)
1c00d188:	4fdc                	lw	a5,28(a5)
1c00d18a:	b7dd                	j	1c00d170 <__rt_i2s_setfreq_before+0x10>

1c00d18c <__rt_i2s_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that the I2S channels are stopped and resumed
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00d18c:	1c00d5b7          	lui	a1,0x1c00d
{
1c00d190:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00d192:	4601                	li	a2,0
1c00d194:	16058593          	addi	a1,a1,352 # 1c00d160 <__rt_i2s_setfreq_before>
1c00d198:	4511                	li	a0,4
{
1c00d19a:	c606                	sw	ra,12(sp)
1c00d19c:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00d19e:	ed1fd0ef          	jal	ra,1c00b06e <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00d1a2:	1c00d5b7          	lui	a1,0x1c00d
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00d1a6:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00d1a8:	4601                	li	a2,0
1c00d1aa:	13658593          	addi	a1,a1,310 # 1c00d136 <__rt_i2s_setfreq_after>
1c00d1ae:	4515                	li	a0,5
1c00d1b0:	ebffd0ef          	jal	ra,1c00b06e <__rt_cbsys_add>
1c00d1b4:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize i2s driver\n");
1c00d1b6:	c10d                	beqz	a0,1c00d1d8 <__rt_i2s_init+0x4c>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00d1b8:	01402673          	csrr	a2,uhartid
1c00d1bc:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00d1c0:	40565593          	srai	a1,a2,0x5
1c00d1c4:	f265b5b3          	p.bclr	a1,a1,25,6
1c00d1c8:	f4563633          	p.bclr	a2,a2,26,5
1c00d1cc:	27850513          	addi	a0,a0,632 # 1c00f278 <__hyper_pad+0x50>
1c00d1d0:	798000ef          	jal	ra,1c00d968 <printf>
1c00d1d4:	718000ef          	jal	ra,1c00d8ec <abort>
}
1c00d1d8:	40b2                	lw	ra,12(sp)
1c00d1da:	4422                	lw	s0,8(sp)
1c00d1dc:	0141                	addi	sp,sp,16
1c00d1de:	8082                	ret

1c00d1e0 <__rt_himax_init>:
    .capture   = &__rt_himax_capture
};

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_himax_init()
{
  camera_isAwaked = 0;
1c00d1e0:	1b0017b7          	lui	a5,0x1b001
1c00d1e4:	ba078c23          	sb	zero,-1096(a5) # 1b000bb8 <camera_isAwaked>
}
1c00d1e8:	8082                	ret

1c00d1ea <__rt_i2c_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_i2c_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_I2C; i++)
  {
    __rt_i2c[i].open_count = 0;
1c00d1ea:	1c00f7b7          	lui	a5,0x1c00f
1c00d1ee:	5a878793          	addi	a5,a5,1448 # 1c00f5a8 <__rt_i2c>
1c00d1f2:	00078223          	sb	zero,4(a5)
1c00d1f6:	00078a23          	sb	zero,20(a5)
  }
}
1c00d1fa:	8082                	ret

1c00d1fc <__rt_rtc_init>:
}


RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_rtc_init()
{
  __rtc_handler = NULL;
1c00d1fc:	35800793          	li	a5,856
1c00d200:	0207ac23          	sw	zero,56(a5)
  dev_rtc.open_count = 0;
1c00d204:	02078823          	sb	zero,48(a5)
  __rt_rtc_init_done = 0;
1c00d208:	0207aa23          	sw	zero,52(a5)
}
1c00d20c:	8082                	ret

1c00d20e <__rt_spim_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_spim_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim_open_count[i] = 0;
1c00d20e:	1c0107b7          	lui	a5,0x1c010
1c00d212:	8ec78793          	addi	a5,a5,-1812 # 1c00f8ec <__rt_spim_open_count>
1c00d216:	0007a023          	sw	zero,0(a5)
1c00d21a:	0007a223          	sw	zero,4(a5)
  }
}
1c00d21e:	8082                	ret

1c00d220 <__rt_io_end_of_flush>:
  if (rt_iodev() == RT_IODEV_UART)
  {
    __rt_io_start(NULL);
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
1c00d220:	1c0107b7          	lui	a5,0x1c010
1c00d224:	8e07ac23          	sw	zero,-1800(a5) # 1c00f8f8 <__rt_io_pending_flush>
1c00d228:	00052c23          	sw	zero,24(a0)
1c00d22c:	8082                	ret

1c00d22e <__rt_io_uart_wait_req>:
1c00d22e:	1141                	addi	sp,sp,-16
1c00d230:	c226                	sw	s1,4(sp)
1c00d232:	84aa                	mv	s1,a0
1c00d234:	c606                	sw	ra,12(sp)
1c00d236:	c422                	sw	s0,8(sp)
1c00d238:	c04a                	sw	s2,0(sp)
1c00d23a:	30047973          	csrrci	s2,mstatus,8
1c00d23e:	1c010437          	lui	s0,0x1c010
1c00d242:	8f440413          	addi	s0,s0,-1804 # 1c00f8f4 <__rt_io_event_current>
1c00d246:	4008                	lw	a0,0(s0)
1c00d248:	c509                	beqz	a0,1c00d252 <__rt_io_uart_wait_req+0x24>
1c00d24a:	bc4fe0ef          	jal	ra,1c00b60e <rt_event_wait>
1c00d24e:	00042023          	sw	zero,0(s0)
1c00d252:	4785                	li	a5,1
1c00d254:	08f48023          	sb	a5,128(s1)
1c00d258:	0814c783          	lbu	a5,129(s1)
1c00d25c:	00201737          	lui	a4,0x201
1c00d260:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00d264:	04078793          	addi	a5,a5,64
1c00d268:	07da                	slli	a5,a5,0x16
1c00d26a:	0007e723          	p.sw	zero,a4(a5)
1c00d26e:	30091073          	csrw	mstatus,s2
1c00d272:	40b2                	lw	ra,12(sp)
1c00d274:	4422                	lw	s0,8(sp)
1c00d276:	4492                	lw	s1,4(sp)
1c00d278:	4902                	lw	s2,0(sp)
1c00d27a:	0141                	addi	sp,sp,16
1c00d27c:	8082                	ret

1c00d27e <__rt_do_putc_host>:
1c00d27e:	1c010737          	lui	a4,0x1c010
1c00d282:	8fc70793          	addi	a5,a4,-1796 # 1c00f8fc <__rt_putc_host_buffer_index>
1c00d286:	4390                	lw	a2,0(a5)
1c00d288:	8fc70713          	addi	a4,a4,-1796
1c00d28c:	00160693          	addi	a3,a2,1
1c00d290:	c394                	sw	a3,0(a5)
1c00d292:	1c00f7b7          	lui	a5,0x1c00f
1c00d296:	5c878593          	addi	a1,a5,1480 # 1c00f5c8 <__rt_putc_host_buffer>
1c00d29a:	00a5c623          	p.sb	a0,a2(a1)
1c00d29e:	07f00593          	li	a1,127
1c00d2a2:	5c878613          	addi	a2,a5,1480
1c00d2a6:	00b68463          	beq	a3,a1,1c00d2ae <__rt_do_putc_host+0x30>
1c00d2aa:	00a53a63          	p.bneimm	a0,10,1c00d2be <__rt_do_putc_host+0x40>
1c00d2ae:	5c878513          	addi	a0,a5,1480
1c00d2b2:	000646a3          	p.sb	zero,a3(a2)
1c00d2b6:	00072023          	sw	zero,0(a4)
1c00d2ba:	97bfd06f          	j	1c00ac34 <semihost_write0>
1c00d2be:	8082                	ret

1c00d2c0 <__rt_io_start>:
1c00d2c0:	1101                	addi	sp,sp,-32
1c00d2c2:	0028                	addi	a0,sp,8
1c00d2c4:	ce06                	sw	ra,28(sp)
1c00d2c6:	cc22                	sw	s0,24(sp)
1c00d2c8:	3ee010ef          	jal	ra,1c00e6b6 <rt_uart_conf_init>
1c00d2cc:	4585                	li	a1,1
1c00d2ce:	4501                	li	a0,0
1c00d2d0:	9d8fe0ef          	jal	ra,1c00b4a8 <rt_event_alloc>
1c00d2d4:	547d                	li	s0,-1
1c00d2d6:	ed0d                	bnez	a0,1c00d310 <__rt_io_start+0x50>
1c00d2d8:	1c00f7b7          	lui	a5,0x1c00f
1c00d2dc:	5687a783          	lw	a5,1384(a5) # 1c00f568 <__rt_iodev_uart_baudrate>
1c00d2e0:	842a                	mv	s0,a0
1c00d2e2:	1c010537          	lui	a0,0x1c010
1c00d2e6:	01c00593          	li	a1,28
1c00d2ea:	83c50513          	addi	a0,a0,-1988 # 1c00f83c <__rt_io_event>
1c00d2ee:	c43e                	sw	a5,8(sp)
1c00d2f0:	978fe0ef          	jal	ra,1c00b468 <__rt_event_init>
1c00d2f4:	1c0107b7          	lui	a5,0x1c010
1c00d2f8:	8d07a503          	lw	a0,-1840(a5) # 1c00f8d0 <__rt_iodev_uart_channel>
1c00d2fc:	4681                	li	a3,0
1c00d2fe:	4601                	li	a2,0
1c00d300:	002c                	addi	a1,sp,8
1c00d302:	0511                	addi	a0,a0,4
1c00d304:	3c2010ef          	jal	ra,1c00e6c6 <__rt_uart_open>
1c00d308:	1c0107b7          	lui	a5,0x1c010
1c00d30c:	90a7a023          	sw	a0,-1792(a5) # 1c00f900 <_rt_io_uart>
1c00d310:	8522                	mv	a0,s0
1c00d312:	40f2                	lw	ra,28(sp)
1c00d314:	4462                	lw	s0,24(sp)
1c00d316:	6105                	addi	sp,sp,32
1c00d318:	8082                	ret

1c00d31a <rt_event_execute.isra.4.constprop.12>:
1c00d31a:	1141                	addi	sp,sp,-16
1c00d31c:	c606                	sw	ra,12(sp)
1c00d31e:	c422                	sw	s0,8(sp)
1c00d320:	30047473          	csrrci	s0,mstatus,8
1c00d324:	4585                	li	a1,1
1c00d326:	01c00513          	li	a0,28
1c00d32a:	a54fe0ef          	jal	ra,1c00b57e <__rt_event_execute>
1c00d32e:	30041073          	csrw	mstatus,s0
1c00d332:	40b2                	lw	ra,12(sp)
1c00d334:	4422                	lw	s0,8(sp)
1c00d336:	0141                	addi	sp,sp,16
1c00d338:	8082                	ret

1c00d33a <__rt_io_lock>:
1c00d33a:	1c00f7b7          	lui	a5,0x1c00f
1c00d33e:	4b07a783          	lw	a5,1200(a5) # 1c00f4b0 <__hal_debug_struct+0x10>
1c00d342:	cf81                	beqz	a5,1c00d35a <__rt_io_lock+0x20>
1c00d344:	1c0107b7          	lui	a5,0x1c010
1c00d348:	9007a783          	lw	a5,-1792(a5) # 1c00f900 <_rt_io_uart>
1c00d34c:	e799                	bnez	a5,1c00d35a <__rt_io_lock+0x20>
1c00d34e:	1c00f7b7          	lui	a5,0x1c00f
1c00d352:	5647a783          	lw	a5,1380(a5) # 1c00f564 <__rt_iodev>
1c00d356:	0427b963          	p.bneimm	a5,2,1c00d3a8 <__rt_io_lock+0x6e>
1c00d35a:	7135                	addi	sp,sp,-160
1c00d35c:	014027f3          	csrr	a5,uhartid
1c00d360:	cf06                	sw	ra,156(sp)
1c00d362:	ca5797b3          	p.extractu	a5,a5,5,5
1c00d366:	02000713          	li	a4,32
1c00d36a:	1b001537          	lui	a0,0x1b001
1c00d36e:	00e79963          	bne	a5,a4,1c00d380 <__rt_io_lock+0x46>
1c00d372:	bbc50513          	addi	a0,a0,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00d376:	d89fd0ef          	jal	ra,1c00b0fe <__rt_fc_lock>
1c00d37a:	40fa                	lw	ra,156(sp)
1c00d37c:	610d                	addi	sp,sp,160
1c00d37e:	8082                	ret
1c00d380:	004c                	addi	a1,sp,4
1c00d382:	bbc50513          	addi	a0,a0,-1092
1c00d386:	ddffd0ef          	jal	ra,1c00b164 <__rt_fc_cluster_lock>
1c00d38a:	4689                	li	a3,2
1c00d38c:	00204737          	lui	a4,0x204
1c00d390:	08c14783          	lbu	a5,140(sp)
1c00d394:	0ff7f793          	andi	a5,a5,255
1c00d398:	f3ed                	bnez	a5,1c00d37a <__rt_io_lock+0x40>
1c00d39a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00d39e:	03c76783          	p.elw	a5,60(a4)
1c00d3a2:	00d72223          	sw	a3,4(a4)
1c00d3a6:	b7ed                	j	1c00d390 <__rt_io_lock+0x56>
1c00d3a8:	8082                	ret

1c00d3aa <__rt_putc_host_cluster_req>:
1c00d3aa:	1141                	addi	sp,sp,-16
1c00d3ac:	c422                	sw	s0,8(sp)
1c00d3ae:	c606                	sw	ra,12(sp)
1c00d3b0:	842a                	mv	s0,a0
1c00d3b2:	08954503          	lbu	a0,137(a0)
1c00d3b6:	ec9ff0ef          	jal	ra,1c00d27e <__rt_do_putc_host>
1c00d3ba:	08844783          	lbu	a5,136(s0)
1c00d3be:	4705                	li	a4,1
1c00d3c0:	08e42223          	sw	a4,132(s0)
1c00d3c4:	00201737          	lui	a4,0x201
1c00d3c8:	40b2                	lw	ra,12(sp)
1c00d3ca:	4422                	lw	s0,8(sp)
1c00d3cc:	04078793          	addi	a5,a5,64
1c00d3d0:	07da                	slli	a5,a5,0x16
1c00d3d2:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00d3d6:	0007e723          	p.sw	zero,a4(a5)
1c00d3da:	0141                	addi	sp,sp,16
1c00d3dc:	8082                	ret

1c00d3de <__rt_io_unlock>:
1c00d3de:	1c00f7b7          	lui	a5,0x1c00f
1c00d3e2:	4b07a783          	lw	a5,1200(a5) # 1c00f4b0 <__hal_debug_struct+0x10>
1c00d3e6:	cf81                	beqz	a5,1c00d3fe <__rt_io_unlock+0x20>
1c00d3e8:	1c0107b7          	lui	a5,0x1c010
1c00d3ec:	9007a783          	lw	a5,-1792(a5) # 1c00f900 <_rt_io_uart>
1c00d3f0:	e799                	bnez	a5,1c00d3fe <__rt_io_unlock+0x20>
1c00d3f2:	1c00f7b7          	lui	a5,0x1c00f
1c00d3f6:	5647a783          	lw	a5,1380(a5) # 1c00f564 <__rt_iodev>
1c00d3fa:	0427b963          	p.bneimm	a5,2,1c00d44c <__rt_io_unlock+0x6e>
1c00d3fe:	7135                	addi	sp,sp,-160
1c00d400:	014027f3          	csrr	a5,uhartid
1c00d404:	cf06                	sw	ra,156(sp)
1c00d406:	ca5797b3          	p.extractu	a5,a5,5,5
1c00d40a:	02000713          	li	a4,32
1c00d40e:	1b001537          	lui	a0,0x1b001
1c00d412:	00e79963          	bne	a5,a4,1c00d424 <__rt_io_unlock+0x46>
1c00d416:	bbc50513          	addi	a0,a0,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00d41a:	d17fd0ef          	jal	ra,1c00b130 <__rt_fc_unlock>
1c00d41e:	40fa                	lw	ra,156(sp)
1c00d420:	610d                	addi	sp,sp,160
1c00d422:	8082                	ret
1c00d424:	004c                	addi	a1,sp,4
1c00d426:	bbc50513          	addi	a0,a0,-1092
1c00d42a:	d73fd0ef          	jal	ra,1c00b19c <__rt_fc_cluster_unlock>
1c00d42e:	4689                	li	a3,2
1c00d430:	00204737          	lui	a4,0x204
1c00d434:	08c14783          	lbu	a5,140(sp)
1c00d438:	0ff7f793          	andi	a5,a5,255
1c00d43c:	f3ed                	bnez	a5,1c00d41e <__rt_io_unlock+0x40>
1c00d43e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00d442:	03c76783          	p.elw	a5,60(a4)
1c00d446:	00d72223          	sw	a3,4(a4)
1c00d44a:	b7ed                	j	1c00d434 <__rt_io_unlock+0x56>
1c00d44c:	8082                	ret

1c00d44e <__rt_io_uart_flush.constprop.11>:
1c00d44e:	7171                	addi	sp,sp,-176
1c00d450:	d522                	sw	s0,168(sp)
1c00d452:	d706                	sw	ra,172(sp)
1c00d454:	d326                	sw	s1,164(sp)
1c00d456:	d14a                	sw	s2,160(sp)
1c00d458:	cf4e                	sw	s3,156(sp)
1c00d45a:	cd52                	sw	s4,152(sp)
1c00d45c:	1c010437          	lui	s0,0x1c010
1c00d460:	8f842783          	lw	a5,-1800(s0) # 1c00f8f8 <__rt_io_pending_flush>
1c00d464:	8f840993          	addi	s3,s0,-1800
1c00d468:	efad                	bnez	a5,1c00d4e2 <__rt_io_uart_flush.constprop.11+0x94>
1c00d46a:	1c00f637          	lui	a2,0x1c00f
1c00d46e:	4a060793          	addi	a5,a2,1184 # 1c00f4a0 <__hal_debug_struct>
1c00d472:	4f80                	lw	s0,24(a5)
1c00d474:	4a060a13          	addi	s4,a2,1184
1c00d478:	cc29                	beqz	s0,1c00d4d2 <__rt_io_uart_flush.constprop.11+0x84>
1c00d47a:	1c010737          	lui	a4,0x1c010
1c00d47e:	014027f3          	csrr	a5,uhartid
1c00d482:	90072483          	lw	s1,-1792(a4) # 1c00f900 <_rt_io_uart>
1c00d486:	ca5797b3          	p.extractu	a5,a5,5,5
1c00d48a:	02000713          	li	a4,32
1c00d48e:	1c00f937          	lui	s2,0x1c00f
1c00d492:	06e79263          	bne	a5,a4,1c00d4f6 <__rt_io_uart_flush.constprop.11+0xa8>
1c00d496:	1c00d5b7          	lui	a1,0x1c00d
1c00d49a:	4785                	li	a5,1
1c00d49c:	4a060613          	addi	a2,a2,1184
1c00d4a0:	22058593          	addi	a1,a1,544 # 1c00d220 <__rt_io_end_of_flush>
1c00d4a4:	4501                	li	a0,0
1c00d4a6:	00f9a023          	sw	a5,0(s3)
1c00d4aa:	874fe0ef          	jal	ra,1c00b51e <rt_event_get>
1c00d4ae:	40cc                	lw	a1,4(s1)
1c00d4b0:	87aa                	mv	a5,a0
1c00d4b2:	4701                	li	a4,0
1c00d4b4:	0586                	slli	a1,a1,0x1
1c00d4b6:	86a2                	mv	a3,s0
1c00d4b8:	4bc90613          	addi	a2,s2,1212 # 1c00f4bc <__hal_debug_struct+0x1c>
1c00d4bc:	0585                	addi	a1,a1,1
1c00d4be:	4501                	li	a0,0
1c00d4c0:	dd4fe0ef          	jal	ra,1c00ba94 <rt_periph_copy>
1c00d4c4:	f1bff0ef          	jal	ra,1c00d3de <__rt_io_unlock>
1c00d4c8:	0009a783          	lw	a5,0(s3)
1c00d4cc:	e395                	bnez	a5,1c00d4f0 <__rt_io_uart_flush.constprop.11+0xa2>
1c00d4ce:	e6dff0ef          	jal	ra,1c00d33a <__rt_io_lock>
1c00d4d2:	50ba                	lw	ra,172(sp)
1c00d4d4:	542a                	lw	s0,168(sp)
1c00d4d6:	549a                	lw	s1,164(sp)
1c00d4d8:	590a                	lw	s2,160(sp)
1c00d4da:	49fa                	lw	s3,156(sp)
1c00d4dc:	4a6a                	lw	s4,152(sp)
1c00d4de:	614d                	addi	sp,sp,176
1c00d4e0:	8082                	ret
1c00d4e2:	efdff0ef          	jal	ra,1c00d3de <__rt_io_unlock>
1c00d4e6:	e35ff0ef          	jal	ra,1c00d31a <rt_event_execute.isra.4.constprop.12>
1c00d4ea:	e51ff0ef          	jal	ra,1c00d33a <__rt_io_lock>
1c00d4ee:	bf8d                	j	1c00d460 <__rt_io_uart_flush.constprop.11+0x12>
1c00d4f0:	e2bff0ef          	jal	ra,1c00d31a <rt_event_execute.isra.4.constprop.12>
1c00d4f4:	bfd1                	j	1c00d4c8 <__rt_io_uart_flush.constprop.11+0x7a>
1c00d4f6:	868a                	mv	a3,sp
1c00d4f8:	8622                	mv	a2,s0
1c00d4fa:	4bc90593          	addi	a1,s2,1212
1c00d4fe:	8526                	mv	a0,s1
1c00d500:	2a2010ef          	jal	ra,1c00e7a2 <rt_uart_cluster_write>
1c00d504:	4689                	li	a3,2
1c00d506:	00204737          	lui	a4,0x204
1c00d50a:	08c14783          	lbu	a5,140(sp)
1c00d50e:	0ff7f793          	andi	a5,a5,255
1c00d512:	c781                	beqz	a5,1c00d51a <__rt_io_uart_flush.constprop.11+0xcc>
1c00d514:	000a2c23          	sw	zero,24(s4)
1c00d518:	bf6d                	j	1c00d4d2 <__rt_io_uart_flush.constprop.11+0x84>
1c00d51a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00d51e:	03c76783          	p.elw	a5,60(a4)
1c00d522:	00d72223          	sw	a3,4(a4)
1c00d526:	b7d5                	j	1c00d50a <__rt_io_uart_flush.constprop.11+0xbc>

1c00d528 <__rt_io_uart_wait_pending>:
1c00d528:	7135                	addi	sp,sp,-160
1c00d52a:	cd22                	sw	s0,152(sp)
1c00d52c:	cf06                	sw	ra,156(sp)
1c00d52e:	1c010437          	lui	s0,0x1c010
1c00d532:	8f842783          	lw	a5,-1800(s0) # 1c00f8f8 <__rt_io_pending_flush>
1c00d536:	eb85                	bnez	a5,1c00d566 <__rt_io_uart_wait_pending+0x3e>
1c00d538:	1c010437          	lui	s0,0x1c010
1c00d53c:	8f440413          	addi	s0,s0,-1804 # 1c00f8f4 <__rt_io_event_current>
1c00d540:	4008                	lw	a0,0(s0)
1c00d542:	cd11                	beqz	a0,1c00d55e <__rt_io_uart_wait_pending+0x36>
1c00d544:	014027f3          	csrr	a5,uhartid
1c00d548:	8795                	srai	a5,a5,0x5
1c00d54a:	f267b7b3          	p.bclr	a5,a5,25,6
1c00d54e:	02000713          	li	a4,32
1c00d552:	02e79163          	bne	a5,a4,1c00d574 <__rt_io_uart_wait_pending+0x4c>
1c00d556:	8b8fe0ef          	jal	ra,1c00b60e <rt_event_wait>
1c00d55a:	00042023          	sw	zero,0(s0)
1c00d55e:	40fa                	lw	ra,156(sp)
1c00d560:	446a                	lw	s0,152(sp)
1c00d562:	610d                	addi	sp,sp,160
1c00d564:	8082                	ret
1c00d566:	e79ff0ef          	jal	ra,1c00d3de <__rt_io_unlock>
1c00d56a:	db1ff0ef          	jal	ra,1c00d31a <rt_event_execute.isra.4.constprop.12>
1c00d56e:	dcdff0ef          	jal	ra,1c00d33a <__rt_io_lock>
1c00d572:	b7c1                	j	1c00d532 <__rt_io_uart_wait_pending+0xa>
1c00d574:	08f106a3          	sb	a5,141(sp)
1c00d578:	1c00d7b7          	lui	a5,0x1c00d
1c00d57c:	22e78793          	addi	a5,a5,558 # 1c00d22e <__rt_io_uart_wait_req>
1c00d580:	4705                	li	a4,1
1c00d582:	c83e                	sw	a5,16(sp)
1c00d584:	0068                	addi	a0,sp,12
1c00d586:	1c0107b7          	lui	a5,0x1c010
1c00d58a:	86e7a023          	sw	a4,-1952(a5) # 1c00f860 <__rt_io_event+0x24>
1c00d58e:	08010623          	sb	zero,140(sp)
1c00d592:	d802                	sw	zero,48(sp)
1c00d594:	da02                	sw	zero,52(sp)
1c00d596:	ca2a                	sw	a0,20(sp)
1c00d598:	eb9fe0ef          	jal	ra,1c00c450 <__rt_cluster_push_fc_event>
1c00d59c:	4689                	li	a3,2
1c00d59e:	00204737          	lui	a4,0x204
1c00d5a2:	08c14783          	lbu	a5,140(sp)
1c00d5a6:	0ff7f793          	andi	a5,a5,255
1c00d5aa:	fbd5                	bnez	a5,1c00d55e <__rt_io_uart_wait_pending+0x36>
1c00d5ac:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00d5b0:	03c76783          	p.elw	a5,60(a4)
1c00d5b4:	00d72223          	sw	a3,4(a4)
1c00d5b8:	b7ed                	j	1c00d5a2 <__rt_io_uart_wait_pending+0x7a>

1c00d5ba <__rt_io_stop>:
1c00d5ba:	1141                	addi	sp,sp,-16
1c00d5bc:	c422                	sw	s0,8(sp)
1c00d5be:	1c010437          	lui	s0,0x1c010
1c00d5c2:	c606                	sw	ra,12(sp)
1c00d5c4:	90040413          	addi	s0,s0,-1792 # 1c00f900 <_rt_io_uart>
1c00d5c8:	f61ff0ef          	jal	ra,1c00d528 <__rt_io_uart_wait_pending>
1c00d5cc:	4008                	lw	a0,0(s0)
1c00d5ce:	4581                	li	a1,0
1c00d5d0:	184010ef          	jal	ra,1c00e754 <rt_uart_close>
1c00d5d4:	40b2                	lw	ra,12(sp)
1c00d5d6:	00042023          	sw	zero,0(s0)
1c00d5da:	4422                	lw	s0,8(sp)
1c00d5dc:	4501                	li	a0,0
1c00d5de:	0141                	addi	sp,sp,16
1c00d5e0:	8082                	ret

1c00d5e2 <strcmp>:
1c00d5e2:	0015478b          	p.lbu	a5,1(a0!)
1c00d5e6:	0015c70b          	p.lbu	a4,1(a1!)
1c00d5ea:	c399                	beqz	a5,1c00d5f0 <strcmp+0xe>
1c00d5ec:	fee78be3          	beq	a5,a4,1c00d5e2 <strcmp>
1c00d5f0:	40e78533          	sub	a0,a5,a4
1c00d5f4:	8082                	ret

1c00d5f6 <strncmp>:
1c00d5f6:	ce11                	beqz	a2,1c00d612 <strncmp+0x1c>
1c00d5f8:	962a                	add	a2,a2,a0
1c00d5fa:	0015478b          	p.lbu	a5,1(a0!)
1c00d5fe:	0015c70b          	p.lbu	a4,1(a1!)
1c00d602:	00e79563          	bne	a5,a4,1c00d60c <strncmp+0x16>
1c00d606:	00c50363          	beq	a0,a2,1c00d60c <strncmp+0x16>
1c00d60a:	fbe5                	bnez	a5,1c00d5fa <strncmp+0x4>
1c00d60c:	40e78533          	sub	a0,a5,a4
1c00d610:	8082                	ret
1c00d612:	4501                	li	a0,0
1c00d614:	8082                	ret

1c00d616 <strlen>:
1c00d616:	87aa                	mv	a5,a0
1c00d618:	0007c703          	lbu	a4,0(a5)
1c00d61c:	00178693          	addi	a3,a5,1
1c00d620:	e701                	bnez	a4,1c00d628 <strlen+0x12>
1c00d622:	40a78533          	sub	a0,a5,a0
1c00d626:	8082                	ret
1c00d628:	87b6                	mv	a5,a3
1c00d62a:	b7fd                	j	1c00d618 <strlen+0x2>

1c00d62c <memset>:
1c00d62c:	962a                	add	a2,a2,a0
1c00d62e:	87aa                	mv	a5,a0
1c00d630:	00c79363          	bne	a5,a2,1c00d636 <memset+0xa>
1c00d634:	8082                	ret
1c00d636:	00b780ab          	p.sb	a1,1(a5!)
1c00d63a:	bfdd                	j	1c00d630 <memset+0x4>

1c00d63c <memcpy>:
1c00d63c:	00a5e733          	or	a4,a1,a0
1c00d640:	fa273733          	p.bclr	a4,a4,29,2
1c00d644:	87aa                	mv	a5,a0
1c00d646:	c709                	beqz	a4,1c00d650 <memcpy+0x14>
1c00d648:	962e                	add	a2,a2,a1
1c00d64a:	00c59f63          	bne	a1,a2,1c00d668 <memcpy+0x2c>
1c00d64e:	8082                	ret
1c00d650:	fa263733          	p.bclr	a4,a2,29,2
1c00d654:	fb75                	bnez	a4,1c00d648 <memcpy+0xc>
1c00d656:	962e                	add	a2,a2,a1
1c00d658:	00c59363          	bne	a1,a2,1c00d65e <memcpy+0x22>
1c00d65c:	8082                	ret
1c00d65e:	0045a70b          	p.lw	a4,4(a1!)
1c00d662:	00e7a22b          	p.sw	a4,4(a5!)
1c00d666:	bfcd                	j	1c00d658 <memcpy+0x1c>
1c00d668:	0015c70b          	p.lbu	a4,1(a1!)
1c00d66c:	00e780ab          	p.sb	a4,1(a5!)
1c00d670:	bfe9                	j	1c00d64a <memcpy+0xe>

1c00d672 <strchr>:
1c00d672:	0ff5f593          	andi	a1,a1,255
1c00d676:	00054703          	lbu	a4,0(a0)
1c00d67a:	87aa                	mv	a5,a0
1c00d67c:	0505                	addi	a0,a0,1
1c00d67e:	00b70563          	beq	a4,a1,1c00d688 <strchr+0x16>
1c00d682:	fb75                	bnez	a4,1c00d676 <strchr+0x4>
1c00d684:	c191                	beqz	a1,1c00d688 <strchr+0x16>
1c00d686:	4781                	li	a5,0
1c00d688:	853e                	mv	a0,a5
1c00d68a:	8082                	ret

1c00d68c <__rt_putc_debug_bridge>:
1c00d68c:	1141                	addi	sp,sp,-16
1c00d68e:	c422                	sw	s0,8(sp)
1c00d690:	1c00f437          	lui	s0,0x1c00f
1c00d694:	c226                	sw	s1,4(sp)
1c00d696:	c606                	sw	ra,12(sp)
1c00d698:	84aa                	mv	s1,a0
1c00d69a:	4a040413          	addi	s0,s0,1184 # 1c00f4a0 <__hal_debug_struct>
1c00d69e:	485c                	lw	a5,20(s0)
1c00d6a0:	c791                	beqz	a5,1c00d6ac <__rt_putc_debug_bridge+0x20>
1c00d6a2:	06400513          	li	a0,100
1c00d6a6:	a4cfe0ef          	jal	ra,1c00b8f2 <rt_time_wait_us>
1c00d6aa:	bfd5                	j	1c00d69e <__rt_putc_debug_bridge+0x12>
1c00d6ac:	4c1c                	lw	a5,24(s0)
1c00d6ae:	00178713          	addi	a4,a5,1
1c00d6b2:	97a2                	add	a5,a5,s0
1c00d6b4:	00978e23          	sb	s1,28(a5)
1c00d6b8:	cc18                	sw	a4,24(s0)
1c00d6ba:	4c14                	lw	a3,24(s0)
1c00d6bc:	08000793          	li	a5,128
1c00d6c0:	00f68463          	beq	a3,a5,1c00d6c8 <__rt_putc_debug_bridge+0x3c>
1c00d6c4:	00a4b663          	p.bneimm	s1,10,1c00d6d0 <__rt_putc_debug_bridge+0x44>
1c00d6c8:	c701                	beqz	a4,1c00d6d0 <__rt_putc_debug_bridge+0x44>
1c00d6ca:	c858                	sw	a4,20(s0)
1c00d6cc:	00042c23          	sw	zero,24(s0)
1c00d6d0:	4c1c                	lw	a5,24(s0)
1c00d6d2:	e799                	bnez	a5,1c00d6e0 <__rt_putc_debug_bridge+0x54>
1c00d6d4:	4422                	lw	s0,8(sp)
1c00d6d6:	40b2                	lw	ra,12(sp)
1c00d6d8:	4492                	lw	s1,4(sp)
1c00d6da:	0141                	addi	sp,sp,16
1c00d6dc:	c9ffd06f          	j	1c00b37a <__rt_bridge_printf_flush>
1c00d6e0:	40b2                	lw	ra,12(sp)
1c00d6e2:	4422                	lw	s0,8(sp)
1c00d6e4:	4492                	lw	s1,4(sp)
1c00d6e6:	0141                	addi	sp,sp,16
1c00d6e8:	8082                	ret

1c00d6ea <__rt_putc_uart>:
1c00d6ea:	1101                	addi	sp,sp,-32
1c00d6ec:	c62a                	sw	a0,12(sp)
1c00d6ee:	ce06                	sw	ra,28(sp)
1c00d6f0:	e39ff0ef          	jal	ra,1c00d528 <__rt_io_uart_wait_pending>
1c00d6f4:	1c00f7b7          	lui	a5,0x1c00f
1c00d6f8:	4a078793          	addi	a5,a5,1184 # 1c00f4a0 <__hal_debug_struct>
1c00d6fc:	4f94                	lw	a3,24(a5)
1c00d6fe:	4532                	lw	a0,12(sp)
1c00d700:	00168713          	addi	a4,a3,1
1c00d704:	cf98                	sw	a4,24(a5)
1c00d706:	97b6                	add	a5,a5,a3
1c00d708:	00a78e23          	sb	a0,28(a5)
1c00d70c:	08000793          	li	a5,128
1c00d710:	00f70463          	beq	a4,a5,1c00d718 <__rt_putc_uart+0x2e>
1c00d714:	00a53663          	p.bneimm	a0,10,1c00d720 <__rt_putc_uart+0x36>
1c00d718:	40f2                	lw	ra,28(sp)
1c00d71a:	6105                	addi	sp,sp,32
1c00d71c:	d33ff06f          	j	1c00d44e <__rt_io_uart_flush.constprop.11>
1c00d720:	40f2                	lw	ra,28(sp)
1c00d722:	6105                	addi	sp,sp,32
1c00d724:	8082                	ret

1c00d726 <tfp_putc.isra.9>:
1c00d726:	1c00f7b7          	lui	a5,0x1c00f
1c00d72a:	5647a783          	lw	a5,1380(a5) # 1c00f564 <__rt_iodev>
1c00d72e:	7135                	addi	sp,sp,-160
1c00d730:	cf06                	sw	ra,156(sp)
1c00d732:	0427bf63          	p.bneimm	a5,2,1c00d790 <tfp_putc.isra.9+0x6a>
1c00d736:	014027f3          	csrr	a5,uhartid
1c00d73a:	8795                	srai	a5,a5,0x5
1c00d73c:	f267b7b3          	p.bclr	a5,a5,25,6
1c00d740:	02000713          	li	a4,32
1c00d744:	00e79763          	bne	a5,a4,1c00d752 <tfp_putc.isra.9+0x2c>
1c00d748:	b37ff0ef          	jal	ra,1c00d27e <__rt_do_putc_host>
1c00d74c:	40fa                	lw	ra,156(sp)
1c00d74e:	610d                	addi	sp,sp,160
1c00d750:	8082                	ret
1c00d752:	08f10623          	sb	a5,140(sp)
1c00d756:	1c00d7b7          	lui	a5,0x1c00d
1c00d75a:	4705                	li	a4,1
1c00d75c:	3aa78793          	addi	a5,a5,938 # 1c00d3aa <__rt_putc_host_cluster_req>
1c00d760:	08a106a3          	sb	a0,141(sp)
1c00d764:	0048                	addi	a0,sp,4
1c00d766:	d63a                	sw	a4,44(sp)
1c00d768:	c43e                	sw	a5,8(sp)
1c00d76a:	c502                	sw	zero,136(sp)
1c00d76c:	ce02                	sw	zero,28(sp)
1c00d76e:	c62a                	sw	a0,12(sp)
1c00d770:	00010c23          	sb	zero,24(sp)
1c00d774:	cddfe0ef          	jal	ra,1c00c450 <__rt_cluster_push_fc_event>
1c00d778:	4709                	li	a4,2
1c00d77a:	002047b7          	lui	a5,0x204
1c00d77e:	46aa                	lw	a3,136(sp)
1c00d780:	f6f1                	bnez	a3,1c00d74c <tfp_putc.isra.9+0x26>
1c00d782:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00d786:	03c7e683          	p.elw	a3,60(a5)
1c00d78a:	00e7a223          	sw	a4,4(a5)
1c00d78e:	bfc5                	j	1c00d77e <tfp_putc.isra.9+0x58>
1c00d790:	1c0107b7          	lui	a5,0x1c010
1c00d794:	9007a783          	lw	a5,-1792(a5) # 1c00f900 <_rt_io_uart>
1c00d798:	c781                	beqz	a5,1c00d7a0 <tfp_putc.isra.9+0x7a>
1c00d79a:	f51ff0ef          	jal	ra,1c00d6ea <__rt_putc_uart>
1c00d79e:	b77d                	j	1c00d74c <tfp_putc.isra.9+0x26>
1c00d7a0:	1c00f7b7          	lui	a5,0x1c00f
1c00d7a4:	4b07a783          	lw	a5,1200(a5) # 1c00f4b0 <__hal_debug_struct+0x10>
1c00d7a8:	c395                	beqz	a5,1c00d7cc <tfp_putc.isra.9+0xa6>
1c00d7aa:	014027f3          	csrr	a5,uhartid
1c00d7ae:	00379713          	slli	a4,a5,0x3
1c00d7b2:	1a1106b7          	lui	a3,0x1a110
1c00d7b6:	ee873733          	p.bclr	a4,a4,23,8
1c00d7ba:	9736                	add	a4,a4,a3
1c00d7bc:	6689                	lui	a3,0x2
1c00d7be:	078a                	slli	a5,a5,0x2
1c00d7c0:	f8068693          	addi	a3,a3,-128 # 1f80 <__rt_stack_size+0x1780>
1c00d7c4:	8ff5                	and	a5,a5,a3
1c00d7c6:	00a767a3          	p.sw	a0,a5(a4)
1c00d7ca:	b749                	j	1c00d74c <tfp_putc.isra.9+0x26>
1c00d7cc:	ec1ff0ef          	jal	ra,1c00d68c <__rt_putc_debug_bridge>
1c00d7d0:	bfb5                	j	1c00d74c <tfp_putc.isra.9+0x26>

1c00d7d2 <puts>:
1c00d7d2:	1141                	addi	sp,sp,-16
1c00d7d4:	c422                	sw	s0,8(sp)
1c00d7d6:	c606                	sw	ra,12(sp)
1c00d7d8:	842a                	mv	s0,a0
1c00d7da:	b61ff0ef          	jal	ra,1c00d33a <__rt_io_lock>
1c00d7de:	0014450b          	p.lbu	a0,1(s0!)
1c00d7e2:	c501                	beqz	a0,1c00d7ea <puts+0x18>
1c00d7e4:	f43ff0ef          	jal	ra,1c00d726 <tfp_putc.isra.9>
1c00d7e8:	bfdd                	j	1c00d7de <puts+0xc>
1c00d7ea:	4529                	li	a0,10
1c00d7ec:	f3bff0ef          	jal	ra,1c00d726 <tfp_putc.isra.9>
1c00d7f0:	befff0ef          	jal	ra,1c00d3de <__rt_io_unlock>
1c00d7f4:	40b2                	lw	ra,12(sp)
1c00d7f6:	4422                	lw	s0,8(sp)
1c00d7f8:	4501                	li	a0,0
1c00d7fa:	0141                	addi	sp,sp,16
1c00d7fc:	8082                	ret

1c00d7fe <fputc_locked>:
1c00d7fe:	1141                	addi	sp,sp,-16
1c00d800:	c422                	sw	s0,8(sp)
1c00d802:	842a                	mv	s0,a0
1c00d804:	0ff57513          	andi	a0,a0,255
1c00d808:	c606                	sw	ra,12(sp)
1c00d80a:	f1dff0ef          	jal	ra,1c00d726 <tfp_putc.isra.9>
1c00d80e:	8522                	mv	a0,s0
1c00d810:	40b2                	lw	ra,12(sp)
1c00d812:	4422                	lw	s0,8(sp)
1c00d814:	0141                	addi	sp,sp,16
1c00d816:	8082                	ret

1c00d818 <fputc>:
1c00d818:	1141                	addi	sp,sp,-16
1c00d81a:	c606                	sw	ra,12(sp)
1c00d81c:	c422                	sw	s0,8(sp)
1c00d81e:	842a                	mv	s0,a0
1c00d820:	b1bff0ef          	jal	ra,1c00d33a <__rt_io_lock>
1c00d824:	0ff47513          	andi	a0,s0,255
1c00d828:	effff0ef          	jal	ra,1c00d726 <tfp_putc.isra.9>
1c00d82c:	1c00f7b7          	lui	a5,0x1c00f
1c00d830:	4b07a783          	lw	a5,1200(a5) # 1c00f4b0 <__hal_debug_struct+0x10>
1c00d834:	e399                	bnez	a5,1c00d83a <fputc+0x22>
1c00d836:	b45fd0ef          	jal	ra,1c00b37a <__rt_bridge_printf_flush>
1c00d83a:	ba5ff0ef          	jal	ra,1c00d3de <__rt_io_unlock>
1c00d83e:	8522                	mv	a0,s0
1c00d840:	40b2                	lw	ra,12(sp)
1c00d842:	4422                	lw	s0,8(sp)
1c00d844:	0141                	addi	sp,sp,16
1c00d846:	8082                	ret

1c00d848 <putchar>:
1c00d848:	4589                	li	a1,2
1c00d84a:	fcfff06f          	j	1c00d818 <fputc>

1c00d84e <_prf_locked>:
1c00d84e:	1101                	addi	sp,sp,-32
1c00d850:	ce06                	sw	ra,28(sp)
1c00d852:	c02a                	sw	a0,0(sp)
1c00d854:	c62e                	sw	a1,12(sp)
1c00d856:	c432                	sw	a2,8(sp)
1c00d858:	c236                	sw	a3,4(sp)
1c00d85a:	ae1ff0ef          	jal	ra,1c00d33a <__rt_io_lock>
1c00d85e:	4692                	lw	a3,4(sp)
1c00d860:	4622                	lw	a2,8(sp)
1c00d862:	45b2                	lw	a1,12(sp)
1c00d864:	4502                	lw	a0,0(sp)
1c00d866:	2ca1                	jal	1c00dabe <_prf>
1c00d868:	c02a                	sw	a0,0(sp)
1c00d86a:	b75ff0ef          	jal	ra,1c00d3de <__rt_io_unlock>
1c00d86e:	40f2                	lw	ra,28(sp)
1c00d870:	4502                	lw	a0,0(sp)
1c00d872:	6105                	addi	sp,sp,32
1c00d874:	8082                	ret

1c00d876 <exit>:
1c00d876:	1101                	addi	sp,sp,-32
1c00d878:	cc22                	sw	s0,24(sp)
1c00d87a:	c84a                	sw	s2,16(sp)
1c00d87c:	c62a                	sw	a0,12(sp)
1c00d87e:	ce06                	sw	ra,28(sp)
1c00d880:	ca26                	sw	s1,20(sp)
1c00d882:	e54fd0ef          	jal	ra,1c00aed6 <__rt_deinit>
1c00d886:	4532                	lw	a0,12(sp)
1c00d888:	1a104437          	lui	s0,0x1a104
1c00d88c:	0a040793          	addi	a5,s0,160 # 1a1040a0 <__l1_end+0xa10405c>
1c00d890:	c1f54933          	p.bset	s2,a0,0,31
1c00d894:	0127a023          	sw	s2,0(a5)
1c00d898:	1c00f7b7          	lui	a5,0x1c00f
1c00d89c:	5647a783          	lw	a5,1380(a5) # 1c00f564 <__rt_iodev>
1c00d8a0:	0027bf63          	p.bneimm	a5,2,1c00d8be <exit+0x48>
1c00d8a4:	c901                	beqz	a0,1c00d8b4 <exit+0x3e>
1c00d8a6:	00020537          	lui	a0,0x20
1c00d8aa:	02350513          	addi	a0,a0,35 # 20023 <__L1Cl+0x10023>
1c00d8ae:	c14fd0ef          	jal	ra,1c00acc2 <semihost_exit>
1c00d8b2:	a001                	j	1c00d8b2 <exit+0x3c>
1c00d8b4:	00020537          	lui	a0,0x20
1c00d8b8:	02650513          	addi	a0,a0,38 # 20026 <__L1Cl+0x10026>
1c00d8bc:	bfcd                	j	1c00d8ae <exit+0x38>
1c00d8be:	1c00f4b7          	lui	s1,0x1c00f
1c00d8c2:	4a048493          	addi	s1,s1,1184 # 1c00f4a0 <__hal_debug_struct>
1c00d8c6:	ab5fd0ef          	jal	ra,1c00b37a <__rt_bridge_printf_flush>
1c00d8ca:	0124a623          	sw	s2,12(s1)
1c00d8ce:	a69fd0ef          	jal	ra,1c00b336 <__rt_bridge_send_notif>
1c00d8d2:	449c                	lw	a5,8(s1)
1c00d8d4:	dff9                	beqz	a5,1c00d8b2 <exit+0x3c>
1c00d8d6:	07440413          	addi	s0,s0,116
1c00d8da:	401c                	lw	a5,0(s0)
1c00d8dc:	83a5                	srli	a5,a5,0x9
1c00d8de:	f837b7b3          	p.bclr	a5,a5,28,3
1c00d8e2:	fe77bce3          	p.bneimm	a5,7,1c00d8da <exit+0x64>
1c00d8e6:	a73fd0ef          	jal	ra,1c00b358 <__rt_bridge_clear_notif>
1c00d8ea:	b7e1                	j	1c00d8b2 <exit+0x3c>

1c00d8ec <abort>:
1c00d8ec:	1141                	addi	sp,sp,-16
1c00d8ee:	557d                	li	a0,-1
1c00d8f0:	c606                	sw	ra,12(sp)
1c00d8f2:	f85ff0ef          	jal	ra,1c00d876 <exit>

1c00d8f6 <__rt_io_init>:
#endif
}

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_io_init()
{
  __rt_putc_host_buffer_index = 0;
1c00d8f6:	1c0107b7          	lui	a5,0x1c010
1c00d8fa:	8e07ae23          	sw	zero,-1796(a5) # 1c00f8fc <__rt_putc_host_buffer_index>
void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req);

static inline void __rt_fc_lock_init(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_FC)
  lock->waiting = NULL;
1c00d8fe:	1b0017b7          	lui	a5,0x1b001
1c00d902:	bbc78793          	addi	a5,a5,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00d906:	0007a223          	sw	zero,4(a5)
  lock->locked = 0;
1c00d90a:	0007a023          	sw	zero,0(a5)
  lock->fc_wait = NULL;
1c00d90e:	0007a623          	sw	zero,12(a5)
  __rt_fc_lock_init(&__rt_io_fc_lock);

#if defined(__RT_USE_UART)
  _rt_io_uart = NULL;
1c00d912:	1c0107b7          	lui	a5,0x1c010
1c00d916:	9007a023          	sw	zero,-1792(a5) # 1c00f900 <_rt_io_uart>
  __rt_io_event_current = NULL;
1c00d91a:	1c0107b7          	lui	a5,0x1c010
1c00d91e:	8e07aa23          	sw	zero,-1804(a5) # 1c00f8f4 <__rt_io_event_current>
  return __rt_iodev;
1c00d922:	1c00f7b7          	lui	a5,0x1c00f

  if (rt_iodev() == RT_IODEV_UART)
1c00d926:	5647a783          	lw	a5,1380(a5) # 1c00f564 <__rt_iodev>
1c00d92a:	0217be63          	p.bneimm	a5,1,1c00d966 <__rt_io_init+0x70>
  {
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00d92e:	1c00d5b7          	lui	a1,0x1c00d
{
1c00d932:	1141                	addi	sp,sp,-16
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00d934:	4601                	li	a2,0
1c00d936:	2c058593          	addi	a1,a1,704 # 1c00d2c0 <__rt_io_start>
1c00d93a:	4501                	li	a0,0
{
1c00d93c:	c606                	sw	ra,12(sp)
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00d93e:	f30fd0ef          	jal	ra,1c00b06e <__rt_cbsys_add>
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
1c00d942:	1c00d5b7          	lui	a1,0x1c00d
1c00d946:	5ba58593          	addi	a1,a1,1466 # 1c00d5ba <__rt_io_stop>
1c00d94a:	4601                	li	a2,0
1c00d94c:	4505                	li	a0,1
1c00d94e:	f20fd0ef          	jal	ra,1c00b06e <__rt_cbsys_add>
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
  }
#endif

}
1c00d952:	40b2                	lw	ra,12(sp)
    __rt_io_pending_flush = 0;
1c00d954:	1c0107b7          	lui	a5,0x1c010
1c00d958:	8e07ac23          	sw	zero,-1800(a5) # 1c00f8f8 <__rt_io_pending_flush>
    rt_event_alloc(NULL, 1);
1c00d95c:	4585                	li	a1,1
1c00d95e:	4501                	li	a0,0
}
1c00d960:	0141                	addi	sp,sp,16
    rt_event_alloc(NULL, 1);
1c00d962:	b47fd06f          	j	1c00b4a8 <rt_event_alloc>
1c00d966:	8082                	ret

1c00d968 <printf>:

	return r;
}

int printf(const char *format, ...)
{
1c00d968:	7139                	addi	sp,sp,-64
1c00d96a:	d432                	sw	a2,40(sp)
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00d96c:	862a                	mv	a2,a0
1c00d96e:	1c00d537          	lui	a0,0x1c00d
{
1c00d972:	d22e                	sw	a1,36(sp)
1c00d974:	d636                	sw	a3,44(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00d976:	4589                	li	a1,2
	va_start(vargs, format);
1c00d978:	1054                	addi	a3,sp,36
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00d97a:	7fe50513          	addi	a0,a0,2046 # 1c00d7fe <fputc_locked>
{
1c00d97e:	ce06                	sw	ra,28(sp)
1c00d980:	d83a                	sw	a4,48(sp)
1c00d982:	da3e                	sw	a5,52(sp)
1c00d984:	dc42                	sw	a6,56(sp)
1c00d986:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c00d988:	c636                	sw	a3,12(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00d98a:	ec5ff0ef          	jal	ra,1c00d84e <_prf_locked>
	va_end(vargs);

	return r;
}
1c00d98e:	40f2                	lw	ra,28(sp)
1c00d990:	6121                	addi	sp,sp,64
1c00d992:	8082                	ret

1c00d994 <_to_x>:
 * Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes).
 */
static int _to_x(char *buf, unsigned VALTYPE n, unsigned int base)
{
1c00d994:	7179                	addi	sp,sp,-48
1c00d996:	d422                	sw	s0,40(sp)
1c00d998:	d226                	sw	s1,36(sp)
1c00d99a:	ce4e                	sw	s3,28(sp)
1c00d99c:	cc52                	sw	s4,24(sp)
1c00d99e:	ca56                	sw	s5,20(sp)
1c00d9a0:	c85a                	sw	s6,16(sp)
1c00d9a2:	d606                	sw	ra,44(sp)
1c00d9a4:	d04a                	sw	s2,32(sp)
1c00d9a6:	c65e                	sw	s7,12(sp)
1c00d9a8:	84aa                	mv	s1,a0
1c00d9aa:	89ae                	mv	s3,a1
1c00d9ac:	8a32                	mv	s4,a2
1c00d9ae:	8ab6                	mv	s5,a3
1c00d9b0:	842a                	mv	s0,a0

	do {
		unsigned int d = n % base;

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00d9b2:	4b25                	li	s6,9
		unsigned int d = n % base;
1c00d9b4:	8656                	mv	a2,s5
1c00d9b6:	4681                	li	a3,0
1c00d9b8:	854e                	mv	a0,s3
1c00d9ba:	85d2                	mv	a1,s4
1c00d9bc:	f75f20ef          	jal	ra,1c000930 <__umoddi3>
		n /= base;
1c00d9c0:	85d2                	mv	a1,s4
		unsigned int d = n % base;
1c00d9c2:	892a                	mv	s2,a0
		n /= base;
1c00d9c4:	8656                	mv	a2,s5
1c00d9c6:	854e                	mv	a0,s3
1c00d9c8:	4681                	li	a3,0
1c00d9ca:	c2bf20ef          	jal	ra,1c0005f4 <__udivdi3>
1c00d9ce:	89aa                	mv	s3,a0
1c00d9d0:	8a2e                	mv	s4,a1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00d9d2:	02700713          	li	a4,39
1c00d9d6:	012b6363          	bltu	s6,s2,1c00d9dc <_to_x+0x48>
1c00d9da:	4701                	li	a4,0
1c00d9dc:	03090913          	addi	s2,s2,48
1c00d9e0:	974a                	add	a4,a4,s2
1c00d9e2:	00e40023          	sb	a4,0(s0)
	} while (n);
1c00d9e6:	8dc9                	or	a1,a1,a0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00d9e8:	00140793          	addi	a5,s0,1
	} while (n);
1c00d9ec:	e195                	bnez	a1,1c00da10 <_to_x+0x7c>

	*buf = 0;
1c00d9ee:	00078023          	sb	zero,0(a5)
	len = buf - start;
1c00d9f2:	40978533          	sub	a0,a5,s1

	for (buf--; buf > start; buf--, start++) {
1c00d9f6:	0084ef63          	bltu	s1,s0,1c00da14 <_to_x+0x80>
		*buf = *start;
		*start = tmp;
	}

	return len;
}
1c00d9fa:	50b2                	lw	ra,44(sp)
1c00d9fc:	5422                	lw	s0,40(sp)
1c00d9fe:	5492                	lw	s1,36(sp)
1c00da00:	5902                	lw	s2,32(sp)
1c00da02:	49f2                	lw	s3,28(sp)
1c00da04:	4a62                	lw	s4,24(sp)
1c00da06:	4ad2                	lw	s5,20(sp)
1c00da08:	4b42                	lw	s6,16(sp)
1c00da0a:	4bb2                	lw	s7,12(sp)
1c00da0c:	6145                	addi	sp,sp,48
1c00da0e:	8082                	ret
1c00da10:	843e                	mv	s0,a5
1c00da12:	b74d                	j	1c00d9b4 <_to_x+0x20>
		*buf = *start;
1c00da14:	0004c703          	lbu	a4,0(s1)
		char tmp = *buf;
1c00da18:	00044783          	lbu	a5,0(s0)
		*buf = *start;
1c00da1c:	fee40fab          	p.sb	a4,-1(s0!)
		*start = tmp;
1c00da20:	00f480ab          	p.sb	a5,1(s1!)
1c00da24:	bfc9                	j	1c00d9f6 <_to_x+0x62>

1c00da26 <_rlrshift>:
	return (buf + _to_udec(buf, value)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
1c00da26:	411c                	lw	a5,0(a0)
1c00da28:	4154                	lw	a3,4(a0)
1c00da2a:	fc17b733          	p.bclr	a4,a5,30,1
1c00da2e:	01f69613          	slli	a2,a3,0x1f
1c00da32:	8385                	srli	a5,a5,0x1
1c00da34:	8fd1                	or	a5,a5,a2
1c00da36:	97ba                	add	a5,a5,a4
1c00da38:	8285                	srli	a3,a3,0x1
1c00da3a:	00e7b733          	sltu	a4,a5,a4
1c00da3e:	9736                	add	a4,a4,a3
1c00da40:	c11c                	sw	a5,0(a0)
1c00da42:	c158                	sw	a4,4(a0)
}
1c00da44:	8082                	ret

1c00da46 <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
1c00da46:	4118                	lw	a4,0(a0)
1c00da48:	4154                	lw	a3,4(a0)
	 */
	rem += 2U;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00da4a:	4615                	li	a2,5
	rem += 2U;
1c00da4c:	00270793          	addi	a5,a4,2
1c00da50:	00e7b733          	sltu	a4,a5,a4
1c00da54:	9736                	add	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00da56:	02c755b3          	divu	a1,a4,a2
		rem -= q * 5U;
1c00da5a:	42b61733          	p.msu	a4,a2,a1
		hi = rem >> shifts[i];
1c00da5e:	01d71693          	slli	a3,a4,0x1d
1c00da62:	0037d713          	srli	a4,a5,0x3
1c00da66:	8f55                	or	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00da68:	02c75733          	divu	a4,a4,a2
1c00da6c:	01d75693          	srli	a3,a4,0x1d
1c00da70:	070e                	slli	a4,a4,0x3
		rem -= q * 5U;
1c00da72:	42e617b3          	p.msu	a5,a2,a4
		quot += q;
1c00da76:	95b6                	add	a1,a1,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00da78:	02c7d7b3          	divu	a5,a5,a2
		quot += q;
1c00da7c:	973e                	add	a4,a4,a5
1c00da7e:	00f737b3          	sltu	a5,a4,a5
1c00da82:	97ae                	add	a5,a5,a1
	}

	*v = quot;
1c00da84:	c118                	sw	a4,0(a0)
1c00da86:	c15c                	sw	a5,4(a0)
}
1c00da88:	8082                	ret

1c00da8a <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	char rval;

	if (*digit_count > 0) {
1c00da8a:	419c                	lw	a5,0(a1)
		*digit_count -= 1;
		*fr = *fr * 10U;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else {
		rval = '0';
1c00da8c:	03000713          	li	a4,48
	if (*digit_count > 0) {
1c00da90:	02f05563          	blez	a5,1c00daba <_get_digit+0x30>
		*digit_count -= 1;
1c00da94:	17fd                	addi	a5,a5,-1
1c00da96:	c19c                	sw	a5,0(a1)
		*fr = *fr * 10U;
1c00da98:	411c                	lw	a5,0(a0)
1c00da9a:	4729                	li	a4,10
1c00da9c:	4150                	lw	a2,4(a0)
1c00da9e:	02f706b3          	mul	a3,a4,a5
1c00daa2:	02f737b3          	mulhu	a5,a4,a5
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00daa6:	c114                	sw	a3,0(a0)
		*fr = *fr * 10U;
1c00daa8:	42c707b3          	p.mac	a5,a4,a2
		rval = ((*fr >> 60) & 0xF) + '0';
1c00daac:	01c7d713          	srli	a4,a5,0x1c
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00dab0:	c7c7b7b3          	p.bclr	a5,a5,3,28
		rval = ((*fr >> 60) & 0xF) + '0';
1c00dab4:	03070713          	addi	a4,a4,48
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00dab8:	c15c                	sw	a5,4(a0)
	}

	return rval;
}
1c00daba:	853a                	mv	a0,a4
1c00dabc:	8082                	ret

1c00dabe <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
1c00dabe:	7135                	addi	sp,sp,-160
1c00dac0:	c94a                	sw	s2,144(sp)
1c00dac2:	c74e                	sw	s3,140(sp)
1c00dac4:	c15a                	sw	s6,128(sp)
1c00dac6:	dede                	sw	s7,124(sp)
1c00dac8:	cf06                	sw	ra,156(sp)
1c00daca:	cd22                	sw	s0,152(sp)
1c00dacc:	cb26                	sw	s1,148(sp)
1c00dace:	c552                	sw	s4,136(sp)
1c00dad0:	c356                	sw	s5,132(sp)
1c00dad2:	dce2                	sw	s8,120(sp)
1c00dad4:	dae6                	sw	s9,116(sp)
1c00dad6:	d8ea                	sw	s10,112(sp)
1c00dad8:	d6ee                	sw	s11,108(sp)
1c00dada:	8b2a                	mv	s6,a0
1c00dadc:	8bae                	mv	s7,a1
1c00dade:	8936                	mv	s2,a3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
1c00dae0:	4981                	li	s3,0

	while ((c = *format++)) {
1c00dae2:	00064503          	lbu	a0,0(a2)
1c00dae6:	00160c13          	addi	s8,a2,1
1c00daea:	c911                	beqz	a0,1c00dafe <_prf+0x40>
		if (c != '%') {
1c00daec:	02500793          	li	a5,37
1c00daf0:	14f50563          	beq	a0,a5,1c00dc3a <_prf+0x17c>
			PUTC(c);
1c00daf4:	85de                	mv	a1,s7
1c00daf6:	9b02                	jalr	s6
1c00daf8:	13f53fe3          	p.bneimm	a0,-1,1c00e436 <_prf+0x978>
1c00dafc:	59fd                	li	s3,-1
		}
	}
	return count;

#undef PUTC
}
1c00dafe:	40fa                	lw	ra,156(sp)
1c00db00:	446a                	lw	s0,152(sp)
1c00db02:	854e                	mv	a0,s3
1c00db04:	44da                	lw	s1,148(sp)
1c00db06:	494a                	lw	s2,144(sp)
1c00db08:	49ba                	lw	s3,140(sp)
1c00db0a:	4a2a                	lw	s4,136(sp)
1c00db0c:	4a9a                	lw	s5,132(sp)
1c00db0e:	4b0a                	lw	s6,128(sp)
1c00db10:	5bf6                	lw	s7,124(sp)
1c00db12:	5c66                	lw	s8,120(sp)
1c00db14:	5cd6                	lw	s9,116(sp)
1c00db16:	5d46                	lw	s10,112(sp)
1c00db18:	5db6                	lw	s11,108(sp)
1c00db1a:	610d                	addi	sp,sp,160
1c00db1c:	8082                	ret
				switch (c) {
1c00db1e:	108d8663          	beq	s11,s0,1c00dc2a <_prf+0x16c>
1c00db22:	0fb46863          	bltu	s0,s11,1c00dc12 <_prf+0x154>
1c00db26:	fc0d8ce3          	beqz	s11,1c00dafe <_prf+0x40>
1c00db2a:	0ecd8d63          	beq	s11,a2,1c00dc24 <_prf+0x166>
					fplus = true;
1c00db2e:	8c52                	mv	s8,s4
			while (strchr("-+ #0", (c = *format++)) != NULL) {
1c00db30:	000c4d83          	lbu	s11,0(s8)
1c00db34:	1c00f737          	lui	a4,0x1c00f
1c00db38:	2c070513          	addi	a0,a4,704 # 1c00f2c0 <__hyper_pad+0x98>
1c00db3c:	85ee                	mv	a1,s11
1c00db3e:	c232                	sw	a2,4(sp)
1c00db40:	b33ff0ef          	jal	ra,1c00d672 <strchr>
1c00db44:	001c0a13          	addi	s4,s8,1
1c00db48:	4612                	lw	a2,4(sp)
1c00db4a:	f971                	bnez	a0,1c00db1e <_prf+0x60>
			if (c == '*') {
1c00db4c:	02a00713          	li	a4,42
1c00db50:	10ed9563          	bne	s11,a4,1c00dc5a <_prf+0x19c>
				width = va_arg(vargs, int);
1c00db54:	00092c83          	lw	s9,0(s2)
1c00db58:	00490713          	addi	a4,s2,4
				if (width < 0) {
1c00db5c:	000cd663          	bgez	s9,1c00db68 <_prf+0xaa>
					fminus = true;
1c00db60:	4785                	li	a5,1
					width = -width;
1c00db62:	41900cb3          	neg	s9,s9
					fminus = true;
1c00db66:	cc3e                	sw	a5,24(sp)
				c = *format++;
1c00db68:	000a4d83          	lbu	s11,0(s4)
				width = va_arg(vargs, int);
1c00db6c:	893a                	mv	s2,a4
				c = *format++;
1c00db6e:	002c0a13          	addi	s4,s8,2
			if (c == '.') {
1c00db72:	02e00713          	li	a4,46
			precision = -1;
1c00db76:	547d                	li	s0,-1
			if (c == '.') {
1c00db78:	00ed9f63          	bne	s11,a4,1c00db96 <_prf+0xd8>
				if (c == '*') {
1c00db7c:	000a4703          	lbu	a4,0(s4)
1c00db80:	02a00793          	li	a5,42
1c00db84:	10f71e63          	bne	a4,a5,1c00dca0 <_prf+0x1e2>
					precision = va_arg(vargs, int);
1c00db88:	00092403          	lw	s0,0(s2)
				c = *format++;
1c00db8c:	0a05                	addi	s4,s4,1
					precision = va_arg(vargs, int);
1c00db8e:	0911                	addi	s2,s2,4
				c = *format++;
1c00db90:	000a4d83          	lbu	s11,0(s4)
1c00db94:	0a05                	addi	s4,s4,1
			if (strchr("hlz", c) != NULL) {
1c00db96:	1c00f737          	lui	a4,0x1c00f
1c00db9a:	85ee                	mv	a1,s11
1c00db9c:	2c870513          	addi	a0,a4,712 # 1c00f2c8 <__hyper_pad+0xa0>
1c00dba0:	84ee                	mv	s1,s11
1c00dba2:	ad1ff0ef          	jal	ra,1c00d672 <strchr>
1c00dba6:	10050e63          	beqz	a0,1c00dcc2 <_prf+0x204>
				if (i == 'l' && c == 'l') {
1c00dbaa:	06c00693          	li	a3,108
				c = *format++;
1c00dbae:	001a0c13          	addi	s8,s4,1
1c00dbb2:	000a4d83          	lbu	s11,0(s4)
				if (i == 'l' && c == 'l') {
1c00dbb6:	0ed49963          	bne	s1,a3,1c00dca8 <_prf+0x1ea>
1c00dbba:	009d9863          	bne	s11,s1,1c00dbca <_prf+0x10c>
					c = *format++;
1c00dbbe:	001a4d83          	lbu	s11,1(s4)
1c00dbc2:	002a0c13          	addi	s8,s4,2
					i = 'L';
1c00dbc6:	04c00493          	li	s1,76
			switch (c) {
1c00dbca:	06700693          	li	a3,103
1c00dbce:	17b6e263          	bltu	a3,s11,1c00dd32 <_prf+0x274>
1c00dbd2:	06500693          	li	a3,101
1c00dbd6:	32ddfc63          	bleu	a3,s11,1c00df0e <_prf+0x450>
1c00dbda:	04700693          	li	a3,71
1c00dbde:	0fb6e563          	bltu	a3,s11,1c00dcc8 <_prf+0x20a>
1c00dbe2:	04500713          	li	a4,69
1c00dbe6:	32edf463          	bleu	a4,s11,1c00df0e <_prf+0x450>
1c00dbea:	f00d8ae3          	beqz	s11,1c00dafe <_prf+0x40>
1c00dbee:	02500713          	li	a4,37
1c00dbf2:	02ed8de3          	beq	s11,a4,1c00e42c <_prf+0x96e>
				PUTC('%');
1c00dbf6:	85de                	mv	a1,s7
1c00dbf8:	02500513          	li	a0,37
1c00dbfc:	9b02                	jalr	s6
1c00dbfe:	eff52fe3          	p.beqimm	a0,-1,1c00dafc <_prf+0x3e>
				PUTC(c);
1c00dc02:	85de                	mv	a1,s7
1c00dc04:	856e                	mv	a0,s11
1c00dc06:	9b02                	jalr	s6
1c00dc08:	eff52ae3          	p.beqimm	a0,-1,1c00dafc <_prf+0x3e>
				count += 2;
1c00dc0c:	0989                	addi	s3,s3,2
1c00dc0e:	02b0006f          	j	1c00e438 <_prf+0x97a>
				switch (c) {
1c00dc12:	039d8163          	beq	s11,s9,1c00dc34 <_prf+0x176>
1c00dc16:	009d8c63          	beq	s11,s1,1c00dc2e <_prf+0x170>
1c00dc1a:	f1ad9ae3          	bne	s11,s10,1c00db2e <_prf+0x70>
					fplus = true;
1c00dc1e:	4705                	li	a4,1
1c00dc20:	c63a                	sw	a4,12(sp)
					break;
1c00dc22:	b731                	j	1c00db2e <_prf+0x70>
					fspace = true;
1c00dc24:	4785                	li	a5,1
1c00dc26:	c83e                	sw	a5,16(sp)
					break;
1c00dc28:	b719                	j	1c00db2e <_prf+0x70>
					falt = true;
1c00dc2a:	4a85                	li	s5,1
					break;
1c00dc2c:	b709                	j	1c00db2e <_prf+0x70>
					fzero = true;
1c00dc2e:	4705                	li	a4,1
1c00dc30:	ce3a                	sw	a4,28(sp)
					break;
1c00dc32:	bdf5                	j	1c00db2e <_prf+0x70>
					fminus = true;
1c00dc34:	4785                	li	a5,1
1c00dc36:	cc3e                	sw	a5,24(sp)
1c00dc38:	bddd                	j	1c00db2e <_prf+0x70>
			fminus = fplus = fspace = falt = fzero = false;
1c00dc3a:	ce02                	sw	zero,28(sp)
1c00dc3c:	c802                	sw	zero,16(sp)
1c00dc3e:	c602                	sw	zero,12(sp)
1c00dc40:	cc02                	sw	zero,24(sp)
1c00dc42:	4a81                	li	s5,0
				switch (c) {
1c00dc44:	02300413          	li	s0,35
1c00dc48:	02d00c93          	li	s9,45
1c00dc4c:	03000493          	li	s1,48
1c00dc50:	02b00d13          	li	s10,43
1c00dc54:	02000613          	li	a2,32
1c00dc58:	bde1                	j	1c00db30 <_prf+0x72>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
1c00dc5a:	fd0d8713          	addi	a4,s11,-48
			} else if (!isdigit(c)) {
1c00dc5e:	46a5                	li	a3,9
				width = 0;
1c00dc60:	4c81                	li	s9,0
			} else if (!isdigit(c)) {
1c00dc62:	f0e6e8e3          	bltu	a3,a4,1c00db72 <_prf+0xb4>
	while (isdigit(*p)) {
1c00dc66:	4725                	li	a4,9
		i = 10 * i + *p++ - '0';
1c00dc68:	4629                	li	a2,10
	while (isdigit(*p)) {
1c00dc6a:	8a62                	mv	s4,s8
1c00dc6c:	001a4d8b          	p.lbu	s11,1(s4!)
1c00dc70:	fd0d8693          	addi	a3,s11,-48
1c00dc74:	eed76fe3          	bltu	a4,a3,1c00db72 <_prf+0xb4>
		i = 10 * i + *p++ - '0';
1c00dc78:	87ee                	mv	a5,s11
1c00dc7a:	42cc87b3          	p.mac	a5,s9,a2
1c00dc7e:	8c52                	mv	s8,s4
1c00dc80:	fd078c93          	addi	s9,a5,-48
1c00dc84:	b7dd                	j	1c00dc6a <_prf+0x1ac>
1c00dc86:	42b407b3          	p.mac	a5,s0,a1
1c00dc8a:	8a3a                	mv	s4,a4
1c00dc8c:	fd078413          	addi	s0,a5,-48
	while (isdigit(*p)) {
1c00dc90:	8752                	mv	a4,s4
1c00dc92:	0017478b          	p.lbu	a5,1(a4!)
1c00dc96:	fd078613          	addi	a2,a5,-48
1c00dc9a:	fec6f6e3          	bleu	a2,a3,1c00dc86 <_prf+0x1c8>
1c00dc9e:	bdcd                	j	1c00db90 <_prf+0xd2>
	int i = 0;
1c00dca0:	4401                	li	s0,0
	while (isdigit(*p)) {
1c00dca2:	46a5                	li	a3,9
		i = 10 * i + *p++ - '0';
1c00dca4:	45a9                	li	a1,10
1c00dca6:	b7ed                	j	1c00dc90 <_prf+0x1d2>
				} else if (i == 'h' && c == 'h') {
1c00dca8:	06800693          	li	a3,104
1c00dcac:	f0d49fe3          	bne	s1,a3,1c00dbca <_prf+0x10c>
1c00dcb0:	f09d9de3          	bne	s11,s1,1c00dbca <_prf+0x10c>
					c = *format++;
1c00dcb4:	002a0c13          	addi	s8,s4,2
1c00dcb8:	001a4d83          	lbu	s11,1(s4)
					i = 'H';
1c00dcbc:	04800493          	li	s1,72
1c00dcc0:	b729                	j	1c00dbca <_prf+0x10c>
1c00dcc2:	8c52                	mv	s8,s4
			i = 0;
1c00dcc4:	4481                	li	s1,0
1c00dcc6:	b711                	j	1c00dbca <_prf+0x10c>
			switch (c) {
1c00dcc8:	06300693          	li	a3,99
1c00dccc:	12dd8a63          	beq	s11,a3,1c00de00 <_prf+0x342>
1c00dcd0:	09b6e163          	bltu	a3,s11,1c00dd52 <_prf+0x294>
1c00dcd4:	05800693          	li	a3,88
1c00dcd8:	f0dd9fe3          	bne	s11,a3,1c00dbf6 <_prf+0x138>
				switch (i) {
1c00dcdc:	06c00693          	li	a3,108
1c00dce0:	6cd48363          	beq	s1,a3,1c00e3a6 <_prf+0x8e8>
1c00dce4:	07a00693          	li	a3,122
1c00dce8:	6ad48f63          	beq	s1,a3,1c00e3a6 <_prf+0x8e8>
1c00dcec:	04c00693          	li	a3,76
1c00dcf0:	6ad49b63          	bne	s1,a3,1c00e3a6 <_prf+0x8e8>
					val = va_arg(vargs, unsigned long long);
1c00dcf4:	091d                	addi	s2,s2,7
1c00dcf6:	c4093933          	p.bclr	s2,s2,2,0
1c00dcfa:	00092583          	lw	a1,0(s2)
1c00dcfe:	00492603          	lw	a2,4(s2)
1c00dd02:	00890a13          	addi	s4,s2,8
				if (c == 'o') {
1c00dd06:	06f00713          	li	a4,111
1c00dd0a:	00c4                	addi	s1,sp,68
1c00dd0c:	6aed9d63          	bne	s11,a4,1c00e3c6 <_prf+0x908>
	if (alt_form) {
1c00dd10:	6a0a8163          	beqz	s5,1c00e3b2 <_prf+0x8f4>
		*buf++ = '0';
1c00dd14:	03000793          	li	a5,48
1c00dd18:	04f10223          	sb	a5,68(sp)
		if (!value) {
1c00dd1c:	00c5e7b3          	or	a5,a1,a2
		*buf++ = '0';
1c00dd20:	04510513          	addi	a0,sp,69
		if (!value) {
1c00dd24:	68079863          	bnez	a5,1c00e3b4 <_prf+0x8f6>
			*buf++ = 0;
1c00dd28:	040102a3          	sb	zero,69(sp)
			prefix = 0;
1c00dd2c:	4901                	li	s2,0
			return 1;
1c00dd2e:	4d85                	li	s11,1
1c00dd30:	a069                	j	1c00ddba <_prf+0x2fc>
			switch (c) {
1c00dd32:	07000693          	li	a3,112
1c00dd36:	62dd8f63          	beq	s11,a3,1c00e374 <_prf+0x8b6>
1c00dd3a:	09b6e663          	bltu	a3,s11,1c00ddc6 <_prf+0x308>
1c00dd3e:	06e00693          	li	a3,110
1c00dd42:	5edd8463          	beq	s11,a3,1c00e32a <_prf+0x86c>
1c00dd46:	f9b6ebe3          	bltu	a3,s11,1c00dcdc <_prf+0x21e>
1c00dd4a:	06900693          	li	a3,105
1c00dd4e:	eadd94e3          	bne	s11,a3,1c00dbf6 <_prf+0x138>
				switch (i) {
1c00dd52:	06c00793          	li	a5,108
1c00dd56:	18f48563          	beq	s1,a5,1c00dee0 <_prf+0x422>
1c00dd5a:	07a00793          	li	a5,122
1c00dd5e:	18f48163          	beq	s1,a5,1c00dee0 <_prf+0x422>
1c00dd62:	04c00793          	li	a5,76
1c00dd66:	16f49d63          	bne	s1,a5,1c00dee0 <_prf+0x422>
					val = va_arg(vargs, long long);
1c00dd6a:	091d                	addi	s2,s2,7
1c00dd6c:	c4093933          	p.bclr	s2,s2,2,0
1c00dd70:	00092583          	lw	a1,0(s2)
1c00dd74:	00492a83          	lw	s5,4(s2)
1c00dd78:	00890a13          	addi	s4,s2,8
1c00dd7c:	04410d93          	addi	s11,sp,68
	if (value < 0) {
1c00dd80:	160ad763          	bgez	s5,1c00deee <_prf+0x430>
		*buf++ = '-';
1c00dd84:	02d00793          	li	a5,45
		value = -value;
1c00dd88:	40b005b3          	neg	a1,a1
		*buf++ = '-';
1c00dd8c:	04f10223          	sb	a5,68(sp)
		value = -value;
1c00dd90:	41500633          	neg	a2,s5
1c00dd94:	00b037b3          	snez	a5,a1
1c00dd98:	8e1d                	sub	a2,a2,a5
		*buf++ = ' ';
1c00dd9a:	04510913          	addi	s2,sp,69
	return _to_x(buf, value, 10);
1c00dd9e:	854a                	mv	a0,s2
1c00dda0:	46a9                	li	a3,10
1c00dda2:	bf3ff0ef          	jal	ra,1c00d994 <_to_x>
				if (fplus || fspace || val < 0) {
1c00dda6:	47b2                	lw	a5,12(sp)
	return (buf + _to_udec(buf, value)) - start;
1c00dda8:	954a                	add	a0,a0,s2
1c00ddaa:	41b50db3          	sub	s11,a0,s11
					prefix = 1;
1c00ddae:	4905                	li	s2,1
				if (fplus || fspace || val < 0) {
1c00ddb0:	e789                	bnez	a5,1c00ddba <_prf+0x2fc>
1c00ddb2:	4742                	lw	a4,16(sp)
1c00ddb4:	e319                	bnez	a4,1c00ddba <_prf+0x2fc>
1c00ddb6:	01fad913          	srli	s2,s5,0x1f
			if (precision >= 0) {
1c00ddba:	04045c63          	bgez	s0,1c00de12 <_prf+0x354>
			zero.predot = zero.postdot = zero.trail = 0;
1c00ddbe:	4401                	li	s0,0
1c00ddc0:	4a81                	li	s5,0
1c00ddc2:	4681                	li	a3,0
1c00ddc4:	a401                	j	1c00dfc4 <_prf+0x506>
			switch (c) {
1c00ddc6:	07500693          	li	a3,117
1c00ddca:	f0dd89e3          	beq	s11,a3,1c00dcdc <_prf+0x21e>
1c00ddce:	07800693          	li	a3,120
1c00ddd2:	f0dd85e3          	beq	s11,a3,1c00dcdc <_prf+0x21e>
1c00ddd6:	07300713          	li	a4,115
1c00ddda:	e0ed9ee3          	bne	s11,a4,1c00dbf6 <_prf+0x138>
				cptr = va_arg(vargs, char *);
1c00ddde:	00490a13          	addi	s4,s2,4
1c00dde2:	00092783          	lw	a5,0(s2)
				if (precision < 0) {
1c00dde6:	00045663          	bgez	s0,1c00ddf2 <_prf+0x334>
					precision = INT_MAX;
1c00ddea:	80000737          	lui	a4,0x80000
1c00ddee:	fff74413          	not	s0,a4
1c00ddf2:	86be                	mv	a3,a5
				for (clen = 0; clen < precision; clen++) {
1c00ddf4:	4d81                	li	s11,0
1c00ddf6:	5bb41263          	bne	s0,s11,1c00e39a <_prf+0x8dc>
1c00ddfa:	4901                	li	s2,0
1c00ddfc:	4401                	li	s0,0
1c00ddfe:	a819                	j	1c00de14 <_prf+0x356>
				buf[0] = va_arg(vargs, int);
1c00de00:	00092783          	lw	a5,0(s2)
1c00de04:	00490a13          	addi	s4,s2,4
				clen = 1;
1c00de08:	4d85                	li	s11,1
				buf[0] = va_arg(vargs, int);
1c00de0a:	04f10223          	sb	a5,68(sp)
				break;
1c00de0e:	4901                	li	s2,0
1c00de10:	4401                	li	s0,0
1c00de12:	00dc                	addi	a5,sp,68
				zero_head = precision - clen + prefix;
1c00de14:	41b40d33          	sub	s10,s0,s11
1c00de18:	9d4a                	add	s10,s10,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00de1a:	4401                	li	s0,0
1c00de1c:	4a81                	li	s5,0
1c00de1e:	4681                	li	a3,0
1c00de20:	040d6d33          	p.max	s10,s10,zero
			if (!fminus && width > 0) {
1c00de24:	4762                	lw	a4,24(sp)
			width -= clen + zero_head;
1c00de26:	01bd0633          	add	a2,s10,s11
1c00de2a:	40cc8cb3          	sub	s9,s9,a2
			if (!fminus && width > 0) {
1c00de2e:	e701                	bnez	a4,1c00de36 <_prf+0x378>
1c00de30:	84e6                	mv	s1,s9
1c00de32:	63904263          	bgtz	s9,1c00e456 <_prf+0x998>
1c00de36:	012784b3          	add	s1,a5,s2
			while (prefix-- > 0) {
1c00de3a:	62979463          	bne	a5,s1,1c00e462 <_prf+0x9a4>
1c00de3e:	84ea                	mv	s1,s10
			while (zero_head-- > 0) {
1c00de40:	14fd                	addi	s1,s1,-1
1c00de42:	63f4bc63          	p.bneimm	s1,-1,1c00e47a <_prf+0x9bc>
			clen -= prefix;
1c00de46:	412d84b3          	sub	s1,s11,s2
1c00de4a:	8726                	mv	a4,s1
			if (zero.predot) {
1c00de4c:	c295                	beqz	a3,1c00de70 <_prf+0x3b2>
				c = *cptr;
1c00de4e:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c)) {
1c00de52:	8dbe                	mv	s11,a5
1c00de54:	00978833          	add	a6,a5,s1
1c00de58:	4625                	li	a2,9
1c00de5a:	fd050593          	addi	a1,a0,-48
1c00de5e:	41b80733          	sub	a4,a6,s11
1c00de62:	62b67863          	bleu	a1,a2,1c00e492 <_prf+0x9d4>
1c00de66:	8636                	mv	a2,a3
				while (zero.predot-- > 0) {
1c00de68:	64061363          	bnez	a2,1c00e4ae <_prf+0x9f0>
				clen -= zero.predot;
1c00de6c:	8f15                	sub	a4,a4,a3
1c00de6e:	87ee                	mv	a5,s11
			if (zero.postdot) {
1c00de70:	020a8e63          	beqz	s5,1c00deac <_prf+0x3ee>
1c00de74:	8dbe                	mv	s11,a5
1c00de76:	00e78833          	add	a6,a5,a4
				} while (c != '.');
1c00de7a:	02e00613          	li	a2,46
					c = *cptr++;
1c00de7e:	001dc68b          	p.lbu	a3,1(s11!)
					PUTC(c);
1c00de82:	85de                	mv	a1,s7
1c00de84:	c232                	sw	a2,4(sp)
1c00de86:	8536                	mv	a0,a3
1c00de88:	c036                	sw	a3,0(sp)
1c00de8a:	c442                	sw	a6,8(sp)
1c00de8c:	9b02                	jalr	s6
1c00de8e:	4612                	lw	a2,4(sp)
1c00de90:	4682                	lw	a3,0(sp)
1c00de92:	4822                	lw	a6,8(sp)
1c00de94:	c7f524e3          	p.beqimm	a0,-1,1c00dafc <_prf+0x3e>
1c00de98:	41b80733          	sub	a4,a6,s11
				} while (c != '.');
1c00de9c:	fec691e3          	bne	a3,a2,1c00de7e <_prf+0x3c0>
1c00dea0:	86d6                	mv	a3,s5
				while (zero.postdot-- > 0) {
1c00dea2:	62d04563          	bgtz	a3,1c00e4cc <_prf+0xa0e>
				clen -= zero.postdot;
1c00dea6:	41570733          	sub	a4,a4,s5
					c = *cptr++;
1c00deaa:	87ee                	mv	a5,s11
			if (zero.trail) {
1c00deac:	c415                	beqz	s0,1c00ded8 <_prf+0x41a>
				c = *cptr;
1c00deae:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c) || c == '.') {
1c00deb2:	8dbe                	mv	s11,a5
1c00deb4:	973e                	add	a4,a4,a5
1c00deb6:	4625                	li	a2,9
1c00deb8:	02e00693          	li	a3,46
1c00debc:	fd050593          	addi	a1,a0,-48
1c00dec0:	41b70ab3          	sub	s5,a4,s11
1c00dec4:	62b67163          	bleu	a1,a2,1c00e4e6 <_prf+0xa28>
1c00dec8:	60d50f63          	beq	a0,a3,1c00e4e6 <_prf+0xa28>
1c00decc:	8722                	mv	a4,s0
				while (zero.trail-- > 0) {
1c00dece:	62e04a63          	bgtz	a4,1c00e502 <_prf+0xa44>
				clen -= zero.trail;
1c00ded2:	408a8733          	sub	a4,s5,s0
1c00ded6:	87ee                	mv	a5,s11
1c00ded8:	843e                	mv	s0,a5
1c00deda:	00e78ab3          	add	s5,a5,a4
1c00dede:	a599                	j	1c00e524 <_prf+0xa66>
					val = va_arg(vargs, int);
1c00dee0:	00092583          	lw	a1,0(s2)
1c00dee4:	00490a13          	addi	s4,s2,4
1c00dee8:	41f5da93          	srai	s5,a1,0x1f
					break;
1c00deec:	bd41                	j	1c00dd7c <_prf+0x2be>
	} else if (fplus) {
1c00deee:	47b2                	lw	a5,12(sp)
1c00def0:	c799                	beqz	a5,1c00defe <_prf+0x440>
		*buf++ = '+';
1c00def2:	02b00793          	li	a5,43
		*buf++ = ' ';
1c00def6:	04f10223          	sb	a5,68(sp)
1c00defa:	8656                	mv	a2,s5
1c00defc:	bd79                	j	1c00dd9a <_prf+0x2dc>
	} else if (fspace) {
1c00defe:	4742                	lw	a4,16(sp)
1c00df00:	c701                	beqz	a4,1c00df08 <_prf+0x44a>
		*buf++ = ' ';
1c00df02:	02000793          	li	a5,32
1c00df06:	bfc5                	j	1c00def6 <_prf+0x438>
	} else if (fspace) {
1c00df08:	8656                	mv	a2,s5
1c00df0a:	896e                	mv	s2,s11
1c00df0c:	bd49                	j	1c00dd9e <_prf+0x2e0>
				u.d = va_arg(vargs, double);
1c00df0e:	091d                	addi	s2,s2,7
1c00df10:	c4093933          	p.bclr	s2,s2,2,0
				double_val = u.i;
1c00df14:	00092583          	lw	a1,0(s2)
1c00df18:	00492683          	lw	a3,4(s2)
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00df1c:	800007b7          	lui	a5,0x80000
1c00df20:	0155d613          	srli	a2,a1,0x15
1c00df24:	00b69713          	slli	a4,a3,0xb
1c00df28:	8f51                	or	a4,a4,a2
1c00df2a:	fff7c793          	not	a5,a5
1c00df2e:	05ae                	slli	a1,a1,0xb
1c00df30:	8f7d                	and	a4,a4,a5
				u.d = va_arg(vargs, double);
1c00df32:	00890a13          	addi	s4,s2,8
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00df36:	d82e                	sw	a1,48(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00df38:	0146d913          	srli	s2,a3,0x14
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00df3c:	da3a                	sw	a4,52(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00df3e:	e8b93933          	p.bclr	s2,s2,20,11
	if (sign) {
1c00df42:	0806d863          	bgez	a3,1c00dfd2 <_prf+0x514>
		*buf++ = '-';
1c00df46:	02d00693          	li	a3,45
		*buf++ = ' ';
1c00df4a:	04d10223          	sb	a3,68(sp)
1c00df4e:	04510493          	addi	s1,sp,69
	if (exp == 0x7ff) {
1c00df52:	7ff00693          	li	a3,2047
1c00df56:	0cd91363          	bne	s2,a3,1c00e01c <_prf+0x55e>
		if (!fract) {
1c00df5a:	8f4d                	or	a4,a4,a1
1c00df5c:	fbfd8793          	addi	a5,s11,-65
1c00df60:	00348513          	addi	a0,s1,3
1c00df64:	eb49                	bnez	a4,1c00dff6 <_prf+0x538>
			if (isupper(c)) {
1c00df66:	4765                	li	a4,25
1c00df68:	06f76f63          	bltu	a4,a5,1c00dfe6 <_prf+0x528>
				*buf++ = 'I';
1c00df6c:	6795                	lui	a5,0x5
1c00df6e:	e4978793          	addi	a5,a5,-439 # 4e49 <__rt_stack_size+0x4649>
1c00df72:	00f49023          	sh	a5,0(s1)
				*buf++ = 'N';
1c00df76:	04600793          	li	a5,70
		return buf - start;
1c00df7a:	04410913          	addi	s2,sp,68
				*buf++ = 'a';
1c00df7e:	00f48123          	sb	a5,2(s1)
		*buf = 0;
1c00df82:	000481a3          	sb	zero,3(s1)
		return buf - start;
1c00df86:	41250533          	sub	a0,a0,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00df8a:	4401                	li	s0,0
1c00df8c:	4a81                	li	s5,0
1c00df8e:	4681                	li	a3,0
				if (fplus || fspace || (buf[0] == '-')) {
1c00df90:	4732                	lw	a4,12(sp)
					prefix = 1;
1c00df92:	4905                	li	s2,1
				if (fplus || fspace || (buf[0] == '-')) {
1c00df94:	eb09                	bnez	a4,1c00dfa6 <_prf+0x4e8>
1c00df96:	47c2                	lw	a5,16(sp)
1c00df98:	e799                	bnez	a5,1c00dfa6 <_prf+0x4e8>
1c00df9a:	04414903          	lbu	s2,68(sp)
1c00df9e:	fd390913          	addi	s2,s2,-45
1c00dfa2:	00193913          	seqz	s2,s2
				if (!isdigit(buf[prefix])) {
1c00dfa6:	1098                	addi	a4,sp,96
1c00dfa8:	012707b3          	add	a5,a4,s2
1c00dfac:	fe47c783          	lbu	a5,-28(a5)
				clen += zero.predot + zero.postdot + zero.trail;
1c00dfb0:	015684b3          	add	s1,a3,s5
1c00dfb4:	94a2                	add	s1,s1,s0
1c00dfb6:	fd078793          	addi	a5,a5,-48
				if (!isdigit(buf[prefix])) {
1c00dfba:	4625                	li	a2,9
				clen += zero.predot + zero.postdot + zero.trail;
1c00dfbc:	00a48db3          	add	s11,s1,a0
				if (!isdigit(buf[prefix])) {
1c00dfc0:	46f66e63          	bltu	a2,a5,1c00e43c <_prf+0x97e>
			} else if (fzero) {
1c00dfc4:	47f2                	lw	a5,28(sp)
1c00dfc6:	46078b63          	beqz	a5,1c00e43c <_prf+0x97e>
				zero_head = width - clen;
1c00dfca:	41bc8d33          	sub	s10,s9,s11
1c00dfce:	00dc                	addi	a5,sp,68
1c00dfd0:	bd81                	j	1c00de20 <_prf+0x362>
	} else if (fplus) {
1c00dfd2:	47b2                	lw	a5,12(sp)
		*buf++ = '+';
1c00dfd4:	02b00693          	li	a3,43
	} else if (fplus) {
1c00dfd8:	fbad                	bnez	a5,1c00df4a <_prf+0x48c>
	} else if (fspace) {
1c00dfda:	47c2                	lw	a5,16(sp)
1c00dfdc:	00c4                	addi	s1,sp,68
1c00dfde:	dbb5                	beqz	a5,1c00df52 <_prf+0x494>
		*buf++ = ' ';
1c00dfe0:	02000693          	li	a3,32
1c00dfe4:	b79d                	j	1c00df4a <_prf+0x48c>
				*buf++ = 'i';
1c00dfe6:	679d                	lui	a5,0x7
1c00dfe8:	e6978793          	addi	a5,a5,-407 # 6e69 <__rt_stack_size+0x6669>
1c00dfec:	00f49023          	sh	a5,0(s1)
				*buf++ = 'n';
1c00dff0:	06600793          	li	a5,102
1c00dff4:	b759                	j	1c00df7a <_prf+0x4bc>
			if (isupper(c)) {
1c00dff6:	4765                	li	a4,25
1c00dff8:	00f76a63          	bltu	a4,a5,1c00e00c <_prf+0x54e>
				*buf++ = 'N';
1c00dffc:	6791                	lui	a5,0x4
1c00dffe:	14e78793          	addi	a5,a5,334 # 414e <__rt_stack_size+0x394e>
1c00e002:	00f49023          	sh	a5,0(s1)
				*buf++ = 'A';
1c00e006:	04e00793          	li	a5,78
1c00e00a:	bf85                	j	1c00df7a <_prf+0x4bc>
				*buf++ = 'n';
1c00e00c:	6799                	lui	a5,0x6
1c00e00e:	16e78793          	addi	a5,a5,366 # 616e <__rt_stack_size+0x596e>
1c00e012:	00f49023          	sh	a5,0(s1)
				*buf++ = 'a';
1c00e016:	06e00793          	li	a5,110
1c00e01a:	b785                	j	1c00df7a <_prf+0x4bc>
	if (c == 'F') {
1c00e01c:	04600693          	li	a3,70
1c00e020:	00dd9463          	bne	s11,a3,1c00e028 <_prf+0x56a>
		c = 'f';
1c00e024:	06600d93          	li	s11,102
	if ((exp | fract) != 0) {
1c00e028:	41f95613          	srai	a2,s2,0x1f
1c00e02c:	00b966b3          	or	a3,s2,a1
1c00e030:	8e59                	or	a2,a2,a4
1c00e032:	8ed1                	or	a3,a3,a2
1c00e034:	1c068263          	beqz	a3,1c00e1f8 <_prf+0x73a>
		if (exp == 0) {
1c00e038:	10090d63          	beqz	s2,1c00e152 <_prf+0x694>
		fract |= HIGHBIT64;
1c00e03c:	5752                	lw	a4,52(sp)
1c00e03e:	800007b7          	lui	a5,0x80000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
1c00e042:	c0290913          	addi	s2,s2,-1022
		fract |= HIGHBIT64;
1c00e046:	8f5d                	or	a4,a4,a5
1c00e048:	da3a                	sw	a4,52(sp)
1c00e04a:	4d01                	li	s10,0
	while (exp <= -3) {
1c00e04c:	5779                	li	a4,-2
1c00e04e:	10e94f63          	blt	s2,a4,1c00e16c <_prf+0x6ae>
	while (exp > 0) {
1c00e052:	17204663          	bgtz	s2,1c00e1be <_prf+0x700>
		_rlrshift(&fract);
1c00e056:	1808                	addi	a0,sp,48
		exp++;
1c00e058:	0905                	addi	s2,s2,1
		_rlrshift(&fract);
1c00e05a:	9cdff0ef          	jal	ra,1c00da26 <_rlrshift>
	while (exp < (0 + 4)) {
1c00e05e:	fe493ce3          	p.bneimm	s2,4,1c00e056 <_prf+0x598>
	if (precision < 0) {
1c00e062:	00045363          	bgez	s0,1c00e068 <_prf+0x5aa>
		precision = 6;		/* Default precision if none given */
1c00e066:	4419                	li	s0,6
	if ((c == 'g') || (c == 'G')) {
1c00e068:	0dfdf713          	andi	a4,s11,223
1c00e06c:	04700693          	li	a3,71
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00e070:	ca02                	sw	zero,20(sp)
	if ((c == 'g') || (c == 'G')) {
1c00e072:	02d71563          	bne	a4,a3,1c00e09c <_prf+0x5de>
		if (decexp < (-4 + 1) || decexp > precision) {
1c00e076:	5775                	li	a4,-3
1c00e078:	00ed4463          	blt	s10,a4,1c00e080 <_prf+0x5c2>
1c00e07c:	19a45163          	ble	s10,s0,1c00e1fe <_prf+0x740>
			c += 'e' - 'g';
1c00e080:	ffed8793          	addi	a5,s11,-2
1c00e084:	0ff7fd93          	andi	s11,a5,255
			if (precision > 0) {
1c00e088:	4c040e63          	beqz	s0,1c00e564 <_prf+0xaa6>
				precision--;
1c00e08c:	147d                	addi	s0,s0,-1
		if (!falt && (precision > 0)) {
1c00e08e:	4c0a9b63          	bnez	s5,1c00e564 <_prf+0xaa6>
1c00e092:	00802933          	sgtz	s2,s0
1c00e096:	0ff97913          	andi	s2,s2,255
1c00e09a:	ca4a                	sw	s2,20(sp)
	if (c == 'f') {
1c00e09c:	06600713          	li	a4,102
1c00e0a0:	4ced9363          	bne	s11,a4,1c00e566 <_prf+0xaa8>
		exp = precision + decexp;
1c00e0a4:	008d0733          	add	a4,s10,s0
		if (exp < 0) {
1c00e0a8:	06600d93          	li	s11,102
1c00e0ac:	4a075f63          	bgez	a4,1c00e56a <_prf+0xaac>
	digit_count = 16;
1c00e0b0:	4741                	li	a4,16
1c00e0b2:	d63a                	sw	a4,44(sp)
			exp = 0;
1c00e0b4:	4901                	li	s2,0
	ltemp = 0x0800000000000000;
1c00e0b6:	4601                	li	a2,0
1c00e0b8:	080006b7          	lui	a3,0x8000
1c00e0bc:	dc32                	sw	a2,56(sp)
1c00e0be:	de36                	sw	a3,60(sp)
	while (exp--) {
1c00e0c0:	197d                	addi	s2,s2,-1
1c00e0c2:	15f93563          	p.bneimm	s2,-1,1c00e20c <_prf+0x74e>
	fract += ltemp;
1c00e0c6:	5742                	lw	a4,48(sp)
1c00e0c8:	56e2                	lw	a3,56(sp)
1c00e0ca:	5652                	lw	a2,52(sp)
1c00e0cc:	55f2                	lw	a1,60(sp)
1c00e0ce:	96ba                	add	a3,a3,a4
1c00e0d0:	00e6b733          	sltu	a4,a3,a4
1c00e0d4:	962e                	add	a2,a2,a1
1c00e0d6:	9732                	add	a4,a4,a2
1c00e0d8:	da3a                	sw	a4,52(sp)
1c00e0da:	d836                	sw	a3,48(sp)
	if ((fract >> 32) & 0xF0000000) {
1c00e0dc:	f6073733          	p.bclr	a4,a4,27,0
1c00e0e0:	cb01                	beqz	a4,1c00e0f0 <_prf+0x632>
		_ldiv5(&fract);
1c00e0e2:	1808                	addi	a0,sp,48
1c00e0e4:	963ff0ef          	jal	ra,1c00da46 <_ldiv5>
		_rlrshift(&fract);
1c00e0e8:	1808                	addi	a0,sp,48
1c00e0ea:	93dff0ef          	jal	ra,1c00da26 <_rlrshift>
		decexp++;
1c00e0ee:	0d05                	addi	s10,s10,1
	if (c == 'f') {
1c00e0f0:	06600713          	li	a4,102
1c00e0f4:	16ed9163          	bne	s11,a4,1c00e256 <_prf+0x798>
		if (decexp > 0) {
1c00e0f8:	8926                	mv	s2,s1
1c00e0fa:	13a04963          	bgtz	s10,1c00e22c <_prf+0x76e>
			*buf++ = '0';
1c00e0fe:	03000713          	li	a4,48
1c00e102:	00e48023          	sb	a4,0(s1)
1c00e106:	00148913          	addi	s2,s1,1
			zero.predot = zero.postdot = zero.trail = 0;
1c00e10a:	4681                	li	a3,0
		if (falt || (precision > 0)) {
1c00e10c:	120a8763          	beqz	s5,1c00e23a <_prf+0x77c>
			*buf++ = '.';
1c00e110:	02e00593          	li	a1,46
1c00e114:	00b90023          	sb	a1,0(s2)
1c00e118:	00190713          	addi	a4,s2,1
		if (decexp < 0 && precision > 0) {
1c00e11c:	440d0263          	beqz	s10,1c00e560 <_prf+0xaa2>
1c00e120:	12805863          	blez	s0,1c00e250 <_prf+0x792>
			zp->postdot = -decexp;
1c00e124:	41a00ab3          	neg	s5,s10
1c00e128:	048acab3          	p.min	s5,s5,s0
			precision -= zp->postdot;
1c00e12c:	41540433          	sub	s0,s0,s5
			zero.predot = zero.postdot = zero.trail = 0;
1c00e130:	893a                	mv	s2,a4
		while (precision > 0 && digit_count > 0) {
1c00e132:	10805763          	blez	s0,1c00e240 <_prf+0x782>
1c00e136:	5732                	lw	a4,44(sp)
1c00e138:	10e05463          	blez	a4,1c00e240 <_prf+0x782>
			*buf++ = _get_digit(&fract, &digit_count);
1c00e13c:	106c                	addi	a1,sp,44
1c00e13e:	1808                	addi	a0,sp,48
1c00e140:	c036                	sw	a3,0(sp)
1c00e142:	949ff0ef          	jal	ra,1c00da8a <_get_digit>
1c00e146:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00e14a:	147d                	addi	s0,s0,-1
1c00e14c:	4682                	lw	a3,0(sp)
1c00e14e:	b7d5                	j	1c00e132 <_prf+0x674>
				exp--;
1c00e150:	197d                	addi	s2,s2,-1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
1c00e152:	01f5d693          	srli	a3,a1,0x1f
1c00e156:	0706                	slli	a4,a4,0x1
1c00e158:	8f55                	or	a4,a4,a3
1c00e15a:	0586                	slli	a1,a1,0x1
1c00e15c:	fe075ae3          	bgez	a4,1c00e150 <_prf+0x692>
1c00e160:	d82e                	sw	a1,48(sp)
1c00e162:	da3a                	sw	a4,52(sp)
1c00e164:	bde1                	j	1c00e03c <_prf+0x57e>
			_rlrshift(&fract);
1c00e166:	1808                	addi	a0,sp,48
1c00e168:	8bfff0ef          	jal	ra,1c00da26 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
1c00e16c:	55d2                	lw	a1,52(sp)
1c00e16e:	33333737          	lui	a4,0x33333
1c00e172:	33270713          	addi	a4,a4,818 # 33333332 <__l2_end+0x17323986>
1c00e176:	5642                	lw	a2,48(sp)
1c00e178:	0905                	addi	s2,s2,1
1c00e17a:	feb766e3          	bltu	a4,a1,1c00e166 <_prf+0x6a8>
		fract *= 5U;
1c00e17e:	4695                	li	a3,5
1c00e180:	02c6b733          	mulhu	a4,a3,a2
		decexp--;
1c00e184:	1d7d                	addi	s10,s10,-1
		fract *= 5U;
1c00e186:	02c68633          	mul	a2,a3,a2
1c00e18a:	42b68733          	p.mac	a4,a3,a1
1c00e18e:	d832                	sw	a2,48(sp)
		decexp--;
1c00e190:	4681                	li	a3,0
		fract *= 5U;
1c00e192:	da3a                	sw	a4,52(sp)
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00e194:	800007b7          	lui	a5,0x80000
1c00e198:	fff7c793          	not	a5,a5
1c00e19c:	00e7f763          	bleu	a4,a5,1c00e1aa <_prf+0x6ec>
1c00e1a0:	ea0686e3          	beqz	a3,1c00e04c <_prf+0x58e>
1c00e1a4:	d832                	sw	a2,48(sp)
1c00e1a6:	da3a                	sw	a4,52(sp)
1c00e1a8:	b555                	j	1c00e04c <_prf+0x58e>
			fract <<= 1;
1c00e1aa:	01f65593          	srli	a1,a2,0x1f
1c00e1ae:	00171693          	slli	a3,a4,0x1
1c00e1b2:	00d5e733          	or	a4,a1,a3
1c00e1b6:	0606                	slli	a2,a2,0x1
			exp--;
1c00e1b8:	197d                	addi	s2,s2,-1
1c00e1ba:	4685                	li	a3,1
1c00e1bc:	bfe1                	j	1c00e194 <_prf+0x6d6>
		_ldiv5(&fract);
1c00e1be:	1808                	addi	a0,sp,48
1c00e1c0:	887ff0ef          	jal	ra,1c00da46 <_ldiv5>
1c00e1c4:	5642                	lw	a2,48(sp)
1c00e1c6:	5752                	lw	a4,52(sp)
		exp--;
1c00e1c8:	197d                	addi	s2,s2,-1
		decexp++;
1c00e1ca:	0d05                	addi	s10,s10,1
1c00e1cc:	4681                	li	a3,0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00e1ce:	800007b7          	lui	a5,0x80000
1c00e1d2:	fff7c793          	not	a5,a5
1c00e1d6:	00e7f763          	bleu	a4,a5,1c00e1e4 <_prf+0x726>
1c00e1da:	e6068ce3          	beqz	a3,1c00e052 <_prf+0x594>
1c00e1de:	d832                	sw	a2,48(sp)
1c00e1e0:	da3a                	sw	a4,52(sp)
1c00e1e2:	bd85                	j	1c00e052 <_prf+0x594>
			fract <<= 1;
1c00e1e4:	01f65593          	srli	a1,a2,0x1f
1c00e1e8:	00171693          	slli	a3,a4,0x1
1c00e1ec:	00d5e733          	or	a4,a1,a3
1c00e1f0:	0606                	slli	a2,a2,0x1
			exp--;
1c00e1f2:	197d                	addi	s2,s2,-1
1c00e1f4:	4685                	li	a3,1
1c00e1f6:	bfe1                	j	1c00e1ce <_prf+0x710>
	if ((exp | fract) != 0) {
1c00e1f8:	4d01                	li	s10,0
1c00e1fa:	4901                	li	s2,0
1c00e1fc:	bda9                	j	1c00e056 <_prf+0x598>
			precision -= decexp;
1c00e1fe:	41a40433          	sub	s0,s0,s10
		if (!falt && (precision > 0)) {
1c00e202:	ea0a91e3          	bnez	s5,1c00e0a4 <_prf+0x5e6>
			c = 'f';
1c00e206:	06600d93          	li	s11,102
1c00e20a:	b561                	j	1c00e092 <_prf+0x5d4>
		_ldiv5(&ltemp);
1c00e20c:	1828                	addi	a0,sp,56
1c00e20e:	839ff0ef          	jal	ra,1c00da46 <_ldiv5>
		_rlrshift(&ltemp);
1c00e212:	1828                	addi	a0,sp,56
1c00e214:	813ff0ef          	jal	ra,1c00da26 <_rlrshift>
1c00e218:	b565                	j	1c00e0c0 <_prf+0x602>
				*buf++ = _get_digit(&fract, &digit_count);
1c00e21a:	106c                	addi	a1,sp,44
1c00e21c:	1808                	addi	a0,sp,48
1c00e21e:	86dff0ef          	jal	ra,1c00da8a <_get_digit>
1c00e222:	00a900ab          	p.sb	a0,1(s2!)
				decexp--;
1c00e226:	1d7d                	addi	s10,s10,-1
			while (decexp > 0 && digit_count > 0) {
1c00e228:	000d0563          	beqz	s10,1c00e232 <_prf+0x774>
1c00e22c:	5732                	lw	a4,44(sp)
1c00e22e:	fee046e3          	bgtz	a4,1c00e21a <_prf+0x75c>
		if (falt || (precision > 0)) {
1c00e232:	300a9f63          	bnez	s5,1c00e550 <_prf+0xa92>
			zp->predot = decexp;
1c00e236:	86ea                	mv	a3,s10
			decexp = 0;
1c00e238:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00e23a:	4a81                	li	s5,0
		if (falt || (precision > 0)) {
1c00e23c:	ec804ae3          	bgtz	s0,1c00e110 <_prf+0x652>
	if (prune_zero) {
1c00e240:	4752                	lw	a4,20(sp)
1c00e242:	eb31                	bnez	a4,1c00e296 <_prf+0x7d8>
	return buf - start;
1c00e244:	00c8                	addi	a0,sp,68
	*buf = 0;
1c00e246:	00090023          	sb	zero,0(s2)
	return buf - start;
1c00e24a:	40a90533          	sub	a0,s2,a0
1c00e24e:	b389                	j	1c00df90 <_prf+0x4d2>
			*buf++ = '.';
1c00e250:	893a                	mv	s2,a4
			zero.predot = zero.postdot = zero.trail = 0;
1c00e252:	4a81                	li	s5,0
1c00e254:	b7f5                	j	1c00e240 <_prf+0x782>
		*buf = _get_digit(&fract, &digit_count);
1c00e256:	106c                	addi	a1,sp,44
1c00e258:	1808                	addi	a0,sp,48
1c00e25a:	831ff0ef          	jal	ra,1c00da8a <_get_digit>
1c00e25e:	00a48023          	sb	a0,0(s1)
		if (*buf++ != '0') {
1c00e262:	03000713          	li	a4,48
1c00e266:	00e50363          	beq	a0,a4,1c00e26c <_prf+0x7ae>
			decexp--;
1c00e26a:	1d7d                	addi	s10,s10,-1
		if (falt || (precision > 0)) {
1c00e26c:	000a9663          	bnez	s5,1c00e278 <_prf+0x7ba>
		if (*buf++ != '0') {
1c00e270:	00148913          	addi	s2,s1,1
		if (falt || (precision > 0)) {
1c00e274:	00805d63          	blez	s0,1c00e28e <_prf+0x7d0>
			*buf++ = '.';
1c00e278:	02e00713          	li	a4,46
1c00e27c:	00248913          	addi	s2,s1,2
1c00e280:	00e480a3          	sb	a4,1(s1)
		while (precision > 0 && digit_count > 0) {
1c00e284:	00805563          	blez	s0,1c00e28e <_prf+0x7d0>
1c00e288:	5732                	lw	a4,44(sp)
1c00e28a:	08e04663          	bgtz	a4,1c00e316 <_prf+0x858>
	if (prune_zero) {
1c00e28e:	47d2                	lw	a5,20(sp)
			zero.predot = zero.postdot = zero.trail = 0;
1c00e290:	4a81                	li	s5,0
1c00e292:	4681                	li	a3,0
	if (prune_zero) {
1c00e294:	cf99                	beqz	a5,1c00e2b2 <_prf+0x7f4>
		while (*--buf == '0')
1c00e296:	03000513          	li	a0,48
1c00e29a:	fff90713          	addi	a4,s2,-1
1c00e29e:	00074583          	lbu	a1,0(a4)
1c00e2a2:	08a58263          	beq	a1,a0,1c00e326 <_prf+0x868>
		if (*buf != '.') {
1c00e2a6:	02e00513          	li	a0,46
		zp->trail = 0;
1c00e2aa:	4401                	li	s0,0
		if (*buf != '.') {
1c00e2ac:	00a59363          	bne	a1,a0,1c00e2b2 <_prf+0x7f4>
		while (*--buf == '0')
1c00e2b0:	893a                	mv	s2,a4
	if ((c == 'e') || (c == 'E')) {
1c00e2b2:	0dfdf713          	andi	a4,s11,223
1c00e2b6:	04500593          	li	a1,69
1c00e2ba:	f8b715e3          	bne	a4,a1,1c00e244 <_prf+0x786>
		*buf++ = c;
1c00e2be:	85ca                	mv	a1,s2
1c00e2c0:	01b5812b          	p.sb	s11,2(a1!)
			*buf++ = '+';
1c00e2c4:	02b00793          	li	a5,43
		if (decexp < 0) {
1c00e2c8:	000d5663          	bgez	s10,1c00e2d4 <_prf+0x816>
			decexp = -decexp;
1c00e2cc:	41a00d33          	neg	s10,s10
			*buf++ = '-';
1c00e2d0:	02d00793          	li	a5,45
			*buf++ = '+';
1c00e2d4:	00f900a3          	sb	a5,1(s2)
		if (decexp >= 100) {
1c00e2d8:	06300793          	li	a5,99
1c00e2dc:	01a7de63          	ble	s10,a5,1c00e2f8 <_prf+0x83a>
			*buf++ = (decexp / 100) + '0';
1c00e2e0:	06400713          	li	a4,100
1c00e2e4:	02ed47b3          	div	a5,s10,a4
1c00e2e8:	00390593          	addi	a1,s2,3
			decexp %= 100;
1c00e2ec:	02ed6d33          	rem	s10,s10,a4
			*buf++ = (decexp / 100) + '0';
1c00e2f0:	03078793          	addi	a5,a5,48 # 80000030 <pulp__FC+0x80000031>
1c00e2f4:	00f90123          	sb	a5,2(s2)
		*buf++ = (decexp / 10) + '0';
1c00e2f8:	47a9                	li	a5,10
1c00e2fa:	892e                	mv	s2,a1
1c00e2fc:	02fd4733          	div	a4,s10,a5
		decexp %= 10;
1c00e300:	02fd68b3          	rem	a7,s10,a5
		*buf++ = (decexp / 10) + '0';
1c00e304:	03070713          	addi	a4,a4,48
1c00e308:	00e9012b          	p.sb	a4,2(s2!)
		*buf++ = decexp + '0';
1c00e30c:	03088893          	addi	a7,a7,48
1c00e310:	011580a3          	sb	a7,1(a1)
1c00e314:	bf05                	j	1c00e244 <_prf+0x786>
			*buf++ = _get_digit(&fract, &digit_count);
1c00e316:	106c                	addi	a1,sp,44
1c00e318:	1808                	addi	a0,sp,48
1c00e31a:	f70ff0ef          	jal	ra,1c00da8a <_get_digit>
1c00e31e:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00e322:	147d                	addi	s0,s0,-1
1c00e324:	b785                	j	1c00e284 <_prf+0x7c6>
		while (*--buf == '0')
1c00e326:	893a                	mv	s2,a4
1c00e328:	bf8d                	j	1c00e29a <_prf+0x7dc>
1c00e32a:	8a4a                	mv	s4,s2
				switch (i) {
1c00e32c:	04c00693          	li	a3,76
1c00e330:	004a278b          	p.lw	a5,4(s4!)
1c00e334:	02d48a63          	beq	s1,a3,1c00e368 <_prf+0x8aa>
1c00e338:	0096c963          	blt	a3,s1,1c00e34a <_prf+0x88c>
1c00e33c:	04800693          	li	a3,72
1c00e340:	02d48063          	beq	s1,a3,1c00e360 <_prf+0x8a2>
					*va_arg(vargs, int *) = count;
1c00e344:	0137a023          	sw	s3,0(a5)
					break;
1c00e348:	a801                	j	1c00e358 <_prf+0x89a>
				switch (i) {
1c00e34a:	06800693          	li	a3,104
1c00e34e:	fed49be3          	bne	s1,a3,1c00e344 <_prf+0x886>
					*va_arg(vargs, short *) = count;
1c00e352:	874e                	mv	a4,s3
1c00e354:	00e79023          	sh	a4,0(a5)
				continue;
1c00e358:	8952                	mv	s2,s4
1c00e35a:	8662                	mv	a2,s8
1c00e35c:	f86ff06f          	j	1c00dae2 <_prf+0x24>
					*va_arg(vargs, char *) = count;
1c00e360:	874e                	mv	a4,s3
1c00e362:	00e78023          	sb	a4,0(a5)
					break;
1c00e366:	bfcd                	j	1c00e358 <_prf+0x89a>
					*va_arg(vargs, long long *) = count;
1c00e368:	41f9d713          	srai	a4,s3,0x1f
1c00e36c:	0137a023          	sw	s3,0(a5)
1c00e370:	c3d8                	sw	a4,4(a5)
					break;
1c00e372:	b7dd                	j	1c00e358 <_prf+0x89a>
				clen = _to_hex(buf, val, true, 'x');
1c00e374:	00092583          	lw	a1,0(s2)
		*buf++ = '0';
1c00e378:	77e1                	lui	a5,0xffff8
1c00e37a:	8307c793          	xori	a5,a5,-2000
	len = _to_x(buf, value, 16);
1c00e37e:	46c1                	li	a3,16
1c00e380:	4601                	li	a2,0
1c00e382:	04610513          	addi	a0,sp,70
		*buf++ = '0';
1c00e386:	04f11223          	sh	a5,68(sp)
	len = _to_x(buf, value, 16);
1c00e38a:	e0aff0ef          	jal	ra,1c00d994 <_to_x>
				val = (uintptr_t) va_arg(vargs, void *);
1c00e38e:	00490a13          	addi	s4,s2,4
	return len + (buf - buf0);
1c00e392:	00250d93          	addi	s11,a0,2
				prefix = 2;
1c00e396:	4909                	li	s2,2
				break;
1c00e398:	b40d                	j	1c00ddba <_prf+0x2fc>
					if (cptr[clen] == '\0') {
1c00e39a:	0016c60b          	p.lbu	a2,1(a3!) # 8000001 <__L2+0x7f80001>
1c00e39e:	a4060ee3          	beqz	a2,1c00ddfa <_prf+0x33c>
				for (clen = 0; clen < precision; clen++) {
1c00e3a2:	0d85                	addi	s11,s11,1
1c00e3a4:	bc89                	j	1c00ddf6 <_prf+0x338>
					val = va_arg(vargs, unsigned int);
1c00e3a6:	00490a13          	addi	s4,s2,4
1c00e3aa:	00092583          	lw	a1,0(s2)
1c00e3ae:	4601                	li	a2,0
					break;
1c00e3b0:	ba99                	j	1c00dd06 <_prf+0x248>
	if (alt_form) {
1c00e3b2:	8526                	mv	a0,s1
	return (buf - buf0) + _to_x(buf, value, 8);
1c00e3b4:	46a1                	li	a3,8
1c00e3b6:	409504b3          	sub	s1,a0,s1
1c00e3ba:	ddaff0ef          	jal	ra,1c00d994 <_to_x>
1c00e3be:	00a48db3          	add	s11,s1,a0
			prefix = 0;
1c00e3c2:	4901                	li	s2,0
1c00e3c4:	badd                	j	1c00ddba <_prf+0x2fc>
				} else if (c == 'u') {
1c00e3c6:	07500713          	li	a4,117
1c00e3ca:	00ed9863          	bne	s11,a4,1c00e3da <_prf+0x91c>
	return _to_x(buf, value, 10);
1c00e3ce:	46a9                	li	a3,10
1c00e3d0:	8526                	mv	a0,s1
1c00e3d2:	dc2ff0ef          	jal	ra,1c00d994 <_to_x>
1c00e3d6:	8daa                	mv	s11,a0
1c00e3d8:	b7ed                	j	1c00e3c2 <_prf+0x904>
	if (alt_form) {
1c00e3da:	8d26                	mv	s10,s1
1c00e3dc:	000a8963          	beqz	s5,1c00e3ee <_prf+0x930>
		*buf++ = '0';
1c00e3e0:	7761                	lui	a4,0xffff8
1c00e3e2:	83074713          	xori	a4,a4,-2000
1c00e3e6:	04e11223          	sh	a4,68(sp)
		*buf++ = 'x';
1c00e3ea:	04610d13          	addi	s10,sp,70
	len = _to_x(buf, value, 16);
1c00e3ee:	46c1                	li	a3,16
1c00e3f0:	856a                	mv	a0,s10
1c00e3f2:	da2ff0ef          	jal	ra,1c00d994 <_to_x>
	if (prefix == 'X') {
1c00e3f6:	05800713          	li	a4,88
1c00e3fa:	02ed9263          	bne	s11,a4,1c00e41e <_prf+0x960>
1c00e3fe:	87a6                	mv	a5,s1
		if (*buf >= 'a' && *buf <= 'z') {
1c00e400:	45e5                	li	a1,25
1c00e402:	0017c68b          	p.lbu	a3,1(a5!) # ffff8001 <pulp__FC+0xffff8002>
1c00e406:	f9f68613          	addi	a2,a3,-97
1c00e40a:	0ff67613          	andi	a2,a2,255
1c00e40e:	00c5e563          	bltu	a1,a2,1c00e418 <_prf+0x95a>
			*buf += 'A' - 'a';
1c00e412:	1681                	addi	a3,a3,-32
1c00e414:	fed78fa3          	sb	a3,-1(a5)
	} while (*buf++);
1c00e418:	fff7c703          	lbu	a4,-1(a5)
1c00e41c:	f37d                	bnez	a4,1c00e402 <_prf+0x944>
	return len + (buf - buf0);
1c00e41e:	409d0733          	sub	a4,s10,s1
1c00e422:	00a70db3          	add	s11,a4,a0
			prefix = 0;
1c00e426:	001a9913          	slli	s2,s5,0x1
1c00e42a:	ba41                	j	1c00ddba <_prf+0x2fc>
				PUTC('%');
1c00e42c:	85de                	mv	a1,s7
1c00e42e:	02500513          	li	a0,37
1c00e432:	ec4ff06f          	j	1c00daf6 <_prf+0x38>
				count++;
1c00e436:	0985                	addi	s3,s3,1
				continue;
1c00e438:	8a4a                	mv	s4,s2
1c00e43a:	bf39                	j	1c00e358 <_prf+0x89a>
1c00e43c:	00dc                	addi	a5,sp,68
				zero_head = 0;
1c00e43e:	4d01                	li	s10,0
1c00e440:	b2d5                	j	1c00de24 <_prf+0x366>
					PUTC(' ');
1c00e442:	85de                	mv	a1,s7
1c00e444:	02000513          	li	a0,32
1c00e448:	c036                	sw	a3,0(sp)
1c00e44a:	c43e                	sw	a5,8(sp)
1c00e44c:	9b02                	jalr	s6
1c00e44e:	4682                	lw	a3,0(sp)
1c00e450:	47a2                	lw	a5,8(sp)
1c00e452:	ebf52563          	p.beqimm	a0,-1,1c00dafc <_prf+0x3e>
				while (width-- > 0) {
1c00e456:	14fd                	addi	s1,s1,-1
1c00e458:	fff4b5e3          	p.bneimm	s1,-1,1c00e442 <_prf+0x984>
				count += width;
1c00e45c:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00e45e:	5cfd                	li	s9,-1
1c00e460:	bad9                	j	1c00de36 <_prf+0x378>
				PUTC(*cptr++);
1c00e462:	0017c50b          	p.lbu	a0,1(a5!)
1c00e466:	85de                	mv	a1,s7
1c00e468:	c036                	sw	a3,0(sp)
1c00e46a:	c43e                	sw	a5,8(sp)
1c00e46c:	9b02                	jalr	s6
1c00e46e:	4682                	lw	a3,0(sp)
1c00e470:	47a2                	lw	a5,8(sp)
1c00e472:	9df534e3          	p.bneimm	a0,-1,1c00de3a <_prf+0x37c>
1c00e476:	e86ff06f          	j	1c00dafc <_prf+0x3e>
				PUTC('0');
1c00e47a:	85de                	mv	a1,s7
1c00e47c:	03000513          	li	a0,48
1c00e480:	c036                	sw	a3,0(sp)
1c00e482:	c43e                	sw	a5,8(sp)
1c00e484:	9b02                	jalr	s6
1c00e486:	4682                	lw	a3,0(sp)
1c00e488:	47a2                	lw	a5,8(sp)
1c00e48a:	9bf53be3          	p.bneimm	a0,-1,1c00de40 <_prf+0x382>
1c00e48e:	e6eff06f          	j	1c00dafc <_prf+0x3e>
					PUTC(c);
1c00e492:	85de                	mv	a1,s7
1c00e494:	c232                	sw	a2,4(sp)
1c00e496:	c036                	sw	a3,0(sp)
1c00e498:	c442                	sw	a6,8(sp)
1c00e49a:	9b02                	jalr	s6
1c00e49c:	4612                	lw	a2,4(sp)
1c00e49e:	4682                	lw	a3,0(sp)
1c00e4a0:	4822                	lw	a6,8(sp)
1c00e4a2:	e5f52d63          	p.beqimm	a0,-1,1c00dafc <_prf+0x3e>
					c = *++cptr;
1c00e4a6:	0d85                	addi	s11,s11,1
1c00e4a8:	000dc503          	lbu	a0,0(s11)
1c00e4ac:	b27d                	j	1c00de5a <_prf+0x39c>
					PUTC('0');
1c00e4ae:	85de                	mv	a1,s7
1c00e4b0:	03000513          	li	a0,48
1c00e4b4:	c232                	sw	a2,4(sp)
1c00e4b6:	c036                	sw	a3,0(sp)
1c00e4b8:	c43a                	sw	a4,8(sp)
1c00e4ba:	9b02                	jalr	s6
1c00e4bc:	4612                	lw	a2,4(sp)
1c00e4be:	4682                	lw	a3,0(sp)
1c00e4c0:	4722                	lw	a4,8(sp)
1c00e4c2:	167d                	addi	a2,a2,-1
1c00e4c4:	9bf532e3          	p.bneimm	a0,-1,1c00de68 <_prf+0x3aa>
1c00e4c8:	e34ff06f          	j	1c00dafc <_prf+0x3e>
					PUTC('0');
1c00e4cc:	85de                	mv	a1,s7
1c00e4ce:	03000513          	li	a0,48
1c00e4d2:	c036                	sw	a3,0(sp)
1c00e4d4:	c43a                	sw	a4,8(sp)
1c00e4d6:	9b02                	jalr	s6
1c00e4d8:	4682                	lw	a3,0(sp)
1c00e4da:	4722                	lw	a4,8(sp)
1c00e4dc:	16fd                	addi	a3,a3,-1
1c00e4de:	9df532e3          	p.bneimm	a0,-1,1c00dea2 <_prf+0x3e4>
1c00e4e2:	e1aff06f          	j	1c00dafc <_prf+0x3e>
					PUTC(c);
1c00e4e6:	85de                	mv	a1,s7
1c00e4e8:	c232                	sw	a2,4(sp)
1c00e4ea:	c036                	sw	a3,0(sp)
1c00e4ec:	c43a                	sw	a4,8(sp)
1c00e4ee:	9b02                	jalr	s6
1c00e4f0:	4612                	lw	a2,4(sp)
1c00e4f2:	4682                	lw	a3,0(sp)
1c00e4f4:	4722                	lw	a4,8(sp)
1c00e4f6:	e1f52363          	p.beqimm	a0,-1,1c00dafc <_prf+0x3e>
					c = *++cptr;
1c00e4fa:	0d85                	addi	s11,s11,1
1c00e4fc:	000dc503          	lbu	a0,0(s11)
1c00e500:	ba75                	j	1c00debc <_prf+0x3fe>
					PUTC('0');
1c00e502:	85de                	mv	a1,s7
1c00e504:	03000513          	li	a0,48
1c00e508:	c43a                	sw	a4,8(sp)
1c00e50a:	9b02                	jalr	s6
1c00e50c:	4722                	lw	a4,8(sp)
1c00e50e:	177d                	addi	a4,a4,-1
1c00e510:	9bf53fe3          	p.bneimm	a0,-1,1c00dece <_prf+0x410>
1c00e514:	de8ff06f          	j	1c00dafc <_prf+0x3e>
				PUTC(*cptr++);
1c00e518:	0014450b          	p.lbu	a0,1(s0!)
1c00e51c:	85de                	mv	a1,s7
1c00e51e:	9b02                	jalr	s6
1c00e520:	ddf52e63          	p.beqimm	a0,-1,1c00dafc <_prf+0x3e>
1c00e524:	408a87b3          	sub	a5,s5,s0
			while (clen-- > 0) {
1c00e528:	fef048e3          	bgtz	a5,1c00e518 <_prf+0xa5a>
			count += prefix;
1c00e52c:	994e                	add	s2,s2,s3
			count += zero_head;
1c00e52e:	012d09b3          	add	s3,s10,s2
			count += clen;
1c00e532:	99a6                	add	s3,s3,s1
			if (width > 0) {
1c00e534:	e39052e3          	blez	s9,1c00e358 <_prf+0x89a>
				count += width;
1c00e538:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00e53a:	1cfd                	addi	s9,s9,-1
1c00e53c:	e1fcaee3          	p.beqimm	s9,-1,1c00e358 <_prf+0x89a>
					PUTC(' ');
1c00e540:	85de                	mv	a1,s7
1c00e542:	02000513          	li	a0,32
1c00e546:	9b02                	jalr	s6
1c00e548:	fff539e3          	p.bneimm	a0,-1,1c00e53a <_prf+0xa7c>
1c00e54c:	db0ff06f          	j	1c00dafc <_prf+0x3e>
			*buf++ = '.';
1c00e550:	02e00693          	li	a3,46
1c00e554:	00d90023          	sb	a3,0(s2)
1c00e558:	00190713          	addi	a4,s2,1
			zp->predot = decexp;
1c00e55c:	86ea                	mv	a3,s10
			decexp = 0;
1c00e55e:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00e560:	4a81                	li	s5,0
1c00e562:	b6f9                	j	1c00e130 <_prf+0x672>
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00e564:	ca02                	sw	zero,20(sp)
		exp = precision + 1;
1c00e566:	00140713          	addi	a4,s0,1
	digit_count = 16;
1c00e56a:	46c1                	li	a3,16
1c00e56c:	d636                	sw	a3,44(sp)
1c00e56e:	04d74933          	p.min	s2,a4,a3
1c00e572:	b691                	j	1c00e0b6 <_prf+0x5f8>

1c00e574 <__rt_uart_cluster_req_done>:
  }

  return __rt_uart_open(channel, conf, event, dev_name);
  
error:
  rt_warning("[UART] Failed to open uart device\n");
1c00e574:	300476f3          	csrrci	a3,mstatus,8
1c00e578:	4785                	li	a5,1
1c00e57a:	08f50623          	sb	a5,140(a0)
1c00e57e:	08d54783          	lbu	a5,141(a0)
1c00e582:	00201737          	lui	a4,0x201
1c00e586:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00e58a:	04078793          	addi	a5,a5,64
1c00e58e:	07da                	slli	a5,a5,0x16
1c00e590:	0007e723          	p.sw	zero,a4(a5)
1c00e594:	30069073          	csrw	mstatus,a3
1c00e598:	8082                	ret

1c00e59a <__rt_uart_setup.isra.5>:
1c00e59a:	1c010737          	lui	a4,0x1c010
1c00e59e:	93472703          	lw	a4,-1740(a4) # 1c00f934 <__rt_freq_domains>
1c00e5a2:	00155793          	srli	a5,a0,0x1
1c00e5a6:	97ba                	add	a5,a5,a4
1c00e5a8:	02a7d7b3          	divu	a5,a5,a0
1c00e5ac:	1a102737          	lui	a4,0x1a102
1c00e5b0:	17fd                	addi	a5,a5,-1
1c00e5b2:	07c2                	slli	a5,a5,0x10
1c00e5b4:	3067e793          	ori	a5,a5,774
1c00e5b8:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00e5bc:	8082                	ret

1c00e5be <__rt_uart_setfreq_after>:
1c00e5be:	1c0107b7          	lui	a5,0x1c010
1c00e5c2:	8bc78793          	addi	a5,a5,-1860 # 1c00f8bc <__rt_uart>
1c00e5c6:	4398                	lw	a4,0(a5)
1c00e5c8:	cb11                	beqz	a4,1c00e5dc <__rt_uart_setfreq_after+0x1e>
1c00e5ca:	4788                	lw	a0,8(a5)
1c00e5cc:	1141                	addi	sp,sp,-16
1c00e5ce:	c606                	sw	ra,12(sp)
1c00e5d0:	fcbff0ef          	jal	ra,1c00e59a <__rt_uart_setup.isra.5>
1c00e5d4:	40b2                	lw	ra,12(sp)
1c00e5d6:	4501                	li	a0,0
1c00e5d8:	0141                	addi	sp,sp,16
1c00e5da:	8082                	ret
1c00e5dc:	4501                	li	a0,0
1c00e5de:	8082                	ret

1c00e5e0 <__rt_uart_wait_tx_done.isra.6>:
1c00e5e0:	1a102737          	lui	a4,0x1a102
1c00e5e4:	1141                	addi	sp,sp,-16
1c00e5e6:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021d4>
1c00e5ea:	002046b7          	lui	a3,0x204
1c00e5ee:	431c                	lw	a5,0(a4)
1c00e5f0:	8bc1                	andi	a5,a5,16
1c00e5f2:	e38d                	bnez	a5,1c00e614 <__rt_uart_wait_tx_done.isra.6+0x34>
1c00e5f4:	1a102737          	lui	a4,0x1a102
1c00e5f8:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021dc>
1c00e5fc:	431c                	lw	a5,0(a4)
1c00e5fe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00e602:	ffed                	bnez	a5,1c00e5fc <__rt_uart_wait_tx_done.isra.6+0x1c>
1c00e604:	c602                	sw	zero,12(sp)
1c00e606:	7cf00713          	li	a4,1999
1c00e60a:	47b2                	lw	a5,12(sp)
1c00e60c:	00f75763          	ble	a5,a4,1c00e61a <__rt_uart_wait_tx_done.isra.6+0x3a>
1c00e610:	0141                	addi	sp,sp,16
1c00e612:	8082                	ret
1c00e614:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c00e618:	bfd9                	j	1c00e5ee <__rt_uart_wait_tx_done.isra.6+0xe>
1c00e61a:	47b2                	lw	a5,12(sp)
1c00e61c:	0785                	addi	a5,a5,1
1c00e61e:	c63e                	sw	a5,12(sp)
1c00e620:	b7ed                	j	1c00e60a <__rt_uart_wait_tx_done.isra.6+0x2a>

1c00e622 <__rt_uart_setfreq_before>:
1c00e622:	1c0107b7          	lui	a5,0x1c010
1c00e626:	8bc7a783          	lw	a5,-1860(a5) # 1c00f8bc <__rt_uart>
1c00e62a:	c385                	beqz	a5,1c00e64a <__rt_uart_setfreq_before+0x28>
1c00e62c:	1141                	addi	sp,sp,-16
1c00e62e:	c606                	sw	ra,12(sp)
1c00e630:	fb1ff0ef          	jal	ra,1c00e5e0 <__rt_uart_wait_tx_done.isra.6>
1c00e634:	40b2                	lw	ra,12(sp)
1c00e636:	005007b7          	lui	a5,0x500
1c00e63a:	1a102737          	lui	a4,0x1a102
1c00e63e:	0799                	addi	a5,a5,6
1c00e640:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00e644:	4501                	li	a0,0
1c00e646:	0141                	addi	sp,sp,16
1c00e648:	8082                	ret
1c00e64a:	4501                	li	a0,0
1c00e64c:	8082                	ret

1c00e64e <__rt_uart_cluster_req>:
1c00e64e:	1141                	addi	sp,sp,-16
1c00e650:	c606                	sw	ra,12(sp)
1c00e652:	c422                	sw	s0,8(sp)
1c00e654:	30047473          	csrrci	s0,mstatus,8
1c00e658:	1c00e7b7          	lui	a5,0x1c00e
1c00e65c:	57478793          	addi	a5,a5,1396 # 1c00e574 <__rt_uart_cluster_req_done>
1c00e660:	c91c                	sw	a5,16(a0)
1c00e662:	4785                	li	a5,1
1c00e664:	d91c                	sw	a5,48(a0)
1c00e666:	411c                	lw	a5,0(a0)
1c00e668:	02052a23          	sw	zero,52(a0)
1c00e66c:	c948                	sw	a0,20(a0)
1c00e66e:	43cc                	lw	a1,4(a5)
1c00e670:	4514                	lw	a3,8(a0)
1c00e672:	4150                	lw	a2,4(a0)
1c00e674:	0586                	slli	a1,a1,0x1
1c00e676:	00c50793          	addi	a5,a0,12
1c00e67a:	4701                	li	a4,0
1c00e67c:	0585                	addi	a1,a1,1
1c00e67e:	4501                	li	a0,0
1c00e680:	c14fd0ef          	jal	ra,1c00ba94 <rt_periph_copy>
1c00e684:	30041073          	csrw	mstatus,s0
1c00e688:	40b2                	lw	ra,12(sp)
1c00e68a:	4422                	lw	s0,8(sp)
1c00e68c:	0141                	addi	sp,sp,16
1c00e68e:	8082                	ret

1c00e690 <soc_eu_fcEventMask_setEvent>:
1c00e690:	47fd                	li	a5,31
1c00e692:	4721                	li	a4,8
1c00e694:	00a7d463          	ble	a0,a5,1c00e69c <soc_eu_fcEventMask_setEvent+0xc>
1c00e698:	1501                	addi	a0,a0,-32
1c00e69a:	4711                	li	a4,4
1c00e69c:	1a1066b7          	lui	a3,0x1a106
1c00e6a0:	20e6f603          	p.lw	a2,a4(a3)
1c00e6a4:	4785                	li	a5,1
1c00e6a6:	00a79533          	sll	a0,a5,a0
1c00e6aa:	fff54513          	not	a0,a0
1c00e6ae:	8d71                	and	a0,a0,a2
1c00e6b0:	00a6e723          	p.sw	a0,a4(a3)
1c00e6b4:	8082                	ret

1c00e6b6 <rt_uart_conf_init>:
1c00e6b6:	000997b7          	lui	a5,0x99
1c00e6ba:	96878793          	addi	a5,a5,-1688 # 98968 <__L2+0x18968>
1c00e6be:	c11c                	sw	a5,0(a0)
1c00e6c0:	57fd                	li	a5,-1
1c00e6c2:	c15c                	sw	a5,4(a0)
1c00e6c4:	8082                	ret

1c00e6c6 <__rt_uart_open>:
1c00e6c6:	1141                	addi	sp,sp,-16
1c00e6c8:	c606                	sw	ra,12(sp)
1c00e6ca:	c422                	sw	s0,8(sp)
1c00e6cc:	c226                	sw	s1,4(sp)
1c00e6ce:	c04a                	sw	s2,0(sp)
1c00e6d0:	30047973          	csrrci	s2,mstatus,8
1c00e6d4:	cd8d                	beqz	a1,1c00e70e <__rt_uart_open+0x48>
1c00e6d6:	4198                	lw	a4,0(a1)
1c00e6d8:	1c0106b7          	lui	a3,0x1c010
1c00e6dc:	ffc50793          	addi	a5,a0,-4
1c00e6e0:	8bc68413          	addi	s0,a3,-1860 # 1c00f8bc <__rt_uart>
1c00e6e4:	0792                	slli	a5,a5,0x4
1c00e6e6:	943e                	add	s0,s0,a5
1c00e6e8:	4010                	lw	a2,0(s0)
1c00e6ea:	8bc68693          	addi	a3,a3,-1860
1c00e6ee:	c60d                	beqz	a2,1c00e718 <__rt_uart_open+0x52>
1c00e6f0:	c589                	beqz	a1,1c00e6fa <__rt_uart_open+0x34>
1c00e6f2:	418c                	lw	a1,0(a1)
1c00e6f4:	4418                	lw	a4,8(s0)
1c00e6f6:	04e59d63          	bne	a1,a4,1c00e750 <__rt_uart_open+0x8a>
1c00e6fa:	0605                	addi	a2,a2,1
1c00e6fc:	00c6e7a3          	p.sw	a2,a5(a3)
1c00e700:	8522                	mv	a0,s0
1c00e702:	40b2                	lw	ra,12(sp)
1c00e704:	4422                	lw	s0,8(sp)
1c00e706:	4492                	lw	s1,4(sp)
1c00e708:	4902                	lw	s2,0(sp)
1c00e70a:	0141                	addi	sp,sp,16
1c00e70c:	8082                	ret
1c00e70e:	00099737          	lui	a4,0x99
1c00e712:	96870713          	addi	a4,a4,-1688 # 98968 <__L2+0x18968>
1c00e716:	b7c9                	j	1c00e6d8 <__rt_uart_open+0x12>
1c00e718:	c418                	sw	a4,8(s0)
1c00e71a:	4785                	li	a5,1
1c00e71c:	1a102737          	lui	a4,0x1a102
1c00e720:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00e724:	c01c                	sw	a5,0(s0)
1c00e726:	c048                	sw	a0,4(s0)
1c00e728:	4314                	lw	a3,0(a4)
1c00e72a:	00a797b3          	sll	a5,a5,a0
1c00e72e:	00151493          	slli	s1,a0,0x1
1c00e732:	8fd5                	or	a5,a5,a3
1c00e734:	c31c                	sw	a5,0(a4)
1c00e736:	8526                	mv	a0,s1
1c00e738:	f59ff0ef          	jal	ra,1c00e690 <soc_eu_fcEventMask_setEvent>
1c00e73c:	00148513          	addi	a0,s1,1
1c00e740:	f51ff0ef          	jal	ra,1c00e690 <soc_eu_fcEventMask_setEvent>
1c00e744:	4408                	lw	a0,8(s0)
1c00e746:	e55ff0ef          	jal	ra,1c00e59a <__rt_uart_setup.isra.5>
1c00e74a:	30091073          	csrw	mstatus,s2
1c00e74e:	bf4d                	j	1c00e700 <__rt_uart_open+0x3a>
1c00e750:	4401                	li	s0,0
1c00e752:	b77d                	j	1c00e700 <__rt_uart_open+0x3a>

1c00e754 <rt_uart_close>:
}



void rt_uart_close(rt_uart_t *uart, rt_event_t *event)
{
1c00e754:	1141                	addi	sp,sp,-16
1c00e756:	c606                	sw	ra,12(sp)
1c00e758:	c422                	sw	s0,8(sp)
1c00e75a:	c226                	sw	s1,4(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00e75c:	300474f3          	csrrci	s1,mstatus,8
  int irq = rt_irq_disable();

  rt_trace(RT_TRACE_DEV_CTRL, "[UART] Closing uart device (handle: %p)\n", uart);

  uart->open_count--;
1c00e760:	411c                	lw	a5,0(a0)
1c00e762:	17fd                	addi	a5,a5,-1
1c00e764:	c11c                	sw	a5,0(a0)

  if (uart->open_count == 0)
1c00e766:	e79d                	bnez	a5,1c00e794 <rt_uart_close+0x40>
1c00e768:	842a                	mv	s0,a0
  {
      // First wait for pending transfers to finish before stoppping uart in case
      // some printf are still pending
      __rt_uart_wait_tx_done(uart);
1c00e76a:	e77ff0ef          	jal	ra,1c00e5e0 <__rt_uart_wait_tx_done.isra.6>

  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, val);
}

static inline void plp_uart_disable(int channel) {
  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, 0x00500006);
1c00e76e:	1a102737          	lui	a4,0x1a102
1c00e772:	005007b7          	lui	a5,0x500
1c00e776:	22470693          	addi	a3,a4,548 # 1a102224 <__l1_end+0xa1021e0>
1c00e77a:	0799                	addi	a5,a5,6
1c00e77c:	c29c                	sw	a5,0(a3)
      // Set enable bits for uart channel back to 0 
      // This is needed to be able to propagate new configs when re-opening
      plp_uart_disable(uart->channel - ARCHI_UDMA_UART_ID(0));      

      // Then stop the uart
      plp_udma_cg_set(plp_udma_cg_get() & ~(1<<uart->channel));
1c00e77e:	4050                	lw	a2,4(s0)
  return pulp_read32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET);
1c00e780:	78070713          	addi	a4,a4,1920
1c00e784:	4314                	lw	a3,0(a4)
1c00e786:	4785                	li	a5,1
1c00e788:	00c797b3          	sll	a5,a5,a2
1c00e78c:	fff7c793          	not	a5,a5
1c00e790:	8ff5                	and	a5,a5,a3
  pulp_write32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET, value);
1c00e792:	c31c                	sw	a5,0(a4)
  __builtin_pulp_spr_write(reg, val);
1c00e794:	30049073          	csrw	mstatus,s1
  }

  rt_irq_restore(irq);
}
1c00e798:	40b2                	lw	ra,12(sp)
1c00e79a:	4422                	lw	s0,8(sp)
1c00e79c:	4492                	lw	s1,4(sp)
1c00e79e:	0141                	addi	sp,sp,16
1c00e7a0:	8082                	ret

1c00e7a2 <rt_uart_cluster_write>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00e7a2:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00e7a6:	8795                	srai	a5,a5,0x5
1c00e7a8:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_uart_cluster_write(rt_uart_t *handle, void *buffer, size_t size, rt_uart_req_t *req)
{
  req->uart = handle;
  req->buffer = buffer;
  req->size = size;
  req->cid = rt_cluster_id();
1c00e7ac:	08f686a3          	sb	a5,141(a3)
  event->arg[0] = (uintptr_t)callback;
1c00e7b0:	1c00e7b7          	lui	a5,0x1c00e
1c00e7b4:	64e78793          	addi	a5,a5,1614 # 1c00e64e <__rt_uart_cluster_req>
1c00e7b8:	ca9c                	sw	a5,16(a3)
  event->implem.pending = 1;  
1c00e7ba:	4785                	li	a5,1
  req->uart = handle;
1c00e7bc:	c288                	sw	a0,0(a3)
  req->buffer = buffer;
1c00e7be:	c2cc                	sw	a1,4(a3)
  req->size = size;
1c00e7c0:	c690                	sw	a2,8(a3)
  req->done = 0;
1c00e7c2:	08068623          	sb	zero,140(a3)
  event->implem.keep = 0;
1c00e7c6:	0206aa23          	sw	zero,52(a3)
  event->arg[1] = (uintptr_t)arg;
1c00e7ca:	cad4                	sw	a3,20(a3)
  event->implem.pending = 1;  
1c00e7cc:	da9c                	sw	a5,48(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_uart_cluster_req, (void *)req);
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c00e7ce:	00c68513          	addi	a0,a3,12
1c00e7d2:	c7ffd06f          	j	1c00c450 <__rt_cluster_push_fc_event>

1c00e7d6 <__rt_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e7d6:	1c00e5b7          	lui	a1,0x1c00e
{
1c00e7da:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e7dc:	4601                	li	a2,0
1c00e7de:	62258593          	addi	a1,a1,1570 # 1c00e622 <__rt_uart_setfreq_before>
1c00e7e2:	4511                	li	a0,4
{
1c00e7e4:	c606                	sw	ra,12(sp)
1c00e7e6:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e7e8:	887fc0ef          	jal	ra,1c00b06e <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e7ec:	1c00e5b7          	lui	a1,0x1c00e
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e7f0:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e7f2:	4601                	li	a2,0
1c00e7f4:	5be58593          	addi	a1,a1,1470 # 1c00e5be <__rt_uart_setfreq_after>
1c00e7f8:	4515                	li	a0,5
1c00e7fa:	875fc0ef          	jal	ra,1c00b06e <__rt_cbsys_add>


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c00e7fe:	1c0107b7          	lui	a5,0x1c010
1c00e802:	8a07ae23          	sw	zero,-1860(a5) # 1c00f8bc <__rt_uart>
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e806:	8d41                	or	a0,a0,s0
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c00e808:	c10d                	beqz	a0,1c00e82a <__rt_uart_init+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00e80a:	01402673          	csrr	a2,uhartid
1c00e80e:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00e812:	40565593          	srai	a1,a2,0x5
1c00e816:	f265b5b3          	p.bclr	a1,a1,25,6
1c00e81a:	f4563633          	p.bclr	a2,a2,26,5
1c00e81e:	2cc50513          	addi	a0,a0,716 # 1c00f2cc <__hyper_pad+0xa4>
1c00e822:	946ff0ef          	jal	ra,1c00d968 <printf>
1c00e826:	8c6ff0ef          	jal	ra,1c00d8ec <abort>
}
1c00e82a:	40b2                	lw	ra,12(sp)
1c00e82c:	4422                	lw	s0,8(sp)
1c00e82e:	0141                	addi	sp,sp,16
1c00e830:	8082                	ret
	...

1c00e834 <__cluster_text_start>:
  .global __rt_pe_start
__rt_pe_start:

#endif

    csrr    a0, 0xF14
1c00e834:	f1402573          	csrr	a0,mhartid
    andi    a1, a0, 0x1f
1c00e838:	01f57593          	andi	a1,a0,31
    srli    a0, a0, 5
1c00e83c:	8115                	srli	a0,a0,0x5
    
    // Activate a few events
    li      t0, (1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT)
1c00e83e:	000702b7          	lui	t0,0x70
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00e842:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK(t1)
1c00e846:	00532023          	sw	t0,0(t1) # 204000 <__L2+0x184000>

#ifndef ARCHI_NO_L1_TINY
    sw      x0, %tiny(__rt_dma_first_pending)(x0)
1c00e84a:	00002a23          	sw	zero,20(zero) # 14 <__rt_bridge_eeprom_handle>

#ifdef ARCHI_HAS_CC
    li      t2, ARCHI_CC_CORE_ID
    bne     a1, t2, __rt_slave_start
#else
    bne     a1, x0, __rt_slave_start
1c00e84e:	10059063          	bnez	a1,1c00e94e <__rt_slave_start>
#endif

    li      t0, (1<<ARCHI_CL_EVT_DMA1)
1c00e852:	20000293          	li	t0,512
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00e856:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK_IRQ_OR(t1)
1c00e85a:	00532a23          	sw	t0,20(t1) # 204014 <__L2+0x184014>



    // Prepare few values that will be kept in saved registers to optimize the loop
    la      s0, __rt_cluster_pool
1c00e85e:	e3ff1417          	auipc	s0,0xe3ff1
1c00e862:	7a640413          	addi	s0,s0,1958 # 4 <__rt_bridge_flash_handle>
    li      s3, ARCHI_EU_DEMUX_ADDR
1c00e866:	002049b7          	lui	s3,0x204
    li      s4, 1<<RT_CLUSTER_CALL_EVT
1c00e86a:	4a09                	li	s4,2
    la      s5, __rt_master_event
1c00e86c:	00000a97          	auipc	s5,0x0
1c00e870:	038a8a93          	addi	s5,s5,56 # 1c00e8a4 <__rt_master_event>
    la      s7, __rt_fc_cluster_data
1c00e874:	00001b97          	auipc	s7,0x1
1c00e878:	0d0b8b93          	addi	s7,s7,208 # 1c00f944 <__rt_fc_cluster_data>
    li      t2, RT_FC_CLUSTER_DATA_T_SIZEOF
1c00e87c:	02800393          	li	t2,40
    mul     t2, t2, a0
1c00e880:	02a383b3          	mul	t2,t2,a0
    add     s7, s7, t2
1c00e884:	9b9e                	add	s7,s7,t2
    addi    s7, s7, RT_FC_CLUSTER_DATA_T_EVENTS
1c00e886:	0b91                	addi	s7,s7,4
#if defined(ARCHI_HAS_FC)
#if defined(ITC_VERSION)
    li      s9, ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET
    li      s8, 1<<RT_FC_ENQUEUE_EVENT
#else
    li      s9, ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
1c00e888:	1b201cb7          	lui	s9,0x1b201
1c00e88c:	e04c8c93          	addi	s9,s9,-508 # 1b200e04 <__fc_tcdm_end+0x1ffa34>
    li      s8, 1
1c00e890:	4c05                	li	s8,1
    // In case there is no FC, the event must be sent to cluster 0 event unit
    li      s9, ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(0) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
    li      s8, 1    
#endif
#ifndef ARCHI_HAS_NO_DISPATCH
    la      s10, __rt_set_slave_stack
1c00e892:	00000d17          	auipc	s10,0x0
1c00e896:	0fad0d13          	addi	s10,s10,250 # 1c00e98c <__rt_set_slave_stack>
    ori     s10, s10, 1
1c00e89a:	001d6d13          	ori	s10,s10,1
#endif

    csrwi   0x300, 0x8
1c00e89e:	30045073          	csrwi	mstatus,8

    j       __rt_master_loop
1c00e8a2:	a819                	j	1c00e8b8 <__rt_master_loop>

1c00e8a4 <__rt_master_event>:



__rt_master_event:
    beq     s6, x0, __rt_master_loop
1c00e8a4:	000b0a63          	beqz	s6,1c00e8b8 <__rt_master_loop>

1c00e8a8 <__rt_push_event_to_fc_retry>:

__rt_push_event_to_fc_retry:
    // Now we have to push the termination event to FC side
    // First wait until the slot for posting events is free
    lw      t0, 0(s7)
1c00e8a8:	000ba283          	lw	t0,0(s7)
    bne     t0, x0, __rt_push_event_to_fc_wait
1c00e8ac:	08029a63          	bnez	t0,1c00e940 <__rt_push_event_to_fc_wait>

    // Push it
    sw      s6, 0(s7)
1c00e8b0:	016ba023          	sw	s6,0(s7)

    // And notify the FC side with a HW event in case it is sleeping
    sw      s8, 0(s9)
1c00e8b4:	018ca023          	sw	s8,0(s9)

1c00e8b8 <__rt_master_loop>:


__rt_master_loop:
    // Check if a task is ready in the pool
    lw      t3, 0(s0)
1c00e8b8:	00042e03          	lw	t3,0(s0)
    // Check if a call is ready, e.g. if nb_pe is not zero
    // otherwise go to sleep
    beq     t3, x0, __rt_master_sleep
1c00e8bc:	060e0b63          	beqz	t3,1c00e932 <__rt_master_sleep>

1c00e8c0 <__rt_master_loop_update_next>:

__rt_master_loop_update_next:
    lw      t4, RT_CLUSTER_TASK_NEXT(t3)
1c00e8c0:	020e2e83          	lw	t4,32(t3)
    sw      x0, RT_CLUSTER_TASK_PENDING(t3)
1c00e8c4:	020e2223          	sw	zero,36(t3)
    sw      t4, 0(s0)
1c00e8c8:	01d42023          	sw	t4,0(s0)

    // Check again next pointer in case it was updated by the FC.
    // If so, do it it again as this will ensure that either we see the new
    // value or the FC sees our write
    lw      t5, RT_CLUSTER_TASK_NEXT(t3)
1c00e8cc:	020e2f03          	lw	t5,32(t3)
    bne     t4, t5, __rt_master_loop_update_next
1c00e8d0:	ffee98e3          	bne	t4,t5,1c00e8c0 <__rt_master_loop_update_next>
    li      a4, 0
    ebreak
#endif

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00e8d4:	7d005073          	csrwi	0x7d0,0
#endif

    // Reads entry point information
    lw      a0, RT_CLUSTER_TASK_ARG(t3)
1c00e8d8:	004e2503          	lw	a0,4(t3)
    lw      t0, RT_CLUSTER_TASK_ENTRY(t3)
1c00e8dc:	000e2283          	lw	t0,0(t3)
    lw      sp, RT_CLUSTER_TASK_STACKS(t3)
1c00e8e0:	008e2103          	lw	sp,8(t3)
    lw      t1, RT_CLUSTER_TASK_STACK_SIZE(t3)
1c00e8e4:	00ce2303          	lw	t1,12(t3)
    lw      t2, RT_CLUSTER_TASK_SLAVE_STACK_SIZE(t3)
1c00e8e8:	010e2383          	lw	t2,16(t3)
    lw      t5, RT_CLUSTER_TASK_CORE_MASK(t3)
1c00e8ec:	028e2f03          	lw	t5,40(t3)
    lw      s6, RT_CLUSTER_TASK_COMPLETION_CALLBACK(t3)
1c00e8f0:	018e2b03          	lw	s6,24(t3)
    lw      t6, RT_CLUSTER_TASK_NB_CORES(t3)
1c00e8f4:	014e2f83          	lw	t6,20(t3)
    mv      ra, s5
1c00e8f8:	80d6                	mv	ra,s5

    add     sp, sp, t1
1c00e8fa:	911a                	add	sp,sp,t1

#ifdef ARCHI_NO_L1_TINY
    la      t4, __rt_cluster_nb_active_pe
    sw      t6, 0(t4)
#else
    sw      t6, %tiny(__rt_cluster_nb_active_pe)(x0)
1c00e8fc:	01f02c23          	sw	t6,24(zero) # 18 <__rt_first_free>
#endif

#ifdef __RT_USE_ASSERT
    // Update stack checking information
    beqz    t1, __rt_no_stack_check
1c00e900:	00030a63          	beqz	t1,1c00e914 <__rt_no_stack_check>
    sub     t4, sp, t1
1c00e904:	40610eb3          	sub	t4,sp,t1
    csrw    0x7D1, t4
1c00e908:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00e90c:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00e910:	7d00d073          	csrwi	0x7d0,1

1c00e914 <__rt_no_stack_check>:
#endif

__rt_no_stack_check:
    // Whatever the number of cores, we need to setup the barrier as the master code is compiled to use it
    sw      t5, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG(s3)
1c00e914:	09e9a223          	sw	t5,132(s3) # 204084 <__L2+0x184084>
#ifdef ARCHI_HAS_CC
    // When we have a cluster controller, don't configure the slave barrier
    // if we don't have have any slave
    beqz    t5, __rt_master_no_slave_barrier
#endif
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_MASK(s3)
1c00e918:	21e9a023          	sw	t5,512(s3)
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK(s3)
1c00e91c:	21e9a623          	sw	t5,524(s3)

1c00e920 <__rt_master_no_slave_barrier>:
    sw      t6, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK + EU_BARRIER_SIZE(s3)
#endif

    // Set stack on slaves
    // For that we push first the function for setting stack, then the stack size and the base
    p.beqimm t5, 0, __rt_master_loop_no_slave
1c00e920:	000f2863          	p.beqimm	t5,0,1c00e930 <__rt_master_loop_no_slave>
    sw      s10, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00e924:	09a9a023          	sw	s10,128(s3)
    sw      t2, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00e928:	0879a023          	sw	t2,128(s3)
    sw      sp, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00e92c:	0829a023          	sw	sp,128(s3)

1c00e930 <__rt_master_loop_no_slave>:

__rt_master_loop_no_slave:

    // Call the entry point, this will directly come back to the master loop
    jr      t0
1c00e930:	8282                	jr	t0

1c00e932 <__rt_master_sleep>:
    lw      a1, %tiny(__rt_pe_trace)(x0)
    li      a2, 1
    ebreak
#endif

    sw      s4, EU_CORE_MASK_OR(s3)
1c00e932:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00e936:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00e93a:	0149a223          	sw	s4,4(s3)
    j       __rt_master_loop
1c00e93e:	bfad                	j	1c00e8b8 <__rt_master_loop>

1c00e940 <__rt_push_event_to_fc_wait>:




__rt_push_event_to_fc_wait:
    sw      s4, EU_CORE_MASK_OR(s3)
1c00e940:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00e944:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00e948:	0149a223          	sw	s4,4(s3)
    j       __rt_push_event_to_fc_retry
1c00e94c:	bfb1                	j	1c00e8a8 <__rt_push_event_to_fc_retry>

1c00e94e <__rt_slave_start>:
__rt_slave_start:


#ifndef ARCHI_HAS_NO_DISPATCH

    li      s2, ARCHI_EU_DEMUX_ADDR
1c00e94e:	00204937          	lui	s2,0x204
    csrr    s3, 0xF14
1c00e952:	f14029f3          	csrr	s3,mhartid
    and     s3, s3, 0x1f
1c00e956:	01f9f993          	andi	s3,s3,31
    la      s4, __rt_fork_return
1c00e95a:	00000a17          	auipc	s4,0x0
1c00e95e:	012a0a13          	addi	s4,s4,18 # 1c00e96c <__rt_fork_return>
    la      s5, __rt_wait_for_dispatch
1c00e962:	00000a97          	auipc	s5,0x0
1c00e966:	00ea8a93          	addi	s5,s5,14 # 1c00e970 <__rt_wait_for_dispatch>
    j       __rt_wait_for_dispatch
1c00e96a:	a019                	j	1c00e970 <__rt_wait_for_dispatch>

1c00e96c <__rt_fork_return>:
    // When the cluster has a controller barrier 0 is used for normal team barrier
    // and barrier 1 is used for end of offload
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR + EU_BARRIER_SIZE(s2)
#else
#ifndef ARCHI_HAS_NO_BARRIER
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR(s2)
1c00e96c:	21c96283          	p.elw	t0,540(s2) # 20421c <__L2+0x18421c>

1c00e970 <__rt_wait_for_dispatch>:
    li      a2, 1
    ebreak
#endif

    // Wait for PC + arg information from dispatcher
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00e970:	08096283          	p.elw	t0,128(s2)
    p.elw   a0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00e974:	08096503          	p.elw	a0,128(s2)
    ebreak
    mv      a0, t1
#endif

    // Check if this is an entry with a barrier at the end (fork entry)
    andi    t1, t0, 1
1c00e978:	0012f313          	andi	t1,t0,1
    bne     t1, zero, __rt_other_entry
1c00e97c:	00031563          	bnez	t1,1c00e986 <__rt_other_entry>

1c00e980 <__rt_fork_entry>:

__rt_fork_entry:

    // Jump to the handler and prepare r9 to jump back just before the main loop
    add     ra, s4, x0
1c00e980:	000a00b3          	add	ra,s4,zero
    jr      t0
1c00e984:	8282                	jr	t0

1c00e986 <__rt_other_entry>:

__rt_other_entry:

  // Jump to the handler and prepare r9 to jump back directly to the main loop
    add     ra, s5, x0
1c00e986:	000a80b3          	add	ra,s5,zero
    jr      t0
1c00e98a:	8282                	jr	t0

1c00e98c <__rt_set_slave_stack>:

  .global __rt_set_slave_stack
__rt_set_slave_stack:

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00e98c:	7d005073          	csrwi	0x7d0,0
#endif

    // Multiply the stack size by the core ID and add the stack base to get our stack
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00e990:	08096283          	p.elw	t0,128(s2)
    // If the cluster has a cluster controller, the first slave has core ID 0
    // and thus we need to take the next stack
    addi     t5, s3, 1
    p.mul   t4, t5, a0
#else
    p.mul   t4, s3, a0
1c00e994:	02a98eb3          	mul	t4,s3,a0
#endif
    add     sp, t4, t0
1c00e998:	005e8133          	add	sp,t4,t0

#ifdef __RT_USE_ASSERT
    beqz    a0, __rt_no_stack_check_end
1c00e99c:	c909                	beqz	a0,1c00e9ae <__rt_no_stack_check_end>
    sub     t4, sp, a0
1c00e99e:	40a10eb3          	sub	t4,sp,a0
    csrw    0x7D1, t4
1c00e9a2:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00e9a6:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00e9aa:	7d00d073          	csrwi	0x7d0,1

1c00e9ae <__rt_no_stack_check_end>:
#endif
__rt_no_stack_check_end:
    ret
1c00e9ae:	8082                	ret

1c00e9b0 <__rt_dma_2d>:
#if defined(ARCHI_HAS_CLUSTER)
#ifndef ARCHI_NO_L1_TINY
    .global __rt_dma_2d
__rt_dma_2d:

    sw  x8, -4(sp)
1c00e9b0:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c00e9b4:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00e9b8:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c00e9bc:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00e9c0:	fec12623          	sw	a2,-20(sp)

    li  a2, ARCHI_MCHAN_DEMUX_ADDR
1c00e9c4:	00204637          	lui	a2,0x204
1c00e9c8:	40060613          	addi	a2,a2,1024 # 204400 <__L2+0x184400>

    lw  x8, %tiny(__rt_dma_first_pending)(x0)
1c00e9cc:	01402403          	lw	s0,20(zero) # 14 <__rt_bridge_eeprom_handle>

    lw  a1, CL_DMA_CMD_T_ID(x8)
1c00e9d0:	400c                	lw	a1,0(s0)
    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00e9d2:	4408                	lw	a0,8(s0)
    p.bsetr a1, x0, a1
1c00e9d4:	80b045b3          	p.bsetr	a1,zero,a1
    sw  a1, MCHAN_STATUS_OFFSET(a2)
1c00e9d8:	c24c                	sw	a1,4(a2)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00e9da:	480c                	lw	a1,16(s0)

    beqz a0, __rt_dma_2d_done
1c00e9dc:	c131                	beqz	a0,1c00ea20 <__rt_dma_2d_done>

1c00e9de <__rt_dma_2d_redo>:

__rt_dma_2d_redo:
    lw  x9, CL_DMA_CMD_T_CMD(x8)
1c00e9de:	4044                	lw	s1,4(s0)
    
    bgt a0, a1, __rt_dma_2d_not_last
1c00e9e0:	00a5c363          	blt	a1,a0,1c00e9e6 <__rt_dma_2d_not_last>
    mv  a1, a0
1c00e9e4:	85aa                	mv	a1,a0

1c00e9e6 <__rt_dma_2d_not_last>:

__rt_dma_2d_not_last:
    lw  a0, MCHAN_CMD_OFFSET(a2)
1c00e9e6:	4208                	lw	a0,0(a2)
    sw  a0, CL_DMA_CMD_T_ID(x8)
1c00e9e8:	c008                	sw	a0,0(s0)

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00e9ea:	4408                	lw	a0,8(s0)

    p.inserti x9, a1, MCHAN_CMD_CMD_LEN_WIDTH-1, MCHAN_CMD_CMD_LEN_BIT
1c00e9ec:	de05a4b3          	p.insert	s1,a1,15,0

    sw  x9, MCHAN_CMD_OFFSET(a2)   // cmd
1c00e9f0:	c204                	sw	s1,0(a2)

    sub a0, a0, a1
1c00e9f2:	8d0d                	sub	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00e9f4:	c408                	sw	a0,8(s0)

    lw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00e9f6:	4848                	lw	a0,20(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // local address
1c00e9f8:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00e9fa:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00e9fc:	c848                	sw	a0,20(s0)


    lw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00e9fe:	4c08                	lw	a0,24(s0)
    lw  a1, CL_DMA_CMD_T_STRIDE(x8)
1c00ea00:	444c                	lw	a1,12(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // external address
1c00ea02:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00ea04:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00ea06:	cc08                	sw	a0,24(s0)

1c00ea08 <__rt_dma_2d_exit>:

__rt_dma_2d_exit:
    lw  x8, -4(sp)
1c00ea08:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c00ea0c:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c00ea10:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c00ea14:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00ea18:	fec12603          	lw	a2,-20(sp)

    mret
1c00ea1c:	30200073          	mret

1c00ea20 <__rt_dma_2d_done>:

__rt_dma_2d_done:
    sw  x0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00ea20:	00042c23          	sw	zero,24(s0)

    lw  x9, CL_DMA_CMD_T_NEXT(x8)
1c00ea24:	4c44                	lw	s1,28(s0)
    sw  x9, %tiny(__rt_dma_first_pending)(x0)
1c00ea26:	00902a23          	sw	s1,20(zero) # 14 <__rt_bridge_eeprom_handle>

    li  x8, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + (RT_DMA_EVENT<<2)
1c00ea2a:	00204437          	lui	s0,0x204
1c00ea2e:	11440413          	addi	s0,s0,276 # 204114 <__L2+0x184114>
    sw  x0, EU_CORE_TRIGG_SW_EVENT(x8)
1c00ea32:	00042023          	sw	zero,0(s0)

    beqz x9, __rt_dma_2d_exit
1c00ea36:	d8e9                	beqz	s1,1c00ea08 <__rt_dma_2d_exit>

    mv  x8, x9
1c00ea38:	8426                	mv	s0,s1

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00ea3a:	4408                	lw	a0,8(s0)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00ea3c:	480c                	lw	a1,16(s0)

    j   __rt_dma_2d_redo
1c00ea3e:	b745                	j	1c00e9de <__rt_dma_2d_redo>
